Param3<string,string,string>::Param3()
//scripts/1_Core/param.c
000096:0x00135b20:	moves	param1, p1
000097:0x00135b30:	moves	param2, p2
000098:0x00135b40:	moves	param3, p3
000098:0x00135b50:	rts
Param3<string,string,string>::Serialize()
000103:0x00135b58:	icall	
000103:0x00135b68:	cmpi	#return, _i0
000103:0x00135b78:	beq	0x135be8
000103:0x00135b80:	icall	
000103:0x00135b90:	cmpi	#return, _i0
000103:0x00135ba0:	beq	0x135be8
000103:0x00135ba8:	icall	
000103:0x00135bb8:	cmpi	#return, _i0
000103:0x00135bc8:	beq	0x135be8
000103:0x00135bd0:	imove	#return, 0x000001
000103:0x00135be0:	jump	0x135bf8
000103:0x00135be8:	imove	#return, 0x000000
000103:0x00135bf8:	rts
000103:0x00135c00:	rts
Param3<string,string,string>::Deserializer()
000108:0x00135c08:	icall	
000108:0x00135c18:	cmpi	#return, _i0
000108:0x00135c28:	beq	0x135c98
000108:0x00135c30:	icall	
000108:0x00135c40:	cmpi	#return, _i0
000108:0x00135c50:	beq	0x135c98
000108:0x00135c58:	icall	
000108:0x00135c68:	cmpi	#return, _i0
000108:0x00135c78:	beq	0x135c98
000108:0x00135c80:	imove	#return, 0x000001
000108:0x00135c90:	jump	0x135ca8
000108:0x00135c98:	imove	#return, 0x000000
000108:0x00135ca8:	rts
000108:0x00135cb0:	rts
Param2<string,bool>::Param2()
000066:0x00135dd8:	moves	param1, p1
000067:0x00135de8:	move	param2, p2
000067:0x00135df8:	rts
Param2<string,bool>::Serialize()
000072:0x00135e00:	icall	
000072:0x00135e10:	cmpi	#return, _i0
000072:0x00135e20:	beq	0x135e68
000072:0x00135e28:	icall	
000072:0x00135e38:	cmpi	#return, _i0
000072:0x00135e48:	beq	0x135e68
000072:0x00135e50:	imove	#return, 0x000001
000072:0x00135e60:	jump	0x135e78
000072:0x00135e68:	imove	#return, 0x000000
000072:0x00135e78:	rts
000072:0x00135e80:	rts
Param2<string,bool>::Deserializer()
000077:0x00135e88:	icall	
000077:0x00135e98:	cmpi	#return, _i0
000077:0x00135ea8:	beq	0x135ef0
000077:0x00135eb0:	icall	
000077:0x00135ec0:	cmpi	#return, _i0
000077:0x00135ed0:	beq	0x135ef0
000077:0x00135ed8:	imove	#return, 0x000001
000077:0x00135ee8:	jump	0x135f00
000077:0x00135ef0:	imove	#return, 0x000000
000077:0x00135f00:	rts
000077:0x00135f08:	rts
array<BiosPrivacyPermissionResult>::InsertAll()
//scripts/1_Core/proto\enscript.c
000427:0x00136750:	imove	i, 0x000000
000427:0x00136760:	jump	0x136780
000427:0x00136768:	move	@m00, i
000427:0x00136778:	inc	i
000427:0x00136780:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000427:0x00136788:	cmpi	i, #return
000427:0x00136798:	bge	0x1367c8
000429:0x001367a0:	icall	
000429:0x001367b0:	icall	
000429:0x001367c0:	jump	0x136768
000429:0x001367c8:	rts
array<BiosPrivacyPermissionResult>::RemoveItem()
000479:0x001367f8:	movefm	@c00, value
000479:0x00136808:	icall	
000479:0x00136818:	move	remove_index, #return
000481:0x00136828:	cmpi	remove_index, _i0
000481:0x00136838:	blt	0x136850
000483:0x00136840:	ncalli	array<BiosPrivacyPermissionResult>.RemoveOrdered(remove_index)
000483:0x00136850:	rts
array<BiosPrivacyPermissionResult>::RemoveItemUnOrdered()
000489:0x00136880:	movefm	@c00, value
000489:0x00136890:	icall	
000489:0x001368a0:	move	remove_index, #return
000491:0x001368b0:	cmpi	remove_index, _i0
000491:0x001368c0:	blt	0x1368d8
000493:0x001368c8:	ncalli	array<BiosPrivacyPermissionResult>.Remove(remove_index)
000493:0x001368d8:	rts
array<BiosPrivacyPermissionResult>::IsValidIndex()
000499:0x00136908:	cmpi	index, _i-1
000499:0x00136918:	ble	0x136958
000499:0x00136920:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000499:0x00136928:	cmpi	index, #return
000499:0x00136938:	bge	0x136958
000499:0x00136940:	imove	#return, 0x000001
000499:0x00136950:	jump	0x136968
000499:0x00136958:	imove	#return, 0x000000
000499:0x00136968:	rts
000499:0x00136970:	rts
array<BiosPrivacyPermissionResult>::Debug()
000525:0x00136a40:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000525:0x00136a48:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00136a78:	icall	Print(#return)
000526:0x00136a88:	imove	i, 0x000000
000526:0x00136a98:	jump	0x136ab8
000526:0x00136aa0:	move	@m00, i
000526:0x00136ab0:	inc	i
000526:0x00136ab8:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000526:0x00136ac0:	cmpi	i, #return
000526:0x00136ad0:	bge	0x136b48
000528:0x00136ad8:	icall	
000528:0x00136ae8:	movetm	item, #return
000529:0x00136af8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00136b28:	icall	Print(#return)
000529:0x00136b38:	release	item
000529:0x00136b40:	jump	0x136aa0
000529:0x00136b48:	rts
array<BiosPrivacyPermissionResult>::GetRandomIndex()
000544:0x00136b50:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000544:0x00136b58:	move	@m00, #return
000544:0x00136b68:	cmpi	@m00, _i0
000544:0x00136b78:	ble	0x136bb0
000546:0x00136b80:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000546:0x00136b88:	icall	RandomInt(_i0, #return)
000546:0x00136b98:	move	#return, #return
000546:0x00136ba8:	rts
000549:0x00136bb0:	imove	#return, 0xffffffff
000549:0x00136bc0:	rts
000549:0x00136bc8:	rts
array<BiosPrivacyPermissionResult>::GetRandomElement()
000563:0x00136bd0:	call	
000563:0x00136be0:	icall	
000563:0x00136bf0:	movetm	#return, #return
000563:0x00136c00:	rts
000563:0x00136c08:	rts
array<BiosPrivacyPermissionResult>::SwapItems()
000568:0x00136c38:	icall	
000568:0x00136c48:	movetm	item1, #return
000569:0x00136c58:	icall	
000569:0x00136c68:	icall	
000570:0x00136c78:	movefm	@c00, item1
000570:0x00136c88:	icall	
000570:0x00136c98:	release	item1
000570:0x00136ca0:	rts
array<BiosPrivacyPermissionResult>::InsertArray()
000575:0x00136cf8:	imove	i, 0x000000
000575:0x00136d08:	jump	0x136d28
000575:0x00136d10:	move	@m00, i
000575:0x00136d20:	inc	i
000575:0x00136d28:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000575:0x00136d30:	cmpi	i, #return
000575:0x00136d40:	bge	0x136d98
000577:0x00136d48:	icall	
000577:0x00136d58:	movetm	item, #return
000578:0x00136d68:	movefm	@c00, item
000578:0x00136d78:	icall	
000578:0x00136d88:	release	item
000578:0x00136d90:	jump	0x136d10
000578:0x00136d98:	rts
array<BiosPrivacyPermissionResult>::Invert()
000584:0x00136e18:	imove	left, 0x000000
000585:0x00136e28:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000585:0x00136e30:	subi	right, #return, _i1
000586:0x00136e40:	cmpi	right, _i0
000586:0x00136e50:	ble	0x136f10
000588:0x00136e58:	cmpi	left, right
000588:0x00136e68:	bge	0x136f10
000590:0x00136e70:	icall	
000590:0x00136e80:	movetm	temp, #return
000591:0x00136e90:	move	@m00, left
000591:0x00136ea0:	inc	left
000591:0x00136ea8:	icall	
000591:0x00136eb8:	icall	
000592:0x00136ec8:	move	@m00, right
000592:0x00136ed8:	dec	right
000592:0x00136ee0:	movefm	@c00, temp
000592:0x00136ef0:	icall	
000592:0x00136f00:	release	temp
000592:0x00136f08:	jump	0x136e58
000592:0x00136f10:	rts
array<BiosPrivacyPermissionResult>::MoveIndex()
000612:0x00136f68:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000612:0x00136f70:	move	count, #return
000613:0x00136f80:	move	new_index, curr_index
000615:0x00136f90:	cmpi	move_number, _i0
000615:0x00136fa0:	ble	0x136fc8
000617:0x00136fa8:	addi	@m00, curr_index, move_number
000617:0x00136fb8:	move	new_index, @m00
000620:0x00136fc8:	cmpi	move_number, _i0
000620:0x00136fd8:	bge	0x137080
000622:0x00136fe0:	subi	@m00, curr_index, move_number
000622:0x00136ff0:	move	new_index, @m00
000624:0x00137000:	cmpi	new_index, _i0
000624:0x00137010:	bge	0x137080
000626:0x00137018:	subi	@m01, _i0, count
000626:0x00137028:	cmpi	new_index, @m01
000626:0x00137038:	bgt	0x137060
000628:0x00137040:	modi	@m00, new_index, count
000628:0x00137050:	move	new_index, @m00
000631:0x00137060:	addi	@m00, new_index, count
000631:0x00137070:	move	new_index, @m00
000635:0x00137080:	cmpi	new_index, count
000635:0x00137090:	blt	0x1370b8
000637:0x00137098:	modi	@m00, new_index, count
000637:0x001370a8:	move	new_index, @m00
000641:0x001370b8:	move	#return, new_index
000641:0x001370c8:	rts
000641:0x001370d0:	rts
array<BiosPrivacyPermissionResult>::ShuffleArray()
000646:0x00137100:	imove	i, 0x000000
000646:0x00137110:	jump	0x137130
000646:0x00137118:	move	@m00, i
000646:0x00137128:	inc	i
000646:0x00137130:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000646:0x00137138:	cmpi	i, #return
000646:0x00137148:	bge	0x137180
000648:0x00137150:	call	
000648:0x00137160:	call	
000648:0x00137178:	jump	0x137118
000648:0x00137180:	rts
array<BiosPrivacyPermissionResult>::DifferentAtPosition()
000666:0x00137200:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000666:0x00137208:	move	@m00, #return
000666:0x00137218:	push	#return
000666:0x00137220:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000666:0x00137228:	move	@m02, #return
000666:0x00137238:	pop	#return
000666:0x00137240:	cmpi	@m00, @m02
000666:0x00137250:	beq	0x137280
000668:0x00137258:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00137268:	imove	#return, 0xffffffff
000669:0x00137278:	rts
000672:0x00137280:	imove	i, 0x000000
000672:0x00137290:	jump	0x1372a0
000672:0x00137298:	inc	i
000672:0x001372a0:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000672:0x001372a8:	cmpi	i, #return
000672:0x001372b8:	bge	0x137348
000674:0x001372c0:	icall	
000674:0x001372d0:	movec	@c00, #return
000674:0x001372e0:	pushc	#return
000674:0x001372e8:	icall	
000674:0x001372f8:	movec	@c02, #return
000674:0x00137308:	popc	#return
000674:0x00137310:	cmpc	@c00, @c02
000674:0x00137320:	beq	0x137340
000676:0x00137328:	move	#return, i
000676:0x00137338:	rts
000676:0x00137340:	jump	0x137298
000680:0x00137348:	imove	#return, 0xffffffff
000680:0x00137358:	rts
000680:0x00137360:	rts
array<@BiosPrivacyPermissionResult>::InsertAll()
000427:0x00137778:	imove	i, 0x000000
000427:0x00137788:	jump	0x1377a8
000427:0x00137790:	move	@m00, i
000427:0x001377a0:	inc	i
000427:0x001377a8:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000427:0x001377b0:	cmpi	i, #return
000427:0x001377c0:	bge	0x1377f0
000429:0x001377c8:	icall	
000429:0x001377d8:	icall	
000429:0x001377e8:	jump	0x137790
000429:0x001377f0:	rts
array<@BiosPrivacyPermissionResult>::RemoveItem()
000479:0x00137820:	movefm	@c00, value
000479:0x00137830:	icall	
000479:0x00137840:	move	remove_index, #return
000481:0x00137850:	cmpi	remove_index, _i0
000481:0x00137860:	blt	0x137878
000483:0x00137868:	ncalli	array<@BiosPrivacyPermissionResult>.RemoveOrdered(remove_index)
000483:0x00137878:	rts
array<@BiosPrivacyPermissionResult>::RemoveItemUnOrdered()
000489:0x001378a8:	movefm	@c00, value
000489:0x001378b8:	icall	
000489:0x001378c8:	move	remove_index, #return
000491:0x001378d8:	cmpi	remove_index, _i0
000491:0x001378e8:	blt	0x137900
000493:0x001378f0:	ncalli	array<@BiosPrivacyPermissionResult>.Remove(remove_index)
000493:0x00137900:	rts
array<@BiosPrivacyPermissionResult>::IsValidIndex()
000499:0x00137908:	cmpi	index, _i-1
000499:0x00137918:	ble	0x137958
000499:0x00137920:	ncalli	array<@BiosPrivacyPermissionResult>.Count()
000499:0x00137928:	cmpi	index, #return
000499:0x00137938:	bge	0x137958
000499:0x00137940:	imove	#return, 0x000001
000499:0x00137950:	jump	0x137968
000499:0x00137958:	imove	#return, 0x000000
000499:0x00137968:	rts
000499:0x00137970:	rts
array<@BiosPrivacyPermissionResult>::Debug()
000525:0x001379c8:	ncalli	array<@BiosPrivacyPermissionResult>.Count()
000525:0x001379d0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00137a00:	icall	Print(#return)
000526:0x00137a10:	imove	i, 0x000000
000526:0x00137a20:	jump	0x137a40
000526:0x00137a28:	move	@m00, i
000526:0x00137a38:	inc	i
000526:0x00137a40:	ncalli	array<@BiosPrivacyPermissionResult>.Count()
000526:0x00137a48:	cmpi	i, #return
000526:0x00137a58:	bge	0x137ad0
000528:0x00137a60:	icall	
000528:0x00137a70:	movetm	item, #return
000529:0x00137a80:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00137ab0:	icall	Print(#return)
000529:0x00137ac0:	release	item
000529:0x00137ac8:	jump	0x137a28
000529:0x00137ad0:	rts
array<@BiosPrivacyPermissionResult>::GetRandomIndex()
000544:0x00137ad8:	ncalli	array<@BiosPrivacyPermissionResult>.Count()
000544:0x00137ae0:	move	@m00, #return
000544:0x00137af0:	cmpi	@m00, _i0
000544:0x00137b00:	ble	0x137b38
000546:0x00137b08:	ncalli	array<@BiosPrivacyPermissionResult>.Count()
000546:0x00137b10:	icall	RandomInt(_i0, #return)
000546:0x00137b20:	move	#return, #return
000546:0x00137b30:	rts
000549:0x00137b38:	imove	#return, 0xffffffff
000549:0x00137b48:	rts
000549:0x00137b50:	rts
array<@BiosPrivacyPermissionResult>::GetRandomElement()
000563:0x00137b58:	call	
000563:0x00137b68:	icall	
000563:0x00137b78:	movetm	#return, #return
000563:0x00137b88:	rts
000563:0x00137b90:	rts
array<@BiosPrivacyPermissionResult>::SwapItems()
000568:0x00137bc0:	icall	
000568:0x00137bd0:	movetm	item1, #return
000569:0x00137be0:	icall	
000569:0x00137bf0:	icall	
000570:0x00137c00:	movefm	@c00, item1
000570:0x00137c10:	icall	
000570:0x00137c20:	release	item1
000570:0x00137c28:	rts
array<@BiosPrivacyPermissionResult>::InsertArray()
000575:0x00137c80:	imove	i, 0x000000
000575:0x00137c90:	jump	0x137cb0
000575:0x00137c98:	move	@m00, i
000575:0x00137ca8:	inc	i
000575:0x00137cb0:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000575:0x00137cb8:	cmpi	i, #return
000575:0x00137cc8:	bge	0x137d20
000577:0x00137cd0:	icall	
000577:0x00137ce0:	movetm	item, #return
000578:0x00137cf0:	movefm	@c00, item
000578:0x00137d00:	icall	
000578:0x00137d10:	release	item
000578:0x00137d18:	jump	0x137c98
000578:0x00137d20:	rts
array<@BiosPrivacyPermissionResult>::Invert()
000584:0x00137da0:	imove	left, 0x000000
000585:0x00137db0:	ncalli	array<@BiosPrivacyPermissionResult>.Count()
000585:0x00137db8:	subi	right, #return, _i1
000586:0x00137dc8:	cmpi	right, _i0
000586:0x00137dd8:	ble	0x137e98
000588:0x00137de0:	cmpi	left, right
000588:0x00137df0:	bge	0x137e98
000590:0x00137df8:	icall	
000590:0x00137e08:	movetm	temp, #return
000591:0x00137e18:	move	@m00, left
000591:0x00137e28:	inc	left
000591:0x00137e30:	icall	
000591:0x00137e40:	icall	
000592:0x00137e50:	move	@m00, right
000592:0x00137e60:	dec	right
000592:0x00137e68:	movefm	@c00, temp
000592:0x00137e78:	icall	
000592:0x00137e88:	release	temp
000592:0x00137e90:	jump	0x137de0
000592:0x00137e98:	rts
array<@BiosPrivacyPermissionResult>::MoveIndex()
000612:0x00137ef0:	ncalli	array<@BiosPrivacyPermissionResult>.Count()
000612:0x00137ef8:	move	count, #return
000613:0x00137f08:	move	new_index, curr_index
000615:0x00137f18:	cmpi	move_number, _i0
000615:0x00137f28:	ble	0x137f50
000617:0x00137f30:	addi	@m00, curr_index, move_number
000617:0x00137f40:	move	new_index, @m00
000620:0x00137f50:	cmpi	move_number, _i0
000620:0x00137f60:	bge	0x138008
000622:0x00137f68:	subi	@m00, curr_index, move_number
000622:0x00137f78:	move	new_index, @m00
000624:0x00137f88:	cmpi	new_index, _i0
000624:0x00137f98:	bge	0x138008
000626:0x00137fa0:	subi	@m01, _i0, count
000626:0x00137fb0:	cmpi	new_index, @m01
000626:0x00137fc0:	bgt	0x137fe8
000628:0x00137fc8:	modi	@m00, new_index, count
000628:0x00137fd8:	move	new_index, @m00
000631:0x00137fe8:	addi	@m00, new_index, count
000631:0x00137ff8:	move	new_index, @m00
000635:0x00138008:	cmpi	new_index, count
000635:0x00138018:	blt	0x138040
000637:0x00138020:	modi	@m00, new_index, count
000637:0x00138030:	move	new_index, @m00
000641:0x00138040:	move	#return, new_index
000641:0x00138050:	rts
000641:0x00138058:	rts
array<@BiosPrivacyPermissionResult>::ShuffleArray()
000646:0x00138088:	imove	i, 0x000000
000646:0x00138098:	jump	0x1380b8
000646:0x001380a0:	move	@m00, i
000646:0x001380b0:	inc	i
000646:0x001380b8:	ncalli	array<@BiosPrivacyPermissionResult>.Count()
000646:0x001380c0:	cmpi	i, #return
000646:0x001380d0:	bge	0x138108
000648:0x001380d8:	call	
000648:0x001380e8:	call	
000648:0x00138100:	jump	0x1380a0
000648:0x00138108:	rts
array<@BiosPrivacyPermissionResult>::DifferentAtPosition()
000666:0x00138138:	ncalli	array<@BiosPrivacyPermissionResult>.Count()
000666:0x00138140:	move	@m00, #return
000666:0x00138150:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000666:0x00138158:	cmpi	@m00, #return
000666:0x00138168:	beq	0x138198
000668:0x00138170:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00138180:	imove	#return, 0xffffffff
000669:0x00138190:	rts
000672:0x00138198:	imove	i, 0x000000
000672:0x001381a8:	jump	0x1381b8
000672:0x001381b0:	inc	i
000672:0x001381b8:	ncalli	array<BiosPrivacyPermissionResult>.Count()
000672:0x001381c0:	cmpi	i, #return
000672:0x001381d0:	bge	0x138240
000674:0x001381d8:	icall	
000674:0x001381e8:	movec	@c00, #return
000674:0x001381f8:	icall	
000674:0x00138208:	cmpc	@c00, #return
000674:0x00138218:	beq	0x138238
000676:0x00138220:	move	#return, i
000676:0x00138230:	rts
000676:0x00138238:	jump	0x1381b0
000680:0x00138240:	imove	#return, 0xffffffff
000680:0x00138250:	rts
000680:0x00138258:	rts
array<BiosPrivacyUidResult>::InsertAll()
000427:0x00138a98:	imove	i, 0x000000
000427:0x00138aa8:	jump	0x138ac8
000427:0x00138ab0:	move	@m00, i
000427:0x00138ac0:	inc	i
000427:0x00138ac8:	ncalli	array<BiosPrivacyUidResult>.Count()
000427:0x00138ad0:	cmpi	i, #return
000427:0x00138ae0:	bge	0x138b10
000429:0x00138ae8:	icall	
000429:0x00138af8:	icall	
000429:0x00138b08:	jump	0x138ab0
000429:0x00138b10:	rts
array<BiosPrivacyUidResult>::RemoveItem()
000479:0x00138b40:	movefm	@c00, value
000479:0x00138b50:	icall	
000479:0x00138b60:	move	remove_index, #return
000481:0x00138b70:	cmpi	remove_index, _i0
000481:0x00138b80:	blt	0x138b98
000483:0x00138b88:	ncalli	array<BiosPrivacyUidResult>.RemoveOrdered(remove_index)
000483:0x00138b98:	rts
array<BiosPrivacyUidResult>::RemoveItemUnOrdered()
000489:0x00138bc8:	movefm	@c00, value
000489:0x00138bd8:	icall	
000489:0x00138be8:	move	remove_index, #return
000491:0x00138bf8:	cmpi	remove_index, _i0
000491:0x00138c08:	blt	0x138c20
000493:0x00138c10:	ncalli	array<BiosPrivacyUidResult>.Remove(remove_index)
000493:0x00138c20:	rts
array<BiosPrivacyUidResult>::IsValidIndex()
000499:0x00138c28:	cmpi	index, _i-1
000499:0x00138c38:	ble	0x138c78
000499:0x00138c40:	ncalli	array<BiosPrivacyUidResult>.Count()
000499:0x00138c48:	cmpi	index, #return
000499:0x00138c58:	bge	0x138c78
000499:0x00138c60:	imove	#return, 0x000001
000499:0x00138c70:	jump	0x138c88
000499:0x00138c78:	imove	#return, 0x000000
000499:0x00138c88:	rts
000499:0x00138c90:	rts
array<BiosPrivacyUidResult>::Debug()
000525:0x00138ce8:	ncalli	array<BiosPrivacyUidResult>.Count()
000525:0x00138cf0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00138d20:	icall	Print(#return)
000526:0x00138d30:	imove	i, 0x000000
000526:0x00138d40:	jump	0x138d60
000526:0x00138d48:	move	@m00, i
000526:0x00138d58:	inc	i
000526:0x00138d60:	ncalli	array<BiosPrivacyUidResult>.Count()
000526:0x00138d68:	cmpi	i, #return
000526:0x00138d78:	bge	0x138df0
000528:0x00138d80:	icall	
000528:0x00138d90:	movetm	item, #return
000529:0x00138da0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00138dd0:	icall	Print(#return)
000529:0x00138de0:	release	item
000529:0x00138de8:	jump	0x138d48
000529:0x00138df0:	rts
array<BiosPrivacyUidResult>::GetRandomIndex()
000544:0x00138df8:	ncalli	array<BiosPrivacyUidResult>.Count()
000544:0x00138e00:	move	@m00, #return
000544:0x00138e10:	cmpi	@m00, _i0
000544:0x00138e20:	ble	0x138e58
000546:0x00138e28:	ncalli	array<BiosPrivacyUidResult>.Count()
000546:0x00138e30:	icall	RandomInt(_i0, #return)
000546:0x00138e40:	move	#return, #return
000546:0x00138e50:	rts
000549:0x00138e58:	imove	#return, 0xffffffff
000549:0x00138e68:	rts
000549:0x00138e70:	rts
array<BiosPrivacyUidResult>::GetRandomElement()
000563:0x00138e78:	call	
000563:0x00138e88:	icall	
000563:0x00138e98:	movetm	#return, #return
000563:0x00138ea8:	rts
000563:0x00138eb0:	rts
array<BiosPrivacyUidResult>::SwapItems()
000568:0x00138ee0:	icall	
000568:0x00138ef0:	movetm	item1, #return
000569:0x00138f00:	icall	
000569:0x00138f10:	icall	
000570:0x00138f20:	movefm	@c00, item1
000570:0x00138f30:	icall	
000570:0x00138f40:	release	item1
000570:0x00138f48:	rts
array<BiosPrivacyUidResult>::InsertArray()
000575:0x00138fa0:	imove	i, 0x000000
000575:0x00138fb0:	jump	0x138fd0
000575:0x00138fb8:	move	@m00, i
000575:0x00138fc8:	inc	i
000575:0x00138fd0:	ncalli	array<BiosPrivacyUidResult>.Count()
000575:0x00138fd8:	cmpi	i, #return
000575:0x00138fe8:	bge	0x139040
000577:0x00138ff0:	icall	
000577:0x00139000:	movetm	item, #return
000578:0x00139010:	movefm	@c00, item
000578:0x00139020:	icall	
000578:0x00139030:	release	item
000578:0x00139038:	jump	0x138fb8
000578:0x00139040:	rts
array<BiosPrivacyUidResult>::Invert()
000584:0x001390c0:	imove	left, 0x000000
000585:0x001390d0:	ncalli	array<BiosPrivacyUidResult>.Count()
000585:0x001390d8:	subi	right, #return, _i1
000586:0x001390e8:	cmpi	right, _i0
000586:0x001390f8:	ble	0x1391b8
000588:0x00139100:	cmpi	left, right
000588:0x00139110:	bge	0x1391b8
000590:0x00139118:	icall	
000590:0x00139128:	movetm	temp, #return
000591:0x00139138:	move	@m00, left
000591:0x00139148:	inc	left
000591:0x00139150:	icall	
000591:0x00139160:	icall	
000592:0x00139170:	move	@m00, right
000592:0x00139180:	dec	right
000592:0x00139188:	movefm	@c00, temp
000592:0x00139198:	icall	
000592:0x001391a8:	release	temp
000592:0x001391b0:	jump	0x139100
000592:0x001391b8:	rts
array<BiosPrivacyUidResult>::MoveIndex()
000612:0x00139210:	ncalli	array<BiosPrivacyUidResult>.Count()
000612:0x00139218:	move	count, #return
000613:0x00139228:	move	new_index, curr_index
000615:0x00139238:	cmpi	move_number, _i0
000615:0x00139248:	ble	0x139270
000617:0x00139250:	addi	@m00, curr_index, move_number
000617:0x00139260:	move	new_index, @m00
000620:0x00139270:	cmpi	move_number, _i0
000620:0x00139280:	bge	0x139328
000622:0x00139288:	subi	@m00, curr_index, move_number
000622:0x00139298:	move	new_index, @m00
000624:0x001392a8:	cmpi	new_index, _i0
000624:0x001392b8:	bge	0x139328
000626:0x001392c0:	subi	@m01, _i0, count
000626:0x001392d0:	cmpi	new_index, @m01
000626:0x001392e0:	bgt	0x139308
000628:0x001392e8:	modi	@m00, new_index, count
000628:0x001392f8:	move	new_index, @m00
000631:0x00139308:	addi	@m00, new_index, count
000631:0x00139318:	move	new_index, @m00
000635:0x00139328:	cmpi	new_index, count
000635:0x00139338:	blt	0x139360
000637:0x00139340:	modi	@m00, new_index, count
000637:0x00139350:	move	new_index, @m00
000641:0x00139360:	move	#return, new_index
000641:0x00139370:	rts
000641:0x00139378:	rts
array<BiosPrivacyUidResult>::ShuffleArray()
000646:0x001393a8:	imove	i, 0x000000
000646:0x001393b8:	jump	0x1393d8
000646:0x001393c0:	move	@m00, i
000646:0x001393d0:	inc	i
000646:0x001393d8:	ncalli	array<BiosPrivacyUidResult>.Count()
000646:0x001393e0:	cmpi	i, #return
000646:0x001393f0:	bge	0x139428
000648:0x001393f8:	call	
000648:0x00139408:	call	
000648:0x00139420:	jump	0x1393c0
000648:0x00139428:	rts
array<BiosPrivacyUidResult>::DifferentAtPosition()
000666:0x00139458:	ncalli	array<BiosPrivacyUidResult>.Count()
000666:0x00139460:	move	@m00, #return
000666:0x00139470:	push	#return
000666:0x00139478:	ncalli	array<BiosPrivacyUidResult>.Count()
000666:0x00139480:	move	@m02, #return
000666:0x00139490:	pop	#return
000666:0x00139498:	cmpi	@m00, @m02
000666:0x001394a8:	beq	0x1394d8
000668:0x001394b0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001394c0:	imove	#return, 0xffffffff
000669:0x001394d0:	rts
000672:0x001394d8:	imove	i, 0x000000
000672:0x001394e8:	jump	0x1394f8
000672:0x001394f0:	inc	i
000672:0x001394f8:	ncalli	array<BiosPrivacyUidResult>.Count()
000672:0x00139500:	cmpi	i, #return
000672:0x00139510:	bge	0x1395a0
000674:0x00139518:	icall	
000674:0x00139528:	movec	@c00, #return
000674:0x00139538:	pushc	#return
000674:0x00139540:	icall	
000674:0x00139550:	movec	@c02, #return
000674:0x00139560:	popc	#return
000674:0x00139568:	cmpc	@c00, @c02
000674:0x00139578:	beq	0x139598
000676:0x00139580:	move	#return, i
000676:0x00139590:	rts
000676:0x00139598:	jump	0x1394f0
000680:0x001395a0:	imove	#return, 0xffffffff
000680:0x001395b0:	rts
000680:0x001395b8:	rts
array<@BiosPrivacyUidResult>::InsertAll()
000427:0x001399d0:	imove	i, 0x000000
000427:0x001399e0:	jump	0x139a00
000427:0x001399e8:	move	@m00, i
000427:0x001399f8:	inc	i
000427:0x00139a00:	ncalli	array<BiosPrivacyUidResult>.Count()
000427:0x00139a08:	cmpi	i, #return
000427:0x00139a18:	bge	0x139a48
000429:0x00139a20:	icall	
000429:0x00139a30:	icall	
000429:0x00139a40:	jump	0x1399e8
000429:0x00139a48:	rts
array<@BiosPrivacyUidResult>::RemoveItem()
000479:0x00139a78:	movefm	@c00, value
000479:0x00139a88:	icall	
000479:0x00139a98:	move	remove_index, #return
000481:0x00139aa8:	cmpi	remove_index, _i0
000481:0x00139ab8:	blt	0x139ad0
000483:0x00139ac0:	ncalli	array<@BiosPrivacyUidResult>.RemoveOrdered(remove_index)
000483:0x00139ad0:	rts
array<@BiosPrivacyUidResult>::RemoveItemUnOrdered()
000489:0x00139b00:	movefm	@c00, value
000489:0x00139b10:	icall	
000489:0x00139b20:	move	remove_index, #return
000491:0x00139b30:	cmpi	remove_index, _i0
000491:0x00139b40:	blt	0x139b58
000493:0x00139b48:	ncalli	array<@BiosPrivacyUidResult>.Remove(remove_index)
000493:0x00139b58:	rts
array<@BiosPrivacyUidResult>::IsValidIndex()
000499:0x00139b60:	cmpi	index, _i-1
000499:0x00139b70:	ble	0x139bb0
000499:0x00139b78:	ncalli	array<@BiosPrivacyUidResult>.Count()
000499:0x00139b80:	cmpi	index, #return
000499:0x00139b90:	bge	0x139bb0
000499:0x00139b98:	imove	#return, 0x000001
000499:0x00139ba8:	jump	0x139bc0
000499:0x00139bb0:	imove	#return, 0x000000
000499:0x00139bc0:	rts
000499:0x00139bc8:	rts
array<@BiosPrivacyUidResult>::Debug()
000525:0x00139c20:	ncalli	array<@BiosPrivacyUidResult>.Count()
000525:0x00139c28:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00139c58:	icall	Print(#return)
000526:0x00139c68:	imove	i, 0x000000
000526:0x00139c78:	jump	0x139c98
000526:0x00139c80:	move	@m00, i
000526:0x00139c90:	inc	i
000526:0x00139c98:	ncalli	array<@BiosPrivacyUidResult>.Count()
000526:0x00139ca0:	cmpi	i, #return
000526:0x00139cb0:	bge	0x139d28
000528:0x00139cb8:	icall	
000528:0x00139cc8:	movetm	item, #return
000529:0x00139cd8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00139d08:	icall	Print(#return)
000529:0x00139d18:	release	item
000529:0x00139d20:	jump	0x139c80
000529:0x00139d28:	rts
array<@BiosPrivacyUidResult>::GetRandomIndex()
000544:0x00139d30:	ncalli	array<@BiosPrivacyUidResult>.Count()
000544:0x00139d38:	move	@m00, #return
000544:0x00139d48:	cmpi	@m00, _i0
000544:0x00139d58:	ble	0x139d90
000546:0x00139d60:	ncalli	array<@BiosPrivacyUidResult>.Count()
000546:0x00139d68:	icall	RandomInt(_i0, #return)
000546:0x00139d78:	move	#return, #return
000546:0x00139d88:	rts
000549:0x00139d90:	imove	#return, 0xffffffff
000549:0x00139da0:	rts
000549:0x00139da8:	rts
array<@BiosPrivacyUidResult>::GetRandomElement()
000563:0x00139db0:	call	
000563:0x00139dc0:	icall	
000563:0x00139dd0:	movetm	#return, #return
000563:0x00139de0:	rts
000563:0x00139de8:	rts
array<@BiosPrivacyUidResult>::SwapItems()
000568:0x00139e18:	icall	
000568:0x00139e28:	movetm	item1, #return
000569:0x00139e38:	icall	
000569:0x00139e48:	icall	
000570:0x00139e58:	movefm	@c00, item1
000570:0x00139e68:	icall	
000570:0x00139e78:	release	item1
000570:0x00139e80:	rts
array<@BiosPrivacyUidResult>::InsertArray()
000575:0x00139ed8:	imove	i, 0x000000
000575:0x00139ee8:	jump	0x139f08
000575:0x00139ef0:	move	@m00, i
000575:0x00139f00:	inc	i
000575:0x00139f08:	ncalli	array<BiosPrivacyUidResult>.Count()
000575:0x00139f10:	cmpi	i, #return
000575:0x00139f20:	bge	0x139f78
000577:0x00139f28:	icall	
000577:0x00139f38:	movetm	item, #return
000578:0x00139f48:	movefm	@c00, item
000578:0x00139f58:	icall	
000578:0x00139f68:	release	item
000578:0x00139f70:	jump	0x139ef0
000578:0x00139f78:	rts
array<@BiosPrivacyUidResult>::Invert()
000584:0x00139ff8:	imove	left, 0x000000
000585:0x0013a008:	ncalli	array<@BiosPrivacyUidResult>.Count()
000585:0x0013a010:	subi	right, #return, _i1
000586:0x0013a020:	cmpi	right, _i0
000586:0x0013a030:	ble	0x13a0f0
000588:0x0013a038:	cmpi	left, right
000588:0x0013a048:	bge	0x13a0f0
000590:0x0013a050:	icall	
000590:0x0013a060:	movetm	temp, #return
000591:0x0013a070:	move	@m00, left
000591:0x0013a080:	inc	left
000591:0x0013a088:	icall	
000591:0x0013a098:	icall	
000592:0x0013a0a8:	move	@m00, right
000592:0x0013a0b8:	dec	right
000592:0x0013a0c0:	movefm	@c00, temp
000592:0x0013a0d0:	icall	
000592:0x0013a0e0:	release	temp
000592:0x0013a0e8:	jump	0x13a038
000592:0x0013a0f0:	rts
array<@BiosPrivacyUidResult>::MoveIndex()
000612:0x0013a148:	ncalli	array<@BiosPrivacyUidResult>.Count()
000612:0x0013a150:	move	count, #return
000613:0x0013a160:	move	new_index, curr_index
000615:0x0013a170:	cmpi	move_number, _i0
000615:0x0013a180:	ble	0x13a1a8
000617:0x0013a188:	addi	@m00, curr_index, move_number
000617:0x0013a198:	move	new_index, @m00
000620:0x0013a1a8:	cmpi	move_number, _i0
000620:0x0013a1b8:	bge	0x13a260
000622:0x0013a1c0:	subi	@m00, curr_index, move_number
000622:0x0013a1d0:	move	new_index, @m00
000624:0x0013a1e0:	cmpi	new_index, _i0
000624:0x0013a1f0:	bge	0x13a260
000626:0x0013a1f8:	subi	@m01, _i0, count
000626:0x0013a208:	cmpi	new_index, @m01
000626:0x0013a218:	bgt	0x13a240
000628:0x0013a220:	modi	@m00, new_index, count
000628:0x0013a230:	move	new_index, @m00
000631:0x0013a240:	addi	@m00, new_index, count
000631:0x0013a250:	move	new_index, @m00
000635:0x0013a260:	cmpi	new_index, count
000635:0x0013a270:	blt	0x13a298
000637:0x0013a278:	modi	@m00, new_index, count
000637:0x0013a288:	move	new_index, @m00
000641:0x0013a298:	move	#return, new_index
000641:0x0013a2a8:	rts
000641:0x0013a2b0:	rts
array<@BiosPrivacyUidResult>::ShuffleArray()
000646:0x0013a2e0:	imove	i, 0x000000
000646:0x0013a2f0:	jump	0x13a310
000646:0x0013a2f8:	move	@m00, i
000646:0x0013a308:	inc	i
000646:0x0013a310:	ncalli	array<@BiosPrivacyUidResult>.Count()
000646:0x0013a318:	cmpi	i, #return
000646:0x0013a328:	bge	0x13a360
000648:0x0013a330:	call	
000648:0x0013a340:	call	
000648:0x0013a358:	jump	0x13a2f8
000648:0x0013a360:	rts
array<@BiosPrivacyUidResult>::DifferentAtPosition()
000666:0x0013a390:	ncalli	array<@BiosPrivacyUidResult>.Count()
000666:0x0013a398:	move	@m00, #return
000666:0x0013a3a8:	ncalli	array<BiosPrivacyUidResult>.Count()
000666:0x0013a3b0:	cmpi	@m00, #return
000666:0x0013a3c0:	beq	0x13a3f0
000668:0x0013a3c8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0013a3d8:	imove	#return, 0xffffffff
000669:0x0013a3e8:	rts
000672:0x0013a3f0:	imove	i, 0x000000
000672:0x0013a400:	jump	0x13a410
000672:0x0013a408:	inc	i
000672:0x0013a410:	ncalli	array<BiosPrivacyUidResult>.Count()
000672:0x0013a418:	cmpi	i, #return
000672:0x0013a428:	bge	0x13a498
000674:0x0013a430:	icall	
000674:0x0013a440:	movec	@c00, #return
000674:0x0013a450:	icall	
000674:0x0013a460:	cmpc	@c00, #return
000674:0x0013a470:	beq	0x13a490
000676:0x0013a478:	move	#return, i
000676:0x0013a488:	rts
000676:0x0013a490:	jump	0x13a408
000680:0x0013a498:	imove	#return, 0xffffffff
000680:0x0013a4a8:	rts
000680:0x0013a4b0:	rts
array<ComponentInfo>::InsertAll()
000427:0x0013ace8:	imove	i, 0x000000
000427:0x0013acf8:	jump	0x13ad18
000427:0x0013ad00:	move	@m00, i
000427:0x0013ad10:	inc	i
000427:0x0013ad18:	ncalli	array<ComponentInfo>.Count()
000427:0x0013ad20:	cmpi	i, #return
000427:0x0013ad30:	bge	0x13ad60
000429:0x0013ad38:	icall	
000429:0x0013ad48:	icall	
000429:0x0013ad58:	jump	0x13ad00
000429:0x0013ad60:	rts
array<ComponentInfo>::RemoveItem()
000479:0x0013ad90:	movefm	@c00, value
000479:0x0013ada0:	icall	
000479:0x0013adb0:	move	remove_index, #return
000481:0x0013adc0:	cmpi	remove_index, _i0
000481:0x0013add0:	blt	0x13ade8
000483:0x0013add8:	ncalli	array<ComponentInfo>.RemoveOrdered(remove_index)
000483:0x0013ade8:	rts
array<ComponentInfo>::RemoveItemUnOrdered()
000489:0x0013ae18:	movefm	@c00, value
000489:0x0013ae28:	icall	
000489:0x0013ae38:	move	remove_index, #return
000491:0x0013ae48:	cmpi	remove_index, _i0
000491:0x0013ae58:	blt	0x13ae70
000493:0x0013ae60:	ncalli	array<ComponentInfo>.Remove(remove_index)
000493:0x0013ae70:	rts
array<ComponentInfo>::IsValidIndex()
000499:0x0013ae78:	cmpi	index, _i-1
000499:0x0013ae88:	ble	0x13aec8
000499:0x0013ae90:	ncalli	array<ComponentInfo>.Count()
000499:0x0013ae98:	cmpi	index, #return
000499:0x0013aea8:	bge	0x13aec8
000499:0x0013aeb0:	imove	#return, 0x000001
000499:0x0013aec0:	jump	0x13aed8
000499:0x0013aec8:	imove	#return, 0x000000
000499:0x0013aed8:	rts
000499:0x0013aee0:	rts
array<ComponentInfo>::Debug()
000525:0x0013af38:	ncalli	array<ComponentInfo>.Count()
000525:0x0013af40:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0013af70:	icall	Print(#return)
000526:0x0013af80:	imove	i, 0x000000
000526:0x0013af90:	jump	0x13afb0
000526:0x0013af98:	move	@m00, i
000526:0x0013afa8:	inc	i
000526:0x0013afb0:	ncalli	array<ComponentInfo>.Count()
000526:0x0013afb8:	cmpi	i, #return
000526:0x0013afc8:	bge	0x13b040
000528:0x0013afd0:	icall	
000528:0x0013afe0:	movetm	item, #return
000529:0x0013aff0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0013b020:	icall	Print(#return)
000529:0x0013b030:	release	item
000529:0x0013b038:	jump	0x13af98
000529:0x0013b040:	rts
array<ComponentInfo>::GetRandomIndex()
000544:0x0013b048:	ncalli	array<ComponentInfo>.Count()
000544:0x0013b050:	move	@m00, #return
000544:0x0013b060:	cmpi	@m00, _i0
000544:0x0013b070:	ble	0x13b0a8
000546:0x0013b078:	ncalli	array<ComponentInfo>.Count()
000546:0x0013b080:	icall	RandomInt(_i0, #return)
000546:0x0013b090:	move	#return, #return
000546:0x0013b0a0:	rts
000549:0x0013b0a8:	imove	#return, 0xffffffff
000549:0x0013b0b8:	rts
000549:0x0013b0c0:	rts
array<ComponentInfo>::GetRandomElement()
000563:0x0013b0c8:	call	
000563:0x0013b0d8:	icall	
000563:0x0013b0e8:	movetm	#return, #return
000563:0x0013b0f8:	rts
000563:0x0013b100:	rts
array<ComponentInfo>::SwapItems()
000568:0x0013b130:	icall	
000568:0x0013b140:	movetm	item1, #return
000569:0x0013b150:	icall	
000569:0x0013b160:	icall	
000570:0x0013b170:	movefm	@c00, item1
000570:0x0013b180:	icall	
000570:0x0013b190:	release	item1
000570:0x0013b198:	rts
array<ComponentInfo>::InsertArray()
000575:0x0013b1f0:	imove	i, 0x000000
000575:0x0013b200:	jump	0x13b220
000575:0x0013b208:	move	@m00, i
000575:0x0013b218:	inc	i
000575:0x0013b220:	ncalli	array<ComponentInfo>.Count()
000575:0x0013b228:	cmpi	i, #return
000575:0x0013b238:	bge	0x13b290
000577:0x0013b240:	icall	
000577:0x0013b250:	movetm	item, #return
000578:0x0013b260:	movefm	@c00, item
000578:0x0013b270:	icall	
000578:0x0013b280:	release	item
000578:0x0013b288:	jump	0x13b208
000578:0x0013b290:	rts
array<ComponentInfo>::Invert()
000584:0x0013b310:	imove	left, 0x000000
000585:0x0013b320:	ncalli	array<ComponentInfo>.Count()
000585:0x0013b328:	subi	right, #return, _i1
000586:0x0013b338:	cmpi	right, _i0
000586:0x0013b348:	ble	0x13b408
000588:0x0013b350:	cmpi	left, right
000588:0x0013b360:	bge	0x13b408
000590:0x0013b368:	icall	
000590:0x0013b378:	movetm	temp, #return
000591:0x0013b388:	move	@m00, left
000591:0x0013b398:	inc	left
000591:0x0013b3a0:	icall	
000591:0x0013b3b0:	icall	
000592:0x0013b3c0:	move	@m00, right
000592:0x0013b3d0:	dec	right
000592:0x0013b3d8:	movefm	@c00, temp
000592:0x0013b3e8:	icall	
000592:0x0013b3f8:	release	temp
000592:0x0013b400:	jump	0x13b350
000592:0x0013b408:	rts
array<ComponentInfo>::MoveIndex()
000612:0x0013b460:	ncalli	array<ComponentInfo>.Count()
000612:0x0013b468:	move	count, #return
000613:0x0013b478:	move	new_index, curr_index
000615:0x0013b488:	cmpi	move_number, _i0
000615:0x0013b498:	ble	0x13b4c0
000617:0x0013b4a0:	addi	@m00, curr_index, move_number
000617:0x0013b4b0:	move	new_index, @m00
000620:0x0013b4c0:	cmpi	move_number, _i0
000620:0x0013b4d0:	bge	0x13b578
000622:0x0013b4d8:	subi	@m00, curr_index, move_number
000622:0x0013b4e8:	move	new_index, @m00
000624:0x0013b4f8:	cmpi	new_index, _i0
000624:0x0013b508:	bge	0x13b578
000626:0x0013b510:	subi	@m01, _i0, count
000626:0x0013b520:	cmpi	new_index, @m01
000626:0x0013b530:	bgt	0x13b558
000628:0x0013b538:	modi	@m00, new_index, count
000628:0x0013b548:	move	new_index, @m00
000631:0x0013b558:	addi	@m00, new_index, count
000631:0x0013b568:	move	new_index, @m00
000635:0x0013b578:	cmpi	new_index, count
000635:0x0013b588:	blt	0x13b5b0
000637:0x0013b590:	modi	@m00, new_index, count
000637:0x0013b5a0:	move	new_index, @m00
000641:0x0013b5b0:	move	#return, new_index
000641:0x0013b5c0:	rts
000641:0x0013b5c8:	rts
array<ComponentInfo>::ShuffleArray()
000646:0x0013b5f8:	imove	i, 0x000000
000646:0x0013b608:	jump	0x13b628
000646:0x0013b610:	move	@m00, i
000646:0x0013b620:	inc	i
000646:0x0013b628:	ncalli	array<ComponentInfo>.Count()
000646:0x0013b630:	cmpi	i, #return
000646:0x0013b640:	bge	0x13b678
000648:0x0013b648:	call	
000648:0x0013b658:	call	
000648:0x0013b670:	jump	0x13b610
000648:0x0013b678:	rts
array<ComponentInfo>::DifferentAtPosition()
000666:0x0013b6a8:	ncalli	array<ComponentInfo>.Count()
000666:0x0013b6b0:	move	@m00, #return
000666:0x0013b6c0:	push	#return
000666:0x0013b6c8:	ncalli	array<ComponentInfo>.Count()
000666:0x0013b6d0:	move	@m02, #return
000666:0x0013b6e0:	pop	#return
000666:0x0013b6e8:	cmpi	@m00, @m02
000666:0x0013b6f8:	beq	0x13b728
000668:0x0013b700:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0013b710:	imove	#return, 0xffffffff
000669:0x0013b720:	rts
000672:0x0013b728:	imove	i, 0x000000
000672:0x0013b738:	jump	0x13b748
000672:0x0013b740:	inc	i
000672:0x0013b748:	ncalli	array<ComponentInfo>.Count()
000672:0x0013b750:	cmpi	i, #return
000672:0x0013b760:	bge	0x13b7f0
000674:0x0013b768:	icall	
000674:0x0013b778:	movec	@c00, #return
000674:0x0013b788:	pushc	#return
000674:0x0013b790:	icall	
000674:0x0013b7a0:	movec	@c02, #return
000674:0x0013b7b0:	popc	#return
000674:0x0013b7b8:	cmpc	@c00, @c02
000674:0x0013b7c8:	beq	0x13b7e8
000676:0x0013b7d0:	move	#return, i
000676:0x0013b7e0:	rts
000676:0x0013b7e8:	jump	0x13b740
000680:0x0013b7f0:	imove	#return, 0xffffffff
000680:0x0013b800:	rts
000680:0x0013b808:	rts
array<@ComponentInfo>::InsertAll()
000427:0x0013bc20:	imove	i, 0x000000
000427:0x0013bc30:	jump	0x13bc50
000427:0x0013bc38:	move	@m00, i
000427:0x0013bc48:	inc	i
000427:0x0013bc50:	ncalli	array<ComponentInfo>.Count()
000427:0x0013bc58:	cmpi	i, #return
000427:0x0013bc68:	bge	0x13bc98
000429:0x0013bc70:	icall	
000429:0x0013bc80:	icall	
000429:0x0013bc90:	jump	0x13bc38
000429:0x0013bc98:	rts
array<@ComponentInfo>::RemoveItem()
000479:0x0013bcc8:	movefm	@c00, value
000479:0x0013bcd8:	icall	
000479:0x0013bce8:	move	remove_index, #return
000481:0x0013bcf8:	cmpi	remove_index, _i0
000481:0x0013bd08:	blt	0x13bd20
000483:0x0013bd10:	ncalli	array<@ComponentInfo>.RemoveOrdered(remove_index)
000483:0x0013bd20:	rts
array<@ComponentInfo>::RemoveItemUnOrdered()
000489:0x0013bd50:	movefm	@c00, value
000489:0x0013bd60:	icall	
000489:0x0013bd70:	move	remove_index, #return
000491:0x0013bd80:	cmpi	remove_index, _i0
000491:0x0013bd90:	blt	0x13bda8
000493:0x0013bd98:	ncalli	array<@ComponentInfo>.Remove(remove_index)
000493:0x0013bda8:	rts
array<@ComponentInfo>::IsValidIndex()
000499:0x0013bdb0:	cmpi	index, _i-1
000499:0x0013bdc0:	ble	0x13be00
000499:0x0013bdc8:	ncalli	array<@ComponentInfo>.Count()
000499:0x0013bdd0:	cmpi	index, #return
000499:0x0013bde0:	bge	0x13be00
000499:0x0013bde8:	imove	#return, 0x000001
000499:0x0013bdf8:	jump	0x13be10
000499:0x0013be00:	imove	#return, 0x000000
000499:0x0013be10:	rts
000499:0x0013be18:	rts
array<@ComponentInfo>::Debug()
000525:0x0013be70:	ncalli	array<@ComponentInfo>.Count()
000525:0x0013be78:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0013bea8:	icall	Print(#return)
000526:0x0013beb8:	imove	i, 0x000000
000526:0x0013bec8:	jump	0x13bee8
000526:0x0013bed0:	move	@m00, i
000526:0x0013bee0:	inc	i
000526:0x0013bee8:	ncalli	array<@ComponentInfo>.Count()
000526:0x0013bef0:	cmpi	i, #return
000526:0x0013bf00:	bge	0x13bf78
000528:0x0013bf08:	icall	
000528:0x0013bf18:	movetm	item, #return
000529:0x0013bf28:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0013bf58:	icall	Print(#return)
000529:0x0013bf68:	release	item
000529:0x0013bf70:	jump	0x13bed0
000529:0x0013bf78:	rts
array<@ComponentInfo>::GetRandomIndex()
000544:0x0013bf80:	ncalli	array<@ComponentInfo>.Count()
000544:0x0013bf88:	move	@m00, #return
000544:0x0013bf98:	cmpi	@m00, _i0
000544:0x0013bfa8:	ble	0x13bfe0
000546:0x0013bfb0:	ncalli	array<@ComponentInfo>.Count()
000546:0x0013bfb8:	icall	RandomInt(_i0, #return)
000546:0x0013bfc8:	move	#return, #return
000546:0x0013bfd8:	rts
000549:0x0013bfe0:	imove	#return, 0xffffffff
000549:0x0013bff0:	rts
000549:0x0013bff8:	rts
array<@ComponentInfo>::GetRandomElement()
000563:0x0013c000:	call	
000563:0x0013c010:	icall	
000563:0x0013c020:	movetm	#return, #return
000563:0x0013c030:	rts
000563:0x0013c038:	rts
array<@ComponentInfo>::SwapItems()
000568:0x0013c068:	icall	
000568:0x0013c078:	movetm	item1, #return
000569:0x0013c088:	icall	
000569:0x0013c098:	icall	
000570:0x0013c0a8:	movefm	@c00, item1
000570:0x0013c0b8:	icall	
000570:0x0013c0c8:	release	item1
000570:0x0013c0d0:	rts
array<@ComponentInfo>::InsertArray()
000575:0x0013c128:	imove	i, 0x000000
000575:0x0013c138:	jump	0x13c158
000575:0x0013c140:	move	@m00, i
000575:0x0013c150:	inc	i
000575:0x0013c158:	ncalli	array<ComponentInfo>.Count()
000575:0x0013c160:	cmpi	i, #return
000575:0x0013c170:	bge	0x13c1c8
000577:0x0013c178:	icall	
000577:0x0013c188:	movetm	item, #return
000578:0x0013c198:	movefm	@c00, item
000578:0x0013c1a8:	icall	
000578:0x0013c1b8:	release	item
000578:0x0013c1c0:	jump	0x13c140
000578:0x0013c1c8:	rts
array<@ComponentInfo>::Invert()
000584:0x0013c248:	imove	left, 0x000000
000585:0x0013c258:	ncalli	array<@ComponentInfo>.Count()
000585:0x0013c260:	subi	right, #return, _i1
000586:0x0013c270:	cmpi	right, _i0
000586:0x0013c280:	ble	0x13c340
000588:0x0013c288:	cmpi	left, right
000588:0x0013c298:	bge	0x13c340
000590:0x0013c2a0:	icall	
000590:0x0013c2b0:	movetm	temp, #return
000591:0x0013c2c0:	move	@m00, left
000591:0x0013c2d0:	inc	left
000591:0x0013c2d8:	icall	
000591:0x0013c2e8:	icall	
000592:0x0013c2f8:	move	@m00, right
000592:0x0013c308:	dec	right
000592:0x0013c310:	movefm	@c00, temp
000592:0x0013c320:	icall	
000592:0x0013c330:	release	temp
000592:0x0013c338:	jump	0x13c288
000592:0x0013c340:	rts
array<@ComponentInfo>::MoveIndex()
000612:0x0013c398:	ncalli	array<@ComponentInfo>.Count()
000612:0x0013c3a0:	move	count, #return
000613:0x0013c3b0:	move	new_index, curr_index
000615:0x0013c3c0:	cmpi	move_number, _i0
000615:0x0013c3d0:	ble	0x13c3f8
000617:0x0013c3d8:	addi	@m00, curr_index, move_number
000617:0x0013c3e8:	move	new_index, @m00
000620:0x0013c3f8:	cmpi	move_number, _i0
000620:0x0013c408:	bge	0x13c4b0
000622:0x0013c410:	subi	@m00, curr_index, move_number
000622:0x0013c420:	move	new_index, @m00
000624:0x0013c430:	cmpi	new_index, _i0
000624:0x0013c440:	bge	0x13c4b0
000626:0x0013c448:	subi	@m01, _i0, count
000626:0x0013c458:	cmpi	new_index, @m01
000626:0x0013c468:	bgt	0x13c490
000628:0x0013c470:	modi	@m00, new_index, count
000628:0x0013c480:	move	new_index, @m00
000631:0x0013c490:	addi	@m00, new_index, count
000631:0x0013c4a0:	move	new_index, @m00
000635:0x0013c4b0:	cmpi	new_index, count
000635:0x0013c4c0:	blt	0x13c4e8
000637:0x0013c4c8:	modi	@m00, new_index, count
000637:0x0013c4d8:	move	new_index, @m00
000641:0x0013c4e8:	move	#return, new_index
000641:0x0013c4f8:	rts
000641:0x0013c500:	rts
array<@ComponentInfo>::ShuffleArray()
000646:0x0013c530:	imove	i, 0x000000
000646:0x0013c540:	jump	0x13c560
000646:0x0013c548:	move	@m00, i
000646:0x0013c558:	inc	i
000646:0x0013c560:	ncalli	array<@ComponentInfo>.Count()
000646:0x0013c568:	cmpi	i, #return
000646:0x0013c578:	bge	0x13c5b0
000648:0x0013c580:	call	
000648:0x0013c590:	call	
000648:0x0013c5a8:	jump	0x13c548
000648:0x0013c5b0:	rts
array<@ComponentInfo>::DifferentAtPosition()
000666:0x0013c5e0:	ncalli	array<@ComponentInfo>.Count()
000666:0x0013c5e8:	move	@m00, #return
000666:0x0013c5f8:	ncalli	array<ComponentInfo>.Count()
000666:0x0013c600:	cmpi	@m00, #return
000666:0x0013c610:	beq	0x13c640
000668:0x0013c618:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0013c628:	imove	#return, 0xffffffff
000669:0x0013c638:	rts
000672:0x0013c640:	imove	i, 0x000000
000672:0x0013c650:	jump	0x13c660
000672:0x0013c658:	inc	i
000672:0x0013c660:	ncalli	array<ComponentInfo>.Count()
000672:0x0013c668:	cmpi	i, #return
000672:0x0013c678:	bge	0x13c6e8
000674:0x0013c680:	icall	
000674:0x0013c690:	movec	@c00, #return
000674:0x0013c6a0:	icall	
000674:0x0013c6b0:	cmpc	@c00, #return
000674:0x0013c6c0:	beq	0x13c6e0
000676:0x0013c6c8:	move	#return, i
000676:0x0013c6d8:	rts
000676:0x0013c6e0:	jump	0x13c658
000680:0x0013c6e8:	imove	#return, 0xffffffff
000680:0x0013c6f8:	rts
000680:0x0013c700:	rts
array<BoxCollidingResult>::InsertAll()
000427:0x0013cf40:	imove	i, 0x000000
000427:0x0013cf50:	jump	0x13cf70
000427:0x0013cf58:	move	@m00, i
000427:0x0013cf68:	inc	i
000427:0x0013cf70:	ncalli	array<BoxCollidingResult>.Count()
000427:0x0013cf78:	cmpi	i, #return
000427:0x0013cf88:	bge	0x13cfb8
000429:0x0013cf90:	icall	
000429:0x0013cfa0:	icall	
000429:0x0013cfb0:	jump	0x13cf58
000429:0x0013cfb8:	rts
array<BoxCollidingResult>::RemoveItem()
000479:0x0013cfe8:	movefm	@c00, value
000479:0x0013cff8:	icall	
000479:0x0013d008:	move	remove_index, #return
000481:0x0013d018:	cmpi	remove_index, _i0
000481:0x0013d028:	blt	0x13d040
000483:0x0013d030:	ncalli	array<BoxCollidingResult>.RemoveOrdered(remove_index)
000483:0x0013d040:	rts
array<BoxCollidingResult>::RemoveItemUnOrdered()
000489:0x0013d070:	movefm	@c00, value
000489:0x0013d080:	icall	
000489:0x0013d090:	move	remove_index, #return
000491:0x0013d0a0:	cmpi	remove_index, _i0
000491:0x0013d0b0:	blt	0x13d0c8
000493:0x0013d0b8:	ncalli	array<BoxCollidingResult>.Remove(remove_index)
000493:0x0013d0c8:	rts
array<BoxCollidingResult>::IsValidIndex()
000499:0x0013d0d0:	cmpi	index, _i-1
000499:0x0013d0e0:	ble	0x13d120
000499:0x0013d0e8:	ncalli	array<BoxCollidingResult>.Count()
000499:0x0013d0f0:	cmpi	index, #return
000499:0x0013d100:	bge	0x13d120
000499:0x0013d108:	imove	#return, 0x000001
000499:0x0013d118:	jump	0x13d130
000499:0x0013d120:	imove	#return, 0x000000
000499:0x0013d130:	rts
000499:0x0013d138:	rts
array<BoxCollidingResult>::Debug()
000525:0x0013d190:	ncalli	array<BoxCollidingResult>.Count()
000525:0x0013d198:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0013d1c8:	icall	Print(#return)
000526:0x0013d1d8:	imove	i, 0x000000
000526:0x0013d1e8:	jump	0x13d208
000526:0x0013d1f0:	move	@m00, i
000526:0x0013d200:	inc	i
000526:0x0013d208:	ncalli	array<BoxCollidingResult>.Count()
000526:0x0013d210:	cmpi	i, #return
000526:0x0013d220:	bge	0x13d298
000528:0x0013d228:	icall	
000528:0x0013d238:	movetm	item, #return
000529:0x0013d248:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0013d278:	icall	Print(#return)
000529:0x0013d288:	release	item
000529:0x0013d290:	jump	0x13d1f0
000529:0x0013d298:	rts
array<BoxCollidingResult>::GetRandomIndex()
000544:0x0013d2a0:	ncalli	array<BoxCollidingResult>.Count()
000544:0x0013d2a8:	move	@m00, #return
000544:0x0013d2b8:	cmpi	@m00, _i0
000544:0x0013d2c8:	ble	0x13d300
000546:0x0013d2d0:	ncalli	array<BoxCollidingResult>.Count()
000546:0x0013d2d8:	icall	RandomInt(_i0, #return)
000546:0x0013d2e8:	move	#return, #return
000546:0x0013d2f8:	rts
000549:0x0013d300:	imove	#return, 0xffffffff
000549:0x0013d310:	rts
000549:0x0013d318:	rts
array<BoxCollidingResult>::GetRandomElement()
000563:0x0013d320:	call	
000563:0x0013d330:	icall	
000563:0x0013d340:	movetm	#return, #return
000563:0x0013d350:	rts
000563:0x0013d358:	rts
array<BoxCollidingResult>::SwapItems()
000568:0x0013d388:	icall	
000568:0x0013d398:	movetm	item1, #return
000569:0x0013d3a8:	icall	
000569:0x0013d3b8:	icall	
000570:0x0013d3c8:	movefm	@c00, item1
000570:0x0013d3d8:	icall	
000570:0x0013d3e8:	release	item1
000570:0x0013d3f0:	rts
array<BoxCollidingResult>::InsertArray()
000575:0x0013d448:	imove	i, 0x000000
000575:0x0013d458:	jump	0x13d478
000575:0x0013d460:	move	@m00, i
000575:0x0013d470:	inc	i
000575:0x0013d478:	ncalli	array<BoxCollidingResult>.Count()
000575:0x0013d480:	cmpi	i, #return
000575:0x0013d490:	bge	0x13d4e8
000577:0x0013d498:	icall	
000577:0x0013d4a8:	movetm	item, #return
000578:0x0013d4b8:	movefm	@c00, item
000578:0x0013d4c8:	icall	
000578:0x0013d4d8:	release	item
000578:0x0013d4e0:	jump	0x13d460
000578:0x0013d4e8:	rts
array<BoxCollidingResult>::Invert()
000584:0x0013d568:	imove	left, 0x000000
000585:0x0013d578:	ncalli	array<BoxCollidingResult>.Count()
000585:0x0013d580:	subi	right, #return, _i1
000586:0x0013d590:	cmpi	right, _i0
000586:0x0013d5a0:	ble	0x13d660
000588:0x0013d5a8:	cmpi	left, right
000588:0x0013d5b8:	bge	0x13d660
000590:0x0013d5c0:	icall	
000590:0x0013d5d0:	movetm	temp, #return
000591:0x0013d5e0:	move	@m00, left
000591:0x0013d5f0:	inc	left
000591:0x0013d5f8:	icall	
000591:0x0013d608:	icall	
000592:0x0013d618:	move	@m00, right
000592:0x0013d628:	dec	right
000592:0x0013d630:	movefm	@c00, temp
000592:0x0013d640:	icall	
000592:0x0013d650:	release	temp
000592:0x0013d658:	jump	0x13d5a8
000592:0x0013d660:	rts
array<BoxCollidingResult>::MoveIndex()
000612:0x0013d6b8:	ncalli	array<BoxCollidingResult>.Count()
000612:0x0013d6c0:	move	count, #return
000613:0x0013d6d0:	move	new_index, curr_index
000615:0x0013d6e0:	cmpi	move_number, _i0
000615:0x0013d6f0:	ble	0x13d718
000617:0x0013d6f8:	addi	@m00, curr_index, move_number
000617:0x0013d708:	move	new_index, @m00
000620:0x0013d718:	cmpi	move_number, _i0
000620:0x0013d728:	bge	0x13d7d0
000622:0x0013d730:	subi	@m00, curr_index, move_number
000622:0x0013d740:	move	new_index, @m00
000624:0x0013d750:	cmpi	new_index, _i0
000624:0x0013d760:	bge	0x13d7d0
000626:0x0013d768:	subi	@m01, _i0, count
000626:0x0013d778:	cmpi	new_index, @m01
000626:0x0013d788:	bgt	0x13d7b0
000628:0x0013d790:	modi	@m00, new_index, count
000628:0x0013d7a0:	move	new_index, @m00
000631:0x0013d7b0:	addi	@m00, new_index, count
000631:0x0013d7c0:	move	new_index, @m00
000635:0x0013d7d0:	cmpi	new_index, count
000635:0x0013d7e0:	blt	0x13d808
000637:0x0013d7e8:	modi	@m00, new_index, count
000637:0x0013d7f8:	move	new_index, @m00
000641:0x0013d808:	move	#return, new_index
000641:0x0013d818:	rts
000641:0x0013d820:	rts
array<BoxCollidingResult>::ShuffleArray()
000646:0x0013d850:	imove	i, 0x000000
000646:0x0013d860:	jump	0x13d880
000646:0x0013d868:	move	@m00, i
000646:0x0013d878:	inc	i
000646:0x0013d880:	ncalli	array<BoxCollidingResult>.Count()
000646:0x0013d888:	cmpi	i, #return
000646:0x0013d898:	bge	0x13d8d0
000648:0x0013d8a0:	call	
000648:0x0013d8b0:	call	
000648:0x0013d8c8:	jump	0x13d868
000648:0x0013d8d0:	rts
array<BoxCollidingResult>::DifferentAtPosition()
000666:0x0013d900:	ncalli	array<BoxCollidingResult>.Count()
000666:0x0013d908:	move	@m00, #return
000666:0x0013d918:	push	#return
000666:0x0013d920:	ncalli	array<BoxCollidingResult>.Count()
000666:0x0013d928:	move	@m02, #return
000666:0x0013d938:	pop	#return
000666:0x0013d940:	cmpi	@m00, @m02
000666:0x0013d950:	beq	0x13d980
000668:0x0013d958:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0013d968:	imove	#return, 0xffffffff
000669:0x0013d978:	rts
000672:0x0013d980:	imove	i, 0x000000
000672:0x0013d990:	jump	0x13d9a0
000672:0x0013d998:	inc	i
000672:0x0013d9a0:	ncalli	array<BoxCollidingResult>.Count()
000672:0x0013d9a8:	cmpi	i, #return
000672:0x0013d9b8:	bge	0x13da48
000674:0x0013d9c0:	icall	
000674:0x0013d9d0:	movec	@c00, #return
000674:0x0013d9e0:	pushc	#return
000674:0x0013d9e8:	icall	
000674:0x0013d9f8:	movec	@c02, #return
000674:0x0013da08:	popc	#return
000674:0x0013da10:	cmpc	@c00, @c02
000674:0x0013da20:	beq	0x13da40
000676:0x0013da28:	move	#return, i
000676:0x0013da38:	rts
000676:0x0013da40:	jump	0x13d998
000680:0x0013da48:	imove	#return, 0xffffffff
000680:0x0013da58:	rts
000680:0x0013da60:	rts
array<@BoxCollidingResult>::InsertAll()
000427:0x0013de78:	imove	i, 0x000000
000427:0x0013de88:	jump	0x13dea8
000427:0x0013de90:	move	@m00, i
000427:0x0013dea0:	inc	i
000427:0x0013dea8:	ncalli	array<BoxCollidingResult>.Count()
000427:0x0013deb0:	cmpi	i, #return
000427:0x0013dec0:	bge	0x13def0
000429:0x0013dec8:	icall	
000429:0x0013ded8:	icall	
000429:0x0013dee8:	jump	0x13de90
000429:0x0013def0:	rts
array<@BoxCollidingResult>::RemoveItem()
000479:0x0013df20:	movefm	@c00, value
000479:0x0013df30:	icall	
000479:0x0013df40:	move	remove_index, #return
000481:0x0013df50:	cmpi	remove_index, _i0
000481:0x0013df60:	blt	0x13df78
000483:0x0013df68:	ncalli	array<@BoxCollidingResult>.RemoveOrdered(remove_index)
000483:0x0013df78:	rts
array<@BoxCollidingResult>::RemoveItemUnOrdered()
000489:0x0013dfa8:	movefm	@c00, value
000489:0x0013dfb8:	icall	
000489:0x0013dfc8:	move	remove_index, #return
000491:0x0013dfd8:	cmpi	remove_index, _i0
000491:0x0013dfe8:	blt	0x13e000
000493:0x0013dff0:	ncalli	array<@BoxCollidingResult>.Remove(remove_index)
000493:0x0013e000:	rts
array<@BoxCollidingResult>::IsValidIndex()
000499:0x0013e008:	cmpi	index, _i-1
000499:0x0013e018:	ble	0x13e058
000499:0x0013e020:	ncalli	array<@BoxCollidingResult>.Count()
000499:0x0013e028:	cmpi	index, #return
000499:0x0013e038:	bge	0x13e058
000499:0x0013e040:	imove	#return, 0x000001
000499:0x0013e050:	jump	0x13e068
000499:0x0013e058:	imove	#return, 0x000000
000499:0x0013e068:	rts
000499:0x0013e070:	rts
array<@BoxCollidingResult>::Debug()
000525:0x0013e0c8:	ncalli	array<@BoxCollidingResult>.Count()
000525:0x0013e0d0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0013e100:	icall	Print(#return)
000526:0x0013e110:	imove	i, 0x000000
000526:0x0013e120:	jump	0x13e140
000526:0x0013e128:	move	@m00, i
000526:0x0013e138:	inc	i
000526:0x0013e140:	ncalli	array<@BoxCollidingResult>.Count()
000526:0x0013e148:	cmpi	i, #return
000526:0x0013e158:	bge	0x13e1d0
000528:0x0013e160:	icall	
000528:0x0013e170:	movetm	item, #return
000529:0x0013e180:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0013e1b0:	icall	Print(#return)
000529:0x0013e1c0:	release	item
000529:0x0013e1c8:	jump	0x13e128
000529:0x0013e1d0:	rts
array<@BoxCollidingResult>::GetRandomIndex()
000544:0x0013e1d8:	ncalli	array<@BoxCollidingResult>.Count()
000544:0x0013e1e0:	move	@m00, #return
000544:0x0013e1f0:	cmpi	@m00, _i0
000544:0x0013e200:	ble	0x13e238
000546:0x0013e208:	ncalli	array<@BoxCollidingResult>.Count()
000546:0x0013e210:	icall	RandomInt(_i0, #return)
000546:0x0013e220:	move	#return, #return
000546:0x0013e230:	rts
000549:0x0013e238:	imove	#return, 0xffffffff
000549:0x0013e248:	rts
000549:0x0013e250:	rts
array<@BoxCollidingResult>::GetRandomElement()
000563:0x0013e258:	call	
000563:0x0013e268:	icall	
000563:0x0013e278:	movetm	#return, #return
000563:0x0013e288:	rts
000563:0x0013e290:	rts
array<@BoxCollidingResult>::SwapItems()
000568:0x0013e2c0:	icall	
000568:0x0013e2d0:	movetm	item1, #return
000569:0x0013e2e0:	icall	
000569:0x0013e2f0:	icall	
000570:0x0013e300:	movefm	@c00, item1
000570:0x0013e310:	icall	
000570:0x0013e320:	release	item1
000570:0x0013e328:	rts
array<@BoxCollidingResult>::InsertArray()
000575:0x0013e380:	imove	i, 0x000000
000575:0x0013e390:	jump	0x13e3b0
000575:0x0013e398:	move	@m00, i
000575:0x0013e3a8:	inc	i
000575:0x0013e3b0:	ncalli	array<BoxCollidingResult>.Count()
000575:0x0013e3b8:	cmpi	i, #return
000575:0x0013e3c8:	bge	0x13e420
000577:0x0013e3d0:	icall	
000577:0x0013e3e0:	movetm	item, #return
000578:0x0013e3f0:	movefm	@c00, item
000578:0x0013e400:	icall	
000578:0x0013e410:	release	item
000578:0x0013e418:	jump	0x13e398
000578:0x0013e420:	rts
array<@BoxCollidingResult>::Invert()
000584:0x0013e4a0:	imove	left, 0x000000
000585:0x0013e4b0:	ncalli	array<@BoxCollidingResult>.Count()
000585:0x0013e4b8:	subi	right, #return, _i1
000586:0x0013e4c8:	cmpi	right, _i0
000586:0x0013e4d8:	ble	0x13e598
000588:0x0013e4e0:	cmpi	left, right
000588:0x0013e4f0:	bge	0x13e598
000590:0x0013e4f8:	icall	
000590:0x0013e508:	movetm	temp, #return
000591:0x0013e518:	move	@m00, left
000591:0x0013e528:	inc	left
000591:0x0013e530:	icall	
000591:0x0013e540:	icall	
000592:0x0013e550:	move	@m00, right
000592:0x0013e560:	dec	right
000592:0x0013e568:	movefm	@c00, temp
000592:0x0013e578:	icall	
000592:0x0013e588:	release	temp
000592:0x0013e590:	jump	0x13e4e0
000592:0x0013e598:	rts
array<@BoxCollidingResult>::MoveIndex()
000612:0x0013e5f0:	ncalli	array<@BoxCollidingResult>.Count()
000612:0x0013e5f8:	move	count, #return
000613:0x0013e608:	move	new_index, curr_index
000615:0x0013e618:	cmpi	move_number, _i0
000615:0x0013e628:	ble	0x13e650
000617:0x0013e630:	addi	@m00, curr_index, move_number
000617:0x0013e640:	move	new_index, @m00
000620:0x0013e650:	cmpi	move_number, _i0
000620:0x0013e660:	bge	0x13e708
000622:0x0013e668:	subi	@m00, curr_index, move_number
000622:0x0013e678:	move	new_index, @m00
000624:0x0013e688:	cmpi	new_index, _i0
000624:0x0013e698:	bge	0x13e708
000626:0x0013e6a0:	subi	@m01, _i0, count
000626:0x0013e6b0:	cmpi	new_index, @m01
000626:0x0013e6c0:	bgt	0x13e6e8
000628:0x0013e6c8:	modi	@m00, new_index, count
000628:0x0013e6d8:	move	new_index, @m00
000631:0x0013e6e8:	addi	@m00, new_index, count
000631:0x0013e6f8:	move	new_index, @m00
000635:0x0013e708:	cmpi	new_index, count
000635:0x0013e718:	blt	0x13e740
000637:0x0013e720:	modi	@m00, new_index, count
000637:0x0013e730:	move	new_index, @m00
000641:0x0013e740:	move	#return, new_index
000641:0x0013e750:	rts
000641:0x0013e758:	rts
array<@BoxCollidingResult>::ShuffleArray()
000646:0x0013e788:	imove	i, 0x000000
000646:0x0013e798:	jump	0x13e7b8
000646:0x0013e7a0:	move	@m00, i
000646:0x0013e7b0:	inc	i
000646:0x0013e7b8:	ncalli	array<@BoxCollidingResult>.Count()
000646:0x0013e7c0:	cmpi	i, #return
000646:0x0013e7d0:	bge	0x13e808
000648:0x0013e7d8:	call	
000648:0x0013e7e8:	call	
000648:0x0013e800:	jump	0x13e7a0
000648:0x0013e808:	rts
array<@BoxCollidingResult>::DifferentAtPosition()
000666:0x0013e838:	ncalli	array<@BoxCollidingResult>.Count()
000666:0x0013e840:	move	@m00, #return
000666:0x0013e850:	ncalli	array<BoxCollidingResult>.Count()
000666:0x0013e858:	cmpi	@m00, #return
000666:0x0013e868:	beq	0x13e898
000668:0x0013e870:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0013e880:	imove	#return, 0xffffffff
000669:0x0013e890:	rts
000672:0x0013e898:	imove	i, 0x000000
000672:0x0013e8a8:	jump	0x13e8b8
000672:0x0013e8b0:	inc	i
000672:0x0013e8b8:	ncalli	array<BoxCollidingResult>.Count()
000672:0x0013e8c0:	cmpi	i, #return
000672:0x0013e8d0:	bge	0x13e940
000674:0x0013e8d8:	icall	
000674:0x0013e8e8:	movec	@c00, #return
000674:0x0013e8f8:	icall	
000674:0x0013e908:	cmpc	@c00, #return
000674:0x0013e918:	beq	0x13e938
000676:0x0013e920:	move	#return, i
000676:0x0013e930:	rts
000676:0x0013e938:	jump	0x13e8b0
000680:0x0013e940:	imove	#return, 0xffffffff
000680:0x0013e950:	rts
000680:0x0013e958:	rts
array<ParticleProperties>::InsertAll()
000427:0x0013f198:	imove	i, 0x000000
000427:0x0013f1a8:	jump	0x13f1c8
000427:0x0013f1b0:	move	@m00, i
000427:0x0013f1c0:	inc	i
000427:0x0013f1c8:	ncalli	array<ParticleProperties>.Count()
000427:0x0013f1d0:	cmpi	i, #return
000427:0x0013f1e0:	bge	0x13f210
000429:0x0013f1e8:	icall	
000429:0x0013f1f8:	icall	
000429:0x0013f208:	jump	0x13f1b0
000429:0x0013f210:	rts
array<ParticleProperties>::RemoveItem()
000479:0x0013f240:	movefm	@c00, value
000479:0x0013f250:	icall	
000479:0x0013f260:	move	remove_index, #return
000481:0x0013f270:	cmpi	remove_index, _i0
000481:0x0013f280:	blt	0x13f298
000483:0x0013f288:	ncalli	array<ParticleProperties>.RemoveOrdered(remove_index)
000483:0x0013f298:	rts
array<ParticleProperties>::RemoveItemUnOrdered()
000489:0x0013f2c8:	movefm	@c00, value
000489:0x0013f2d8:	icall	
000489:0x0013f2e8:	move	remove_index, #return
000491:0x0013f2f8:	cmpi	remove_index, _i0
000491:0x0013f308:	blt	0x13f320
000493:0x0013f310:	ncalli	array<ParticleProperties>.Remove(remove_index)
000493:0x0013f320:	rts
array<ParticleProperties>::IsValidIndex()
000499:0x0013f328:	cmpi	index, _i-1
000499:0x0013f338:	ble	0x13f378
000499:0x0013f340:	ncalli	array<ParticleProperties>.Count()
000499:0x0013f348:	cmpi	index, #return
000499:0x0013f358:	bge	0x13f378
000499:0x0013f360:	imove	#return, 0x000001
000499:0x0013f370:	jump	0x13f388
000499:0x0013f378:	imove	#return, 0x000000
000499:0x0013f388:	rts
000499:0x0013f390:	rts
array<ParticleProperties>::Debug()
000525:0x0013f3e8:	ncalli	array<ParticleProperties>.Count()
000525:0x0013f3f0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0013f420:	icall	Print(#return)
000526:0x0013f430:	imove	i, 0x000000
000526:0x0013f440:	jump	0x13f460
000526:0x0013f448:	move	@m00, i
000526:0x0013f458:	inc	i
000526:0x0013f460:	ncalli	array<ParticleProperties>.Count()
000526:0x0013f468:	cmpi	i, #return
000526:0x0013f478:	bge	0x13f4f0
000528:0x0013f480:	icall	
000528:0x0013f490:	movetm	item, #return
000529:0x0013f4a0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0013f4d0:	icall	Print(#return)
000529:0x0013f4e0:	release	item
000529:0x0013f4e8:	jump	0x13f448
000529:0x0013f4f0:	rts
array<ParticleProperties>::GetRandomIndex()
000544:0x0013f4f8:	ncalli	array<ParticleProperties>.Count()
000544:0x0013f500:	move	@m00, #return
000544:0x0013f510:	cmpi	@m00, _i0
000544:0x0013f520:	ble	0x13f558
000546:0x0013f528:	ncalli	array<ParticleProperties>.Count()
000546:0x0013f530:	icall	RandomInt(_i0, #return)
000546:0x0013f540:	move	#return, #return
000546:0x0013f550:	rts
000549:0x0013f558:	imove	#return, 0xffffffff
000549:0x0013f568:	rts
000549:0x0013f570:	rts
array<ParticleProperties>::GetRandomElement()
000563:0x0013f578:	call	
000563:0x0013f588:	icall	
000563:0x0013f598:	movetm	#return, #return
000563:0x0013f5a8:	rts
000563:0x0013f5b0:	rts
array<ParticleProperties>::SwapItems()
000568:0x0013f5e0:	icall	
000568:0x0013f5f0:	movetm	item1, #return
000569:0x0013f600:	icall	
000569:0x0013f610:	icall	
000570:0x0013f620:	movefm	@c00, item1
000570:0x0013f630:	icall	
000570:0x0013f640:	release	item1
000570:0x0013f648:	rts
array<ParticleProperties>::InsertArray()
000575:0x0013f6a0:	imove	i, 0x000000
000575:0x0013f6b0:	jump	0x13f6d0
000575:0x0013f6b8:	move	@m00, i
000575:0x0013f6c8:	inc	i
000575:0x0013f6d0:	ncalli	array<ParticleProperties>.Count()
000575:0x0013f6d8:	cmpi	i, #return
000575:0x0013f6e8:	bge	0x13f740
000577:0x0013f6f0:	icall	
000577:0x0013f700:	movetm	item, #return
000578:0x0013f710:	movefm	@c00, item
000578:0x0013f720:	icall	
000578:0x0013f730:	release	item
000578:0x0013f738:	jump	0x13f6b8
000578:0x0013f740:	rts
array<ParticleProperties>::Invert()
000584:0x0013f7c0:	imove	left, 0x000000
000585:0x0013f7d0:	ncalli	array<ParticleProperties>.Count()
000585:0x0013f7d8:	subi	right, #return, _i1
000586:0x0013f7e8:	cmpi	right, _i0
000586:0x0013f7f8:	ble	0x13f8b8
000588:0x0013f800:	cmpi	left, right
000588:0x0013f810:	bge	0x13f8b8
000590:0x0013f818:	icall	
000590:0x0013f828:	movetm	temp, #return
000591:0x0013f838:	move	@m00, left
000591:0x0013f848:	inc	left
000591:0x0013f850:	icall	
000591:0x0013f860:	icall	
000592:0x0013f870:	move	@m00, right
000592:0x0013f880:	dec	right
000592:0x0013f888:	movefm	@c00, temp
000592:0x0013f898:	icall	
000592:0x0013f8a8:	release	temp
000592:0x0013f8b0:	jump	0x13f800
000592:0x0013f8b8:	rts
array<ParticleProperties>::MoveIndex()
000612:0x0013f910:	ncalli	array<ParticleProperties>.Count()
000612:0x0013f918:	move	count, #return
000613:0x0013f928:	move	new_index, curr_index
000615:0x0013f938:	cmpi	move_number, _i0
000615:0x0013f948:	ble	0x13f970
000617:0x0013f950:	addi	@m00, curr_index, move_number
000617:0x0013f960:	move	new_index, @m00
000620:0x0013f970:	cmpi	move_number, _i0
000620:0x0013f980:	bge	0x13fa28
000622:0x0013f988:	subi	@m00, curr_index, move_number
000622:0x0013f998:	move	new_index, @m00
000624:0x0013f9a8:	cmpi	new_index, _i0
000624:0x0013f9b8:	bge	0x13fa28
000626:0x0013f9c0:	subi	@m01, _i0, count
000626:0x0013f9d0:	cmpi	new_index, @m01
000626:0x0013f9e0:	bgt	0x13fa08
000628:0x0013f9e8:	modi	@m00, new_index, count
000628:0x0013f9f8:	move	new_index, @m00
000631:0x0013fa08:	addi	@m00, new_index, count
000631:0x0013fa18:	move	new_index, @m00
000635:0x0013fa28:	cmpi	new_index, count
000635:0x0013fa38:	blt	0x13fa60
000637:0x0013fa40:	modi	@m00, new_index, count
000637:0x0013fa50:	move	new_index, @m00
000641:0x0013fa60:	move	#return, new_index
000641:0x0013fa70:	rts
000641:0x0013fa78:	rts
array<ParticleProperties>::ShuffleArray()
000646:0x0013faa8:	imove	i, 0x000000
000646:0x0013fab8:	jump	0x13fad8
000646:0x0013fac0:	move	@m00, i
000646:0x0013fad0:	inc	i
000646:0x0013fad8:	ncalli	array<ParticleProperties>.Count()
000646:0x0013fae0:	cmpi	i, #return
000646:0x0013faf0:	bge	0x13fb28
000648:0x0013faf8:	call	
000648:0x0013fb08:	call	
000648:0x0013fb20:	jump	0x13fac0
000648:0x0013fb28:	rts
array<ParticleProperties>::DifferentAtPosition()
000666:0x0013fb58:	ncalli	array<ParticleProperties>.Count()
000666:0x0013fb60:	move	@m00, #return
000666:0x0013fb70:	push	#return
000666:0x0013fb78:	ncalli	array<ParticleProperties>.Count()
000666:0x0013fb80:	move	@m02, #return
000666:0x0013fb90:	pop	#return
000666:0x0013fb98:	cmpi	@m00, @m02
000666:0x0013fba8:	beq	0x13fbd8
000668:0x0013fbb0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0013fbc0:	imove	#return, 0xffffffff
000669:0x0013fbd0:	rts
000672:0x0013fbd8:	imove	i, 0x000000
000672:0x0013fbe8:	jump	0x13fbf8
000672:0x0013fbf0:	inc	i
000672:0x0013fbf8:	ncalli	array<ParticleProperties>.Count()
000672:0x0013fc00:	cmpi	i, #return
000672:0x0013fc10:	bge	0x13fca0
000674:0x0013fc18:	icall	
000674:0x0013fc28:	movec	@c00, #return
000674:0x0013fc38:	pushc	#return
000674:0x0013fc40:	icall	
000674:0x0013fc50:	movec	@c02, #return
000674:0x0013fc60:	popc	#return
000674:0x0013fc68:	cmpc	@c00, @c02
000674:0x0013fc78:	beq	0x13fc98
000676:0x0013fc80:	move	#return, i
000676:0x0013fc90:	rts
000676:0x0013fc98:	jump	0x13fbf0
000680:0x0013fca0:	imove	#return, 0xffffffff
000680:0x0013fcb0:	rts
000680:0x0013fcb8:	rts
array<@ParticleProperties>::InsertAll()
000427:0x001400d0:	imove	i, 0x000000
000427:0x001400e0:	jump	0x140100
000427:0x001400e8:	move	@m00, i
000427:0x001400f8:	inc	i
000427:0x00140100:	ncalli	array<ParticleProperties>.Count()
000427:0x00140108:	cmpi	i, #return
000427:0x00140118:	bge	0x140148
000429:0x00140120:	icall	
000429:0x00140130:	icall	
000429:0x00140140:	jump	0x1400e8
000429:0x00140148:	rts
array<@ParticleProperties>::RemoveItem()
000479:0x00140178:	movefm	@c00, value
000479:0x00140188:	icall	
000479:0x00140198:	move	remove_index, #return
000481:0x001401a8:	cmpi	remove_index, _i0
000481:0x001401b8:	blt	0x1401d0
000483:0x001401c0:	ncalli	array<@ParticleProperties>.RemoveOrdered(remove_index)
000483:0x001401d0:	rts
array<@ParticleProperties>::RemoveItemUnOrdered()
000489:0x00140200:	movefm	@c00, value
000489:0x00140210:	icall	
000489:0x00140220:	move	remove_index, #return
000491:0x00140230:	cmpi	remove_index, _i0
000491:0x00140240:	blt	0x140258
000493:0x00140248:	ncalli	array<@ParticleProperties>.Remove(remove_index)
000493:0x00140258:	rts
array<@ParticleProperties>::IsValidIndex()
000499:0x00140260:	cmpi	index, _i-1
000499:0x00140270:	ble	0x1402b0
000499:0x00140278:	ncalli	array<@ParticleProperties>.Count()
000499:0x00140280:	cmpi	index, #return
000499:0x00140290:	bge	0x1402b0
000499:0x00140298:	imove	#return, 0x000001
000499:0x001402a8:	jump	0x1402c0
000499:0x001402b0:	imove	#return, 0x000000
000499:0x001402c0:	rts
000499:0x001402c8:	rts
array<@ParticleProperties>::Debug()
000525:0x00140320:	ncalli	array<@ParticleProperties>.Count()
000525:0x00140328:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00140358:	icall	Print(#return)
000526:0x00140368:	imove	i, 0x000000
000526:0x00140378:	jump	0x140398
000526:0x00140380:	move	@m00, i
000526:0x00140390:	inc	i
000526:0x00140398:	ncalli	array<@ParticleProperties>.Count()
000526:0x001403a0:	cmpi	i, #return
000526:0x001403b0:	bge	0x140428
000528:0x001403b8:	icall	
000528:0x001403c8:	movetm	item, #return
000529:0x001403d8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00140408:	icall	Print(#return)
000529:0x00140418:	release	item
000529:0x00140420:	jump	0x140380
000529:0x00140428:	rts
array<@ParticleProperties>::GetRandomIndex()
000544:0x00140430:	ncalli	array<@ParticleProperties>.Count()
000544:0x00140438:	move	@m00, #return
000544:0x00140448:	cmpi	@m00, _i0
000544:0x00140458:	ble	0x140490
000546:0x00140460:	ncalli	array<@ParticleProperties>.Count()
000546:0x00140468:	icall	RandomInt(_i0, #return)
000546:0x00140478:	move	#return, #return
000546:0x00140488:	rts
000549:0x00140490:	imove	#return, 0xffffffff
000549:0x001404a0:	rts
000549:0x001404a8:	rts
array<@ParticleProperties>::GetRandomElement()
000563:0x001404b0:	call	
000563:0x001404c0:	icall	
000563:0x001404d0:	movetm	#return, #return
000563:0x001404e0:	rts
000563:0x001404e8:	rts
array<@ParticleProperties>::SwapItems()
000568:0x00140518:	icall	
000568:0x00140528:	movetm	item1, #return
000569:0x00140538:	icall	
000569:0x00140548:	icall	
000570:0x00140558:	movefm	@c00, item1
000570:0x00140568:	icall	
000570:0x00140578:	release	item1
000570:0x00140580:	rts
array<@ParticleProperties>::InsertArray()
000575:0x001405d8:	imove	i, 0x000000
000575:0x001405e8:	jump	0x140608
000575:0x001405f0:	move	@m00, i
000575:0x00140600:	inc	i
000575:0x00140608:	ncalli	array<ParticleProperties>.Count()
000575:0x00140610:	cmpi	i, #return
000575:0x00140620:	bge	0x140678
000577:0x00140628:	icall	
000577:0x00140638:	movetm	item, #return
000578:0x00140648:	movefm	@c00, item
000578:0x00140658:	icall	
000578:0x00140668:	release	item
000578:0x00140670:	jump	0x1405f0
000578:0x00140678:	rts
array<@ParticleProperties>::Invert()
000584:0x001406f8:	imove	left, 0x000000
000585:0x00140708:	ncalli	array<@ParticleProperties>.Count()
000585:0x00140710:	subi	right, #return, _i1
000586:0x00140720:	cmpi	right, _i0
000586:0x00140730:	ble	0x1407f0
000588:0x00140738:	cmpi	left, right
000588:0x00140748:	bge	0x1407f0
000590:0x00140750:	icall	
000590:0x00140760:	movetm	temp, #return
000591:0x00140770:	move	@m00, left
000591:0x00140780:	inc	left
000591:0x00140788:	icall	
000591:0x00140798:	icall	
000592:0x001407a8:	move	@m00, right
000592:0x001407b8:	dec	right
000592:0x001407c0:	movefm	@c00, temp
000592:0x001407d0:	icall	
000592:0x001407e0:	release	temp
000592:0x001407e8:	jump	0x140738
000592:0x001407f0:	rts
array<@ParticleProperties>::MoveIndex()
000612:0x00140848:	ncalli	array<@ParticleProperties>.Count()
000612:0x00140850:	move	count, #return
000613:0x00140860:	move	new_index, curr_index
000615:0x00140870:	cmpi	move_number, _i0
000615:0x00140880:	ble	0x1408a8
000617:0x00140888:	addi	@m00, curr_index, move_number
000617:0x00140898:	move	new_index, @m00
000620:0x001408a8:	cmpi	move_number, _i0
000620:0x001408b8:	bge	0x140960
000622:0x001408c0:	subi	@m00, curr_index, move_number
000622:0x001408d0:	move	new_index, @m00
000624:0x001408e0:	cmpi	new_index, _i0
000624:0x001408f0:	bge	0x140960
000626:0x001408f8:	subi	@m01, _i0, count
000626:0x00140908:	cmpi	new_index, @m01
000626:0x00140918:	bgt	0x140940
000628:0x00140920:	modi	@m00, new_index, count
000628:0x00140930:	move	new_index, @m00
000631:0x00140940:	addi	@m00, new_index, count
000631:0x00140950:	move	new_index, @m00
000635:0x00140960:	cmpi	new_index, count
000635:0x00140970:	blt	0x140998
000637:0x00140978:	modi	@m00, new_index, count
000637:0x00140988:	move	new_index, @m00
000641:0x00140998:	move	#return, new_index
000641:0x001409a8:	rts
000641:0x001409b0:	rts
array<@ParticleProperties>::ShuffleArray()
000646:0x001409e0:	imove	i, 0x000000
000646:0x001409f0:	jump	0x140a10
000646:0x001409f8:	move	@m00, i
000646:0x00140a08:	inc	i
000646:0x00140a10:	ncalli	array<@ParticleProperties>.Count()
000646:0x00140a18:	cmpi	i, #return
000646:0x00140a28:	bge	0x140a60
000648:0x00140a30:	call	
000648:0x00140a40:	call	
000648:0x00140a58:	jump	0x1409f8
000648:0x00140a60:	rts
array<@ParticleProperties>::DifferentAtPosition()
000666:0x00140a90:	ncalli	array<@ParticleProperties>.Count()
000666:0x00140a98:	move	@m00, #return
000666:0x00140aa8:	ncalli	array<ParticleProperties>.Count()
000666:0x00140ab0:	cmpi	@m00, #return
000666:0x00140ac0:	beq	0x140af0
000668:0x00140ac8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00140ad8:	imove	#return, 0xffffffff
000669:0x00140ae8:	rts
000672:0x00140af0:	imove	i, 0x000000
000672:0x00140b00:	jump	0x140b10
000672:0x00140b08:	inc	i
000672:0x00140b10:	ncalli	array<ParticleProperties>.Count()
000672:0x00140b18:	cmpi	i, #return
000672:0x00140b28:	bge	0x140b98
000674:0x00140b30:	icall	
000674:0x00140b40:	movec	@c00, #return
000674:0x00140b50:	icall	
000674:0x00140b60:	cmpc	@c00, #return
000674:0x00140b70:	beq	0x140b90
000676:0x00140b78:	move	#return, i
000676:0x00140b88:	rts
000676:0x00140b90:	jump	0x140b08
000680:0x00140b98:	imove	#return, 0xffffffff
000680:0x00140ba8:	rts
000680:0x00140bb0:	rts
Link<Object>::Release()
//scripts/1_Core/proto\proto.c
000368:0x00140d20:	ncalli	Link<Object>.Get()
000368:0x00140d28:	movetm	obj, #return
000369:0x00140d38:	cmpcm	obj, null
000369:0x00140d48:	beq	0x140d60
000370:0x00140d50:	call	
000370:0x00140d60:	release	obj
000370:0x00140d68:	rts
Link<Object>::Link()
000374:0x00140d70:	movefm	[0xb5c3ebf8], init
000374:0x00140d80:	ncalli	Link<Object>.Init([0xb5c3ebf8])
000374:0x00140d90:	rts
Link<Object>::Ptr()
000379:0x00140d98:	ncalli	Link<Object>.Get()
000379:0x00140da0:	movetm	#return, #return
000379:0x00140db0:	rts
000379:0x00140db8:	rts
Link<Object>::IsNull()
000384:0x00140dc0:	ncalli	Link<Object>.Get()
000384:0x00140dc8:	cmpm	#return, null
000384:0x00140dd8:	bne	0x140df8
000385:0x00140de0:	imove	#return, 0x000001
000385:0x00140df0:	rts
000387:0x00140df8:	imove	#return, 0x000000
000387:0x00140e08:	rts
000387:0x00140e10:	rts
array<ParticleSource>::InsertAll()
//scripts/1_Core/proto\enscript.c
000427:0x00141408:	imove	i, 0x000000
000427:0x00141418:	jump	0x141438
000427:0x00141420:	move	@m00, i
000427:0x00141430:	inc	i
000427:0x00141438:	ncalli	array<ParticleSource>.Count()
000427:0x00141440:	cmpi	i, #return
000427:0x00141450:	bge	0x141480
000429:0x00141458:	icall	
000429:0x00141468:	icall	
000429:0x00141478:	jump	0x141420
000429:0x00141480:	rts
array<ParticleSource>::RemoveItem()
000479:0x001414b0:	movefm	@c00, value
000479:0x001414c0:	icall	
000479:0x001414d0:	move	remove_index, #return
000481:0x001414e0:	cmpi	remove_index, _i0
000481:0x001414f0:	blt	0x141508
000483:0x001414f8:	ncalli	array<ParticleSource>.RemoveOrdered(remove_index)
000483:0x00141508:	rts
array<ParticleSource>::RemoveItemUnOrdered()
000489:0x00141538:	movefm	@c00, value
000489:0x00141548:	icall	
000489:0x00141558:	move	remove_index, #return
000491:0x00141568:	cmpi	remove_index, _i0
000491:0x00141578:	blt	0x141590
000493:0x00141580:	ncalli	array<ParticleSource>.Remove(remove_index)
000493:0x00141590:	rts
array<ParticleSource>::IsValidIndex()
000499:0x00141598:	cmpi	index, _i-1
000499:0x001415a8:	ble	0x1415e8
000499:0x001415b0:	ncalli	array<ParticleSource>.Count()
000499:0x001415b8:	cmpi	index, #return
000499:0x001415c8:	bge	0x1415e8
000499:0x001415d0:	imove	#return, 0x000001
000499:0x001415e0:	jump	0x1415f8
000499:0x001415e8:	imove	#return, 0x000000
000499:0x001415f8:	rts
000499:0x00141600:	rts
array<ParticleSource>::Debug()
000525:0x00141658:	ncalli	array<ParticleSource>.Count()
000525:0x00141660:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00141690:	icall	Print(#return)
000526:0x001416a0:	imove	i, 0x000000
000526:0x001416b0:	jump	0x1416d0
000526:0x001416b8:	move	@m00, i
000526:0x001416c8:	inc	i
000526:0x001416d0:	ncalli	array<ParticleSource>.Count()
000526:0x001416d8:	cmpi	i, #return
000526:0x001416e8:	bge	0x141760
000528:0x001416f0:	icall	
000528:0x00141700:	movetm	item, #return
000529:0x00141710:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00141740:	icall	Print(#return)
000529:0x00141750:	release	item
000529:0x00141758:	jump	0x1416b8
000529:0x00141760:	rts
array<ParticleSource>::GetRandomIndex()
000544:0x00141768:	ncalli	array<ParticleSource>.Count()
000544:0x00141770:	move	@m00, #return
000544:0x00141780:	cmpi	@m00, _i0
000544:0x00141790:	ble	0x1417c8
000546:0x00141798:	ncalli	array<ParticleSource>.Count()
000546:0x001417a0:	icall	RandomInt(_i0, #return)
000546:0x001417b0:	move	#return, #return
000546:0x001417c0:	rts
000549:0x001417c8:	imove	#return, 0xffffffff
000549:0x001417d8:	rts
000549:0x001417e0:	rts
array<ParticleSource>::GetRandomElement()
000563:0x001417e8:	call	
000563:0x001417f8:	icall	
000563:0x00141808:	movetm	#return, #return
000563:0x00141818:	rts
000563:0x00141820:	rts
array<ParticleSource>::SwapItems()
000568:0x00141850:	icall	
000568:0x00141860:	movetm	item1, #return
000569:0x00141870:	icall	
000569:0x00141880:	icall	
000570:0x00141890:	movefm	@c00, item1
000570:0x001418a0:	icall	
000570:0x001418b0:	release	item1
000570:0x001418b8:	rts
array<ParticleSource>::InsertArray()
000575:0x00141910:	imove	i, 0x000000
000575:0x00141920:	jump	0x141940
000575:0x00141928:	move	@m00, i
000575:0x00141938:	inc	i
000575:0x00141940:	ncalli	array<ParticleSource>.Count()
000575:0x00141948:	cmpi	i, #return
000575:0x00141958:	bge	0x1419b0
000577:0x00141960:	icall	
000577:0x00141970:	movetm	item, #return
000578:0x00141980:	movefm	@c00, item
000578:0x00141990:	icall	
000578:0x001419a0:	release	item
000578:0x001419a8:	jump	0x141928
000578:0x001419b0:	rts
array<ParticleSource>::Invert()
000584:0x00141a30:	imove	left, 0x000000
000585:0x00141a40:	ncalli	array<ParticleSource>.Count()
000585:0x00141a48:	subi	right, #return, _i1
000586:0x00141a58:	cmpi	right, _i0
000586:0x00141a68:	ble	0x141b28
000588:0x00141a70:	cmpi	left, right
000588:0x00141a80:	bge	0x141b28
000590:0x00141a88:	icall	
000590:0x00141a98:	movetm	temp, #return
000591:0x00141aa8:	move	@m00, left
000591:0x00141ab8:	inc	left
000591:0x00141ac0:	icall	
000591:0x00141ad0:	icall	
000592:0x00141ae0:	move	@m00, right
000592:0x00141af0:	dec	right
000592:0x00141af8:	movefm	@c00, temp
000592:0x00141b08:	icall	
000592:0x00141b18:	release	temp
000592:0x00141b20:	jump	0x141a70
000592:0x00141b28:	rts
array<ParticleSource>::MoveIndex()
000612:0x00141b80:	ncalli	array<ParticleSource>.Count()
000612:0x00141b88:	move	count, #return
000613:0x00141b98:	move	new_index, curr_index
000615:0x00141ba8:	cmpi	move_number, _i0
000615:0x00141bb8:	ble	0x141be0
000617:0x00141bc0:	addi	@m00, curr_index, move_number
000617:0x00141bd0:	move	new_index, @m00
000620:0x00141be0:	cmpi	move_number, _i0
000620:0x00141bf0:	bge	0x141c98
000622:0x00141bf8:	subi	@m00, curr_index, move_number
000622:0x00141c08:	move	new_index, @m00
000624:0x00141c18:	cmpi	new_index, _i0
000624:0x00141c28:	bge	0x141c98
000626:0x00141c30:	subi	@m01, _i0, count
000626:0x00141c40:	cmpi	new_index, @m01
000626:0x00141c50:	bgt	0x141c78
000628:0x00141c58:	modi	@m00, new_index, count
000628:0x00141c68:	move	new_index, @m00
000631:0x00141c78:	addi	@m00, new_index, count
000631:0x00141c88:	move	new_index, @m00
000635:0x00141c98:	cmpi	new_index, count
000635:0x00141ca8:	blt	0x141cd0
000637:0x00141cb0:	modi	@m00, new_index, count
000637:0x00141cc0:	move	new_index, @m00
000641:0x00141cd0:	move	#return, new_index
000641:0x00141ce0:	rts
000641:0x00141ce8:	rts
array<ParticleSource>::ShuffleArray()
000646:0x00141d18:	imove	i, 0x000000
000646:0x00141d28:	jump	0x141d48
000646:0x00141d30:	move	@m00, i
000646:0x00141d40:	inc	i
000646:0x00141d48:	ncalli	array<ParticleSource>.Count()
000646:0x00141d50:	cmpi	i, #return
000646:0x00141d60:	bge	0x141d98
000648:0x00141d68:	call	
000648:0x00141d78:	call	
000648:0x00141d90:	jump	0x141d30
000648:0x00141d98:	rts
array<ParticleSource>::DifferentAtPosition()
000666:0x00141dc8:	ncalli	array<ParticleSource>.Count()
000666:0x00141dd0:	move	@m00, #return
000666:0x00141de0:	push	#return
000666:0x00141de8:	ncalli	array<ParticleSource>.Count()
000666:0x00141df0:	move	@m02, #return
000666:0x00141e00:	pop	#return
000666:0x00141e08:	cmpi	@m00, @m02
000666:0x00141e18:	beq	0x141e48
000668:0x00141e20:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00141e30:	imove	#return, 0xffffffff
000669:0x00141e40:	rts
000672:0x00141e48:	imove	i, 0x000000
000672:0x00141e58:	jump	0x141e68
000672:0x00141e60:	inc	i
000672:0x00141e68:	ncalli	array<ParticleSource>.Count()
000672:0x00141e70:	cmpi	i, #return
000672:0x00141e80:	bge	0x141f10
000674:0x00141e88:	icall	
000674:0x00141e98:	movec	@c00, #return
000674:0x00141ea8:	pushc	#return
000674:0x00141eb0:	icall	
000674:0x00141ec0:	movec	@c02, #return
000674:0x00141ed0:	popc	#return
000674:0x00141ed8:	cmpc	@c00, @c02
000674:0x00141ee8:	beq	0x141f08
000676:0x00141ef0:	move	#return, i
000676:0x00141f00:	rts
000676:0x00141f08:	jump	0x141e60
000680:0x00141f10:	imove	#return, 0xffffffff
000680:0x00141f20:	rts
000680:0x00141f28:	rts
FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::FSMTransition()
//scripts/3_Game/systems\fsmbase.c
000024:0x00142240:	movem	m_srcState, src
000025:0x00142250:	movem	m_event, e
000026:0x00142260:	movem	m_dstState, dst
000027:0x00142270:	movem	m_action, a
000028:0x00142280:	movem	m_guard, g
000028:0x00142290:	rts
Param3<int,float,string>::Param3()
//scripts/1_Core/param.c
000096:0x00142420:	move	param1, p1
000097:0x00142430:	move	param2, p2
000098:0x00142440:	moves	param3, p3
000098:0x00142450:	rts
Param3<int,float,string>::Serialize()
000103:0x00142458:	icall	
000103:0x00142468:	cmpi	#return, _i0
000103:0x00142478:	beq	0x1424e8
000103:0x00142480:	icall	
000103:0x00142490:	cmpi	#return, _i0
000103:0x001424a0:	beq	0x1424e8
000103:0x001424a8:	icall	
000103:0x001424b8:	cmpi	#return, _i0
000103:0x001424c8:	beq	0x1424e8
000103:0x001424d0:	imove	#return, 0x000001
000103:0x001424e0:	jump	0x1424f8
000103:0x001424e8:	imove	#return, 0x000000
000103:0x001424f8:	rts
000103:0x00142500:	rts
Param3<int,float,string>::Deserializer()
000108:0x00142508:	icall	
000108:0x00142518:	cmpi	#return, _i0
000108:0x00142528:	beq	0x142598
000108:0x00142530:	icall	
000108:0x00142540:	cmpi	#return, _i0
000108:0x00142550:	beq	0x142598
000108:0x00142558:	icall	
000108:0x00142568:	cmpi	#return, _i0
000108:0x00142578:	beq	0x142598
000108:0x00142580:	imove	#return, 0x000001
000108:0x00142590:	jump	0x1425a8
000108:0x00142598:	imove	#return, 0x000000
000108:0x001425a8:	rts
000108:0x001425b0:	rts
Param1<string>::Param1()
000038:0x00142670:	moves	param1, p1
000038:0x00142680:	rts
Param1<string>::Serialize()
000043:0x00142688:	icall	
000043:0x00142698:	move	#return, #return
000043:0x001426a8:	rts
000043:0x001426b0:	rts
Param1<string>::Deserializer()
000048:0x001426b8:	icall	
000048:0x001426c8:	move	#return, #return
000048:0x001426d8:	rts
000048:0x001426e0:	rts
Param4<int,string,string,string>::Param4()
000128:0x00142928:	move	param1, p1
000129:0x00142938:	moves	param2, p2
000130:0x00142948:	moves	param3, p3
000131:0x00142958:	moves	param4, p4
000131:0x00142968:	rts
Param4<int,string,string,string>::Serialize()
000136:0x00142970:	icall	
000136:0x00142980:	cmpi	#return, _i0
000136:0x00142990:	beq	0x142a28
000136:0x00142998:	icall	
000136:0x001429a8:	cmpi	#return, _i0
000136:0x001429b8:	beq	0x142a28
000136:0x001429c0:	icall	
000136:0x001429d0:	cmpi	#return, _i0
000136:0x001429e0:	beq	0x142a28
000136:0x001429e8:	icall	
000136:0x001429f8:	cmpi	#return, _i0
000136:0x00142a08:	beq	0x142a28
000136:0x00142a10:	imove	#return, 0x000001
000136:0x00142a20:	jump	0x142a38
000136:0x00142a28:	imove	#return, 0x000000
000136:0x00142a38:	rts
000136:0x00142a40:	rts
Param4<int,string,string,string>::Deserializer()
000141:0x00142a48:	icall	
000141:0x00142a58:	cmpi	#return, _i0
000141:0x00142a68:	beq	0x142b00
000141:0x00142a70:	icall	
000141:0x00142a80:	cmpi	#return, _i0
000141:0x00142a90:	beq	0x142b00
000141:0x00142a98:	icall	
000141:0x00142aa8:	cmpi	#return, _i0
000141:0x00142ab8:	beq	0x142b00
000141:0x00142ac0:	icall	
000141:0x00142ad0:	cmpi	#return, _i0
000141:0x00142ae0:	beq	0x142b00
000141:0x00142ae8:	imove	#return, 0x000001
000141:0x00142af8:	jump	0x142b10
000141:0x00142b00:	imove	#return, 0x000000
000141:0x00142b10:	rts
000141:0x00142b18:	rts
Param1<int>::Param1()
000038:0x00142bd8:	move	param1, p1
000038:0x00142be8:	rts
Param1<int>::Serialize()
000043:0x00142bf0:	icall	
000043:0x00142c00:	move	#return, #return
000043:0x00142c10:	rts
000043:0x00142c18:	rts
Param1<int>::Deserializer()
000048:0x00142c20:	icall	
000048:0x00142c30:	move	#return, #return
000048:0x00142c40:	rts
000048:0x00142c48:	rts
Param2<string,string>::Param2()
000066:0x00142d70:	moves	param1, p1
000067:0x00142d80:	moves	param2, p2
000067:0x00142d90:	rts
Param2<string,string>::Serialize()
000072:0x00142d98:	icall	
000072:0x00142da8:	cmpi	#return, _i0
000072:0x00142db8:	beq	0x142e00
000072:0x00142dc0:	icall	
000072:0x00142dd0:	cmpi	#return, _i0
000072:0x00142de0:	beq	0x142e00
000072:0x00142de8:	imove	#return, 0x000001
000072:0x00142df8:	jump	0x142e10
000072:0x00142e00:	imove	#return, 0x000000
000072:0x00142e10:	rts
000072:0x00142e18:	rts
Param2<string,string>::Deserializer()
000077:0x00142e20:	icall	
000077:0x00142e30:	cmpi	#return, _i0
000077:0x00142e40:	beq	0x142e88
000077:0x00142e48:	icall	
000077:0x00142e58:	cmpi	#return, _i0
000077:0x00142e68:	beq	0x142e88
000077:0x00142e70:	imove	#return, 0x000001
000077:0x00142e80:	jump	0x142e98
000077:0x00142e88:	imove	#return, 0x000000
000077:0x00142e98:	rts
000077:0x00142ea0:	rts
Param1<PlayerIdentity>::Param1()
000038:0x00142f60:	movem	param1, p1
000038:0x00142f70:	rts
Param1<PlayerIdentity>::Serialize()
000043:0x00142f78:	icall	
000043:0x00142f88:	move	#return, #return
000043:0x00142f98:	rts
000043:0x00142fa0:	rts
Param1<PlayerIdentity>::Deserializer()
000048:0x00142fa8:	icall	
000048:0x00142fb8:	move	#return, #return
000048:0x00142fc8:	rts
000048:0x00142fd0:	rts
Param5<PlayerIdentity,bool,vector,float,int>::Param5()
000158:0x00143290:	movem	param1, p1
000159:0x001432a0:	move	param2, p2
000160:0x001432b0:	movev	param3, p3
000161:0x001432c0:	move	param4, p4
000162:0x001432d0:	move	param5, p5
000162:0x001432e0:	rts
Param5<PlayerIdentity,bool,vector,float,int>::Serialize()
000167:0x001432e8:	icall	
000167:0x001432f8:	cmpi	#return, _i0
000167:0x00143308:	beq	0x1433c8
000167:0x00143310:	icall	
000167:0x00143320:	cmpi	#return, _i0
000167:0x00143330:	beq	0x1433c8
000167:0x00143338:	icall	
000167:0x00143348:	cmpi	#return, _i0
000167:0x00143358:	beq	0x1433c8
000167:0x00143360:	icall	
000167:0x00143370:	cmpi	#return, _i0
000167:0x00143380:	beq	0x1433c8
000167:0x00143388:	icall	
000167:0x00143398:	cmpi	#return, _i0
000167:0x001433a8:	beq	0x1433c8
000167:0x001433b0:	imove	#return, 0x000001
000167:0x001433c0:	jump	0x1433d8
000167:0x001433c8:	imove	#return, 0x000000
000167:0x001433d8:	rts
000167:0x001433e0:	rts
Param5<PlayerIdentity,bool,vector,float,int>::Deserializer()
000172:0x001433e8:	icall	
000172:0x001433f8:	cmpi	#return, _i0
000172:0x00143408:	beq	0x1434c8
000172:0x00143410:	icall	
000172:0x00143420:	cmpi	#return, _i0
000172:0x00143430:	beq	0x1434c8
000172:0x00143438:	icall	
000172:0x00143448:	cmpi	#return, _i0
000172:0x00143458:	beq	0x1434c8
000172:0x00143460:	icall	
000172:0x00143470:	cmpi	#return, _i0
000172:0x00143480:	beq	0x1434c8
000172:0x00143488:	icall	
000172:0x00143498:	cmpi	#return, _i0
000172:0x001434a8:	beq	0x1434c8
000172:0x001434b0:	imove	#return, 0x000001
000172:0x001434c0:	jump	0x1434d8
000172:0x001434c8:	imove	#return, 0x000000
000172:0x001434d8:	rts
000172:0x001434e0:	rts
Param3<PlayerIdentity,vector,Serializer>::Param3()
000096:0x00143680:	movem	param1, p1
000097:0x00143690:	movev	param2, p2
000098:0x001436a0:	movem	param3, p3
000098:0x001436b0:	rts
Param3<PlayerIdentity,vector,Serializer>::Serialize()
000103:0x001436b8:	icall	
000103:0x001436c8:	cmpi	#return, _i0
000103:0x001436d8:	beq	0x143748
000103:0x001436e0:	icall	
000103:0x001436f0:	cmpi	#return, _i0
000103:0x00143700:	beq	0x143748
000103:0x00143708:	icall	
000103:0x00143718:	cmpi	#return, _i0
000103:0x00143728:	beq	0x143748
000103:0x00143730:	imove	#return, 0x000001
000103:0x00143740:	jump	0x143758
000103:0x00143748:	imove	#return, 0x000000
000103:0x00143758:	rts
000103:0x00143760:	rts
Param3<PlayerIdentity,vector,Serializer>::Deserializer()
000108:0x00143768:	icall	
000108:0x00143778:	cmpi	#return, _i0
000108:0x00143788:	beq	0x1437f8
000108:0x00143790:	icall	
000108:0x001437a0:	cmpi	#return, _i0
000108:0x001437b0:	beq	0x1437f8
000108:0x001437b8:	icall	
000108:0x001437c8:	cmpi	#return, _i0
000108:0x001437d8:	beq	0x1437f8
000108:0x001437e0:	imove	#return, 0x000001
000108:0x001437f0:	jump	0x143808
000108:0x001437f8:	imove	#return, 0x000000
000108:0x00143808:	rts
000108:0x00143810:	rts
Param1<Man>::Param1()
000038:0x001438d0:	movem	param1, p1
000038:0x001438e0:	rts
Param1<Man>::Serialize()
000043:0x001438e8:	icall	
000043:0x001438f8:	move	#return, #return
000043:0x00143908:	rts
000043:0x00143910:	rts
Param1<Man>::Deserializer()
000048:0x00143918:	icall	
000048:0x00143928:	move	#return, #return
000048:0x00143938:	rts
000048:0x00143940:	rts
Param2<PlayerIdentity,Man>::Param2()
000066:0x00143a68:	movem	param1, p1
000067:0x00143a78:	movem	param2, p2
000067:0x00143a88:	rts
Param2<PlayerIdentity,Man>::Serialize()
000072:0x00143a90:	icall	
000072:0x00143aa0:	cmpi	#return, _i0
000072:0x00143ab0:	beq	0x143af8
000072:0x00143ab8:	icall	
000072:0x00143ac8:	cmpi	#return, _i0
000072:0x00143ad8:	beq	0x143af8
000072:0x00143ae0:	imove	#return, 0x000001
000072:0x00143af0:	jump	0x143b08
000072:0x00143af8:	imove	#return, 0x000000
000072:0x00143b08:	rts
000072:0x00143b10:	rts
Param2<PlayerIdentity,Man>::Deserializer()
000077:0x00143b18:	icall	
000077:0x00143b28:	cmpi	#return, _i0
000077:0x00143b38:	beq	0x143b80
000077:0x00143b40:	icall	
000077:0x00143b50:	cmpi	#return, _i0
000077:0x00143b60:	beq	0x143b80
000077:0x00143b68:	imove	#return, 0x000001
000077:0x00143b78:	jump	0x143b90
000077:0x00143b80:	imove	#return, 0x000000
000077:0x00143b90:	rts
000077:0x00143b98:	rts
Param4<PlayerIdentity,Man,int,bool>::Param4()
000128:0x00143d90:	movem	param1, p1
000129:0x00143da0:	movem	param2, p2
000130:0x00143db0:	move	param3, p3
000131:0x00143dc0:	move	param4, p4
000131:0x00143dd0:	rts
Param4<PlayerIdentity,Man,int,bool>::Serialize()
000136:0x00143dd8:	icall	
000136:0x00143de8:	cmpi	#return, _i0
000136:0x00143df8:	beq	0x143e90
000136:0x00143e00:	icall	
000136:0x00143e10:	cmpi	#return, _i0
000136:0x00143e20:	beq	0x143e90
000136:0x00143e28:	icall	
000136:0x00143e38:	cmpi	#return, _i0
000136:0x00143e48:	beq	0x143e90
000136:0x00143e50:	icall	
000136:0x00143e60:	cmpi	#return, _i0
000136:0x00143e70:	beq	0x143e90
000136:0x00143e78:	imove	#return, 0x000001
000136:0x00143e88:	jump	0x143ea0
000136:0x00143e90:	imove	#return, 0x000000
000136:0x00143ea0:	rts
000136:0x00143ea8:	rts
Param4<PlayerIdentity,Man,int,bool>::Deserializer()
000141:0x00143eb0:	icall	
000141:0x00143ec0:	cmpi	#return, _i0
000141:0x00143ed0:	beq	0x143f68
000141:0x00143ed8:	icall	
000141:0x00143ee8:	cmpi	#return, _i0
000141:0x00143ef8:	beq	0x143f68
000141:0x00143f00:	icall	
000141:0x00143f10:	cmpi	#return, _i0
000141:0x00143f20:	beq	0x143f68
000141:0x00143f28:	icall	
000141:0x00143f38:	cmpi	#return, _i0
000141:0x00143f48:	beq	0x143f68
000141:0x00143f50:	imove	#return, 0x000001
000141:0x00143f60:	jump	0x143f78
000141:0x00143f68:	imove	#return, 0x000000
000141:0x00143f78:	rts
000141:0x00143f80:	rts
Param1<vector>::Param1()
000038:0x00144050:	movev	param1, p1
000038:0x00144060:	rts
Param1<vector>::Serialize()
000043:0x00144068:	icall	
000043:0x00144078:	move	#return, #return
000043:0x00144088:	rts
000043:0x00144090:	rts
Param1<vector>::Deserializer()
000048:0x00144098:	icall	
000048:0x001440a8:	move	#return, #return
000048:0x001440b8:	rts
000048:0x001440c0:	rts
Param1<float>::Param1()
000038:0x00144180:	move	param1, p1
000038:0x00144190:	rts
Param1<float>::Serialize()
000043:0x00144198:	icall	
000043:0x001441a8:	move	#return, #return
000043:0x001441b8:	rts
000043:0x001441c0:	rts
Param1<float>::Deserializer()
000048:0x001441c8:	icall	
000048:0x001441d8:	move	#return, #return
000048:0x001441e8:	rts
000048:0x001441f0:	rts
Param3<int,int,bool>::Param3()
000096:0x00144380:	move	param1, p1
000097:0x00144390:	move	param2, p2
000098:0x001443a0:	move	param3, p3
000098:0x001443b0:	rts
Param3<int,int,bool>::Serialize()
000103:0x001443b8:	icall	
000103:0x001443c8:	cmpi	#return, _i0
000103:0x001443d8:	beq	0x144448
000103:0x001443e0:	icall	
000103:0x001443f0:	cmpi	#return, _i0
000103:0x00144400:	beq	0x144448
000103:0x00144408:	icall	
000103:0x00144418:	cmpi	#return, _i0
000103:0x00144428:	beq	0x144448
000103:0x00144430:	imove	#return, 0x000001
000103:0x00144440:	jump	0x144458
000103:0x00144448:	imove	#return, 0x000000
000103:0x00144458:	rts
000103:0x00144460:	rts
Param3<int,int,bool>::Deserializer()
000108:0x00144468:	icall	
000108:0x00144478:	cmpi	#return, _i0
000108:0x00144488:	beq	0x1444f8
000108:0x00144490:	icall	
000108:0x001444a0:	cmpi	#return, _i0
000108:0x001444b0:	beq	0x1444f8
000108:0x001444b8:	icall	
000108:0x001444c8:	cmpi	#return, _i0
000108:0x001444d8:	beq	0x1444f8
000108:0x001444e0:	imove	#return, 0x000001
000108:0x001444f0:	jump	0x144508
000108:0x001444f8:	imove	#return, 0x000000
000108:0x00144508:	rts
000108:0x00144510:	rts
Param2<bool,bool>::Param2()
000066:0x00144638:	move	param1, p1
000067:0x00144648:	move	param2, p2
000067:0x00144658:	rts
Param2<bool,bool>::Serialize()
000072:0x00144660:	icall	
000072:0x00144670:	cmpi	#return, _i0
000072:0x00144680:	beq	0x1446c8
000072:0x00144688:	icall	
000072:0x00144698:	cmpi	#return, _i0
000072:0x001446a8:	beq	0x1446c8
000072:0x001446b0:	imove	#return, 0x000001
000072:0x001446c0:	jump	0x1446d8
000072:0x001446c8:	imove	#return, 0x000000
000072:0x001446d8:	rts
000072:0x001446e0:	rts
Param2<bool,bool>::Deserializer()
000077:0x001446e8:	icall	
000077:0x001446f8:	cmpi	#return, _i0
000077:0x00144708:	beq	0x144750
000077:0x00144710:	icall	
000077:0x00144720:	cmpi	#return, _i0
000077:0x00144730:	beq	0x144750
000077:0x00144738:	imove	#return, 0x000001
000077:0x00144748:	jump	0x144760
000077:0x00144750:	imove	#return, 0x000000
000077:0x00144760:	rts
000077:0x00144768:	rts
Param1<FreeDebugCamera>::Param1()
000038:0x00144828:	movem	param1, p1
000038:0x00144838:	rts
Param1<FreeDebugCamera>::Serialize()
000043:0x00144840:	icall	
000043:0x00144850:	move	#return, #return
000043:0x00144860:	rts
000043:0x00144868:	rts
Param1<FreeDebugCamera>::Deserializer()
000048:0x00144870:	icall	
000048:0x00144880:	move	#return, #return
000048:0x00144890:	rts
000048:0x00144898:	rts
Param2<DayZPlayer,Object>::Param2()
000066:0x001449c0:	movem	param1, p1
000067:0x001449d0:	movem	param2, p2
000067:0x001449e0:	rts
Param2<DayZPlayer,Object>::Serialize()
000072:0x001449e8:	icall	
000072:0x001449f8:	cmpi	#return, _i0
000072:0x00144a08:	beq	0x144a50
000072:0x00144a10:	icall	
000072:0x00144a20:	cmpi	#return, _i0
000072:0x00144a30:	beq	0x144a50
000072:0x00144a38:	imove	#return, 0x000001
000072:0x00144a48:	jump	0x144a60
000072:0x00144a50:	imove	#return, 0x000000
000072:0x00144a60:	rts
000072:0x00144a68:	rts
Param2<DayZPlayer,Object>::Deserializer()
000077:0x00144a70:	icall	
000077:0x00144a80:	cmpi	#return, _i0
000077:0x00144a90:	beq	0x144ad8
000077:0x00144a98:	icall	
000077:0x00144aa8:	cmpi	#return, _i0
000077:0x00144ab8:	beq	0x144ad8
000077:0x00144ac0:	imove	#return, 0x000001
000077:0x00144ad0:	jump	0x144ae8
000077:0x00144ad8:	imove	#return, 0x000000
000077:0x00144ae8:	rts
000077:0x00144af0:	rts
array<array<string>>::InsertAll()
//scripts/1_Core/proto\enscript.c
000427:0x00145840:	imove	i, 0x000000
000427:0x00145850:	jump	0x145870
000427:0x00145858:	move	@m00, i
000427:0x00145868:	inc	i
000427:0x00145870:	ncalli	array<array<string>>.Count()
000427:0x00145878:	cmpi	i, #return
000427:0x00145888:	bge	0x1458b8
000429:0x00145890:	icall	
000429:0x001458a0:	icall	
000429:0x001458b0:	jump	0x145858
000429:0x001458b8:	rts
array<array<string>>::RemoveItem()
000479:0x001458e8:	movefm	@c00, value
000479:0x001458f8:	icall	
000479:0x00145908:	move	remove_index, #return
000481:0x00145918:	cmpi	remove_index, _i0
000481:0x00145928:	blt	0x145940
000483:0x00145930:	ncalli	array<array<string>>.RemoveOrdered(remove_index)
000483:0x00145940:	rts
array<array<string>>::RemoveItemUnOrdered()
000489:0x00145970:	movefm	@c00, value
000489:0x00145980:	icall	
000489:0x00145990:	move	remove_index, #return
000491:0x001459a0:	cmpi	remove_index, _i0
000491:0x001459b0:	blt	0x1459c8
000493:0x001459b8:	ncalli	array<array<string>>.Remove(remove_index)
000493:0x001459c8:	rts
array<array<string>>::IsValidIndex()
000499:0x001459d0:	cmpi	index, _i-1
000499:0x001459e0:	ble	0x145a20
000499:0x001459e8:	ncalli	array<array<string>>.Count()
000499:0x001459f0:	cmpi	index, #return
000499:0x00145a00:	bge	0x145a20
000499:0x00145a08:	imove	#return, 0x000001
000499:0x00145a18:	jump	0x145a30
000499:0x00145a20:	imove	#return, 0x000000
000499:0x00145a30:	rts
000499:0x00145a38:	rts
array<array<string>>::Debug()
000525:0x00145a90:	ncalli	array<array<string>>.Count()
000525:0x00145a98:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00145ac8:	icall	Print(#return)
000526:0x00145ad8:	imove	i, 0x000000
000526:0x00145ae8:	jump	0x145b08
000526:0x00145af0:	move	@m00, i
000526:0x00145b00:	inc	i
000526:0x00145b08:	ncalli	array<array<string>>.Count()
000526:0x00145b10:	cmpi	i, #return
000526:0x00145b20:	bge	0x145b98
000528:0x00145b28:	icall	
000528:0x00145b38:	movetm	item, #return
000529:0x00145b48:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00145b78:	icall	Print(#return)
000529:0x00145b88:	release	item
000529:0x00145b90:	jump	0x145af0
000529:0x00145b98:	rts
array<array<string>>::GetRandomIndex()
000544:0x00145ba0:	ncalli	array<array<string>>.Count()
000544:0x00145ba8:	move	@m00, #return
000544:0x00145bb8:	cmpi	@m00, _i0
000544:0x00145bc8:	ble	0x145c00
000546:0x00145bd0:	ncalli	array<array<string>>.Count()
000546:0x00145bd8:	icall	RandomInt(_i0, #return)
000546:0x00145be8:	move	#return, #return
000546:0x00145bf8:	rts
000549:0x00145c00:	imove	#return, 0xffffffff
000549:0x00145c10:	rts
000549:0x00145c18:	rts
array<array<string>>::GetRandomElement()
000563:0x00145c20:	call	
000563:0x00145c30:	icall	
000563:0x00145c40:	movetm	#return, #return
000563:0x00145c50:	rts
000563:0x00145c58:	rts
array<array<string>>::SwapItems()
000568:0x00145c88:	icall	
000568:0x00145c98:	movetm	item1, #return
000569:0x00145ca8:	icall	
000569:0x00145cb8:	icall	
000570:0x00145cc8:	movefm	@c00, item1
000570:0x00145cd8:	icall	
000570:0x00145ce8:	release	item1
000570:0x00145cf0:	rts
array<array<string>>::InsertArray()
000575:0x00145d48:	imove	i, 0x000000
000575:0x00145d58:	jump	0x145d78
000575:0x00145d60:	move	@m00, i
000575:0x00145d70:	inc	i
000575:0x00145d78:	ncalli	array<array<string>>.Count()
000575:0x00145d80:	cmpi	i, #return
000575:0x00145d90:	bge	0x145de8
000577:0x00145d98:	icall	
000577:0x00145da8:	movetm	item, #return
000578:0x00145db8:	movefm	@c00, item
000578:0x00145dc8:	icall	
000578:0x00145dd8:	release	item
000578:0x00145de0:	jump	0x145d60
000578:0x00145de8:	rts
array<array<string>>::Invert()
000584:0x00145e68:	imove	left, 0x000000
000585:0x00145e78:	ncalli	array<array<string>>.Count()
000585:0x00145e80:	subi	right, #return, _i1
000586:0x00145e90:	cmpi	right, _i0
000586:0x00145ea0:	ble	0x145f60
000588:0x00145ea8:	cmpi	left, right
000588:0x00145eb8:	bge	0x145f60
000590:0x00145ec0:	icall	
000590:0x00145ed0:	movetm	temp, #return
000591:0x00145ee0:	move	@m00, left
000591:0x00145ef0:	inc	left
000591:0x00145ef8:	icall	
000591:0x00145f08:	icall	
000592:0x00145f18:	move	@m00, right
000592:0x00145f28:	dec	right
000592:0x00145f30:	movefm	@c00, temp
000592:0x00145f40:	icall	
000592:0x00145f50:	release	temp
000592:0x00145f58:	jump	0x145ea8
000592:0x00145f60:	rts
array<array<string>>::MoveIndex()
000612:0x00145fb8:	ncalli	array<array<string>>.Count()
000612:0x00145fc0:	move	count, #return
000613:0x00145fd0:	move	new_index, curr_index
000615:0x00145fe0:	cmpi	move_number, _i0
000615:0x00145ff0:	ble	0x146018
000617:0x00145ff8:	addi	@m00, curr_index, move_number
000617:0x00146008:	move	new_index, @m00
000620:0x00146018:	cmpi	move_number, _i0
000620:0x00146028:	bge	0x1460d0
000622:0x00146030:	subi	@m00, curr_index, move_number
000622:0x00146040:	move	new_index, @m00
000624:0x00146050:	cmpi	new_index, _i0
000624:0x00146060:	bge	0x1460d0
000626:0x00146068:	subi	@m01, _i0, count
000626:0x00146078:	cmpi	new_index, @m01
000626:0x00146088:	bgt	0x1460b0
000628:0x00146090:	modi	@m00, new_index, count
000628:0x001460a0:	move	new_index, @m00
000631:0x001460b0:	addi	@m00, new_index, count
000631:0x001460c0:	move	new_index, @m00
000635:0x001460d0:	cmpi	new_index, count
000635:0x001460e0:	blt	0x146108
000637:0x001460e8:	modi	@m00, new_index, count
000637:0x001460f8:	move	new_index, @m00
000641:0x00146108:	move	#return, new_index
000641:0x00146118:	rts
000641:0x00146120:	rts
array<array<string>>::ShuffleArray()
000646:0x00146150:	imove	i, 0x000000
000646:0x00146160:	jump	0x146180
000646:0x00146168:	move	@m00, i
000646:0x00146178:	inc	i
000646:0x00146180:	ncalli	array<array<string>>.Count()
000646:0x00146188:	cmpi	i, #return
000646:0x00146198:	bge	0x1461d0
000648:0x001461a0:	call	
000648:0x001461b0:	call	
000648:0x001461c8:	jump	0x146168
000648:0x001461d0:	rts
array<array<string>>::DifferentAtPosition()
000666:0x00146200:	ncalli	array<array<string>>.Count()
000666:0x00146208:	move	@m00, #return
000666:0x00146218:	push	#return
000666:0x00146220:	ncalli	array<array<string>>.Count()
000666:0x00146228:	move	@m02, #return
000666:0x00146238:	pop	#return
000666:0x00146240:	cmpi	@m00, @m02
000666:0x00146250:	beq	0x146280
000668:0x00146258:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00146268:	imove	#return, 0xffffffff
000669:0x00146278:	rts
000672:0x00146280:	imove	i, 0x000000
000672:0x00146290:	jump	0x1462a0
000672:0x00146298:	inc	i
000672:0x001462a0:	ncalli	array<array<string>>.Count()
000672:0x001462a8:	cmpi	i, #return
000672:0x001462b8:	bge	0x146348
000674:0x001462c0:	icall	
000674:0x001462d0:	movec	@c00, #return
000674:0x001462e0:	pushc	#return
000674:0x001462e8:	icall	
000674:0x001462f8:	movec	@c02, #return
000674:0x00146308:	popc	#return
000674:0x00146310:	cmpc	@c00, @c02
000674:0x00146320:	beq	0x146340
000676:0x00146328:	move	#return, i
000676:0x00146338:	rts
000676:0x00146340:	jump	0x146298
000680:0x00146348:	imove	#return, 0xffffffff
000680:0x00146358:	rts
000680:0x00146360:	rts
map<string,array<string>>::GetKeyArray()
000885:0x00146660:	new	keys, array<string>
000886:0x00146680:	imove	i, 0x000000
000886:0x00146690:	jump	0x1466b0
000886:0x00146698:	move	@m00, i
000886:0x001466a8:	inc	i
000886:0x001466b0:	ncalli	map<string,array<string>>.Count()
000886:0x001466b8:	cmpi	i, #return
000886:0x001466c8:	bge	0x1466f8
000888:0x001466d0:	icall	
000888:0x001466e0:	icall	
000888:0x001466f0:	jump	0x146698
000890:0x001466f8:	movem	#return, keys
000890:0x00146708:	release	keys
000890:0x00146710:	rts
000890:0x00146718:	release	keys
000890:0x00146720:	rts
map<string,array<string>>::GetValueArray()
000895:0x00146778:	new	elements, array<array<string>>
000896:0x00146798:	imove	i, 0x000000
000896:0x001467a8:	jump	0x1467c8
000896:0x001467b0:	move	@m00, i
000896:0x001467c0:	inc	i
000896:0x001467c8:	ncalli	map<string,array<string>>.Count()
000896:0x001467d0:	cmpi	i, #return
000896:0x001467e0:	bge	0x146810
000898:0x001467e8:	icall	
000898:0x001467f8:	icall	
000898:0x00146808:	jump	0x1467b0
000900:0x00146810:	movem	#return, elements
000900:0x00146820:	release	elements
000900:0x00146828:	rts
000900:0x00146830:	release	elements
000900:0x00146838:	rts
map<string,array<string>>::ReplaceKey()
000905:0x00146840:	icall	
000905:0x00146850:	cmpi	#return, _i0
000905:0x00146860:	beq	0x1468b0
000907:0x00146868:	icall	
000907:0x00146878:	icall	
000908:0x00146888:	icall	
000909:0x00146898:	imove	#return, 0x000001
000909:0x001468a8:	rts
000911:0x001468b0:	imove	#return, 0x000000
000911:0x001468c0:	rts
000911:0x001468c8:	rts
map<string,array<string>>::GetKeyByValue()
000917:0x00146920:	imove	i, 0x000000
000917:0x00146930:	jump	0x146950
000917:0x00146938:	move	@m00, i
000917:0x00146948:	inc	i
000917:0x00146950:	ncalli	map<string,array<string>>.Count()
000917:0x00146958:	cmpi	i, #return
000917:0x00146968:	bge	0x1469d8
000919:0x00146970:	icall	
000919:0x00146980:	movec	@c00, #return
000919:0x00146990:	cmpmc	@c00, value
000919:0x001469a0:	bne	0x1469d0
000921:0x001469a8:	icall	
000921:0x001469b8:	moves	ret, #return
000922:0x001469c8:	jump	0x1469d8
000922:0x001469d0:	jump	0x146938
000926:0x001469d8:	moves	#return, ret
000926:0x001469e8:	rts
000926:0x001469f0:	rts
map<string,array<string>>::GetKeyByValueChecked()
000931:0x00146a20:	imove	i, 0x000000
000931:0x00146a30:	jump	0x146a50
000931:0x00146a38:	move	@m00, i
000931:0x00146a48:	inc	i
000931:0x00146a50:	ncalli	map<string,array<string>>.Count()
000931:0x00146a58:	cmpi	i, #return
000931:0x00146a68:	bge	0x146af8
000933:0x00146a70:	icall	
000933:0x00146a80:	movec	@c00, #return
000933:0x00146a90:	cmpmc	@c00, value
000933:0x00146aa0:	bne	0x146af0
000935:0x00146aa8:	icall	
000935:0x00146ab8:	moves	key, #return
000936:0x00146ac8:	imove	#return, 0x000001
000936:0x00146ad8:	moves	key, key
000936:0x00146ae8:	rts
000936:0x00146af0:	jump	0x146a38
000939:0x00146af8:	imove	#return, 0x000000
000939:0x00146b08:	moves	key, key
000939:0x00146b18:	rts
000939:0x00146b20:	moves	key, key
000939:0x00146b30:	rts
map<string,@array<string>>::GetKeyArray()
000885:0x00146e80:	new	keys, array<string>
000886:0x00146ea0:	imove	i, 0x000000
000886:0x00146eb0:	jump	0x146ed0
000886:0x00146eb8:	move	@m00, i
000886:0x00146ec8:	inc	i
000886:0x00146ed0:	ncalli	map<string,@array<string>>.Count()
000886:0x00146ed8:	cmpi	i, #return
000886:0x00146ee8:	bge	0x146f18
000888:0x00146ef0:	icall	
000888:0x00146f00:	icall	
000888:0x00146f10:	jump	0x146eb8
000890:0x00146f18:	movem	#return, keys
000890:0x00146f28:	release	keys
000890:0x00146f30:	rts
000890:0x00146f38:	release	keys
000890:0x00146f40:	rts
map<string,@array<string>>::GetValueArray()
000895:0x00146f98:	new	elements, array<array<string>>
000896:0x00146fb8:	imove	i, 0x000000
000896:0x00146fc8:	jump	0x146fe8
000896:0x00146fd0:	move	@m00, i
000896:0x00146fe0:	inc	i
000896:0x00146fe8:	ncalli	map<string,@array<string>>.Count()
000896:0x00146ff0:	cmpi	i, #return
000896:0x00147000:	bge	0x147030
000898:0x00147008:	icall	
000898:0x00147018:	icall	
000898:0x00147028:	jump	0x146fd0
000900:0x00147030:	movem	#return, elements
000900:0x00147040:	release	elements
000900:0x00147048:	rts
000900:0x00147050:	release	elements
000900:0x00147058:	rts
map<string,@array<string>>::ReplaceKey()
000905:0x00147060:	icall	
000905:0x00147070:	cmpi	#return, _i0
000905:0x00147080:	beq	0x1470d0
000907:0x00147088:	icall	
000907:0x00147098:	icall	
000908:0x001470a8:	icall	
000909:0x001470b8:	imove	#return, 0x000001
000909:0x001470c8:	rts
000911:0x001470d0:	imove	#return, 0x000000
000911:0x001470e0:	rts
000911:0x001470e8:	rts
map<string,@array<string>>::GetKeyByValue()
000917:0x00147140:	imove	i, 0x000000
000917:0x00147150:	jump	0x147170
000917:0x00147158:	move	@m00, i
000917:0x00147168:	inc	i
000917:0x00147170:	ncalli	map<string,@array<string>>.Count()
000917:0x00147178:	cmpi	i, #return
000917:0x00147188:	bge	0x1471f8
000919:0x00147190:	icall	
000919:0x001471a0:	movec	@c00, #return
000919:0x001471b0:	cmpmc	@c00, value
000919:0x001471c0:	bne	0x1471f0
000921:0x001471c8:	icall	
000921:0x001471d8:	moves	ret, #return
000922:0x001471e8:	jump	0x1471f8
000922:0x001471f0:	jump	0x147158
000926:0x001471f8:	moves	#return, ret
000926:0x00147208:	rts
000926:0x00147210:	rts
map<string,@array<string>>::GetKeyByValueChecked()
000931:0x00147240:	imove	i, 0x000000
000931:0x00147250:	jump	0x147270
000931:0x00147258:	move	@m00, i
000931:0x00147268:	inc	i
000931:0x00147270:	ncalli	map<string,@array<string>>.Count()
000931:0x00147278:	cmpi	i, #return
000931:0x00147288:	bge	0x147318
000933:0x00147290:	icall	
000933:0x001472a0:	movec	@c00, #return
000933:0x001472b0:	cmpmc	@c00, value
000933:0x001472c0:	bne	0x147310
000935:0x001472c8:	icall	
000935:0x001472d8:	moves	key, #return
000936:0x001472e8:	imove	#return, 0x000001
000936:0x001472f8:	moves	key, key
000936:0x00147308:	rts
000936:0x00147310:	jump	0x147258
000939:0x00147318:	imove	#return, 0x000000
000939:0x00147328:	moves	key, key
000939:0x00147338:	rts
000939:0x00147340:	moves	key, key
000939:0x00147350:	rts
Param4<string,string,int,int>::Param4()
//scripts/1_Core/param.c
000128:0x00147548:	moves	param1, p1
000129:0x00147558:	moves	param2, p2
000130:0x00147568:	move	param3, p3
000131:0x00147578:	move	param4, p4
000131:0x00147588:	rts
Param4<string,string,int,int>::Serialize()
000136:0x00147590:	icall	
000136:0x001475a0:	cmpi	#return, _i0
000136:0x001475b0:	beq	0x147648
000136:0x001475b8:	icall	
000136:0x001475c8:	cmpi	#return, _i0
000136:0x001475d8:	beq	0x147648
000136:0x001475e0:	icall	
000136:0x001475f0:	cmpi	#return, _i0
000136:0x00147600:	beq	0x147648
000136:0x00147608:	icall	
000136:0x00147618:	cmpi	#return, _i0
000136:0x00147628:	beq	0x147648
000136:0x00147630:	imove	#return, 0x000001
000136:0x00147640:	jump	0x147658
000136:0x00147648:	imove	#return, 0x000000
000136:0x00147658:	rts
000136:0x00147660:	rts
Param4<string,string,int,int>::Deserializer()
000141:0x00147668:	icall	
000141:0x00147678:	cmpi	#return, _i0
000141:0x00147688:	beq	0x147720
000141:0x00147690:	icall	
000141:0x001476a0:	cmpi	#return, _i0
000141:0x001476b0:	beq	0x147720
000141:0x001476b8:	icall	
000141:0x001476c8:	cmpi	#return, _i0
000141:0x001476d8:	beq	0x147720
000141:0x001476e0:	icall	
000141:0x001476f0:	cmpi	#return, _i0
000141:0x00147700:	beq	0x147720
000141:0x00147708:	imove	#return, 0x000001
000141:0x00147718:	jump	0x147730
000141:0x00147720:	imove	#return, 0x000000
000141:0x00147730:	rts
000141:0x00147738:	rts
array<GetServersResultRow>::InsertAll()
//scripts/1_Core/proto\enscript.c
000427:0x00147f78:	imove	i, 0x000000
000427:0x00147f88:	jump	0x147fa8
000427:0x00147f90:	move	@m00, i
000427:0x00147fa0:	inc	i
000427:0x00147fa8:	ncalli	array<GetServersResultRow>.Count()
000427:0x00147fb0:	cmpi	i, #return
000427:0x00147fc0:	bge	0x147ff0
000429:0x00147fc8:	icall	
000429:0x00147fd8:	icall	
000429:0x00147fe8:	jump	0x147f90
000429:0x00147ff0:	rts
array<GetServersResultRow>::RemoveItem()
000479:0x00148020:	movefm	@c00, value
000479:0x00148030:	icall	
000479:0x00148040:	move	remove_index, #return
000481:0x00148050:	cmpi	remove_index, _i0
000481:0x00148060:	blt	0x148078
000483:0x00148068:	ncalli	array<GetServersResultRow>.RemoveOrdered(remove_index)
000483:0x00148078:	rts
array<GetServersResultRow>::RemoveItemUnOrdered()
000489:0x001480a8:	movefm	@c00, value
000489:0x001480b8:	icall	
000489:0x001480c8:	move	remove_index, #return
000491:0x001480d8:	cmpi	remove_index, _i0
000491:0x001480e8:	blt	0x148100
000493:0x001480f0:	ncalli	array<GetServersResultRow>.Remove(remove_index)
000493:0x00148100:	rts
array<GetServersResultRow>::IsValidIndex()
000499:0x00148108:	cmpi	index, _i-1
000499:0x00148118:	ble	0x148158
000499:0x00148120:	ncalli	array<GetServersResultRow>.Count()
000499:0x00148128:	cmpi	index, #return
000499:0x00148138:	bge	0x148158
000499:0x00148140:	imove	#return, 0x000001
000499:0x00148150:	jump	0x148168
000499:0x00148158:	imove	#return, 0x000000
000499:0x00148168:	rts
000499:0x00148170:	rts
array<GetServersResultRow>::Debug()
000525:0x001481c8:	ncalli	array<GetServersResultRow>.Count()
000525:0x001481d0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00148200:	icall	Print(#return)
000526:0x00148210:	imove	i, 0x000000
000526:0x00148220:	jump	0x148240
000526:0x00148228:	move	@m00, i
000526:0x00148238:	inc	i
000526:0x00148240:	ncalli	array<GetServersResultRow>.Count()
000526:0x00148248:	cmpi	i, #return
000526:0x00148258:	bge	0x1482d0
000528:0x00148260:	icall	
000528:0x00148270:	movetm	item, #return
000529:0x00148280:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001482b0:	icall	Print(#return)
000529:0x001482c0:	release	item
000529:0x001482c8:	jump	0x148228
000529:0x001482d0:	rts
array<GetServersResultRow>::GetRandomIndex()
000544:0x001482d8:	ncalli	array<GetServersResultRow>.Count()
000544:0x001482e0:	move	@m00, #return
000544:0x001482f0:	cmpi	@m00, _i0
000544:0x00148300:	ble	0x148338
000546:0x00148308:	ncalli	array<GetServersResultRow>.Count()
000546:0x00148310:	icall	RandomInt(_i0, #return)
000546:0x00148320:	move	#return, #return
000546:0x00148330:	rts
000549:0x00148338:	imove	#return, 0xffffffff
000549:0x00148348:	rts
000549:0x00148350:	rts
array<GetServersResultRow>::GetRandomElement()
000563:0x00148358:	call	
000563:0x00148368:	icall	
000563:0x00148378:	movetm	#return, #return
000563:0x00148388:	rts
000563:0x00148390:	rts
array<GetServersResultRow>::SwapItems()
000568:0x001483c0:	icall	
000568:0x001483d0:	movetm	item1, #return
000569:0x001483e0:	icall	
000569:0x001483f0:	icall	
000570:0x00148400:	movefm	@c00, item1
000570:0x00148410:	icall	
000570:0x00148420:	release	item1
000570:0x00148428:	rts
array<GetServersResultRow>::InsertArray()
000575:0x00148480:	imove	i, 0x000000
000575:0x00148490:	jump	0x1484b0
000575:0x00148498:	move	@m00, i
000575:0x001484a8:	inc	i
000575:0x001484b0:	ncalli	array<GetServersResultRow>.Count()
000575:0x001484b8:	cmpi	i, #return
000575:0x001484c8:	bge	0x148520
000577:0x001484d0:	icall	
000577:0x001484e0:	movetm	item, #return
000578:0x001484f0:	movefm	@c00, item
000578:0x00148500:	icall	
000578:0x00148510:	release	item
000578:0x00148518:	jump	0x148498
000578:0x00148520:	rts
array<GetServersResultRow>::Invert()
000584:0x001485a0:	imove	left, 0x000000
000585:0x001485b0:	ncalli	array<GetServersResultRow>.Count()
000585:0x001485b8:	subi	right, #return, _i1
000586:0x001485c8:	cmpi	right, _i0
000586:0x001485d8:	ble	0x148698
000588:0x001485e0:	cmpi	left, right
000588:0x001485f0:	bge	0x148698
000590:0x001485f8:	icall	
000590:0x00148608:	movetm	temp, #return
000591:0x00148618:	move	@m00, left
000591:0x00148628:	inc	left
000591:0x00148630:	icall	
000591:0x00148640:	icall	
000592:0x00148650:	move	@m00, right
000592:0x00148660:	dec	right
000592:0x00148668:	movefm	@c00, temp
000592:0x00148678:	icall	
000592:0x00148688:	release	temp
000592:0x00148690:	jump	0x1485e0
000592:0x00148698:	rts
array<GetServersResultRow>::MoveIndex()
000612:0x001486f0:	ncalli	array<GetServersResultRow>.Count()
000612:0x001486f8:	move	count, #return
000613:0x00148708:	move	new_index, curr_index
000615:0x00148718:	cmpi	move_number, _i0
000615:0x00148728:	ble	0x148750
000617:0x00148730:	addi	@m00, curr_index, move_number
000617:0x00148740:	move	new_index, @m00
000620:0x00148750:	cmpi	move_number, _i0
000620:0x00148760:	bge	0x148808
000622:0x00148768:	subi	@m00, curr_index, move_number
000622:0x00148778:	move	new_index, @m00
000624:0x00148788:	cmpi	new_index, _i0
000624:0x00148798:	bge	0x148808
000626:0x001487a0:	subi	@m01, _i0, count
000626:0x001487b0:	cmpi	new_index, @m01
000626:0x001487c0:	bgt	0x1487e8
000628:0x001487c8:	modi	@m00, new_index, count
000628:0x001487d8:	move	new_index, @m00
000631:0x001487e8:	addi	@m00, new_index, count
000631:0x001487f8:	move	new_index, @m00
000635:0x00148808:	cmpi	new_index, count
000635:0x00148818:	blt	0x148840
000637:0x00148820:	modi	@m00, new_index, count
000637:0x00148830:	move	new_index, @m00
000641:0x00148840:	move	#return, new_index
000641:0x00148850:	rts
000641:0x00148858:	rts
array<GetServersResultRow>::ShuffleArray()
000646:0x00148888:	imove	i, 0x000000
000646:0x00148898:	jump	0x1488b8
000646:0x001488a0:	move	@m00, i
000646:0x001488b0:	inc	i
000646:0x001488b8:	ncalli	array<GetServersResultRow>.Count()
000646:0x001488c0:	cmpi	i, #return
000646:0x001488d0:	bge	0x148908
000648:0x001488d8:	call	
000648:0x001488e8:	call	
000648:0x00148900:	jump	0x1488a0
000648:0x00148908:	rts
array<GetServersResultRow>::DifferentAtPosition()
000666:0x00148938:	ncalli	array<GetServersResultRow>.Count()
000666:0x00148940:	move	@m00, #return
000666:0x00148950:	push	#return
000666:0x00148958:	ncalli	array<GetServersResultRow>.Count()
000666:0x00148960:	move	@m02, #return
000666:0x00148970:	pop	#return
000666:0x00148978:	cmpi	@m00, @m02
000666:0x00148988:	beq	0x1489b8
000668:0x00148990:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001489a0:	imove	#return, 0xffffffff
000669:0x001489b0:	rts
000672:0x001489b8:	imove	i, 0x000000
000672:0x001489c8:	jump	0x1489d8
000672:0x001489d0:	inc	i
000672:0x001489d8:	ncalli	array<GetServersResultRow>.Count()
000672:0x001489e0:	cmpi	i, #return
000672:0x001489f0:	bge	0x148a80
000674:0x001489f8:	icall	
000674:0x00148a08:	movec	@c00, #return
000674:0x00148a18:	pushc	#return
000674:0x00148a20:	icall	
000674:0x00148a30:	movec	@c02, #return
000674:0x00148a40:	popc	#return
000674:0x00148a48:	cmpc	@c00, @c02
000674:0x00148a58:	beq	0x148a78
000676:0x00148a60:	move	#return, i
000676:0x00148a70:	rts
000676:0x00148a78:	jump	0x1489d0
000680:0x00148a80:	imove	#return, 0xffffffff
000680:0x00148a90:	rts
000680:0x00148a98:	rts
array<@GetServersResultRow>::InsertAll()
000427:0x00148eb0:	imove	i, 0x000000
000427:0x00148ec0:	jump	0x148ee0
000427:0x00148ec8:	move	@m00, i
000427:0x00148ed8:	inc	i
000427:0x00148ee0:	ncalli	array<GetServersResultRow>.Count()
000427:0x00148ee8:	cmpi	i, #return
000427:0x00148ef8:	bge	0x148f28
000429:0x00148f00:	icall	
000429:0x00148f10:	icall	
000429:0x00148f20:	jump	0x148ec8
000429:0x00148f28:	rts
array<@GetServersResultRow>::RemoveItem()
000479:0x00148f58:	movefm	@c00, value
000479:0x00148f68:	icall	
000479:0x00148f78:	move	remove_index, #return
000481:0x00148f88:	cmpi	remove_index, _i0
000481:0x00148f98:	blt	0x148fb0
000483:0x00148fa0:	ncalli	array<@GetServersResultRow>.RemoveOrdered(remove_index)
000483:0x00148fb0:	rts
array<@GetServersResultRow>::RemoveItemUnOrdered()
000489:0x00148fe0:	movefm	@c00, value
000489:0x00148ff0:	icall	
000489:0x00149000:	move	remove_index, #return
000491:0x00149010:	cmpi	remove_index, _i0
000491:0x00149020:	blt	0x149038
000493:0x00149028:	ncalli	array<@GetServersResultRow>.Remove(remove_index)
000493:0x00149038:	rts
array<@GetServersResultRow>::IsValidIndex()
000499:0x00149040:	cmpi	index, _i-1
000499:0x00149050:	ble	0x149090
000499:0x00149058:	ncalli	array<@GetServersResultRow>.Count()
000499:0x00149060:	cmpi	index, #return
000499:0x00149070:	bge	0x149090
000499:0x00149078:	imove	#return, 0x000001
000499:0x00149088:	jump	0x1490a0
000499:0x00149090:	imove	#return, 0x000000
000499:0x001490a0:	rts
000499:0x001490a8:	rts
array<@GetServersResultRow>::Debug()
000525:0x00149100:	ncalli	array<@GetServersResultRow>.Count()
000525:0x00149108:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00149138:	icall	Print(#return)
000526:0x00149148:	imove	i, 0x000000
000526:0x00149158:	jump	0x149178
000526:0x00149160:	move	@m00, i
000526:0x00149170:	inc	i
000526:0x00149178:	ncalli	array<@GetServersResultRow>.Count()
000526:0x00149180:	cmpi	i, #return
000526:0x00149190:	bge	0x149208
000528:0x00149198:	icall	
000528:0x001491a8:	movetm	item, #return
000529:0x001491b8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001491e8:	icall	Print(#return)
000529:0x001491f8:	release	item
000529:0x00149200:	jump	0x149160
000529:0x00149208:	rts
array<@GetServersResultRow>::GetRandomIndex()
000544:0x00149210:	ncalli	array<@GetServersResultRow>.Count()
000544:0x00149218:	move	@m00, #return
000544:0x00149228:	cmpi	@m00, _i0
000544:0x00149238:	ble	0x149270
000546:0x00149240:	ncalli	array<@GetServersResultRow>.Count()
000546:0x00149248:	icall	RandomInt(_i0, #return)
000546:0x00149258:	move	#return, #return
000546:0x00149268:	rts
000549:0x00149270:	imove	#return, 0xffffffff
000549:0x00149280:	rts
000549:0x00149288:	rts
array<@GetServersResultRow>::GetRandomElement()
000563:0x00149290:	call	
000563:0x001492a0:	icall	
000563:0x001492b0:	movetm	#return, #return
000563:0x001492c0:	rts
000563:0x001492c8:	rts
array<@GetServersResultRow>::SwapItems()
000568:0x001492f8:	icall	
000568:0x00149308:	movetm	item1, #return
000569:0x00149318:	icall	
000569:0x00149328:	icall	
000570:0x00149338:	movefm	@c00, item1
000570:0x00149348:	icall	
000570:0x00149358:	release	item1
000570:0x00149360:	rts
array<@GetServersResultRow>::InsertArray()
000575:0x001493b8:	imove	i, 0x000000
000575:0x001493c8:	jump	0x1493e8
000575:0x001493d0:	move	@m00, i
000575:0x001493e0:	inc	i
000575:0x001493e8:	ncalli	array<GetServersResultRow>.Count()
000575:0x001493f0:	cmpi	i, #return
000575:0x00149400:	bge	0x149458
000577:0x00149408:	icall	
000577:0x00149418:	movetm	item, #return
000578:0x00149428:	movefm	@c00, item
000578:0x00149438:	icall	
000578:0x00149448:	release	item
000578:0x00149450:	jump	0x1493d0
000578:0x00149458:	rts
array<@GetServersResultRow>::Invert()
000584:0x001494d8:	imove	left, 0x000000
000585:0x001494e8:	ncalli	array<@GetServersResultRow>.Count()
000585:0x001494f0:	subi	right, #return, _i1
000586:0x00149500:	cmpi	right, _i0
000586:0x00149510:	ble	0x1495d0
000588:0x00149518:	cmpi	left, right
000588:0x00149528:	bge	0x1495d0
000590:0x00149530:	icall	
000590:0x00149540:	movetm	temp, #return
000591:0x00149550:	move	@m00, left
000591:0x00149560:	inc	left
000591:0x00149568:	icall	
000591:0x00149578:	icall	
000592:0x00149588:	move	@m00, right
000592:0x00149598:	dec	right
000592:0x001495a0:	movefm	@c00, temp
000592:0x001495b0:	icall	
000592:0x001495c0:	release	temp
000592:0x001495c8:	jump	0x149518
000592:0x001495d0:	rts
array<@GetServersResultRow>::MoveIndex()
000612:0x00149628:	ncalli	array<@GetServersResultRow>.Count()
000612:0x00149630:	move	count, #return
000613:0x00149640:	move	new_index, curr_index
000615:0x00149650:	cmpi	move_number, _i0
000615:0x00149660:	ble	0x149688
000617:0x00149668:	addi	@m00, curr_index, move_number
000617:0x00149678:	move	new_index, @m00
000620:0x00149688:	cmpi	move_number, _i0
000620:0x00149698:	bge	0x149740
000622:0x001496a0:	subi	@m00, curr_index, move_number
000622:0x001496b0:	move	new_index, @m00
000624:0x001496c0:	cmpi	new_index, _i0
000624:0x001496d0:	bge	0x149740
000626:0x001496d8:	subi	@m01, _i0, count
000626:0x001496e8:	cmpi	new_index, @m01
000626:0x001496f8:	bgt	0x149720
000628:0x00149700:	modi	@m00, new_index, count
000628:0x00149710:	move	new_index, @m00
000631:0x00149720:	addi	@m00, new_index, count
000631:0x00149730:	move	new_index, @m00
000635:0x00149740:	cmpi	new_index, count
000635:0x00149750:	blt	0x149778
000637:0x00149758:	modi	@m00, new_index, count
000637:0x00149768:	move	new_index, @m00
000641:0x00149778:	move	#return, new_index
000641:0x00149788:	rts
000641:0x00149790:	rts
array<@GetServersResultRow>::ShuffleArray()
000646:0x001497c0:	imove	i, 0x000000
000646:0x001497d0:	jump	0x1497f0
000646:0x001497d8:	move	@m00, i
000646:0x001497e8:	inc	i
000646:0x001497f0:	ncalli	array<@GetServersResultRow>.Count()
000646:0x001497f8:	cmpi	i, #return
000646:0x00149808:	bge	0x149840
000648:0x00149810:	call	
000648:0x00149820:	call	
000648:0x00149838:	jump	0x1497d8
000648:0x00149840:	rts
array<@GetServersResultRow>::DifferentAtPosition()
000666:0x00149870:	ncalli	array<@GetServersResultRow>.Count()
000666:0x00149878:	move	@m00, #return
000666:0x00149888:	ncalli	array<GetServersResultRow>.Count()
000666:0x00149890:	cmpi	@m00, #return
000666:0x001498a0:	beq	0x1498d0
000668:0x001498a8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001498b8:	imove	#return, 0xffffffff
000669:0x001498c8:	rts
000672:0x001498d0:	imove	i, 0x000000
000672:0x001498e0:	jump	0x1498f0
000672:0x001498e8:	inc	i
000672:0x001498f0:	ncalli	array<GetServersResultRow>.Count()
000672:0x001498f8:	cmpi	i, #return
000672:0x00149908:	bge	0x149978
000674:0x00149910:	icall	
000674:0x00149920:	movec	@c00, #return
000674:0x00149930:	icall	
000674:0x00149940:	cmpc	@c00, #return
000674:0x00149950:	beq	0x149970
000676:0x00149958:	move	#return, i
000676:0x00149968:	rts
000676:0x00149970:	jump	0x1498e8
000680:0x00149978:	imove	#return, 0xffffffff
000680:0x00149988:	rts
000680:0x00149990:	rts
array<BiosFriendInfo>::InsertAll()
000427:0x0014a1c8:	imove	i, 0x000000
000427:0x0014a1d8:	jump	0x14a1f8
000427:0x0014a1e0:	move	@m00, i
000427:0x0014a1f0:	inc	i
000427:0x0014a1f8:	ncalli	array<BiosFriendInfo>.Count()
000427:0x0014a200:	cmpi	i, #return
000427:0x0014a210:	bge	0x14a240
000429:0x0014a218:	icall	
000429:0x0014a228:	icall	
000429:0x0014a238:	jump	0x14a1e0
000429:0x0014a240:	rts
array<BiosFriendInfo>::RemoveItem()
000479:0x0014a270:	movefm	@c00, value
000479:0x0014a280:	icall	
000479:0x0014a290:	move	remove_index, #return
000481:0x0014a2a0:	cmpi	remove_index, _i0
000481:0x0014a2b0:	blt	0x14a2c8
000483:0x0014a2b8:	ncalli	array<BiosFriendInfo>.RemoveOrdered(remove_index)
000483:0x0014a2c8:	rts
array<BiosFriendInfo>::RemoveItemUnOrdered()
000489:0x0014a2f8:	movefm	@c00, value
000489:0x0014a308:	icall	
000489:0x0014a318:	move	remove_index, #return
000491:0x0014a328:	cmpi	remove_index, _i0
000491:0x0014a338:	blt	0x14a350
000493:0x0014a340:	ncalli	array<BiosFriendInfo>.Remove(remove_index)
000493:0x0014a350:	rts
array<BiosFriendInfo>::IsValidIndex()
000499:0x0014a358:	cmpi	index, _i-1
000499:0x0014a368:	ble	0x14a3a8
000499:0x0014a370:	ncalli	array<BiosFriendInfo>.Count()
000499:0x0014a378:	cmpi	index, #return
000499:0x0014a388:	bge	0x14a3a8
000499:0x0014a390:	imove	#return, 0x000001
000499:0x0014a3a0:	jump	0x14a3b8
000499:0x0014a3a8:	imove	#return, 0x000000
000499:0x0014a3b8:	rts
000499:0x0014a3c0:	rts
array<BiosFriendInfo>::Debug()
000525:0x0014a418:	ncalli	array<BiosFriendInfo>.Count()
000525:0x0014a420:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0014a450:	icall	Print(#return)
000526:0x0014a460:	imove	i, 0x000000
000526:0x0014a470:	jump	0x14a490
000526:0x0014a478:	move	@m00, i
000526:0x0014a488:	inc	i
000526:0x0014a490:	ncalli	array<BiosFriendInfo>.Count()
000526:0x0014a498:	cmpi	i, #return
000526:0x0014a4a8:	bge	0x14a520
000528:0x0014a4b0:	icall	
000528:0x0014a4c0:	movetm	item, #return
000529:0x0014a4d0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0014a500:	icall	Print(#return)
000529:0x0014a510:	release	item
000529:0x0014a518:	jump	0x14a478
000529:0x0014a520:	rts
array<BiosFriendInfo>::GetRandomIndex()
000544:0x0014a528:	ncalli	array<BiosFriendInfo>.Count()
000544:0x0014a530:	move	@m00, #return
000544:0x0014a540:	cmpi	@m00, _i0
000544:0x0014a550:	ble	0x14a588
000546:0x0014a558:	ncalli	array<BiosFriendInfo>.Count()
000546:0x0014a560:	icall	RandomInt(_i0, #return)
000546:0x0014a570:	move	#return, #return
000546:0x0014a580:	rts
000549:0x0014a588:	imove	#return, 0xffffffff
000549:0x0014a598:	rts
000549:0x0014a5a0:	rts
array<BiosFriendInfo>::GetRandomElement()
000563:0x0014a5a8:	call	
000563:0x0014a5b8:	icall	
000563:0x0014a5c8:	movetm	#return, #return
000563:0x0014a5d8:	rts
000563:0x0014a5e0:	rts
array<BiosFriendInfo>::SwapItems()
000568:0x0014a610:	icall	
000568:0x0014a620:	movetm	item1, #return
000569:0x0014a630:	icall	
000569:0x0014a640:	icall	
000570:0x0014a650:	movefm	@c00, item1
000570:0x0014a660:	icall	
000570:0x0014a670:	release	item1
000570:0x0014a678:	rts
array<BiosFriendInfo>::InsertArray()
000575:0x0014a6d0:	imove	i, 0x000000
000575:0x0014a6e0:	jump	0x14a700
000575:0x0014a6e8:	move	@m00, i
000575:0x0014a6f8:	inc	i
000575:0x0014a700:	ncalli	array<BiosFriendInfo>.Count()
000575:0x0014a708:	cmpi	i, #return
000575:0x0014a718:	bge	0x14a770
000577:0x0014a720:	icall	
000577:0x0014a730:	movetm	item, #return
000578:0x0014a740:	movefm	@c00, item
000578:0x0014a750:	icall	
000578:0x0014a760:	release	item
000578:0x0014a768:	jump	0x14a6e8
000578:0x0014a770:	rts
array<BiosFriendInfo>::Invert()
000584:0x0014a7f0:	imove	left, 0x000000
000585:0x0014a800:	ncalli	array<BiosFriendInfo>.Count()
000585:0x0014a808:	subi	right, #return, _i1
000586:0x0014a818:	cmpi	right, _i0
000586:0x0014a828:	ble	0x14a8e8
000588:0x0014a830:	cmpi	left, right
000588:0x0014a840:	bge	0x14a8e8
000590:0x0014a848:	icall	
000590:0x0014a858:	movetm	temp, #return
000591:0x0014a868:	move	@m00, left
000591:0x0014a878:	inc	left
000591:0x0014a880:	icall	
000591:0x0014a890:	icall	
000592:0x0014a8a0:	move	@m00, right
000592:0x0014a8b0:	dec	right
000592:0x0014a8b8:	movefm	@c00, temp
000592:0x0014a8c8:	icall	
000592:0x0014a8d8:	release	temp
000592:0x0014a8e0:	jump	0x14a830
000592:0x0014a8e8:	rts
array<BiosFriendInfo>::MoveIndex()
000612:0x0014a940:	ncalli	array<BiosFriendInfo>.Count()
000612:0x0014a948:	move	count, #return
000613:0x0014a958:	move	new_index, curr_index
000615:0x0014a968:	cmpi	move_number, _i0
000615:0x0014a978:	ble	0x14a9a0
000617:0x0014a980:	addi	@m00, curr_index, move_number
000617:0x0014a990:	move	new_index, @m00
000620:0x0014a9a0:	cmpi	move_number, _i0
000620:0x0014a9b0:	bge	0x14aa58
000622:0x0014a9b8:	subi	@m00, curr_index, move_number
000622:0x0014a9c8:	move	new_index, @m00
000624:0x0014a9d8:	cmpi	new_index, _i0
000624:0x0014a9e8:	bge	0x14aa58
000626:0x0014a9f0:	subi	@m01, _i0, count
000626:0x0014aa00:	cmpi	new_index, @m01
000626:0x0014aa10:	bgt	0x14aa38
000628:0x0014aa18:	modi	@m00, new_index, count
000628:0x0014aa28:	move	new_index, @m00
000631:0x0014aa38:	addi	@m00, new_index, count
000631:0x0014aa48:	move	new_index, @m00
000635:0x0014aa58:	cmpi	new_index, count
000635:0x0014aa68:	blt	0x14aa90
000637:0x0014aa70:	modi	@m00, new_index, count
000637:0x0014aa80:	move	new_index, @m00
000641:0x0014aa90:	move	#return, new_index
000641:0x0014aaa0:	rts
000641:0x0014aaa8:	rts
array<BiosFriendInfo>::ShuffleArray()
000646:0x0014aad8:	imove	i, 0x000000
000646:0x0014aae8:	jump	0x14ab08
000646:0x0014aaf0:	move	@m00, i
000646:0x0014ab00:	inc	i
000646:0x0014ab08:	ncalli	array<BiosFriendInfo>.Count()
000646:0x0014ab10:	cmpi	i, #return
000646:0x0014ab20:	bge	0x14ab58
000648:0x0014ab28:	call	
000648:0x0014ab38:	call	
000648:0x0014ab50:	jump	0x14aaf0
000648:0x0014ab58:	rts
array<BiosFriendInfo>::DifferentAtPosition()
000666:0x0014ab88:	ncalli	array<BiosFriendInfo>.Count()
000666:0x0014ab90:	move	@m00, #return
000666:0x0014aba0:	push	#return
000666:0x0014aba8:	ncalli	array<BiosFriendInfo>.Count()
000666:0x0014abb0:	move	@m02, #return
000666:0x0014abc0:	pop	#return
000666:0x0014abc8:	cmpi	@m00, @m02
000666:0x0014abd8:	beq	0x14ac08
000668:0x0014abe0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0014abf0:	imove	#return, 0xffffffff
000669:0x0014ac00:	rts
000672:0x0014ac08:	imove	i, 0x000000
000672:0x0014ac18:	jump	0x14ac28
000672:0x0014ac20:	inc	i
000672:0x0014ac28:	ncalli	array<BiosFriendInfo>.Count()
000672:0x0014ac30:	cmpi	i, #return
000672:0x0014ac40:	bge	0x14acd0
000674:0x0014ac48:	icall	
000674:0x0014ac58:	movec	@c00, #return
000674:0x0014ac68:	pushc	#return
000674:0x0014ac70:	icall	
000674:0x0014ac80:	movec	@c02, #return
000674:0x0014ac90:	popc	#return
000674:0x0014ac98:	cmpc	@c00, @c02
000674:0x0014aca8:	beq	0x14acc8
000676:0x0014acb0:	move	#return, i
000676:0x0014acc0:	rts
000676:0x0014acc8:	jump	0x14ac20
000680:0x0014acd0:	imove	#return, 0xffffffff
000680:0x0014ace0:	rts
000680:0x0014ace8:	rts
array<@BiosFriendInfo>::InsertAll()
000427:0x0014b100:	imove	i, 0x000000
000427:0x0014b110:	jump	0x14b130
000427:0x0014b118:	move	@m00, i
000427:0x0014b128:	inc	i
000427:0x0014b130:	ncalli	array<BiosFriendInfo>.Count()
000427:0x0014b138:	cmpi	i, #return
000427:0x0014b148:	bge	0x14b178
000429:0x0014b150:	icall	
000429:0x0014b160:	icall	
000429:0x0014b170:	jump	0x14b118
000429:0x0014b178:	rts
array<@BiosFriendInfo>::RemoveItem()
000479:0x0014b1a8:	movefm	@c00, value
000479:0x0014b1b8:	icall	
000479:0x0014b1c8:	move	remove_index, #return
000481:0x0014b1d8:	cmpi	remove_index, _i0
000481:0x0014b1e8:	blt	0x14b200
000483:0x0014b1f0:	ncalli	array<@BiosFriendInfo>.RemoveOrdered(remove_index)
000483:0x0014b200:	rts
array<@BiosFriendInfo>::RemoveItemUnOrdered()
000489:0x0014b230:	movefm	@c00, value
000489:0x0014b240:	icall	
000489:0x0014b250:	move	remove_index, #return
000491:0x0014b260:	cmpi	remove_index, _i0
000491:0x0014b270:	blt	0x14b288
000493:0x0014b278:	ncalli	array<@BiosFriendInfo>.Remove(remove_index)
000493:0x0014b288:	rts
array<@BiosFriendInfo>::IsValidIndex()
000499:0x0014b290:	cmpi	index, _i-1
000499:0x0014b2a0:	ble	0x14b2e0
000499:0x0014b2a8:	ncalli	array<@BiosFriendInfo>.Count()
000499:0x0014b2b0:	cmpi	index, #return
000499:0x0014b2c0:	bge	0x14b2e0
000499:0x0014b2c8:	imove	#return, 0x000001
000499:0x0014b2d8:	jump	0x14b2f0
000499:0x0014b2e0:	imove	#return, 0x000000
000499:0x0014b2f0:	rts
000499:0x0014b2f8:	rts
array<@BiosFriendInfo>::Debug()
000525:0x0014b350:	ncalli	array<@BiosFriendInfo>.Count()
000525:0x0014b358:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0014b388:	icall	Print(#return)
000526:0x0014b398:	imove	i, 0x000000
000526:0x0014b3a8:	jump	0x14b3c8
000526:0x0014b3b0:	move	@m00, i
000526:0x0014b3c0:	inc	i
000526:0x0014b3c8:	ncalli	array<@BiosFriendInfo>.Count()
000526:0x0014b3d0:	cmpi	i, #return
000526:0x0014b3e0:	bge	0x14b458
000528:0x0014b3e8:	icall	
000528:0x0014b3f8:	movetm	item, #return
000529:0x0014b408:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0014b438:	icall	Print(#return)
000529:0x0014b448:	release	item
000529:0x0014b450:	jump	0x14b3b0
000529:0x0014b458:	rts
array<@BiosFriendInfo>::GetRandomIndex()
000544:0x0014b460:	ncalli	array<@BiosFriendInfo>.Count()
000544:0x0014b468:	move	@m00, #return
000544:0x0014b478:	cmpi	@m00, _i0
000544:0x0014b488:	ble	0x14b4c0
000546:0x0014b490:	ncalli	array<@BiosFriendInfo>.Count()
000546:0x0014b498:	icall	RandomInt(_i0, #return)
000546:0x0014b4a8:	move	#return, #return
000546:0x0014b4b8:	rts
000549:0x0014b4c0:	imove	#return, 0xffffffff
000549:0x0014b4d0:	rts
000549:0x0014b4d8:	rts
array<@BiosFriendInfo>::GetRandomElement()
000563:0x0014b4e0:	call	
000563:0x0014b4f0:	icall	
000563:0x0014b500:	movetm	#return, #return
000563:0x0014b510:	rts
000563:0x0014b518:	rts
array<@BiosFriendInfo>::SwapItems()
000568:0x0014b548:	icall	
000568:0x0014b558:	movetm	item1, #return
000569:0x0014b568:	icall	
000569:0x0014b578:	icall	
000570:0x0014b588:	movefm	@c00, item1
000570:0x0014b598:	icall	
000570:0x0014b5a8:	release	item1
000570:0x0014b5b0:	rts
array<@BiosFriendInfo>::InsertArray()
000575:0x0014b608:	imove	i, 0x000000
000575:0x0014b618:	jump	0x14b638
000575:0x0014b620:	move	@m00, i
000575:0x0014b630:	inc	i
000575:0x0014b638:	ncalli	array<BiosFriendInfo>.Count()
000575:0x0014b640:	cmpi	i, #return
000575:0x0014b650:	bge	0x14b6a8
000577:0x0014b658:	icall	
000577:0x0014b668:	movetm	item, #return
000578:0x0014b678:	movefm	@c00, item
000578:0x0014b688:	icall	
000578:0x0014b698:	release	item
000578:0x0014b6a0:	jump	0x14b620
000578:0x0014b6a8:	rts
array<@BiosFriendInfo>::Invert()
000584:0x0014b728:	imove	left, 0x000000
000585:0x0014b738:	ncalli	array<@BiosFriendInfo>.Count()
000585:0x0014b740:	subi	right, #return, _i1
000586:0x0014b750:	cmpi	right, _i0
000586:0x0014b760:	ble	0x14b820
000588:0x0014b768:	cmpi	left, right
000588:0x0014b778:	bge	0x14b820
000590:0x0014b780:	icall	
000590:0x0014b790:	movetm	temp, #return
000591:0x0014b7a0:	move	@m00, left
000591:0x0014b7b0:	inc	left
000591:0x0014b7b8:	icall	
000591:0x0014b7c8:	icall	
000592:0x0014b7d8:	move	@m00, right
000592:0x0014b7e8:	dec	right
000592:0x0014b7f0:	movefm	@c00, temp
000592:0x0014b800:	icall	
000592:0x0014b810:	release	temp
000592:0x0014b818:	jump	0x14b768
000592:0x0014b820:	rts
array<@BiosFriendInfo>::MoveIndex()
000612:0x0014b878:	ncalli	array<@BiosFriendInfo>.Count()
000612:0x0014b880:	move	count, #return
000613:0x0014b890:	move	new_index, curr_index
000615:0x0014b8a0:	cmpi	move_number, _i0
000615:0x0014b8b0:	ble	0x14b8d8
000617:0x0014b8b8:	addi	@m00, curr_index, move_number
000617:0x0014b8c8:	move	new_index, @m00
000620:0x0014b8d8:	cmpi	move_number, _i0
000620:0x0014b8e8:	bge	0x14b990
000622:0x0014b8f0:	subi	@m00, curr_index, move_number
000622:0x0014b900:	move	new_index, @m00
000624:0x0014b910:	cmpi	new_index, _i0
000624:0x0014b920:	bge	0x14b990
000626:0x0014b928:	subi	@m01, _i0, count
000626:0x0014b938:	cmpi	new_index, @m01
000626:0x0014b948:	bgt	0x14b970
000628:0x0014b950:	modi	@m00, new_index, count
000628:0x0014b960:	move	new_index, @m00
000631:0x0014b970:	addi	@m00, new_index, count
000631:0x0014b980:	move	new_index, @m00
000635:0x0014b990:	cmpi	new_index, count
000635:0x0014b9a0:	blt	0x14b9c8
000637:0x0014b9a8:	modi	@m00, new_index, count
000637:0x0014b9b8:	move	new_index, @m00
000641:0x0014b9c8:	move	#return, new_index
000641:0x0014b9d8:	rts
000641:0x0014b9e0:	rts
array<@BiosFriendInfo>::ShuffleArray()
000646:0x0014ba10:	imove	i, 0x000000
000646:0x0014ba20:	jump	0x14ba40
000646:0x0014ba28:	move	@m00, i
000646:0x0014ba38:	inc	i
000646:0x0014ba40:	ncalli	array<@BiosFriendInfo>.Count()
000646:0x0014ba48:	cmpi	i, #return
000646:0x0014ba58:	bge	0x14ba90
000648:0x0014ba60:	call	
000648:0x0014ba70:	call	
000648:0x0014ba88:	jump	0x14ba28
000648:0x0014ba90:	rts
array<@BiosFriendInfo>::DifferentAtPosition()
000666:0x0014bac0:	ncalli	array<@BiosFriendInfo>.Count()
000666:0x0014bac8:	move	@m00, #return
000666:0x0014bad8:	ncalli	array<BiosFriendInfo>.Count()
000666:0x0014bae0:	cmpi	@m00, #return
000666:0x0014baf0:	beq	0x14bb20
000668:0x0014baf8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0014bb08:	imove	#return, 0xffffffff
000669:0x0014bb18:	rts
000672:0x0014bb20:	imove	i, 0x000000
000672:0x0014bb30:	jump	0x14bb40
000672:0x0014bb38:	inc	i
000672:0x0014bb40:	ncalli	array<BiosFriendInfo>.Count()
000672:0x0014bb48:	cmpi	i, #return
000672:0x0014bb58:	bge	0x14bbc8
000674:0x0014bb60:	icall	
000674:0x0014bb70:	movec	@c00, #return
000674:0x0014bb80:	icall	
000674:0x0014bb90:	cmpc	@c00, #return
000674:0x0014bba0:	beq	0x14bbc0
000676:0x0014bba8:	move	#return, i
000676:0x0014bbb8:	rts
000676:0x0014bbc0:	jump	0x14bb38
000680:0x0014bbc8:	imove	#return, 0xffffffff
000680:0x0014bbd8:	rts
000680:0x0014bbe0:	rts
array<InventoryItem>::InsertAll()
000427:0x0014c5d0:	imove	i, 0x000000
000427:0x0014c5e0:	jump	0x14c600
000427:0x0014c5e8:	move	@m00, i
000427:0x0014c5f8:	inc	i
000427:0x0014c600:	ncalli	array<InventoryItem>.Count()
000427:0x0014c608:	cmpi	i, #return
000427:0x0014c618:	bge	0x14c648
000429:0x0014c620:	icall	
000429:0x0014c630:	icall	
000429:0x0014c640:	jump	0x14c5e8
000429:0x0014c648:	rts
array<InventoryItem>::RemoveItem()
000479:0x0014c678:	movefm	@c00, value
000479:0x0014c688:	icall	
000479:0x0014c698:	move	remove_index, #return
000481:0x0014c6a8:	cmpi	remove_index, _i0
000481:0x0014c6b8:	blt	0x14c6d0
000483:0x0014c6c0:	ncalli	array<InventoryItem>.RemoveOrdered(remove_index)
000483:0x0014c6d0:	rts
array<InventoryItem>::RemoveItemUnOrdered()
000489:0x0014c700:	movefm	@c00, value
000489:0x0014c710:	icall	
000489:0x0014c720:	move	remove_index, #return
000491:0x0014c730:	cmpi	remove_index, _i0
000491:0x0014c740:	blt	0x14c758
000493:0x0014c748:	ncalli	array<InventoryItem>.Remove(remove_index)
000493:0x0014c758:	rts
array<InventoryItem>::IsValidIndex()
000499:0x0014c760:	cmpi	index, _i-1
000499:0x0014c770:	ble	0x14c7b0
000499:0x0014c778:	ncalli	array<InventoryItem>.Count()
000499:0x0014c780:	cmpi	index, #return
000499:0x0014c790:	bge	0x14c7b0
000499:0x0014c798:	imove	#return, 0x000001
000499:0x0014c7a8:	jump	0x14c7c0
000499:0x0014c7b0:	imove	#return, 0x000000
000499:0x0014c7c0:	rts
000499:0x0014c7c8:	rts
array<InventoryItem>::Debug()
000525:0x0014c820:	ncalli	array<InventoryItem>.Count()
000525:0x0014c828:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0014c858:	icall	Print(#return)
000526:0x0014c868:	imove	i, 0x000000
000526:0x0014c878:	jump	0x14c898
000526:0x0014c880:	move	@m00, i
000526:0x0014c890:	inc	i
000526:0x0014c898:	ncalli	array<InventoryItem>.Count()
000526:0x0014c8a0:	cmpi	i, #return
000526:0x0014c8b0:	bge	0x14c928
000528:0x0014c8b8:	icall	
000528:0x0014c8c8:	movetm	item, #return
000529:0x0014c8d8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0014c908:	icall	Print(#return)
000529:0x0014c918:	release	item
000529:0x0014c920:	jump	0x14c880
000529:0x0014c928:	rts
array<InventoryItem>::GetRandomIndex()
000544:0x0014c930:	ncalli	array<InventoryItem>.Count()
000544:0x0014c938:	move	@m00, #return
000544:0x0014c948:	cmpi	@m00, _i0
000544:0x0014c958:	ble	0x14c990
000546:0x0014c960:	ncalli	array<InventoryItem>.Count()
000546:0x0014c968:	icall	RandomInt(_i0, #return)
000546:0x0014c978:	move	#return, #return
000546:0x0014c988:	rts
000549:0x0014c990:	imove	#return, 0xffffffff
000549:0x0014c9a0:	rts
000549:0x0014c9a8:	rts
array<InventoryItem>::GetRandomElement()
000563:0x0014c9b0:	call	
000563:0x0014c9c0:	icall	
000563:0x0014c9d0:	movetm	#return, #return
000563:0x0014c9e0:	rts
000563:0x0014c9e8:	rts
array<InventoryItem>::SwapItems()
000568:0x0014ca18:	icall	
000568:0x0014ca28:	movetm	item1, #return
000569:0x0014ca38:	icall	
000569:0x0014ca48:	icall	
000570:0x0014ca58:	movefm	@c00, item1
000570:0x0014ca68:	icall	
000570:0x0014ca78:	release	item1
000570:0x0014ca80:	rts
array<InventoryItem>::InsertArray()
000575:0x0014cad8:	imove	i, 0x000000
000575:0x0014cae8:	jump	0x14cb08
000575:0x0014caf0:	move	@m00, i
000575:0x0014cb00:	inc	i
000575:0x0014cb08:	ncalli	array<InventoryItem>.Count()
000575:0x0014cb10:	cmpi	i, #return
000575:0x0014cb20:	bge	0x14cb78
000577:0x0014cb28:	icall	
000577:0x0014cb38:	movetm	item, #return
000578:0x0014cb48:	movefm	@c00, item
000578:0x0014cb58:	icall	
000578:0x0014cb68:	release	item
000578:0x0014cb70:	jump	0x14caf0
000578:0x0014cb78:	rts
array<InventoryItem>::Invert()
000584:0x0014cbf8:	imove	left, 0x000000
000585:0x0014cc08:	ncalli	array<InventoryItem>.Count()
000585:0x0014cc10:	subi	right, #return, _i1
000586:0x0014cc20:	cmpi	right, _i0
000586:0x0014cc30:	ble	0x14ccf0
000588:0x0014cc38:	cmpi	left, right
000588:0x0014cc48:	bge	0x14ccf0
000590:0x0014cc50:	icall	
000590:0x0014cc60:	movetm	temp, #return
000591:0x0014cc70:	move	@m00, left
000591:0x0014cc80:	inc	left
000591:0x0014cc88:	icall	
000591:0x0014cc98:	icall	
000592:0x0014cca8:	move	@m00, right
000592:0x0014ccb8:	dec	right
000592:0x0014ccc0:	movefm	@c00, temp
000592:0x0014ccd0:	icall	
000592:0x0014cce0:	release	temp
000592:0x0014cce8:	jump	0x14cc38
000592:0x0014ccf0:	rts
array<InventoryItem>::MoveIndex()
000612:0x0014cd48:	ncalli	array<InventoryItem>.Count()
000612:0x0014cd50:	move	count, #return
000613:0x0014cd60:	move	new_index, curr_index
000615:0x0014cd70:	cmpi	move_number, _i0
000615:0x0014cd80:	ble	0x14cda8
000617:0x0014cd88:	addi	@m00, curr_index, move_number
000617:0x0014cd98:	move	new_index, @m00
000620:0x0014cda8:	cmpi	move_number, _i0
000620:0x0014cdb8:	bge	0x14ce60
000622:0x0014cdc0:	subi	@m00, curr_index, move_number
000622:0x0014cdd0:	move	new_index, @m00
000624:0x0014cde0:	cmpi	new_index, _i0
000624:0x0014cdf0:	bge	0x14ce60
000626:0x0014cdf8:	subi	@m01, _i0, count
000626:0x0014ce08:	cmpi	new_index, @m01
000626:0x0014ce18:	bgt	0x14ce40
000628:0x0014ce20:	modi	@m00, new_index, count
000628:0x0014ce30:	move	new_index, @m00
000631:0x0014ce40:	addi	@m00, new_index, count
000631:0x0014ce50:	move	new_index, @m00
000635:0x0014ce60:	cmpi	new_index, count
000635:0x0014ce70:	blt	0x14ce98
000637:0x0014ce78:	modi	@m00, new_index, count
000637:0x0014ce88:	move	new_index, @m00
000641:0x0014ce98:	move	#return, new_index
000641:0x0014cea8:	rts
000641:0x0014ceb0:	rts
array<InventoryItem>::ShuffleArray()
000646:0x0014cee0:	imove	i, 0x000000
000646:0x0014cef0:	jump	0x14cf10
000646:0x0014cef8:	move	@m00, i
000646:0x0014cf08:	inc	i
000646:0x0014cf10:	ncalli	array<InventoryItem>.Count()
000646:0x0014cf18:	cmpi	i, #return
000646:0x0014cf28:	bge	0x14cf60
000648:0x0014cf30:	call	
000648:0x0014cf40:	call	
000648:0x0014cf58:	jump	0x14cef8
000648:0x0014cf60:	rts
array<InventoryItem>::DifferentAtPosition()
000666:0x0014cf90:	ncalli	array<InventoryItem>.Count()
000666:0x0014cf98:	move	@m00, #return
000666:0x0014cfa8:	push	#return
000666:0x0014cfb0:	ncalli	array<InventoryItem>.Count()
000666:0x0014cfb8:	move	@m02, #return
000666:0x0014cfc8:	pop	#return
000666:0x0014cfd0:	cmpi	@m00, @m02
000666:0x0014cfe0:	beq	0x14d010
000668:0x0014cfe8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0014cff8:	imove	#return, 0xffffffff
000669:0x0014d008:	rts
000672:0x0014d010:	imove	i, 0x000000
000672:0x0014d020:	jump	0x14d030
000672:0x0014d028:	inc	i
000672:0x0014d030:	ncalli	array<InventoryItem>.Count()
000672:0x0014d038:	cmpi	i, #return
000672:0x0014d048:	bge	0x14d0d8
000674:0x0014d050:	icall	
000674:0x0014d060:	movec	@c00, #return
000674:0x0014d070:	pushc	#return
000674:0x0014d078:	icall	
000674:0x0014d088:	movec	@c02, #return
000674:0x0014d098:	popc	#return
000674:0x0014d0a0:	cmpc	@c00, @c02
000674:0x0014d0b0:	beq	0x14d0d0
000676:0x0014d0b8:	move	#return, i
000676:0x0014d0c8:	rts
000676:0x0014d0d0:	jump	0x14d028
000680:0x0014d0d8:	imove	#return, 0xffffffff
000680:0x0014d0e8:	rts
000680:0x0014d0f0:	rts
map<InventoryItem,vector>::GetKeyArray()
000885:0x0014d448:	new	keys, array<InventoryItem>
000886:0x0014d468:	imove	i, 0x000000
000886:0x0014d478:	jump	0x14d498
000886:0x0014d480:	move	@m00, i
000886:0x0014d490:	inc	i
000886:0x0014d498:	ncalli	map<InventoryItem,vector>.Count()
000886:0x0014d4a0:	cmpi	i, #return
000886:0x0014d4b0:	bge	0x14d4e0
000888:0x0014d4b8:	icall	
000888:0x0014d4c8:	icall	
000888:0x0014d4d8:	jump	0x14d480
000890:0x0014d4e0:	movem	#return, keys
000890:0x0014d4f0:	release	keys
000890:0x0014d4f8:	rts
000890:0x0014d500:	release	keys
000890:0x0014d508:	rts
map<InventoryItem,vector>::GetValueArray()
000895:0x0014d560:	new	elements, array<vector>
000896:0x0014d580:	imove	i, 0x000000
000896:0x0014d590:	jump	0x14d5b0
000896:0x0014d598:	move	@m00, i
000896:0x0014d5a8:	inc	i
000896:0x0014d5b0:	ncalli	map<InventoryItem,vector>.Count()
000896:0x0014d5b8:	cmpi	i, #return
000896:0x0014d5c8:	bge	0x14d5f8
000898:0x0014d5d0:	icall	
000898:0x0014d5e0:	icall	
000898:0x0014d5f0:	jump	0x14d598
000900:0x0014d5f8:	movem	#return, elements
000900:0x0014d608:	release	elements
000900:0x0014d610:	rts
000900:0x0014d618:	release	elements
000900:0x0014d620:	rts
map<InventoryItem,vector>::ReplaceKey()
000905:0x0014d628:	movefm	@c00, old_key
000905:0x0014d638:	icall	
000905:0x0014d648:	cmpi	#return, _i0
000905:0x0014d658:	beq	0x14d6d8
000907:0x0014d660:	movefm	@c00, new_key
000907:0x0014d670:	movefm	@c01, old_key
000907:0x0014d680:	icall	
000907:0x0014d690:	icall	
000908:0x0014d6a0:	movefm	@c00, old_key
000908:0x0014d6b0:	icall	
000909:0x0014d6c0:	imove	#return, 0x000001
000909:0x0014d6d0:	rts
000911:0x0014d6d8:	imove	#return, 0x000000
000911:0x0014d6e8:	rts
000911:0x0014d6f0:	rts
map<InventoryItem,vector>::GetKeyByValue()
000917:0x0014d748:	imove	i, 0x000000
000917:0x0014d758:	jump	0x14d778
000917:0x0014d760:	move	@m00, i
000917:0x0014d770:	inc	i
000917:0x0014d778:	ncalli	map<InventoryItem,vector>.Count()
000917:0x0014d780:	cmpi	i, #return
000917:0x0014d790:	bge	0x14d800
000919:0x0014d798:	icall	
000919:0x0014d7a8:	movev	@v00, #return
000919:0x0014d7b8:	cmpv	@v00, value
000919:0x0014d7c8:	bne	0x14d7f8
000921:0x0014d7d0:	icall	
000921:0x0014d7e0:	movetm	ret, #return
000922:0x0014d7f0:	jump	0x14d800
000922:0x0014d7f8:	jump	0x14d760
000926:0x0014d800:	movem	#return, ret
000926:0x0014d810:	release	ret
000926:0x0014d818:	rts
000926:0x0014d820:	release	ret
000926:0x0014d828:	rts
map<InventoryItem,vector>::GetKeyByValueChecked()
000931:0x0014d858:	imove	i, 0x000000
000931:0x0014d868:	jump	0x14d888
000931:0x0014d870:	move	@m00, i
000931:0x0014d880:	inc	i
000931:0x0014d888:	ncalli	map<InventoryItem,vector>.Count()
000931:0x0014d890:	cmpi	i, #return
000931:0x0014d8a0:	bge	0x14d930
000933:0x0014d8a8:	icall	
000933:0x0014d8b8:	movev	@v00, #return
000933:0x0014d8c8:	cmpv	@v00, value
000933:0x0014d8d8:	bne	0x14d928
000935:0x0014d8e0:	icall	
000935:0x0014d8f0:	movetm	key, #return
000936:0x0014d900:	imove	#return, 0x000001
000936:0x0014d910:	movem	key, key
000936:0x0014d920:	rts
000936:0x0014d928:	jump	0x14d870
000939:0x0014d930:	imove	#return, 0x000000
000939:0x0014d940:	movem	key, key
000939:0x0014d950:	rts
000939:0x0014d958:	movem	key, key
000939:0x0014d968:	rts
Param3<string,bool,bool>::Param3()
//scripts/1_Core/param.c
000096:0x0014daf8:	moves	param1, p1
000097:0x0014db08:	move	param2, p2
000098:0x0014db18:	move	param3, p3
000098:0x0014db28:	rts
Param3<string,bool,bool>::Serialize()
000103:0x0014db30:	icall	
000103:0x0014db40:	cmpi	#return, _i0
000103:0x0014db50:	beq	0x14dbc0
000103:0x0014db58:	icall	
000103:0x0014db68:	cmpi	#return, _i0
000103:0x0014db78:	beq	0x14dbc0
000103:0x0014db80:	icall	
000103:0x0014db90:	cmpi	#return, _i0
000103:0x0014dba0:	beq	0x14dbc0
000103:0x0014dba8:	imove	#return, 0x000001
000103:0x0014dbb8:	jump	0x14dbd0
000103:0x0014dbc0:	imove	#return, 0x000000
000103:0x0014dbd0:	rts
000103:0x0014dbd8:	rts
Param3<string,bool,bool>::Deserializer()
000108:0x0014dbe0:	icall	
000108:0x0014dbf0:	cmpi	#return, _i0
000108:0x0014dc00:	beq	0x14dc70
000108:0x0014dc08:	icall	
000108:0x0014dc18:	cmpi	#return, _i0
000108:0x0014dc28:	beq	0x14dc70
000108:0x0014dc30:	icall	
000108:0x0014dc40:	cmpi	#return, _i0
000108:0x0014dc50:	beq	0x14dc70
000108:0x0014dc58:	imove	#return, 0x000001
000108:0x0014dc68:	jump	0x14dc80
000108:0x0014dc70:	imove	#return, 0x000000
000108:0x0014dc80:	rts
000108:0x0014dc88:	rts
Param3<string,int,int>::Param3()
000096:0x0014de18:	moves	param1, p1
000097:0x0014de28:	move	param2, p2
000098:0x0014de38:	move	param3, p3
000098:0x0014de48:	rts
Param3<string,int,int>::Serialize()
000103:0x0014de50:	icall	
000103:0x0014de60:	cmpi	#return, _i0
000103:0x0014de70:	beq	0x14dee0
000103:0x0014de78:	icall	
000103:0x0014de88:	cmpi	#return, _i0
000103:0x0014de98:	beq	0x14dee0
000103:0x0014dea0:	icall	
000103:0x0014deb0:	cmpi	#return, _i0
000103:0x0014dec0:	beq	0x14dee0
000103:0x0014dec8:	imove	#return, 0x000001
000103:0x0014ded8:	jump	0x14def0
000103:0x0014dee0:	imove	#return, 0x000000
000103:0x0014def0:	rts
000103:0x0014def8:	rts
Param3<string,int,int>::Deserializer()
000108:0x0014df00:	icall	
000108:0x0014df10:	cmpi	#return, _i0
000108:0x0014df20:	beq	0x14df90
000108:0x0014df28:	icall	
000108:0x0014df38:	cmpi	#return, _i0
000108:0x0014df48:	beq	0x14df90
000108:0x0014df50:	icall	
000108:0x0014df60:	cmpi	#return, _i0
000108:0x0014df70:	beq	0x14df90
000108:0x0014df78:	imove	#return, 0x000001
000108:0x0014df88:	jump	0x14dfa0
000108:0x0014df90:	imove	#return, 0x000000
000108:0x0014dfa0:	rts
000108:0x0014dfa8:	rts
Param3<string,float,float>::Param3()
000096:0x0014e138:	moves	param1, p1
000097:0x0014e148:	move	param2, p2
000098:0x0014e158:	move	param3, p3
000098:0x0014e168:	rts
Param3<string,float,float>::Serialize()
000103:0x0014e170:	icall	
000103:0x0014e180:	cmpi	#return, _i0
000103:0x0014e190:	beq	0x14e200
000103:0x0014e198:	icall	
000103:0x0014e1a8:	cmpi	#return, _i0
000103:0x0014e1b8:	beq	0x14e200
000103:0x0014e1c0:	icall	
000103:0x0014e1d0:	cmpi	#return, _i0
000103:0x0014e1e0:	beq	0x14e200
000103:0x0014e1e8:	imove	#return, 0x000001
000103:0x0014e1f8:	jump	0x14e210
000103:0x0014e200:	imove	#return, 0x000000
000103:0x0014e210:	rts
000103:0x0014e218:	rts
Param3<string,float,float>::Deserializer()
000108:0x0014e220:	icall	
000108:0x0014e230:	cmpi	#return, _i0
000108:0x0014e240:	beq	0x14e2b0
000108:0x0014e248:	icall	
000108:0x0014e258:	cmpi	#return, _i0
000108:0x0014e268:	beq	0x14e2b0
000108:0x0014e270:	icall	
000108:0x0014e280:	cmpi	#return, _i0
000108:0x0014e290:	beq	0x14e2b0
000108:0x0014e298:	imove	#return, 0x000001
000108:0x0014e2a8:	jump	0x14e2c0
000108:0x0014e2b0:	imove	#return, 0x000000
000108:0x0014e2c0:	rts
000108:0x0014e2c8:	rts
array<TFResult>::InsertAll()
//scripts/1_Core/proto\enscript.c
000427:0x0014eaf8:	imove	i, 0x000000
000427:0x0014eb08:	jump	0x14eb28
000427:0x0014eb10:	move	@m00, i
000427:0x0014eb20:	inc	i
000427:0x0014eb28:	ncalli	array<TFResult>.Count()
000427:0x0014eb30:	cmpi	i, #return
000427:0x0014eb40:	bge	0x14eb70
000429:0x0014eb48:	icall	
000429:0x0014eb58:	icall	
000429:0x0014eb68:	jump	0x14eb10
000429:0x0014eb70:	rts
array<TFResult>::RemoveItem()
000479:0x0014eba0:	movefm	@c00, value
000479:0x0014ebb0:	icall	
000479:0x0014ebc0:	move	remove_index, #return
000481:0x0014ebd0:	cmpi	remove_index, _i0
000481:0x0014ebe0:	blt	0x14ebf8
000483:0x0014ebe8:	ncalli	array<TFResult>.RemoveOrdered(remove_index)
000483:0x0014ebf8:	rts
array<TFResult>::RemoveItemUnOrdered()
000489:0x0014ec28:	movefm	@c00, value
000489:0x0014ec38:	icall	
000489:0x0014ec48:	move	remove_index, #return
000491:0x0014ec58:	cmpi	remove_index, _i0
000491:0x0014ec68:	blt	0x14ec80
000493:0x0014ec70:	ncalli	array<TFResult>.Remove(remove_index)
000493:0x0014ec80:	rts
array<TFResult>::IsValidIndex()
000499:0x0014ec88:	cmpi	index, _i-1
000499:0x0014ec98:	ble	0x14ecd8
000499:0x0014eca0:	ncalli	array<TFResult>.Count()
000499:0x0014eca8:	cmpi	index, #return
000499:0x0014ecb8:	bge	0x14ecd8
000499:0x0014ecc0:	imove	#return, 0x000001
000499:0x0014ecd0:	jump	0x14ece8
000499:0x0014ecd8:	imove	#return, 0x000000
000499:0x0014ece8:	rts
000499:0x0014ecf0:	rts
array<TFResult>::Debug()
000525:0x0014ed48:	ncalli	array<TFResult>.Count()
000525:0x0014ed50:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0014ed80:	icall	Print(#return)
000526:0x0014ed90:	imove	i, 0x000000
000526:0x0014eda0:	jump	0x14edc0
000526:0x0014eda8:	move	@m00, i
000526:0x0014edb8:	inc	i
000526:0x0014edc0:	ncalli	array<TFResult>.Count()
000526:0x0014edc8:	cmpi	i, #return
000526:0x0014edd8:	bge	0x14ee50
000528:0x0014ede0:	icall	
000528:0x0014edf0:	movetm	item, #return
000529:0x0014ee00:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0014ee30:	icall	Print(#return)
000529:0x0014ee40:	release	item
000529:0x0014ee48:	jump	0x14eda8
000529:0x0014ee50:	rts
array<TFResult>::GetRandomIndex()
000544:0x0014ee58:	ncalli	array<TFResult>.Count()
000544:0x0014ee60:	move	@m00, #return
000544:0x0014ee70:	cmpi	@m00, _i0
000544:0x0014ee80:	ble	0x14eeb8
000546:0x0014ee88:	ncalli	array<TFResult>.Count()
000546:0x0014ee90:	icall	RandomInt(_i0, #return)
000546:0x0014eea0:	move	#return, #return
000546:0x0014eeb0:	rts
000549:0x0014eeb8:	imove	#return, 0xffffffff
000549:0x0014eec8:	rts
000549:0x0014eed0:	rts
array<TFResult>::GetRandomElement()
000563:0x0014eed8:	call	
000563:0x0014eee8:	icall	
000563:0x0014eef8:	movetm	#return, #return
000563:0x0014ef08:	rts
000563:0x0014ef10:	rts
array<TFResult>::SwapItems()
000568:0x0014ef40:	icall	
000568:0x0014ef50:	movetm	item1, #return
000569:0x0014ef60:	icall	
000569:0x0014ef70:	icall	
000570:0x0014ef80:	movefm	@c00, item1
000570:0x0014ef90:	icall	
000570:0x0014efa0:	release	item1
000570:0x0014efa8:	rts
array<TFResult>::InsertArray()
000575:0x0014f000:	imove	i, 0x000000
000575:0x0014f010:	jump	0x14f030
000575:0x0014f018:	move	@m00, i
000575:0x0014f028:	inc	i
000575:0x0014f030:	ncalli	array<TFResult>.Count()
000575:0x0014f038:	cmpi	i, #return
000575:0x0014f048:	bge	0x14f0a0
000577:0x0014f050:	icall	
000577:0x0014f060:	movetm	item, #return
000578:0x0014f070:	movefm	@c00, item
000578:0x0014f080:	icall	
000578:0x0014f090:	release	item
000578:0x0014f098:	jump	0x14f018
000578:0x0014f0a0:	rts
array<TFResult>::Invert()
000584:0x0014f120:	imove	left, 0x000000
000585:0x0014f130:	ncalli	array<TFResult>.Count()
000585:0x0014f138:	subi	right, #return, _i1
000586:0x0014f148:	cmpi	right, _i0
000586:0x0014f158:	ble	0x14f218
000588:0x0014f160:	cmpi	left, right
000588:0x0014f170:	bge	0x14f218
000590:0x0014f178:	icall	
000590:0x0014f188:	movetm	temp, #return
000591:0x0014f198:	move	@m00, left
000591:0x0014f1a8:	inc	left
000591:0x0014f1b0:	icall	
000591:0x0014f1c0:	icall	
000592:0x0014f1d0:	move	@m00, right
000592:0x0014f1e0:	dec	right
000592:0x0014f1e8:	movefm	@c00, temp
000592:0x0014f1f8:	icall	
000592:0x0014f208:	release	temp
000592:0x0014f210:	jump	0x14f160
000592:0x0014f218:	rts
array<TFResult>::MoveIndex()
000612:0x0014f270:	ncalli	array<TFResult>.Count()
000612:0x0014f278:	move	count, #return
000613:0x0014f288:	move	new_index, curr_index
000615:0x0014f298:	cmpi	move_number, _i0
000615:0x0014f2a8:	ble	0x14f2d0
000617:0x0014f2b0:	addi	@m00, curr_index, move_number
000617:0x0014f2c0:	move	new_index, @m00
000620:0x0014f2d0:	cmpi	move_number, _i0
000620:0x0014f2e0:	bge	0x14f388
000622:0x0014f2e8:	subi	@m00, curr_index, move_number
000622:0x0014f2f8:	move	new_index, @m00
000624:0x0014f308:	cmpi	new_index, _i0
000624:0x0014f318:	bge	0x14f388
000626:0x0014f320:	subi	@m01, _i0, count
000626:0x0014f330:	cmpi	new_index, @m01
000626:0x0014f340:	bgt	0x14f368
000628:0x0014f348:	modi	@m00, new_index, count
000628:0x0014f358:	move	new_index, @m00
000631:0x0014f368:	addi	@m00, new_index, count
000631:0x0014f378:	move	new_index, @m00
000635:0x0014f388:	cmpi	new_index, count
000635:0x0014f398:	blt	0x14f3c0
000637:0x0014f3a0:	modi	@m00, new_index, count
000637:0x0014f3b0:	move	new_index, @m00
000641:0x0014f3c0:	move	#return, new_index
000641:0x0014f3d0:	rts
000641:0x0014f3d8:	rts
array<TFResult>::ShuffleArray()
000646:0x0014f408:	imove	i, 0x000000
000646:0x0014f418:	jump	0x14f438
000646:0x0014f420:	move	@m00, i
000646:0x0014f430:	inc	i
000646:0x0014f438:	ncalli	array<TFResult>.Count()
000646:0x0014f440:	cmpi	i, #return
000646:0x0014f450:	bge	0x14f488
000648:0x0014f458:	call	
000648:0x0014f468:	call	
000648:0x0014f480:	jump	0x14f420
000648:0x0014f488:	rts
array<TFResult>::DifferentAtPosition()
000666:0x0014f4b8:	ncalli	array<TFResult>.Count()
000666:0x0014f4c0:	move	@m00, #return
000666:0x0014f4d0:	push	#return
000666:0x0014f4d8:	ncalli	array<TFResult>.Count()
000666:0x0014f4e0:	move	@m02, #return
000666:0x0014f4f0:	pop	#return
000666:0x0014f4f8:	cmpi	@m00, @m02
000666:0x0014f508:	beq	0x14f538
000668:0x0014f510:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0014f520:	imove	#return, 0xffffffff
000669:0x0014f530:	rts
000672:0x0014f538:	imove	i, 0x000000
000672:0x0014f548:	jump	0x14f558
000672:0x0014f550:	inc	i
000672:0x0014f558:	ncalli	array<TFResult>.Count()
000672:0x0014f560:	cmpi	i, #return
000672:0x0014f570:	bge	0x14f600
000674:0x0014f578:	icall	
000674:0x0014f588:	movec	@c00, #return
000674:0x0014f598:	pushc	#return
000674:0x0014f5a0:	icall	
000674:0x0014f5b0:	movec	@c02, #return
000674:0x0014f5c0:	popc	#return
000674:0x0014f5c8:	cmpc	@c00, @c02
000674:0x0014f5d8:	beq	0x14f5f8
000676:0x0014f5e0:	move	#return, i
000676:0x0014f5f0:	rts
000676:0x0014f5f8:	jump	0x14f550
000680:0x0014f600:	imove	#return, 0xffffffff
000680:0x0014f610:	rts
000680:0x0014f618:	rts
array<@TFResult>::InsertAll()
000427:0x0014fa30:	imove	i, 0x000000
000427:0x0014fa40:	jump	0x14fa60
000427:0x0014fa48:	move	@m00, i
000427:0x0014fa58:	inc	i
000427:0x0014fa60:	ncalli	array<TFResult>.Count()
000427:0x0014fa68:	cmpi	i, #return
000427:0x0014fa78:	bge	0x14faa8
000429:0x0014fa80:	icall	
000429:0x0014fa90:	icall	
000429:0x0014faa0:	jump	0x14fa48
000429:0x0014faa8:	rts
array<@TFResult>::RemoveItem()
000479:0x0014fad8:	movefm	@c00, value
000479:0x0014fae8:	icall	
000479:0x0014faf8:	move	remove_index, #return
000481:0x0014fb08:	cmpi	remove_index, _i0
000481:0x0014fb18:	blt	0x14fb30
000483:0x0014fb20:	ncalli	array<@TFResult>.RemoveOrdered(remove_index)
000483:0x0014fb30:	rts
array<@TFResult>::RemoveItemUnOrdered()
000489:0x0014fb60:	movefm	@c00, value
000489:0x0014fb70:	icall	
000489:0x0014fb80:	move	remove_index, #return
000491:0x0014fb90:	cmpi	remove_index, _i0
000491:0x0014fba0:	blt	0x14fbb8
000493:0x0014fba8:	ncalli	array<@TFResult>.Remove(remove_index)
000493:0x0014fbb8:	rts
array<@TFResult>::IsValidIndex()
000499:0x0014fbc0:	cmpi	index, _i-1
000499:0x0014fbd0:	ble	0x14fc10
000499:0x0014fbd8:	ncalli	array<@TFResult>.Count()
000499:0x0014fbe0:	cmpi	index, #return
000499:0x0014fbf0:	bge	0x14fc10
000499:0x0014fbf8:	imove	#return, 0x000001
000499:0x0014fc08:	jump	0x14fc20
000499:0x0014fc10:	imove	#return, 0x000000
000499:0x0014fc20:	rts
000499:0x0014fc28:	rts
array<@TFResult>::Debug()
000525:0x0014fc80:	ncalli	array<@TFResult>.Count()
000525:0x0014fc88:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0014fcb8:	icall	Print(#return)
000526:0x0014fcc8:	imove	i, 0x000000
000526:0x0014fcd8:	jump	0x14fcf8
000526:0x0014fce0:	move	@m00, i
000526:0x0014fcf0:	inc	i
000526:0x0014fcf8:	ncalli	array<@TFResult>.Count()
000526:0x0014fd00:	cmpi	i, #return
000526:0x0014fd10:	bge	0x14fd88
000528:0x0014fd18:	icall	
000528:0x0014fd28:	movetm	item, #return
000529:0x0014fd38:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0014fd68:	icall	Print(#return)
000529:0x0014fd78:	release	item
000529:0x0014fd80:	jump	0x14fce0
000529:0x0014fd88:	rts
array<@TFResult>::GetRandomIndex()
000544:0x0014fd90:	ncalli	array<@TFResult>.Count()
000544:0x0014fd98:	move	@m00, #return
000544:0x0014fda8:	cmpi	@m00, _i0
000544:0x0014fdb8:	ble	0x14fdf0
000546:0x0014fdc0:	ncalli	array<@TFResult>.Count()
000546:0x0014fdc8:	icall	RandomInt(_i0, #return)
000546:0x0014fdd8:	move	#return, #return
000546:0x0014fde8:	rts
000549:0x0014fdf0:	imove	#return, 0xffffffff
000549:0x0014fe00:	rts
000549:0x0014fe08:	rts
array<@TFResult>::GetRandomElement()
000563:0x0014fe10:	call	
000563:0x0014fe20:	icall	
000563:0x0014fe30:	movetm	#return, #return
000563:0x0014fe40:	rts
000563:0x0014fe48:	rts
array<@TFResult>::SwapItems()
000568:0x0014fe78:	icall	
000568:0x0014fe88:	movetm	item1, #return
000569:0x0014fe98:	icall	
000569:0x0014fea8:	icall	
000570:0x0014feb8:	movefm	@c00, item1
000570:0x0014fec8:	icall	
000570:0x0014fed8:	release	item1
000570:0x0014fee0:	rts
array<@TFResult>::InsertArray()
000575:0x0014ff38:	imove	i, 0x000000
000575:0x0014ff48:	jump	0x14ff68
000575:0x0014ff50:	move	@m00, i
000575:0x0014ff60:	inc	i
000575:0x0014ff68:	ncalli	array<TFResult>.Count()
000575:0x0014ff70:	cmpi	i, #return
000575:0x0014ff80:	bge	0x14ffd8
000577:0x0014ff88:	icall	
000577:0x0014ff98:	movetm	item, #return
000578:0x0014ffa8:	movefm	@c00, item
000578:0x0014ffb8:	icall	
000578:0x0014ffc8:	release	item
000578:0x0014ffd0:	jump	0x14ff50
000578:0x0014ffd8:	rts
array<@TFResult>::Invert()
000584:0x00150058:	imove	left, 0x000000
000585:0x00150068:	ncalli	array<@TFResult>.Count()
000585:0x00150070:	subi	right, #return, _i1
000586:0x00150080:	cmpi	right, _i0
000586:0x00150090:	ble	0x150150
000588:0x00150098:	cmpi	left, right
000588:0x001500a8:	bge	0x150150
000590:0x001500b0:	icall	
000590:0x001500c0:	movetm	temp, #return
000591:0x001500d0:	move	@m00, left
000591:0x001500e0:	inc	left
000591:0x001500e8:	icall	
000591:0x001500f8:	icall	
000592:0x00150108:	move	@m00, right
000592:0x00150118:	dec	right
000592:0x00150120:	movefm	@c00, temp
000592:0x00150130:	icall	
000592:0x00150140:	release	temp
000592:0x00150148:	jump	0x150098
000592:0x00150150:	rts
array<@TFResult>::MoveIndex()
000612:0x001501a8:	ncalli	array<@TFResult>.Count()
000612:0x001501b0:	move	count, #return
000613:0x001501c0:	move	new_index, curr_index
000615:0x001501d0:	cmpi	move_number, _i0
000615:0x001501e0:	ble	0x150208
000617:0x001501e8:	addi	@m00, curr_index, move_number
000617:0x001501f8:	move	new_index, @m00
000620:0x00150208:	cmpi	move_number, _i0
000620:0x00150218:	bge	0x1502c0
000622:0x00150220:	subi	@m00, curr_index, move_number
000622:0x00150230:	move	new_index, @m00
000624:0x00150240:	cmpi	new_index, _i0
000624:0x00150250:	bge	0x1502c0
000626:0x00150258:	subi	@m01, _i0, count
000626:0x00150268:	cmpi	new_index, @m01
000626:0x00150278:	bgt	0x1502a0
000628:0x00150280:	modi	@m00, new_index, count
000628:0x00150290:	move	new_index, @m00
000631:0x001502a0:	addi	@m00, new_index, count
000631:0x001502b0:	move	new_index, @m00
000635:0x001502c0:	cmpi	new_index, count
000635:0x001502d0:	blt	0x1502f8
000637:0x001502d8:	modi	@m00, new_index, count
000637:0x001502e8:	move	new_index, @m00
000641:0x001502f8:	move	#return, new_index
000641:0x00150308:	rts
000641:0x00150310:	rts
array<@TFResult>::ShuffleArray()
000646:0x00150340:	imove	i, 0x000000
000646:0x00150350:	jump	0x150370
000646:0x00150358:	move	@m00, i
000646:0x00150368:	inc	i
000646:0x00150370:	ncalli	array<@TFResult>.Count()
000646:0x00150378:	cmpi	i, #return
000646:0x00150388:	bge	0x1503c0
000648:0x00150390:	call	
000648:0x001503a0:	call	
000648:0x001503b8:	jump	0x150358
000648:0x001503c0:	rts
array<@TFResult>::DifferentAtPosition()
000666:0x001503f0:	ncalli	array<@TFResult>.Count()
000666:0x001503f8:	move	@m00, #return
000666:0x00150408:	ncalli	array<TFResult>.Count()
000666:0x00150410:	cmpi	@m00, #return
000666:0x00150420:	beq	0x150450
000668:0x00150428:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00150438:	imove	#return, 0xffffffff
000669:0x00150448:	rts
000672:0x00150450:	imove	i, 0x000000
000672:0x00150460:	jump	0x150470
000672:0x00150468:	inc	i
000672:0x00150470:	ncalli	array<TFResult>.Count()
000672:0x00150478:	cmpi	i, #return
000672:0x00150488:	bge	0x1504f8
000674:0x00150490:	icall	
000674:0x001504a0:	movec	@c00, #return
000674:0x001504b0:	icall	
000674:0x001504c0:	cmpc	@c00, #return
000674:0x001504d0:	beq	0x1504f0
000676:0x001504d8:	move	#return, i
000676:0x001504e8:	rts
000676:0x001504f0:	jump	0x150468
000680:0x001504f8:	imove	#return, 0xffffffff
000680:0x00150508:	rts
000680:0x00150510:	rts
array<TFCaller>::InsertAll()
000427:0x00150d40:	imove	i, 0x000000
000427:0x00150d50:	jump	0x150d70
000427:0x00150d58:	move	@m00, i
000427:0x00150d68:	inc	i
000427:0x00150d70:	ncalli	array<TFCaller>.Count()
000427:0x00150d78:	cmpi	i, #return
000427:0x00150d88:	bge	0x150db8
000429:0x00150d90:	icall	
000429:0x00150da0:	icall	
000429:0x00150db0:	jump	0x150d58
000429:0x00150db8:	rts
array<TFCaller>::RemoveItem()
000479:0x00150de8:	movefm	@c00, value
000479:0x00150df8:	icall	
000479:0x00150e08:	move	remove_index, #return
000481:0x00150e18:	cmpi	remove_index, _i0
000481:0x00150e28:	blt	0x150e40
000483:0x00150e30:	ncalli	array<TFCaller>.RemoveOrdered(remove_index)
000483:0x00150e40:	rts
array<TFCaller>::RemoveItemUnOrdered()
000489:0x00150e70:	movefm	@c00, value
000489:0x00150e80:	icall	
000489:0x00150e90:	move	remove_index, #return
000491:0x00150ea0:	cmpi	remove_index, _i0
000491:0x00150eb0:	blt	0x150ec8
000493:0x00150eb8:	ncalli	array<TFCaller>.Remove(remove_index)
000493:0x00150ec8:	rts
array<TFCaller>::IsValidIndex()
000499:0x00150ed0:	cmpi	index, _i-1
000499:0x00150ee0:	ble	0x150f20
000499:0x00150ee8:	ncalli	array<TFCaller>.Count()
000499:0x00150ef0:	cmpi	index, #return
000499:0x00150f00:	bge	0x150f20
000499:0x00150f08:	imove	#return, 0x000001
000499:0x00150f18:	jump	0x150f30
000499:0x00150f20:	imove	#return, 0x000000
000499:0x00150f30:	rts
000499:0x00150f38:	rts
array<TFCaller>::Debug()
000525:0x00150f90:	ncalli	array<TFCaller>.Count()
000525:0x00150f98:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00150fc8:	icall	Print(#return)
000526:0x00150fd8:	imove	i, 0x000000
000526:0x00150fe8:	jump	0x151008
000526:0x00150ff0:	move	@m00, i
000526:0x00151000:	inc	i
000526:0x00151008:	ncalli	array<TFCaller>.Count()
000526:0x00151010:	cmpi	i, #return
000526:0x00151020:	bge	0x151098
000528:0x00151028:	icall	
000528:0x00151038:	movetm	item, #return
000529:0x00151048:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00151078:	icall	Print(#return)
000529:0x00151088:	release	item
000529:0x00151090:	jump	0x150ff0
000529:0x00151098:	rts
array<TFCaller>::GetRandomIndex()
000544:0x001510a0:	ncalli	array<TFCaller>.Count()
000544:0x001510a8:	move	@m00, #return
000544:0x001510b8:	cmpi	@m00, _i0
000544:0x001510c8:	ble	0x151100
000546:0x001510d0:	ncalli	array<TFCaller>.Count()
000546:0x001510d8:	icall	RandomInt(_i0, #return)
000546:0x001510e8:	move	#return, #return
000546:0x001510f8:	rts
000549:0x00151100:	imove	#return, 0xffffffff
000549:0x00151110:	rts
000549:0x00151118:	rts
array<TFCaller>::GetRandomElement()
000563:0x00151120:	call	
000563:0x00151130:	icall	
000563:0x00151140:	movetm	#return, #return
000563:0x00151150:	rts
000563:0x00151158:	rts
array<TFCaller>::SwapItems()
000568:0x00151188:	icall	
000568:0x00151198:	movetm	item1, #return
000569:0x001511a8:	icall	
000569:0x001511b8:	icall	
000570:0x001511c8:	movefm	@c00, item1
000570:0x001511d8:	icall	
000570:0x001511e8:	release	item1
000570:0x001511f0:	rts
array<TFCaller>::InsertArray()
000575:0x00151248:	imove	i, 0x000000
000575:0x00151258:	jump	0x151278
000575:0x00151260:	move	@m00, i
000575:0x00151270:	inc	i
000575:0x00151278:	ncalli	array<TFCaller>.Count()
000575:0x00151280:	cmpi	i, #return
000575:0x00151290:	bge	0x1512e8
000577:0x00151298:	icall	
000577:0x001512a8:	movetm	item, #return
000578:0x001512b8:	movefm	@c00, item
000578:0x001512c8:	icall	
000578:0x001512d8:	release	item
000578:0x001512e0:	jump	0x151260
000578:0x001512e8:	rts
array<TFCaller>::Invert()
000584:0x00151368:	imove	left, 0x000000
000585:0x00151378:	ncalli	array<TFCaller>.Count()
000585:0x00151380:	subi	right, #return, _i1
000586:0x00151390:	cmpi	right, _i0
000586:0x001513a0:	ble	0x151460
000588:0x001513a8:	cmpi	left, right
000588:0x001513b8:	bge	0x151460
000590:0x001513c0:	icall	
000590:0x001513d0:	movetm	temp, #return
000591:0x001513e0:	move	@m00, left
000591:0x001513f0:	inc	left
000591:0x001513f8:	icall	
000591:0x00151408:	icall	
000592:0x00151418:	move	@m00, right
000592:0x00151428:	dec	right
000592:0x00151430:	movefm	@c00, temp
000592:0x00151440:	icall	
000592:0x00151450:	release	temp
000592:0x00151458:	jump	0x1513a8
000592:0x00151460:	rts
array<TFCaller>::MoveIndex()
000612:0x001514b8:	ncalli	array<TFCaller>.Count()
000612:0x001514c0:	move	count, #return
000613:0x001514d0:	move	new_index, curr_index
000615:0x001514e0:	cmpi	move_number, _i0
000615:0x001514f0:	ble	0x151518
000617:0x001514f8:	addi	@m00, curr_index, move_number
000617:0x00151508:	move	new_index, @m00
000620:0x00151518:	cmpi	move_number, _i0
000620:0x00151528:	bge	0x1515d0
000622:0x00151530:	subi	@m00, curr_index, move_number
000622:0x00151540:	move	new_index, @m00
000624:0x00151550:	cmpi	new_index, _i0
000624:0x00151560:	bge	0x1515d0
000626:0x00151568:	subi	@m01, _i0, count
000626:0x00151578:	cmpi	new_index, @m01
000626:0x00151588:	bgt	0x1515b0
000628:0x00151590:	modi	@m00, new_index, count
000628:0x001515a0:	move	new_index, @m00
000631:0x001515b0:	addi	@m00, new_index, count
000631:0x001515c0:	move	new_index, @m00
000635:0x001515d0:	cmpi	new_index, count
000635:0x001515e0:	blt	0x151608
000637:0x001515e8:	modi	@m00, new_index, count
000637:0x001515f8:	move	new_index, @m00
000641:0x00151608:	move	#return, new_index
000641:0x00151618:	rts
000641:0x00151620:	rts
array<TFCaller>::ShuffleArray()
000646:0x00151650:	imove	i, 0x000000
000646:0x00151660:	jump	0x151680
000646:0x00151668:	move	@m00, i
000646:0x00151678:	inc	i
000646:0x00151680:	ncalli	array<TFCaller>.Count()
000646:0x00151688:	cmpi	i, #return
000646:0x00151698:	bge	0x1516d0
000648:0x001516a0:	call	
000648:0x001516b0:	call	
000648:0x001516c8:	jump	0x151668
000648:0x001516d0:	rts
array<TFCaller>::DifferentAtPosition()
000666:0x00151700:	ncalli	array<TFCaller>.Count()
000666:0x00151708:	move	@m00, #return
000666:0x00151718:	push	#return
000666:0x00151720:	ncalli	array<TFCaller>.Count()
000666:0x00151728:	move	@m02, #return
000666:0x00151738:	pop	#return
000666:0x00151740:	cmpi	@m00, @m02
000666:0x00151750:	beq	0x151780
000668:0x00151758:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00151768:	imove	#return, 0xffffffff
000669:0x00151778:	rts
000672:0x00151780:	imove	i, 0x000000
000672:0x00151790:	jump	0x1517a0
000672:0x00151798:	inc	i
000672:0x001517a0:	ncalli	array<TFCaller>.Count()
000672:0x001517a8:	cmpi	i, #return
000672:0x001517b8:	bge	0x151848
000674:0x001517c0:	icall	
000674:0x001517d0:	movec	@c00, #return
000674:0x001517e0:	pushc	#return
000674:0x001517e8:	icall	
000674:0x001517f8:	movec	@c02, #return
000674:0x00151808:	popc	#return
000674:0x00151810:	cmpc	@c00, @c02
000674:0x00151820:	beq	0x151840
000676:0x00151828:	move	#return, i
000676:0x00151838:	rts
000676:0x00151840:	jump	0x151798
000680:0x00151848:	imove	#return, 0xffffffff
000680:0x00151858:	rts
000680:0x00151860:	rts
array<@TFCaller>::InsertAll()
000427:0x00151c78:	imove	i, 0x000000
000427:0x00151c88:	jump	0x151ca8
000427:0x00151c90:	move	@m00, i
000427:0x00151ca0:	inc	i
000427:0x00151ca8:	ncalli	array<TFCaller>.Count()
000427:0x00151cb0:	cmpi	i, #return
000427:0x00151cc0:	bge	0x151cf0
000429:0x00151cc8:	icall	
000429:0x00151cd8:	icall	
000429:0x00151ce8:	jump	0x151c90
000429:0x00151cf0:	rts
array<@TFCaller>::RemoveItem()
000479:0x00151d20:	movefm	@c00, value
000479:0x00151d30:	icall	
000479:0x00151d40:	move	remove_index, #return
000481:0x00151d50:	cmpi	remove_index, _i0
000481:0x00151d60:	blt	0x151d78
000483:0x00151d68:	ncalli	array<@TFCaller>.RemoveOrdered(remove_index)
000483:0x00151d78:	rts
array<@TFCaller>::RemoveItemUnOrdered()
000489:0x00151da8:	movefm	@c00, value
000489:0x00151db8:	icall	
000489:0x00151dc8:	move	remove_index, #return
000491:0x00151dd8:	cmpi	remove_index, _i0
000491:0x00151de8:	blt	0x151e00
000493:0x00151df0:	ncalli	array<@TFCaller>.Remove(remove_index)
000493:0x00151e00:	rts
array<@TFCaller>::IsValidIndex()
000499:0x00151e08:	cmpi	index, _i-1
000499:0x00151e18:	ble	0x151e58
000499:0x00151e20:	ncalli	array<@TFCaller>.Count()
000499:0x00151e28:	cmpi	index, #return
000499:0x00151e38:	bge	0x151e58
000499:0x00151e40:	imove	#return, 0x000001
000499:0x00151e50:	jump	0x151e68
000499:0x00151e58:	imove	#return, 0x000000
000499:0x00151e68:	rts
000499:0x00151e70:	rts
array<@TFCaller>::Debug()
000525:0x00151ec8:	ncalli	array<@TFCaller>.Count()
000525:0x00151ed0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00151f00:	icall	Print(#return)
000526:0x00151f10:	imove	i, 0x000000
000526:0x00151f20:	jump	0x151f40
000526:0x00151f28:	move	@m00, i
000526:0x00151f38:	inc	i
000526:0x00151f40:	ncalli	array<@TFCaller>.Count()
000526:0x00151f48:	cmpi	i, #return
000526:0x00151f58:	bge	0x151fd0
000528:0x00151f60:	icall	
000528:0x00151f70:	movetm	item, #return
000529:0x00151f80:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00151fb0:	icall	Print(#return)
000529:0x00151fc0:	release	item
000529:0x00151fc8:	jump	0x151f28
000529:0x00151fd0:	rts
array<@TFCaller>::GetRandomIndex()
000544:0x00151fd8:	ncalli	array<@TFCaller>.Count()
000544:0x00151fe0:	move	@m00, #return
000544:0x00151ff0:	cmpi	@m00, _i0
000544:0x00152000:	ble	0x152038
000546:0x00152008:	ncalli	array<@TFCaller>.Count()
000546:0x00152010:	icall	RandomInt(_i0, #return)
000546:0x00152020:	move	#return, #return
000546:0x00152030:	rts
000549:0x00152038:	imove	#return, 0xffffffff
000549:0x00152048:	rts
000549:0x00152050:	rts
array<@TFCaller>::GetRandomElement()
000563:0x00152058:	call	
000563:0x00152068:	icall	
000563:0x00152078:	movetm	#return, #return
000563:0x00152088:	rts
000563:0x00152090:	rts
array<@TFCaller>::SwapItems()
000568:0x001520c0:	icall	
000568:0x001520d0:	movetm	item1, #return
000569:0x001520e0:	icall	
000569:0x001520f0:	icall	
000570:0x00152100:	movefm	@c00, item1
000570:0x00152110:	icall	
000570:0x00152120:	release	item1
000570:0x00152128:	rts
array<@TFCaller>::InsertArray()
000575:0x00152180:	imove	i, 0x000000
000575:0x00152190:	jump	0x1521b0
000575:0x00152198:	move	@m00, i
000575:0x001521a8:	inc	i
000575:0x001521b0:	ncalli	array<TFCaller>.Count()
000575:0x001521b8:	cmpi	i, #return
000575:0x001521c8:	bge	0x152220
000577:0x001521d0:	icall	
000577:0x001521e0:	movetm	item, #return
000578:0x001521f0:	movefm	@c00, item
000578:0x00152200:	icall	
000578:0x00152210:	release	item
000578:0x00152218:	jump	0x152198
000578:0x00152220:	rts
array<@TFCaller>::Invert()
000584:0x001522a0:	imove	left, 0x000000
000585:0x001522b0:	ncalli	array<@TFCaller>.Count()
000585:0x001522b8:	subi	right, #return, _i1
000586:0x001522c8:	cmpi	right, _i0
000586:0x001522d8:	ble	0x152398
000588:0x001522e0:	cmpi	left, right
000588:0x001522f0:	bge	0x152398
000590:0x001522f8:	icall	
000590:0x00152308:	movetm	temp, #return
000591:0x00152318:	move	@m00, left
000591:0x00152328:	inc	left
000591:0x00152330:	icall	
000591:0x00152340:	icall	
000592:0x00152350:	move	@m00, right
000592:0x00152360:	dec	right
000592:0x00152368:	movefm	@c00, temp
000592:0x00152378:	icall	
000592:0x00152388:	release	temp
000592:0x00152390:	jump	0x1522e0
000592:0x00152398:	rts
array<@TFCaller>::MoveIndex()
000612:0x001523f0:	ncalli	array<@TFCaller>.Count()
000612:0x001523f8:	move	count, #return
000613:0x00152408:	move	new_index, curr_index
000615:0x00152418:	cmpi	move_number, _i0
000615:0x00152428:	ble	0x152450
000617:0x00152430:	addi	@m00, curr_index, move_number
000617:0x00152440:	move	new_index, @m00
000620:0x00152450:	cmpi	move_number, _i0
000620:0x00152460:	bge	0x152508
000622:0x00152468:	subi	@m00, curr_index, move_number
000622:0x00152478:	move	new_index, @m00
000624:0x00152488:	cmpi	new_index, _i0
000624:0x00152498:	bge	0x152508
000626:0x001524a0:	subi	@m01, _i0, count
000626:0x001524b0:	cmpi	new_index, @m01
000626:0x001524c0:	bgt	0x1524e8
000628:0x001524c8:	modi	@m00, new_index, count
000628:0x001524d8:	move	new_index, @m00
000631:0x001524e8:	addi	@m00, new_index, count
000631:0x001524f8:	move	new_index, @m00
000635:0x00152508:	cmpi	new_index, count
000635:0x00152518:	blt	0x152540
000637:0x00152520:	modi	@m00, new_index, count
000637:0x00152530:	move	new_index, @m00
000641:0x00152540:	move	#return, new_index
000641:0x00152550:	rts
000641:0x00152558:	rts
array<@TFCaller>::ShuffleArray()
000646:0x00152588:	imove	i, 0x000000
000646:0x00152598:	jump	0x1525b8
000646:0x001525a0:	move	@m00, i
000646:0x001525b0:	inc	i
000646:0x001525b8:	ncalli	array<@TFCaller>.Count()
000646:0x001525c0:	cmpi	i, #return
000646:0x001525d0:	bge	0x152608
000648:0x001525d8:	call	
000648:0x001525e8:	call	
000648:0x00152600:	jump	0x1525a0
000648:0x00152608:	rts
array<@TFCaller>::DifferentAtPosition()
000666:0x00152638:	ncalli	array<@TFCaller>.Count()
000666:0x00152640:	move	@m00, #return
000666:0x00152650:	ncalli	array<TFCaller>.Count()
000666:0x00152658:	cmpi	@m00, #return
000666:0x00152668:	beq	0x152698
000668:0x00152670:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00152680:	imove	#return, 0xffffffff
000669:0x00152690:	rts
000672:0x00152698:	imove	i, 0x000000
000672:0x001526a8:	jump	0x1526b8
000672:0x001526b0:	inc	i
000672:0x001526b8:	ncalli	array<TFCaller>.Count()
000672:0x001526c0:	cmpi	i, #return
000672:0x001526d0:	bge	0x152740
000674:0x001526d8:	icall	
000674:0x001526e8:	movec	@c00, #return
000674:0x001526f8:	icall	
000674:0x00152708:	cmpc	@c00, #return
000674:0x00152718:	beq	0x152738
000676:0x00152720:	move	#return, i
000676:0x00152730:	rts
000676:0x00152738:	jump	0x1526b0
000680:0x00152740:	imove	#return, 0xffffffff
000680:0x00152750:	rts
000680:0x00152758:	rts
Param4<string,int,int,int>::Param4()
//scripts/1_Core/param.c
000128:0x00152950:	moves	param1, p1
000129:0x00152960:	move	param2, p2
000130:0x00152970:	move	param3, p3
000131:0x00152980:	move	param4, p4
000131:0x00152990:	rts
Param4<string,int,int,int>::Serialize()
000136:0x00152998:	icall	
000136:0x001529a8:	cmpi	#return, _i0
000136:0x001529b8:	beq	0x152a50
000136:0x001529c0:	icall	
000136:0x001529d0:	cmpi	#return, _i0
000136:0x001529e0:	beq	0x152a50
000136:0x001529e8:	icall	
000136:0x001529f8:	cmpi	#return, _i0
000136:0x00152a08:	beq	0x152a50
000136:0x00152a10:	icall	
000136:0x00152a20:	cmpi	#return, _i0
000136:0x00152a30:	beq	0x152a50
000136:0x00152a38:	imove	#return, 0x000001
000136:0x00152a48:	jump	0x152a60
000136:0x00152a50:	imove	#return, 0x000000
000136:0x00152a60:	rts
000136:0x00152a68:	rts
Param4<string,int,int,int>::Deserializer()
000141:0x00152a70:	icall	
000141:0x00152a80:	cmpi	#return, _i0
000141:0x00152a90:	beq	0x152b28
000141:0x00152a98:	icall	
000141:0x00152aa8:	cmpi	#return, _i0
000141:0x00152ab8:	beq	0x152b28
000141:0x00152ac0:	icall	
000141:0x00152ad0:	cmpi	#return, _i0
000141:0x00152ae0:	beq	0x152b28
000141:0x00152ae8:	icall	
000141:0x00152af8:	cmpi	#return, _i0
000141:0x00152b08:	beq	0x152b28
000141:0x00152b10:	imove	#return, 0x000001
000141:0x00152b20:	jump	0x152b38
000141:0x00152b28:	imove	#return, 0x000000
000141:0x00152b38:	rts
000141:0x00152b40:	rts
Param4<string,float,float,float>::Param4()
000128:0x00152d38:	moves	param1, p1
000129:0x00152d48:	move	param2, p2
000130:0x00152d58:	move	param3, p3
000131:0x00152d68:	move	param4, p4
000131:0x00152d78:	rts
Param4<string,float,float,float>::Serialize()
000136:0x00152d80:	icall	
000136:0x00152d90:	cmpi	#return, _i0
000136:0x00152da0:	beq	0x152e38
000136:0x00152da8:	icall	
000136:0x00152db8:	cmpi	#return, _i0
000136:0x00152dc8:	beq	0x152e38
000136:0x00152dd0:	icall	
000136:0x00152de0:	cmpi	#return, _i0
000136:0x00152df0:	beq	0x152e38
000136:0x00152df8:	icall	
000136:0x00152e08:	cmpi	#return, _i0
000136:0x00152e18:	beq	0x152e38
000136:0x00152e20:	imove	#return, 0x000001
000136:0x00152e30:	jump	0x152e48
000136:0x00152e38:	imove	#return, 0x000000
000136:0x00152e48:	rts
000136:0x00152e50:	rts
Param4<string,float,float,float>::Deserializer()
000141:0x00152e58:	icall	
000141:0x00152e68:	cmpi	#return, _i0
000141:0x00152e78:	beq	0x152f10
000141:0x00152e80:	icall	
000141:0x00152e90:	cmpi	#return, _i0
000141:0x00152ea0:	beq	0x152f10
000141:0x00152ea8:	icall	
000141:0x00152eb8:	cmpi	#return, _i0
000141:0x00152ec8:	beq	0x152f10
000141:0x00152ed0:	icall	
000141:0x00152ee0:	cmpi	#return, _i0
000141:0x00152ef0:	beq	0x152f10
000141:0x00152ef8:	imove	#return, 0x000001
000141:0x00152f08:	jump	0x152f20
000141:0x00152f10:	imove	#return, 0x000000
000141:0x00152f20:	rts
000141:0x00152f28:	rts
Param5<string,float,float,float,float>::Param5()
000158:0x00153188:	moves	param1, p1
000159:0x00153198:	move	param2, p2
000160:0x001531a8:	move	param3, p3
000161:0x001531b8:	move	param4, p4
000162:0x001531c8:	move	param5, p5
000162:0x001531d8:	rts
Param5<string,float,float,float,float>::Serialize()
000167:0x001531e0:	icall	
000167:0x001531f0:	cmpi	#return, _i0
000167:0x00153200:	beq	0x1532c0
000167:0x00153208:	icall	
000167:0x00153218:	cmpi	#return, _i0
000167:0x00153228:	beq	0x1532c0
000167:0x00153230:	icall	
000167:0x00153240:	cmpi	#return, _i0
000167:0x00153250:	beq	0x1532c0
000167:0x00153258:	icall	
000167:0x00153268:	cmpi	#return, _i0
000167:0x00153278:	beq	0x1532c0
000167:0x00153280:	icall	
000167:0x00153290:	cmpi	#return, _i0
000167:0x001532a0:	beq	0x1532c0
000167:0x001532a8:	imove	#return, 0x000001
000167:0x001532b8:	jump	0x1532d0
000167:0x001532c0:	imove	#return, 0x000000
000167:0x001532d0:	rts
000167:0x001532d8:	rts
Param5<string,float,float,float,float>::Deserializer()
000172:0x001532e0:	icall	
000172:0x001532f0:	cmpi	#return, _i0
000172:0x00153300:	beq	0x1533c0
000172:0x00153308:	icall	
000172:0x00153318:	cmpi	#return, _i0
000172:0x00153328:	beq	0x1533c0
000172:0x00153330:	icall	
000172:0x00153340:	cmpi	#return, _i0
000172:0x00153350:	beq	0x1533c0
000172:0x00153358:	icall	
000172:0x00153368:	cmpi	#return, _i0
000172:0x00153378:	beq	0x1533c0
000172:0x00153380:	icall	
000172:0x00153390:	cmpi	#return, _i0
000172:0x001533a0:	beq	0x1533c0
000172:0x001533a8:	imove	#return, 0x000001
000172:0x001533b8:	jump	0x1533d0
000172:0x001533c0:	imove	#return, 0x000000
000172:0x001533d0:	rts
000172:0x001533d8:	rts
Param2<string,@array<float>>::Param2()
000066:0x00153500:	moves	param1, p1
000067:0x00153510:	movem	param2, p2
000067:0x00153520:	rts
Param2<string,@array<float>>::Serialize()
000072:0x00153528:	icall	
000072:0x00153538:	cmpi	#return, _i0
000072:0x00153548:	beq	0x153590
000072:0x00153550:	icall	
000072:0x00153560:	cmpi	#return, _i0
000072:0x00153570:	beq	0x153590
000072:0x00153578:	imove	#return, 0x000001
000072:0x00153588:	jump	0x1535a0
000072:0x00153590:	imove	#return, 0x000000
000072:0x001535a0:	rts
000072:0x001535a8:	rts
Param2<string,@array<float>>::Deserializer()
000077:0x001535b0:	icall	
000077:0x001535c0:	cmpi	#return, _i0
000077:0x001535d0:	beq	0x153618
000077:0x001535d8:	icall	
000077:0x001535e8:	cmpi	#return, _i0
000077:0x001535f8:	beq	0x153618
000077:0x00153600:	imove	#return, 0x000001
000077:0x00153610:	jump	0x153628
000077:0x00153618:	imove	#return, 0x000000
000077:0x00153628:	rts
000077:0x00153630:	rts
array<PPERequestParamDataBase>::InsertAll()
//scripts/1_Core/proto\enscript.c
000427:0x00154390:	imove	i, 0x000000
000427:0x001543a0:	jump	0x1543c0
000427:0x001543a8:	move	@m00, i
000427:0x001543b8:	inc	i
000427:0x001543c0:	ncalli	array<PPERequestParamDataBase>.Count()
000427:0x001543c8:	cmpi	i, #return
000427:0x001543d8:	bge	0x154408
000429:0x001543e0:	icall	
000429:0x001543f0:	icall	
000429:0x00154400:	jump	0x1543a8
000429:0x00154408:	rts
array<PPERequestParamDataBase>::RemoveItem()
000479:0x00154438:	movefm	@c00, value
000479:0x00154448:	icall	
000479:0x00154458:	move	remove_index, #return
000481:0x00154468:	cmpi	remove_index, _i0
000481:0x00154478:	blt	0x154490
000483:0x00154480:	ncalli	array<PPERequestParamDataBase>.RemoveOrdered(remove_index)
000483:0x00154490:	rts
array<PPERequestParamDataBase>::RemoveItemUnOrdered()
000489:0x001544c0:	movefm	@c00, value
000489:0x001544d0:	icall	
000489:0x001544e0:	move	remove_index, #return
000491:0x001544f0:	cmpi	remove_index, _i0
000491:0x00154500:	blt	0x154518
000493:0x00154508:	ncalli	array<PPERequestParamDataBase>.Remove(remove_index)
000493:0x00154518:	rts
array<PPERequestParamDataBase>::IsValidIndex()
000499:0x00154520:	cmpi	index, _i-1
000499:0x00154530:	ble	0x154570
000499:0x00154538:	ncalli	array<PPERequestParamDataBase>.Count()
000499:0x00154540:	cmpi	index, #return
000499:0x00154550:	bge	0x154570
000499:0x00154558:	imove	#return, 0x000001
000499:0x00154568:	jump	0x154580
000499:0x00154570:	imove	#return, 0x000000
000499:0x00154580:	rts
000499:0x00154588:	rts
array<PPERequestParamDataBase>::Debug()
000525:0x001545e0:	ncalli	array<PPERequestParamDataBase>.Count()
000525:0x001545e8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00154618:	icall	Print(#return)
000526:0x00154628:	imove	i, 0x000000
000526:0x00154638:	jump	0x154658
000526:0x00154640:	move	@m00, i
000526:0x00154650:	inc	i
000526:0x00154658:	ncalli	array<PPERequestParamDataBase>.Count()
000526:0x00154660:	cmpi	i, #return
000526:0x00154670:	bge	0x1546e8
000528:0x00154678:	icall	
000528:0x00154688:	movetm	item, #return
000529:0x00154698:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001546c8:	icall	Print(#return)
000529:0x001546d8:	release	item
000529:0x001546e0:	jump	0x154640
000529:0x001546e8:	rts
array<PPERequestParamDataBase>::GetRandomIndex()
000544:0x001546f0:	ncalli	array<PPERequestParamDataBase>.Count()
000544:0x001546f8:	move	@m00, #return
000544:0x00154708:	cmpi	@m00, _i0
000544:0x00154718:	ble	0x154750
000546:0x00154720:	ncalli	array<PPERequestParamDataBase>.Count()
000546:0x00154728:	icall	RandomInt(_i0, #return)
000546:0x00154738:	move	#return, #return
000546:0x00154748:	rts
000549:0x00154750:	imove	#return, 0xffffffff
000549:0x00154760:	rts
000549:0x00154768:	rts
array<PPERequestParamDataBase>::GetRandomElement()
000563:0x00154770:	call	
000563:0x00154780:	icall	
000563:0x00154790:	movetm	#return, #return
000563:0x001547a0:	rts
000563:0x001547a8:	rts
array<PPERequestParamDataBase>::SwapItems()
000568:0x001547d8:	icall	
000568:0x001547e8:	movetm	item1, #return
000569:0x001547f8:	icall	
000569:0x00154808:	icall	
000570:0x00154818:	movefm	@c00, item1
000570:0x00154828:	icall	
000570:0x00154838:	release	item1
000570:0x00154840:	rts
array<PPERequestParamDataBase>::InsertArray()
000575:0x00154898:	imove	i, 0x000000
000575:0x001548a8:	jump	0x1548c8
000575:0x001548b0:	move	@m00, i
000575:0x001548c0:	inc	i
000575:0x001548c8:	ncalli	array<PPERequestParamDataBase>.Count()
000575:0x001548d0:	cmpi	i, #return
000575:0x001548e0:	bge	0x154938
000577:0x001548e8:	icall	
000577:0x001548f8:	movetm	item, #return
000578:0x00154908:	movefm	@c00, item
000578:0x00154918:	icall	
000578:0x00154928:	release	item
000578:0x00154930:	jump	0x1548b0
000578:0x00154938:	rts
array<PPERequestParamDataBase>::Invert()
000584:0x001549b8:	imove	left, 0x000000
000585:0x001549c8:	ncalli	array<PPERequestParamDataBase>.Count()
000585:0x001549d0:	subi	right, #return, _i1
000586:0x001549e0:	cmpi	right, _i0
000586:0x001549f0:	ble	0x154ab0
000588:0x001549f8:	cmpi	left, right
000588:0x00154a08:	bge	0x154ab0
000590:0x00154a10:	icall	
000590:0x00154a20:	movetm	temp, #return
000591:0x00154a30:	move	@m00, left
000591:0x00154a40:	inc	left
000591:0x00154a48:	icall	
000591:0x00154a58:	icall	
000592:0x00154a68:	move	@m00, right
000592:0x00154a78:	dec	right
000592:0x00154a80:	movefm	@c00, temp
000592:0x00154a90:	icall	
000592:0x00154aa0:	release	temp
000592:0x00154aa8:	jump	0x1549f8
000592:0x00154ab0:	rts
array<PPERequestParamDataBase>::MoveIndex()
000612:0x00154b08:	ncalli	array<PPERequestParamDataBase>.Count()
000612:0x00154b10:	move	count, #return
000613:0x00154b20:	move	new_index, curr_index
000615:0x00154b30:	cmpi	move_number, _i0
000615:0x00154b40:	ble	0x154b68
000617:0x00154b48:	addi	@m00, curr_index, move_number
000617:0x00154b58:	move	new_index, @m00
000620:0x00154b68:	cmpi	move_number, _i0
000620:0x00154b78:	bge	0x154c20
000622:0x00154b80:	subi	@m00, curr_index, move_number
000622:0x00154b90:	move	new_index, @m00
000624:0x00154ba0:	cmpi	new_index, _i0
000624:0x00154bb0:	bge	0x154c20
000626:0x00154bb8:	subi	@m01, _i0, count
000626:0x00154bc8:	cmpi	new_index, @m01
000626:0x00154bd8:	bgt	0x154c00
000628:0x00154be0:	modi	@m00, new_index, count
000628:0x00154bf0:	move	new_index, @m00
000631:0x00154c00:	addi	@m00, new_index, count
000631:0x00154c10:	move	new_index, @m00
000635:0x00154c20:	cmpi	new_index, count
000635:0x00154c30:	blt	0x154c58
000637:0x00154c38:	modi	@m00, new_index, count
000637:0x00154c48:	move	new_index, @m00
000641:0x00154c58:	move	#return, new_index
000641:0x00154c68:	rts
000641:0x00154c70:	rts
array<PPERequestParamDataBase>::ShuffleArray()
000646:0x00154ca0:	imove	i, 0x000000
000646:0x00154cb0:	jump	0x154cd0
000646:0x00154cb8:	move	@m00, i
000646:0x00154cc8:	inc	i
000646:0x00154cd0:	ncalli	array<PPERequestParamDataBase>.Count()
000646:0x00154cd8:	cmpi	i, #return
000646:0x00154ce8:	bge	0x154d20
000648:0x00154cf0:	call	
000648:0x00154d00:	call	
000648:0x00154d18:	jump	0x154cb8
000648:0x00154d20:	rts
array<PPERequestParamDataBase>::DifferentAtPosition()
000666:0x00154d50:	ncalli	array<PPERequestParamDataBase>.Count()
000666:0x00154d58:	move	@m00, #return
000666:0x00154d68:	push	#return
000666:0x00154d70:	ncalli	array<PPERequestParamDataBase>.Count()
000666:0x00154d78:	move	@m02, #return
000666:0x00154d88:	pop	#return
000666:0x00154d90:	cmpi	@m00, @m02
000666:0x00154da0:	beq	0x154dd0
000668:0x00154da8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00154db8:	imove	#return, 0xffffffff
000669:0x00154dc8:	rts
000672:0x00154dd0:	imove	i, 0x000000
000672:0x00154de0:	jump	0x154df0
000672:0x00154de8:	inc	i
000672:0x00154df0:	ncalli	array<PPERequestParamDataBase>.Count()
000672:0x00154df8:	cmpi	i, #return
000672:0x00154e08:	bge	0x154e98
000674:0x00154e10:	icall	
000674:0x00154e20:	movec	@c00, #return
000674:0x00154e30:	pushc	#return
000674:0x00154e38:	icall	
000674:0x00154e48:	movec	@c02, #return
000674:0x00154e58:	popc	#return
000674:0x00154e60:	cmpc	@c00, @c02
000674:0x00154e70:	beq	0x154e90
000676:0x00154e78:	move	#return, i
000676:0x00154e88:	rts
000676:0x00154e90:	jump	0x154de8
000680:0x00154e98:	imove	#return, 0xffffffff
000680:0x00154ea8:	rts
000680:0x00154eb0:	rts
map<int,PPERequestParamDataBase>::GetKeyArray()
000885:0x001551b0:	new	keys, array<int>
000886:0x001551d0:	imove	i, 0x000000
000886:0x001551e0:	jump	0x155200
000886:0x001551e8:	move	@m00, i
000886:0x001551f8:	inc	i
000886:0x00155200:	ncalli	map<int,PPERequestParamDataBase>.Count()
000886:0x00155208:	cmpi	i, #return
000886:0x00155218:	bge	0x155248
000888:0x00155220:	icall	
000888:0x00155230:	icall	
000888:0x00155240:	jump	0x1551e8
000890:0x00155248:	movem	#return, keys
000890:0x00155258:	release	keys
000890:0x00155260:	rts
000890:0x00155268:	release	keys
000890:0x00155270:	rts
map<int,PPERequestParamDataBase>::GetValueArray()
000895:0x001552c8:	new	elements, array<PPERequestParamDataBase>
000896:0x001552e8:	imove	i, 0x000000
000896:0x001552f8:	jump	0x155318
000896:0x00155300:	move	@m00, i
000896:0x00155310:	inc	i
000896:0x00155318:	ncalli	map<int,PPERequestParamDataBase>.Count()
000896:0x00155320:	cmpi	i, #return
000896:0x00155330:	bge	0x155360
000898:0x00155338:	icall	
000898:0x00155348:	icall	
000898:0x00155358:	jump	0x155300
000900:0x00155360:	movem	#return, elements
000900:0x00155370:	release	elements
000900:0x00155378:	rts
000900:0x00155380:	release	elements
000900:0x00155388:	rts
map<int,PPERequestParamDataBase>::ReplaceKey()
000905:0x00155390:	icall	
000905:0x001553a0:	cmpi	#return, _i0
000905:0x001553b0:	beq	0x155400
000907:0x001553b8:	icall	
000907:0x001553c8:	icall	
000908:0x001553d8:	icall	
000909:0x001553e8:	imove	#return, 0x000001
000909:0x001553f8:	rts
000911:0x00155400:	imove	#return, 0x000000
000911:0x00155410:	rts
000911:0x00155418:	rts
map<int,PPERequestParamDataBase>::GetKeyByValue()
000917:0x00155470:	imove	i, 0x000000
000917:0x00155480:	jump	0x1554a0
000917:0x00155488:	move	@m00, i
000917:0x00155498:	inc	i
000917:0x001554a0:	ncalli	map<int,PPERequestParamDataBase>.Count()
000917:0x001554a8:	cmpi	i, #return
000917:0x001554b8:	bge	0x155528
000919:0x001554c0:	icall	
000919:0x001554d0:	movec	@c00, #return
000919:0x001554e0:	cmpmc	@c00, value
000919:0x001554f0:	bne	0x155520
000921:0x001554f8:	icall	
000921:0x00155508:	move	ret, #return
000922:0x00155518:	jump	0x155528
000922:0x00155520:	jump	0x155488
000926:0x00155528:	move	#return, ret
000926:0x00155538:	rts
000926:0x00155540:	rts
map<int,PPERequestParamDataBase>::GetKeyByValueChecked()
000931:0x00155570:	imove	i, 0x000000
000931:0x00155580:	jump	0x1555a0
000931:0x00155588:	move	@m00, i
000931:0x00155598:	inc	i
000931:0x001555a0:	ncalli	map<int,PPERequestParamDataBase>.Count()
000931:0x001555a8:	cmpi	i, #return
000931:0x001555b8:	bge	0x155648
000933:0x001555c0:	icall	
000933:0x001555d0:	movec	@c00, #return
000933:0x001555e0:	cmpmc	@c00, value
000933:0x001555f0:	bne	0x155640
000935:0x001555f8:	icall	
000935:0x00155608:	move	key, #return
000936:0x00155618:	imove	#return, 0x000001
000936:0x00155628:	move	key, key
000936:0x00155638:	rts
000936:0x00155640:	jump	0x155588
000939:0x00155648:	imove	#return, 0x000000
000939:0x00155658:	move	key, key
000939:0x00155668:	rts
000939:0x00155670:	move	key, key
000939:0x00155680:	rts
map<int,@PPERequestParamDataBase>::GetKeyArray()
000885:0x001559d0:	new	keys, array<int>
000886:0x001559f0:	imove	i, 0x000000
000886:0x00155a00:	jump	0x155a20
000886:0x00155a08:	move	@m00, i
000886:0x00155a18:	inc	i
000886:0x00155a20:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000886:0x00155a28:	cmpi	i, #return
000886:0x00155a38:	bge	0x155a68
000888:0x00155a40:	icall	
000888:0x00155a50:	icall	
000888:0x00155a60:	jump	0x155a08
000890:0x00155a68:	movem	#return, keys
000890:0x00155a78:	release	keys
000890:0x00155a80:	rts
000890:0x00155a88:	release	keys
000890:0x00155a90:	rts
map<int,@PPERequestParamDataBase>::GetValueArray()
000895:0x00155ae8:	new	elements, array<PPERequestParamDataBase>
000896:0x00155b08:	imove	i, 0x000000
000896:0x00155b18:	jump	0x155b38
000896:0x00155b20:	move	@m00, i
000896:0x00155b30:	inc	i
000896:0x00155b38:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000896:0x00155b40:	cmpi	i, #return
000896:0x00155b50:	bge	0x155b80
000898:0x00155b58:	icall	
000898:0x00155b68:	icall	
000898:0x00155b78:	jump	0x155b20
000900:0x00155b80:	movem	#return, elements
000900:0x00155b90:	release	elements
000900:0x00155b98:	rts
000900:0x00155ba0:	release	elements
000900:0x00155ba8:	rts
map<int,@PPERequestParamDataBase>::ReplaceKey()
000905:0x00155bb0:	icall	
000905:0x00155bc0:	cmpi	#return, _i0
000905:0x00155bd0:	beq	0x155c20
000907:0x00155bd8:	icall	
000907:0x00155be8:	icall	
000908:0x00155bf8:	icall	
000909:0x00155c08:	imove	#return, 0x000001
000909:0x00155c18:	rts
000911:0x00155c20:	imove	#return, 0x000000
000911:0x00155c30:	rts
000911:0x00155c38:	rts
map<int,@PPERequestParamDataBase>::GetKeyByValue()
000917:0x00155c90:	imove	i, 0x000000
000917:0x00155ca0:	jump	0x155cc0
000917:0x00155ca8:	move	@m00, i
000917:0x00155cb8:	inc	i
000917:0x00155cc0:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000917:0x00155cc8:	cmpi	i, #return
000917:0x00155cd8:	bge	0x155d48
000919:0x00155ce0:	icall	
000919:0x00155cf0:	movec	@c00, #return
000919:0x00155d00:	cmpmc	@c00, value
000919:0x00155d10:	bne	0x155d40
000921:0x00155d18:	icall	
000921:0x00155d28:	move	ret, #return
000922:0x00155d38:	jump	0x155d48
000922:0x00155d40:	jump	0x155ca8
000926:0x00155d48:	move	#return, ret
000926:0x00155d58:	rts
000926:0x00155d60:	rts
map<int,@PPERequestParamDataBase>::GetKeyByValueChecked()
000931:0x00155d90:	imove	i, 0x000000
000931:0x00155da0:	jump	0x155dc0
000931:0x00155da8:	move	@m00, i
000931:0x00155db8:	inc	i
000931:0x00155dc0:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000931:0x00155dc8:	cmpi	i, #return
000931:0x00155dd8:	bge	0x155e68
000933:0x00155de0:	icall	
000933:0x00155df0:	movec	@c00, #return
000933:0x00155e00:	cmpmc	@c00, value
000933:0x00155e10:	bne	0x155e60
000935:0x00155e18:	icall	
000935:0x00155e28:	move	key, #return
000936:0x00155e38:	imove	#return, 0x000001
000936:0x00155e48:	move	key, key
000936:0x00155e58:	rts
000936:0x00155e60:	jump	0x155da8
000939:0x00155e68:	imove	#return, 0x000000
000939:0x00155e78:	move	key, key
000939:0x00155e88:	rts
000939:0x00155e90:	move	key, key
000939:0x00155ea0:	rts
array<CallQueueContext>::InsertAll()
000427:0x001566d8:	imove	i, 0x000000
000427:0x001566e8:	jump	0x156708
000427:0x001566f0:	move	@m00, i
000427:0x00156700:	inc	i
000427:0x00156708:	ncalli	array<CallQueueContext>.Count()
000427:0x00156710:	cmpi	i, #return
000427:0x00156720:	bge	0x156750
000429:0x00156728:	icall	
000429:0x00156738:	icall	
000429:0x00156748:	jump	0x1566f0
000429:0x00156750:	rts
array<CallQueueContext>::RemoveItem()
000479:0x00156780:	movefm	@c00, value
000479:0x00156790:	icall	
000479:0x001567a0:	move	remove_index, #return
000481:0x001567b0:	cmpi	remove_index, _i0
000481:0x001567c0:	blt	0x1567d8
000483:0x001567c8:	ncalli	array<CallQueueContext>.RemoveOrdered(remove_index)
000483:0x001567d8:	rts
array<CallQueueContext>::RemoveItemUnOrdered()
000489:0x00156808:	movefm	@c00, value
000489:0x00156818:	icall	
000489:0x00156828:	move	remove_index, #return
000491:0x00156838:	cmpi	remove_index, _i0
000491:0x00156848:	blt	0x156860
000493:0x00156850:	ncalli	array<CallQueueContext>.Remove(remove_index)
000493:0x00156860:	rts
array<CallQueueContext>::IsValidIndex()
000499:0x00156868:	cmpi	index, _i-1
000499:0x00156878:	ble	0x1568b8
000499:0x00156880:	ncalli	array<CallQueueContext>.Count()
000499:0x00156888:	cmpi	index, #return
000499:0x00156898:	bge	0x1568b8
000499:0x001568a0:	imove	#return, 0x000001
000499:0x001568b0:	jump	0x1568c8
000499:0x001568b8:	imove	#return, 0x000000
000499:0x001568c8:	rts
000499:0x001568d0:	rts
array<CallQueueContext>::Debug()
000525:0x00156928:	ncalli	array<CallQueueContext>.Count()
000525:0x00156930:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00156960:	icall	Print(#return)
000526:0x00156970:	imove	i, 0x000000
000526:0x00156980:	jump	0x1569a0
000526:0x00156988:	move	@m00, i
000526:0x00156998:	inc	i
000526:0x001569a0:	ncalli	array<CallQueueContext>.Count()
000526:0x001569a8:	cmpi	i, #return
000526:0x001569b8:	bge	0x156a30
000528:0x001569c0:	icall	
000528:0x001569d0:	movetm	item, #return
000529:0x001569e0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00156a10:	icall	Print(#return)
000529:0x00156a20:	release	item
000529:0x00156a28:	jump	0x156988
000529:0x00156a30:	rts
array<CallQueueContext>::GetRandomIndex()
000544:0x00156a38:	ncalli	array<CallQueueContext>.Count()
000544:0x00156a40:	move	@m00, #return
000544:0x00156a50:	cmpi	@m00, _i0
000544:0x00156a60:	ble	0x156a98
000546:0x00156a68:	ncalli	array<CallQueueContext>.Count()
000546:0x00156a70:	icall	RandomInt(_i0, #return)
000546:0x00156a80:	move	#return, #return
000546:0x00156a90:	rts
000549:0x00156a98:	imove	#return, 0xffffffff
000549:0x00156aa8:	rts
000549:0x00156ab0:	rts
array<CallQueueContext>::GetRandomElement()
000563:0x00156ab8:	call	
000563:0x00156ac8:	icall	
000563:0x00156ad8:	movetm	#return, #return
000563:0x00156ae8:	rts
000563:0x00156af0:	rts
array<CallQueueContext>::SwapItems()
000568:0x00156b20:	icall	
000568:0x00156b30:	movetm	item1, #return
000569:0x00156b40:	icall	
000569:0x00156b50:	icall	
000570:0x00156b60:	movefm	@c00, item1
000570:0x00156b70:	icall	
000570:0x00156b80:	release	item1
000570:0x00156b88:	rts
array<CallQueueContext>::InsertArray()
000575:0x00156be0:	imove	i, 0x000000
000575:0x00156bf0:	jump	0x156c10
000575:0x00156bf8:	move	@m00, i
000575:0x00156c08:	inc	i
000575:0x00156c10:	ncalli	array<CallQueueContext>.Count()
000575:0x00156c18:	cmpi	i, #return
000575:0x00156c28:	bge	0x156c80
000577:0x00156c30:	icall	
000577:0x00156c40:	movetm	item, #return
000578:0x00156c50:	movefm	@c00, item
000578:0x00156c60:	icall	
000578:0x00156c70:	release	item
000578:0x00156c78:	jump	0x156bf8
000578:0x00156c80:	rts
array<CallQueueContext>::Invert()
000584:0x00156d00:	imove	left, 0x000000
000585:0x00156d10:	ncalli	array<CallQueueContext>.Count()
000585:0x00156d18:	subi	right, #return, _i1
000586:0x00156d28:	cmpi	right, _i0
000586:0x00156d38:	ble	0x156df8
000588:0x00156d40:	cmpi	left, right
000588:0x00156d50:	bge	0x156df8
000590:0x00156d58:	icall	
000590:0x00156d68:	movetm	temp, #return
000591:0x00156d78:	move	@m00, left
000591:0x00156d88:	inc	left
000591:0x00156d90:	icall	
000591:0x00156da0:	icall	
000592:0x00156db0:	move	@m00, right
000592:0x00156dc0:	dec	right
000592:0x00156dc8:	movefm	@c00, temp
000592:0x00156dd8:	icall	
000592:0x00156de8:	release	temp
000592:0x00156df0:	jump	0x156d40
000592:0x00156df8:	rts
array<CallQueueContext>::MoveIndex()
000612:0x00156e50:	ncalli	array<CallQueueContext>.Count()
000612:0x00156e58:	move	count, #return
000613:0x00156e68:	move	new_index, curr_index
000615:0x00156e78:	cmpi	move_number, _i0
000615:0x00156e88:	ble	0x156eb0
000617:0x00156e90:	addi	@m00, curr_index, move_number
000617:0x00156ea0:	move	new_index, @m00
000620:0x00156eb0:	cmpi	move_number, _i0
000620:0x00156ec0:	bge	0x156f68
000622:0x00156ec8:	subi	@m00, curr_index, move_number
000622:0x00156ed8:	move	new_index, @m00
000624:0x00156ee8:	cmpi	new_index, _i0
000624:0x00156ef8:	bge	0x156f68
000626:0x00156f00:	subi	@m01, _i0, count
000626:0x00156f10:	cmpi	new_index, @m01
000626:0x00156f20:	bgt	0x156f48
000628:0x00156f28:	modi	@m00, new_index, count
000628:0x00156f38:	move	new_index, @m00
000631:0x00156f48:	addi	@m00, new_index, count
000631:0x00156f58:	move	new_index, @m00
000635:0x00156f68:	cmpi	new_index, count
000635:0x00156f78:	blt	0x156fa0
000637:0x00156f80:	modi	@m00, new_index, count
000637:0x00156f90:	move	new_index, @m00
000641:0x00156fa0:	move	#return, new_index
000641:0x00156fb0:	rts
000641:0x00156fb8:	rts
array<CallQueueContext>::ShuffleArray()
000646:0x00156fe8:	imove	i, 0x000000
000646:0x00156ff8:	jump	0x157018
000646:0x00157000:	move	@m00, i
000646:0x00157010:	inc	i
000646:0x00157018:	ncalli	array<CallQueueContext>.Count()
000646:0x00157020:	cmpi	i, #return
000646:0x00157030:	bge	0x157068
000648:0x00157038:	call	
000648:0x00157048:	call	
000648:0x00157060:	jump	0x157000
000648:0x00157068:	rts
array<CallQueueContext>::DifferentAtPosition()
000666:0x00157098:	ncalli	array<CallQueueContext>.Count()
000666:0x001570a0:	move	@m00, #return
000666:0x001570b0:	push	#return
000666:0x001570b8:	ncalli	array<CallQueueContext>.Count()
000666:0x001570c0:	move	@m02, #return
000666:0x001570d0:	pop	#return
000666:0x001570d8:	cmpi	@m00, @m02
000666:0x001570e8:	beq	0x157118
000668:0x001570f0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00157100:	imove	#return, 0xffffffff
000669:0x00157110:	rts
000672:0x00157118:	imove	i, 0x000000
000672:0x00157128:	jump	0x157138
000672:0x00157130:	inc	i
000672:0x00157138:	ncalli	array<CallQueueContext>.Count()
000672:0x00157140:	cmpi	i, #return
000672:0x00157150:	bge	0x1571e0
000674:0x00157158:	icall	
000674:0x00157168:	movec	@c00, #return
000674:0x00157178:	pushc	#return
000674:0x00157180:	icall	
000674:0x00157190:	movec	@c02, #return
000674:0x001571a0:	popc	#return
000674:0x001571a8:	cmpc	@c00, @c02
000674:0x001571b8:	beq	0x1571d8
000676:0x001571c0:	move	#return, i
000676:0x001571d0:	rts
000676:0x001571d8:	jump	0x157130
000680:0x001571e0:	imove	#return, 0xffffffff
000680:0x001571f0:	rts
000680:0x001571f8:	rts
array<@CallQueueContext>::InsertAll()
000427:0x00157610:	imove	i, 0x000000
000427:0x00157620:	jump	0x157640
000427:0x00157628:	move	@m00, i
000427:0x00157638:	inc	i
000427:0x00157640:	ncalli	array<CallQueueContext>.Count()
000427:0x00157648:	cmpi	i, #return
000427:0x00157658:	bge	0x157688
000429:0x00157660:	icall	
000429:0x00157670:	icall	
000429:0x00157680:	jump	0x157628
000429:0x00157688:	rts
array<@CallQueueContext>::RemoveItem()
000479:0x001576b8:	movefm	@c00, value
000479:0x001576c8:	icall	
000479:0x001576d8:	move	remove_index, #return
000481:0x001576e8:	cmpi	remove_index, _i0
000481:0x001576f8:	blt	0x157710
000483:0x00157700:	ncalli	array<@CallQueueContext>.RemoveOrdered(remove_index)
000483:0x00157710:	rts
array<@CallQueueContext>::RemoveItemUnOrdered()
000489:0x00157740:	movefm	@c00, value
000489:0x00157750:	icall	
000489:0x00157760:	move	remove_index, #return
000491:0x00157770:	cmpi	remove_index, _i0
000491:0x00157780:	blt	0x157798
000493:0x00157788:	ncalli	array<@CallQueueContext>.Remove(remove_index)
000493:0x00157798:	rts
array<@CallQueueContext>::IsValidIndex()
000499:0x001577a0:	cmpi	index, _i-1
000499:0x001577b0:	ble	0x1577f0
000499:0x001577b8:	ncalli	array<@CallQueueContext>.Count()
000499:0x001577c0:	cmpi	index, #return
000499:0x001577d0:	bge	0x1577f0
000499:0x001577d8:	imove	#return, 0x000001
000499:0x001577e8:	jump	0x157800
000499:0x001577f0:	imove	#return, 0x000000
000499:0x00157800:	rts
000499:0x00157808:	rts
array<@CallQueueContext>::Debug()
000525:0x00157860:	ncalli	array<@CallQueueContext>.Count()
000525:0x00157868:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00157898:	icall	Print(#return)
000526:0x001578a8:	imove	i, 0x000000
000526:0x001578b8:	jump	0x1578d8
000526:0x001578c0:	move	@m00, i
000526:0x001578d0:	inc	i
000526:0x001578d8:	ncalli	array<@CallQueueContext>.Count()
000526:0x001578e0:	cmpi	i, #return
000526:0x001578f0:	bge	0x157968
000528:0x001578f8:	icall	
000528:0x00157908:	movetm	item, #return
000529:0x00157918:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00157948:	icall	Print(#return)
000529:0x00157958:	release	item
000529:0x00157960:	jump	0x1578c0
000529:0x00157968:	rts
array<@CallQueueContext>::GetRandomIndex()
000544:0x00157970:	ncalli	array<@CallQueueContext>.Count()
000544:0x00157978:	move	@m00, #return
000544:0x00157988:	cmpi	@m00, _i0
000544:0x00157998:	ble	0x1579d0
000546:0x001579a0:	ncalli	array<@CallQueueContext>.Count()
000546:0x001579a8:	icall	RandomInt(_i0, #return)
000546:0x001579b8:	move	#return, #return
000546:0x001579c8:	rts
000549:0x001579d0:	imove	#return, 0xffffffff
000549:0x001579e0:	rts
000549:0x001579e8:	rts
array<@CallQueueContext>::GetRandomElement()
000563:0x001579f0:	call	
000563:0x00157a00:	icall	
000563:0x00157a10:	movetm	#return, #return
000563:0x00157a20:	rts
000563:0x00157a28:	rts
array<@CallQueueContext>::SwapItems()
000568:0x00157a58:	icall	
000568:0x00157a68:	movetm	item1, #return
000569:0x00157a78:	icall	
000569:0x00157a88:	icall	
000570:0x00157a98:	movefm	@c00, item1
000570:0x00157aa8:	icall	
000570:0x00157ab8:	release	item1
000570:0x00157ac0:	rts
array<@CallQueueContext>::InsertArray()
000575:0x00157b18:	imove	i, 0x000000
000575:0x00157b28:	jump	0x157b48
000575:0x00157b30:	move	@m00, i
000575:0x00157b40:	inc	i
000575:0x00157b48:	ncalli	array<CallQueueContext>.Count()
000575:0x00157b50:	cmpi	i, #return
000575:0x00157b60:	bge	0x157bb8
000577:0x00157b68:	icall	
000577:0x00157b78:	movetm	item, #return
000578:0x00157b88:	movefm	@c00, item
000578:0x00157b98:	icall	
000578:0x00157ba8:	release	item
000578:0x00157bb0:	jump	0x157b30
000578:0x00157bb8:	rts
array<@CallQueueContext>::Invert()
000584:0x00157c38:	imove	left, 0x000000
000585:0x00157c48:	ncalli	array<@CallQueueContext>.Count()
000585:0x00157c50:	subi	right, #return, _i1
000586:0x00157c60:	cmpi	right, _i0
000586:0x00157c70:	ble	0x157d30
000588:0x00157c78:	cmpi	left, right
000588:0x00157c88:	bge	0x157d30
000590:0x00157c90:	icall	
000590:0x00157ca0:	movetm	temp, #return
000591:0x00157cb0:	move	@m00, left
000591:0x00157cc0:	inc	left
000591:0x00157cc8:	icall	
000591:0x00157cd8:	icall	
000592:0x00157ce8:	move	@m00, right
000592:0x00157cf8:	dec	right
000592:0x00157d00:	movefm	@c00, temp
000592:0x00157d10:	icall	
000592:0x00157d20:	release	temp
000592:0x00157d28:	jump	0x157c78
000592:0x00157d30:	rts
array<@CallQueueContext>::MoveIndex()
000612:0x00157d88:	ncalli	array<@CallQueueContext>.Count()
000612:0x00157d90:	move	count, #return
000613:0x00157da0:	move	new_index, curr_index
000615:0x00157db0:	cmpi	move_number, _i0
000615:0x00157dc0:	ble	0x157de8
000617:0x00157dc8:	addi	@m00, curr_index, move_number
000617:0x00157dd8:	move	new_index, @m00
000620:0x00157de8:	cmpi	move_number, _i0
000620:0x00157df8:	bge	0x157ea0
000622:0x00157e00:	subi	@m00, curr_index, move_number
000622:0x00157e10:	move	new_index, @m00
000624:0x00157e20:	cmpi	new_index, _i0
000624:0x00157e30:	bge	0x157ea0
000626:0x00157e38:	subi	@m01, _i0, count
000626:0x00157e48:	cmpi	new_index, @m01
000626:0x00157e58:	bgt	0x157e80
000628:0x00157e60:	modi	@m00, new_index, count
000628:0x00157e70:	move	new_index, @m00
000631:0x00157e80:	addi	@m00, new_index, count
000631:0x00157e90:	move	new_index, @m00
000635:0x00157ea0:	cmpi	new_index, count
000635:0x00157eb0:	blt	0x157ed8
000637:0x00157eb8:	modi	@m00, new_index, count
000637:0x00157ec8:	move	new_index, @m00
000641:0x00157ed8:	move	#return, new_index
000641:0x00157ee8:	rts
000641:0x00157ef0:	rts
array<@CallQueueContext>::ShuffleArray()
000646:0x00157f20:	imove	i, 0x000000
000646:0x00157f30:	jump	0x157f50
000646:0x00157f38:	move	@m00, i
000646:0x00157f48:	inc	i
000646:0x00157f50:	ncalli	array<@CallQueueContext>.Count()
000646:0x00157f58:	cmpi	i, #return
000646:0x00157f68:	bge	0x157fa0
000648:0x00157f70:	call	
000648:0x00157f80:	call	
000648:0x00157f98:	jump	0x157f38
000648:0x00157fa0:	rts
array<@CallQueueContext>::DifferentAtPosition()
000666:0x00157fd0:	ncalli	array<@CallQueueContext>.Count()
000666:0x00157fd8:	move	@m00, #return
000666:0x00157fe8:	ncalli	array<CallQueueContext>.Count()
000666:0x00157ff0:	cmpi	@m00, #return
000666:0x00158000:	beq	0x158030
000668:0x00158008:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00158018:	imove	#return, 0xffffffff
000669:0x00158028:	rts
000672:0x00158030:	imove	i, 0x000000
000672:0x00158040:	jump	0x158050
000672:0x00158048:	inc	i
000672:0x00158050:	ncalli	array<CallQueueContext>.Count()
000672:0x00158058:	cmpi	i, #return
000672:0x00158068:	bge	0x1580d8
000674:0x00158070:	icall	
000674:0x00158080:	movec	@c00, #return
000674:0x00158090:	icall	
000674:0x001580a0:	cmpc	@c00, #return
000674:0x001580b0:	beq	0x1580d0
000676:0x001580b8:	move	#return, i
000676:0x001580c8:	rts
000676:0x001580d0:	jump	0x158048
000680:0x001580d8:	imove	#return, 0xffffffff
000680:0x001580e8:	rts
000680:0x001580f0:	rts
array<TimerBase>::InsertAll()
000427:0x001586e8:	imove	i, 0x000000
000427:0x001586f8:	jump	0x158718
000427:0x00158700:	move	@m00, i
000427:0x00158710:	inc	i
000427:0x00158718:	ncalli	array<TimerBase>.Count()
000427:0x00158720:	cmpi	i, #return
000427:0x00158730:	bge	0x158760
000429:0x00158738:	icall	
000429:0x00158748:	icall	
000429:0x00158758:	jump	0x158700
000429:0x00158760:	rts
array<TimerBase>::RemoveItem()
000479:0x00158790:	movefm	@c00, value
000479:0x001587a0:	icall	
000479:0x001587b0:	move	remove_index, #return
000481:0x001587c0:	cmpi	remove_index, _i0
000481:0x001587d0:	blt	0x1587e8
000483:0x001587d8:	ncalli	array<TimerBase>.RemoveOrdered(remove_index)
000483:0x001587e8:	rts
array<TimerBase>::RemoveItemUnOrdered()
000489:0x00158818:	movefm	@c00, value
000489:0x00158828:	icall	
000489:0x00158838:	move	remove_index, #return
000491:0x00158848:	cmpi	remove_index, _i0
000491:0x00158858:	blt	0x158870
000493:0x00158860:	ncalli	array<TimerBase>.Remove(remove_index)
000493:0x00158870:	rts
array<TimerBase>::IsValidIndex()
000499:0x00158878:	cmpi	index, _i-1
000499:0x00158888:	ble	0x1588c8
000499:0x00158890:	ncalli	array<TimerBase>.Count()
000499:0x00158898:	cmpi	index, #return
000499:0x001588a8:	bge	0x1588c8
000499:0x001588b0:	imove	#return, 0x000001
000499:0x001588c0:	jump	0x1588d8
000499:0x001588c8:	imove	#return, 0x000000
000499:0x001588d8:	rts
000499:0x001588e0:	rts
array<TimerBase>::Debug()
000525:0x00158938:	ncalli	array<TimerBase>.Count()
000525:0x00158940:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00158970:	icall	Print(#return)
000526:0x00158980:	imove	i, 0x000000
000526:0x00158990:	jump	0x1589b0
000526:0x00158998:	move	@m00, i
000526:0x001589a8:	inc	i
000526:0x001589b0:	ncalli	array<TimerBase>.Count()
000526:0x001589b8:	cmpi	i, #return
000526:0x001589c8:	bge	0x158a40
000528:0x001589d0:	icall	
000528:0x001589e0:	movetm	item, #return
000529:0x001589f0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00158a20:	icall	Print(#return)
000529:0x00158a30:	release	item
000529:0x00158a38:	jump	0x158998
000529:0x00158a40:	rts
array<TimerBase>::GetRandomIndex()
000544:0x00158a48:	ncalli	array<TimerBase>.Count()
000544:0x00158a50:	move	@m00, #return
000544:0x00158a60:	cmpi	@m00, _i0
000544:0x00158a70:	ble	0x158aa8
000546:0x00158a78:	ncalli	array<TimerBase>.Count()
000546:0x00158a80:	icall	RandomInt(_i0, #return)
000546:0x00158a90:	move	#return, #return
000546:0x00158aa0:	rts
000549:0x00158aa8:	imove	#return, 0xffffffff
000549:0x00158ab8:	rts
000549:0x00158ac0:	rts
array<TimerBase>::GetRandomElement()
000563:0x00158ac8:	call	
000563:0x00158ad8:	icall	
000563:0x00158ae8:	movetm	#return, #return
000563:0x00158af8:	rts
000563:0x00158b00:	rts
array<TimerBase>::SwapItems()
000568:0x00158b30:	icall	
000568:0x00158b40:	movetm	item1, #return
000569:0x00158b50:	icall	
000569:0x00158b60:	icall	
000570:0x00158b70:	movefm	@c00, item1
000570:0x00158b80:	icall	
000570:0x00158b90:	release	item1
000570:0x00158b98:	rts
array<TimerBase>::InsertArray()
000575:0x00158bf0:	imove	i, 0x000000
000575:0x00158c00:	jump	0x158c20
000575:0x00158c08:	move	@m00, i
000575:0x00158c18:	inc	i
000575:0x00158c20:	ncalli	array<TimerBase>.Count()
000575:0x00158c28:	cmpi	i, #return
000575:0x00158c38:	bge	0x158c90
000577:0x00158c40:	icall	
000577:0x00158c50:	movetm	item, #return
000578:0x00158c60:	movefm	@c00, item
000578:0x00158c70:	icall	
000578:0x00158c80:	release	item
000578:0x00158c88:	jump	0x158c08
000578:0x00158c90:	rts
array<TimerBase>::Invert()
000584:0x00158d10:	imove	left, 0x000000
000585:0x00158d20:	ncalli	array<TimerBase>.Count()
000585:0x00158d28:	subi	right, #return, _i1
000586:0x00158d38:	cmpi	right, _i0
000586:0x00158d48:	ble	0x158e08
000588:0x00158d50:	cmpi	left, right
000588:0x00158d60:	bge	0x158e08
000590:0x00158d68:	icall	
000590:0x00158d78:	movetm	temp, #return
000591:0x00158d88:	move	@m00, left
000591:0x00158d98:	inc	left
000591:0x00158da0:	icall	
000591:0x00158db0:	icall	
000592:0x00158dc0:	move	@m00, right
000592:0x00158dd0:	dec	right
000592:0x00158dd8:	movefm	@c00, temp
000592:0x00158de8:	icall	
000592:0x00158df8:	release	temp
000592:0x00158e00:	jump	0x158d50
000592:0x00158e08:	rts
array<TimerBase>::MoveIndex()
000612:0x00158e60:	ncalli	array<TimerBase>.Count()
000612:0x00158e68:	move	count, #return
000613:0x00158e78:	move	new_index, curr_index
000615:0x00158e88:	cmpi	move_number, _i0
000615:0x00158e98:	ble	0x158ec0
000617:0x00158ea0:	addi	@m00, curr_index, move_number
000617:0x00158eb0:	move	new_index, @m00
000620:0x00158ec0:	cmpi	move_number, _i0
000620:0x00158ed0:	bge	0x158f78
000622:0x00158ed8:	subi	@m00, curr_index, move_number
000622:0x00158ee8:	move	new_index, @m00
000624:0x00158ef8:	cmpi	new_index, _i0
000624:0x00158f08:	bge	0x158f78
000626:0x00158f10:	subi	@m01, _i0, count
000626:0x00158f20:	cmpi	new_index, @m01
000626:0x00158f30:	bgt	0x158f58
000628:0x00158f38:	modi	@m00, new_index, count
000628:0x00158f48:	move	new_index, @m00
000631:0x00158f58:	addi	@m00, new_index, count
000631:0x00158f68:	move	new_index, @m00
000635:0x00158f78:	cmpi	new_index, count
000635:0x00158f88:	blt	0x158fb0
000637:0x00158f90:	modi	@m00, new_index, count
000637:0x00158fa0:	move	new_index, @m00
000641:0x00158fb0:	move	#return, new_index
000641:0x00158fc0:	rts
000641:0x00158fc8:	rts
array<TimerBase>::ShuffleArray()
000646:0x00158ff8:	imove	i, 0x000000
000646:0x00159008:	jump	0x159028
000646:0x00159010:	move	@m00, i
000646:0x00159020:	inc	i
000646:0x00159028:	ncalli	array<TimerBase>.Count()
000646:0x00159030:	cmpi	i, #return
000646:0x00159040:	bge	0x159078
000648:0x00159048:	call	
000648:0x00159058:	call	
000648:0x00159070:	jump	0x159010
000648:0x00159078:	rts
array<TimerBase>::DifferentAtPosition()
000666:0x001590a8:	ncalli	array<TimerBase>.Count()
000666:0x001590b0:	move	@m00, #return
000666:0x001590c0:	push	#return
000666:0x001590c8:	ncalli	array<TimerBase>.Count()
000666:0x001590d0:	move	@m02, #return
000666:0x001590e0:	pop	#return
000666:0x001590e8:	cmpi	@m00, @m02
000666:0x001590f8:	beq	0x159128
000668:0x00159100:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00159110:	imove	#return, 0xffffffff
000669:0x00159120:	rts
000672:0x00159128:	imove	i, 0x000000
000672:0x00159138:	jump	0x159148
000672:0x00159140:	inc	i
000672:0x00159148:	ncalli	array<TimerBase>.Count()
000672:0x00159150:	cmpi	i, #return
000672:0x00159160:	bge	0x1591f0
000674:0x00159168:	icall	
000674:0x00159178:	movec	@c00, #return
000674:0x00159188:	pushc	#return
000674:0x00159190:	icall	
000674:0x001591a0:	movec	@c02, #return
000674:0x001591b0:	popc	#return
000674:0x001591b8:	cmpc	@c00, @c02
000674:0x001591c8:	beq	0x1591e8
000676:0x001591d0:	move	#return, i
000676:0x001591e0:	rts
000676:0x001591e8:	jump	0x159140
000680:0x001591f0:	imove	#return, 0xffffffff
000680:0x00159200:	rts
000680:0x00159208:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::InsertAll()
000427:0x00159c58:	imove	i, 0x000000
000427:0x00159c68:	jump	0x159c88
000427:0x00159c70:	move	@m00, i
000427:0x00159c80:	inc	i
000427:0x00159c88:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000427:0x00159c90:	cmpi	i, #return
000427:0x00159ca0:	bge	0x159cd0
000429:0x00159ca8:	icall	
000429:0x00159cb8:	icall	
000429:0x00159cc8:	jump	0x159c70
000429:0x00159cd0:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::RemoveItem()
000479:0x00159d00:	movefm	@c00, value
000479:0x00159d10:	icall	
000479:0x00159d20:	move	remove_index, #return
000481:0x00159d30:	cmpi	remove_index, _i0
000481:0x00159d40:	blt	0x159d58
000483:0x00159d48:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.RemoveOrdered(remove_index)
000483:0x00159d58:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::RemoveItemUnOrdered()
000489:0x00159d88:	movefm	@c00, value
000489:0x00159d98:	icall	
000489:0x00159da8:	move	remove_index, #return
000491:0x00159db8:	cmpi	remove_index, _i0
000491:0x00159dc8:	blt	0x159de0
000493:0x00159dd0:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Remove(remove_index)
000493:0x00159de0:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::IsValidIndex()
000499:0x00159de8:	cmpi	index, _i-1
000499:0x00159df8:	ble	0x159e38
000499:0x00159e00:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000499:0x00159e08:	cmpi	index, #return
000499:0x00159e18:	bge	0x159e38
000499:0x00159e20:	imove	#return, 0x000001
000499:0x00159e30:	jump	0x159e48
000499:0x00159e38:	imove	#return, 0x000000
000499:0x00159e48:	rts
000499:0x00159e50:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::Debug()
000525:0x00159ea8:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000525:0x00159eb0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00159ee0:	icall	Print(#return)
000526:0x00159ef0:	imove	i, 0x000000
000526:0x00159f00:	jump	0x159f20
000526:0x00159f08:	move	@m00, i
000526:0x00159f18:	inc	i
000526:0x00159f20:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000526:0x00159f28:	cmpi	i, #return
000526:0x00159f38:	bge	0x159fb0
000528:0x00159f40:	icall	
000528:0x00159f50:	movetm	item, #return
000529:0x00159f60:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00159f90:	icall	Print(#return)
000529:0x00159fa0:	release	item
000529:0x00159fa8:	jump	0x159f08
000529:0x00159fb0:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::GetRandomIndex()
000544:0x00159fb8:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000544:0x00159fc0:	move	@m00, #return
000544:0x00159fd0:	cmpi	@m00, _i0
000544:0x00159fe0:	ble	0x15a018
000546:0x00159fe8:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000546:0x00159ff0:	icall	RandomInt(_i0, #return)
000546:0x0015a000:	move	#return, #return
000546:0x0015a010:	rts
000549:0x0015a018:	imove	#return, 0xffffffff
000549:0x0015a028:	rts
000549:0x0015a030:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::GetRandomElement()
000563:0x0015a038:	call	
000563:0x0015a048:	icall	
000563:0x0015a058:	movetm	#return, #return
000563:0x0015a068:	rts
000563:0x0015a070:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::SwapItems()
000568:0x0015a0a0:	icall	
000568:0x0015a0b0:	movetm	item1, #return
000569:0x0015a0c0:	icall	
000569:0x0015a0d0:	icall	
000570:0x0015a0e0:	movefm	@c00, item1
000570:0x0015a0f0:	icall	
000570:0x0015a100:	release	item1
000570:0x0015a108:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::InsertArray()
000575:0x0015a160:	imove	i, 0x000000
000575:0x0015a170:	jump	0x15a190
000575:0x0015a178:	move	@m00, i
000575:0x0015a188:	inc	i
000575:0x0015a190:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000575:0x0015a198:	cmpi	i, #return
000575:0x0015a1a8:	bge	0x15a200
000577:0x0015a1b0:	icall	
000577:0x0015a1c0:	movetm	item, #return
000578:0x0015a1d0:	movefm	@c00, item
000578:0x0015a1e0:	icall	
000578:0x0015a1f0:	release	item
000578:0x0015a1f8:	jump	0x15a178
000578:0x0015a200:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::Invert()
000584:0x0015a280:	imove	left, 0x000000
000585:0x0015a290:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000585:0x0015a298:	subi	right, #return, _i1
000586:0x0015a2a8:	cmpi	right, _i0
000586:0x0015a2b8:	ble	0x15a378
000588:0x0015a2c0:	cmpi	left, right
000588:0x0015a2d0:	bge	0x15a378
000590:0x0015a2d8:	icall	
000590:0x0015a2e8:	movetm	temp, #return
000591:0x0015a2f8:	move	@m00, left
000591:0x0015a308:	inc	left
000591:0x0015a310:	icall	
000591:0x0015a320:	icall	
000592:0x0015a330:	move	@m00, right
000592:0x0015a340:	dec	right
000592:0x0015a348:	movefm	@c00, temp
000592:0x0015a358:	icall	
000592:0x0015a368:	release	temp
000592:0x0015a370:	jump	0x15a2c0
000592:0x0015a378:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::MoveIndex()
000612:0x0015a3d0:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000612:0x0015a3d8:	move	count, #return
000613:0x0015a3e8:	move	new_index, curr_index
000615:0x0015a3f8:	cmpi	move_number, _i0
000615:0x0015a408:	ble	0x15a430
000617:0x0015a410:	addi	@m00, curr_index, move_number
000617:0x0015a420:	move	new_index, @m00
000620:0x0015a430:	cmpi	move_number, _i0
000620:0x0015a440:	bge	0x15a4e8
000622:0x0015a448:	subi	@m00, curr_index, move_number
000622:0x0015a458:	move	new_index, @m00
000624:0x0015a468:	cmpi	new_index, _i0
000624:0x0015a478:	bge	0x15a4e8
000626:0x0015a480:	subi	@m01, _i0, count
000626:0x0015a490:	cmpi	new_index, @m01
000626:0x0015a4a0:	bgt	0x15a4c8
000628:0x0015a4a8:	modi	@m00, new_index, count
000628:0x0015a4b8:	move	new_index, @m00
000631:0x0015a4c8:	addi	@m00, new_index, count
000631:0x0015a4d8:	move	new_index, @m00
000635:0x0015a4e8:	cmpi	new_index, count
000635:0x0015a4f8:	blt	0x15a520
000637:0x0015a500:	modi	@m00, new_index, count
000637:0x0015a510:	move	new_index, @m00
000641:0x0015a520:	move	#return, new_index
000641:0x0015a530:	rts
000641:0x0015a538:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::ShuffleArray()
000646:0x0015a568:	imove	i, 0x000000
000646:0x0015a578:	jump	0x15a598
000646:0x0015a580:	move	@m00, i
000646:0x0015a590:	inc	i
000646:0x0015a598:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000646:0x0015a5a0:	cmpi	i, #return
000646:0x0015a5b0:	bge	0x15a5e8
000648:0x0015a5b8:	call	
000648:0x0015a5c8:	call	
000648:0x0015a5e0:	jump	0x15a580
000648:0x0015a5e8:	rts
array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::DifferentAtPosition()
000666:0x0015a618:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000666:0x0015a620:	move	@m00, #return
000666:0x0015a630:	push	#return
000666:0x0015a638:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000666:0x0015a640:	move	@m02, #return
000666:0x0015a650:	pop	#return
000666:0x0015a658:	cmpi	@m00, @m02
000666:0x0015a668:	beq	0x15a698
000668:0x0015a670:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0015a680:	imove	#return, 0xffffffff
000669:0x0015a690:	rts
000672:0x0015a698:	imove	i, 0x000000
000672:0x0015a6a8:	jump	0x15a6b8
000672:0x0015a6b0:	inc	i
000672:0x0015a6b8:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000672:0x0015a6c0:	cmpi	i, #return
000672:0x0015a6d0:	bge	0x15a760
000674:0x0015a6d8:	icall	
000674:0x0015a6e8:	movec	@c00, #return
000674:0x0015a6f8:	pushc	#return
000674:0x0015a700:	icall	
000674:0x0015a710:	movec	@c02, #return
000674:0x0015a720:	popc	#return
000674:0x0015a728:	cmpc	@c00, @c02
000674:0x0015a738:	beq	0x15a758
000676:0x0015a740:	move	#return, i
000676:0x0015a750:	rts
000676:0x0015a758:	jump	0x15a6b0
000680:0x0015a760:	imove	#return, 0xffffffff
000680:0x0015a770:	rts
000680:0x0015a778:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::InsertAll()
000427:0x0015ab90:	imove	i, 0x000000
000427:0x0015aba0:	jump	0x15abc0
000427:0x0015aba8:	move	@m00, i
000427:0x0015abb8:	inc	i
000427:0x0015abc0:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000427:0x0015abc8:	cmpi	i, #return
000427:0x0015abd8:	bge	0x15ac08
000429:0x0015abe0:	icall	
000429:0x0015abf0:	icall	
000429:0x0015ac00:	jump	0x15aba8
000429:0x0015ac08:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::RemoveItem()
000479:0x0015ac38:	movefm	@c00, value
000479:0x0015ac48:	icall	
000479:0x0015ac58:	move	remove_index, #return
000481:0x0015ac68:	cmpi	remove_index, _i0
000481:0x0015ac78:	blt	0x15ac90
000483:0x0015ac80:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.RemoveOrdered(remove_index)
000483:0x0015ac90:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::RemoveItemUnOrdered()
000489:0x0015acc0:	movefm	@c00, value
000489:0x0015acd0:	icall	
000489:0x0015ace0:	move	remove_index, #return
000491:0x0015acf0:	cmpi	remove_index, _i0
000491:0x0015ad00:	blt	0x15ad18
000493:0x0015ad08:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Remove(remove_index)
000493:0x0015ad18:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::IsValidIndex()
000499:0x0015ad20:	cmpi	index, _i-1
000499:0x0015ad30:	ble	0x15ad70
000499:0x0015ad38:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000499:0x0015ad40:	cmpi	index, #return
000499:0x0015ad50:	bge	0x15ad70
000499:0x0015ad58:	imove	#return, 0x000001
000499:0x0015ad68:	jump	0x15ad80
000499:0x0015ad70:	imove	#return, 0x000000
000499:0x0015ad80:	rts
000499:0x0015ad88:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::Debug()
000525:0x0015ade0:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000525:0x0015ade8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0015ae18:	icall	Print(#return)
000526:0x0015ae28:	imove	i, 0x000000
000526:0x0015ae38:	jump	0x15ae58
000526:0x0015ae40:	move	@m00, i
000526:0x0015ae50:	inc	i
000526:0x0015ae58:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000526:0x0015ae60:	cmpi	i, #return
000526:0x0015ae70:	bge	0x15aee8
000528:0x0015ae78:	icall	
000528:0x0015ae88:	movetm	item, #return
000529:0x0015ae98:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0015aec8:	icall	Print(#return)
000529:0x0015aed8:	release	item
000529:0x0015aee0:	jump	0x15ae40
000529:0x0015aee8:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::GetRandomIndex()
000544:0x0015aef0:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000544:0x0015aef8:	move	@m00, #return
000544:0x0015af08:	cmpi	@m00, _i0
000544:0x0015af18:	ble	0x15af50
000546:0x0015af20:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000546:0x0015af28:	icall	RandomInt(_i0, #return)
000546:0x0015af38:	move	#return, #return
000546:0x0015af48:	rts
000549:0x0015af50:	imove	#return, 0xffffffff
000549:0x0015af60:	rts
000549:0x0015af68:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::GetRandomElement()
000563:0x0015af70:	call	
000563:0x0015af80:	icall	
000563:0x0015af90:	movetm	#return, #return
000563:0x0015afa0:	rts
000563:0x0015afa8:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::SwapItems()
000568:0x0015afd8:	icall	
000568:0x0015afe8:	movetm	item1, #return
000569:0x0015aff8:	icall	
000569:0x0015b008:	icall	
000570:0x0015b018:	movefm	@c00, item1
000570:0x0015b028:	icall	
000570:0x0015b038:	release	item1
000570:0x0015b040:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::InsertArray()
000575:0x0015b098:	imove	i, 0x000000
000575:0x0015b0a8:	jump	0x15b0c8
000575:0x0015b0b0:	move	@m00, i
000575:0x0015b0c0:	inc	i
000575:0x0015b0c8:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000575:0x0015b0d0:	cmpi	i, #return
000575:0x0015b0e0:	bge	0x15b138
000577:0x0015b0e8:	icall	
000577:0x0015b0f8:	movetm	item, #return
000578:0x0015b108:	movefm	@c00, item
000578:0x0015b118:	icall	
000578:0x0015b128:	release	item
000578:0x0015b130:	jump	0x15b0b0
000578:0x0015b138:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::Invert()
000584:0x0015b1b8:	imove	left, 0x000000
000585:0x0015b1c8:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000585:0x0015b1d0:	subi	right, #return, _i1
000586:0x0015b1e0:	cmpi	right, _i0
000586:0x0015b1f0:	ble	0x15b2b0
000588:0x0015b1f8:	cmpi	left, right
000588:0x0015b208:	bge	0x15b2b0
000590:0x0015b210:	icall	
000590:0x0015b220:	movetm	temp, #return
000591:0x0015b230:	move	@m00, left
000591:0x0015b240:	inc	left
000591:0x0015b248:	icall	
000591:0x0015b258:	icall	
000592:0x0015b268:	move	@m00, right
000592:0x0015b278:	dec	right
000592:0x0015b280:	movefm	@c00, temp
000592:0x0015b290:	icall	
000592:0x0015b2a0:	release	temp
000592:0x0015b2a8:	jump	0x15b1f8
000592:0x0015b2b0:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::MoveIndex()
000612:0x0015b308:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000612:0x0015b310:	move	count, #return
000613:0x0015b320:	move	new_index, curr_index
000615:0x0015b330:	cmpi	move_number, _i0
000615:0x0015b340:	ble	0x15b368
000617:0x0015b348:	addi	@m00, curr_index, move_number
000617:0x0015b358:	move	new_index, @m00
000620:0x0015b368:	cmpi	move_number, _i0
000620:0x0015b378:	bge	0x15b420
000622:0x0015b380:	subi	@m00, curr_index, move_number
000622:0x0015b390:	move	new_index, @m00
000624:0x0015b3a0:	cmpi	new_index, _i0
000624:0x0015b3b0:	bge	0x15b420
000626:0x0015b3b8:	subi	@m01, _i0, count
000626:0x0015b3c8:	cmpi	new_index, @m01
000626:0x0015b3d8:	bgt	0x15b400
000628:0x0015b3e0:	modi	@m00, new_index, count
000628:0x0015b3f0:	move	new_index, @m00
000631:0x0015b400:	addi	@m00, new_index, count
000631:0x0015b410:	move	new_index, @m00
000635:0x0015b420:	cmpi	new_index, count
000635:0x0015b430:	blt	0x15b458
000637:0x0015b438:	modi	@m00, new_index, count
000637:0x0015b448:	move	new_index, @m00
000641:0x0015b458:	move	#return, new_index
000641:0x0015b468:	rts
000641:0x0015b470:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::ShuffleArray()
000646:0x0015b4a0:	imove	i, 0x000000
000646:0x0015b4b0:	jump	0x15b4d0
000646:0x0015b4b8:	move	@m00, i
000646:0x0015b4c8:	inc	i
000646:0x0015b4d0:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000646:0x0015b4d8:	cmpi	i, #return
000646:0x0015b4e8:	bge	0x15b520
000648:0x0015b4f0:	call	
000648:0x0015b500:	call	
000648:0x0015b518:	jump	0x15b4b8
000648:0x0015b520:	rts
array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>::DifferentAtPosition()
000666:0x0015b550:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000666:0x0015b558:	move	@m00, #return
000666:0x0015b568:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000666:0x0015b570:	cmpi	@m00, #return
000666:0x0015b580:	beq	0x15b5b0
000668:0x0015b588:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0015b598:	imove	#return, 0xffffffff
000669:0x0015b5a8:	rts
000672:0x0015b5b0:	imove	i, 0x000000
000672:0x0015b5c0:	jump	0x15b5d0
000672:0x0015b5c8:	inc	i
000672:0x0015b5d0:	ncalli	array<FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000672:0x0015b5d8:	cmpi	i, #return
000672:0x0015b5e8:	bge	0x15b658
000674:0x0015b5f0:	icall	
000674:0x0015b600:	movec	@c00, #return
000674:0x0015b610:	icall	
000674:0x0015b620:	cmpc	@c00, #return
000674:0x0015b630:	beq	0x15b650
000676:0x0015b638:	move	#return, i
000676:0x0015b648:	rts
000676:0x0015b650:	jump	0x15b5c8
000680:0x0015b658:	imove	#return, 0xffffffff
000680:0x0015b668:	rts
000680:0x0015b670:	rts
array<HandStateBase>::InsertAll()
000427:0x0015bf40:	imove	i, 0x000000
000427:0x0015bf50:	jump	0x15bf70
000427:0x0015bf58:	move	@m00, i
000427:0x0015bf68:	inc	i
000427:0x0015bf70:	ncalli	array<HandStateBase>.Count()
000427:0x0015bf78:	cmpi	i, #return
000427:0x0015bf88:	bge	0x15bfb8
000429:0x0015bf90:	icall	
000429:0x0015bfa0:	icall	
000429:0x0015bfb0:	jump	0x15bf58
000429:0x0015bfb8:	rts
array<HandStateBase>::RemoveItem()
000479:0x0015bfe8:	movefm	@c00, value
000479:0x0015bff8:	icall	
000479:0x0015c008:	move	remove_index, #return
000481:0x0015c018:	cmpi	remove_index, _i0
000481:0x0015c028:	blt	0x15c040
000483:0x0015c030:	ncalli	array<HandStateBase>.RemoveOrdered(remove_index)
000483:0x0015c040:	rts
array<HandStateBase>::RemoveItemUnOrdered()
000489:0x0015c070:	movefm	@c00, value
000489:0x0015c080:	icall	
000489:0x0015c090:	move	remove_index, #return
000491:0x0015c0a0:	cmpi	remove_index, _i0
000491:0x0015c0b0:	blt	0x15c0c8
000493:0x0015c0b8:	ncalli	array<HandStateBase>.Remove(remove_index)
000493:0x0015c0c8:	rts
array<HandStateBase>::IsValidIndex()
000499:0x0015c0d0:	cmpi	index, _i-1
000499:0x0015c0e0:	ble	0x15c120
000499:0x0015c0e8:	ncalli	array<HandStateBase>.Count()
000499:0x0015c0f0:	cmpi	index, #return
000499:0x0015c100:	bge	0x15c120
000499:0x0015c108:	imove	#return, 0x000001
000499:0x0015c118:	jump	0x15c130
000499:0x0015c120:	imove	#return, 0x000000
000499:0x0015c130:	rts
000499:0x0015c138:	rts
array<HandStateBase>::Debug()
000525:0x0015c190:	ncalli	array<HandStateBase>.Count()
000525:0x0015c198:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0015c1c8:	icall	Print(#return)
000526:0x0015c1d8:	imove	i, 0x000000
000526:0x0015c1e8:	jump	0x15c208
000526:0x0015c1f0:	move	@m00, i
000526:0x0015c200:	inc	i
000526:0x0015c208:	ncalli	array<HandStateBase>.Count()
000526:0x0015c210:	cmpi	i, #return
000526:0x0015c220:	bge	0x15c298
000528:0x0015c228:	icall	
000528:0x0015c238:	movetm	item, #return
000529:0x0015c248:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0015c278:	icall	Print(#return)
000529:0x0015c288:	release	item
000529:0x0015c290:	jump	0x15c1f0
000529:0x0015c298:	rts
array<HandStateBase>::GetRandomIndex()
000544:0x0015c2a0:	ncalli	array<HandStateBase>.Count()
000544:0x0015c2a8:	move	@m00, #return
000544:0x0015c2b8:	cmpi	@m00, _i0
000544:0x0015c2c8:	ble	0x15c300
000546:0x0015c2d0:	ncalli	array<HandStateBase>.Count()
000546:0x0015c2d8:	icall	RandomInt(_i0, #return)
000546:0x0015c2e8:	move	#return, #return
000546:0x0015c2f8:	rts
000549:0x0015c300:	imove	#return, 0xffffffff
000549:0x0015c310:	rts
000549:0x0015c318:	rts
array<HandStateBase>::GetRandomElement()
000563:0x0015c320:	call	
000563:0x0015c330:	icall	
000563:0x0015c340:	movetm	#return, #return
000563:0x0015c350:	rts
000563:0x0015c358:	rts
array<HandStateBase>::SwapItems()
000568:0x0015c388:	icall	
000568:0x0015c398:	movetm	item1, #return
000569:0x0015c3a8:	icall	
000569:0x0015c3b8:	icall	
000570:0x0015c3c8:	movefm	@c00, item1
000570:0x0015c3d8:	icall	
000570:0x0015c3e8:	release	item1
000570:0x0015c3f0:	rts
array<HandStateBase>::InsertArray()
000575:0x0015c448:	imove	i, 0x000000
000575:0x0015c458:	jump	0x15c478
000575:0x0015c460:	move	@m00, i
000575:0x0015c470:	inc	i
000575:0x0015c478:	ncalli	array<HandStateBase>.Count()
000575:0x0015c480:	cmpi	i, #return
000575:0x0015c490:	bge	0x15c4e8
000577:0x0015c498:	icall	
000577:0x0015c4a8:	movetm	item, #return
000578:0x0015c4b8:	movefm	@c00, item
000578:0x0015c4c8:	icall	
000578:0x0015c4d8:	release	item
000578:0x0015c4e0:	jump	0x15c460
000578:0x0015c4e8:	rts
array<HandStateBase>::Invert()
000584:0x0015c568:	imove	left, 0x000000
000585:0x0015c578:	ncalli	array<HandStateBase>.Count()
000585:0x0015c580:	subi	right, #return, _i1
000586:0x0015c590:	cmpi	right, _i0
000586:0x0015c5a0:	ble	0x15c660
000588:0x0015c5a8:	cmpi	left, right
000588:0x0015c5b8:	bge	0x15c660
000590:0x0015c5c0:	icall	
000590:0x0015c5d0:	movetm	temp, #return
000591:0x0015c5e0:	move	@m00, left
000591:0x0015c5f0:	inc	left
000591:0x0015c5f8:	icall	
000591:0x0015c608:	icall	
000592:0x0015c618:	move	@m00, right
000592:0x0015c628:	dec	right
000592:0x0015c630:	movefm	@c00, temp
000592:0x0015c640:	icall	
000592:0x0015c650:	release	temp
000592:0x0015c658:	jump	0x15c5a8
000592:0x0015c660:	rts
array<HandStateBase>::MoveIndex()
000612:0x0015c6b8:	ncalli	array<HandStateBase>.Count()
000612:0x0015c6c0:	move	count, #return
000613:0x0015c6d0:	move	new_index, curr_index
000615:0x0015c6e0:	cmpi	move_number, _i0
000615:0x0015c6f0:	ble	0x15c718
000617:0x0015c6f8:	addi	@m00, curr_index, move_number
000617:0x0015c708:	move	new_index, @m00
000620:0x0015c718:	cmpi	move_number, _i0
000620:0x0015c728:	bge	0x15c7d0
000622:0x0015c730:	subi	@m00, curr_index, move_number
000622:0x0015c740:	move	new_index, @m00
000624:0x0015c750:	cmpi	new_index, _i0
000624:0x0015c760:	bge	0x15c7d0
000626:0x0015c768:	subi	@m01, _i0, count
000626:0x0015c778:	cmpi	new_index, @m01
000626:0x0015c788:	bgt	0x15c7b0
000628:0x0015c790:	modi	@m00, new_index, count
000628:0x0015c7a0:	move	new_index, @m00
000631:0x0015c7b0:	addi	@m00, new_index, count
000631:0x0015c7c0:	move	new_index, @m00
000635:0x0015c7d0:	cmpi	new_index, count
000635:0x0015c7e0:	blt	0x15c808
000637:0x0015c7e8:	modi	@m00, new_index, count
000637:0x0015c7f8:	move	new_index, @m00
000641:0x0015c808:	move	#return, new_index
000641:0x0015c818:	rts
000641:0x0015c820:	rts
array<HandStateBase>::ShuffleArray()
000646:0x0015c850:	imove	i, 0x000000
000646:0x0015c860:	jump	0x15c880
000646:0x0015c868:	move	@m00, i
000646:0x0015c878:	inc	i
000646:0x0015c880:	ncalli	array<HandStateBase>.Count()
000646:0x0015c888:	cmpi	i, #return
000646:0x0015c898:	bge	0x15c8d0
000648:0x0015c8a0:	call	
000648:0x0015c8b0:	call	
000648:0x0015c8c8:	jump	0x15c868
000648:0x0015c8d0:	rts
array<HandStateBase>::DifferentAtPosition()
000666:0x0015c900:	ncalli	array<HandStateBase>.Count()
000666:0x0015c908:	move	@m00, #return
000666:0x0015c918:	push	#return
000666:0x0015c920:	ncalli	array<HandStateBase>.Count()
000666:0x0015c928:	move	@m02, #return
000666:0x0015c938:	pop	#return
000666:0x0015c940:	cmpi	@m00, @m02
000666:0x0015c950:	beq	0x15c980
000668:0x0015c958:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0015c968:	imove	#return, 0xffffffff
000669:0x0015c978:	rts
000672:0x0015c980:	imove	i, 0x000000
000672:0x0015c990:	jump	0x15c9a0
000672:0x0015c998:	inc	i
000672:0x0015c9a0:	ncalli	array<HandStateBase>.Count()
000672:0x0015c9a8:	cmpi	i, #return
000672:0x0015c9b8:	bge	0x15ca48
000674:0x0015c9c0:	icall	
000674:0x0015c9d0:	movec	@c00, #return
000674:0x0015c9e0:	pushc	#return
000674:0x0015c9e8:	icall	
000674:0x0015c9f8:	movec	@c02, #return
000674:0x0015ca08:	popc	#return
000674:0x0015ca10:	cmpc	@c00, @c02
000674:0x0015ca20:	beq	0x15ca40
000676:0x0015ca28:	move	#return, i
000676:0x0015ca38:	rts
000676:0x0015ca40:	jump	0x15c998
000680:0x0015ca48:	imove	#return, 0xffffffff
000680:0x0015ca58:	rts
000680:0x0015ca60:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::HFSMBase()
//scripts/3_Game/systems\hfsmbase.c
000027:0x0015d3d8:	new	m_Transitions, array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>
000027:0x0015d3f8:	imove	m_HasCompletions, 0x000000
000029:0x0015d408:	movem	m_OwnerState, ownerState
000029:0x0015d418:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::GetCurrentState()
000037:0x0015d420:	movem	#return, m_State
000037:0x0015d430:	rts
000037:0x0015d438:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::GetOwnerState()
000044:0x0015d440:	movem	#return, m_OwnerState
000044:0x0015d450:	rts
000044:0x0015d458:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::GetHierarchyPath()
000054:0x0015d4b0:	movem	curr, state
000055:0x0015d4c0:	cmpcm	curr, null
000055:0x0015d4d0:	beq	0x15d528
000057:0x0015d4d8:	movefm	@c00, curr
000057:0x0015d4e8:	icall	
000058:0x0015d4f8:	call	
000058:0x0015d508:	movem	curr, #return
000058:0x0015d518:	release	#return
000058:0x0015d520:	jump	0x15d4c0
000060:0x0015d528:	ncalli	array<HandStateBase>.Count()
000060:0x0015d530:	move	@m00, #return
000060:0x0015d540:	cmpi	@m00, _i0
000060:0x0015d550:	ble	0x15d570
000060:0x0015d558:	imove	#return, 0x000001
000060:0x0015d568:	jump	0x15d580
000060:0x0015d570:	imove	#return, 0x000000
000060:0x0015d580:	release	curr
000060:0x0015d588:	movem	path, path
000060:0x0015d598:	rts
000060:0x0015d5a0:	release	curr
000060:0x0015d5a8:	movem	path, path
000060:0x0015d5b8:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::SetInitialState()
000069:0x0015d5c0:	movem	m_InitialState, initial_state
000069:0x0015d5d0:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::AddTransition()
000076:0x0015d650:	movefm	@c00, t
000076:0x0015d660:	movefm	[0xb5c57408], m_Transitions
000076:0x0015d670:	icall	
000078:0x0015d680:	movefm	@c00, t
000078:0x0015d690:	cmpcm	m_event, NULL
000078:0x0015d6a0:	bne	0x15d7b8
000080:0x0015d6a8:	icall	ToString(this)
000080:0x0015d6b8:	adds	@s01, _s'Warning (performance): FSM ', #return
000080:0x0015d6c8:	moves	@s00, @s01
000080:0x0015d6d8:	adds	@s00, @s00, _s' has completion transition for src='
000080:0x0015d6e8:	moves	@s01, @s00
000080:0x0015d6f8:	movefm	@c01, t
000080:0x0015d708:	icall	ToString(m_srcState)
000080:0x0015d718:	adds	@s01, @s01, #return
000080:0x0015d728:	moves	@s00, @s01
000080:0x0015d738:	adds	@s00, @s00, _s' ---NULL----|> dst='
000080:0x0015d748:	moves	@s01, @s00
000080:0x0015d758:	movefm	@c02, t
000080:0x0015d768:	icall	ToString(m_dstState)
000080:0x0015d778:	adds	@s01, @s01, #return
000080:0x0015d788:	moves	@s00, @s01
000080:0x0015d798:	icall	Print(@s00)
000081:0x0015d7a8:	imove	m_HasCompletions, 0x000001
000081:0x0015d7b8:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::Start()
000091:0x0015d838:	icall	ToString(this)
000091:0x0015d848:	adds	@s05, _s'[hfsm] ', #return
000091:0x0015d858:	moves	@s04, @s05
000091:0x0015d868:	adds	@s04, @s04, _s'::Start('
000091:0x0015d878:	moves	@s03, @s04
000091:0x0015d888:	icall	ToString(initial_event)
000091:0x0015d898:	adds	@s03, @s03, #return
000091:0x0015d8a8:	moves	@s02, @s03
000091:0x0015d8b8:	adds	@s02, @s02, _s'), init_state='
000091:0x0015d8c8:	moves	@s01, @s02
000091:0x0015d8d8:	icall	ToString(m_InitialState)
000091:0x0015d8e8:	adds	@s01, @s01, #return
000091:0x0015d8f8:	moves	@s00, @s01
000091:0x0015d908:	call	fsmDebugPrint(@s00)
000093:0x0015d918:	cmpi	useExistingState, _i0
000093:0x0015d928:	bne	0x15d940
000094:0x0015d930:	movem	m_State, m_InitialState
000096:0x0015d940:	movefm	[0xb5b33ba8], m_State
000096:0x0015d950:	call	
000098:0x0015d960:	cmpi	m_HasCompletions, _i0
000098:0x0015d970:	beq	0x15d988
000099:0x0015d978:	call	
000099:0x0015d988:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::IsRunning()
000104:0x0015d990:	cmpcm	m_State, NULL
000104:0x0015d9a0:	beq	0x15d9c0
000104:0x0015d9a8:	imove	#return, 0x000001
000104:0x0015d9b8:	jump	0x15d9d0
000104:0x0015d9c0:	imove	#return, 0x000000
000104:0x0015d9d0:	rts
000104:0x0015d9d8:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::Terminate()
000110:0x0015da30:	icall	ToString(this)
000110:0x0015da40:	adds	@s04, _s'[hfsm] ', #return
000110:0x0015da50:	moves	@s03, @s04
000110:0x0015da60:	adds	@s03, @s03, _s'::Terminate('
000110:0x0015da70:	moves	@s02, @s03
000110:0x0015da80:	icall	ToString(terminal_event)
000110:0x0015da90:	adds	@s02, @s02, #return
000110:0x0015daa0:	moves	@s01, @s02
000110:0x0015dab0:	adds	@s01, @s01, _s')'
000110:0x0015dac0:	moves	@s00, @s01
000110:0x0015dad0:	call	fsmDebugPrint(@s00)
000111:0x0015dae0:	call	
000111:0x0015daf0:	cmpi	#return, _i0
000111:0x0015db00:	beq	0x15db38
000113:0x0015db08:	movefm	[0xb5b33ba8], m_State
000113:0x0015db18:	call	
000114:0x0015db28:	movetm	m_State, NULL
000114:0x0015db38:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::Abort()
000119:0x0015db68:	icall	ToString(this)
000119:0x0015db78:	adds	@s04, _s'[hfsm] ', #return
000119:0x0015db88:	moves	@s03, @s04
000119:0x0015db98:	adds	@s03, @s03, _s'::Abort('
000119:0x0015dba8:	moves	@s02, @s03
000119:0x0015dbb8:	icall	ToString(abort_event)
000119:0x0015dbc8:	adds	@s02, @s02, #return
000119:0x0015dbd8:	moves	@s01, @s02
000119:0x0015dbe8:	adds	@s01, @s01, _s')'
000119:0x0015dbf8:	moves	@s00, @s01
000119:0x0015dc08:	call	fsmDebugPrint(@s00)
000120:0x0015dc18:	call	
000120:0x0015dc28:	cmpi	#return, _i0
000120:0x0015dc38:	beq	0x15dc70
000122:0x0015dc40:	movefm	[0xb5b33ba8], m_State
000122:0x0015dc50:	call	
000123:0x0015dc60:	movetm	m_State, NULL
000123:0x0015dc70:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::Update()
000131:0x0015dc78:	call	
000131:0x0015dc88:	cmpi	#return, _i0
000131:0x0015dc98:	beq	0x15dcc0
000132:0x0015dca0:	movefm	[0xb5b33ba8], m_State
000132:0x0015dcb0:	call	
000132:0x0015dcc0:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::ProcessAbortTransition()
000137:0x0015de30:	movefm	@c00, t
000137:0x0015de40:	icall	ToString(m_srcState)
000137:0x0015de50:	adds	@s09, _s'[hfsm] (local abort) state=', #return
000137:0x0015de60:	moves	@s08, @s09
000137:0x0015de70:	adds	@s08, @s08, _s'-------- ABORT event='
000137:0x0015de80:	moves	@s07, @s08
000137:0x0015de90:	icall	ToString(e)
000137:0x0015dea0:	adds	@s07, @s07, #return
000137:0x0015deb0:	moves	@s06, @s07
000137:0x0015dec0:	adds	@s06, @s06, _s'[G='
000137:0x0015ded0:	moves	@s05, @s06
000137:0x0015dee0:	movefm	@c01, t
000137:0x0015def0:	icall	ToString(m_guard)
000137:0x0015df00:	adds	@s05, @s05, #return
000137:0x0015df10:	moves	@s04, @s05
000137:0x0015df20:	adds	@s04, @s04, _s']/A='
000137:0x0015df30:	moves	@s03, @s04
000137:0x0015df40:	movefm	@c02, t
000137:0x0015df50:	icall	ToString(m_action)
000137:0x0015df60:	adds	@s03, @s03, #return
000137:0x0015df70:	moves	@s02, @s03
000137:0x0015df80:	adds	@s02, @s02, _s' --------|> dst='
000137:0x0015df90:	moves	@s01, @s02
000137:0x0015dfa0:	movefm	@c03, t
000137:0x0015dfb0:	icall	ToString(m_dstState)
000137:0x0015dfc0:	adds	@s01, @s01, #return
000137:0x0015dfd0:	moves	@s00, @s01
000137:0x0015dfe0:	call	fsmDebugPrint(@s00)
000139:0x0015dff0:	movefm	[0xb5b33ba8], m_State
000139:0x0015e000:	call	
000141:0x0015e010:	movefm	@c00, t
000141:0x0015e020:	cmpcm	m_action, null
000141:0x0015e030:	beq	0x15e068
000142:0x0015e038:	movefm	@c00, t
000142:0x0015e048:	movefm	@c01, m_action
000142:0x0015e058:	call	
000144:0x0015e068:	movefm	@c00, t
000144:0x0015e078:	movefm	[0xb5b33ba8], m_srcState
000144:0x0015e088:	call	
000144:0x0015e098:	movem	tmp, #return
000144:0x0015e0a8:	release	#return
000145:0x0015e0b0:	movefm	@c01, t
000145:0x0015e0c0:	movefm	[0xb5b33ba8], m_dstState
000145:0x0015e0d0:	call	
000145:0x0015e0e0:	cmpm	tmp, #return
000145:0x0015e0f0:	bne	0x15e260
000147:0x0015e0f8:	movefm	@c02, t
000147:0x0015e108:	movem	m_State, m_dstState
000149:0x0015e118:	movefm	@c00, t
000149:0x0015e128:	cmpcm	m_dstState, NULL
000149:0x0015e138:	beq	0x15e190
000151:0x0015e140:	movefm	[0xb5b33ba8], m_State
000151:0x0015e150:	call	
000152:0x0015e160:	imove	#return, 0x000000
000152:0x0015e170:	release	#return
000152:0x0015e178:	release	tmp
000152:0x0015e180:	rts
000152:0x0015e188:	jump	0x15e258
000156:0x0015e190:	movefm	@c00, t
000156:0x0015e1a0:	icall	ToString(m_srcState)
000156:0x0015e1b0:	adds	@s03, _s'[hfsm] abort & terminating fsm: state=', #return
000156:0x0015e1c0:	moves	@s02, @s03
000156:0x0015e1d0:	adds	@s02, @s02, _s' event='
000156:0x0015e1e0:	moves	@s01, @s02
000156:0x0015e1f0:	icall	ToString(e)
000156:0x0015e200:	adds	@s01, @s01, #return
000156:0x0015e210:	moves	@s00, @s01
000156:0x0015e220:	call	fsmDebugPrint(@s00)
000157:0x0015e230:	imove	#return, 0x000001
000157:0x0015e240:	release	#return
000157:0x0015e248:	release	tmp
000157:0x0015e250:	rts
000157:0x0015e258:	jump	0x15e298
000162:0x0015e260:	movetm	m_State, NULL
000163:0x0015e270:	imove	#return, 0x000002
000163:0x0015e280:	release	#return
000163:0x0015e288:	release	tmp
000163:0x0015e290:	rts
000163:0x0015e298:	release	#return
000163:0x0015e2a0:	release	tmp
000163:0x0015e2a8:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::FindAbortDestinationState()
000177:0x0015e448:	call	
000177:0x0015e458:	cmpcm	#return, null
000177:0x0015e468:	beq	0x15e5a0
000178:0x0015e470:	call	
000178:0x0015e480:	movefm	[0xd315b998], #return
000178:0x0015e490:	ncall	Type([0xd315b998])
000178:0x0015e4a0:	ncall	ToString(#return)
000178:0x0015e4b0:	adds	@s04, _s'[hfsm] SUB! ', #return
000178:0x0015e4c0:	moves	@s03, @s04
000178:0x0015e4d0:	adds	@s03, @s03, _s'::FindAbortDestinationState('
000178:0x0015e4e0:	moves	@s02, @s03
000178:0x0015e4f0:	movefm	[0xd315b998], e
000178:0x0015e500:	pushr	#return
000178:0x0015e508:	ncall	Type([0xd315b998])
000178:0x0015e518:	movea	@m00, #return
000178:0x0015e528:	popr	#return
000178:0x0015e530:	ncall	ToString(@m00)
000178:0x0015e540:	adds	@s02, @s02, #return
000178:0x0015e550:	moves	@s01, @s02
000178:0x0015e560:	adds	@s01, @s01, _s')'
000178:0x0015e570:	moves	@s00, @s01
000178:0x0015e580:	call	fsmDebugPrint(@s00)
000178:0x0015e590:	release	#return
000178:0x0015e598:	jump	0x15e620
000180:0x0015e5a0:	movefm	[0xd315b998], e
000180:0x0015e5b0:	ncall	Type([0xd315b998])
000180:0x0015e5c0:	ncall	ToString(#return)
000180:0x0015e5d0:	adds	@s02, _s'[hfsm] root::FindAbortDestinationState(', #return
000180:0x0015e5e0:	moves	@s01, @s02
000180:0x0015e5f0:	adds	@s01, @s01, _s')'
000180:0x0015e600:	moves	@s00, @s01
000180:0x0015e610:	call	fsmDebugPrint(@s00)
000180:0x0015e620:	release	#return
000183:0x0015e628:	movefm	[0xb5b33ba8], m_State
000183:0x0015e638:	call	
000183:0x0015e648:	cmpi	#return, _i0
000183:0x0015e658:	beq	0x15e710
000185:0x0015e660:	movefm	[0xb5b33ba8], m_State
000185:0x0015e670:	call	
000185:0x0015e680:	movem	a, #return
000185:0x0015e690:	release	#return
000186:0x0015e698:	call	
000186:0x0015e6a8:	movem	abort_dst, #return
000186:0x0015e6b8:	release	#return
000188:0x0015e6c0:	cmpcm	abort_dst, null
000188:0x0015e6d0:	beq	0x15e700
000190:0x0015e6d8:	movem	#return, abort_dst
000190:0x0015e6e8:	release	a
000190:0x0015e6f0:	release	abort_dst
000190:0x0015e6f8:	rts
000190:0x0015e700:	release	a
000190:0x0015e708:	release	abort_dst
000195:0x0015e710:	call	
000195:0x0015e720:	move	i, #return
000196:0x0015e730:	cmpi	i, _i-1
000196:0x0015e740:	bne	0x15e810
000198:0x0015e748:	icall	ToString(m_State)
000198:0x0015e758:	adds	@s03, _s'[hfsm] abort event has no transition: src=', #return
000198:0x0015e768:	moves	@s02, @s03
000198:0x0015e778:	adds	@s02, @s02, _s' e='
000198:0x0015e788:	moves	@s01, @s02
000198:0x0015e798:	movefm	[0xd315b998], e
000198:0x0015e7a8:	ncall	Type([0xd315b998])
000198:0x0015e7b8:	ncall	ToString(#return)
000198:0x0015e7c8:	adds	@s01, @s01, #return
000198:0x0015e7d8:	moves	@s00, @s01
000198:0x0015e7e8:	call	fsmDebugPrint(@s00)
000199:0x0015e7f8:	movetm	#return, NULL
000199:0x0015e808:	rts
000202:0x0015e810:	movefm	[0xb5c57408], m_Transitions
000202:0x0015e820:	icall	
000202:0x0015e830:	movetm	t, #return
000203:0x0015e840:	movefm	@c01, t
000203:0x0015e850:	movem	#return, m_dstState
000203:0x0015e860:	release	t
000203:0x0015e868:	rts
000203:0x0015e870:	release	t
000203:0x0015e878:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::ProcessAbortEvent()
000216:0x0015eb58:	call	
000216:0x0015eb68:	cmpcm	#return, null
000216:0x0015eb78:	beq	0x15ecb0
000217:0x0015eb80:	call	
000217:0x0015eb90:	movefm	[0xd315b998], #return
000217:0x0015eba0:	ncall	Type([0xd315b998])
000217:0x0015ebb0:	ncall	ToString(#return)
000217:0x0015ebc0:	adds	@s04, _s'[hfsm] SUB! ', #return
000217:0x0015ebd0:	moves	@s03, @s04
000217:0x0015ebe0:	adds	@s03, @s03, _s'::ProcessAbortEvent('
000217:0x0015ebf0:	moves	@s02, @s03
000217:0x0015ec00:	movefm	[0xd315b998], e
000217:0x0015ec10:	pushr	#return
000217:0x0015ec18:	ncall	Type([0xd315b998])
000217:0x0015ec28:	movea	@m00, #return
000217:0x0015ec38:	popr	#return
000217:0x0015ec40:	ncall	ToString(@m00)
000217:0x0015ec50:	adds	@s02, @s02, #return
000217:0x0015ec60:	moves	@s01, @s02
000217:0x0015ec70:	adds	@s01, @s01, _s')'
000217:0x0015ec80:	moves	@s00, @s01
000217:0x0015ec90:	call	fsmDebugPrint(@s00)
000217:0x0015eca0:	release	#return
000217:0x0015eca8:	jump	0x15ed30
000219:0x0015ecb0:	movefm	[0xd315b998], e
000219:0x0015ecc0:	ncall	Type([0xd315b998])
000219:0x0015ecd0:	ncall	ToString(#return)
000219:0x0015ece0:	adds	@s02, _s'[hfsm] root::ProcessAbortEvent(', #return
000219:0x0015ecf0:	moves	@s01, @s02
000219:0x0015ed00:	adds	@s01, @s01, _s')'
000219:0x0015ed10:	moves	@s00, @s01
000219:0x0015ed20:	call	fsmDebugPrint(@s00)
000219:0x0015ed30:	release	#return
000222:0x0015ed38:	movefm	[0xb5b33ba8], m_State
000222:0x0015ed48:	call	
000222:0x0015ed58:	cmpi	#return, _i0
000222:0x0015ed68:	beq	0x15f1a0
000224:0x0015ed70:	movefm	[0xb5b33ba8], m_State
000224:0x0015ed80:	call	
000224:0x0015ed90:	movem	a, #return
000224:0x0015eda0:	release	#return
000226:0x0015eda8:	call	
000226:0x0015edc0:	move	subfsm_res, result
000226:0x0015edd0:	movem	abort_dst, #return
000226:0x0015ede0:	release	#return
000228:0x0015ede8:	move	#switch, subfsm_res
000228:0x0015edf8:	imove	@m00, 0x000000
000228:0x0015ee08:	cmpi	@m00, #switch
000228:0x0015ee18:	bne	0x15eeb0
000232:0x0015ee20:	icall	ToString(m_State)
000232:0x0015ee30:	adds	@s01, _s'[hfsm] event processed by sub machine=', #return
000232:0x0015ee40:	moves	@s00, @s01
000232:0x0015ee50:	call	fsmDebugPrint(@s00)
000233:0x0015ee60:	move	result, subfsm_res
000234:0x0015ee70:	movetm	#return, NULL
000234:0x0015ee80:	release	a
000234:0x0015ee88:	release	abort_dst
000234:0x0015ee90:	move	result, result
000234:0x0015eea0:	rts
000234:0x0015eea8:	jump	0x15eed8
000234:0x0015eeb0:	imove	@m00, 0x000002
000234:0x0015eec0:	cmpi	@m00, #switch
000234:0x0015eed0:	bne	0x15f0e8
000238:0x0015eed8:	icall	ToString(m_State)
000238:0x0015eee8:	adds	@s01, _s'[hfsm] aborted sub machine=', #return
000238:0x0015eef8:	moves	@s00, @s01
000238:0x0015ef08:	call	fsmDebugPrint(@s00)
000240:0x0015ef18:	movefm	[0xb5b33ba8], m_State
000240:0x0015ef28:	call	
000242:0x0015ef38:	call	
000242:0x0015ef48:	movefm	@c00, #return
000242:0x0015ef58:	call	
000242:0x0015ef68:	cmpmc	@c00, #return
000242:0x0015ef78:	bne	0x15f070
000244:0x0015ef80:	icall	ToString(m_State)
000244:0x0015ef90:	adds	@s02, _s'[hfsm] aborted sub machine=', #return
000244:0x0015efa0:	moves	@s01, @s02
000244:0x0015efb0:	adds	@s01, @s01, _s' & abort destination reached.'
000244:0x0015efc0:	moves	@s00, @s01
000244:0x0015efd0:	call	fsmDebugPrint(@s00)
000245:0x0015efe0:	movem	m_State, abort_dst
000246:0x0015eff0:	movefm	[0xb5b33ba8], m_State
000246:0x0015f000:	call	
000247:0x0015f010:	imove	result, 0x000000
000248:0x0015f020:	movetm	#return, NULL
000248:0x0015f030:	release	#return
000248:0x0015f038:	release	#return
000248:0x0015f040:	release	a
000248:0x0015f048:	release	abort_dst
000248:0x0015f050:	move	result, result
000248:0x0015f060:	rts
000248:0x0015f068:	jump	0x15f0c8
000252:0x0015f070:	imove	result, 0x000002
000253:0x0015f080:	movetm	#return, NULL
000253:0x0015f090:	release	#return
000253:0x0015f098:	release	#return
000253:0x0015f0a0:	release	a
000253:0x0015f0a8:	release	abort_dst
000253:0x0015f0b0:	move	result, result
000253:0x0015f0c0:	rts
000253:0x0015f0c8:	release	#return
000253:0x0015f0d0:	release	#return
000256:0x0015f0d8:	jump	0x15f190
000256:0x0015f0e0:	jump	0x15f110
000256:0x0015f0e8:	imove	@m00, 0x000001
000256:0x0015f0f8:	cmpi	@m00, #switch
000256:0x0015f108:	bne	0x15f120
000260:0x0015f110:	jump	0x15f190
000260:0x0015f118:	jump	0x15f148
000260:0x0015f120:	imove	@m00, 0x000003
000260:0x0015f130:	cmpi	@m00, #switch
000260:0x0015f140:	bne	0x15f190
000264:0x0015f148:	icall	ToString(m_State)
000264:0x0015f158:	adds	@s01, _s'[hfsm] aborted (but no transition) sub machine=', #return
000264:0x0015f168:	moves	@s00, @s01
000264:0x0015f178:	call	fsmDebugPrint(@s00)
000265:0x0015f188:	jump	0x15f190
000265:0x0015f190:	release	a
000265:0x0015f198:	release	abort_dst
000271:0x0015f1a0:	call	
000271:0x0015f1b0:	move	i, #return
000272:0x0015f1c0:	cmpi	i, _i-1
000272:0x0015f1d0:	bne	0x15f2c0
000274:0x0015f1d8:	icall	ToString(m_State)
000274:0x0015f1e8:	adds	@s03, _s'[hfsm] abort event has no transition: src=', #return
000274:0x0015f1f8:	moves	@s02, @s03
000274:0x0015f208:	adds	@s02, @s02, _s' e='
000274:0x0015f218:	moves	@s01, @s02
000274:0x0015f228:	movefm	[0xd315b998], e
000274:0x0015f238:	ncall	Type([0xd315b998])
000274:0x0015f248:	ncall	ToString(#return)
000274:0x0015f258:	adds	@s01, @s01, #return
000274:0x0015f268:	moves	@s00, @s01
000274:0x0015f278:	call	fsmDebugPrint(@s00)
000275:0x0015f288:	imove	result, 0x000003
000276:0x0015f298:	movetm	#return, NULL
000276:0x0015f2a8:	move	result, result
000276:0x0015f2b8:	rts
000279:0x0015f2c0:	movefm	[0xb5c57408], m_Transitions
000279:0x0015f2d0:	icall	
000279:0x0015f2e0:	movetm	t, #return
000280:0x0015f2f0:	call	
000280:0x0015f308:	move	res, #return
000281:0x0015f318:	move	result, res
000282:0x0015f328:	move	#switch, res
000282:0x0015f338:	imove	@m00, 0x000000
000282:0x0015f348:	cmpi	@m00, #switch
000282:0x0015f358:	bne	0x15f398
000287:0x0015f360:	movetm	#return, NULL
000287:0x0015f370:	release	t
000287:0x0015f378:	move	result, result
000287:0x0015f388:	rts
000287:0x0015f390:	jump	0x15f3c0
000287:0x0015f398:	imove	@m00, 0x000002
000287:0x0015f3a8:	cmpi	@m00, #switch
000287:0x0015f3b8:	bne	0x15f4a8
000291:0x0015f3c0:	icall	ToString(m_State)
000291:0x0015f3d0:	adds	@s03, _s'[hfsm] aborted sub machine=', #return
000291:0x0015f3e0:	moves	@s02, @s03
000291:0x0015f3f0:	adds	@s02, @s02, _s' will fall-through to dst='
000291:0x0015f400:	moves	@s01, @s02
000291:0x0015f410:	movefm	@c00, t
000291:0x0015f420:	icall	ToString(m_dstState)
000291:0x0015f430:	adds	@s01, @s01, #return
000291:0x0015f440:	moves	@s00, @s01
000291:0x0015f450:	call	fsmDebugPrint(@s00)
000292:0x0015f460:	movefm	@c01, t
000292:0x0015f470:	movem	#return, m_dstState
000292:0x0015f480:	release	t
000292:0x0015f488:	move	result, result
000292:0x0015f498:	rts
000292:0x0015f4a0:	jump	0x15f4d0
000292:0x0015f4a8:	imove	@m00, 0x000001
000292:0x0015f4b8:	cmpi	@m00, #switch
000292:0x0015f4c8:	bne	0x15f520
000297:0x0015f4d0:	icall	ToString(m_State)
000297:0x0015f4e0:	adds	@s01, _s'[hfsm] aborted & terminated sub machine=', #return
000297:0x0015f4f0:	moves	@s00, @s01
000297:0x0015f500:	call	fsmDebugPrint(@s00)
000298:0x0015f510:	jump	0x15f550
000298:0x0015f518:	jump	0x15f548
000298:0x0015f520:	imove	@m00, 0x000003
000298:0x0015f530:	cmpi	@m00, #switch
000298:0x0015f540:	bne	0x15f550
000302:0x0015f548:	jump	0x15f550
000305:0x0015f550:	movetm	#return, NULL
000305:0x0015f560:	release	t
000305:0x0015f568:	move	result, result
000305:0x0015f578:	rts
000305:0x0015f580:	release	t
000305:0x0015f588:	move	result, result
000305:0x0015f598:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::ProcessEvent()
000318:0x0015f758:	call	
000318:0x0015f768:	cmpcm	#return, null
000318:0x0015f778:	beq	0x15f8b0
000319:0x0015f780:	call	
000319:0x0015f790:	movefm	[0xd315b998], #return
000319:0x0015f7a0:	ncall	Type([0xd315b998])
000319:0x0015f7b0:	ncall	ToString(#return)
000319:0x0015f7c0:	adds	@s04, _s'[hfsm] SUB!::', #return
000319:0x0015f7d0:	moves	@s03, @s04
000319:0x0015f7e0:	adds	@s03, @s03, _s'::ProcessEvent('
000319:0x0015f7f0:	moves	@s02, @s03
000319:0x0015f800:	movefm	[0xd315b998], e
000319:0x0015f810:	pushr	#return
000319:0x0015f818:	ncall	Type([0xd315b998])
000319:0x0015f828:	movea	@m00, #return
000319:0x0015f838:	popr	#return
000319:0x0015f840:	ncall	ToString(@m00)
000319:0x0015f850:	adds	@s02, @s02, #return
000319:0x0015f860:	moves	@s01, @s02
000319:0x0015f870:	adds	@s01, @s01, _s')'
000319:0x0015f880:	moves	@s00, @s01
000319:0x0015f890:	call	fsmDebugPrint(@s00)
000319:0x0015f8a0:	release	#return
000319:0x0015f8a8:	jump	0x15f960
000321:0x0015f8b0:	movefm	[0xd315b998], e
000321:0x0015f8c0:	ncall	Type([0xd315b998])
000321:0x0015f8d0:	ncall	ToString(#return)
000321:0x0015f8e0:	adds	@s03, _s'[hfsm] root::ProcessEvent(', #return
000321:0x0015f8f0:	moves	@s02, @s03
000321:0x0015f900:	adds	@s02, @s02, _s' ='
000321:0x0015f910:	moves	@s01, @s02
000321:0x0015f920:	call	
000321:0x0015f930:	adds	@s01, @s01, #return
000321:0x0015f940:	moves	@s00, @s01
000321:0x0015f950:	call	fsmDebugPrint(@s00)
000321:0x0015f960:	release	#return
000324:0x0015f968:	cmpi	m_HasCompletions, _i0
000324:0x0015f978:	beq	0x15f990
000325:0x0015f980:	call	
000328:0x0015f990:	movefm	[0xb5b33ba8], m_State
000328:0x0015f9a0:	call	
000328:0x0015f9b0:	cmpi	#return, _i0
000328:0x0015f9c0:	beq	0x15faf8
000330:0x0015f9c8:	movefm	[0xb5b33ba8], m_State
000330:0x0015f9d8:	call	
000330:0x0015f9e8:	move	subfsm_res, #return
000332:0x0015f9f8:	move	#switch, subfsm_res
000332:0x0015fa08:	imove	@m00, 0x000000
000332:0x0015fa18:	cmpi	@m00, #switch
000332:0x0015fa28:	bne	0x15fa90
000336:0x0015fa30:	icall	ToString(m_State)
000336:0x0015fa40:	adds	@s01, _s'[hfsm] event processed by sub machine=', #return
000336:0x0015fa50:	moves	@s00, @s01
000336:0x0015fa60:	call	fsmDebugSpam(@s00)
000337:0x0015fa70:	move	#return, subfsm_res
000337:0x0015fa80:	rts
000337:0x0015fa88:	jump	0x15fab8
000337:0x0015fa90:	imove	@m00, 0x000001
000337:0x0015faa0:	cmpi	@m00, #switch
000337:0x0015fab0:	bne	0x15fac8
000341:0x0015fab8:	jump	0x15faf8
000341:0x0015fac0:	jump	0x15faf0
000341:0x0015fac8:	imove	@m00, 0x000003
000341:0x0015fad8:	cmpi	@m00, #switch
000341:0x0015fae8:	bne	0x15faf8
000345:0x0015faf0:	jump	0x15faf8
000351:0x0015faf8:	call	
000351:0x0015fb08:	move	i, #return
000352:0x0015fb18:	cmpi	i, _i-1
000352:0x0015fb28:	bne	0x15fbf8
000354:0x0015fb30:	icall	ToString(m_State)
000354:0x0015fb40:	adds	@s03, _s'[hfsm] event has no transition: src=', #return
000354:0x0015fb50:	moves	@s02, @s03
000354:0x0015fb60:	adds	@s02, @s02, _s' e='
000354:0x0015fb70:	moves	@s01, @s02
000354:0x0015fb80:	movefm	[0xd315b998], e
000354:0x0015fb90:	ncall	Type([0xd315b998])
000354:0x0015fba0:	ncall	ToString(#return)
000354:0x0015fbb0:	adds	@s01, @s01, #return
000354:0x0015fbc0:	moves	@s00, @s01
000354:0x0015fbd0:	call	fsmDebugPrint(@s00)
000355:0x0015fbe0:	imove	#return, 0x000003
000355:0x0015fbf0:	rts
000358:0x0015fbf8:	movefm	[0xb5c57408], m_Transitions
000358:0x0015fc08:	icall	
000358:0x0015fc18:	movetm	row, #return
000360:0x0015fc28:	movefm	@c00, row
000360:0x0015fc38:	cmpcm	m_dstState, NULL
000360:0x0015fc48:	beq	0x15fd48
000363:0x0015fc50:	movefm	@c01, row
000363:0x0015fc60:	movefm	[0xb5b33ba8], m_srcState
000363:0x0015fc70:	call	
000363:0x0015fc80:	movefm	@c02, #return
000363:0x0015fc90:	movefm	@c04, row
000363:0x0015fca0:	movefm	[0xb5b33ba8], m_dstState
000363:0x0015fcb0:	pushc	#return
000363:0x0015fcb8:	call	
000363:0x0015fcc8:	movefm	@c05, #return
000363:0x0015fcd8:	popc	#return
000363:0x0015fce0:	cmpc	@c02, @c05
000363:0x0015fcf0:	bne	0x15fd28
000364:0x0015fcf8:	call	
000364:0x0015fd10:	move	res, #return
000364:0x0015fd20:	jump	0x15fd38
000366:0x0015fd28:	call	Error(_s'cross-hierarchy transition or misconfigured transition detected!')
000366:0x0015fd38:	release	#return
000366:0x0015fd40:	jump	0x15fe00
000372:0x0015fd48:	movefm	@c00, row
000372:0x0015fd58:	movefm	[0xb5b33ba8], m_srcState
000372:0x0015fd68:	call	
000372:0x0015fd78:	movefm	@c01, #return
000372:0x0015fd88:	call	
000372:0x0015fd98:	cmpmc	@c01, #return
000372:0x0015fda8:	bne	0x15fde0
000373:0x0015fdb0:	call	
000373:0x0015fdc8:	move	res, #return
000373:0x0015fdd8:	jump	0x15fdf0
000375:0x0015fde0:	call	Error(_s'cross-hierarchy transition or misconfigured transition detected!')
000375:0x0015fdf0:	release	#return
000375:0x0015fdf8:	release	#return
000378:0x0015fe00:	move	#return, res
000378:0x0015fe10:	release	row
000378:0x0015fe18:	rts
000378:0x0015fe20:	release	row
000378:0x0015fe28:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::FindFirstUnguardedTransition()
000383:0x0015ff58:	movem	curr_state, m_State
000385:0x0015ff68:	movefm	[0xb5c57408], m_Transitions
000385:0x0015ff78:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000385:0x0015ff80:	move	count, #return
000386:0x0015ff90:	imove	i, 0x000000
000386:0x0015ffa0:	jump	0x15ffb0
000386:0x0015ffa8:	inc	i
000386:0x0015ffb0:	cmpi	i, count
000386:0x0015ffc0:	bge	0x1601e0
000388:0x0015ffc8:	movefm	[0xb5c57408], m_Transitions
000388:0x0015ffd8:	icall	
000388:0x0015ffe8:	movetm	t, #return
000389:0x0015fff8:	movefm	@c00, t
000389:0x00160008:	cmpm	m_srcState, curr_state
000389:0x00160018:	bne	0x1601d0
000389:0x00160020:	movefm	@c01, t
000389:0x00160030:	cmpcm	m_event, NULL
000389:0x00160040:	beq	0x1601d0
000389:0x00160048:	movefm	@c02, t
000389:0x00160058:	movefm	[0xd315b998], m_event
000389:0x00160068:	ncall	Type([0xd315b998])
000389:0x00160078:	movea	@m00, #return
000389:0x00160088:	movefm	[0xd315b998], e
000389:0x00160098:	pushr	#return
000389:0x001600a0:	ncall	Type([0xd315b998])
000389:0x001600b0:	movea	@m02, #return
000389:0x001600c0:	popr	#return
000389:0x001600c8:	cmpi	@m00, @m02
000389:0x001600d8:	bne	0x1601d0
000392:0x001600e0:	movefm	@c03, t
000392:0x001600f0:	cmpcm	m_guard, NULL
000392:0x00160100:	beq	0x160120
000392:0x00160108:	imove	hasGuard, 0x000001
000392:0x00160118:	jump	0x160130
000392:0x00160120:	imove	hasGuard, 0x000000
000393:0x00160130:	cmpi	hasGuard, _i0
000393:0x00160140:	beq	0x1601a8
000393:0x00160148:	cmpi	hasGuard, _i0
000393:0x00160158:	beq	0x1601d0
000393:0x00160160:	movefm	@c00, t
000393:0x00160170:	movefm	@c01, m_guard
000393:0x00160180:	call	
000393:0x00160190:	cmpi	#return, _i0
000393:0x001601a0:	beq	0x1601d0
000395:0x001601a8:	move	#return, i
000395:0x001601b8:	release	t
000395:0x001601c0:	release	curr_state
000395:0x001601c8:	rts
000395:0x001601d0:	release	t
000395:0x001601d8:	jump	0x15ffa8
000400:0x001601e0:	imove	#return, 0xffffffff
000400:0x001601f0:	release	curr_state
000400:0x001601f8:	rts
000400:0x00160200:	release	curr_state
000400:0x00160208:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::FindTransitionState()
000405:0x001602b0:	movem	curr_state, s
000407:0x001602c0:	movefm	[0xb5c57408], m_Transitions
000407:0x001602d0:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000407:0x001602d8:	move	count, #return
000408:0x001602e8:	imove	i, 0x000000
000408:0x001602f8:	jump	0x160308
000408:0x00160300:	inc	i
000408:0x00160308:	cmpi	i, count
000408:0x00160318:	bge	0x160480
000410:0x00160320:	movefm	[0xb5c57408], m_Transitions
000410:0x00160330:	icall	
000410:0x00160340:	movetm	t, #return
000411:0x00160350:	movefm	@c00, t
000411:0x00160360:	cmpm	m_srcState, curr_state
000411:0x00160370:	bne	0x160470
000411:0x00160378:	movefm	@c01, t
000411:0x00160388:	cmpcm	m_event, NULL
000411:0x00160398:	beq	0x160470
000411:0x001603a0:	movefm	@c02, t
000411:0x001603b0:	movefm	[0xd315b998], m_event
000411:0x001603c0:	ncall	Type([0xd315b998])
000411:0x001603d0:	movea	@m00, #return
000411:0x001603e0:	movefm	[0xd315b998], e
000411:0x001603f0:	pushr	#return
000411:0x001603f8:	ncall	Type([0xd315b998])
000411:0x00160408:	movea	@m02, #return
000411:0x00160418:	popr	#return
000411:0x00160420:	cmpi	@m00, @m02
000411:0x00160430:	bne	0x160470
000413:0x00160438:	movefm	@c04, t
000413:0x00160448:	movem	#return, m_dstState
000413:0x00160458:	release	t
000413:0x00160460:	release	curr_state
000413:0x00160468:	rts
000413:0x00160470:	release	t
000413:0x00160478:	jump	0x160300
000416:0x00160480:	movetm	#return, null
000416:0x00160490:	release	curr_state
000416:0x00160498:	rts
000416:0x001604a0:	release	curr_state
000416:0x001604a8:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::FindGuardedTransitionState()
000421:0x00160578:	movem	curr_state, s
000423:0x00160588:	movefm	[0xb5c57408], m_Transitions
000423:0x00160598:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000423:0x001605a0:	move	count, #return
000424:0x001605b0:	imove	i, 0x000000
000424:0x001605c0:	jump	0x1605d0
000424:0x001605c8:	inc	i
000424:0x001605d0:	cmpi	i, count
000424:0x001605e0:	bge	0x160810
000426:0x001605e8:	movefm	[0xb5c57408], m_Transitions
000426:0x001605f8:	icall	
000426:0x00160608:	movetm	t, #return
000427:0x00160618:	movefm	@c00, t
000427:0x00160628:	cmpm	m_srcState, curr_state
000427:0x00160638:	bne	0x160800
000427:0x00160640:	movefm	@c01, t
000427:0x00160650:	cmpcm	m_event, NULL
000427:0x00160660:	beq	0x160800
000427:0x00160668:	movefm	@c02, t
000427:0x00160678:	movefm	[0xd315b998], m_event
000427:0x00160688:	ncall	Type([0xd315b998])
000427:0x00160698:	movea	@m00, #return
000427:0x001606a8:	movefm	[0xd315b998], e
000427:0x001606b8:	pushr	#return
000427:0x001606c0:	ncall	Type([0xd315b998])
000427:0x001606d0:	movea	@m02, #return
000427:0x001606e0:	popr	#return
000427:0x001606e8:	cmpi	@m00, @m02
000427:0x001606f8:	bne	0x160800
000429:0x00160700:	movefm	@c03, t
000429:0x00160710:	cmpcm	m_guard, NULL
000429:0x00160720:	beq	0x160740
000429:0x00160728:	imove	hasGuard, 0x000001
000429:0x00160738:	jump	0x160750
000429:0x00160740:	imove	hasGuard, 0x000000
000430:0x00160750:	cmpi	hasGuard, _i0
000430:0x00160760:	beq	0x1607c8
000430:0x00160768:	cmpi	hasGuard, _i0
000430:0x00160778:	beq	0x160800
000430:0x00160780:	movefm	@c00, t
000430:0x00160790:	movefm	@c01, m_guard
000430:0x001607a0:	call	
000430:0x001607b0:	cmpi	#return, _i0
000430:0x001607c0:	beq	0x160800
000432:0x001607c8:	movefm	@c01, t
000432:0x001607d8:	movem	#return, m_dstState
000432:0x001607e8:	release	t
000432:0x001607f0:	release	curr_state
000432:0x001607f8:	rts
000432:0x00160800:	release	t
000432:0x00160808:	jump	0x1605c8
000436:0x00160810:	movetm	#return, null
000436:0x00160820:	release	curr_state
000436:0x00160828:	rts
000436:0x00160830:	release	curr_state
000436:0x00160838:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::FindFirstCompletionTransition()
000441:0x00160908:	call	
000441:0x00160918:	cmpi	#return, _i0
000441:0x00160928:	beq	0x160ba8
000443:0x00160930:	movem	curr_state, m_State
000445:0x00160940:	movefm	[0xb5c57408], m_Transitions
000445:0x00160950:	ncalli	array<@FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>>.Count()
000445:0x00160958:	move	count, #return
000446:0x00160968:	imove	i, 0x000000
000446:0x00160978:	jump	0x160988
000446:0x00160980:	inc	i
000446:0x00160988:	cmpi	i, count
000446:0x00160998:	bge	0x160ba0
000448:0x001609a0:	movefm	[0xb5c57408], m_Transitions
000448:0x001609b0:	icall	
000448:0x001609c0:	movetm	t, #return
000451:0x001609d0:	movefm	@c00, t
000451:0x001609e0:	movefm	[0xd315b998], m_srcState
000451:0x001609f0:	ncall	Type([0xd315b998])
000451:0x00160a00:	movea	@m00, #return
000451:0x00160a10:	movefm	[0xd315b998], curr_state
000451:0x00160a20:	pushr	#return
000451:0x00160a28:	ncall	Type([0xd315b998])
000451:0x00160a38:	movea	@m02, #return
000451:0x00160a48:	popr	#return
000451:0x00160a50:	cmpi	@m00, @m02
000451:0x00160a60:	bne	0x160b90
000451:0x00160a68:	movefm	@c01, t
000451:0x00160a78:	cmpcm	m_event, NULL
000451:0x00160a88:	bne	0x160b90
000453:0x00160a90:	movefm	@c02, t
000453:0x00160aa0:	cmpcm	m_guard, NULL
000453:0x00160ab0:	beq	0x160ad0
000453:0x00160ab8:	imove	hasGuard, 0x000001
000453:0x00160ac8:	jump	0x160ae0
000453:0x00160ad0:	imove	hasGuard, 0x000000
000454:0x00160ae0:	cmpi	hasGuard, _i0
000454:0x00160af0:	beq	0x160b68
000454:0x00160af8:	cmpi	hasGuard, _i0
000454:0x00160b08:	beq	0x160b90
000454:0x00160b10:	movefm	@c00, t
000454:0x00160b20:	movefm	@c01, m_guard
000454:0x00160b30:	movetm	e, NULL
000454:0x00160b40:	call	
000454:0x00160b50:	cmpi	#return, _i0
000454:0x00160b60:	beq	0x160b90
000456:0x00160b68:	move	#return, i
000456:0x00160b78:	release	t
000456:0x00160b80:	release	curr_state
000456:0x00160b88:	rts
000456:0x00160b90:	release	t
000456:0x00160b98:	jump	0x160980
000456:0x00160ba0:	release	curr_state
000461:0x00160ba8:	imove	#return, 0xffffffff
000461:0x00160bb8:	rts
000461:0x00160bc0:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::ProcessLocalTransition()
000473:0x00160c40:	movefm	@c00, t
000473:0x00160c50:	icall	ToString(m_srcState)
000473:0x00160c60:	adds	@s09, _s'[hfsm] (local) state=', #return
000473:0x00160c70:	moves	@s08, @s09
000473:0x00160c80:	adds	@s08, @s08, _s'-------- event='
000473:0x00160c90:	moves	@s07, @s08
000473:0x00160ca0:	icall	ToString(e)
000473:0x00160cb0:	adds	@s07, @s07, #return
000473:0x00160cc0:	moves	@s06, @s07
000473:0x00160cd0:	adds	@s06, @s06, _s'[G='
000473:0x00160ce0:	moves	@s05, @s06
000473:0x00160cf0:	movefm	@c01, t
000473:0x00160d00:	icall	ToString(m_guard)
000473:0x00160d10:	adds	@s05, @s05, #return
000473:0x00160d20:	moves	@s04, @s05
000473:0x00160d30:	adds	@s04, @s04, _s']/A='
000473:0x00160d40:	moves	@s03, @s04
000473:0x00160d50:	movefm	@c02, t
000473:0x00160d60:	icall	ToString(m_action)
000473:0x00160d70:	adds	@s03, @s03, #return
000473:0x00160d80:	moves	@s02, @s03
000473:0x00160d90:	adds	@s02, @s02, _s' --------|> dst='
000473:0x00160da0:	moves	@s01, @s02
000473:0x00160db0:	movefm	@c03, t
000473:0x00160dc0:	icall	ToString(m_dstState)
000473:0x00160dd0:	adds	@s01, @s01, #return
000473:0x00160de0:	moves	@s00, @s01
000473:0x00160df0:	call	fsmDebugPrint(@s00)
000475:0x00160e00:	movefm	[0xb5b33ba8], m_State
000475:0x00160e10:	call	
000477:0x00160e20:	movefm	@c00, t
000477:0x00160e30:	cmpcm	m_action, null
000477:0x00160e40:	beq	0x160e78
000478:0x00160e48:	movefm	@c00, t
000478:0x00160e58:	movefm	@c01, m_action
000478:0x00160e68:	call	
000480:0x00160e78:	movefm	@c01, t
000480:0x00160e88:	movem	m_State, m_dstState
000482:0x00160e98:	movefm	@c00, t
000482:0x00160ea8:	cmpcm	m_dstState, NULL
000482:0x00160eb8:	beq	0x161020
000484:0x00160ec0:	movefm	[0xb5b33ba8], m_State
000484:0x00160ed0:	call	
000486:0x00160ee0:	call	
000486:0x00160ef0:	cmpcm	#return, null
000486:0x00160f00:	beq	0x160f78
000487:0x00160f08:	call	
000487:0x00160f18:	movefm	@c01, t
000487:0x00160f28:	movem	src, m_srcState
000487:0x00160f38:	movefm	@c02, t
000487:0x00160f48:	movem	dst, m_dstState
000487:0x00160f58:	call	
000487:0x00160f70:	release	#return
000487:0x00160f78:	release	#return
000489:0x00160f80:	cmpcm	m_State, null
000489:0x00160f90:	beq	0x161000
000490:0x00160f98:	movefm	@c01, t
000490:0x00160fa8:	movem	src, m_srcState
000490:0x00160fb8:	movefm	@c02, t
000490:0x00160fc8:	movem	dst, m_dstState
000490:0x00160fd8:	movefm	[0xb5b33ba8], m_State
000490:0x00160fe8:	call	
000492:0x00161000:	imove	#return, 0x000000
000492:0x00161010:	rts
000492:0x00161018:	jump	0x161168
000496:0x00161020:	movefm	@c00, t
000496:0x00161030:	icall	ToString(m_srcState)
000496:0x00161040:	adds	@s03, _s'[hfsm] terminating fsm: state=', #return
000496:0x00161050:	moves	@s02, @s03
000496:0x00161060:	adds	@s02, @s02, _s' event='
000496:0x00161070:	moves	@s01, @s02
000496:0x00161080:	icall	ToString(e)
000496:0x00161090:	adds	@s01, @s01, #return
000496:0x001610a0:	moves	@s00, @s01
000496:0x001610b0:	call	fsmDebugPrint(@s00)
000498:0x001610c0:	call	
000498:0x001610d0:	cmpcm	#return, null
000498:0x001610e0:	beq	0x161148
000499:0x001610e8:	call	
000499:0x001610f8:	movefm	@c01, t
000499:0x00161108:	movem	src, m_srcState
000499:0x00161118:	movetm	dst, NULL
000499:0x00161128:	call	
000499:0x00161140:	release	#return
000499:0x00161148:	release	#return
000500:0x00161150:	imove	#return, 0x000001
000500:0x00161160:	rts
000500:0x00161168:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::LocalTransition()
000511:0x001611c0:	movefm	[0xb5c57408], m_Transitions
000511:0x001611d0:	icall	
000511:0x001611e0:	movetm	t, #return
000512:0x001611f0:	call	
000512:0x00161208:	move	ret, #return
000513:0x00161218:	move	#return, ret
000513:0x00161228:	release	t
000513:0x00161230:	rts
000513:0x00161238:	release	t
000513:0x00161240:	rts
HFSMBase<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>::ProcessCompletionTransitions()
000518:0x001612f0:	call	
000518:0x00161300:	move	completionIdx, #return
000519:0x00161310:	cmpi	completionIdx, _i-1
000519:0x00161320:	beq	0x161580
000521:0x00161328:	movefm	[0xb5c57408], m_Transitions
000521:0x00161338:	icall	
000521:0x00161348:	movetm	row, #return
000523:0x00161358:	movefm	@c00, row
000523:0x00161368:	cmpcm	m_dstState, NULL
000523:0x00161378:	beq	0x161488
000526:0x00161380:	movefm	@c01, row
000526:0x00161390:	movefm	[0xb5b33ba8], m_srcState
000526:0x001613a0:	call	
000526:0x001613b0:	movefm	@c02, #return
000526:0x001613c0:	movefm	@c04, row
000526:0x001613d0:	movefm	[0xb5b33ba8], m_dstState
000526:0x001613e0:	pushc	#return
000526:0x001613e8:	call	
000526:0x001613f8:	movefm	@c05, #return
000526:0x00161408:	popc	#return
000526:0x00161410:	cmpc	@c02, @c05
000526:0x00161420:	bne	0x161468
000527:0x00161428:	movetm	e, NULL
000527:0x00161438:	call	
000527:0x00161450:	move	res, #return
000527:0x00161460:	jump	0x161478
000529:0x00161468:	call	Error(_s'cross-hierarchy transition or misconfigured transition detected!')
000529:0x00161478:	release	#return
000529:0x00161480:	jump	0x161550
000535:0x00161488:	movefm	@c00, row
000535:0x00161498:	movefm	[0xb5b33ba8], m_srcState
000535:0x001614a8:	call	
000535:0x001614b8:	movefm	@c01, #return
000535:0x001614c8:	call	
000535:0x001614d8:	cmpmc	@c01, #return
000535:0x001614e8:	bne	0x161530
000536:0x001614f0:	movetm	e, NULL
000536:0x00161500:	call	
000536:0x00161518:	move	res, #return
000536:0x00161528:	jump	0x161540
000538:0x00161530:	call	Error(_s'cross-hierarchy transition or misconfigured transition detected!')
000538:0x00161540:	release	#return
000538:0x00161548:	release	#return
000542:0x00161550:	call	
000542:0x00161560:	move	completionIdx, #return
000542:0x00161570:	release	row
000542:0x00161578:	jump	0x161310
000544:0x00161580:	imove	#return, 0x000003
000544:0x00161590:	rts
000544:0x00161598:	rts
array<LOD>::InsertAll()
//scripts/1_Core/proto\enscript.c
000427:0x00161b90:	imove	i, 0x000000
000427:0x00161ba0:	jump	0x161bc0
000427:0x00161ba8:	move	@m00, i
000427:0x00161bb8:	inc	i
000427:0x00161bc0:	ncalli	array<LOD>.Count()
000427:0x00161bc8:	cmpi	i, #return
000427:0x00161bd8:	bge	0x161c08
000429:0x00161be0:	icall	
000429:0x00161bf0:	icall	
000429:0x00161c00:	jump	0x161ba8
000429:0x00161c08:	rts
array<LOD>::RemoveItem()
000479:0x00161c38:	icall	
000479:0x00161c48:	move	remove_index, #return
000481:0x00161c58:	cmpi	remove_index, _i0
000481:0x00161c68:	blt	0x161c80
000483:0x00161c70:	ncalli	array<LOD>.RemoveOrdered(remove_index)
000483:0x00161c80:	rts
array<LOD>::RemoveItemUnOrdered()
000489:0x00161cb0:	icall	
000489:0x00161cc0:	move	remove_index, #return
000491:0x00161cd0:	cmpi	remove_index, _i0
000491:0x00161ce0:	blt	0x161cf8
000493:0x00161ce8:	ncalli	array<LOD>.Remove(remove_index)
000493:0x00161cf8:	rts
array<LOD>::IsValidIndex()
000499:0x00161d00:	cmpi	index, _i-1
000499:0x00161d10:	ble	0x161d50
000499:0x00161d18:	ncalli	array<LOD>.Count()
000499:0x00161d20:	cmpi	index, #return
000499:0x00161d30:	bge	0x161d50
000499:0x00161d38:	imove	#return, 0x000001
000499:0x00161d48:	jump	0x161d60
000499:0x00161d50:	imove	#return, 0x000000
000499:0x00161d60:	rts
000499:0x00161d68:	rts
array<LOD>::Debug()
000525:0x00161dc0:	ncalli	array<LOD>.Count()
000525:0x00161dc8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00161df8:	icall	Print(#return)
000526:0x00161e08:	imove	i, 0x000000
000526:0x00161e18:	jump	0x161e38
000526:0x00161e20:	move	@m00, i
000526:0x00161e30:	inc	i
000526:0x00161e38:	ncalli	array<LOD>.Count()
000526:0x00161e40:	cmpi	i, #return
000526:0x00161e50:	bge	0x161ec0
000528:0x00161e58:	icall	
000528:0x00161e68:	movec	item, #return
000529:0x00161e78:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00161ea8:	icall	Print(#return)
000529:0x00161eb8:	jump	0x161e20
000529:0x00161ec0:	rts
array<LOD>::GetRandomIndex()
000544:0x00161ec8:	ncalli	array<LOD>.Count()
000544:0x00161ed0:	move	@m00, #return
000544:0x00161ee0:	cmpi	@m00, _i0
000544:0x00161ef0:	ble	0x161f28
000546:0x00161ef8:	ncalli	array<LOD>.Count()
000546:0x00161f00:	icall	RandomInt(_i0, #return)
000546:0x00161f10:	move	#return, #return
000546:0x00161f20:	rts
000549:0x00161f28:	imove	#return, 0xffffffff
000549:0x00161f38:	rts
000549:0x00161f40:	rts
array<LOD>::GetRandomElement()
000563:0x00161f48:	call	
000563:0x00161f58:	icall	
000563:0x00161f68:	movec	#return, #return
000563:0x00161f78:	rts
000563:0x00161f80:	rts
array<LOD>::SwapItems()
000568:0x00161fb0:	icall	
000568:0x00161fc0:	movec	item1, #return
000569:0x00161fd0:	icall	
000569:0x00161fe0:	icall	
000570:0x00161ff0:	icall	
000570:0x00162000:	rts
array<LOD>::InsertArray()
000575:0x00162058:	imove	i, 0x000000
000575:0x00162068:	jump	0x162088
000575:0x00162070:	move	@m00, i
000575:0x00162080:	inc	i
000575:0x00162088:	ncalli	array<LOD>.Count()
000575:0x00162090:	cmpi	i, #return
000575:0x001620a0:	bge	0x1620e0
000577:0x001620a8:	icall	
000577:0x001620b8:	movec	item, #return
000578:0x001620c8:	icall	
000578:0x001620d8:	jump	0x162070
000578:0x001620e0:	rts
array<LOD>::Invert()
000584:0x00162160:	imove	left, 0x000000
000585:0x00162170:	ncalli	array<LOD>.Count()
000585:0x00162178:	subi	right, #return, _i1
000586:0x00162188:	cmpi	right, _i0
000586:0x00162198:	ble	0x162240
000588:0x001621a0:	cmpi	left, right
000588:0x001621b0:	bge	0x162240
000590:0x001621b8:	icall	
000590:0x001621c8:	movec	temp, #return
000591:0x001621d8:	move	@m00, left
000591:0x001621e8:	inc	left
000591:0x001621f0:	icall	
000591:0x00162200:	icall	
000592:0x00162210:	move	@m00, right
000592:0x00162220:	dec	right
000592:0x00162228:	icall	
000592:0x00162238:	jump	0x1621a0
000592:0x00162240:	rts
array<LOD>::MoveIndex()
000612:0x00162298:	ncalli	array<LOD>.Count()
000612:0x001622a0:	move	count, #return
000613:0x001622b0:	move	new_index, curr_index
000615:0x001622c0:	cmpi	move_number, _i0
000615:0x001622d0:	ble	0x1622f8
000617:0x001622d8:	addi	@m00, curr_index, move_number
000617:0x001622e8:	move	new_index, @m00
000620:0x001622f8:	cmpi	move_number, _i0
000620:0x00162308:	bge	0x1623b0
000622:0x00162310:	subi	@m00, curr_index, move_number
000622:0x00162320:	move	new_index, @m00
000624:0x00162330:	cmpi	new_index, _i0
000624:0x00162340:	bge	0x1623b0
000626:0x00162348:	subi	@m01, _i0, count
000626:0x00162358:	cmpi	new_index, @m01
000626:0x00162368:	bgt	0x162390
000628:0x00162370:	modi	@m00, new_index, count
000628:0x00162380:	move	new_index, @m00
000631:0x00162390:	addi	@m00, new_index, count
000631:0x001623a0:	move	new_index, @m00
000635:0x001623b0:	cmpi	new_index, count
000635:0x001623c0:	blt	0x1623e8
000637:0x001623c8:	modi	@m00, new_index, count
000637:0x001623d8:	move	new_index, @m00
000641:0x001623e8:	move	#return, new_index
000641:0x001623f8:	rts
000641:0x00162400:	rts
array<LOD>::ShuffleArray()
000646:0x00162430:	imove	i, 0x000000
000646:0x00162440:	jump	0x162460
000646:0x00162448:	move	@m00, i
000646:0x00162458:	inc	i
000646:0x00162460:	ncalli	array<LOD>.Count()
000646:0x00162468:	cmpi	i, #return
000646:0x00162478:	bge	0x1624b0
000648:0x00162480:	call	
000648:0x00162490:	call	
000648:0x001624a8:	jump	0x162448
000648:0x001624b0:	rts
array<LOD>::DifferentAtPosition()
000666:0x001624e0:	ncalli	array<LOD>.Count()
000666:0x001624e8:	move	@m00, #return
000666:0x001624f8:	push	#return
000666:0x00162500:	ncalli	array<LOD>.Count()
000666:0x00162508:	move	@m02, #return
000666:0x00162518:	pop	#return
000666:0x00162520:	cmpi	@m00, @m02
000666:0x00162530:	beq	0x162560
000668:0x00162538:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00162548:	imove	#return, 0xffffffff
000669:0x00162558:	rts
000672:0x00162560:	imove	i, 0x000000
000672:0x00162570:	jump	0x162580
000672:0x00162578:	inc	i
000672:0x00162580:	ncalli	array<LOD>.Count()
000672:0x00162588:	cmpi	i, #return
000672:0x00162598:	bge	0x162628
000674:0x001625a0:	icall	
000674:0x001625b0:	movec	@c00, #return
000674:0x001625c0:	pushc	#return
000674:0x001625c8:	icall	
000674:0x001625d8:	movec	@c02, #return
000674:0x001625e8:	popc	#return
000674:0x001625f0:	cmpc	@c00, @c02
000674:0x00162600:	beq	0x162620
000676:0x00162608:	move	#return, i
000676:0x00162618:	rts
000676:0x00162620:	jump	0x162578
000680:0x00162628:	imove	#return, 0xffffffff
000680:0x00162638:	rts
000680:0x00162640:	rts
array<Param>::InsertAll()
000427:0x00162e70:	imove	i, 0x000000
000427:0x00162e80:	jump	0x162ea0
000427:0x00162e88:	move	@m00, i
000427:0x00162e98:	inc	i
000427:0x00162ea0:	ncalli	array<Param>.Count()
000427:0x00162ea8:	cmpi	i, #return
000427:0x00162eb8:	bge	0x162ee8
000429:0x00162ec0:	icall	
000429:0x00162ed0:	icall	
000429:0x00162ee0:	jump	0x162e88
000429:0x00162ee8:	rts
array<Param>::RemoveItem()
000479:0x00162f18:	movefm	@c00, value
000479:0x00162f28:	icall	
000479:0x00162f38:	move	remove_index, #return
000481:0x00162f48:	cmpi	remove_index, _i0
000481:0x00162f58:	blt	0x162f70
000483:0x00162f60:	ncalli	array<Param>.RemoveOrdered(remove_index)
000483:0x00162f70:	rts
array<Param>::RemoveItemUnOrdered()
000489:0x00162fa0:	movefm	@c00, value
000489:0x00162fb0:	icall	
000489:0x00162fc0:	move	remove_index, #return
000491:0x00162fd0:	cmpi	remove_index, _i0
000491:0x00162fe0:	blt	0x162ff8
000493:0x00162fe8:	ncalli	array<Param>.Remove(remove_index)
000493:0x00162ff8:	rts
array<Param>::IsValidIndex()
000499:0x00163000:	cmpi	index, _i-1
000499:0x00163010:	ble	0x163050
000499:0x00163018:	ncalli	array<Param>.Count()
000499:0x00163020:	cmpi	index, #return
000499:0x00163030:	bge	0x163050
000499:0x00163038:	imove	#return, 0x000001
000499:0x00163048:	jump	0x163060
000499:0x00163050:	imove	#return, 0x000000
000499:0x00163060:	rts
000499:0x00163068:	rts
array<Param>::Debug()
000525:0x001630c0:	ncalli	array<Param>.Count()
000525:0x001630c8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001630f8:	icall	Print(#return)
000526:0x00163108:	imove	i, 0x000000
000526:0x00163118:	jump	0x163138
000526:0x00163120:	move	@m00, i
000526:0x00163130:	inc	i
000526:0x00163138:	ncalli	array<Param>.Count()
000526:0x00163140:	cmpi	i, #return
000526:0x00163150:	bge	0x1631c8
000528:0x00163158:	icall	
000528:0x00163168:	movetm	item, #return
000529:0x00163178:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001631a8:	icall	Print(#return)
000529:0x001631b8:	release	item
000529:0x001631c0:	jump	0x163120
000529:0x001631c8:	rts
array<Param>::GetRandomIndex()
000544:0x001631d0:	ncalli	array<Param>.Count()
000544:0x001631d8:	move	@m00, #return
000544:0x001631e8:	cmpi	@m00, _i0
000544:0x001631f8:	ble	0x163230
000546:0x00163200:	ncalli	array<Param>.Count()
000546:0x00163208:	icall	RandomInt(_i0, #return)
000546:0x00163218:	move	#return, #return
000546:0x00163228:	rts
000549:0x00163230:	imove	#return, 0xffffffff
000549:0x00163240:	rts
000549:0x00163248:	rts
array<Param>::GetRandomElement()
000563:0x00163250:	call	
000563:0x00163260:	icall	
000563:0x00163270:	movetm	#return, #return
000563:0x00163280:	rts
000563:0x00163288:	rts
array<Param>::SwapItems()
000568:0x001632b8:	icall	
000568:0x001632c8:	movetm	item1, #return
000569:0x001632d8:	icall	
000569:0x001632e8:	icall	
000570:0x001632f8:	movefm	@c00, item1
000570:0x00163308:	icall	
000570:0x00163318:	release	item1
000570:0x00163320:	rts
array<Param>::InsertArray()
000575:0x00163378:	imove	i, 0x000000
000575:0x00163388:	jump	0x1633a8
000575:0x00163390:	move	@m00, i
000575:0x001633a0:	inc	i
000575:0x001633a8:	ncalli	array<Param>.Count()
000575:0x001633b0:	cmpi	i, #return
000575:0x001633c0:	bge	0x163418
000577:0x001633c8:	icall	
000577:0x001633d8:	movetm	item, #return
000578:0x001633e8:	movefm	@c00, item
000578:0x001633f8:	icall	
000578:0x00163408:	release	item
000578:0x00163410:	jump	0x163390
000578:0x00163418:	rts
array<Param>::Invert()
000584:0x00163498:	imove	left, 0x000000
000585:0x001634a8:	ncalli	array<Param>.Count()
000585:0x001634b0:	subi	right, #return, _i1
000586:0x001634c0:	cmpi	right, _i0
000586:0x001634d0:	ble	0x163590
000588:0x001634d8:	cmpi	left, right
000588:0x001634e8:	bge	0x163590
000590:0x001634f0:	icall	
000590:0x00163500:	movetm	temp, #return
000591:0x00163510:	move	@m00, left
000591:0x00163520:	inc	left
000591:0x00163528:	icall	
000591:0x00163538:	icall	
000592:0x00163548:	move	@m00, right
000592:0x00163558:	dec	right
000592:0x00163560:	movefm	@c00, temp
000592:0x00163570:	icall	
000592:0x00163580:	release	temp
000592:0x00163588:	jump	0x1634d8
000592:0x00163590:	rts
array<Param>::MoveIndex()
000612:0x001635e8:	ncalli	array<Param>.Count()
000612:0x001635f0:	move	count, #return
000613:0x00163600:	move	new_index, curr_index
000615:0x00163610:	cmpi	move_number, _i0
000615:0x00163620:	ble	0x163648
000617:0x00163628:	addi	@m00, curr_index, move_number
000617:0x00163638:	move	new_index, @m00
000620:0x00163648:	cmpi	move_number, _i0
000620:0x00163658:	bge	0x163700
000622:0x00163660:	subi	@m00, curr_index, move_number
000622:0x00163670:	move	new_index, @m00
000624:0x00163680:	cmpi	new_index, _i0
000624:0x00163690:	bge	0x163700
000626:0x00163698:	subi	@m01, _i0, count
000626:0x001636a8:	cmpi	new_index, @m01
000626:0x001636b8:	bgt	0x1636e0
000628:0x001636c0:	modi	@m00, new_index, count
000628:0x001636d0:	move	new_index, @m00
000631:0x001636e0:	addi	@m00, new_index, count
000631:0x001636f0:	move	new_index, @m00
000635:0x00163700:	cmpi	new_index, count
000635:0x00163710:	blt	0x163738
000637:0x00163718:	modi	@m00, new_index, count
000637:0x00163728:	move	new_index, @m00
000641:0x00163738:	move	#return, new_index
000641:0x00163748:	rts
000641:0x00163750:	rts
array<Param>::ShuffleArray()
000646:0x00163780:	imove	i, 0x000000
000646:0x00163790:	jump	0x1637b0
000646:0x00163798:	move	@m00, i
000646:0x001637a8:	inc	i
000646:0x001637b0:	ncalli	array<Param>.Count()
000646:0x001637b8:	cmpi	i, #return
000646:0x001637c8:	bge	0x163800
000648:0x001637d0:	call	
000648:0x001637e0:	call	
000648:0x001637f8:	jump	0x163798
000648:0x00163800:	rts
array<Param>::DifferentAtPosition()
000666:0x00163830:	ncalli	array<Param>.Count()
000666:0x00163838:	move	@m00, #return
000666:0x00163848:	push	#return
000666:0x00163850:	ncalli	array<Param>.Count()
000666:0x00163858:	move	@m02, #return
000666:0x00163868:	pop	#return
000666:0x00163870:	cmpi	@m00, @m02
000666:0x00163880:	beq	0x1638b0
000668:0x00163888:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00163898:	imove	#return, 0xffffffff
000669:0x001638a8:	rts
000672:0x001638b0:	imove	i, 0x000000
000672:0x001638c0:	jump	0x1638d0
000672:0x001638c8:	inc	i
000672:0x001638d0:	ncalli	array<Param>.Count()
000672:0x001638d8:	cmpi	i, #return
000672:0x001638e8:	bge	0x163978
000674:0x001638f0:	icall	
000674:0x00163900:	movec	@c00, #return
000674:0x00163910:	pushc	#return
000674:0x00163918:	icall	
000674:0x00163928:	movec	@c02, #return
000674:0x00163938:	popc	#return
000674:0x00163940:	cmpc	@c00, @c02
000674:0x00163950:	beq	0x163970
000676:0x00163958:	move	#return, i
000676:0x00163968:	rts
000676:0x00163970:	jump	0x1638c8
000680:0x00163978:	imove	#return, 0xffffffff
000680:0x00163988:	rts
000680:0x00163990:	rts
array<@Param>::InsertAll()
000427:0x00163da8:	imove	i, 0x000000
000427:0x00163db8:	jump	0x163dd8
000427:0x00163dc0:	move	@m00, i
000427:0x00163dd0:	inc	i
000427:0x00163dd8:	ncalli	array<Param>.Count()
000427:0x00163de0:	cmpi	i, #return
000427:0x00163df0:	bge	0x163e20
000429:0x00163df8:	icall	
000429:0x00163e08:	icall	
000429:0x00163e18:	jump	0x163dc0
000429:0x00163e20:	rts
array<@Param>::RemoveItem()
000479:0x00163e50:	movefm	@c00, value
000479:0x00163e60:	icall	
000479:0x00163e70:	move	remove_index, #return
000481:0x00163e80:	cmpi	remove_index, _i0
000481:0x00163e90:	blt	0x163ea8
000483:0x00163e98:	ncalli	array<@Param>.RemoveOrdered(remove_index)
000483:0x00163ea8:	rts
array<@Param>::RemoveItemUnOrdered()
000489:0x00163ed8:	movefm	@c00, value
000489:0x00163ee8:	icall	
000489:0x00163ef8:	move	remove_index, #return
000491:0x00163f08:	cmpi	remove_index, _i0
000491:0x00163f18:	blt	0x163f30
000493:0x00163f20:	ncalli	array<@Param>.Remove(remove_index)
000493:0x00163f30:	rts
array<@Param>::IsValidIndex()
000499:0x00163f38:	cmpi	index, _i-1
000499:0x00163f48:	ble	0x163f88
000499:0x00163f50:	ncalli	array<@Param>.Count()
000499:0x00163f58:	cmpi	index, #return
000499:0x00163f68:	bge	0x163f88
000499:0x00163f70:	imove	#return, 0x000001
000499:0x00163f80:	jump	0x163f98
000499:0x00163f88:	imove	#return, 0x000000
000499:0x00163f98:	rts
000499:0x00163fa0:	rts
array<@Param>::Debug()
000525:0x00163ff8:	ncalli	array<@Param>.Count()
000525:0x00164000:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00164030:	icall	Print(#return)
000526:0x00164040:	imove	i, 0x000000
000526:0x00164050:	jump	0x164070
000526:0x00164058:	move	@m00, i
000526:0x00164068:	inc	i
000526:0x00164070:	ncalli	array<@Param>.Count()
000526:0x00164078:	cmpi	i, #return
000526:0x00164088:	bge	0x164100
000528:0x00164090:	icall	
000528:0x001640a0:	movetm	item, #return
000529:0x001640b0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001640e0:	icall	Print(#return)
000529:0x001640f0:	release	item
000529:0x001640f8:	jump	0x164058
000529:0x00164100:	rts
array<@Param>::GetRandomIndex()
000544:0x00164108:	ncalli	array<@Param>.Count()
000544:0x00164110:	move	@m00, #return
000544:0x00164120:	cmpi	@m00, _i0
000544:0x00164130:	ble	0x164168
000546:0x00164138:	ncalli	array<@Param>.Count()
000546:0x00164140:	icall	RandomInt(_i0, #return)
000546:0x00164150:	move	#return, #return
000546:0x00164160:	rts
000549:0x00164168:	imove	#return, 0xffffffff
000549:0x00164178:	rts
000549:0x00164180:	rts
array<@Param>::GetRandomElement()
000563:0x00164188:	call	
000563:0x00164198:	icall	
000563:0x001641a8:	movetm	#return, #return
000563:0x001641b8:	rts
000563:0x001641c0:	rts
array<@Param>::SwapItems()
000568:0x001641f0:	icall	
000568:0x00164200:	movetm	item1, #return
000569:0x00164210:	icall	
000569:0x00164220:	icall	
000570:0x00164230:	movefm	@c00, item1
000570:0x00164240:	icall	
000570:0x00164250:	release	item1
000570:0x00164258:	rts
array<@Param>::InsertArray()
000575:0x001642b0:	imove	i, 0x000000
000575:0x001642c0:	jump	0x1642e0
000575:0x001642c8:	move	@m00, i
000575:0x001642d8:	inc	i
000575:0x001642e0:	ncalli	array<Param>.Count()
000575:0x001642e8:	cmpi	i, #return
000575:0x001642f8:	bge	0x164350
000577:0x00164300:	icall	
000577:0x00164310:	movetm	item, #return
000578:0x00164320:	movefm	@c00, item
000578:0x00164330:	icall	
000578:0x00164340:	release	item
000578:0x00164348:	jump	0x1642c8
000578:0x00164350:	rts
array<@Param>::Invert()
000584:0x001643d0:	imove	left, 0x000000
000585:0x001643e0:	ncalli	array<@Param>.Count()
000585:0x001643e8:	subi	right, #return, _i1
000586:0x001643f8:	cmpi	right, _i0
000586:0x00164408:	ble	0x1644c8
000588:0x00164410:	cmpi	left, right
000588:0x00164420:	bge	0x1644c8
000590:0x00164428:	icall	
000590:0x00164438:	movetm	temp, #return
000591:0x00164448:	move	@m00, left
000591:0x00164458:	inc	left
000591:0x00164460:	icall	
000591:0x00164470:	icall	
000592:0x00164480:	move	@m00, right
000592:0x00164490:	dec	right
000592:0x00164498:	movefm	@c00, temp
000592:0x001644a8:	icall	
000592:0x001644b8:	release	temp
000592:0x001644c0:	jump	0x164410
000592:0x001644c8:	rts
array<@Param>::MoveIndex()
000612:0x00164520:	ncalli	array<@Param>.Count()
000612:0x00164528:	move	count, #return
000613:0x00164538:	move	new_index, curr_index
000615:0x00164548:	cmpi	move_number, _i0
000615:0x00164558:	ble	0x164580
000617:0x00164560:	addi	@m00, curr_index, move_number
000617:0x00164570:	move	new_index, @m00
000620:0x00164580:	cmpi	move_number, _i0
000620:0x00164590:	bge	0x164638
000622:0x00164598:	subi	@m00, curr_index, move_number
000622:0x001645a8:	move	new_index, @m00
000624:0x001645b8:	cmpi	new_index, _i0
000624:0x001645c8:	bge	0x164638
000626:0x001645d0:	subi	@m01, _i0, count
000626:0x001645e0:	cmpi	new_index, @m01
000626:0x001645f0:	bgt	0x164618
000628:0x001645f8:	modi	@m00, new_index, count
000628:0x00164608:	move	new_index, @m00
000631:0x00164618:	addi	@m00, new_index, count
000631:0x00164628:	move	new_index, @m00
000635:0x00164638:	cmpi	new_index, count
000635:0x00164648:	blt	0x164670
000637:0x00164650:	modi	@m00, new_index, count
000637:0x00164660:	move	new_index, @m00
000641:0x00164670:	move	#return, new_index
000641:0x00164680:	rts
000641:0x00164688:	rts
array<@Param>::ShuffleArray()
000646:0x001646b8:	imove	i, 0x000000
000646:0x001646c8:	jump	0x1646e8
000646:0x001646d0:	move	@m00, i
000646:0x001646e0:	inc	i
000646:0x001646e8:	ncalli	array<@Param>.Count()
000646:0x001646f0:	cmpi	i, #return
000646:0x00164700:	bge	0x164738
000648:0x00164708:	call	
000648:0x00164718:	call	
000648:0x00164730:	jump	0x1646d0
000648:0x00164738:	rts
array<@Param>::DifferentAtPosition()
000666:0x00164768:	ncalli	array<@Param>.Count()
000666:0x00164770:	move	@m00, #return
000666:0x00164780:	ncalli	array<Param>.Count()
000666:0x00164788:	cmpi	@m00, #return
000666:0x00164798:	beq	0x1647c8
000668:0x001647a0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001647b0:	imove	#return, 0xffffffff
000669:0x001647c0:	rts
000672:0x001647c8:	imove	i, 0x000000
000672:0x001647d8:	jump	0x1647e8
000672:0x001647e0:	inc	i
000672:0x001647e8:	ncalli	array<Param>.Count()
000672:0x001647f0:	cmpi	i, #return
000672:0x00164800:	bge	0x164870
000674:0x00164808:	icall	
000674:0x00164818:	movec	@c00, #return
000674:0x00164828:	icall	
000674:0x00164838:	cmpc	@c00, #return
000674:0x00164848:	beq	0x164868
000676:0x00164850:	move	#return, i
000676:0x00164860:	rts
000676:0x00164868:	jump	0x1647e0
000680:0x00164870:	imove	#return, 0xffffffff
000680:0x00164880:	rts
000680:0x00164888:	rts
array<ActionBase_Basic>::InsertAll()
000427:0x00164e80:	imove	i, 0x000000
000427:0x00164e90:	jump	0x164eb0
000427:0x00164e98:	move	@m00, i
000427:0x00164ea8:	inc	i
000427:0x00164eb0:	ncalli	array<ActionBase_Basic>.Count()
000427:0x00164eb8:	cmpi	i, #return
000427:0x00164ec8:	bge	0x164ef8
000429:0x00164ed0:	icall	
000429:0x00164ee0:	icall	
000429:0x00164ef0:	jump	0x164e98
000429:0x00164ef8:	rts
array<ActionBase_Basic>::RemoveItem()
000479:0x00164f28:	movefm	@c00, value
000479:0x00164f38:	icall	
000479:0x00164f48:	move	remove_index, #return
000481:0x00164f58:	cmpi	remove_index, _i0
000481:0x00164f68:	blt	0x164f80
000483:0x00164f70:	ncalli	array<ActionBase_Basic>.RemoveOrdered(remove_index)
000483:0x00164f80:	rts
array<ActionBase_Basic>::RemoveItemUnOrdered()
000489:0x00164fb0:	movefm	@c00, value
000489:0x00164fc0:	icall	
000489:0x00164fd0:	move	remove_index, #return
000491:0x00164fe0:	cmpi	remove_index, _i0
000491:0x00164ff0:	blt	0x165008
000493:0x00164ff8:	ncalli	array<ActionBase_Basic>.Remove(remove_index)
000493:0x00165008:	rts
array<ActionBase_Basic>::IsValidIndex()
000499:0x00165010:	cmpi	index, _i-1
000499:0x00165020:	ble	0x165060
000499:0x00165028:	ncalli	array<ActionBase_Basic>.Count()
000499:0x00165030:	cmpi	index, #return
000499:0x00165040:	bge	0x165060
000499:0x00165048:	imove	#return, 0x000001
000499:0x00165058:	jump	0x165070
000499:0x00165060:	imove	#return, 0x000000
000499:0x00165070:	rts
000499:0x00165078:	rts
array<ActionBase_Basic>::Debug()
000525:0x001650d0:	ncalli	array<ActionBase_Basic>.Count()
000525:0x001650d8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00165108:	icall	Print(#return)
000526:0x00165118:	imove	i, 0x000000
000526:0x00165128:	jump	0x165148
000526:0x00165130:	move	@m00, i
000526:0x00165140:	inc	i
000526:0x00165148:	ncalli	array<ActionBase_Basic>.Count()
000526:0x00165150:	cmpi	i, #return
000526:0x00165160:	bge	0x1651d8
000528:0x00165168:	icall	
000528:0x00165178:	movetm	item, #return
000529:0x00165188:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001651b8:	icall	Print(#return)
000529:0x001651c8:	release	item
000529:0x001651d0:	jump	0x165130
000529:0x001651d8:	rts
array<ActionBase_Basic>::GetRandomIndex()
000544:0x001651e0:	ncalli	array<ActionBase_Basic>.Count()
000544:0x001651e8:	move	@m00, #return
000544:0x001651f8:	cmpi	@m00, _i0
000544:0x00165208:	ble	0x165240
000546:0x00165210:	ncalli	array<ActionBase_Basic>.Count()
000546:0x00165218:	icall	RandomInt(_i0, #return)
000546:0x00165228:	move	#return, #return
000546:0x00165238:	rts
000549:0x00165240:	imove	#return, 0xffffffff
000549:0x00165250:	rts
000549:0x00165258:	rts
array<ActionBase_Basic>::GetRandomElement()
000563:0x00165260:	call	
000563:0x00165270:	icall	
000563:0x00165280:	movetm	#return, #return
000563:0x00165290:	rts
000563:0x00165298:	rts
array<ActionBase_Basic>::SwapItems()
000568:0x001652c8:	icall	
000568:0x001652d8:	movetm	item1, #return
000569:0x001652e8:	icall	
000569:0x001652f8:	icall	
000570:0x00165308:	movefm	@c00, item1
000570:0x00165318:	icall	
000570:0x00165328:	release	item1
000570:0x00165330:	rts
array<ActionBase_Basic>::InsertArray()
000575:0x00165388:	imove	i, 0x000000
000575:0x00165398:	jump	0x1653b8
000575:0x001653a0:	move	@m00, i
000575:0x001653b0:	inc	i
000575:0x001653b8:	ncalli	array<ActionBase_Basic>.Count()
000575:0x001653c0:	cmpi	i, #return
000575:0x001653d0:	bge	0x165428
000577:0x001653d8:	icall	
000577:0x001653e8:	movetm	item, #return
000578:0x001653f8:	movefm	@c00, item
000578:0x00165408:	icall	
000578:0x00165418:	release	item
000578:0x00165420:	jump	0x1653a0
000578:0x00165428:	rts
array<ActionBase_Basic>::Invert()
000584:0x001654a8:	imove	left, 0x000000
000585:0x001654b8:	ncalli	array<ActionBase_Basic>.Count()
000585:0x001654c0:	subi	right, #return, _i1
000586:0x001654d0:	cmpi	right, _i0
000586:0x001654e0:	ble	0x1655a0
000588:0x001654e8:	cmpi	left, right
000588:0x001654f8:	bge	0x1655a0
000590:0x00165500:	icall	
000590:0x00165510:	movetm	temp, #return
000591:0x00165520:	move	@m00, left
000591:0x00165530:	inc	left
000591:0x00165538:	icall	
000591:0x00165548:	icall	
000592:0x00165558:	move	@m00, right
000592:0x00165568:	dec	right
000592:0x00165570:	movefm	@c00, temp
000592:0x00165580:	icall	
000592:0x00165590:	release	temp
000592:0x00165598:	jump	0x1654e8
000592:0x001655a0:	rts
array<ActionBase_Basic>::MoveIndex()
000612:0x001655f8:	ncalli	array<ActionBase_Basic>.Count()
000612:0x00165600:	move	count, #return
000613:0x00165610:	move	new_index, curr_index
000615:0x00165620:	cmpi	move_number, _i0
000615:0x00165630:	ble	0x165658
000617:0x00165638:	addi	@m00, curr_index, move_number
000617:0x00165648:	move	new_index, @m00
000620:0x00165658:	cmpi	move_number, _i0
000620:0x00165668:	bge	0x165710
000622:0x00165670:	subi	@m00, curr_index, move_number
000622:0x00165680:	move	new_index, @m00
000624:0x00165690:	cmpi	new_index, _i0
000624:0x001656a0:	bge	0x165710
000626:0x001656a8:	subi	@m01, _i0, count
000626:0x001656b8:	cmpi	new_index, @m01
000626:0x001656c8:	bgt	0x1656f0
000628:0x001656d0:	modi	@m00, new_index, count
000628:0x001656e0:	move	new_index, @m00
000631:0x001656f0:	addi	@m00, new_index, count
000631:0x00165700:	move	new_index, @m00
000635:0x00165710:	cmpi	new_index, count
000635:0x00165720:	blt	0x165748
000637:0x00165728:	modi	@m00, new_index, count
000637:0x00165738:	move	new_index, @m00
000641:0x00165748:	move	#return, new_index
000641:0x00165758:	rts
000641:0x00165760:	rts
array<ActionBase_Basic>::ShuffleArray()
000646:0x00165790:	imove	i, 0x000000
000646:0x001657a0:	jump	0x1657c0
000646:0x001657a8:	move	@m00, i
000646:0x001657b8:	inc	i
000646:0x001657c0:	ncalli	array<ActionBase_Basic>.Count()
000646:0x001657c8:	cmpi	i, #return
000646:0x001657d8:	bge	0x165810
000648:0x001657e0:	call	
000648:0x001657f0:	call	
000648:0x00165808:	jump	0x1657a8
000648:0x00165810:	rts
array<ActionBase_Basic>::DifferentAtPosition()
000666:0x00165840:	ncalli	array<ActionBase_Basic>.Count()
000666:0x00165848:	move	@m00, #return
000666:0x00165858:	push	#return
000666:0x00165860:	ncalli	array<ActionBase_Basic>.Count()
000666:0x00165868:	move	@m02, #return
000666:0x00165878:	pop	#return
000666:0x00165880:	cmpi	@m00, @m02
000666:0x00165890:	beq	0x1658c0
000668:0x00165898:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001658a8:	imove	#return, 0xffffffff
000669:0x001658b8:	rts
000672:0x001658c0:	imove	i, 0x000000
000672:0x001658d0:	jump	0x1658e0
000672:0x001658d8:	inc	i
000672:0x001658e0:	ncalli	array<ActionBase_Basic>.Count()
000672:0x001658e8:	cmpi	i, #return
000672:0x001658f8:	bge	0x165988
000674:0x00165900:	icall	
000674:0x00165910:	movec	@c00, #return
000674:0x00165920:	pushc	#return
000674:0x00165928:	icall	
000674:0x00165938:	movec	@c02, #return
000674:0x00165948:	popc	#return
000674:0x00165950:	cmpc	@c00, @c02
000674:0x00165960:	beq	0x165980
000676:0x00165968:	move	#return, i
000676:0x00165978:	rts
000676:0x00165980:	jump	0x1658d8
000680:0x00165988:	imove	#return, 0xffffffff
000680:0x00165998:	rts
000680:0x001659a0:	rts
array<set<int>>::InsertAll()
000427:0x001666e0:	imove	i, 0x000000
000427:0x001666f0:	jump	0x166710
000427:0x001666f8:	move	@m00, i
000427:0x00166708:	inc	i
000427:0x00166710:	ncalli	array<set<int>>.Count()
000427:0x00166718:	cmpi	i, #return
000427:0x00166728:	bge	0x166758
000429:0x00166730:	icall	
000429:0x00166740:	icall	
000429:0x00166750:	jump	0x1666f8
000429:0x00166758:	rts
array<set<int>>::RemoveItem()
000479:0x00166788:	movefm	@c00, value
000479:0x00166798:	icall	
000479:0x001667a8:	move	remove_index, #return
000481:0x001667b8:	cmpi	remove_index, _i0
000481:0x001667c8:	blt	0x1667e0
000483:0x001667d0:	ncalli	array<set<int>>.RemoveOrdered(remove_index)
000483:0x001667e0:	rts
array<set<int>>::RemoveItemUnOrdered()
000489:0x00166810:	movefm	@c00, value
000489:0x00166820:	icall	
000489:0x00166830:	move	remove_index, #return
000491:0x00166840:	cmpi	remove_index, _i0
000491:0x00166850:	blt	0x166868
000493:0x00166858:	ncalli	array<set<int>>.Remove(remove_index)
000493:0x00166868:	rts
array<set<int>>::IsValidIndex()
000499:0x00166870:	cmpi	index, _i-1
000499:0x00166880:	ble	0x1668c0
000499:0x00166888:	ncalli	array<set<int>>.Count()
000499:0x00166890:	cmpi	index, #return
000499:0x001668a0:	bge	0x1668c0
000499:0x001668a8:	imove	#return, 0x000001
000499:0x001668b8:	jump	0x1668d0
000499:0x001668c0:	imove	#return, 0x000000
000499:0x001668d0:	rts
000499:0x001668d8:	rts
array<set<int>>::Debug()
000525:0x00166930:	ncalli	array<set<int>>.Count()
000525:0x00166938:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00166968:	icall	Print(#return)
000526:0x00166978:	imove	i, 0x000000
000526:0x00166988:	jump	0x1669a8
000526:0x00166990:	move	@m00, i
000526:0x001669a0:	inc	i
000526:0x001669a8:	ncalli	array<set<int>>.Count()
000526:0x001669b0:	cmpi	i, #return
000526:0x001669c0:	bge	0x166a38
000528:0x001669c8:	icall	
000528:0x001669d8:	movetm	item, #return
000529:0x001669e8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00166a18:	icall	Print(#return)
000529:0x00166a28:	release	item
000529:0x00166a30:	jump	0x166990
000529:0x00166a38:	rts
array<set<int>>::GetRandomIndex()
000544:0x00166a40:	ncalli	array<set<int>>.Count()
000544:0x00166a48:	move	@m00, #return
000544:0x00166a58:	cmpi	@m00, _i0
000544:0x00166a68:	ble	0x166aa0
000546:0x00166a70:	ncalli	array<set<int>>.Count()
000546:0x00166a78:	icall	RandomInt(_i0, #return)
000546:0x00166a88:	move	#return, #return
000546:0x00166a98:	rts
000549:0x00166aa0:	imove	#return, 0xffffffff
000549:0x00166ab0:	rts
000549:0x00166ab8:	rts
array<set<int>>::GetRandomElement()
000563:0x00166ac0:	call	
000563:0x00166ad0:	icall	
000563:0x00166ae0:	movetm	#return, #return
000563:0x00166af0:	rts
000563:0x00166af8:	rts
array<set<int>>::SwapItems()
000568:0x00166b28:	icall	
000568:0x00166b38:	movetm	item1, #return
000569:0x00166b48:	icall	
000569:0x00166b58:	icall	
000570:0x00166b68:	movefm	@c00, item1
000570:0x00166b78:	icall	
000570:0x00166b88:	release	item1
000570:0x00166b90:	rts
array<set<int>>::InsertArray()
000575:0x00166be8:	imove	i, 0x000000
000575:0x00166bf8:	jump	0x166c18
000575:0x00166c00:	move	@m00, i
000575:0x00166c10:	inc	i
000575:0x00166c18:	ncalli	array<set<int>>.Count()
000575:0x00166c20:	cmpi	i, #return
000575:0x00166c30:	bge	0x166c88
000577:0x00166c38:	icall	
000577:0x00166c48:	movetm	item, #return
000578:0x00166c58:	movefm	@c00, item
000578:0x00166c68:	icall	
000578:0x00166c78:	release	item
000578:0x00166c80:	jump	0x166c00
000578:0x00166c88:	rts
array<set<int>>::Invert()
000584:0x00166d08:	imove	left, 0x000000
000585:0x00166d18:	ncalli	array<set<int>>.Count()
000585:0x00166d20:	subi	right, #return, _i1
000586:0x00166d30:	cmpi	right, _i0
000586:0x00166d40:	ble	0x166e00
000588:0x00166d48:	cmpi	left, right
000588:0x00166d58:	bge	0x166e00
000590:0x00166d60:	icall	
000590:0x00166d70:	movetm	temp, #return
000591:0x00166d80:	move	@m00, left
000591:0x00166d90:	inc	left
000591:0x00166d98:	icall	
000591:0x00166da8:	icall	
000592:0x00166db8:	move	@m00, right
000592:0x00166dc8:	dec	right
000592:0x00166dd0:	movefm	@c00, temp
000592:0x00166de0:	icall	
000592:0x00166df0:	release	temp
000592:0x00166df8:	jump	0x166d48
000592:0x00166e00:	rts
array<set<int>>::MoveIndex()
000612:0x00166e58:	ncalli	array<set<int>>.Count()
000612:0x00166e60:	move	count, #return
000613:0x00166e70:	move	new_index, curr_index
000615:0x00166e80:	cmpi	move_number, _i0
000615:0x00166e90:	ble	0x166eb8
000617:0x00166e98:	addi	@m00, curr_index, move_number
000617:0x00166ea8:	move	new_index, @m00
000620:0x00166eb8:	cmpi	move_number, _i0
000620:0x00166ec8:	bge	0x166f70
000622:0x00166ed0:	subi	@m00, curr_index, move_number
000622:0x00166ee0:	move	new_index, @m00
000624:0x00166ef0:	cmpi	new_index, _i0
000624:0x00166f00:	bge	0x166f70
000626:0x00166f08:	subi	@m01, _i0, count
000626:0x00166f18:	cmpi	new_index, @m01
000626:0x00166f28:	bgt	0x166f50
000628:0x00166f30:	modi	@m00, new_index, count
000628:0x00166f40:	move	new_index, @m00
000631:0x00166f50:	addi	@m00, new_index, count
000631:0x00166f60:	move	new_index, @m00
000635:0x00166f70:	cmpi	new_index, count
000635:0x00166f80:	blt	0x166fa8
000637:0x00166f88:	modi	@m00, new_index, count
000637:0x00166f98:	move	new_index, @m00
000641:0x00166fa8:	move	#return, new_index
000641:0x00166fb8:	rts
000641:0x00166fc0:	rts
array<set<int>>::ShuffleArray()
000646:0x00166ff0:	imove	i, 0x000000
000646:0x00167000:	jump	0x167020
000646:0x00167008:	move	@m00, i
000646:0x00167018:	inc	i
000646:0x00167020:	ncalli	array<set<int>>.Count()
000646:0x00167028:	cmpi	i, #return
000646:0x00167038:	bge	0x167070
000648:0x00167040:	call	
000648:0x00167050:	call	
000648:0x00167068:	jump	0x167008
000648:0x00167070:	rts
array<set<int>>::DifferentAtPosition()
000666:0x001670a0:	ncalli	array<set<int>>.Count()
000666:0x001670a8:	move	@m00, #return
000666:0x001670b8:	push	#return
000666:0x001670c0:	ncalli	array<set<int>>.Count()
000666:0x001670c8:	move	@m02, #return
000666:0x001670d8:	pop	#return
000666:0x001670e0:	cmpi	@m00, @m02
000666:0x001670f0:	beq	0x167120
000668:0x001670f8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00167108:	imove	#return, 0xffffffff
000669:0x00167118:	rts
000672:0x00167120:	imove	i, 0x000000
000672:0x00167130:	jump	0x167140
000672:0x00167138:	inc	i
000672:0x00167140:	ncalli	array<set<int>>.Count()
000672:0x00167148:	cmpi	i, #return
000672:0x00167158:	bge	0x1671e8
000674:0x00167160:	icall	
000674:0x00167170:	movec	@c00, #return
000674:0x00167180:	pushc	#return
000674:0x00167188:	icall	
000674:0x00167198:	movec	@c02, #return
000674:0x001671a8:	popc	#return
000674:0x001671b0:	cmpc	@c00, @c02
000674:0x001671c0:	beq	0x1671e0
000676:0x001671c8:	move	#return, i
000676:0x001671d8:	rts
000676:0x001671e0:	jump	0x167138
000680:0x001671e8:	imove	#return, 0xffffffff
000680:0x001671f8:	rts
000680:0x00167200:	rts
map<int,set<int>>::GetKeyArray()
000885:0x00167500:	new	keys, array<int>
000886:0x00167520:	imove	i, 0x000000
000886:0x00167530:	jump	0x167550
000886:0x00167538:	move	@m00, i
000886:0x00167548:	inc	i
000886:0x00167550:	ncalli	map<int,set<int>>.Count()
000886:0x00167558:	cmpi	i, #return
000886:0x00167568:	bge	0x167598
000888:0x00167570:	icall	
000888:0x00167580:	icall	
000888:0x00167590:	jump	0x167538
000890:0x00167598:	movem	#return, keys
000890:0x001675a8:	release	keys
000890:0x001675b0:	rts
000890:0x001675b8:	release	keys
000890:0x001675c0:	rts
map<int,set<int>>::GetValueArray()
000895:0x00167618:	new	elements, array<set<int>>
000896:0x00167638:	imove	i, 0x000000
000896:0x00167648:	jump	0x167668
000896:0x00167650:	move	@m00, i
000896:0x00167660:	inc	i
000896:0x00167668:	ncalli	map<int,set<int>>.Count()
000896:0x00167670:	cmpi	i, #return
000896:0x00167680:	bge	0x1676b0
000898:0x00167688:	icall	
000898:0x00167698:	icall	
000898:0x001676a8:	jump	0x167650
000900:0x001676b0:	movem	#return, elements
000900:0x001676c0:	release	elements
000900:0x001676c8:	rts
000900:0x001676d0:	release	elements
000900:0x001676d8:	rts
map<int,set<int>>::ReplaceKey()
000905:0x001676e0:	icall	
000905:0x001676f0:	cmpi	#return, _i0
000905:0x00167700:	beq	0x167750
000907:0x00167708:	icall	
000907:0x00167718:	icall	
000908:0x00167728:	icall	
000909:0x00167738:	imove	#return, 0x000001
000909:0x00167748:	rts
000911:0x00167750:	imove	#return, 0x000000
000911:0x00167760:	rts
000911:0x00167768:	rts
map<int,set<int>>::GetKeyByValue()
000917:0x001677c0:	imove	i, 0x000000
000917:0x001677d0:	jump	0x1677f0
000917:0x001677d8:	move	@m00, i
000917:0x001677e8:	inc	i
000917:0x001677f0:	ncalli	map<int,set<int>>.Count()
000917:0x001677f8:	cmpi	i, #return
000917:0x00167808:	bge	0x167878
000919:0x00167810:	icall	
000919:0x00167820:	movec	@c00, #return
000919:0x00167830:	cmpmc	@c00, value
000919:0x00167840:	bne	0x167870
000921:0x00167848:	icall	
000921:0x00167858:	move	ret, #return
000922:0x00167868:	jump	0x167878
000922:0x00167870:	jump	0x1677d8
000926:0x00167878:	move	#return, ret
000926:0x00167888:	rts
000926:0x00167890:	rts
map<int,set<int>>::GetKeyByValueChecked()
000931:0x001678c0:	imove	i, 0x000000
000931:0x001678d0:	jump	0x1678f0
000931:0x001678d8:	move	@m00, i
000931:0x001678e8:	inc	i
000931:0x001678f0:	ncalli	map<int,set<int>>.Count()
000931:0x001678f8:	cmpi	i, #return
000931:0x00167908:	bge	0x167998
000933:0x00167910:	icall	
000933:0x00167920:	movec	@c00, #return
000933:0x00167930:	cmpmc	@c00, value
000933:0x00167940:	bne	0x167990
000935:0x00167948:	icall	
000935:0x00167958:	move	key, #return
000936:0x00167968:	imove	#return, 0x000001
000936:0x00167978:	move	key, key
000936:0x00167988:	rts
000936:0x00167990:	jump	0x1678d8
000939:0x00167998:	imove	#return, 0x000000
000939:0x001679a8:	move	key, key
000939:0x001679b8:	rts
000939:0x001679c0:	move	key, key
000939:0x001679d0:	rts
map<int,@set<int>>::GetKeyArray()
000885:0x00167d20:	new	keys, array<int>
000886:0x00167d40:	imove	i, 0x000000
000886:0x00167d50:	jump	0x167d70
000886:0x00167d58:	move	@m00, i
000886:0x00167d68:	inc	i
000886:0x00167d70:	ncalli	map<int,@set<int>>.Count()
000886:0x00167d78:	cmpi	i, #return
000886:0x00167d88:	bge	0x167db8
000888:0x00167d90:	icall	
000888:0x00167da0:	icall	
000888:0x00167db0:	jump	0x167d58
000890:0x00167db8:	movem	#return, keys
000890:0x00167dc8:	release	keys
000890:0x00167dd0:	rts
000890:0x00167dd8:	release	keys
000890:0x00167de0:	rts
map<int,@set<int>>::GetValueArray()
000895:0x00167e38:	new	elements, array<set<int>>
000896:0x00167e58:	imove	i, 0x000000
000896:0x00167e68:	jump	0x167e88
000896:0x00167e70:	move	@m00, i
000896:0x00167e80:	inc	i
000896:0x00167e88:	ncalli	map<int,@set<int>>.Count()
000896:0x00167e90:	cmpi	i, #return
000896:0x00167ea0:	bge	0x167ed0
000898:0x00167ea8:	icall	
000898:0x00167eb8:	icall	
000898:0x00167ec8:	jump	0x167e70
000900:0x00167ed0:	movem	#return, elements
000900:0x00167ee0:	release	elements
000900:0x00167ee8:	rts
000900:0x00167ef0:	release	elements
000900:0x00167ef8:	rts
map<int,@set<int>>::ReplaceKey()
000905:0x00167f00:	icall	
000905:0x00167f10:	cmpi	#return, _i0
000905:0x00167f20:	beq	0x167f70
000907:0x00167f28:	icall	
000907:0x00167f38:	icall	
000908:0x00167f48:	icall	
000909:0x00167f58:	imove	#return, 0x000001
000909:0x00167f68:	rts
000911:0x00167f70:	imove	#return, 0x000000
000911:0x00167f80:	rts
000911:0x00167f88:	rts
map<int,@set<int>>::GetKeyByValue()
000917:0x00167fe0:	imove	i, 0x000000
000917:0x00167ff0:	jump	0x168010
000917:0x00167ff8:	move	@m00, i
000917:0x00168008:	inc	i
000917:0x00168010:	ncalli	map<int,@set<int>>.Count()
000917:0x00168018:	cmpi	i, #return
000917:0x00168028:	bge	0x168098
000919:0x00168030:	icall	
000919:0x00168040:	movec	@c00, #return
000919:0x00168050:	cmpmc	@c00, value
000919:0x00168060:	bne	0x168090
000921:0x00168068:	icall	
000921:0x00168078:	move	ret, #return
000922:0x00168088:	jump	0x168098
000922:0x00168090:	jump	0x167ff8
000926:0x00168098:	move	#return, ret
000926:0x001680a8:	rts
000926:0x001680b0:	rts
map<int,@set<int>>::GetKeyByValueChecked()
000931:0x001680e0:	imove	i, 0x000000
000931:0x001680f0:	jump	0x168110
000931:0x001680f8:	move	@m00, i
000931:0x00168108:	inc	i
000931:0x00168110:	ncalli	map<int,@set<int>>.Count()
000931:0x00168118:	cmpi	i, #return
000931:0x00168128:	bge	0x1681b8
000933:0x00168130:	icall	
000933:0x00168140:	movec	@c00, #return
000933:0x00168150:	cmpmc	@c00, value
000933:0x00168160:	bne	0x1681b0
000935:0x00168168:	icall	
000935:0x00168178:	move	key, #return
000936:0x00168188:	imove	#return, 0x000001
000936:0x00168198:	move	key, key
000936:0x001681a8:	rts
000936:0x001681b0:	jump	0x1680f8
000939:0x001681b8:	imove	#return, 0x000000
000939:0x001681c8:	move	key, key
000939:0x001681d8:	rts
000939:0x001681e0:	move	key, key
000939:0x001681f0:	rts
array<EntityAI>::InsertAll()
000427:0x001687e8:	imove	i, 0x000000
000427:0x001687f8:	jump	0x168818
000427:0x00168800:	move	@m00, i
000427:0x00168810:	inc	i
000427:0x00168818:	ncalli	array<EntityAI>.Count()
000427:0x00168820:	cmpi	i, #return
000427:0x00168830:	bge	0x168860
000429:0x00168838:	icall	
000429:0x00168848:	icall	
000429:0x00168858:	jump	0x168800
000429:0x00168860:	rts
array<EntityAI>::RemoveItem()
000479:0x00168890:	movefm	@c00, value
000479:0x001688a0:	icall	
000479:0x001688b0:	move	remove_index, #return
000481:0x001688c0:	cmpi	remove_index, _i0
000481:0x001688d0:	blt	0x1688e8
000483:0x001688d8:	ncalli	array<EntityAI>.RemoveOrdered(remove_index)
000483:0x001688e8:	rts
array<EntityAI>::RemoveItemUnOrdered()
000489:0x00168918:	movefm	@c00, value
000489:0x00168928:	icall	
000489:0x00168938:	move	remove_index, #return
000491:0x00168948:	cmpi	remove_index, _i0
000491:0x00168958:	blt	0x168970
000493:0x00168960:	ncalli	array<EntityAI>.Remove(remove_index)
000493:0x00168970:	rts
array<EntityAI>::IsValidIndex()
000499:0x00168978:	cmpi	index, _i-1
000499:0x00168988:	ble	0x1689c8
000499:0x00168990:	ncalli	array<EntityAI>.Count()
000499:0x00168998:	cmpi	index, #return
000499:0x001689a8:	bge	0x1689c8
000499:0x001689b0:	imove	#return, 0x000001
000499:0x001689c0:	jump	0x1689d8
000499:0x001689c8:	imove	#return, 0x000000
000499:0x001689d8:	rts
000499:0x001689e0:	rts
array<EntityAI>::Debug()
000525:0x00168a38:	ncalli	array<EntityAI>.Count()
000525:0x00168a40:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00168a70:	icall	Print(#return)
000526:0x00168a80:	imove	i, 0x000000
000526:0x00168a90:	jump	0x168ab0
000526:0x00168a98:	move	@m00, i
000526:0x00168aa8:	inc	i
000526:0x00168ab0:	ncalli	array<EntityAI>.Count()
000526:0x00168ab8:	cmpi	i, #return
000526:0x00168ac8:	bge	0x168b40
000528:0x00168ad0:	icall	
000528:0x00168ae0:	movetm	item, #return
000529:0x00168af0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00168b20:	icall	Print(#return)
000529:0x00168b30:	release	item
000529:0x00168b38:	jump	0x168a98
000529:0x00168b40:	rts
array<EntityAI>::GetRandomIndex()
000544:0x00168b48:	ncalli	array<EntityAI>.Count()
000544:0x00168b50:	move	@m00, #return
000544:0x00168b60:	cmpi	@m00, _i0
000544:0x00168b70:	ble	0x168ba8
000546:0x00168b78:	ncalli	array<EntityAI>.Count()
000546:0x00168b80:	icall	RandomInt(_i0, #return)
000546:0x00168b90:	move	#return, #return
000546:0x00168ba0:	rts
000549:0x00168ba8:	imove	#return, 0xffffffff
000549:0x00168bb8:	rts
000549:0x00168bc0:	rts
array<EntityAI>::GetRandomElement()
000563:0x00168bc8:	call	
000563:0x00168bd8:	icall	
000563:0x00168be8:	movetm	#return, #return
000563:0x00168bf8:	rts
000563:0x00168c00:	rts
array<EntityAI>::SwapItems()
000568:0x00168c30:	icall	
000568:0x00168c40:	movetm	item1, #return
000569:0x00168c50:	icall	
000569:0x00168c60:	icall	
000570:0x00168c70:	movefm	@c00, item1
000570:0x00168c80:	icall	
000570:0x00168c90:	release	item1
000570:0x00168c98:	rts
array<EntityAI>::InsertArray()
000575:0x00168cf0:	imove	i, 0x000000
000575:0x00168d00:	jump	0x168d20
000575:0x00168d08:	move	@m00, i
000575:0x00168d18:	inc	i
000575:0x00168d20:	ncalli	array<EntityAI>.Count()
000575:0x00168d28:	cmpi	i, #return
000575:0x00168d38:	bge	0x168d90
000577:0x00168d40:	icall	
000577:0x00168d50:	movetm	item, #return
000578:0x00168d60:	movefm	@c00, item
000578:0x00168d70:	icall	
000578:0x00168d80:	release	item
000578:0x00168d88:	jump	0x168d08
000578:0x00168d90:	rts
array<EntityAI>::Invert()
000584:0x00168e10:	imove	left, 0x000000
000585:0x00168e20:	ncalli	array<EntityAI>.Count()
000585:0x00168e28:	subi	right, #return, _i1
000586:0x00168e38:	cmpi	right, _i0
000586:0x00168e48:	ble	0x168f08
000588:0x00168e50:	cmpi	left, right
000588:0x00168e60:	bge	0x168f08
000590:0x00168e68:	icall	
000590:0x00168e78:	movetm	temp, #return
000591:0x00168e88:	move	@m00, left
000591:0x00168e98:	inc	left
000591:0x00168ea0:	icall	
000591:0x00168eb0:	icall	
000592:0x00168ec0:	move	@m00, right
000592:0x00168ed0:	dec	right
000592:0x00168ed8:	movefm	@c00, temp
000592:0x00168ee8:	icall	
000592:0x00168ef8:	release	temp
000592:0x00168f00:	jump	0x168e50
000592:0x00168f08:	rts
array<EntityAI>::MoveIndex()
000612:0x00168f60:	ncalli	array<EntityAI>.Count()
000612:0x00168f68:	move	count, #return
000613:0x00168f78:	move	new_index, curr_index
000615:0x00168f88:	cmpi	move_number, _i0
000615:0x00168f98:	ble	0x168fc0
000617:0x00168fa0:	addi	@m00, curr_index, move_number
000617:0x00168fb0:	move	new_index, @m00
000620:0x00168fc0:	cmpi	move_number, _i0
000620:0x00168fd0:	bge	0x169078
000622:0x00168fd8:	subi	@m00, curr_index, move_number
000622:0x00168fe8:	move	new_index, @m00
000624:0x00168ff8:	cmpi	new_index, _i0
000624:0x00169008:	bge	0x169078
000626:0x00169010:	subi	@m01, _i0, count
000626:0x00169020:	cmpi	new_index, @m01
000626:0x00169030:	bgt	0x169058
000628:0x00169038:	modi	@m00, new_index, count
000628:0x00169048:	move	new_index, @m00
000631:0x00169058:	addi	@m00, new_index, count
000631:0x00169068:	move	new_index, @m00
000635:0x00169078:	cmpi	new_index, count
000635:0x00169088:	blt	0x1690b0
000637:0x00169090:	modi	@m00, new_index, count
000637:0x001690a0:	move	new_index, @m00
000641:0x001690b0:	move	#return, new_index
000641:0x001690c0:	rts
000641:0x001690c8:	rts
array<EntityAI>::ShuffleArray()
000646:0x001690f8:	imove	i, 0x000000
000646:0x00169108:	jump	0x169128
000646:0x00169110:	move	@m00, i
000646:0x00169120:	inc	i
000646:0x00169128:	ncalli	array<EntityAI>.Count()
000646:0x00169130:	cmpi	i, #return
000646:0x00169140:	bge	0x169178
000648:0x00169148:	call	
000648:0x00169158:	call	
000648:0x00169170:	jump	0x169110
000648:0x00169178:	rts
array<EntityAI>::DifferentAtPosition()
000666:0x001691a8:	ncalli	array<EntityAI>.Count()
000666:0x001691b0:	move	@m00, #return
000666:0x001691c0:	push	#return
000666:0x001691c8:	ncalli	array<EntityAI>.Count()
000666:0x001691d0:	move	@m02, #return
000666:0x001691e0:	pop	#return
000666:0x001691e8:	cmpi	@m00, @m02
000666:0x001691f8:	beq	0x169228
000668:0x00169200:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00169210:	imove	#return, 0xffffffff
000669:0x00169220:	rts
000672:0x00169228:	imove	i, 0x000000
000672:0x00169238:	jump	0x169248
000672:0x00169240:	inc	i
000672:0x00169248:	ncalli	array<EntityAI>.Count()
000672:0x00169250:	cmpi	i, #return
000672:0x00169260:	bge	0x1692f0
000674:0x00169268:	icall	
000674:0x00169278:	movec	@c00, #return
000674:0x00169288:	pushc	#return
000674:0x00169290:	icall	
000674:0x001692a0:	movec	@c02, #return
000674:0x001692b0:	popc	#return
000674:0x001692b8:	cmpc	@c00, @c02
000674:0x001692c8:	beq	0x1692e8
000676:0x001692d0:	move	#return, i
000676:0x001692e0:	rts
000676:0x001692e8:	jump	0x169240
000680:0x001692f0:	imove	#return, 0xffffffff
000680:0x00169300:	rts
000680:0x00169308:	rts
array<JsonUndergroundAreaTriggerData>::InsertAll()
000427:0x00169b50:	imove	i, 0x000000
000427:0x00169b60:	jump	0x169b80
000427:0x00169b68:	move	@m00, i
000427:0x00169b78:	inc	i
000427:0x00169b80:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000427:0x00169b88:	cmpi	i, #return
000427:0x00169b98:	bge	0x169bc8
000429:0x00169ba0:	icall	
000429:0x00169bb0:	icall	
000429:0x00169bc0:	jump	0x169b68
000429:0x00169bc8:	rts
array<JsonUndergroundAreaTriggerData>::RemoveItem()
000479:0x00169bf8:	movefm	@c00, value
000479:0x00169c08:	icall	
000479:0x00169c18:	move	remove_index, #return
000481:0x00169c28:	cmpi	remove_index, _i0
000481:0x00169c38:	blt	0x169c50
000483:0x00169c40:	ncalli	array<JsonUndergroundAreaTriggerData>.RemoveOrdered(remove_index)
000483:0x00169c50:	rts
array<JsonUndergroundAreaTriggerData>::RemoveItemUnOrdered()
000489:0x00169c80:	movefm	@c00, value
000489:0x00169c90:	icall	
000489:0x00169ca0:	move	remove_index, #return
000491:0x00169cb0:	cmpi	remove_index, _i0
000491:0x00169cc0:	blt	0x169cd8
000493:0x00169cc8:	ncalli	array<JsonUndergroundAreaTriggerData>.Remove(remove_index)
000493:0x00169cd8:	rts
array<JsonUndergroundAreaTriggerData>::IsValidIndex()
000499:0x00169ce0:	cmpi	index, _i-1
000499:0x00169cf0:	ble	0x169d30
000499:0x00169cf8:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000499:0x00169d00:	cmpi	index, #return
000499:0x00169d10:	bge	0x169d30
000499:0x00169d18:	imove	#return, 0x000001
000499:0x00169d28:	jump	0x169d40
000499:0x00169d30:	imove	#return, 0x000000
000499:0x00169d40:	rts
000499:0x00169d48:	rts
array<JsonUndergroundAreaTriggerData>::Debug()
000525:0x00169da0:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000525:0x00169da8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00169dd8:	icall	Print(#return)
000526:0x00169de8:	imove	i, 0x000000
000526:0x00169df8:	jump	0x169e18
000526:0x00169e00:	move	@m00, i
000526:0x00169e10:	inc	i
000526:0x00169e18:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000526:0x00169e20:	cmpi	i, #return
000526:0x00169e30:	bge	0x169ea8
000528:0x00169e38:	icall	
000528:0x00169e48:	movetm	item, #return
000529:0x00169e58:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00169e88:	icall	Print(#return)
000529:0x00169e98:	release	item
000529:0x00169ea0:	jump	0x169e00
000529:0x00169ea8:	rts
array<JsonUndergroundAreaTriggerData>::GetRandomIndex()
000544:0x00169eb0:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000544:0x00169eb8:	move	@m00, #return
000544:0x00169ec8:	cmpi	@m00, _i0
000544:0x00169ed8:	ble	0x169f10
000546:0x00169ee0:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000546:0x00169ee8:	icall	RandomInt(_i0, #return)
000546:0x00169ef8:	move	#return, #return
000546:0x00169f08:	rts
000549:0x00169f10:	imove	#return, 0xffffffff
000549:0x00169f20:	rts
000549:0x00169f28:	rts
array<JsonUndergroundAreaTriggerData>::GetRandomElement()
000563:0x00169f30:	call	
000563:0x00169f40:	icall	
000563:0x00169f50:	movetm	#return, #return
000563:0x00169f60:	rts
000563:0x00169f68:	rts
array<JsonUndergroundAreaTriggerData>::SwapItems()
000568:0x00169f98:	icall	
000568:0x00169fa8:	movetm	item1, #return
000569:0x00169fb8:	icall	
000569:0x00169fc8:	icall	
000570:0x00169fd8:	movefm	@c00, item1
000570:0x00169fe8:	icall	
000570:0x00169ff8:	release	item1
000570:0x0016a000:	rts
array<JsonUndergroundAreaTriggerData>::InsertArray()
000575:0x0016a058:	imove	i, 0x000000
000575:0x0016a068:	jump	0x16a088
000575:0x0016a070:	move	@m00, i
000575:0x0016a080:	inc	i
000575:0x0016a088:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000575:0x0016a090:	cmpi	i, #return
000575:0x0016a0a0:	bge	0x16a0f8
000577:0x0016a0a8:	icall	
000577:0x0016a0b8:	movetm	item, #return
000578:0x0016a0c8:	movefm	@c00, item
000578:0x0016a0d8:	icall	
000578:0x0016a0e8:	release	item
000578:0x0016a0f0:	jump	0x16a070
000578:0x0016a0f8:	rts
array<JsonUndergroundAreaTriggerData>::Invert()
000584:0x0016a178:	imove	left, 0x000000
000585:0x0016a188:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000585:0x0016a190:	subi	right, #return, _i1
000586:0x0016a1a0:	cmpi	right, _i0
000586:0x0016a1b0:	ble	0x16a270
000588:0x0016a1b8:	cmpi	left, right
000588:0x0016a1c8:	bge	0x16a270
000590:0x0016a1d0:	icall	
000590:0x0016a1e0:	movetm	temp, #return
000591:0x0016a1f0:	move	@m00, left
000591:0x0016a200:	inc	left
000591:0x0016a208:	icall	
000591:0x0016a218:	icall	
000592:0x0016a228:	move	@m00, right
000592:0x0016a238:	dec	right
000592:0x0016a240:	movefm	@c00, temp
000592:0x0016a250:	icall	
000592:0x0016a260:	release	temp
000592:0x0016a268:	jump	0x16a1b8
000592:0x0016a270:	rts
array<JsonUndergroundAreaTriggerData>::MoveIndex()
000612:0x0016a2c8:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000612:0x0016a2d0:	move	count, #return
000613:0x0016a2e0:	move	new_index, curr_index
000615:0x0016a2f0:	cmpi	move_number, _i0
000615:0x0016a300:	ble	0x16a328
000617:0x0016a308:	addi	@m00, curr_index, move_number
000617:0x0016a318:	move	new_index, @m00
000620:0x0016a328:	cmpi	move_number, _i0
000620:0x0016a338:	bge	0x16a3e0
000622:0x0016a340:	subi	@m00, curr_index, move_number
000622:0x0016a350:	move	new_index, @m00
000624:0x0016a360:	cmpi	new_index, _i0
000624:0x0016a370:	bge	0x16a3e0
000626:0x0016a378:	subi	@m01, _i0, count
000626:0x0016a388:	cmpi	new_index, @m01
000626:0x0016a398:	bgt	0x16a3c0
000628:0x0016a3a0:	modi	@m00, new_index, count
000628:0x0016a3b0:	move	new_index, @m00
000631:0x0016a3c0:	addi	@m00, new_index, count
000631:0x0016a3d0:	move	new_index, @m00
000635:0x0016a3e0:	cmpi	new_index, count
000635:0x0016a3f0:	blt	0x16a418
000637:0x0016a3f8:	modi	@m00, new_index, count
000637:0x0016a408:	move	new_index, @m00
000641:0x0016a418:	move	#return, new_index
000641:0x0016a428:	rts
000641:0x0016a430:	rts
array<JsonUndergroundAreaTriggerData>::ShuffleArray()
000646:0x0016a460:	imove	i, 0x000000
000646:0x0016a470:	jump	0x16a490
000646:0x0016a478:	move	@m00, i
000646:0x0016a488:	inc	i
000646:0x0016a490:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000646:0x0016a498:	cmpi	i, #return
000646:0x0016a4a8:	bge	0x16a4e0
000648:0x0016a4b0:	call	
000648:0x0016a4c0:	call	
000648:0x0016a4d8:	jump	0x16a478
000648:0x0016a4e0:	rts
array<JsonUndergroundAreaTriggerData>::DifferentAtPosition()
000666:0x0016a510:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000666:0x0016a518:	move	@m00, #return
000666:0x0016a528:	push	#return
000666:0x0016a530:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000666:0x0016a538:	move	@m02, #return
000666:0x0016a548:	pop	#return
000666:0x0016a550:	cmpi	@m00, @m02
000666:0x0016a560:	beq	0x16a590
000668:0x0016a568:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0016a578:	imove	#return, 0xffffffff
000669:0x0016a588:	rts
000672:0x0016a590:	imove	i, 0x000000
000672:0x0016a5a0:	jump	0x16a5b0
000672:0x0016a5a8:	inc	i
000672:0x0016a5b0:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000672:0x0016a5b8:	cmpi	i, #return
000672:0x0016a5c8:	bge	0x16a658
000674:0x0016a5d0:	icall	
000674:0x0016a5e0:	movec	@c00, #return
000674:0x0016a5f0:	pushc	#return
000674:0x0016a5f8:	icall	
000674:0x0016a608:	movec	@c02, #return
000674:0x0016a618:	popc	#return
000674:0x0016a620:	cmpc	@c00, @c02
000674:0x0016a630:	beq	0x16a650
000676:0x0016a638:	move	#return, i
000676:0x0016a648:	rts
000676:0x0016a650:	jump	0x16a5a8
000680:0x0016a658:	imove	#return, 0xffffffff
000680:0x0016a668:	rts
000680:0x0016a670:	rts
array<@JsonUndergroundAreaTriggerData>::InsertAll()
000427:0x0016aa88:	imove	i, 0x000000
000427:0x0016aa98:	jump	0x16aab8
000427:0x0016aaa0:	move	@m00, i
000427:0x0016aab0:	inc	i
000427:0x0016aab8:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000427:0x0016aac0:	cmpi	i, #return
000427:0x0016aad0:	bge	0x16ab00
000429:0x0016aad8:	icall	
000429:0x0016aae8:	icall	
000429:0x0016aaf8:	jump	0x16aaa0
000429:0x0016ab00:	rts
array<@JsonUndergroundAreaTriggerData>::RemoveItem()
000479:0x0016ab30:	movefm	@c00, value
000479:0x0016ab40:	icall	
000479:0x0016ab50:	move	remove_index, #return
000481:0x0016ab60:	cmpi	remove_index, _i0
000481:0x0016ab70:	blt	0x16ab88
000483:0x0016ab78:	ncalli	array<@JsonUndergroundAreaTriggerData>.RemoveOrdered(remove_index)
000483:0x0016ab88:	rts
array<@JsonUndergroundAreaTriggerData>::RemoveItemUnOrdered()
000489:0x0016abb8:	movefm	@c00, value
000489:0x0016abc8:	icall	
000489:0x0016abd8:	move	remove_index, #return
000491:0x0016abe8:	cmpi	remove_index, _i0
000491:0x0016abf8:	blt	0x16ac10
000493:0x0016ac00:	ncalli	array<@JsonUndergroundAreaTriggerData>.Remove(remove_index)
000493:0x0016ac10:	rts
array<@JsonUndergroundAreaTriggerData>::IsValidIndex()
000499:0x0016ac18:	cmpi	index, _i-1
000499:0x0016ac28:	ble	0x16ac68
000499:0x0016ac30:	ncalli	array<@JsonUndergroundAreaTriggerData>.Count()
000499:0x0016ac38:	cmpi	index, #return
000499:0x0016ac48:	bge	0x16ac68
000499:0x0016ac50:	imove	#return, 0x000001
000499:0x0016ac60:	jump	0x16ac78
000499:0x0016ac68:	imove	#return, 0x000000
000499:0x0016ac78:	rts
000499:0x0016ac80:	rts
array<@JsonUndergroundAreaTriggerData>::Debug()
000525:0x0016acd8:	ncalli	array<@JsonUndergroundAreaTriggerData>.Count()
000525:0x0016ace0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0016ad10:	icall	Print(#return)
000526:0x0016ad20:	imove	i, 0x000000
000526:0x0016ad30:	jump	0x16ad50
000526:0x0016ad38:	move	@m00, i
000526:0x0016ad48:	inc	i
000526:0x0016ad50:	ncalli	array<@JsonUndergroundAreaTriggerData>.Count()
000526:0x0016ad58:	cmpi	i, #return
000526:0x0016ad68:	bge	0x16ade0
000528:0x0016ad70:	icall	
000528:0x0016ad80:	movetm	item, #return
000529:0x0016ad90:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0016adc0:	icall	Print(#return)
000529:0x0016add0:	release	item
000529:0x0016add8:	jump	0x16ad38
000529:0x0016ade0:	rts
array<@JsonUndergroundAreaTriggerData>::GetRandomIndex()
000544:0x0016ade8:	ncalli	array<@JsonUndergroundAreaTriggerData>.Count()
000544:0x0016adf0:	move	@m00, #return
000544:0x0016ae00:	cmpi	@m00, _i0
000544:0x0016ae10:	ble	0x16ae48
000546:0x0016ae18:	ncalli	array<@JsonUndergroundAreaTriggerData>.Count()
000546:0x0016ae20:	icall	RandomInt(_i0, #return)
000546:0x0016ae30:	move	#return, #return
000546:0x0016ae40:	rts
000549:0x0016ae48:	imove	#return, 0xffffffff
000549:0x0016ae58:	rts
000549:0x0016ae60:	rts
array<@JsonUndergroundAreaTriggerData>::GetRandomElement()
000563:0x0016ae68:	call	
000563:0x0016ae78:	icall	
000563:0x0016ae88:	movetm	#return, #return
000563:0x0016ae98:	rts
000563:0x0016aea0:	rts
array<@JsonUndergroundAreaTriggerData>::SwapItems()
000568:0x0016aed0:	icall	
000568:0x0016aee0:	movetm	item1, #return
000569:0x0016aef0:	icall	
000569:0x0016af00:	icall	
000570:0x0016af10:	movefm	@c00, item1
000570:0x0016af20:	icall	
000570:0x0016af30:	release	item1
000570:0x0016af38:	rts
array<@JsonUndergroundAreaTriggerData>::InsertArray()
000575:0x0016af90:	imove	i, 0x000000
000575:0x0016afa0:	jump	0x16afc0
000575:0x0016afa8:	move	@m00, i
000575:0x0016afb8:	inc	i
000575:0x0016afc0:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000575:0x0016afc8:	cmpi	i, #return
000575:0x0016afd8:	bge	0x16b030
000577:0x0016afe0:	icall	
000577:0x0016aff0:	movetm	item, #return
000578:0x0016b000:	movefm	@c00, item
000578:0x0016b010:	icall	
000578:0x0016b020:	release	item
000578:0x0016b028:	jump	0x16afa8
000578:0x0016b030:	rts
array<@JsonUndergroundAreaTriggerData>::Invert()
000584:0x0016b0b0:	imove	left, 0x000000
000585:0x0016b0c0:	ncalli	array<@JsonUndergroundAreaTriggerData>.Count()
000585:0x0016b0c8:	subi	right, #return, _i1
000586:0x0016b0d8:	cmpi	right, _i0
000586:0x0016b0e8:	ble	0x16b1a8
000588:0x0016b0f0:	cmpi	left, right
000588:0x0016b100:	bge	0x16b1a8
000590:0x0016b108:	icall	
000590:0x0016b118:	movetm	temp, #return
000591:0x0016b128:	move	@m00, left
000591:0x0016b138:	inc	left
000591:0x0016b140:	icall	
000591:0x0016b150:	icall	
000592:0x0016b160:	move	@m00, right
000592:0x0016b170:	dec	right
000592:0x0016b178:	movefm	@c00, temp
000592:0x0016b188:	icall	
000592:0x0016b198:	release	temp
000592:0x0016b1a0:	jump	0x16b0f0
000592:0x0016b1a8:	rts
array<@JsonUndergroundAreaTriggerData>::MoveIndex()
000612:0x0016b200:	ncalli	array<@JsonUndergroundAreaTriggerData>.Count()
000612:0x0016b208:	move	count, #return
000613:0x0016b218:	move	new_index, curr_index
000615:0x0016b228:	cmpi	move_number, _i0
000615:0x0016b238:	ble	0x16b260
000617:0x0016b240:	addi	@m00, curr_index, move_number
000617:0x0016b250:	move	new_index, @m00
000620:0x0016b260:	cmpi	move_number, _i0
000620:0x0016b270:	bge	0x16b318
000622:0x0016b278:	subi	@m00, curr_index, move_number
000622:0x0016b288:	move	new_index, @m00
000624:0x0016b298:	cmpi	new_index, _i0
000624:0x0016b2a8:	bge	0x16b318
000626:0x0016b2b0:	subi	@m01, _i0, count
000626:0x0016b2c0:	cmpi	new_index, @m01
000626:0x0016b2d0:	bgt	0x16b2f8
000628:0x0016b2d8:	modi	@m00, new_index, count
000628:0x0016b2e8:	move	new_index, @m00
000631:0x0016b2f8:	addi	@m00, new_index, count
000631:0x0016b308:	move	new_index, @m00
000635:0x0016b318:	cmpi	new_index, count
000635:0x0016b328:	blt	0x16b350
000637:0x0016b330:	modi	@m00, new_index, count
000637:0x0016b340:	move	new_index, @m00
000641:0x0016b350:	move	#return, new_index
000641:0x0016b360:	rts
000641:0x0016b368:	rts
array<@JsonUndergroundAreaTriggerData>::ShuffleArray()
000646:0x0016b398:	imove	i, 0x000000
000646:0x0016b3a8:	jump	0x16b3c8
000646:0x0016b3b0:	move	@m00, i
000646:0x0016b3c0:	inc	i
000646:0x0016b3c8:	ncalli	array<@JsonUndergroundAreaTriggerData>.Count()
000646:0x0016b3d0:	cmpi	i, #return
000646:0x0016b3e0:	bge	0x16b418
000648:0x0016b3e8:	call	
000648:0x0016b3f8:	call	
000648:0x0016b410:	jump	0x16b3b0
000648:0x0016b418:	rts
array<@JsonUndergroundAreaTriggerData>::DifferentAtPosition()
000666:0x0016b448:	ncalli	array<@JsonUndergroundAreaTriggerData>.Count()
000666:0x0016b450:	move	@m00, #return
000666:0x0016b460:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000666:0x0016b468:	cmpi	@m00, #return
000666:0x0016b478:	beq	0x16b4a8
000668:0x0016b480:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0016b490:	imove	#return, 0xffffffff
000669:0x0016b4a0:	rts
000672:0x0016b4a8:	imove	i, 0x000000
000672:0x0016b4b8:	jump	0x16b4c8
000672:0x0016b4c0:	inc	i
000672:0x0016b4c8:	ncalli	array<JsonUndergroundAreaTriggerData>.Count()
000672:0x0016b4d0:	cmpi	i, #return
000672:0x0016b4e0:	bge	0x16b550
000674:0x0016b4e8:	icall	
000674:0x0016b4f8:	movec	@c00, #return
000674:0x0016b508:	icall	
000674:0x0016b518:	cmpc	@c00, #return
000674:0x0016b528:	beq	0x16b548
000676:0x0016b530:	move	#return, i
000676:0x0016b540:	rts
000676:0x0016b548:	jump	0x16b4c0
000680:0x0016b550:	imove	#return, 0xffffffff
000680:0x0016b560:	rts
000680:0x0016b568:	rts
array<AnimSoundEvent>::InsertAll()
000427:0x0016bda0:	imove	i, 0x000000
000427:0x0016bdb0:	jump	0x16bdd0
000427:0x0016bdb8:	move	@m00, i
000427:0x0016bdc8:	inc	i
000427:0x0016bdd0:	ncalli	array<AnimSoundEvent>.Count()
000427:0x0016bdd8:	cmpi	i, #return
000427:0x0016bde8:	bge	0x16be18
000429:0x0016bdf0:	icall	
000429:0x0016be00:	icall	
000429:0x0016be10:	jump	0x16bdb8
000429:0x0016be18:	rts
array<AnimSoundEvent>::RemoveItem()
000479:0x0016be48:	movefm	@c00, value
000479:0x0016be58:	icall	
000479:0x0016be68:	move	remove_index, #return
000481:0x0016be78:	cmpi	remove_index, _i0
000481:0x0016be88:	blt	0x16bea0
000483:0x0016be90:	ncalli	array<AnimSoundEvent>.RemoveOrdered(remove_index)
000483:0x0016bea0:	rts
array<AnimSoundEvent>::RemoveItemUnOrdered()
000489:0x0016bed0:	movefm	@c00, value
000489:0x0016bee0:	icall	
000489:0x0016bef0:	move	remove_index, #return
000491:0x0016bf00:	cmpi	remove_index, _i0
000491:0x0016bf10:	blt	0x16bf28
000493:0x0016bf18:	ncalli	array<AnimSoundEvent>.Remove(remove_index)
000493:0x0016bf28:	rts
array<AnimSoundEvent>::IsValidIndex()
000499:0x0016bf30:	cmpi	index, _i-1
000499:0x0016bf40:	ble	0x16bf80
000499:0x0016bf48:	ncalli	array<AnimSoundEvent>.Count()
000499:0x0016bf50:	cmpi	index, #return
000499:0x0016bf60:	bge	0x16bf80
000499:0x0016bf68:	imove	#return, 0x000001
000499:0x0016bf78:	jump	0x16bf90
000499:0x0016bf80:	imove	#return, 0x000000
000499:0x0016bf90:	rts
000499:0x0016bf98:	rts
array<AnimSoundEvent>::Debug()
000525:0x0016bff0:	ncalli	array<AnimSoundEvent>.Count()
000525:0x0016bff8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0016c028:	icall	Print(#return)
000526:0x0016c038:	imove	i, 0x000000
000526:0x0016c048:	jump	0x16c068
000526:0x0016c050:	move	@m00, i
000526:0x0016c060:	inc	i
000526:0x0016c068:	ncalli	array<AnimSoundEvent>.Count()
000526:0x0016c070:	cmpi	i, #return
000526:0x0016c080:	bge	0x16c0f8
000528:0x0016c088:	icall	
000528:0x0016c098:	movetm	item, #return
000529:0x0016c0a8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0016c0d8:	icall	Print(#return)
000529:0x0016c0e8:	release	item
000529:0x0016c0f0:	jump	0x16c050
000529:0x0016c0f8:	rts
array<AnimSoundEvent>::GetRandomIndex()
000544:0x0016c100:	ncalli	array<AnimSoundEvent>.Count()
000544:0x0016c108:	move	@m00, #return
000544:0x0016c118:	cmpi	@m00, _i0
000544:0x0016c128:	ble	0x16c160
000546:0x0016c130:	ncalli	array<AnimSoundEvent>.Count()
000546:0x0016c138:	icall	RandomInt(_i0, #return)
000546:0x0016c148:	move	#return, #return
000546:0x0016c158:	rts
000549:0x0016c160:	imove	#return, 0xffffffff
000549:0x0016c170:	rts
000549:0x0016c178:	rts
array<AnimSoundEvent>::GetRandomElement()
000563:0x0016c180:	call	
000563:0x0016c190:	icall	
000563:0x0016c1a0:	movetm	#return, #return
000563:0x0016c1b0:	rts
000563:0x0016c1b8:	rts
array<AnimSoundEvent>::SwapItems()
000568:0x0016c1e8:	icall	
000568:0x0016c1f8:	movetm	item1, #return
000569:0x0016c208:	icall	
000569:0x0016c218:	icall	
000570:0x0016c228:	movefm	@c00, item1
000570:0x0016c238:	icall	
000570:0x0016c248:	release	item1
000570:0x0016c250:	rts
array<AnimSoundEvent>::InsertArray()
000575:0x0016c2a8:	imove	i, 0x000000
000575:0x0016c2b8:	jump	0x16c2d8
000575:0x0016c2c0:	move	@m00, i
000575:0x0016c2d0:	inc	i
000575:0x0016c2d8:	ncalli	array<AnimSoundEvent>.Count()
000575:0x0016c2e0:	cmpi	i, #return
000575:0x0016c2f0:	bge	0x16c348
000577:0x0016c2f8:	icall	
000577:0x0016c308:	movetm	item, #return
000578:0x0016c318:	movefm	@c00, item
000578:0x0016c328:	icall	
000578:0x0016c338:	release	item
000578:0x0016c340:	jump	0x16c2c0
000578:0x0016c348:	rts
array<AnimSoundEvent>::Invert()
000584:0x0016c3c8:	imove	left, 0x000000
000585:0x0016c3d8:	ncalli	array<AnimSoundEvent>.Count()
000585:0x0016c3e0:	subi	right, #return, _i1
000586:0x0016c3f0:	cmpi	right, _i0
000586:0x0016c400:	ble	0x16c4c0
000588:0x0016c408:	cmpi	left, right
000588:0x0016c418:	bge	0x16c4c0
000590:0x0016c420:	icall	
000590:0x0016c430:	movetm	temp, #return
000591:0x0016c440:	move	@m00, left
000591:0x0016c450:	inc	left
000591:0x0016c458:	icall	
000591:0x0016c468:	icall	
000592:0x0016c478:	move	@m00, right
000592:0x0016c488:	dec	right
000592:0x0016c490:	movefm	@c00, temp
000592:0x0016c4a0:	icall	
000592:0x0016c4b0:	release	temp
000592:0x0016c4b8:	jump	0x16c408
000592:0x0016c4c0:	rts
array<AnimSoundEvent>::MoveIndex()
000612:0x0016c518:	ncalli	array<AnimSoundEvent>.Count()
000612:0x0016c520:	move	count, #return
000613:0x0016c530:	move	new_index, curr_index
000615:0x0016c540:	cmpi	move_number, _i0
000615:0x0016c550:	ble	0x16c578
000617:0x0016c558:	addi	@m00, curr_index, move_number
000617:0x0016c568:	move	new_index, @m00
000620:0x0016c578:	cmpi	move_number, _i0
000620:0x0016c588:	bge	0x16c630
000622:0x0016c590:	subi	@m00, curr_index, move_number
000622:0x0016c5a0:	move	new_index, @m00
000624:0x0016c5b0:	cmpi	new_index, _i0
000624:0x0016c5c0:	bge	0x16c630
000626:0x0016c5c8:	subi	@m01, _i0, count
000626:0x0016c5d8:	cmpi	new_index, @m01
000626:0x0016c5e8:	bgt	0x16c610
000628:0x0016c5f0:	modi	@m00, new_index, count
000628:0x0016c600:	move	new_index, @m00
000631:0x0016c610:	addi	@m00, new_index, count
000631:0x0016c620:	move	new_index, @m00
000635:0x0016c630:	cmpi	new_index, count
000635:0x0016c640:	blt	0x16c668
000637:0x0016c648:	modi	@m00, new_index, count
000637:0x0016c658:	move	new_index, @m00
000641:0x0016c668:	move	#return, new_index
000641:0x0016c678:	rts
000641:0x0016c680:	rts
array<AnimSoundEvent>::ShuffleArray()
000646:0x0016c6b0:	imove	i, 0x000000
000646:0x0016c6c0:	jump	0x16c6e0
000646:0x0016c6c8:	move	@m00, i
000646:0x0016c6d8:	inc	i
000646:0x0016c6e0:	ncalli	array<AnimSoundEvent>.Count()
000646:0x0016c6e8:	cmpi	i, #return
000646:0x0016c6f8:	bge	0x16c730
000648:0x0016c700:	call	
000648:0x0016c710:	call	
000648:0x0016c728:	jump	0x16c6c8
000648:0x0016c730:	rts
array<AnimSoundEvent>::DifferentAtPosition()
000666:0x0016c760:	ncalli	array<AnimSoundEvent>.Count()
000666:0x0016c768:	move	@m00, #return
000666:0x0016c778:	push	#return
000666:0x0016c780:	ncalli	array<AnimSoundEvent>.Count()
000666:0x0016c788:	move	@m02, #return
000666:0x0016c798:	pop	#return
000666:0x0016c7a0:	cmpi	@m00, @m02
000666:0x0016c7b0:	beq	0x16c7e0
000668:0x0016c7b8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0016c7c8:	imove	#return, 0xffffffff
000669:0x0016c7d8:	rts
000672:0x0016c7e0:	imove	i, 0x000000
000672:0x0016c7f0:	jump	0x16c800
000672:0x0016c7f8:	inc	i
000672:0x0016c800:	ncalli	array<AnimSoundEvent>.Count()
000672:0x0016c808:	cmpi	i, #return
000672:0x0016c818:	bge	0x16c8a8
000674:0x0016c820:	icall	
000674:0x0016c830:	movec	@c00, #return
000674:0x0016c840:	pushc	#return
000674:0x0016c848:	icall	
000674:0x0016c858:	movec	@c02, #return
000674:0x0016c868:	popc	#return
000674:0x0016c870:	cmpc	@c00, @c02
000674:0x0016c880:	beq	0x16c8a0
000676:0x0016c888:	move	#return, i
000676:0x0016c898:	rts
000676:0x0016c8a0:	jump	0x16c7f8
000680:0x0016c8a8:	imove	#return, 0xffffffff
000680:0x0016c8b8:	rts
000680:0x0016c8c0:	rts
array<@AnimSoundEvent>::InsertAll()
000427:0x0016ccd8:	imove	i, 0x000000
000427:0x0016cce8:	jump	0x16cd08
000427:0x0016ccf0:	move	@m00, i
000427:0x0016cd00:	inc	i
000427:0x0016cd08:	ncalli	array<AnimSoundEvent>.Count()
000427:0x0016cd10:	cmpi	i, #return
000427:0x0016cd20:	bge	0x16cd50
000429:0x0016cd28:	icall	
000429:0x0016cd38:	icall	
000429:0x0016cd48:	jump	0x16ccf0
000429:0x0016cd50:	rts
array<@AnimSoundEvent>::RemoveItem()
000479:0x0016cd80:	movefm	@c00, value
000479:0x0016cd90:	icall	
000479:0x0016cda0:	move	remove_index, #return
000481:0x0016cdb0:	cmpi	remove_index, _i0
000481:0x0016cdc0:	blt	0x16cdd8
000483:0x0016cdc8:	ncalli	array<@AnimSoundEvent>.RemoveOrdered(remove_index)
000483:0x0016cdd8:	rts
array<@AnimSoundEvent>::RemoveItemUnOrdered()
000489:0x0016ce08:	movefm	@c00, value
000489:0x0016ce18:	icall	
000489:0x0016ce28:	move	remove_index, #return
000491:0x0016ce38:	cmpi	remove_index, _i0
000491:0x0016ce48:	blt	0x16ce60
000493:0x0016ce50:	ncalli	array<@AnimSoundEvent>.Remove(remove_index)
000493:0x0016ce60:	rts
array<@AnimSoundEvent>::IsValidIndex()
000499:0x0016ce68:	cmpi	index, _i-1
000499:0x0016ce78:	ble	0x16ceb8
000499:0x0016ce80:	ncalli	array<@AnimSoundEvent>.Count()
000499:0x0016ce88:	cmpi	index, #return
000499:0x0016ce98:	bge	0x16ceb8
000499:0x0016cea0:	imove	#return, 0x000001
000499:0x0016ceb0:	jump	0x16cec8
000499:0x0016ceb8:	imove	#return, 0x000000
000499:0x0016cec8:	rts
000499:0x0016ced0:	rts
array<@AnimSoundEvent>::Debug()
000525:0x0016cf28:	ncalli	array<@AnimSoundEvent>.Count()
000525:0x0016cf30:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0016cf60:	icall	Print(#return)
000526:0x0016cf70:	imove	i, 0x000000
000526:0x0016cf80:	jump	0x16cfa0
000526:0x0016cf88:	move	@m00, i
000526:0x0016cf98:	inc	i
000526:0x0016cfa0:	ncalli	array<@AnimSoundEvent>.Count()
000526:0x0016cfa8:	cmpi	i, #return
000526:0x0016cfb8:	bge	0x16d030
000528:0x0016cfc0:	icall	
000528:0x0016cfd0:	movetm	item, #return
000529:0x0016cfe0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0016d010:	icall	Print(#return)
000529:0x0016d020:	release	item
000529:0x0016d028:	jump	0x16cf88
000529:0x0016d030:	rts
array<@AnimSoundEvent>::GetRandomIndex()
000544:0x0016d038:	ncalli	array<@AnimSoundEvent>.Count()
000544:0x0016d040:	move	@m00, #return
000544:0x0016d050:	cmpi	@m00, _i0
000544:0x0016d060:	ble	0x16d098
000546:0x0016d068:	ncalli	array<@AnimSoundEvent>.Count()
000546:0x0016d070:	icall	RandomInt(_i0, #return)
000546:0x0016d080:	move	#return, #return
000546:0x0016d090:	rts
000549:0x0016d098:	imove	#return, 0xffffffff
000549:0x0016d0a8:	rts
000549:0x0016d0b0:	rts
array<@AnimSoundEvent>::GetRandomElement()
000563:0x0016d0b8:	call	
000563:0x0016d0c8:	icall	
000563:0x0016d0d8:	movetm	#return, #return
000563:0x0016d0e8:	rts
000563:0x0016d0f0:	rts
array<@AnimSoundEvent>::SwapItems()
000568:0x0016d120:	icall	
000568:0x0016d130:	movetm	item1, #return
000569:0x0016d140:	icall	
000569:0x0016d150:	icall	
000570:0x0016d160:	movefm	@c00, item1
000570:0x0016d170:	icall	
000570:0x0016d180:	release	item1
000570:0x0016d188:	rts
array<@AnimSoundEvent>::InsertArray()
000575:0x0016d1e0:	imove	i, 0x000000
000575:0x0016d1f0:	jump	0x16d210
000575:0x0016d1f8:	move	@m00, i
000575:0x0016d208:	inc	i
000575:0x0016d210:	ncalli	array<AnimSoundEvent>.Count()
000575:0x0016d218:	cmpi	i, #return
000575:0x0016d228:	bge	0x16d280
000577:0x0016d230:	icall	
000577:0x0016d240:	movetm	item, #return
000578:0x0016d250:	movefm	@c00, item
000578:0x0016d260:	icall	
000578:0x0016d270:	release	item
000578:0x0016d278:	jump	0x16d1f8
000578:0x0016d280:	rts
array<@AnimSoundEvent>::Invert()
000584:0x0016d300:	imove	left, 0x000000
000585:0x0016d310:	ncalli	array<@AnimSoundEvent>.Count()
000585:0x0016d318:	subi	right, #return, _i1
000586:0x0016d328:	cmpi	right, _i0
000586:0x0016d338:	ble	0x16d3f8
000588:0x0016d340:	cmpi	left, right
000588:0x0016d350:	bge	0x16d3f8
000590:0x0016d358:	icall	
000590:0x0016d368:	movetm	temp, #return
000591:0x0016d378:	move	@m00, left
000591:0x0016d388:	inc	left
000591:0x0016d390:	icall	
000591:0x0016d3a0:	icall	
000592:0x0016d3b0:	move	@m00, right
000592:0x0016d3c0:	dec	right
000592:0x0016d3c8:	movefm	@c00, temp
000592:0x0016d3d8:	icall	
000592:0x0016d3e8:	release	temp
000592:0x0016d3f0:	jump	0x16d340
000592:0x0016d3f8:	rts
array<@AnimSoundEvent>::MoveIndex()
000612:0x0016d450:	ncalli	array<@AnimSoundEvent>.Count()
000612:0x0016d458:	move	count, #return
000613:0x0016d468:	move	new_index, curr_index
000615:0x0016d478:	cmpi	move_number, _i0
000615:0x0016d488:	ble	0x16d4b0
000617:0x0016d490:	addi	@m00, curr_index, move_number
000617:0x0016d4a0:	move	new_index, @m00
000620:0x0016d4b0:	cmpi	move_number, _i0
000620:0x0016d4c0:	bge	0x16d568
000622:0x0016d4c8:	subi	@m00, curr_index, move_number
000622:0x0016d4d8:	move	new_index, @m00
000624:0x0016d4e8:	cmpi	new_index, _i0
000624:0x0016d4f8:	bge	0x16d568
000626:0x0016d500:	subi	@m01, _i0, count
000626:0x0016d510:	cmpi	new_index, @m01
000626:0x0016d520:	bgt	0x16d548
000628:0x0016d528:	modi	@m00, new_index, count
000628:0x0016d538:	move	new_index, @m00
000631:0x0016d548:	addi	@m00, new_index, count
000631:0x0016d558:	move	new_index, @m00
000635:0x0016d568:	cmpi	new_index, count
000635:0x0016d578:	blt	0x16d5a0
000637:0x0016d580:	modi	@m00, new_index, count
000637:0x0016d590:	move	new_index, @m00
000641:0x0016d5a0:	move	#return, new_index
000641:0x0016d5b0:	rts
000641:0x0016d5b8:	rts
array<@AnimSoundEvent>::ShuffleArray()
000646:0x0016d5e8:	imove	i, 0x000000
000646:0x0016d5f8:	jump	0x16d618
000646:0x0016d600:	move	@m00, i
000646:0x0016d610:	inc	i
000646:0x0016d618:	ncalli	array<@AnimSoundEvent>.Count()
000646:0x0016d620:	cmpi	i, #return
000646:0x0016d630:	bge	0x16d668
000648:0x0016d638:	call	
000648:0x0016d648:	call	
000648:0x0016d660:	jump	0x16d600
000648:0x0016d668:	rts
array<@AnimSoundEvent>::DifferentAtPosition()
000666:0x0016d698:	ncalli	array<@AnimSoundEvent>.Count()
000666:0x0016d6a0:	move	@m00, #return
000666:0x0016d6b0:	ncalli	array<AnimSoundEvent>.Count()
000666:0x0016d6b8:	cmpi	@m00, #return
000666:0x0016d6c8:	beq	0x16d6f8
000668:0x0016d6d0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0016d6e0:	imove	#return, 0xffffffff
000669:0x0016d6f0:	rts
000672:0x0016d6f8:	imove	i, 0x000000
000672:0x0016d708:	jump	0x16d718
000672:0x0016d710:	inc	i
000672:0x0016d718:	ncalli	array<AnimSoundEvent>.Count()
000672:0x0016d720:	cmpi	i, #return
000672:0x0016d730:	bge	0x16d7a0
000674:0x0016d738:	icall	
000674:0x0016d748:	movec	@c00, #return
000674:0x0016d758:	icall	
000674:0x0016d768:	cmpc	@c00, #return
000674:0x0016d778:	beq	0x16d798
000676:0x0016d780:	move	#return, i
000676:0x0016d790:	rts
000676:0x0016d798:	jump	0x16d710
000680:0x0016d7a0:	imove	#return, 0xffffffff
000680:0x0016d7b0:	rts
000680:0x0016d7b8:	rts
array<AnimSoundVoiceEvent>::InsertAll()
000427:0x0016dff8:	imove	i, 0x000000
000427:0x0016e008:	jump	0x16e028
000427:0x0016e010:	move	@m00, i
000427:0x0016e020:	inc	i
000427:0x0016e028:	ncalli	array<AnimSoundVoiceEvent>.Count()
000427:0x0016e030:	cmpi	i, #return
000427:0x0016e040:	bge	0x16e070
000429:0x0016e048:	icall	
000429:0x0016e058:	icall	
000429:0x0016e068:	jump	0x16e010
000429:0x0016e070:	rts
array<AnimSoundVoiceEvent>::RemoveItem()
000479:0x0016e0a0:	movefm	@c00, value
000479:0x0016e0b0:	icall	
000479:0x0016e0c0:	move	remove_index, #return
000481:0x0016e0d0:	cmpi	remove_index, _i0
000481:0x0016e0e0:	blt	0x16e0f8
000483:0x0016e0e8:	ncalli	array<AnimSoundVoiceEvent>.RemoveOrdered(remove_index)
000483:0x0016e0f8:	rts
array<AnimSoundVoiceEvent>::RemoveItemUnOrdered()
000489:0x0016e128:	movefm	@c00, value
000489:0x0016e138:	icall	
000489:0x0016e148:	move	remove_index, #return
000491:0x0016e158:	cmpi	remove_index, _i0
000491:0x0016e168:	blt	0x16e180
000493:0x0016e170:	ncalli	array<AnimSoundVoiceEvent>.Remove(remove_index)
000493:0x0016e180:	rts
array<AnimSoundVoiceEvent>::IsValidIndex()
000499:0x0016e188:	cmpi	index, _i-1
000499:0x0016e198:	ble	0x16e1d8
000499:0x0016e1a0:	ncalli	array<AnimSoundVoiceEvent>.Count()
000499:0x0016e1a8:	cmpi	index, #return
000499:0x0016e1b8:	bge	0x16e1d8
000499:0x0016e1c0:	imove	#return, 0x000001
000499:0x0016e1d0:	jump	0x16e1e8
000499:0x0016e1d8:	imove	#return, 0x000000
000499:0x0016e1e8:	rts
000499:0x0016e1f0:	rts
array<AnimSoundVoiceEvent>::Debug()
000525:0x0016e248:	ncalli	array<AnimSoundVoiceEvent>.Count()
000525:0x0016e250:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0016e280:	icall	Print(#return)
000526:0x0016e290:	imove	i, 0x000000
000526:0x0016e2a0:	jump	0x16e2c0
000526:0x0016e2a8:	move	@m00, i
000526:0x0016e2b8:	inc	i
000526:0x0016e2c0:	ncalli	array<AnimSoundVoiceEvent>.Count()
000526:0x0016e2c8:	cmpi	i, #return
000526:0x0016e2d8:	bge	0x16e350
000528:0x0016e2e0:	icall	
000528:0x0016e2f0:	movetm	item, #return
000529:0x0016e300:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0016e330:	icall	Print(#return)
000529:0x0016e340:	release	item
000529:0x0016e348:	jump	0x16e2a8
000529:0x0016e350:	rts
array<AnimSoundVoiceEvent>::GetRandomIndex()
000544:0x0016e358:	ncalli	array<AnimSoundVoiceEvent>.Count()
000544:0x0016e360:	move	@m00, #return
000544:0x0016e370:	cmpi	@m00, _i0
000544:0x0016e380:	ble	0x16e3b8
000546:0x0016e388:	ncalli	array<AnimSoundVoiceEvent>.Count()
000546:0x0016e390:	icall	RandomInt(_i0, #return)
000546:0x0016e3a0:	move	#return, #return
000546:0x0016e3b0:	rts
000549:0x0016e3b8:	imove	#return, 0xffffffff
000549:0x0016e3c8:	rts
000549:0x0016e3d0:	rts
array<AnimSoundVoiceEvent>::GetRandomElement()
000563:0x0016e3d8:	call	
000563:0x0016e3e8:	icall	
000563:0x0016e3f8:	movetm	#return, #return
000563:0x0016e408:	rts
000563:0x0016e410:	rts
array<AnimSoundVoiceEvent>::SwapItems()
000568:0x0016e440:	icall	
000568:0x0016e450:	movetm	item1, #return
000569:0x0016e460:	icall	
000569:0x0016e470:	icall	
000570:0x0016e480:	movefm	@c00, item1
000570:0x0016e490:	icall	
000570:0x0016e4a0:	release	item1
000570:0x0016e4a8:	rts
array<AnimSoundVoiceEvent>::InsertArray()
000575:0x0016e500:	imove	i, 0x000000
000575:0x0016e510:	jump	0x16e530
000575:0x0016e518:	move	@m00, i
000575:0x0016e528:	inc	i
000575:0x0016e530:	ncalli	array<AnimSoundVoiceEvent>.Count()
000575:0x0016e538:	cmpi	i, #return
000575:0x0016e548:	bge	0x16e5a0
000577:0x0016e550:	icall	
000577:0x0016e560:	movetm	item, #return
000578:0x0016e570:	movefm	@c00, item
000578:0x0016e580:	icall	
000578:0x0016e590:	release	item
000578:0x0016e598:	jump	0x16e518
000578:0x0016e5a0:	rts
array<AnimSoundVoiceEvent>::Invert()
000584:0x0016e620:	imove	left, 0x000000
000585:0x0016e630:	ncalli	array<AnimSoundVoiceEvent>.Count()
000585:0x0016e638:	subi	right, #return, _i1
000586:0x0016e648:	cmpi	right, _i0
000586:0x0016e658:	ble	0x16e718
000588:0x0016e660:	cmpi	left, right
000588:0x0016e670:	bge	0x16e718
000590:0x0016e678:	icall	
000590:0x0016e688:	movetm	temp, #return
000591:0x0016e698:	move	@m00, left
000591:0x0016e6a8:	inc	left
000591:0x0016e6b0:	icall	
000591:0x0016e6c0:	icall	
000592:0x0016e6d0:	move	@m00, right
000592:0x0016e6e0:	dec	right
000592:0x0016e6e8:	movefm	@c00, temp
000592:0x0016e6f8:	icall	
000592:0x0016e708:	release	temp
000592:0x0016e710:	jump	0x16e660
000592:0x0016e718:	rts
array<AnimSoundVoiceEvent>::MoveIndex()
000612:0x0016e770:	ncalli	array<AnimSoundVoiceEvent>.Count()
000612:0x0016e778:	move	count, #return
000613:0x0016e788:	move	new_index, curr_index
000615:0x0016e798:	cmpi	move_number, _i0
000615:0x0016e7a8:	ble	0x16e7d0
000617:0x0016e7b0:	addi	@m00, curr_index, move_number
000617:0x0016e7c0:	move	new_index, @m00
000620:0x0016e7d0:	cmpi	move_number, _i0
000620:0x0016e7e0:	bge	0x16e888
000622:0x0016e7e8:	subi	@m00, curr_index, move_number
000622:0x0016e7f8:	move	new_index, @m00
000624:0x0016e808:	cmpi	new_index, _i0
000624:0x0016e818:	bge	0x16e888
000626:0x0016e820:	subi	@m01, _i0, count
000626:0x0016e830:	cmpi	new_index, @m01
000626:0x0016e840:	bgt	0x16e868
000628:0x0016e848:	modi	@m00, new_index, count
000628:0x0016e858:	move	new_index, @m00
000631:0x0016e868:	addi	@m00, new_index, count
000631:0x0016e878:	move	new_index, @m00
000635:0x0016e888:	cmpi	new_index, count
000635:0x0016e898:	blt	0x16e8c0
000637:0x0016e8a0:	modi	@m00, new_index, count
000637:0x0016e8b0:	move	new_index, @m00
000641:0x0016e8c0:	move	#return, new_index
000641:0x0016e8d0:	rts
000641:0x0016e8d8:	rts
array<AnimSoundVoiceEvent>::ShuffleArray()
000646:0x0016e908:	imove	i, 0x000000
000646:0x0016e918:	jump	0x16e938
000646:0x0016e920:	move	@m00, i
000646:0x0016e930:	inc	i
000646:0x0016e938:	ncalli	array<AnimSoundVoiceEvent>.Count()
000646:0x0016e940:	cmpi	i, #return
000646:0x0016e950:	bge	0x16e988
000648:0x0016e958:	call	
000648:0x0016e968:	call	
000648:0x0016e980:	jump	0x16e920
000648:0x0016e988:	rts
array<AnimSoundVoiceEvent>::DifferentAtPosition()
000666:0x0016e9b8:	ncalli	array<AnimSoundVoiceEvent>.Count()
000666:0x0016e9c0:	move	@m00, #return
000666:0x0016e9d0:	push	#return
000666:0x0016e9d8:	ncalli	array<AnimSoundVoiceEvent>.Count()
000666:0x0016e9e0:	move	@m02, #return
000666:0x0016e9f0:	pop	#return
000666:0x0016e9f8:	cmpi	@m00, @m02
000666:0x0016ea08:	beq	0x16ea38
000668:0x0016ea10:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0016ea20:	imove	#return, 0xffffffff
000669:0x0016ea30:	rts
000672:0x0016ea38:	imove	i, 0x000000
000672:0x0016ea48:	jump	0x16ea58
000672:0x0016ea50:	inc	i
000672:0x0016ea58:	ncalli	array<AnimSoundVoiceEvent>.Count()
000672:0x0016ea60:	cmpi	i, #return
000672:0x0016ea70:	bge	0x16eb00
000674:0x0016ea78:	icall	
000674:0x0016ea88:	movec	@c00, #return
000674:0x0016ea98:	pushc	#return
000674:0x0016eaa0:	icall	
000674:0x0016eab0:	movec	@c02, #return
000674:0x0016eac0:	popc	#return
000674:0x0016eac8:	cmpc	@c00, @c02
000674:0x0016ead8:	beq	0x16eaf8
000676:0x0016eae0:	move	#return, i
000676:0x0016eaf0:	rts
000676:0x0016eaf8:	jump	0x16ea50
000680:0x0016eb00:	imove	#return, 0xffffffff
000680:0x0016eb10:	rts
000680:0x0016eb18:	rts
array<@AnimSoundVoiceEvent>::InsertAll()
000427:0x0016ef30:	imove	i, 0x000000
000427:0x0016ef40:	jump	0x16ef60
000427:0x0016ef48:	move	@m00, i
000427:0x0016ef58:	inc	i
000427:0x0016ef60:	ncalli	array<AnimSoundVoiceEvent>.Count()
000427:0x0016ef68:	cmpi	i, #return
000427:0x0016ef78:	bge	0x16efa8
000429:0x0016ef80:	icall	
000429:0x0016ef90:	icall	
000429:0x0016efa0:	jump	0x16ef48
000429:0x0016efa8:	rts
array<@AnimSoundVoiceEvent>::RemoveItem()
000479:0x0016efd8:	movefm	@c00, value
000479:0x0016efe8:	icall	
000479:0x0016eff8:	move	remove_index, #return
000481:0x0016f008:	cmpi	remove_index, _i0
000481:0x0016f018:	blt	0x16f030
000483:0x0016f020:	ncalli	array<@AnimSoundVoiceEvent>.RemoveOrdered(remove_index)
000483:0x0016f030:	rts
array<@AnimSoundVoiceEvent>::RemoveItemUnOrdered()
000489:0x0016f060:	movefm	@c00, value
000489:0x0016f070:	icall	
000489:0x0016f080:	move	remove_index, #return
000491:0x0016f090:	cmpi	remove_index, _i0
000491:0x0016f0a0:	blt	0x16f0b8
000493:0x0016f0a8:	ncalli	array<@AnimSoundVoiceEvent>.Remove(remove_index)
000493:0x0016f0b8:	rts
array<@AnimSoundVoiceEvent>::IsValidIndex()
000499:0x0016f0c0:	cmpi	index, _i-1
000499:0x0016f0d0:	ble	0x16f110
000499:0x0016f0d8:	ncalli	array<@AnimSoundVoiceEvent>.Count()
000499:0x0016f0e0:	cmpi	index, #return
000499:0x0016f0f0:	bge	0x16f110
000499:0x0016f0f8:	imove	#return, 0x000001
000499:0x0016f108:	jump	0x16f120
000499:0x0016f110:	imove	#return, 0x000000
000499:0x0016f120:	rts
000499:0x0016f128:	rts
array<@AnimSoundVoiceEvent>::Debug()
000525:0x0016f180:	ncalli	array<@AnimSoundVoiceEvent>.Count()
000525:0x0016f188:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0016f1b8:	icall	Print(#return)
000526:0x0016f1c8:	imove	i, 0x000000
000526:0x0016f1d8:	jump	0x16f1f8
000526:0x0016f1e0:	move	@m00, i
000526:0x0016f1f0:	inc	i
000526:0x0016f1f8:	ncalli	array<@AnimSoundVoiceEvent>.Count()
000526:0x0016f200:	cmpi	i, #return
000526:0x0016f210:	bge	0x16f288
000528:0x0016f218:	icall	
000528:0x0016f228:	movetm	item, #return
000529:0x0016f238:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0016f268:	icall	Print(#return)
000529:0x0016f278:	release	item
000529:0x0016f280:	jump	0x16f1e0
000529:0x0016f288:	rts
array<@AnimSoundVoiceEvent>::GetRandomIndex()
000544:0x0016f290:	ncalli	array<@AnimSoundVoiceEvent>.Count()
000544:0x0016f298:	move	@m00, #return
000544:0x0016f2a8:	cmpi	@m00, _i0
000544:0x0016f2b8:	ble	0x16f2f0
000546:0x0016f2c0:	ncalli	array<@AnimSoundVoiceEvent>.Count()
000546:0x0016f2c8:	icall	RandomInt(_i0, #return)
000546:0x0016f2d8:	move	#return, #return
000546:0x0016f2e8:	rts
000549:0x0016f2f0:	imove	#return, 0xffffffff
000549:0x0016f300:	rts
000549:0x0016f308:	rts
array<@AnimSoundVoiceEvent>::GetRandomElement()
000563:0x0016f310:	call	
000563:0x0016f320:	icall	
000563:0x0016f330:	movetm	#return, #return
000563:0x0016f340:	rts
000563:0x0016f348:	rts
array<@AnimSoundVoiceEvent>::SwapItems()
000568:0x0016f378:	icall	
000568:0x0016f388:	movetm	item1, #return
000569:0x0016f398:	icall	
000569:0x0016f3a8:	icall	
000570:0x0016f3b8:	movefm	@c00, item1
000570:0x0016f3c8:	icall	
000570:0x0016f3d8:	release	item1
000570:0x0016f3e0:	rts
array<@AnimSoundVoiceEvent>::InsertArray()
000575:0x0016f438:	imove	i, 0x000000
000575:0x0016f448:	jump	0x16f468
000575:0x0016f450:	move	@m00, i
000575:0x0016f460:	inc	i
000575:0x0016f468:	ncalli	array<AnimSoundVoiceEvent>.Count()
000575:0x0016f470:	cmpi	i, #return
000575:0x0016f480:	bge	0x16f4d8
000577:0x0016f488:	icall	
000577:0x0016f498:	movetm	item, #return
000578:0x0016f4a8:	movefm	@c00, item
000578:0x0016f4b8:	icall	
000578:0x0016f4c8:	release	item
000578:0x0016f4d0:	jump	0x16f450
000578:0x0016f4d8:	rts
array<@AnimSoundVoiceEvent>::Invert()
000584:0x0016f558:	imove	left, 0x000000
000585:0x0016f568:	ncalli	array<@AnimSoundVoiceEvent>.Count()
000585:0x0016f570:	subi	right, #return, _i1
000586:0x0016f580:	cmpi	right, _i0
000586:0x0016f590:	ble	0x16f650
000588:0x0016f598:	cmpi	left, right
000588:0x0016f5a8:	bge	0x16f650
000590:0x0016f5b0:	icall	
000590:0x0016f5c0:	movetm	temp, #return
000591:0x0016f5d0:	move	@m00, left
000591:0x0016f5e0:	inc	left
000591:0x0016f5e8:	icall	
000591:0x0016f5f8:	icall	
000592:0x0016f608:	move	@m00, right
000592:0x0016f618:	dec	right
000592:0x0016f620:	movefm	@c00, temp
000592:0x0016f630:	icall	
000592:0x0016f640:	release	temp
000592:0x0016f648:	jump	0x16f598
000592:0x0016f650:	rts
array<@AnimSoundVoiceEvent>::MoveIndex()
000612:0x0016f6a8:	ncalli	array<@AnimSoundVoiceEvent>.Count()
000612:0x0016f6b0:	move	count, #return
000613:0x0016f6c0:	move	new_index, curr_index
000615:0x0016f6d0:	cmpi	move_number, _i0
000615:0x0016f6e0:	ble	0x16f708
000617:0x0016f6e8:	addi	@m00, curr_index, move_number
000617:0x0016f6f8:	move	new_index, @m00
000620:0x0016f708:	cmpi	move_number, _i0
000620:0x0016f718:	bge	0x16f7c0
000622:0x0016f720:	subi	@m00, curr_index, move_number
000622:0x0016f730:	move	new_index, @m00
000624:0x0016f740:	cmpi	new_index, _i0
000624:0x0016f750:	bge	0x16f7c0
000626:0x0016f758:	subi	@m01, _i0, count
000626:0x0016f768:	cmpi	new_index, @m01
000626:0x0016f778:	bgt	0x16f7a0
000628:0x0016f780:	modi	@m00, new_index, count
000628:0x0016f790:	move	new_index, @m00
000631:0x0016f7a0:	addi	@m00, new_index, count
000631:0x0016f7b0:	move	new_index, @m00
000635:0x0016f7c0:	cmpi	new_index, count
000635:0x0016f7d0:	blt	0x16f7f8
000637:0x0016f7d8:	modi	@m00, new_index, count
000637:0x0016f7e8:	move	new_index, @m00
000641:0x0016f7f8:	move	#return, new_index
000641:0x0016f808:	rts
000641:0x0016f810:	rts
array<@AnimSoundVoiceEvent>::ShuffleArray()
000646:0x0016f840:	imove	i, 0x000000
000646:0x0016f850:	jump	0x16f870
000646:0x0016f858:	move	@m00, i
000646:0x0016f868:	inc	i
000646:0x0016f870:	ncalli	array<@AnimSoundVoiceEvent>.Count()
000646:0x0016f878:	cmpi	i, #return
000646:0x0016f888:	bge	0x16f8c0
000648:0x0016f890:	call	
000648:0x0016f8a0:	call	
000648:0x0016f8b8:	jump	0x16f858
000648:0x0016f8c0:	rts
array<@AnimSoundVoiceEvent>::DifferentAtPosition()
000666:0x0016f8f0:	ncalli	array<@AnimSoundVoiceEvent>.Count()
000666:0x0016f8f8:	move	@m00, #return
000666:0x0016f908:	ncalli	array<AnimSoundVoiceEvent>.Count()
000666:0x0016f910:	cmpi	@m00, #return
000666:0x0016f920:	beq	0x16f950
000668:0x0016f928:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0016f938:	imove	#return, 0xffffffff
000669:0x0016f948:	rts
000672:0x0016f950:	imove	i, 0x000000
000672:0x0016f960:	jump	0x16f970
000672:0x0016f968:	inc	i
000672:0x0016f970:	ncalli	array<AnimSoundVoiceEvent>.Count()
000672:0x0016f978:	cmpi	i, #return
000672:0x0016f988:	bge	0x16f9f8
000674:0x0016f990:	icall	
000674:0x0016f9a0:	movec	@c00, #return
000674:0x0016f9b0:	icall	
000674:0x0016f9c0:	cmpc	@c00, #return
000674:0x0016f9d0:	beq	0x16f9f0
000676:0x0016f9d8:	move	#return, i
000676:0x0016f9e8:	rts
000676:0x0016f9f0:	jump	0x16f968
000680:0x0016f9f8:	imove	#return, 0xffffffff
000680:0x0016fa08:	rts
000680:0x0016fa10:	rts
array<AnimStepEvent>::InsertAll()
000427:0x00170248:	imove	i, 0x000000
000427:0x00170258:	jump	0x170278
000427:0x00170260:	move	@m00, i
000427:0x00170270:	inc	i
000427:0x00170278:	ncalli	array<AnimStepEvent>.Count()
000427:0x00170280:	cmpi	i, #return
000427:0x00170290:	bge	0x1702c0
000429:0x00170298:	icall	
000429:0x001702a8:	icall	
000429:0x001702b8:	jump	0x170260
000429:0x001702c0:	rts
array<AnimStepEvent>::RemoveItem()
000479:0x001702f0:	movefm	@c00, value
000479:0x00170300:	icall	
000479:0x00170310:	move	remove_index, #return
000481:0x00170320:	cmpi	remove_index, _i0
000481:0x00170330:	blt	0x170348
000483:0x00170338:	ncalli	array<AnimStepEvent>.RemoveOrdered(remove_index)
000483:0x00170348:	rts
array<AnimStepEvent>::RemoveItemUnOrdered()
000489:0x00170378:	movefm	@c00, value
000489:0x00170388:	icall	
000489:0x00170398:	move	remove_index, #return
000491:0x001703a8:	cmpi	remove_index, _i0
000491:0x001703b8:	blt	0x1703d0
000493:0x001703c0:	ncalli	array<AnimStepEvent>.Remove(remove_index)
000493:0x001703d0:	rts
array<AnimStepEvent>::IsValidIndex()
000499:0x001703d8:	cmpi	index, _i-1
000499:0x001703e8:	ble	0x170428
000499:0x001703f0:	ncalli	array<AnimStepEvent>.Count()
000499:0x001703f8:	cmpi	index, #return
000499:0x00170408:	bge	0x170428
000499:0x00170410:	imove	#return, 0x000001
000499:0x00170420:	jump	0x170438
000499:0x00170428:	imove	#return, 0x000000
000499:0x00170438:	rts
000499:0x00170440:	rts
array<AnimStepEvent>::Debug()
000525:0x00170498:	ncalli	array<AnimStepEvent>.Count()
000525:0x001704a0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001704d0:	icall	Print(#return)
000526:0x001704e0:	imove	i, 0x000000
000526:0x001704f0:	jump	0x170510
000526:0x001704f8:	move	@m00, i
000526:0x00170508:	inc	i
000526:0x00170510:	ncalli	array<AnimStepEvent>.Count()
000526:0x00170518:	cmpi	i, #return
000526:0x00170528:	bge	0x1705a0
000528:0x00170530:	icall	
000528:0x00170540:	movetm	item, #return
000529:0x00170550:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00170580:	icall	Print(#return)
000529:0x00170590:	release	item
000529:0x00170598:	jump	0x1704f8
000529:0x001705a0:	rts
array<AnimStepEvent>::GetRandomIndex()
000544:0x001705a8:	ncalli	array<AnimStepEvent>.Count()
000544:0x001705b0:	move	@m00, #return
000544:0x001705c0:	cmpi	@m00, _i0
000544:0x001705d0:	ble	0x170608
000546:0x001705d8:	ncalli	array<AnimStepEvent>.Count()
000546:0x001705e0:	icall	RandomInt(_i0, #return)
000546:0x001705f0:	move	#return, #return
000546:0x00170600:	rts
000549:0x00170608:	imove	#return, 0xffffffff
000549:0x00170618:	rts
000549:0x00170620:	rts
array<AnimStepEvent>::GetRandomElement()
000563:0x00170628:	call	
000563:0x00170638:	icall	
000563:0x00170648:	movetm	#return, #return
000563:0x00170658:	rts
000563:0x00170660:	rts
array<AnimStepEvent>::SwapItems()
000568:0x00170690:	icall	
000568:0x001706a0:	movetm	item1, #return
000569:0x001706b0:	icall	
000569:0x001706c0:	icall	
000570:0x001706d0:	movefm	@c00, item1
000570:0x001706e0:	icall	
000570:0x001706f0:	release	item1
000570:0x001706f8:	rts
array<AnimStepEvent>::InsertArray()
000575:0x00170750:	imove	i, 0x000000
000575:0x00170760:	jump	0x170780
000575:0x00170768:	move	@m00, i
000575:0x00170778:	inc	i
000575:0x00170780:	ncalli	array<AnimStepEvent>.Count()
000575:0x00170788:	cmpi	i, #return
000575:0x00170798:	bge	0x1707f0
000577:0x001707a0:	icall	
000577:0x001707b0:	movetm	item, #return
000578:0x001707c0:	movefm	@c00, item
000578:0x001707d0:	icall	
000578:0x001707e0:	release	item
000578:0x001707e8:	jump	0x170768
000578:0x001707f0:	rts
array<AnimStepEvent>::Invert()
000584:0x00170870:	imove	left, 0x000000
000585:0x00170880:	ncalli	array<AnimStepEvent>.Count()
000585:0x00170888:	subi	right, #return, _i1
000586:0x00170898:	cmpi	right, _i0
000586:0x001708a8:	ble	0x170968
000588:0x001708b0:	cmpi	left, right
000588:0x001708c0:	bge	0x170968
000590:0x001708c8:	icall	
000590:0x001708d8:	movetm	temp, #return
000591:0x001708e8:	move	@m00, left
000591:0x001708f8:	inc	left
000591:0x00170900:	icall	
000591:0x00170910:	icall	
000592:0x00170920:	move	@m00, right
000592:0x00170930:	dec	right
000592:0x00170938:	movefm	@c00, temp
000592:0x00170948:	icall	
000592:0x00170958:	release	temp
000592:0x00170960:	jump	0x1708b0
000592:0x00170968:	rts
array<AnimStepEvent>::MoveIndex()
000612:0x001709c0:	ncalli	array<AnimStepEvent>.Count()
000612:0x001709c8:	move	count, #return
000613:0x001709d8:	move	new_index, curr_index
000615:0x001709e8:	cmpi	move_number, _i0
000615:0x001709f8:	ble	0x170a20
000617:0x00170a00:	addi	@m00, curr_index, move_number
000617:0x00170a10:	move	new_index, @m00
000620:0x00170a20:	cmpi	move_number, _i0
000620:0x00170a30:	bge	0x170ad8
000622:0x00170a38:	subi	@m00, curr_index, move_number
000622:0x00170a48:	move	new_index, @m00
000624:0x00170a58:	cmpi	new_index, _i0
000624:0x00170a68:	bge	0x170ad8
000626:0x00170a70:	subi	@m01, _i0, count
000626:0x00170a80:	cmpi	new_index, @m01
000626:0x00170a90:	bgt	0x170ab8
000628:0x00170a98:	modi	@m00, new_index, count
000628:0x00170aa8:	move	new_index, @m00
000631:0x00170ab8:	addi	@m00, new_index, count
000631:0x00170ac8:	move	new_index, @m00
000635:0x00170ad8:	cmpi	new_index, count
000635:0x00170ae8:	blt	0x170b10
000637:0x00170af0:	modi	@m00, new_index, count
000637:0x00170b00:	move	new_index, @m00
000641:0x00170b10:	move	#return, new_index
000641:0x00170b20:	rts
000641:0x00170b28:	rts
array<AnimStepEvent>::ShuffleArray()
000646:0x00170b58:	imove	i, 0x000000
000646:0x00170b68:	jump	0x170b88
000646:0x00170b70:	move	@m00, i
000646:0x00170b80:	inc	i
000646:0x00170b88:	ncalli	array<AnimStepEvent>.Count()
000646:0x00170b90:	cmpi	i, #return
000646:0x00170ba0:	bge	0x170bd8
000648:0x00170ba8:	call	
000648:0x00170bb8:	call	
000648:0x00170bd0:	jump	0x170b70
000648:0x00170bd8:	rts
array<AnimStepEvent>::DifferentAtPosition()
000666:0x00170c08:	ncalli	array<AnimStepEvent>.Count()
000666:0x00170c10:	move	@m00, #return
000666:0x00170c20:	push	#return
000666:0x00170c28:	ncalli	array<AnimStepEvent>.Count()
000666:0x00170c30:	move	@m02, #return
000666:0x00170c40:	pop	#return
000666:0x00170c48:	cmpi	@m00, @m02
000666:0x00170c58:	beq	0x170c88
000668:0x00170c60:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00170c70:	imove	#return, 0xffffffff
000669:0x00170c80:	rts
000672:0x00170c88:	imove	i, 0x000000
000672:0x00170c98:	jump	0x170ca8
000672:0x00170ca0:	inc	i
000672:0x00170ca8:	ncalli	array<AnimStepEvent>.Count()
000672:0x00170cb0:	cmpi	i, #return
000672:0x00170cc0:	bge	0x170d50
000674:0x00170cc8:	icall	
000674:0x00170cd8:	movec	@c00, #return
000674:0x00170ce8:	pushc	#return
000674:0x00170cf0:	icall	
000674:0x00170d00:	movec	@c02, #return
000674:0x00170d10:	popc	#return
000674:0x00170d18:	cmpc	@c00, @c02
000674:0x00170d28:	beq	0x170d48
000676:0x00170d30:	move	#return, i
000676:0x00170d40:	rts
000676:0x00170d48:	jump	0x170ca0
000680:0x00170d50:	imove	#return, 0xffffffff
000680:0x00170d60:	rts
000680:0x00170d68:	rts
array<@AnimStepEvent>::InsertAll()
000427:0x00171180:	imove	i, 0x000000
000427:0x00171190:	jump	0x1711b0
000427:0x00171198:	move	@m00, i
000427:0x001711a8:	inc	i
000427:0x001711b0:	ncalli	array<AnimStepEvent>.Count()
000427:0x001711b8:	cmpi	i, #return
000427:0x001711c8:	bge	0x1711f8
000429:0x001711d0:	icall	
000429:0x001711e0:	icall	
000429:0x001711f0:	jump	0x171198
000429:0x001711f8:	rts
array<@AnimStepEvent>::RemoveItem()
000479:0x00171228:	movefm	@c00, value
000479:0x00171238:	icall	
000479:0x00171248:	move	remove_index, #return
000481:0x00171258:	cmpi	remove_index, _i0
000481:0x00171268:	blt	0x171280
000483:0x00171270:	ncalli	array<@AnimStepEvent>.RemoveOrdered(remove_index)
000483:0x00171280:	rts
array<@AnimStepEvent>::RemoveItemUnOrdered()
000489:0x001712b0:	movefm	@c00, value
000489:0x001712c0:	icall	
000489:0x001712d0:	move	remove_index, #return
000491:0x001712e0:	cmpi	remove_index, _i0
000491:0x001712f0:	blt	0x171308
000493:0x001712f8:	ncalli	array<@AnimStepEvent>.Remove(remove_index)
000493:0x00171308:	rts
array<@AnimStepEvent>::IsValidIndex()
000499:0x00171310:	cmpi	index, _i-1
000499:0x00171320:	ble	0x171360
000499:0x00171328:	ncalli	array<@AnimStepEvent>.Count()
000499:0x00171330:	cmpi	index, #return
000499:0x00171340:	bge	0x171360
000499:0x00171348:	imove	#return, 0x000001
000499:0x00171358:	jump	0x171370
000499:0x00171360:	imove	#return, 0x000000
000499:0x00171370:	rts
000499:0x00171378:	rts
array<@AnimStepEvent>::Debug()
000525:0x001713d0:	ncalli	array<@AnimStepEvent>.Count()
000525:0x001713d8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00171408:	icall	Print(#return)
000526:0x00171418:	imove	i, 0x000000
000526:0x00171428:	jump	0x171448
000526:0x00171430:	move	@m00, i
000526:0x00171440:	inc	i
000526:0x00171448:	ncalli	array<@AnimStepEvent>.Count()
000526:0x00171450:	cmpi	i, #return
000526:0x00171460:	bge	0x1714d8
000528:0x00171468:	icall	
000528:0x00171478:	movetm	item, #return
000529:0x00171488:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001714b8:	icall	Print(#return)
000529:0x001714c8:	release	item
000529:0x001714d0:	jump	0x171430
000529:0x001714d8:	rts
array<@AnimStepEvent>::GetRandomIndex()
000544:0x001714e0:	ncalli	array<@AnimStepEvent>.Count()
000544:0x001714e8:	move	@m00, #return
000544:0x001714f8:	cmpi	@m00, _i0
000544:0x00171508:	ble	0x171540
000546:0x00171510:	ncalli	array<@AnimStepEvent>.Count()
000546:0x00171518:	icall	RandomInt(_i0, #return)
000546:0x00171528:	move	#return, #return
000546:0x00171538:	rts
000549:0x00171540:	imove	#return, 0xffffffff
000549:0x00171550:	rts
000549:0x00171558:	rts
array<@AnimStepEvent>::GetRandomElement()
000563:0x00171560:	call	
000563:0x00171570:	icall	
000563:0x00171580:	movetm	#return, #return
000563:0x00171590:	rts
000563:0x00171598:	rts
array<@AnimStepEvent>::SwapItems()
000568:0x001715c8:	icall	
000568:0x001715d8:	movetm	item1, #return
000569:0x001715e8:	icall	
000569:0x001715f8:	icall	
000570:0x00171608:	movefm	@c00, item1
000570:0x00171618:	icall	
000570:0x00171628:	release	item1
000570:0x00171630:	rts
array<@AnimStepEvent>::InsertArray()
000575:0x00171688:	imove	i, 0x000000
000575:0x00171698:	jump	0x1716b8
000575:0x001716a0:	move	@m00, i
000575:0x001716b0:	inc	i
000575:0x001716b8:	ncalli	array<AnimStepEvent>.Count()
000575:0x001716c0:	cmpi	i, #return
000575:0x001716d0:	bge	0x171728
000577:0x001716d8:	icall	
000577:0x001716e8:	movetm	item, #return
000578:0x001716f8:	movefm	@c00, item
000578:0x00171708:	icall	
000578:0x00171718:	release	item
000578:0x00171720:	jump	0x1716a0
000578:0x00171728:	rts
array<@AnimStepEvent>::Invert()
000584:0x001717a8:	imove	left, 0x000000
000585:0x001717b8:	ncalli	array<@AnimStepEvent>.Count()
000585:0x001717c0:	subi	right, #return, _i1
000586:0x001717d0:	cmpi	right, _i0
000586:0x001717e0:	ble	0x1718a0
000588:0x001717e8:	cmpi	left, right
000588:0x001717f8:	bge	0x1718a0
000590:0x00171800:	icall	
000590:0x00171810:	movetm	temp, #return
000591:0x00171820:	move	@m00, left
000591:0x00171830:	inc	left
000591:0x00171838:	icall	
000591:0x00171848:	icall	
000592:0x00171858:	move	@m00, right
000592:0x00171868:	dec	right
000592:0x00171870:	movefm	@c00, temp
000592:0x00171880:	icall	
000592:0x00171890:	release	temp
000592:0x00171898:	jump	0x1717e8
000592:0x001718a0:	rts
array<@AnimStepEvent>::MoveIndex()
000612:0x001718f8:	ncalli	array<@AnimStepEvent>.Count()
000612:0x00171900:	move	count, #return
000613:0x00171910:	move	new_index, curr_index
000615:0x00171920:	cmpi	move_number, _i0
000615:0x00171930:	ble	0x171958
000617:0x00171938:	addi	@m00, curr_index, move_number
000617:0x00171948:	move	new_index, @m00
000620:0x00171958:	cmpi	move_number, _i0
000620:0x00171968:	bge	0x171a10
000622:0x00171970:	subi	@m00, curr_index, move_number
000622:0x00171980:	move	new_index, @m00
000624:0x00171990:	cmpi	new_index, _i0
000624:0x001719a0:	bge	0x171a10
000626:0x001719a8:	subi	@m01, _i0, count
000626:0x001719b8:	cmpi	new_index, @m01
000626:0x001719c8:	bgt	0x1719f0
000628:0x001719d0:	modi	@m00, new_index, count
000628:0x001719e0:	move	new_index, @m00
000631:0x001719f0:	addi	@m00, new_index, count
000631:0x00171a00:	move	new_index, @m00
000635:0x00171a10:	cmpi	new_index, count
000635:0x00171a20:	blt	0x171a48
000637:0x00171a28:	modi	@m00, new_index, count
000637:0x00171a38:	move	new_index, @m00
000641:0x00171a48:	move	#return, new_index
000641:0x00171a58:	rts
000641:0x00171a60:	rts
array<@AnimStepEvent>::ShuffleArray()
000646:0x00171a90:	imove	i, 0x000000
000646:0x00171aa0:	jump	0x171ac0
000646:0x00171aa8:	move	@m00, i
000646:0x00171ab8:	inc	i
000646:0x00171ac0:	ncalli	array<@AnimStepEvent>.Count()
000646:0x00171ac8:	cmpi	i, #return
000646:0x00171ad8:	bge	0x171b10
000648:0x00171ae0:	call	
000648:0x00171af0:	call	
000648:0x00171b08:	jump	0x171aa8
000648:0x00171b10:	rts
array<@AnimStepEvent>::DifferentAtPosition()
000666:0x00171b40:	ncalli	array<@AnimStepEvent>.Count()
000666:0x00171b48:	move	@m00, #return
000666:0x00171b58:	ncalli	array<AnimStepEvent>.Count()
000666:0x00171b60:	cmpi	@m00, #return
000666:0x00171b70:	beq	0x171ba0
000668:0x00171b78:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00171b88:	imove	#return, 0xffffffff
000669:0x00171b98:	rts
000672:0x00171ba0:	imove	i, 0x000000
000672:0x00171bb0:	jump	0x171bc0
000672:0x00171bb8:	inc	i
000672:0x00171bc0:	ncalli	array<AnimStepEvent>.Count()
000672:0x00171bc8:	cmpi	i, #return
000672:0x00171bd8:	bge	0x171c48
000674:0x00171be0:	icall	
000674:0x00171bf0:	movec	@c00, #return
000674:0x00171c00:	icall	
000674:0x00171c10:	cmpc	@c00, #return
000674:0x00171c20:	beq	0x171c40
000676:0x00171c28:	move	#return, i
000676:0x00171c38:	rts
000676:0x00171c40:	jump	0x171bb8
000680:0x00171c48:	imove	#return, 0xffffffff
000680:0x00171c58:	rts
000680:0x00171c60:	rts
array<AnimDamageEvent>::InsertAll()
000427:0x00172498:	imove	i, 0x000000
000427:0x001724a8:	jump	0x1724c8
000427:0x001724b0:	move	@m00, i
000427:0x001724c0:	inc	i
000427:0x001724c8:	ncalli	array<AnimDamageEvent>.Count()
000427:0x001724d0:	cmpi	i, #return
000427:0x001724e0:	bge	0x172510
000429:0x001724e8:	icall	
000429:0x001724f8:	icall	
000429:0x00172508:	jump	0x1724b0
000429:0x00172510:	rts
array<AnimDamageEvent>::RemoveItem()
000479:0x00172540:	movefm	@c00, value
000479:0x00172550:	icall	
000479:0x00172560:	move	remove_index, #return
000481:0x00172570:	cmpi	remove_index, _i0
000481:0x00172580:	blt	0x172598
000483:0x00172588:	ncalli	array<AnimDamageEvent>.RemoveOrdered(remove_index)
000483:0x00172598:	rts
array<AnimDamageEvent>::RemoveItemUnOrdered()
000489:0x001725c8:	movefm	@c00, value
000489:0x001725d8:	icall	
000489:0x001725e8:	move	remove_index, #return
000491:0x001725f8:	cmpi	remove_index, _i0
000491:0x00172608:	blt	0x172620
000493:0x00172610:	ncalli	array<AnimDamageEvent>.Remove(remove_index)
000493:0x00172620:	rts
array<AnimDamageEvent>::IsValidIndex()
000499:0x00172628:	cmpi	index, _i-1
000499:0x00172638:	ble	0x172678
000499:0x00172640:	ncalli	array<AnimDamageEvent>.Count()
000499:0x00172648:	cmpi	index, #return
000499:0x00172658:	bge	0x172678
000499:0x00172660:	imove	#return, 0x000001
000499:0x00172670:	jump	0x172688
000499:0x00172678:	imove	#return, 0x000000
000499:0x00172688:	rts
000499:0x00172690:	rts
array<AnimDamageEvent>::Debug()
000525:0x001726e8:	ncalli	array<AnimDamageEvent>.Count()
000525:0x001726f0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00172720:	icall	Print(#return)
000526:0x00172730:	imove	i, 0x000000
000526:0x00172740:	jump	0x172760
000526:0x00172748:	move	@m00, i
000526:0x00172758:	inc	i
000526:0x00172760:	ncalli	array<AnimDamageEvent>.Count()
000526:0x00172768:	cmpi	i, #return
000526:0x00172778:	bge	0x1727f0
000528:0x00172780:	icall	
000528:0x00172790:	movetm	item, #return
000529:0x001727a0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001727d0:	icall	Print(#return)
000529:0x001727e0:	release	item
000529:0x001727e8:	jump	0x172748
000529:0x001727f0:	rts
array<AnimDamageEvent>::GetRandomIndex()
000544:0x001727f8:	ncalli	array<AnimDamageEvent>.Count()
000544:0x00172800:	move	@m00, #return
000544:0x00172810:	cmpi	@m00, _i0
000544:0x00172820:	ble	0x172858
000546:0x00172828:	ncalli	array<AnimDamageEvent>.Count()
000546:0x00172830:	icall	RandomInt(_i0, #return)
000546:0x00172840:	move	#return, #return
000546:0x00172850:	rts
000549:0x00172858:	imove	#return, 0xffffffff
000549:0x00172868:	rts
000549:0x00172870:	rts
array<AnimDamageEvent>::GetRandomElement()
000563:0x00172878:	call	
000563:0x00172888:	icall	
000563:0x00172898:	movetm	#return, #return
000563:0x001728a8:	rts
000563:0x001728b0:	rts
array<AnimDamageEvent>::SwapItems()
000568:0x001728e0:	icall	
000568:0x001728f0:	movetm	item1, #return
000569:0x00172900:	icall	
000569:0x00172910:	icall	
000570:0x00172920:	movefm	@c00, item1
000570:0x00172930:	icall	
000570:0x00172940:	release	item1
000570:0x00172948:	rts
array<AnimDamageEvent>::InsertArray()
000575:0x001729a0:	imove	i, 0x000000
000575:0x001729b0:	jump	0x1729d0
000575:0x001729b8:	move	@m00, i
000575:0x001729c8:	inc	i
000575:0x001729d0:	ncalli	array<AnimDamageEvent>.Count()
000575:0x001729d8:	cmpi	i, #return
000575:0x001729e8:	bge	0x172a40
000577:0x001729f0:	icall	
000577:0x00172a00:	movetm	item, #return
000578:0x00172a10:	movefm	@c00, item
000578:0x00172a20:	icall	
000578:0x00172a30:	release	item
000578:0x00172a38:	jump	0x1729b8
000578:0x00172a40:	rts
array<AnimDamageEvent>::Invert()
000584:0x00172ac0:	imove	left, 0x000000
000585:0x00172ad0:	ncalli	array<AnimDamageEvent>.Count()
000585:0x00172ad8:	subi	right, #return, _i1
000586:0x00172ae8:	cmpi	right, _i0
000586:0x00172af8:	ble	0x172bb8
000588:0x00172b00:	cmpi	left, right
000588:0x00172b10:	bge	0x172bb8
000590:0x00172b18:	icall	
000590:0x00172b28:	movetm	temp, #return
000591:0x00172b38:	move	@m00, left
000591:0x00172b48:	inc	left
000591:0x00172b50:	icall	
000591:0x00172b60:	icall	
000592:0x00172b70:	move	@m00, right
000592:0x00172b80:	dec	right
000592:0x00172b88:	movefm	@c00, temp
000592:0x00172b98:	icall	
000592:0x00172ba8:	release	temp
000592:0x00172bb0:	jump	0x172b00
000592:0x00172bb8:	rts
array<AnimDamageEvent>::MoveIndex()
000612:0x00172c10:	ncalli	array<AnimDamageEvent>.Count()
000612:0x00172c18:	move	count, #return
000613:0x00172c28:	move	new_index, curr_index
000615:0x00172c38:	cmpi	move_number, _i0
000615:0x00172c48:	ble	0x172c70
000617:0x00172c50:	addi	@m00, curr_index, move_number
000617:0x00172c60:	move	new_index, @m00
000620:0x00172c70:	cmpi	move_number, _i0
000620:0x00172c80:	bge	0x172d28
000622:0x00172c88:	subi	@m00, curr_index, move_number
000622:0x00172c98:	move	new_index, @m00
000624:0x00172ca8:	cmpi	new_index, _i0
000624:0x00172cb8:	bge	0x172d28
000626:0x00172cc0:	subi	@m01, _i0, count
000626:0x00172cd0:	cmpi	new_index, @m01
000626:0x00172ce0:	bgt	0x172d08
000628:0x00172ce8:	modi	@m00, new_index, count
000628:0x00172cf8:	move	new_index, @m00
000631:0x00172d08:	addi	@m00, new_index, count
000631:0x00172d18:	move	new_index, @m00
000635:0x00172d28:	cmpi	new_index, count
000635:0x00172d38:	blt	0x172d60
000637:0x00172d40:	modi	@m00, new_index, count
000637:0x00172d50:	move	new_index, @m00
000641:0x00172d60:	move	#return, new_index
000641:0x00172d70:	rts
000641:0x00172d78:	rts
array<AnimDamageEvent>::ShuffleArray()
000646:0x00172da8:	imove	i, 0x000000
000646:0x00172db8:	jump	0x172dd8
000646:0x00172dc0:	move	@m00, i
000646:0x00172dd0:	inc	i
000646:0x00172dd8:	ncalli	array<AnimDamageEvent>.Count()
000646:0x00172de0:	cmpi	i, #return
000646:0x00172df0:	bge	0x172e28
000648:0x00172df8:	call	
000648:0x00172e08:	call	
000648:0x00172e20:	jump	0x172dc0
000648:0x00172e28:	rts
array<AnimDamageEvent>::DifferentAtPosition()
000666:0x00172e58:	ncalli	array<AnimDamageEvent>.Count()
000666:0x00172e60:	move	@m00, #return
000666:0x00172e70:	push	#return
000666:0x00172e78:	ncalli	array<AnimDamageEvent>.Count()
000666:0x00172e80:	move	@m02, #return
000666:0x00172e90:	pop	#return
000666:0x00172e98:	cmpi	@m00, @m02
000666:0x00172ea8:	beq	0x172ed8
000668:0x00172eb0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00172ec0:	imove	#return, 0xffffffff
000669:0x00172ed0:	rts
000672:0x00172ed8:	imove	i, 0x000000
000672:0x00172ee8:	jump	0x172ef8
000672:0x00172ef0:	inc	i
000672:0x00172ef8:	ncalli	array<AnimDamageEvent>.Count()
000672:0x00172f00:	cmpi	i, #return
000672:0x00172f10:	bge	0x172fa0
000674:0x00172f18:	icall	
000674:0x00172f28:	movec	@c00, #return
000674:0x00172f38:	pushc	#return
000674:0x00172f40:	icall	
000674:0x00172f50:	movec	@c02, #return
000674:0x00172f60:	popc	#return
000674:0x00172f68:	cmpc	@c00, @c02
000674:0x00172f78:	beq	0x172f98
000676:0x00172f80:	move	#return, i
000676:0x00172f90:	rts
000676:0x00172f98:	jump	0x172ef0
000680:0x00172fa0:	imove	#return, 0xffffffff
000680:0x00172fb0:	rts
000680:0x00172fb8:	rts
array<@AnimDamageEvent>::InsertAll()
000427:0x001733d0:	imove	i, 0x000000
000427:0x001733e0:	jump	0x173400
000427:0x001733e8:	move	@m00, i
000427:0x001733f8:	inc	i
000427:0x00173400:	ncalli	array<AnimDamageEvent>.Count()
000427:0x00173408:	cmpi	i, #return
000427:0x00173418:	bge	0x173448
000429:0x00173420:	icall	
000429:0x00173430:	icall	
000429:0x00173440:	jump	0x1733e8
000429:0x00173448:	rts
array<@AnimDamageEvent>::RemoveItem()
000479:0x00173478:	movefm	@c00, value
000479:0x00173488:	icall	
000479:0x00173498:	move	remove_index, #return
000481:0x001734a8:	cmpi	remove_index, _i0
000481:0x001734b8:	blt	0x1734d0
000483:0x001734c0:	ncalli	array<@AnimDamageEvent>.RemoveOrdered(remove_index)
000483:0x001734d0:	rts
array<@AnimDamageEvent>::RemoveItemUnOrdered()
000489:0x00173500:	movefm	@c00, value
000489:0x00173510:	icall	
000489:0x00173520:	move	remove_index, #return
000491:0x00173530:	cmpi	remove_index, _i0
000491:0x00173540:	blt	0x173558
000493:0x00173548:	ncalli	array<@AnimDamageEvent>.Remove(remove_index)
000493:0x00173558:	rts
array<@AnimDamageEvent>::IsValidIndex()
000499:0x00173560:	cmpi	index, _i-1
000499:0x00173570:	ble	0x1735b0
000499:0x00173578:	ncalli	array<@AnimDamageEvent>.Count()
000499:0x00173580:	cmpi	index, #return
000499:0x00173590:	bge	0x1735b0
000499:0x00173598:	imove	#return, 0x000001
000499:0x001735a8:	jump	0x1735c0
000499:0x001735b0:	imove	#return, 0x000000
000499:0x001735c0:	rts
000499:0x001735c8:	rts
array<@AnimDamageEvent>::Debug()
000525:0x00173620:	ncalli	array<@AnimDamageEvent>.Count()
000525:0x00173628:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00173658:	icall	Print(#return)
000526:0x00173668:	imove	i, 0x000000
000526:0x00173678:	jump	0x173698
000526:0x00173680:	move	@m00, i
000526:0x00173690:	inc	i
000526:0x00173698:	ncalli	array<@AnimDamageEvent>.Count()
000526:0x001736a0:	cmpi	i, #return
000526:0x001736b0:	bge	0x173728
000528:0x001736b8:	icall	
000528:0x001736c8:	movetm	item, #return
000529:0x001736d8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00173708:	icall	Print(#return)
000529:0x00173718:	release	item
000529:0x00173720:	jump	0x173680
000529:0x00173728:	rts
array<@AnimDamageEvent>::GetRandomIndex()
000544:0x00173730:	ncalli	array<@AnimDamageEvent>.Count()
000544:0x00173738:	move	@m00, #return
000544:0x00173748:	cmpi	@m00, _i0
000544:0x00173758:	ble	0x173790
000546:0x00173760:	ncalli	array<@AnimDamageEvent>.Count()
000546:0x00173768:	icall	RandomInt(_i0, #return)
000546:0x00173778:	move	#return, #return
000546:0x00173788:	rts
000549:0x00173790:	imove	#return, 0xffffffff
000549:0x001737a0:	rts
000549:0x001737a8:	rts
array<@AnimDamageEvent>::GetRandomElement()
000563:0x001737b0:	call	
000563:0x001737c0:	icall	
000563:0x001737d0:	movetm	#return, #return
000563:0x001737e0:	rts
000563:0x001737e8:	rts
array<@AnimDamageEvent>::SwapItems()
000568:0x00173818:	icall	
000568:0x00173828:	movetm	item1, #return
000569:0x00173838:	icall	
000569:0x00173848:	icall	
000570:0x00173858:	movefm	@c00, item1
000570:0x00173868:	icall	
000570:0x00173878:	release	item1
000570:0x00173880:	rts
array<@AnimDamageEvent>::InsertArray()
000575:0x001738d8:	imove	i, 0x000000
000575:0x001738e8:	jump	0x173908
000575:0x001738f0:	move	@m00, i
000575:0x00173900:	inc	i
000575:0x00173908:	ncalli	array<AnimDamageEvent>.Count()
000575:0x00173910:	cmpi	i, #return
000575:0x00173920:	bge	0x173978
000577:0x00173928:	icall	
000577:0x00173938:	movetm	item, #return
000578:0x00173948:	movefm	@c00, item
000578:0x00173958:	icall	
000578:0x00173968:	release	item
000578:0x00173970:	jump	0x1738f0
000578:0x00173978:	rts
array<@AnimDamageEvent>::Invert()
000584:0x001739f8:	imove	left, 0x000000
000585:0x00173a08:	ncalli	array<@AnimDamageEvent>.Count()
000585:0x00173a10:	subi	right, #return, _i1
000586:0x00173a20:	cmpi	right, _i0
000586:0x00173a30:	ble	0x173af0
000588:0x00173a38:	cmpi	left, right
000588:0x00173a48:	bge	0x173af0
000590:0x00173a50:	icall	
000590:0x00173a60:	movetm	temp, #return
000591:0x00173a70:	move	@m00, left
000591:0x00173a80:	inc	left
000591:0x00173a88:	icall	
000591:0x00173a98:	icall	
000592:0x00173aa8:	move	@m00, right
000592:0x00173ab8:	dec	right
000592:0x00173ac0:	movefm	@c00, temp
000592:0x00173ad0:	icall	
000592:0x00173ae0:	release	temp
000592:0x00173ae8:	jump	0x173a38
000592:0x00173af0:	rts
array<@AnimDamageEvent>::MoveIndex()
000612:0x00173b48:	ncalli	array<@AnimDamageEvent>.Count()
000612:0x00173b50:	move	count, #return
000613:0x00173b60:	move	new_index, curr_index
000615:0x00173b70:	cmpi	move_number, _i0
000615:0x00173b80:	ble	0x173ba8
000617:0x00173b88:	addi	@m00, curr_index, move_number
000617:0x00173b98:	move	new_index, @m00
000620:0x00173ba8:	cmpi	move_number, _i0
000620:0x00173bb8:	bge	0x173c60
000622:0x00173bc0:	subi	@m00, curr_index, move_number
000622:0x00173bd0:	move	new_index, @m00
000624:0x00173be0:	cmpi	new_index, _i0
000624:0x00173bf0:	bge	0x173c60
000626:0x00173bf8:	subi	@m01, _i0, count
000626:0x00173c08:	cmpi	new_index, @m01
000626:0x00173c18:	bgt	0x173c40
000628:0x00173c20:	modi	@m00, new_index, count
000628:0x00173c30:	move	new_index, @m00
000631:0x00173c40:	addi	@m00, new_index, count
000631:0x00173c50:	move	new_index, @m00
000635:0x00173c60:	cmpi	new_index, count
000635:0x00173c70:	blt	0x173c98
000637:0x00173c78:	modi	@m00, new_index, count
000637:0x00173c88:	move	new_index, @m00
000641:0x00173c98:	move	#return, new_index
000641:0x00173ca8:	rts
000641:0x00173cb0:	rts
array<@AnimDamageEvent>::ShuffleArray()
000646:0x00173ce0:	imove	i, 0x000000
000646:0x00173cf0:	jump	0x173d10
000646:0x00173cf8:	move	@m00, i
000646:0x00173d08:	inc	i
000646:0x00173d10:	ncalli	array<@AnimDamageEvent>.Count()
000646:0x00173d18:	cmpi	i, #return
000646:0x00173d28:	bge	0x173d60
000648:0x00173d30:	call	
000648:0x00173d40:	call	
000648:0x00173d58:	jump	0x173cf8
000648:0x00173d60:	rts
array<@AnimDamageEvent>::DifferentAtPosition()
000666:0x00173d90:	ncalli	array<@AnimDamageEvent>.Count()
000666:0x00173d98:	move	@m00, #return
000666:0x00173da8:	ncalli	array<AnimDamageEvent>.Count()
000666:0x00173db0:	cmpi	@m00, #return
000666:0x00173dc0:	beq	0x173df0
000668:0x00173dc8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00173dd8:	imove	#return, 0xffffffff
000669:0x00173de8:	rts
000672:0x00173df0:	imove	i, 0x000000
000672:0x00173e00:	jump	0x173e10
000672:0x00173e08:	inc	i
000672:0x00173e10:	ncalli	array<AnimDamageEvent>.Count()
000672:0x00173e18:	cmpi	i, #return
000672:0x00173e28:	bge	0x173e98
000674:0x00173e30:	icall	
000674:0x00173e40:	movec	@c00, #return
000674:0x00173e50:	icall	
000674:0x00173e60:	cmpc	@c00, #return
000674:0x00173e70:	beq	0x173e90
000676:0x00173e78:	move	#return, i
000676:0x00173e88:	rts
000676:0x00173e90:	jump	0x173e08
000680:0x00173e98:	imove	#return, 0xffffffff
000680:0x00173ea8:	rts
000680:0x00173eb0:	rts
array<map<int,@PPERequestParamDataBase>>::InsertAll()
000427:0x00174c28:	imove	i, 0x000000
000427:0x00174c38:	jump	0x174c58
000427:0x00174c40:	move	@m00, i
000427:0x00174c50:	inc	i
000427:0x00174c58:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000427:0x00174c60:	cmpi	i, #return
000427:0x00174c70:	bge	0x174ca0
000429:0x00174c78:	icall	
000429:0x00174c88:	icall	
000429:0x00174c98:	jump	0x174c40
000429:0x00174ca0:	rts
array<map<int,@PPERequestParamDataBase>>::RemoveItem()
000479:0x00174cd0:	movefm	@c00, value
000479:0x00174ce0:	icall	
000479:0x00174cf0:	move	remove_index, #return
000481:0x00174d00:	cmpi	remove_index, _i0
000481:0x00174d10:	blt	0x174d28
000483:0x00174d18:	ncalli	array<map<int,@PPERequestParamDataBase>>.RemoveOrdered(remove_index)
000483:0x00174d28:	rts
array<map<int,@PPERequestParamDataBase>>::RemoveItemUnOrdered()
000489:0x00174d58:	movefm	@c00, value
000489:0x00174d68:	icall	
000489:0x00174d78:	move	remove_index, #return
000491:0x00174d88:	cmpi	remove_index, _i0
000491:0x00174d98:	blt	0x174db0
000493:0x00174da0:	ncalli	array<map<int,@PPERequestParamDataBase>>.Remove(remove_index)
000493:0x00174db0:	rts
array<map<int,@PPERequestParamDataBase>>::IsValidIndex()
000499:0x00174db8:	cmpi	index, _i-1
000499:0x00174dc8:	ble	0x174e08
000499:0x00174dd0:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000499:0x00174dd8:	cmpi	index, #return
000499:0x00174de8:	bge	0x174e08
000499:0x00174df0:	imove	#return, 0x000001
000499:0x00174e00:	jump	0x174e18
000499:0x00174e08:	imove	#return, 0x000000
000499:0x00174e18:	rts
000499:0x00174e20:	rts
array<map<int,@PPERequestParamDataBase>>::Debug()
000525:0x00174e78:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000525:0x00174e80:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00174eb0:	icall	Print(#return)
000526:0x00174ec0:	imove	i, 0x000000
000526:0x00174ed0:	jump	0x174ef0
000526:0x00174ed8:	move	@m00, i
000526:0x00174ee8:	inc	i
000526:0x00174ef0:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000526:0x00174ef8:	cmpi	i, #return
000526:0x00174f08:	bge	0x174f80
000528:0x00174f10:	icall	
000528:0x00174f20:	movetm	item, #return
000529:0x00174f30:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00174f60:	icall	Print(#return)
000529:0x00174f70:	release	item
000529:0x00174f78:	jump	0x174ed8
000529:0x00174f80:	rts
array<map<int,@PPERequestParamDataBase>>::GetRandomIndex()
000544:0x00174f88:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000544:0x00174f90:	move	@m00, #return
000544:0x00174fa0:	cmpi	@m00, _i0
000544:0x00174fb0:	ble	0x174fe8
000546:0x00174fb8:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000546:0x00174fc0:	icall	RandomInt(_i0, #return)
000546:0x00174fd0:	move	#return, #return
000546:0x00174fe0:	rts
000549:0x00174fe8:	imove	#return, 0xffffffff
000549:0x00174ff8:	rts
000549:0x00175000:	rts
array<map<int,@PPERequestParamDataBase>>::GetRandomElement()
000563:0x00175008:	call	
000563:0x00175018:	icall	
000563:0x00175028:	movetm	#return, #return
000563:0x00175038:	rts
000563:0x00175040:	rts
array<map<int,@PPERequestParamDataBase>>::SwapItems()
000568:0x00175070:	icall	
000568:0x00175080:	movetm	item1, #return
000569:0x00175090:	icall	
000569:0x001750a0:	icall	
000570:0x001750b0:	movefm	@c00, item1
000570:0x001750c0:	icall	
000570:0x001750d0:	release	item1
000570:0x001750d8:	rts
array<map<int,@PPERequestParamDataBase>>::InsertArray()
000575:0x00175130:	imove	i, 0x000000
000575:0x00175140:	jump	0x175160
000575:0x00175148:	move	@m00, i
000575:0x00175158:	inc	i
000575:0x00175160:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000575:0x00175168:	cmpi	i, #return
000575:0x00175178:	bge	0x1751d0
000577:0x00175180:	icall	
000577:0x00175190:	movetm	item, #return
000578:0x001751a0:	movefm	@c00, item
000578:0x001751b0:	icall	
000578:0x001751c0:	release	item
000578:0x001751c8:	jump	0x175148
000578:0x001751d0:	rts
array<map<int,@PPERequestParamDataBase>>::Invert()
000584:0x00175250:	imove	left, 0x000000
000585:0x00175260:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000585:0x00175268:	subi	right, #return, _i1
000586:0x00175278:	cmpi	right, _i0
000586:0x00175288:	ble	0x175348
000588:0x00175290:	cmpi	left, right
000588:0x001752a0:	bge	0x175348
000590:0x001752a8:	icall	
000590:0x001752b8:	movetm	temp, #return
000591:0x001752c8:	move	@m00, left
000591:0x001752d8:	inc	left
000591:0x001752e0:	icall	
000591:0x001752f0:	icall	
000592:0x00175300:	move	@m00, right
000592:0x00175310:	dec	right
000592:0x00175318:	movefm	@c00, temp
000592:0x00175328:	icall	
000592:0x00175338:	release	temp
000592:0x00175340:	jump	0x175290
000592:0x00175348:	rts
array<map<int,@PPERequestParamDataBase>>::MoveIndex()
000612:0x001753a0:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000612:0x001753a8:	move	count, #return
000613:0x001753b8:	move	new_index, curr_index
000615:0x001753c8:	cmpi	move_number, _i0
000615:0x001753d8:	ble	0x175400
000617:0x001753e0:	addi	@m00, curr_index, move_number
000617:0x001753f0:	move	new_index, @m00
000620:0x00175400:	cmpi	move_number, _i0
000620:0x00175410:	bge	0x1754b8
000622:0x00175418:	subi	@m00, curr_index, move_number
000622:0x00175428:	move	new_index, @m00
000624:0x00175438:	cmpi	new_index, _i0
000624:0x00175448:	bge	0x1754b8
000626:0x00175450:	subi	@m01, _i0, count
000626:0x00175460:	cmpi	new_index, @m01
000626:0x00175470:	bgt	0x175498
000628:0x00175478:	modi	@m00, new_index, count
000628:0x00175488:	move	new_index, @m00
000631:0x00175498:	addi	@m00, new_index, count
000631:0x001754a8:	move	new_index, @m00
000635:0x001754b8:	cmpi	new_index, count
000635:0x001754c8:	blt	0x1754f0
000637:0x001754d0:	modi	@m00, new_index, count
000637:0x001754e0:	move	new_index, @m00
000641:0x001754f0:	move	#return, new_index
000641:0x00175500:	rts
000641:0x00175508:	rts
array<map<int,@PPERequestParamDataBase>>::ShuffleArray()
000646:0x00175538:	imove	i, 0x000000
000646:0x00175548:	jump	0x175568
000646:0x00175550:	move	@m00, i
000646:0x00175560:	inc	i
000646:0x00175568:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000646:0x00175570:	cmpi	i, #return
000646:0x00175580:	bge	0x1755b8
000648:0x00175588:	call	
000648:0x00175598:	call	
000648:0x001755b0:	jump	0x175550
000648:0x001755b8:	rts
array<map<int,@PPERequestParamDataBase>>::DifferentAtPosition()
000666:0x001755e8:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000666:0x001755f0:	move	@m00, #return
000666:0x00175600:	push	#return
000666:0x00175608:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000666:0x00175610:	move	@m02, #return
000666:0x00175620:	pop	#return
000666:0x00175628:	cmpi	@m00, @m02
000666:0x00175638:	beq	0x175668
000668:0x00175640:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00175650:	imove	#return, 0xffffffff
000669:0x00175660:	rts
000672:0x00175668:	imove	i, 0x000000
000672:0x00175678:	jump	0x175688
000672:0x00175680:	inc	i
000672:0x00175688:	ncalli	array<map<int,@PPERequestParamDataBase>>.Count()
000672:0x00175690:	cmpi	i, #return
000672:0x001756a0:	bge	0x175730
000674:0x001756a8:	icall	
000674:0x001756b8:	movec	@c00, #return
000674:0x001756c8:	pushc	#return
000674:0x001756d0:	icall	
000674:0x001756e0:	movec	@c02, #return
000674:0x001756f0:	popc	#return
000674:0x001756f8:	cmpc	@c00, @c02
000674:0x00175708:	beq	0x175728
000676:0x00175710:	move	#return, i
000676:0x00175720:	rts
000676:0x00175728:	jump	0x175680
000680:0x00175730:	imove	#return, 0xffffffff
000680:0x00175740:	rts
000680:0x00175748:	rts
map<int,map<int,@PPERequestParamDataBase>>::GetKeyArray()
000885:0x00175a48:	new	keys, array<int>
000886:0x00175a68:	imove	i, 0x000000
000886:0x00175a78:	jump	0x175a98
000886:0x00175a80:	move	@m00, i
000886:0x00175a90:	inc	i
000886:0x00175a98:	ncalli	map<int,map<int,@PPERequestParamDataBase>>.Count()
000886:0x00175aa0:	cmpi	i, #return
000886:0x00175ab0:	bge	0x175ae0
000888:0x00175ab8:	icall	
000888:0x00175ac8:	icall	
000888:0x00175ad8:	jump	0x175a80
000890:0x00175ae0:	movem	#return, keys
000890:0x00175af0:	release	keys
000890:0x00175af8:	rts
000890:0x00175b00:	release	keys
000890:0x00175b08:	rts
map<int,map<int,@PPERequestParamDataBase>>::GetValueArray()
000895:0x00175b60:	new	elements, array<map<int,@PPERequestParamDataBase>>
000896:0x00175b80:	imove	i, 0x000000
000896:0x00175b90:	jump	0x175bb0
000896:0x00175b98:	move	@m00, i
000896:0x00175ba8:	inc	i
000896:0x00175bb0:	ncalli	map<int,map<int,@PPERequestParamDataBase>>.Count()
000896:0x00175bb8:	cmpi	i, #return
000896:0x00175bc8:	bge	0x175bf8
000898:0x00175bd0:	icall	
000898:0x00175be0:	icall	
000898:0x00175bf0:	jump	0x175b98
000900:0x00175bf8:	movem	#return, elements
000900:0x00175c08:	release	elements
000900:0x00175c10:	rts
000900:0x00175c18:	release	elements
000900:0x00175c20:	rts
map<int,map<int,@PPERequestParamDataBase>>::ReplaceKey()
000905:0x00175c28:	icall	
000905:0x00175c38:	cmpi	#return, _i0
000905:0x00175c48:	beq	0x175c98
000907:0x00175c50:	icall	
000907:0x00175c60:	icall	
000908:0x00175c70:	icall	
000909:0x00175c80:	imove	#return, 0x000001
000909:0x00175c90:	rts
000911:0x00175c98:	imove	#return, 0x000000
000911:0x00175ca8:	rts
000911:0x00175cb0:	rts
map<int,map<int,@PPERequestParamDataBase>>::GetKeyByValue()
000917:0x00175d08:	imove	i, 0x000000
000917:0x00175d18:	jump	0x175d38
000917:0x00175d20:	move	@m00, i
000917:0x00175d30:	inc	i
000917:0x00175d38:	ncalli	map<int,map<int,@PPERequestParamDataBase>>.Count()
000917:0x00175d40:	cmpi	i, #return
000917:0x00175d50:	bge	0x175dc0
000919:0x00175d58:	icall	
000919:0x00175d68:	movec	@c00, #return
000919:0x00175d78:	cmpmc	@c00, value
000919:0x00175d88:	bne	0x175db8
000921:0x00175d90:	icall	
000921:0x00175da0:	move	ret, #return
000922:0x00175db0:	jump	0x175dc0
000922:0x00175db8:	jump	0x175d20
000926:0x00175dc0:	move	#return, ret
000926:0x00175dd0:	rts
000926:0x00175dd8:	rts
map<int,map<int,@PPERequestParamDataBase>>::GetKeyByValueChecked()
000931:0x00175e08:	imove	i, 0x000000
000931:0x00175e18:	jump	0x175e38
000931:0x00175e20:	move	@m00, i
000931:0x00175e30:	inc	i
000931:0x00175e38:	ncalli	map<int,map<int,@PPERequestParamDataBase>>.Count()
000931:0x00175e40:	cmpi	i, #return
000931:0x00175e50:	bge	0x175ee0
000933:0x00175e58:	icall	
000933:0x00175e68:	movec	@c00, #return
000933:0x00175e78:	cmpmc	@c00, value
000933:0x00175e88:	bne	0x175ed8
000935:0x00175e90:	icall	
000935:0x00175ea0:	move	key, #return
000936:0x00175eb0:	imove	#return, 0x000001
000936:0x00175ec0:	move	key, key
000936:0x00175ed0:	rts
000936:0x00175ed8:	jump	0x175e20
000939:0x00175ee0:	imove	#return, 0x000000
000939:0x00175ef0:	move	key, key
000939:0x00175f00:	rts
000939:0x00175f08:	move	key, key
000939:0x00175f18:	rts
map<int,@map<int,@PPERequestParamDataBase>>::GetKeyArray()
000885:0x00176268:	new	keys, array<int>
000886:0x00176288:	imove	i, 0x000000
000886:0x00176298:	jump	0x1762b8
000886:0x001762a0:	move	@m00, i
000886:0x001762b0:	inc	i
000886:0x001762b8:	ncalli	map<int,@map<int,@PPERequestParamDataBase>>.Count()
000886:0x001762c0:	cmpi	i, #return
000886:0x001762d0:	bge	0x176300
000888:0x001762d8:	icall	
000888:0x001762e8:	icall	
000888:0x001762f8:	jump	0x1762a0
000890:0x00176300:	movem	#return, keys
000890:0x00176310:	release	keys
000890:0x00176318:	rts
000890:0x00176320:	release	keys
000890:0x00176328:	rts
map<int,@map<int,@PPERequestParamDataBase>>::GetValueArray()
000895:0x00176380:	new	elements, array<map<int,@PPERequestParamDataBase>>
000896:0x001763a0:	imove	i, 0x000000
000896:0x001763b0:	jump	0x1763d0
000896:0x001763b8:	move	@m00, i
000896:0x001763c8:	inc	i
000896:0x001763d0:	ncalli	map<int,@map<int,@PPERequestParamDataBase>>.Count()
000896:0x001763d8:	cmpi	i, #return
000896:0x001763e8:	bge	0x176418
000898:0x001763f0:	icall	
000898:0x00176400:	icall	
000898:0x00176410:	jump	0x1763b8
000900:0x00176418:	movem	#return, elements
000900:0x00176428:	release	elements
000900:0x00176430:	rts
000900:0x00176438:	release	elements
000900:0x00176440:	rts
map<int,@map<int,@PPERequestParamDataBase>>::ReplaceKey()
000905:0x00176448:	icall	
000905:0x00176458:	cmpi	#return, _i0
000905:0x00176468:	beq	0x1764b8
000907:0x00176470:	icall	
000907:0x00176480:	icall	
000908:0x00176490:	icall	
000909:0x001764a0:	imove	#return, 0x000001
000909:0x001764b0:	rts
000911:0x001764b8:	imove	#return, 0x000000
000911:0x001764c8:	rts
000911:0x001764d0:	rts
map<int,@map<int,@PPERequestParamDataBase>>::GetKeyByValue()
000917:0x00176528:	imove	i, 0x000000
000917:0x00176538:	jump	0x176558
000917:0x00176540:	move	@m00, i
000917:0x00176550:	inc	i
000917:0x00176558:	ncalli	map<int,@map<int,@PPERequestParamDataBase>>.Count()
000917:0x00176560:	cmpi	i, #return
000917:0x00176570:	bge	0x1765e0
000919:0x00176578:	icall	
000919:0x00176588:	movec	@c00, #return
000919:0x00176598:	cmpmc	@c00, value
000919:0x001765a8:	bne	0x1765d8
000921:0x001765b0:	icall	
000921:0x001765c0:	move	ret, #return
000922:0x001765d0:	jump	0x1765e0
000922:0x001765d8:	jump	0x176540
000926:0x001765e0:	move	#return, ret
000926:0x001765f0:	rts
000926:0x001765f8:	rts
map<int,@map<int,@PPERequestParamDataBase>>::GetKeyByValueChecked()
000931:0x00176628:	imove	i, 0x000000
000931:0x00176638:	jump	0x176658
000931:0x00176640:	move	@m00, i
000931:0x00176650:	inc	i
000931:0x00176658:	ncalli	map<int,@map<int,@PPERequestParamDataBase>>.Count()
000931:0x00176660:	cmpi	i, #return
000931:0x00176670:	bge	0x176700
000933:0x00176678:	icall	
000933:0x00176688:	movec	@c00, #return
000933:0x00176698:	cmpmc	@c00, value
000933:0x001766a8:	bne	0x1766f8
000935:0x001766b0:	icall	
000935:0x001766c0:	move	key, #return
000936:0x001766d0:	imove	#return, 0x000001
000936:0x001766e0:	move	key, key
000936:0x001766f0:	rts
000936:0x001766f8:	jump	0x176640
000939:0x00176700:	imove	#return, 0x000000
000939:0x00176710:	move	key, key
000939:0x00176720:	rts
000939:0x00176728:	move	key, key
000939:0x00176738:	rts
array<array<int>>::InsertAll()
000427:0x00177480:	imove	i, 0x000000
000427:0x00177490:	jump	0x1774b0
000427:0x00177498:	move	@m00, i
000427:0x001774a8:	inc	i
000427:0x001774b0:	ncalli	array<array<int>>.Count()
000427:0x001774b8:	cmpi	i, #return
000427:0x001774c8:	bge	0x1774f8
000429:0x001774d0:	icall	
000429:0x001774e0:	icall	
000429:0x001774f0:	jump	0x177498
000429:0x001774f8:	rts
array<array<int>>::RemoveItem()
000479:0x00177528:	movefm	@c00, value
000479:0x00177538:	icall	
000479:0x00177548:	move	remove_index, #return
000481:0x00177558:	cmpi	remove_index, _i0
000481:0x00177568:	blt	0x177580
000483:0x00177570:	ncalli	array<array<int>>.RemoveOrdered(remove_index)
000483:0x00177580:	rts
array<array<int>>::RemoveItemUnOrdered()
000489:0x001775b0:	movefm	@c00, value
000489:0x001775c0:	icall	
000489:0x001775d0:	move	remove_index, #return
000491:0x001775e0:	cmpi	remove_index, _i0
000491:0x001775f0:	blt	0x177608
000493:0x001775f8:	ncalli	array<array<int>>.Remove(remove_index)
000493:0x00177608:	rts
array<array<int>>::IsValidIndex()
000499:0x00177610:	cmpi	index, _i-1
000499:0x00177620:	ble	0x177660
000499:0x00177628:	ncalli	array<array<int>>.Count()
000499:0x00177630:	cmpi	index, #return
000499:0x00177640:	bge	0x177660
000499:0x00177648:	imove	#return, 0x000001
000499:0x00177658:	jump	0x177670
000499:0x00177660:	imove	#return, 0x000000
000499:0x00177670:	rts
000499:0x00177678:	rts
array<array<int>>::Debug()
000525:0x001776d0:	ncalli	array<array<int>>.Count()
000525:0x001776d8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00177708:	icall	Print(#return)
000526:0x00177718:	imove	i, 0x000000
000526:0x00177728:	jump	0x177748
000526:0x00177730:	move	@m00, i
000526:0x00177740:	inc	i
000526:0x00177748:	ncalli	array<array<int>>.Count()
000526:0x00177750:	cmpi	i, #return
000526:0x00177760:	bge	0x1777d8
000528:0x00177768:	icall	
000528:0x00177778:	movetm	item, #return
000529:0x00177788:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001777b8:	icall	Print(#return)
000529:0x001777c8:	release	item
000529:0x001777d0:	jump	0x177730
000529:0x001777d8:	rts
array<array<int>>::GetRandomIndex()
000544:0x001777e0:	ncalli	array<array<int>>.Count()
000544:0x001777e8:	move	@m00, #return
000544:0x001777f8:	cmpi	@m00, _i0
000544:0x00177808:	ble	0x177840
000546:0x00177810:	ncalli	array<array<int>>.Count()
000546:0x00177818:	icall	RandomInt(_i0, #return)
000546:0x00177828:	move	#return, #return
000546:0x00177838:	rts
000549:0x00177840:	imove	#return, 0xffffffff
000549:0x00177850:	rts
000549:0x00177858:	rts
array<array<int>>::GetRandomElement()
000563:0x00177860:	call	
000563:0x00177870:	icall	
000563:0x00177880:	movetm	#return, #return
000563:0x00177890:	rts
000563:0x00177898:	rts
array<array<int>>::SwapItems()
000568:0x001778c8:	icall	
000568:0x001778d8:	movetm	item1, #return
000569:0x001778e8:	icall	
000569:0x001778f8:	icall	
000570:0x00177908:	movefm	@c00, item1
000570:0x00177918:	icall	
000570:0x00177928:	release	item1
000570:0x00177930:	rts
array<array<int>>::InsertArray()
000575:0x00177988:	imove	i, 0x000000
000575:0x00177998:	jump	0x1779b8
000575:0x001779a0:	move	@m00, i
000575:0x001779b0:	inc	i
000575:0x001779b8:	ncalli	array<array<int>>.Count()
000575:0x001779c0:	cmpi	i, #return
000575:0x001779d0:	bge	0x177a28
000577:0x001779d8:	icall	
000577:0x001779e8:	movetm	item, #return
000578:0x001779f8:	movefm	@c00, item
000578:0x00177a08:	icall	
000578:0x00177a18:	release	item
000578:0x00177a20:	jump	0x1779a0
000578:0x00177a28:	rts
array<array<int>>::Invert()
000584:0x00177aa8:	imove	left, 0x000000
000585:0x00177ab8:	ncalli	array<array<int>>.Count()
000585:0x00177ac0:	subi	right, #return, _i1
000586:0x00177ad0:	cmpi	right, _i0
000586:0x00177ae0:	ble	0x177ba0
000588:0x00177ae8:	cmpi	left, right
000588:0x00177af8:	bge	0x177ba0
000590:0x00177b00:	icall	
000590:0x00177b10:	movetm	temp, #return
000591:0x00177b20:	move	@m00, left
000591:0x00177b30:	inc	left
000591:0x00177b38:	icall	
000591:0x00177b48:	icall	
000592:0x00177b58:	move	@m00, right
000592:0x00177b68:	dec	right
000592:0x00177b70:	movefm	@c00, temp
000592:0x00177b80:	icall	
000592:0x00177b90:	release	temp
000592:0x00177b98:	jump	0x177ae8
000592:0x00177ba0:	rts
array<array<int>>::MoveIndex()
000612:0x00177bf8:	ncalli	array<array<int>>.Count()
000612:0x00177c00:	move	count, #return
000613:0x00177c10:	move	new_index, curr_index
000615:0x00177c20:	cmpi	move_number, _i0
000615:0x00177c30:	ble	0x177c58
000617:0x00177c38:	addi	@m00, curr_index, move_number
000617:0x00177c48:	move	new_index, @m00
000620:0x00177c58:	cmpi	move_number, _i0
000620:0x00177c68:	bge	0x177d10
000622:0x00177c70:	subi	@m00, curr_index, move_number
000622:0x00177c80:	move	new_index, @m00
000624:0x00177c90:	cmpi	new_index, _i0
000624:0x00177ca0:	bge	0x177d10
000626:0x00177ca8:	subi	@m01, _i0, count
000626:0x00177cb8:	cmpi	new_index, @m01
000626:0x00177cc8:	bgt	0x177cf0
000628:0x00177cd0:	modi	@m00, new_index, count
000628:0x00177ce0:	move	new_index, @m00
000631:0x00177cf0:	addi	@m00, new_index, count
000631:0x00177d00:	move	new_index, @m00
000635:0x00177d10:	cmpi	new_index, count
000635:0x00177d20:	blt	0x177d48
000637:0x00177d28:	modi	@m00, new_index, count
000637:0x00177d38:	move	new_index, @m00
000641:0x00177d48:	move	#return, new_index
000641:0x00177d58:	rts
000641:0x00177d60:	rts
array<array<int>>::ShuffleArray()
000646:0x00177d90:	imove	i, 0x000000
000646:0x00177da0:	jump	0x177dc0
000646:0x00177da8:	move	@m00, i
000646:0x00177db8:	inc	i
000646:0x00177dc0:	ncalli	array<array<int>>.Count()
000646:0x00177dc8:	cmpi	i, #return
000646:0x00177dd8:	bge	0x177e10
000648:0x00177de0:	call	
000648:0x00177df0:	call	
000648:0x00177e08:	jump	0x177da8
000648:0x00177e10:	rts
array<array<int>>::DifferentAtPosition()
000666:0x00177e40:	ncalli	array<array<int>>.Count()
000666:0x00177e48:	move	@m00, #return
000666:0x00177e58:	push	#return
000666:0x00177e60:	ncalli	array<array<int>>.Count()
000666:0x00177e68:	move	@m02, #return
000666:0x00177e78:	pop	#return
000666:0x00177e80:	cmpi	@m00, @m02
000666:0x00177e90:	beq	0x177ec0
000668:0x00177e98:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00177ea8:	imove	#return, 0xffffffff
000669:0x00177eb8:	rts
000672:0x00177ec0:	imove	i, 0x000000
000672:0x00177ed0:	jump	0x177ee0
000672:0x00177ed8:	inc	i
000672:0x00177ee0:	ncalli	array<array<int>>.Count()
000672:0x00177ee8:	cmpi	i, #return
000672:0x00177ef8:	bge	0x177f88
000674:0x00177f00:	icall	
000674:0x00177f10:	movec	@c00, #return
000674:0x00177f20:	pushc	#return
000674:0x00177f28:	icall	
000674:0x00177f38:	movec	@c02, #return
000674:0x00177f48:	popc	#return
000674:0x00177f50:	cmpc	@c00, @c02
000674:0x00177f60:	beq	0x177f80
000676:0x00177f68:	move	#return, i
000676:0x00177f78:	rts
000676:0x00177f80:	jump	0x177ed8
000680:0x00177f88:	imove	#return, 0xffffffff
000680:0x00177f98:	rts
000680:0x00177fa0:	rts
map<int,array<int>>::GetKeyArray()
000885:0x001782a0:	new	keys, array<int>
000886:0x001782c0:	imove	i, 0x000000
000886:0x001782d0:	jump	0x1782f0
000886:0x001782d8:	move	@m00, i
000886:0x001782e8:	inc	i
000886:0x001782f0:	ncalli	map<int,array<int>>.Count()
000886:0x001782f8:	cmpi	i, #return
000886:0x00178308:	bge	0x178338
000888:0x00178310:	icall	
000888:0x00178320:	icall	
000888:0x00178330:	jump	0x1782d8
000890:0x00178338:	movem	#return, keys
000890:0x00178348:	release	keys
000890:0x00178350:	rts
000890:0x00178358:	release	keys
000890:0x00178360:	rts
map<int,array<int>>::GetValueArray()
000895:0x001783b8:	new	elements, array<array<int>>
000896:0x001783d8:	imove	i, 0x000000
000896:0x001783e8:	jump	0x178408
000896:0x001783f0:	move	@m00, i
000896:0x00178400:	inc	i
000896:0x00178408:	ncalli	map<int,array<int>>.Count()
000896:0x00178410:	cmpi	i, #return
000896:0x00178420:	bge	0x178450
000898:0x00178428:	icall	
000898:0x00178438:	icall	
000898:0x00178448:	jump	0x1783f0
000900:0x00178450:	movem	#return, elements
000900:0x00178460:	release	elements
000900:0x00178468:	rts
000900:0x00178470:	release	elements
000900:0x00178478:	rts
map<int,array<int>>::ReplaceKey()
000905:0x00178480:	icall	
000905:0x00178490:	cmpi	#return, _i0
000905:0x001784a0:	beq	0x1784f0
000907:0x001784a8:	icall	
000907:0x001784b8:	icall	
000908:0x001784c8:	icall	
000909:0x001784d8:	imove	#return, 0x000001
000909:0x001784e8:	rts
000911:0x001784f0:	imove	#return, 0x000000
000911:0x00178500:	rts
000911:0x00178508:	rts
map<int,array<int>>::GetKeyByValue()
000917:0x00178560:	imove	i, 0x000000
000917:0x00178570:	jump	0x178590
000917:0x00178578:	move	@m00, i
000917:0x00178588:	inc	i
000917:0x00178590:	ncalli	map<int,array<int>>.Count()
000917:0x00178598:	cmpi	i, #return
000917:0x001785a8:	bge	0x178618
000919:0x001785b0:	icall	
000919:0x001785c0:	movec	@c00, #return
000919:0x001785d0:	cmpmc	@c00, value
000919:0x001785e0:	bne	0x178610
000921:0x001785e8:	icall	
000921:0x001785f8:	move	ret, #return
000922:0x00178608:	jump	0x178618
000922:0x00178610:	jump	0x178578
000926:0x00178618:	move	#return, ret
000926:0x00178628:	rts
000926:0x00178630:	rts
map<int,array<int>>::GetKeyByValueChecked()
000931:0x00178660:	imove	i, 0x000000
000931:0x00178670:	jump	0x178690
000931:0x00178678:	move	@m00, i
000931:0x00178688:	inc	i
000931:0x00178690:	ncalli	map<int,array<int>>.Count()
000931:0x00178698:	cmpi	i, #return
000931:0x001786a8:	bge	0x178738
000933:0x001786b0:	icall	
000933:0x001786c0:	movec	@c00, #return
000933:0x001786d0:	cmpmc	@c00, value
000933:0x001786e0:	bne	0x178730
000935:0x001786e8:	icall	
000935:0x001786f8:	move	key, #return
000936:0x00178708:	imove	#return, 0x000001
000936:0x00178718:	move	key, key
000936:0x00178728:	rts
000936:0x00178730:	jump	0x178678
000939:0x00178738:	imove	#return, 0x000000
000939:0x00178748:	move	key, key
000939:0x00178758:	rts
000939:0x00178760:	move	key, key
000939:0x00178770:	rts
map<int,@array<int>>::GetKeyArray()
000885:0x00178ac0:	new	keys, array<int>
000886:0x00178ae0:	imove	i, 0x000000
000886:0x00178af0:	jump	0x178b10
000886:0x00178af8:	move	@m00, i
000886:0x00178b08:	inc	i
000886:0x00178b10:	ncalli	map<int,@array<int>>.Count()
000886:0x00178b18:	cmpi	i, #return
000886:0x00178b28:	bge	0x178b58
000888:0x00178b30:	icall	
000888:0x00178b40:	icall	
000888:0x00178b50:	jump	0x178af8
000890:0x00178b58:	movem	#return, keys
000890:0x00178b68:	release	keys
000890:0x00178b70:	rts
000890:0x00178b78:	release	keys
000890:0x00178b80:	rts
map<int,@array<int>>::GetValueArray()
000895:0x00178bd8:	new	elements, array<array<int>>
000896:0x00178bf8:	imove	i, 0x000000
000896:0x00178c08:	jump	0x178c28
000896:0x00178c10:	move	@m00, i
000896:0x00178c20:	inc	i
000896:0x00178c28:	ncalli	map<int,@array<int>>.Count()
000896:0x00178c30:	cmpi	i, #return
000896:0x00178c40:	bge	0x178c70
000898:0x00178c48:	icall	
000898:0x00178c58:	icall	
000898:0x00178c68:	jump	0x178c10
000900:0x00178c70:	movem	#return, elements
000900:0x00178c80:	release	elements
000900:0x00178c88:	rts
000900:0x00178c90:	release	elements
000900:0x00178c98:	rts
map<int,@array<int>>::ReplaceKey()
000905:0x00178ca0:	icall	
000905:0x00178cb0:	cmpi	#return, _i0
000905:0x00178cc0:	beq	0x178d10
000907:0x00178cc8:	icall	
000907:0x00178cd8:	icall	
000908:0x00178ce8:	icall	
000909:0x00178cf8:	imove	#return, 0x000001
000909:0x00178d08:	rts
000911:0x00178d10:	imove	#return, 0x000000
000911:0x00178d20:	rts
000911:0x00178d28:	rts
map<int,@array<int>>::GetKeyByValue()
000917:0x00178d80:	imove	i, 0x000000
000917:0x00178d90:	jump	0x178db0
000917:0x00178d98:	move	@m00, i
000917:0x00178da8:	inc	i
000917:0x00178db0:	ncalli	map<int,@array<int>>.Count()
000917:0x00178db8:	cmpi	i, #return
000917:0x00178dc8:	bge	0x178e38
000919:0x00178dd0:	icall	
000919:0x00178de0:	movec	@c00, #return
000919:0x00178df0:	cmpmc	@c00, value
000919:0x00178e00:	bne	0x178e30
000921:0x00178e08:	icall	
000921:0x00178e18:	move	ret, #return
000922:0x00178e28:	jump	0x178e38
000922:0x00178e30:	jump	0x178d98
000926:0x00178e38:	move	#return, ret
000926:0x00178e48:	rts
000926:0x00178e50:	rts
map<int,@array<int>>::GetKeyByValueChecked()
000931:0x00178e80:	imove	i, 0x000000
000931:0x00178e90:	jump	0x178eb0
000931:0x00178e98:	move	@m00, i
000931:0x00178ea8:	inc	i
000931:0x00178eb0:	ncalli	map<int,@array<int>>.Count()
000931:0x00178eb8:	cmpi	i, #return
000931:0x00178ec8:	bge	0x178f58
000933:0x00178ed0:	icall	
000933:0x00178ee0:	movec	@c00, #return
000933:0x00178ef0:	cmpmc	@c00, value
000933:0x00178f00:	bne	0x178f50
000935:0x00178f08:	icall	
000935:0x00178f18:	move	key, #return
000936:0x00178f28:	imove	#return, 0x000001
000936:0x00178f38:	move	key, key
000936:0x00178f48:	rts
000936:0x00178f50:	jump	0x178e98
000939:0x00178f58:	imove	#return, 0x000000
000939:0x00178f68:	move	key, key
000939:0x00178f78:	rts
000939:0x00178f80:	move	key, key
000939:0x00178f90:	rts
array<PPEMatClassParameterCommandData>::InsertAll()
000427:0x00179d00:	imove	i, 0x000000
000427:0x00179d10:	jump	0x179d30
000427:0x00179d18:	move	@m00, i
000427:0x00179d28:	inc	i
000427:0x00179d30:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000427:0x00179d38:	cmpi	i, #return
000427:0x00179d48:	bge	0x179d78
000429:0x00179d50:	icall	
000429:0x00179d60:	icall	
000429:0x00179d70:	jump	0x179d18
000429:0x00179d78:	rts
array<PPEMatClassParameterCommandData>::RemoveItem()
000479:0x00179da8:	movefm	@c00, value
000479:0x00179db8:	icall	
000479:0x00179dc8:	move	remove_index, #return
000481:0x00179dd8:	cmpi	remove_index, _i0
000481:0x00179de8:	blt	0x179e00
000483:0x00179df0:	ncalli	array<PPEMatClassParameterCommandData>.RemoveOrdered(remove_index)
000483:0x00179e00:	rts
array<PPEMatClassParameterCommandData>::RemoveItemUnOrdered()
000489:0x00179e30:	movefm	@c00, value
000489:0x00179e40:	icall	
000489:0x00179e50:	move	remove_index, #return
000491:0x00179e60:	cmpi	remove_index, _i0
000491:0x00179e70:	blt	0x179e88
000493:0x00179e78:	ncalli	array<PPEMatClassParameterCommandData>.Remove(remove_index)
000493:0x00179e88:	rts
array<PPEMatClassParameterCommandData>::IsValidIndex()
000499:0x00179e90:	cmpi	index, _i-1
000499:0x00179ea0:	ble	0x179ee0
000499:0x00179ea8:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000499:0x00179eb0:	cmpi	index, #return
000499:0x00179ec0:	bge	0x179ee0
000499:0x00179ec8:	imove	#return, 0x000001
000499:0x00179ed8:	jump	0x179ef0
000499:0x00179ee0:	imove	#return, 0x000000
000499:0x00179ef0:	rts
000499:0x00179ef8:	rts
array<PPEMatClassParameterCommandData>::Debug()
000525:0x00179f50:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000525:0x00179f58:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00179f88:	icall	Print(#return)
000526:0x00179f98:	imove	i, 0x000000
000526:0x00179fa8:	jump	0x179fc8
000526:0x00179fb0:	move	@m00, i
000526:0x00179fc0:	inc	i
000526:0x00179fc8:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000526:0x00179fd0:	cmpi	i, #return
000526:0x00179fe0:	bge	0x17a058
000528:0x00179fe8:	icall	
000528:0x00179ff8:	movetm	item, #return
000529:0x0017a008:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0017a038:	icall	Print(#return)
000529:0x0017a048:	release	item
000529:0x0017a050:	jump	0x179fb0
000529:0x0017a058:	rts
array<PPEMatClassParameterCommandData>::GetRandomIndex()
000544:0x0017a060:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000544:0x0017a068:	move	@m00, #return
000544:0x0017a078:	cmpi	@m00, _i0
000544:0x0017a088:	ble	0x17a0c0
000546:0x0017a090:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000546:0x0017a098:	icall	RandomInt(_i0, #return)
000546:0x0017a0a8:	move	#return, #return
000546:0x0017a0b8:	rts
000549:0x0017a0c0:	imove	#return, 0xffffffff
000549:0x0017a0d0:	rts
000549:0x0017a0d8:	rts
array<PPEMatClassParameterCommandData>::GetRandomElement()
000563:0x0017a0e0:	call	
000563:0x0017a0f0:	icall	
000563:0x0017a100:	movetm	#return, #return
000563:0x0017a110:	rts
000563:0x0017a118:	rts
array<PPEMatClassParameterCommandData>::SwapItems()
000568:0x0017a148:	icall	
000568:0x0017a158:	movetm	item1, #return
000569:0x0017a168:	icall	
000569:0x0017a178:	icall	
000570:0x0017a188:	movefm	@c00, item1
000570:0x0017a198:	icall	
000570:0x0017a1a8:	release	item1
000570:0x0017a1b0:	rts
array<PPEMatClassParameterCommandData>::InsertArray()
000575:0x0017a208:	imove	i, 0x000000
000575:0x0017a218:	jump	0x17a238
000575:0x0017a220:	move	@m00, i
000575:0x0017a230:	inc	i
000575:0x0017a238:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000575:0x0017a240:	cmpi	i, #return
000575:0x0017a250:	bge	0x17a2a8
000577:0x0017a258:	icall	
000577:0x0017a268:	movetm	item, #return
000578:0x0017a278:	movefm	@c00, item
000578:0x0017a288:	icall	
000578:0x0017a298:	release	item
000578:0x0017a2a0:	jump	0x17a220
000578:0x0017a2a8:	rts
array<PPEMatClassParameterCommandData>::Invert()
000584:0x0017a328:	imove	left, 0x000000
000585:0x0017a338:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000585:0x0017a340:	subi	right, #return, _i1
000586:0x0017a350:	cmpi	right, _i0
000586:0x0017a360:	ble	0x17a420
000588:0x0017a368:	cmpi	left, right
000588:0x0017a378:	bge	0x17a420
000590:0x0017a380:	icall	
000590:0x0017a390:	movetm	temp, #return
000591:0x0017a3a0:	move	@m00, left
000591:0x0017a3b0:	inc	left
000591:0x0017a3b8:	icall	
000591:0x0017a3c8:	icall	
000592:0x0017a3d8:	move	@m00, right
000592:0x0017a3e8:	dec	right
000592:0x0017a3f0:	movefm	@c00, temp
000592:0x0017a400:	icall	
000592:0x0017a410:	release	temp
000592:0x0017a418:	jump	0x17a368
000592:0x0017a420:	rts
array<PPEMatClassParameterCommandData>::MoveIndex()
000612:0x0017a478:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000612:0x0017a480:	move	count, #return
000613:0x0017a490:	move	new_index, curr_index
000615:0x0017a4a0:	cmpi	move_number, _i0
000615:0x0017a4b0:	ble	0x17a4d8
000617:0x0017a4b8:	addi	@m00, curr_index, move_number
000617:0x0017a4c8:	move	new_index, @m00
000620:0x0017a4d8:	cmpi	move_number, _i0
000620:0x0017a4e8:	bge	0x17a590
000622:0x0017a4f0:	subi	@m00, curr_index, move_number
000622:0x0017a500:	move	new_index, @m00
000624:0x0017a510:	cmpi	new_index, _i0
000624:0x0017a520:	bge	0x17a590
000626:0x0017a528:	subi	@m01, _i0, count
000626:0x0017a538:	cmpi	new_index, @m01
000626:0x0017a548:	bgt	0x17a570
000628:0x0017a550:	modi	@m00, new_index, count
000628:0x0017a560:	move	new_index, @m00
000631:0x0017a570:	addi	@m00, new_index, count
000631:0x0017a580:	move	new_index, @m00
000635:0x0017a590:	cmpi	new_index, count
000635:0x0017a5a0:	blt	0x17a5c8
000637:0x0017a5a8:	modi	@m00, new_index, count
000637:0x0017a5b8:	move	new_index, @m00
000641:0x0017a5c8:	move	#return, new_index
000641:0x0017a5d8:	rts
000641:0x0017a5e0:	rts
array<PPEMatClassParameterCommandData>::ShuffleArray()
000646:0x0017a610:	imove	i, 0x000000
000646:0x0017a620:	jump	0x17a640
000646:0x0017a628:	move	@m00, i
000646:0x0017a638:	inc	i
000646:0x0017a640:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000646:0x0017a648:	cmpi	i, #return
000646:0x0017a658:	bge	0x17a690
000648:0x0017a660:	call	
000648:0x0017a670:	call	
000648:0x0017a688:	jump	0x17a628
000648:0x0017a690:	rts
array<PPEMatClassParameterCommandData>::DifferentAtPosition()
000666:0x0017a6c0:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000666:0x0017a6c8:	move	@m00, #return
000666:0x0017a6d8:	push	#return
000666:0x0017a6e0:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000666:0x0017a6e8:	move	@m02, #return
000666:0x0017a6f8:	pop	#return
000666:0x0017a700:	cmpi	@m00, @m02
000666:0x0017a710:	beq	0x17a740
000668:0x0017a718:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0017a728:	imove	#return, 0xffffffff
000669:0x0017a738:	rts
000672:0x0017a740:	imove	i, 0x000000
000672:0x0017a750:	jump	0x17a760
000672:0x0017a758:	inc	i
000672:0x0017a760:	ncalli	array<PPEMatClassParameterCommandData>.Count()
000672:0x0017a768:	cmpi	i, #return
000672:0x0017a778:	bge	0x17a808
000674:0x0017a780:	icall	
000674:0x0017a790:	movec	@c00, #return
000674:0x0017a7a0:	pushc	#return
000674:0x0017a7a8:	icall	
000674:0x0017a7b8:	movec	@c02, #return
000674:0x0017a7c8:	popc	#return
000674:0x0017a7d0:	cmpc	@c00, @c02
000674:0x0017a7e0:	beq	0x17a800
000676:0x0017a7e8:	move	#return, i
000676:0x0017a7f8:	rts
000676:0x0017a800:	jump	0x17a758
000680:0x0017a808:	imove	#return, 0xffffffff
000680:0x0017a818:	rts
000680:0x0017a820:	rts
map<int,PPEMatClassParameterCommandData>::GetKeyArray()
000885:0x0017ab20:	new	keys, array<int>
000886:0x0017ab40:	imove	i, 0x000000
000886:0x0017ab50:	jump	0x17ab70
000886:0x0017ab58:	move	@m00, i
000886:0x0017ab68:	inc	i
000886:0x0017ab70:	ncalli	map<int,PPEMatClassParameterCommandData>.Count()
000886:0x0017ab78:	cmpi	i, #return
000886:0x0017ab88:	bge	0x17abb8
000888:0x0017ab90:	icall	
000888:0x0017aba0:	icall	
000888:0x0017abb0:	jump	0x17ab58
000890:0x0017abb8:	movem	#return, keys
000890:0x0017abc8:	release	keys
000890:0x0017abd0:	rts
000890:0x0017abd8:	release	keys
000890:0x0017abe0:	rts
map<int,PPEMatClassParameterCommandData>::GetValueArray()
000895:0x0017ac38:	new	elements, array<PPEMatClassParameterCommandData>
000896:0x0017ac58:	imove	i, 0x000000
000896:0x0017ac68:	jump	0x17ac88
000896:0x0017ac70:	move	@m00, i
000896:0x0017ac80:	inc	i
000896:0x0017ac88:	ncalli	map<int,PPEMatClassParameterCommandData>.Count()
000896:0x0017ac90:	cmpi	i, #return
000896:0x0017aca0:	bge	0x17acd0
000898:0x0017aca8:	icall	
000898:0x0017acb8:	icall	
000898:0x0017acc8:	jump	0x17ac70
000900:0x0017acd0:	movem	#return, elements
000900:0x0017ace0:	release	elements
000900:0x0017ace8:	rts
000900:0x0017acf0:	release	elements
000900:0x0017acf8:	rts
map<int,PPEMatClassParameterCommandData>::ReplaceKey()
000905:0x0017ad00:	icall	
000905:0x0017ad10:	cmpi	#return, _i0
000905:0x0017ad20:	beq	0x17ad70
000907:0x0017ad28:	icall	
000907:0x0017ad38:	icall	
000908:0x0017ad48:	icall	
000909:0x0017ad58:	imove	#return, 0x000001
000909:0x0017ad68:	rts
000911:0x0017ad70:	imove	#return, 0x000000
000911:0x0017ad80:	rts
000911:0x0017ad88:	rts
map<int,PPEMatClassParameterCommandData>::GetKeyByValue()
000917:0x0017ade0:	imove	i, 0x000000
000917:0x0017adf0:	jump	0x17ae10
000917:0x0017adf8:	move	@m00, i
000917:0x0017ae08:	inc	i
000917:0x0017ae10:	ncalli	map<int,PPEMatClassParameterCommandData>.Count()
000917:0x0017ae18:	cmpi	i, #return
000917:0x0017ae28:	bge	0x17ae98
000919:0x0017ae30:	icall	
000919:0x0017ae40:	movec	@c00, #return
000919:0x0017ae50:	cmpmc	@c00, value
000919:0x0017ae60:	bne	0x17ae90
000921:0x0017ae68:	icall	
000921:0x0017ae78:	move	ret, #return
000922:0x0017ae88:	jump	0x17ae98
000922:0x0017ae90:	jump	0x17adf8
000926:0x0017ae98:	move	#return, ret
000926:0x0017aea8:	rts
000926:0x0017aeb0:	rts
map<int,PPEMatClassParameterCommandData>::GetKeyByValueChecked()
000931:0x0017aee0:	imove	i, 0x000000
000931:0x0017aef0:	jump	0x17af10
000931:0x0017aef8:	move	@m00, i
000931:0x0017af08:	inc	i
000931:0x0017af10:	ncalli	map<int,PPEMatClassParameterCommandData>.Count()
000931:0x0017af18:	cmpi	i, #return
000931:0x0017af28:	bge	0x17afb8
000933:0x0017af30:	icall	
000933:0x0017af40:	movec	@c00, #return
000933:0x0017af50:	cmpmc	@c00, value
000933:0x0017af60:	bne	0x17afb0
000935:0x0017af68:	icall	
000935:0x0017af78:	move	key, #return
000936:0x0017af88:	imove	#return, 0x000001
000936:0x0017af98:	move	key, key
000936:0x0017afa8:	rts
000936:0x0017afb0:	jump	0x17aef8
000939:0x0017afb8:	imove	#return, 0x000000
000939:0x0017afc8:	move	key, key
000939:0x0017afd8:	rts
000939:0x0017afe0:	move	key, key
000939:0x0017aff0:	rts
map<int,@PPEMatClassParameterCommandData>::GetKeyArray()
000885:0x0017b340:	new	keys, array<int>
000886:0x0017b360:	imove	i, 0x000000
000886:0x0017b370:	jump	0x17b390
000886:0x0017b378:	move	@m00, i
000886:0x0017b388:	inc	i
000886:0x0017b390:	ncalli	map<int,@PPEMatClassParameterCommandData>.Count()
000886:0x0017b398:	cmpi	i, #return
000886:0x0017b3a8:	bge	0x17b3d8
000888:0x0017b3b0:	icall	
000888:0x0017b3c0:	icall	
000888:0x0017b3d0:	jump	0x17b378
000890:0x0017b3d8:	movem	#return, keys
000890:0x0017b3e8:	release	keys
000890:0x0017b3f0:	rts
000890:0x0017b3f8:	release	keys
000890:0x0017b400:	rts
map<int,@PPEMatClassParameterCommandData>::GetValueArray()
000895:0x0017b458:	new	elements, array<PPEMatClassParameterCommandData>
000896:0x0017b478:	imove	i, 0x000000
000896:0x0017b488:	jump	0x17b4a8
000896:0x0017b490:	move	@m00, i
000896:0x0017b4a0:	inc	i
000896:0x0017b4a8:	ncalli	map<int,@PPEMatClassParameterCommandData>.Count()
000896:0x0017b4b0:	cmpi	i, #return
000896:0x0017b4c0:	bge	0x17b4f0
000898:0x0017b4c8:	icall	
000898:0x0017b4d8:	icall	
000898:0x0017b4e8:	jump	0x17b490
000900:0x0017b4f0:	movem	#return, elements
000900:0x0017b500:	release	elements
000900:0x0017b508:	rts
000900:0x0017b510:	release	elements
000900:0x0017b518:	rts
map<int,@PPEMatClassParameterCommandData>::ReplaceKey()
000905:0x0017b520:	icall	
000905:0x0017b530:	cmpi	#return, _i0
000905:0x0017b540:	beq	0x17b590
000907:0x0017b548:	icall	
000907:0x0017b558:	icall	
000908:0x0017b568:	icall	
000909:0x0017b578:	imove	#return, 0x000001
000909:0x0017b588:	rts
000911:0x0017b590:	imove	#return, 0x000000
000911:0x0017b5a0:	rts
000911:0x0017b5a8:	rts
map<int,@PPEMatClassParameterCommandData>::GetKeyByValue()
000917:0x0017b600:	imove	i, 0x000000
000917:0x0017b610:	jump	0x17b630
000917:0x0017b618:	move	@m00, i
000917:0x0017b628:	inc	i
000917:0x0017b630:	ncalli	map<int,@PPEMatClassParameterCommandData>.Count()
000917:0x0017b638:	cmpi	i, #return
000917:0x0017b648:	bge	0x17b6b8
000919:0x0017b650:	icall	
000919:0x0017b660:	movec	@c00, #return
000919:0x0017b670:	cmpmc	@c00, value
000919:0x0017b680:	bne	0x17b6b0
000921:0x0017b688:	icall	
000921:0x0017b698:	move	ret, #return
000922:0x0017b6a8:	jump	0x17b6b8
000922:0x0017b6b0:	jump	0x17b618
000926:0x0017b6b8:	move	#return, ret
000926:0x0017b6c8:	rts
000926:0x0017b6d0:	rts
map<int,@PPEMatClassParameterCommandData>::GetKeyByValueChecked()
000931:0x0017b700:	imove	i, 0x000000
000931:0x0017b710:	jump	0x17b730
000931:0x0017b718:	move	@m00, i
000931:0x0017b728:	inc	i
000931:0x0017b730:	ncalli	map<int,@PPEMatClassParameterCommandData>.Count()
000931:0x0017b738:	cmpi	i, #return
000931:0x0017b748:	bge	0x17b7d8
000933:0x0017b750:	icall	
000933:0x0017b760:	movec	@c00, #return
000933:0x0017b770:	cmpmc	@c00, value
000933:0x0017b780:	bne	0x17b7d0
000935:0x0017b788:	icall	
000935:0x0017b798:	move	key, #return
000936:0x0017b7a8:	imove	#return, 0x000001
000936:0x0017b7b8:	move	key, key
000936:0x0017b7c8:	rts
000936:0x0017b7d0:	jump	0x17b718
000939:0x0017b7d8:	imove	#return, 0x000000
000939:0x0017b7e8:	move	key, key
000939:0x0017b7f8:	rts
000939:0x0017b800:	move	key, key
000939:0x0017b810:	rts
array<ColorValuesData>::InsertAll()
000427:0x0017c560:	imove	i, 0x000000
000427:0x0017c570:	jump	0x17c590
000427:0x0017c578:	move	@m00, i
000427:0x0017c588:	inc	i
000427:0x0017c590:	ncalli	array<ColorValuesData>.Count()
000427:0x0017c598:	cmpi	i, #return
000427:0x0017c5a8:	bge	0x17c5d8
000429:0x0017c5b0:	icall	
000429:0x0017c5c0:	icall	
000429:0x0017c5d0:	jump	0x17c578
000429:0x0017c5d8:	rts
array<ColorValuesData>::RemoveItem()
000479:0x0017c608:	movefm	@c00, value
000479:0x0017c618:	icall	
000479:0x0017c628:	move	remove_index, #return
000481:0x0017c638:	cmpi	remove_index, _i0
000481:0x0017c648:	blt	0x17c660
000483:0x0017c650:	ncalli	array<ColorValuesData>.RemoveOrdered(remove_index)
000483:0x0017c660:	rts
array<ColorValuesData>::RemoveItemUnOrdered()
000489:0x0017c690:	movefm	@c00, value
000489:0x0017c6a0:	icall	
000489:0x0017c6b0:	move	remove_index, #return
000491:0x0017c6c0:	cmpi	remove_index, _i0
000491:0x0017c6d0:	blt	0x17c6e8
000493:0x0017c6d8:	ncalli	array<ColorValuesData>.Remove(remove_index)
000493:0x0017c6e8:	rts
array<ColorValuesData>::IsValidIndex()
000499:0x0017c6f0:	cmpi	index, _i-1
000499:0x0017c700:	ble	0x17c740
000499:0x0017c708:	ncalli	array<ColorValuesData>.Count()
000499:0x0017c710:	cmpi	index, #return
000499:0x0017c720:	bge	0x17c740
000499:0x0017c728:	imove	#return, 0x000001
000499:0x0017c738:	jump	0x17c750
000499:0x0017c740:	imove	#return, 0x000000
000499:0x0017c750:	rts
000499:0x0017c758:	rts
array<ColorValuesData>::Debug()
000525:0x0017c7b0:	ncalli	array<ColorValuesData>.Count()
000525:0x0017c7b8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0017c7e8:	icall	Print(#return)
000526:0x0017c7f8:	imove	i, 0x000000
000526:0x0017c808:	jump	0x17c828
000526:0x0017c810:	move	@m00, i
000526:0x0017c820:	inc	i
000526:0x0017c828:	ncalli	array<ColorValuesData>.Count()
000526:0x0017c830:	cmpi	i, #return
000526:0x0017c840:	bge	0x17c8b8
000528:0x0017c848:	icall	
000528:0x0017c858:	movetm	item, #return
000529:0x0017c868:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0017c898:	icall	Print(#return)
000529:0x0017c8a8:	release	item
000529:0x0017c8b0:	jump	0x17c810
000529:0x0017c8b8:	rts
array<ColorValuesData>::GetRandomIndex()
000544:0x0017c8c0:	ncalli	array<ColorValuesData>.Count()
000544:0x0017c8c8:	move	@m00, #return
000544:0x0017c8d8:	cmpi	@m00, _i0
000544:0x0017c8e8:	ble	0x17c920
000546:0x0017c8f0:	ncalli	array<ColorValuesData>.Count()
000546:0x0017c8f8:	icall	RandomInt(_i0, #return)
000546:0x0017c908:	move	#return, #return
000546:0x0017c918:	rts
000549:0x0017c920:	imove	#return, 0xffffffff
000549:0x0017c930:	rts
000549:0x0017c938:	rts
array<ColorValuesData>::GetRandomElement()
000563:0x0017c940:	call	
000563:0x0017c950:	icall	
000563:0x0017c960:	movetm	#return, #return
000563:0x0017c970:	rts
000563:0x0017c978:	rts
array<ColorValuesData>::SwapItems()
000568:0x0017c9a8:	icall	
000568:0x0017c9b8:	movetm	item1, #return
000569:0x0017c9c8:	icall	
000569:0x0017c9d8:	icall	
000570:0x0017c9e8:	movefm	@c00, item1
000570:0x0017c9f8:	icall	
000570:0x0017ca08:	release	item1
000570:0x0017ca10:	rts
array<ColorValuesData>::InsertArray()
000575:0x0017ca68:	imove	i, 0x000000
000575:0x0017ca78:	jump	0x17ca98
000575:0x0017ca80:	move	@m00, i
000575:0x0017ca90:	inc	i
000575:0x0017ca98:	ncalli	array<ColorValuesData>.Count()
000575:0x0017caa0:	cmpi	i, #return
000575:0x0017cab0:	bge	0x17cb08
000577:0x0017cab8:	icall	
000577:0x0017cac8:	movetm	item, #return
000578:0x0017cad8:	movefm	@c00, item
000578:0x0017cae8:	icall	
000578:0x0017caf8:	release	item
000578:0x0017cb00:	jump	0x17ca80
000578:0x0017cb08:	rts
array<ColorValuesData>::Invert()
000584:0x0017cb88:	imove	left, 0x000000
000585:0x0017cb98:	ncalli	array<ColorValuesData>.Count()
000585:0x0017cba0:	subi	right, #return, _i1
000586:0x0017cbb0:	cmpi	right, _i0
000586:0x0017cbc0:	ble	0x17cc80
000588:0x0017cbc8:	cmpi	left, right
000588:0x0017cbd8:	bge	0x17cc80
000590:0x0017cbe0:	icall	
000590:0x0017cbf0:	movetm	temp, #return
000591:0x0017cc00:	move	@m00, left
000591:0x0017cc10:	inc	left
000591:0x0017cc18:	icall	
000591:0x0017cc28:	icall	
000592:0x0017cc38:	move	@m00, right
000592:0x0017cc48:	dec	right
000592:0x0017cc50:	movefm	@c00, temp
000592:0x0017cc60:	icall	
000592:0x0017cc70:	release	temp
000592:0x0017cc78:	jump	0x17cbc8
000592:0x0017cc80:	rts
array<ColorValuesData>::MoveIndex()
000612:0x0017ccd8:	ncalli	array<ColorValuesData>.Count()
000612:0x0017cce0:	move	count, #return
000613:0x0017ccf0:	move	new_index, curr_index
000615:0x0017cd00:	cmpi	move_number, _i0
000615:0x0017cd10:	ble	0x17cd38
000617:0x0017cd18:	addi	@m00, curr_index, move_number
000617:0x0017cd28:	move	new_index, @m00
000620:0x0017cd38:	cmpi	move_number, _i0
000620:0x0017cd48:	bge	0x17cdf0
000622:0x0017cd50:	subi	@m00, curr_index, move_number
000622:0x0017cd60:	move	new_index, @m00
000624:0x0017cd70:	cmpi	new_index, _i0
000624:0x0017cd80:	bge	0x17cdf0
000626:0x0017cd88:	subi	@m01, _i0, count
000626:0x0017cd98:	cmpi	new_index, @m01
000626:0x0017cda8:	bgt	0x17cdd0
000628:0x0017cdb0:	modi	@m00, new_index, count
000628:0x0017cdc0:	move	new_index, @m00
000631:0x0017cdd0:	addi	@m00, new_index, count
000631:0x0017cde0:	move	new_index, @m00
000635:0x0017cdf0:	cmpi	new_index, count
000635:0x0017ce00:	blt	0x17ce28
000637:0x0017ce08:	modi	@m00, new_index, count
000637:0x0017ce18:	move	new_index, @m00
000641:0x0017ce28:	move	#return, new_index
000641:0x0017ce38:	rts
000641:0x0017ce40:	rts
array<ColorValuesData>::ShuffleArray()
000646:0x0017ce70:	imove	i, 0x000000
000646:0x0017ce80:	jump	0x17cea0
000646:0x0017ce88:	move	@m00, i
000646:0x0017ce98:	inc	i
000646:0x0017cea0:	ncalli	array<ColorValuesData>.Count()
000646:0x0017cea8:	cmpi	i, #return
000646:0x0017ceb8:	bge	0x17cef0
000648:0x0017cec0:	call	
000648:0x0017ced0:	call	
000648:0x0017cee8:	jump	0x17ce88
000648:0x0017cef0:	rts
array<ColorValuesData>::DifferentAtPosition()
000666:0x0017cf20:	ncalli	array<ColorValuesData>.Count()
000666:0x0017cf28:	move	@m00, #return
000666:0x0017cf38:	push	#return
000666:0x0017cf40:	ncalli	array<ColorValuesData>.Count()
000666:0x0017cf48:	move	@m02, #return
000666:0x0017cf58:	pop	#return
000666:0x0017cf60:	cmpi	@m00, @m02
000666:0x0017cf70:	beq	0x17cfa0
000668:0x0017cf78:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0017cf88:	imove	#return, 0xffffffff
000669:0x0017cf98:	rts
000672:0x0017cfa0:	imove	i, 0x000000
000672:0x0017cfb0:	jump	0x17cfc0
000672:0x0017cfb8:	inc	i
000672:0x0017cfc0:	ncalli	array<ColorValuesData>.Count()
000672:0x0017cfc8:	cmpi	i, #return
000672:0x0017cfd8:	bge	0x17d068
000674:0x0017cfe0:	icall	
000674:0x0017cff0:	movec	@c00, #return
000674:0x0017d000:	pushc	#return
000674:0x0017d008:	icall	
000674:0x0017d018:	movec	@c02, #return
000674:0x0017d028:	popc	#return
000674:0x0017d030:	cmpc	@c00, @c02
000674:0x0017d040:	beq	0x17d060
000676:0x0017d048:	move	#return, i
000676:0x0017d058:	rts
000676:0x0017d060:	jump	0x17cfb8
000680:0x0017d068:	imove	#return, 0xffffffff
000680:0x0017d078:	rts
000680:0x0017d080:	rts
map<int,ColorValuesData>::GetKeyArray()
000885:0x0017d380:	new	keys, array<int>
000886:0x0017d3a0:	imove	i, 0x000000
000886:0x0017d3b0:	jump	0x17d3d0
000886:0x0017d3b8:	move	@m00, i
000886:0x0017d3c8:	inc	i
000886:0x0017d3d0:	ncalli	map<int,ColorValuesData>.Count()
000886:0x0017d3d8:	cmpi	i, #return
000886:0x0017d3e8:	bge	0x17d418
000888:0x0017d3f0:	icall	
000888:0x0017d400:	icall	
000888:0x0017d410:	jump	0x17d3b8
000890:0x0017d418:	movem	#return, keys
000890:0x0017d428:	release	keys
000890:0x0017d430:	rts
000890:0x0017d438:	release	keys
000890:0x0017d440:	rts
map<int,ColorValuesData>::GetValueArray()
000895:0x0017d498:	new	elements, array<ColorValuesData>
000896:0x0017d4b8:	imove	i, 0x000000
000896:0x0017d4c8:	jump	0x17d4e8
000896:0x0017d4d0:	move	@m00, i
000896:0x0017d4e0:	inc	i
000896:0x0017d4e8:	ncalli	map<int,ColorValuesData>.Count()
000896:0x0017d4f0:	cmpi	i, #return
000896:0x0017d500:	bge	0x17d530
000898:0x0017d508:	icall	
000898:0x0017d518:	icall	
000898:0x0017d528:	jump	0x17d4d0
000900:0x0017d530:	movem	#return, elements
000900:0x0017d540:	release	elements
000900:0x0017d548:	rts
000900:0x0017d550:	release	elements
000900:0x0017d558:	rts
map<int,ColorValuesData>::ReplaceKey()
000905:0x0017d560:	icall	
000905:0x0017d570:	cmpi	#return, _i0
000905:0x0017d580:	beq	0x17d5d0
000907:0x0017d588:	icall	
000907:0x0017d598:	icall	
000908:0x0017d5a8:	icall	
000909:0x0017d5b8:	imove	#return, 0x000001
000909:0x0017d5c8:	rts
000911:0x0017d5d0:	imove	#return, 0x000000
000911:0x0017d5e0:	rts
000911:0x0017d5e8:	rts
map<int,ColorValuesData>::GetKeyByValue()
000917:0x0017d640:	imove	i, 0x000000
000917:0x0017d650:	jump	0x17d670
000917:0x0017d658:	move	@m00, i
000917:0x0017d668:	inc	i
000917:0x0017d670:	ncalli	map<int,ColorValuesData>.Count()
000917:0x0017d678:	cmpi	i, #return
000917:0x0017d688:	bge	0x17d6f8
000919:0x0017d690:	icall	
000919:0x0017d6a0:	movec	@c00, #return
000919:0x0017d6b0:	cmpmc	@c00, value
000919:0x0017d6c0:	bne	0x17d6f0
000921:0x0017d6c8:	icall	
000921:0x0017d6d8:	move	ret, #return
000922:0x0017d6e8:	jump	0x17d6f8
000922:0x0017d6f0:	jump	0x17d658
000926:0x0017d6f8:	move	#return, ret
000926:0x0017d708:	rts
000926:0x0017d710:	rts
map<int,ColorValuesData>::GetKeyByValueChecked()
000931:0x0017d740:	imove	i, 0x000000
000931:0x0017d750:	jump	0x17d770
000931:0x0017d758:	move	@m00, i
000931:0x0017d768:	inc	i
000931:0x0017d770:	ncalli	map<int,ColorValuesData>.Count()
000931:0x0017d778:	cmpi	i, #return
000931:0x0017d788:	bge	0x17d818
000933:0x0017d790:	icall	
000933:0x0017d7a0:	movec	@c00, #return
000933:0x0017d7b0:	cmpmc	@c00, value
000933:0x0017d7c0:	bne	0x17d810
000935:0x0017d7c8:	icall	
000935:0x0017d7d8:	move	key, #return
000936:0x0017d7e8:	imove	#return, 0x000001
000936:0x0017d7f8:	move	key, key
000936:0x0017d808:	rts
000936:0x0017d810:	jump	0x17d758
000939:0x0017d818:	imove	#return, 0x000000
000939:0x0017d828:	move	key, key
000939:0x0017d838:	rts
000939:0x0017d840:	move	key, key
000939:0x0017d850:	rts
map<int,@ColorValuesData>::GetKeyArray()
000885:0x0017dba0:	new	keys, array<int>
000886:0x0017dbc0:	imove	i, 0x000000
000886:0x0017dbd0:	jump	0x17dbf0
000886:0x0017dbd8:	move	@m00, i
000886:0x0017dbe8:	inc	i
000886:0x0017dbf0:	ncalli	map<int,@ColorValuesData>.Count()
000886:0x0017dbf8:	cmpi	i, #return
000886:0x0017dc08:	bge	0x17dc38
000888:0x0017dc10:	icall	
000888:0x0017dc20:	icall	
000888:0x0017dc30:	jump	0x17dbd8
000890:0x0017dc38:	movem	#return, keys
000890:0x0017dc48:	release	keys
000890:0x0017dc50:	rts
000890:0x0017dc58:	release	keys
000890:0x0017dc60:	rts
map<int,@ColorValuesData>::GetValueArray()
000895:0x0017dcb8:	new	elements, array<ColorValuesData>
000896:0x0017dcd8:	imove	i, 0x000000
000896:0x0017dce8:	jump	0x17dd08
000896:0x0017dcf0:	move	@m00, i
000896:0x0017dd00:	inc	i
000896:0x0017dd08:	ncalli	map<int,@ColorValuesData>.Count()
000896:0x0017dd10:	cmpi	i, #return
000896:0x0017dd20:	bge	0x17dd50
000898:0x0017dd28:	icall	
000898:0x0017dd38:	icall	
000898:0x0017dd48:	jump	0x17dcf0
000900:0x0017dd50:	movem	#return, elements
000900:0x0017dd60:	release	elements
000900:0x0017dd68:	rts
000900:0x0017dd70:	release	elements
000900:0x0017dd78:	rts
map<int,@ColorValuesData>::ReplaceKey()
000905:0x0017dd80:	icall	
000905:0x0017dd90:	cmpi	#return, _i0
000905:0x0017dda0:	beq	0x17ddf0
000907:0x0017dda8:	icall	
000907:0x0017ddb8:	icall	
000908:0x0017ddc8:	icall	
000909:0x0017ddd8:	imove	#return, 0x000001
000909:0x0017dde8:	rts
000911:0x0017ddf0:	imove	#return, 0x000000
000911:0x0017de00:	rts
000911:0x0017de08:	rts
map<int,@ColorValuesData>::GetKeyByValue()
000917:0x0017de60:	imove	i, 0x000000
000917:0x0017de70:	jump	0x17de90
000917:0x0017de78:	move	@m00, i
000917:0x0017de88:	inc	i
000917:0x0017de90:	ncalli	map<int,@ColorValuesData>.Count()
000917:0x0017de98:	cmpi	i, #return
000917:0x0017dea8:	bge	0x17df18
000919:0x0017deb0:	icall	
000919:0x0017dec0:	movec	@c00, #return
000919:0x0017ded0:	cmpmc	@c00, value
000919:0x0017dee0:	bne	0x17df10
000921:0x0017dee8:	icall	
000921:0x0017def8:	move	ret, #return
000922:0x0017df08:	jump	0x17df18
000922:0x0017df10:	jump	0x17de78
000926:0x0017df18:	move	#return, ret
000926:0x0017df28:	rts
000926:0x0017df30:	rts
map<int,@ColorValuesData>::GetKeyByValueChecked()
000931:0x0017df60:	imove	i, 0x000000
000931:0x0017df70:	jump	0x17df90
000931:0x0017df78:	move	@m00, i
000931:0x0017df88:	inc	i
000931:0x0017df90:	ncalli	map<int,@ColorValuesData>.Count()
000931:0x0017df98:	cmpi	i, #return
000931:0x0017dfa8:	bge	0x17e038
000933:0x0017dfb0:	icall	
000933:0x0017dfc0:	movec	@c00, #return
000933:0x0017dfd0:	cmpmc	@c00, value
000933:0x0017dfe0:	bne	0x17e030
000935:0x0017dfe8:	icall	
000935:0x0017dff8:	move	key, #return
000936:0x0017e008:	imove	#return, 0x000001
000936:0x0017e018:	move	key, key
000936:0x0017e028:	rts
000936:0x0017e030:	jump	0x17df78
000939:0x0017e038:	imove	#return, 0x000000
000939:0x0017e048:	move	key, key
000939:0x0017e058:	rts
000939:0x0017e060:	move	key, key
000939:0x0017e070:	rts
array<ErrorHandlerModule>::InsertAll()
000427:0x0017e668:	imove	i, 0x000000
000427:0x0017e678:	jump	0x17e698
000427:0x0017e680:	move	@m00, i
000427:0x0017e690:	inc	i
000427:0x0017e698:	ncalli	array<ErrorHandlerModule>.Count()
000427:0x0017e6a0:	cmpi	i, #return
000427:0x0017e6b0:	bge	0x17e6e0
000429:0x0017e6b8:	icall	
000429:0x0017e6c8:	icall	
000429:0x0017e6d8:	jump	0x17e680
000429:0x0017e6e0:	rts
array<ErrorHandlerModule>::RemoveItem()
000479:0x0017e710:	movefm	@c00, value
000479:0x0017e720:	icall	
000479:0x0017e730:	move	remove_index, #return
000481:0x0017e740:	cmpi	remove_index, _i0
000481:0x0017e750:	blt	0x17e768
000483:0x0017e758:	ncalli	array<ErrorHandlerModule>.RemoveOrdered(remove_index)
000483:0x0017e768:	rts
array<ErrorHandlerModule>::RemoveItemUnOrdered()
000489:0x0017e798:	movefm	@c00, value
000489:0x0017e7a8:	icall	
000489:0x0017e7b8:	move	remove_index, #return
000491:0x0017e7c8:	cmpi	remove_index, _i0
000491:0x0017e7d8:	blt	0x17e7f0
000493:0x0017e7e0:	ncalli	array<ErrorHandlerModule>.Remove(remove_index)
000493:0x0017e7f0:	rts
array<ErrorHandlerModule>::IsValidIndex()
000499:0x0017e7f8:	cmpi	index, _i-1
000499:0x0017e808:	ble	0x17e848
000499:0x0017e810:	ncalli	array<ErrorHandlerModule>.Count()
000499:0x0017e818:	cmpi	index, #return
000499:0x0017e828:	bge	0x17e848
000499:0x0017e830:	imove	#return, 0x000001
000499:0x0017e840:	jump	0x17e858
000499:0x0017e848:	imove	#return, 0x000000
000499:0x0017e858:	rts
000499:0x0017e860:	rts
array<ErrorHandlerModule>::Debug()
000525:0x0017e8b8:	ncalli	array<ErrorHandlerModule>.Count()
000525:0x0017e8c0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0017e8f0:	icall	Print(#return)
000526:0x0017e900:	imove	i, 0x000000
000526:0x0017e910:	jump	0x17e930
000526:0x0017e918:	move	@m00, i
000526:0x0017e928:	inc	i
000526:0x0017e930:	ncalli	array<ErrorHandlerModule>.Count()
000526:0x0017e938:	cmpi	i, #return
000526:0x0017e948:	bge	0x17e9c0
000528:0x0017e950:	icall	
000528:0x0017e960:	movetm	item, #return
000529:0x0017e970:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0017e9a0:	icall	Print(#return)
000529:0x0017e9b0:	release	item
000529:0x0017e9b8:	jump	0x17e918
000529:0x0017e9c0:	rts
array<ErrorHandlerModule>::GetRandomIndex()
000544:0x0017e9c8:	ncalli	array<ErrorHandlerModule>.Count()
000544:0x0017e9d0:	move	@m00, #return
000544:0x0017e9e0:	cmpi	@m00, _i0
000544:0x0017e9f0:	ble	0x17ea28
000546:0x0017e9f8:	ncalli	array<ErrorHandlerModule>.Count()
000546:0x0017ea00:	icall	RandomInt(_i0, #return)
000546:0x0017ea10:	move	#return, #return
000546:0x0017ea20:	rts
000549:0x0017ea28:	imove	#return, 0xffffffff
000549:0x0017ea38:	rts
000549:0x0017ea40:	rts
array<ErrorHandlerModule>::GetRandomElement()
000563:0x0017ea48:	call	
000563:0x0017ea58:	icall	
000563:0x0017ea68:	movetm	#return, #return
000563:0x0017ea78:	rts
000563:0x0017ea80:	rts
array<ErrorHandlerModule>::SwapItems()
000568:0x0017eab0:	icall	
000568:0x0017eac0:	movetm	item1, #return
000569:0x0017ead0:	icall	
000569:0x0017eae0:	icall	
000570:0x0017eaf0:	movefm	@c00, item1
000570:0x0017eb00:	icall	
000570:0x0017eb10:	release	item1
000570:0x0017eb18:	rts
array<ErrorHandlerModule>::InsertArray()
000575:0x0017eb70:	imove	i, 0x000000
000575:0x0017eb80:	jump	0x17eba0
000575:0x0017eb88:	move	@m00, i
000575:0x0017eb98:	inc	i
000575:0x0017eba0:	ncalli	array<ErrorHandlerModule>.Count()
000575:0x0017eba8:	cmpi	i, #return
000575:0x0017ebb8:	bge	0x17ec10
000577:0x0017ebc0:	icall	
000577:0x0017ebd0:	movetm	item, #return
000578:0x0017ebe0:	movefm	@c00, item
000578:0x0017ebf0:	icall	
000578:0x0017ec00:	release	item
000578:0x0017ec08:	jump	0x17eb88
000578:0x0017ec10:	rts
array<ErrorHandlerModule>::Invert()
000584:0x0017ec90:	imove	left, 0x000000
000585:0x0017eca0:	ncalli	array<ErrorHandlerModule>.Count()
000585:0x0017eca8:	subi	right, #return, _i1
000586:0x0017ecb8:	cmpi	right, _i0
000586:0x0017ecc8:	ble	0x17ed88
000588:0x0017ecd0:	cmpi	left, right
000588:0x0017ece0:	bge	0x17ed88
000590:0x0017ece8:	icall	
000590:0x0017ecf8:	movetm	temp, #return
000591:0x0017ed08:	move	@m00, left
000591:0x0017ed18:	inc	left
000591:0x0017ed20:	icall	
000591:0x0017ed30:	icall	
000592:0x0017ed40:	move	@m00, right
000592:0x0017ed50:	dec	right
000592:0x0017ed58:	movefm	@c00, temp
000592:0x0017ed68:	icall	
000592:0x0017ed78:	release	temp
000592:0x0017ed80:	jump	0x17ecd0
000592:0x0017ed88:	rts
array<ErrorHandlerModule>::MoveIndex()
000612:0x0017ede0:	ncalli	array<ErrorHandlerModule>.Count()
000612:0x0017ede8:	move	count, #return
000613:0x0017edf8:	move	new_index, curr_index
000615:0x0017ee08:	cmpi	move_number, _i0
000615:0x0017ee18:	ble	0x17ee40
000617:0x0017ee20:	addi	@m00, curr_index, move_number
000617:0x0017ee30:	move	new_index, @m00
000620:0x0017ee40:	cmpi	move_number, _i0
000620:0x0017ee50:	bge	0x17eef8
000622:0x0017ee58:	subi	@m00, curr_index, move_number
000622:0x0017ee68:	move	new_index, @m00
000624:0x0017ee78:	cmpi	new_index, _i0
000624:0x0017ee88:	bge	0x17eef8
000626:0x0017ee90:	subi	@m01, _i0, count
000626:0x0017eea0:	cmpi	new_index, @m01
000626:0x0017eeb0:	bgt	0x17eed8
000628:0x0017eeb8:	modi	@m00, new_index, count
000628:0x0017eec8:	move	new_index, @m00
000631:0x0017eed8:	addi	@m00, new_index, count
000631:0x0017eee8:	move	new_index, @m00
000635:0x0017eef8:	cmpi	new_index, count
000635:0x0017ef08:	blt	0x17ef30
000637:0x0017ef10:	modi	@m00, new_index, count
000637:0x0017ef20:	move	new_index, @m00
000641:0x0017ef30:	move	#return, new_index
000641:0x0017ef40:	rts
000641:0x0017ef48:	rts
array<ErrorHandlerModule>::ShuffleArray()
000646:0x0017ef78:	imove	i, 0x000000
000646:0x0017ef88:	jump	0x17efa8
000646:0x0017ef90:	move	@m00, i
000646:0x0017efa0:	inc	i
000646:0x0017efa8:	ncalli	array<ErrorHandlerModule>.Count()
000646:0x0017efb0:	cmpi	i, #return
000646:0x0017efc0:	bge	0x17eff8
000648:0x0017efc8:	call	
000648:0x0017efd8:	call	
000648:0x0017eff0:	jump	0x17ef90
000648:0x0017eff8:	rts
array<ErrorHandlerModule>::DifferentAtPosition()
000666:0x0017f028:	ncalli	array<ErrorHandlerModule>.Count()
000666:0x0017f030:	move	@m00, #return
000666:0x0017f040:	push	#return
000666:0x0017f048:	ncalli	array<ErrorHandlerModule>.Count()
000666:0x0017f050:	move	@m02, #return
000666:0x0017f060:	pop	#return
000666:0x0017f068:	cmpi	@m00, @m02
000666:0x0017f078:	beq	0x17f0a8
000668:0x0017f080:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0017f090:	imove	#return, 0xffffffff
000669:0x0017f0a0:	rts
000672:0x0017f0a8:	imove	i, 0x000000
000672:0x0017f0b8:	jump	0x17f0c8
000672:0x0017f0c0:	inc	i
000672:0x0017f0c8:	ncalli	array<ErrorHandlerModule>.Count()
000672:0x0017f0d0:	cmpi	i, #return
000672:0x0017f0e0:	bge	0x17f170
000674:0x0017f0e8:	icall	
000674:0x0017f0f8:	movec	@c00, #return
000674:0x0017f108:	pushc	#return
000674:0x0017f110:	icall	
000674:0x0017f120:	movec	@c02, #return
000674:0x0017f130:	popc	#return
000674:0x0017f138:	cmpc	@c00, @c02
000674:0x0017f148:	beq	0x17f168
000676:0x0017f150:	move	#return, i
000676:0x0017f160:	rts
000676:0x0017f168:	jump	0x17f0c0
000680:0x0017f170:	imove	#return, 0xffffffff
000680:0x0017f180:	rts
000680:0x0017f188:	rts
map<string,EntityAI>::GetKeyArray()
000885:0x0017f7f8:	new	keys, array<string>
000886:0x0017f818:	imove	i, 0x000000
000886:0x0017f828:	jump	0x17f848
000886:0x0017f830:	move	@m00, i
000886:0x0017f840:	inc	i
000886:0x0017f848:	ncalli	map<string,EntityAI>.Count()
000886:0x0017f850:	cmpi	i, #return
000886:0x0017f860:	bge	0x17f890
000888:0x0017f868:	icall	
000888:0x0017f878:	icall	
000888:0x0017f888:	jump	0x17f830
000890:0x0017f890:	movem	#return, keys
000890:0x0017f8a0:	release	keys
000890:0x0017f8a8:	rts
000890:0x0017f8b0:	release	keys
000890:0x0017f8b8:	rts
map<string,EntityAI>::GetValueArray()
000895:0x0017f910:	new	elements, array<EntityAI>
000896:0x0017f930:	imove	i, 0x000000
000896:0x0017f940:	jump	0x17f960
000896:0x0017f948:	move	@m00, i
000896:0x0017f958:	inc	i
000896:0x0017f960:	ncalli	map<string,EntityAI>.Count()
000896:0x0017f968:	cmpi	i, #return
000896:0x0017f978:	bge	0x17f9a8
000898:0x0017f980:	icall	
000898:0x0017f990:	icall	
000898:0x0017f9a0:	jump	0x17f948
000900:0x0017f9a8:	movem	#return, elements
000900:0x0017f9b8:	release	elements
000900:0x0017f9c0:	rts
000900:0x0017f9c8:	release	elements
000900:0x0017f9d0:	rts
map<string,EntityAI>::ReplaceKey()
000905:0x0017f9d8:	icall	
000905:0x0017f9e8:	cmpi	#return, _i0
000905:0x0017f9f8:	beq	0x17fa48
000907:0x0017fa00:	icall	
000907:0x0017fa10:	icall	
000908:0x0017fa20:	icall	
000909:0x0017fa30:	imove	#return, 0x000001
000909:0x0017fa40:	rts
000911:0x0017fa48:	imove	#return, 0x000000
000911:0x0017fa58:	rts
000911:0x0017fa60:	rts
map<string,EntityAI>::GetKeyByValue()
000917:0x0017fab8:	imove	i, 0x000000
000917:0x0017fac8:	jump	0x17fae8
000917:0x0017fad0:	move	@m00, i
000917:0x0017fae0:	inc	i
000917:0x0017fae8:	ncalli	map<string,EntityAI>.Count()
000917:0x0017faf0:	cmpi	i, #return
000917:0x0017fb00:	bge	0x17fb70
000919:0x0017fb08:	icall	
000919:0x0017fb18:	movec	@c00, #return
000919:0x0017fb28:	cmpmc	@c00, value
000919:0x0017fb38:	bne	0x17fb68
000921:0x0017fb40:	icall	
000921:0x0017fb50:	moves	ret, #return
000922:0x0017fb60:	jump	0x17fb70
000922:0x0017fb68:	jump	0x17fad0
000926:0x0017fb70:	moves	#return, ret
000926:0x0017fb80:	rts
000926:0x0017fb88:	rts
map<string,EntityAI>::GetKeyByValueChecked()
000931:0x0017fbb8:	imove	i, 0x000000
000931:0x0017fbc8:	jump	0x17fbe8
000931:0x0017fbd0:	move	@m00, i
000931:0x0017fbe0:	inc	i
000931:0x0017fbe8:	ncalli	map<string,EntityAI>.Count()
000931:0x0017fbf0:	cmpi	i, #return
000931:0x0017fc00:	bge	0x17fc90
000933:0x0017fc08:	icall	
000933:0x0017fc18:	movec	@c00, #return
000933:0x0017fc28:	cmpmc	@c00, value
000933:0x0017fc38:	bne	0x17fc88
000935:0x0017fc40:	icall	
000935:0x0017fc50:	moves	key, #return
000936:0x0017fc60:	imove	#return, 0x000001
000936:0x0017fc70:	moves	key, key
000936:0x0017fc80:	rts
000936:0x0017fc88:	jump	0x17fbd0
000939:0x0017fc90:	imove	#return, 0x000000
000939:0x0017fca0:	moves	key, key
000939:0x0017fcb0:	rts
000939:0x0017fcb8:	moves	key, key
000939:0x0017fcc8:	rts
array<ParticleManager>::InsertAll()
000427:0x00180a18:	imove	i, 0x000000
000427:0x00180a28:	jump	0x180a48
000427:0x00180a30:	move	@m00, i
000427:0x00180a40:	inc	i
000427:0x00180a48:	ncalli	array<ParticleManager>.Count()
000427:0x00180a50:	cmpi	i, #return
000427:0x00180a60:	bge	0x180a90
000429:0x00180a68:	icall	
000429:0x00180a78:	icall	
000429:0x00180a88:	jump	0x180a30
000429:0x00180a90:	rts
array<ParticleManager>::RemoveItem()
000479:0x00180ac0:	movefm	@c00, value
000479:0x00180ad0:	icall	
000479:0x00180ae0:	move	remove_index, #return
000481:0x00180af0:	cmpi	remove_index, _i0
000481:0x00180b00:	blt	0x180b18
000483:0x00180b08:	ncalli	array<ParticleManager>.RemoveOrdered(remove_index)
000483:0x00180b18:	rts
array<ParticleManager>::RemoveItemUnOrdered()
000489:0x00180b48:	movefm	@c00, value
000489:0x00180b58:	icall	
000489:0x00180b68:	move	remove_index, #return
000491:0x00180b78:	cmpi	remove_index, _i0
000491:0x00180b88:	blt	0x180ba0
000493:0x00180b90:	ncalli	array<ParticleManager>.Remove(remove_index)
000493:0x00180ba0:	rts
array<ParticleManager>::IsValidIndex()
000499:0x00180ba8:	cmpi	index, _i-1
000499:0x00180bb8:	ble	0x180bf8
000499:0x00180bc0:	ncalli	array<ParticleManager>.Count()
000499:0x00180bc8:	cmpi	index, #return
000499:0x00180bd8:	bge	0x180bf8
000499:0x00180be0:	imove	#return, 0x000001
000499:0x00180bf0:	jump	0x180c08
000499:0x00180bf8:	imove	#return, 0x000000
000499:0x00180c08:	rts
000499:0x00180c10:	rts
array<ParticleManager>::Debug()
000525:0x00180c68:	ncalli	array<ParticleManager>.Count()
000525:0x00180c70:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00180ca0:	icall	Print(#return)
000526:0x00180cb0:	imove	i, 0x000000
000526:0x00180cc0:	jump	0x180ce0
000526:0x00180cc8:	move	@m00, i
000526:0x00180cd8:	inc	i
000526:0x00180ce0:	ncalli	array<ParticleManager>.Count()
000526:0x00180ce8:	cmpi	i, #return
000526:0x00180cf8:	bge	0x180d70
000528:0x00180d00:	icall	
000528:0x00180d10:	movetm	item, #return
000529:0x00180d20:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00180d50:	icall	Print(#return)
000529:0x00180d60:	release	item
000529:0x00180d68:	jump	0x180cc8
000529:0x00180d70:	rts
array<ParticleManager>::GetRandomIndex()
000544:0x00180d78:	ncalli	array<ParticleManager>.Count()
000544:0x00180d80:	move	@m00, #return
000544:0x00180d90:	cmpi	@m00, _i0
000544:0x00180da0:	ble	0x180dd8
000546:0x00180da8:	ncalli	array<ParticleManager>.Count()
000546:0x00180db0:	icall	RandomInt(_i0, #return)
000546:0x00180dc0:	move	#return, #return
000546:0x00180dd0:	rts
000549:0x00180dd8:	imove	#return, 0xffffffff
000549:0x00180de8:	rts
000549:0x00180df0:	rts
array<ParticleManager>::GetRandomElement()
000563:0x00180df8:	call	
000563:0x00180e08:	icall	
000563:0x00180e18:	movetm	#return, #return
000563:0x00180e28:	rts
000563:0x00180e30:	rts
array<ParticleManager>::SwapItems()
000568:0x00180e60:	icall	
000568:0x00180e70:	movetm	item1, #return
000569:0x00180e80:	icall	
000569:0x00180e90:	icall	
000570:0x00180ea0:	movefm	@c00, item1
000570:0x00180eb0:	icall	
000570:0x00180ec0:	release	item1
000570:0x00180ec8:	rts
array<ParticleManager>::InsertArray()
000575:0x00180f20:	imove	i, 0x000000
000575:0x00180f30:	jump	0x180f50
000575:0x00180f38:	move	@m00, i
000575:0x00180f48:	inc	i
000575:0x00180f50:	ncalli	array<ParticleManager>.Count()
000575:0x00180f58:	cmpi	i, #return
000575:0x00180f68:	bge	0x180fc0
000577:0x00180f70:	icall	
000577:0x00180f80:	movetm	item, #return
000578:0x00180f90:	movefm	@c00, item
000578:0x00180fa0:	icall	
000578:0x00180fb0:	release	item
000578:0x00180fb8:	jump	0x180f38
000578:0x00180fc0:	rts
array<ParticleManager>::Invert()
000584:0x00181040:	imove	left, 0x000000
000585:0x00181050:	ncalli	array<ParticleManager>.Count()
000585:0x00181058:	subi	right, #return, _i1
000586:0x00181068:	cmpi	right, _i0
000586:0x00181078:	ble	0x181138
000588:0x00181080:	cmpi	left, right
000588:0x00181090:	bge	0x181138
000590:0x00181098:	icall	
000590:0x001810a8:	movetm	temp, #return
000591:0x001810b8:	move	@m00, left
000591:0x001810c8:	inc	left
000591:0x001810d0:	icall	
000591:0x001810e0:	icall	
000592:0x001810f0:	move	@m00, right
000592:0x00181100:	dec	right
000592:0x00181108:	movefm	@c00, temp
000592:0x00181118:	icall	
000592:0x00181128:	release	temp
000592:0x00181130:	jump	0x181080
000592:0x00181138:	rts
array<ParticleManager>::MoveIndex()
000612:0x00181190:	ncalli	array<ParticleManager>.Count()
000612:0x00181198:	move	count, #return
000613:0x001811a8:	move	new_index, curr_index
000615:0x001811b8:	cmpi	move_number, _i0
000615:0x001811c8:	ble	0x1811f0
000617:0x001811d0:	addi	@m00, curr_index, move_number
000617:0x001811e0:	move	new_index, @m00
000620:0x001811f0:	cmpi	move_number, _i0
000620:0x00181200:	bge	0x1812a8
000622:0x00181208:	subi	@m00, curr_index, move_number
000622:0x00181218:	move	new_index, @m00
000624:0x00181228:	cmpi	new_index, _i0
000624:0x00181238:	bge	0x1812a8
000626:0x00181240:	subi	@m01, _i0, count
000626:0x00181250:	cmpi	new_index, @m01
000626:0x00181260:	bgt	0x181288
000628:0x00181268:	modi	@m00, new_index, count
000628:0x00181278:	move	new_index, @m00
000631:0x00181288:	addi	@m00, new_index, count
000631:0x00181298:	move	new_index, @m00
000635:0x001812a8:	cmpi	new_index, count
000635:0x001812b8:	blt	0x1812e0
000637:0x001812c0:	modi	@m00, new_index, count
000637:0x001812d0:	move	new_index, @m00
000641:0x001812e0:	move	#return, new_index
000641:0x001812f0:	rts
000641:0x001812f8:	rts
array<ParticleManager>::ShuffleArray()
000646:0x00181328:	imove	i, 0x000000
000646:0x00181338:	jump	0x181358
000646:0x00181340:	move	@m00, i
000646:0x00181350:	inc	i
000646:0x00181358:	ncalli	array<ParticleManager>.Count()
000646:0x00181360:	cmpi	i, #return
000646:0x00181370:	bge	0x1813a8
000648:0x00181378:	call	
000648:0x00181388:	call	
000648:0x001813a0:	jump	0x181340
000648:0x001813a8:	rts
array<ParticleManager>::DifferentAtPosition()
000666:0x001813d8:	ncalli	array<ParticleManager>.Count()
000666:0x001813e0:	move	@m00, #return
000666:0x001813f0:	push	#return
000666:0x001813f8:	ncalli	array<ParticleManager>.Count()
000666:0x00181400:	move	@m02, #return
000666:0x00181410:	pop	#return
000666:0x00181418:	cmpi	@m00, @m02
000666:0x00181428:	beq	0x181458
000668:0x00181430:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00181440:	imove	#return, 0xffffffff
000669:0x00181450:	rts
000672:0x00181458:	imove	i, 0x000000
000672:0x00181468:	jump	0x181478
000672:0x00181470:	inc	i
000672:0x00181478:	ncalli	array<ParticleManager>.Count()
000672:0x00181480:	cmpi	i, #return
000672:0x00181490:	bge	0x181520
000674:0x00181498:	icall	
000674:0x001814a8:	movec	@c00, #return
000674:0x001814b8:	pushc	#return
000674:0x001814c0:	icall	
000674:0x001814d0:	movec	@c02, #return
000674:0x001814e0:	popc	#return
000674:0x001814e8:	cmpc	@c00, @c02
000674:0x001814f8:	beq	0x181518
000676:0x00181500:	move	#return, i
000676:0x00181510:	rts
000676:0x00181518:	jump	0x181470
000680:0x00181520:	imove	#return, 0xffffffff
000680:0x00181530:	rts
000680:0x00181538:	rts
map<int,ParticleManager>::GetKeyArray()
000885:0x00181838:	new	keys, array<int>
000886:0x00181858:	imove	i, 0x000000
000886:0x00181868:	jump	0x181888
000886:0x00181870:	move	@m00, i
000886:0x00181880:	inc	i
000886:0x00181888:	ncalli	map<int,ParticleManager>.Count()
000886:0x00181890:	cmpi	i, #return
000886:0x001818a0:	bge	0x1818d0
000888:0x001818a8:	icall	
000888:0x001818b8:	icall	
000888:0x001818c8:	jump	0x181870
000890:0x001818d0:	movem	#return, keys
000890:0x001818e0:	release	keys
000890:0x001818e8:	rts
000890:0x001818f0:	release	keys
000890:0x001818f8:	rts
map<int,ParticleManager>::GetValueArray()
000895:0x00181950:	new	elements, array<ParticleManager>
000896:0x00181970:	imove	i, 0x000000
000896:0x00181980:	jump	0x1819a0
000896:0x00181988:	move	@m00, i
000896:0x00181998:	inc	i
000896:0x001819a0:	ncalli	map<int,ParticleManager>.Count()
000896:0x001819a8:	cmpi	i, #return
000896:0x001819b8:	bge	0x1819e8
000898:0x001819c0:	icall	
000898:0x001819d0:	icall	
000898:0x001819e0:	jump	0x181988
000900:0x001819e8:	movem	#return, elements
000900:0x001819f8:	release	elements
000900:0x00181a00:	rts
000900:0x00181a08:	release	elements
000900:0x00181a10:	rts
map<int,ParticleManager>::ReplaceKey()
000905:0x00181a18:	icall	
000905:0x00181a28:	cmpi	#return, _i0
000905:0x00181a38:	beq	0x181a88
000907:0x00181a40:	icall	
000907:0x00181a50:	icall	
000908:0x00181a60:	icall	
000909:0x00181a70:	imove	#return, 0x000001
000909:0x00181a80:	rts
000911:0x00181a88:	imove	#return, 0x000000
000911:0x00181a98:	rts
000911:0x00181aa0:	rts
map<int,ParticleManager>::GetKeyByValue()
000917:0x00181af8:	imove	i, 0x000000
000917:0x00181b08:	jump	0x181b28
000917:0x00181b10:	move	@m00, i
000917:0x00181b20:	inc	i
000917:0x00181b28:	ncalli	map<int,ParticleManager>.Count()
000917:0x00181b30:	cmpi	i, #return
000917:0x00181b40:	bge	0x181bb0
000919:0x00181b48:	icall	
000919:0x00181b58:	movec	@c00, #return
000919:0x00181b68:	cmpmc	@c00, value
000919:0x00181b78:	bne	0x181ba8
000921:0x00181b80:	icall	
000921:0x00181b90:	move	ret, #return
000922:0x00181ba0:	jump	0x181bb0
000922:0x00181ba8:	jump	0x181b10
000926:0x00181bb0:	move	#return, ret
000926:0x00181bc0:	rts
000926:0x00181bc8:	rts
map<int,ParticleManager>::GetKeyByValueChecked()
000931:0x00181bf8:	imove	i, 0x000000
000931:0x00181c08:	jump	0x181c28
000931:0x00181c10:	move	@m00, i
000931:0x00181c20:	inc	i
000931:0x00181c28:	ncalli	map<int,ParticleManager>.Count()
000931:0x00181c30:	cmpi	i, #return
000931:0x00181c40:	bge	0x181cd0
000933:0x00181c48:	icall	
000933:0x00181c58:	movec	@c00, #return
000933:0x00181c68:	cmpmc	@c00, value
000933:0x00181c78:	bne	0x181cc8
000935:0x00181c80:	icall	
000935:0x00181c90:	move	key, #return
000936:0x00181ca0:	imove	#return, 0x000001
000936:0x00181cb0:	move	key, key
000936:0x00181cc0:	rts
000936:0x00181cc8:	jump	0x181c10
000939:0x00181cd0:	imove	#return, 0x000000
000939:0x00181ce0:	move	key, key
000939:0x00181cf0:	rts
000939:0x00181cf8:	move	key, key
000939:0x00181d08:	rts
map<int,@ParticleManager>::GetKeyArray()
000885:0x00182058:	new	keys, array<int>
000886:0x00182078:	imove	i, 0x000000
000886:0x00182088:	jump	0x1820a8
000886:0x00182090:	move	@m00, i
000886:0x001820a0:	inc	i
000886:0x001820a8:	ncalli	map<int,@ParticleManager>.Count()
000886:0x001820b0:	cmpi	i, #return
000886:0x001820c0:	bge	0x1820f0
000888:0x001820c8:	icall	
000888:0x001820d8:	icall	
000888:0x001820e8:	jump	0x182090
000890:0x001820f0:	movem	#return, keys
000890:0x00182100:	release	keys
000890:0x00182108:	rts
000890:0x00182110:	release	keys
000890:0x00182118:	rts
map<int,@ParticleManager>::GetValueArray()
000895:0x00182170:	new	elements, array<ParticleManager>
000896:0x00182190:	imove	i, 0x000000
000896:0x001821a0:	jump	0x1821c0
000896:0x001821a8:	move	@m00, i
000896:0x001821b8:	inc	i
000896:0x001821c0:	ncalli	map<int,@ParticleManager>.Count()
000896:0x001821c8:	cmpi	i, #return
000896:0x001821d8:	bge	0x182208
000898:0x001821e0:	icall	
000898:0x001821f0:	icall	
000898:0x00182200:	jump	0x1821a8
000900:0x00182208:	movem	#return, elements
000900:0x00182218:	release	elements
000900:0x00182220:	rts
000900:0x00182228:	release	elements
000900:0x00182230:	rts
map<int,@ParticleManager>::ReplaceKey()
000905:0x00182238:	icall	
000905:0x00182248:	cmpi	#return, _i0
000905:0x00182258:	beq	0x1822a8
000907:0x00182260:	icall	
000907:0x00182270:	icall	
000908:0x00182280:	icall	
000909:0x00182290:	imove	#return, 0x000001
000909:0x001822a0:	rts
000911:0x001822a8:	imove	#return, 0x000000
000911:0x001822b8:	rts
000911:0x001822c0:	rts
map<int,@ParticleManager>::GetKeyByValue()
000917:0x00182318:	imove	i, 0x000000
000917:0x00182328:	jump	0x182348
000917:0x00182330:	move	@m00, i
000917:0x00182340:	inc	i
000917:0x00182348:	ncalli	map<int,@ParticleManager>.Count()
000917:0x00182350:	cmpi	i, #return
000917:0x00182360:	bge	0x1823d0
000919:0x00182368:	icall	
000919:0x00182378:	movec	@c00, #return
000919:0x00182388:	cmpmc	@c00, value
000919:0x00182398:	bne	0x1823c8
000921:0x001823a0:	icall	
000921:0x001823b0:	move	ret, #return
000922:0x001823c0:	jump	0x1823d0
000922:0x001823c8:	jump	0x182330
000926:0x001823d0:	move	#return, ret
000926:0x001823e0:	rts
000926:0x001823e8:	rts
map<int,@ParticleManager>::GetKeyByValueChecked()
000931:0x00182418:	imove	i, 0x000000
000931:0x00182428:	jump	0x182448
000931:0x00182430:	move	@m00, i
000931:0x00182440:	inc	i
000931:0x00182448:	ncalli	map<int,@ParticleManager>.Count()
000931:0x00182450:	cmpi	i, #return
000931:0x00182460:	bge	0x1824f0
000933:0x00182468:	icall	
000933:0x00182478:	movec	@c00, #return
000933:0x00182488:	cmpmc	@c00, value
000933:0x00182498:	bne	0x1824e8
000935:0x001824a0:	icall	
000935:0x001824b0:	move	key, #return
000936:0x001824c0:	imove	#return, 0x000001
000936:0x001824d0:	move	key, key
000936:0x001824e0:	rts
000936:0x001824e8:	jump	0x182430
000939:0x001824f0:	imove	#return, 0x000000
000939:0x00182500:	move	key, key
000939:0x00182510:	rts
000939:0x00182518:	move	key, key
000939:0x00182528:	rts
map<string,bool>::GetKeyArray()
000885:0x00182b98:	new	keys, array<string>
000886:0x00182bb8:	imove	i, 0x000000
000886:0x00182bc8:	jump	0x182be8
000886:0x00182bd0:	move	@m00, i
000886:0x00182be0:	inc	i
000886:0x00182be8:	ncalli	map<string,bool>.Count()
000886:0x00182bf0:	cmpi	i, #return
000886:0x00182c00:	bge	0x182c30
000888:0x00182c08:	icall	
000888:0x00182c18:	icall	
000888:0x00182c28:	jump	0x182bd0
000890:0x00182c30:	movem	#return, keys
000890:0x00182c40:	release	keys
000890:0x00182c48:	rts
000890:0x00182c50:	release	keys
000890:0x00182c58:	rts
map<string,bool>::GetValueArray()
000895:0x00182cb0:	new	elements, array<bool>
000896:0x00182cd0:	imove	i, 0x000000
000896:0x00182ce0:	jump	0x182d00
000896:0x00182ce8:	move	@m00, i
000896:0x00182cf8:	inc	i
000896:0x00182d00:	ncalli	map<string,bool>.Count()
000896:0x00182d08:	cmpi	i, #return
000896:0x00182d18:	bge	0x182d48
000898:0x00182d20:	icall	
000898:0x00182d30:	icall	
000898:0x00182d40:	jump	0x182ce8
000900:0x00182d48:	movem	#return, elements
000900:0x00182d58:	release	elements
000900:0x00182d60:	rts
000900:0x00182d68:	release	elements
000900:0x00182d70:	rts
map<string,bool>::ReplaceKey()
000905:0x00182d78:	icall	
000905:0x00182d88:	cmpi	#return, _i0
000905:0x00182d98:	beq	0x182de8
000907:0x00182da0:	icall	
000907:0x00182db0:	icall	
000908:0x00182dc0:	icall	
000909:0x00182dd0:	imove	#return, 0x000001
000909:0x00182de0:	rts
000911:0x00182de8:	imove	#return, 0x000000
000911:0x00182df8:	rts
000911:0x00182e00:	rts
map<string,bool>::GetKeyByValue()
000917:0x00182e58:	imove	i, 0x000000
000917:0x00182e68:	jump	0x182e88
000917:0x00182e70:	move	@m00, i
000917:0x00182e80:	inc	i
000917:0x00182e88:	ncalli	map<string,bool>.Count()
000917:0x00182e90:	cmpi	i, #return
000917:0x00182ea0:	bge	0x182f10
000919:0x00182ea8:	icall	
000919:0x00182eb8:	move	@m00, #return
000919:0x00182ec8:	cmpi	@m00, value
000919:0x00182ed8:	bne	0x182f08
000921:0x00182ee0:	icall	
000921:0x00182ef0:	moves	ret, #return
000922:0x00182f00:	jump	0x182f10
000922:0x00182f08:	jump	0x182e70
000926:0x00182f10:	moves	#return, ret
000926:0x00182f20:	rts
000926:0x00182f28:	rts
map<string,bool>::GetKeyByValueChecked()
000931:0x00182f58:	imove	i, 0x000000
000931:0x00182f68:	jump	0x182f88
000931:0x00182f70:	move	@m00, i
000931:0x00182f80:	inc	i
000931:0x00182f88:	ncalli	map<string,bool>.Count()
000931:0x00182f90:	cmpi	i, #return
000931:0x00182fa0:	bge	0x183030
000933:0x00182fa8:	icall	
000933:0x00182fb8:	move	@m00, #return
000933:0x00182fc8:	cmpi	@m00, value
000933:0x00182fd8:	bne	0x183028
000935:0x00182fe0:	icall	
000935:0x00182ff0:	moves	key, #return
000936:0x00183000:	imove	#return, 0x000001
000936:0x00183010:	moves	key, key
000936:0x00183020:	rts
000936:0x00183028:	jump	0x182f70
000939:0x00183030:	imove	#return, 0x000000
000939:0x00183040:	moves	key, key
000939:0x00183050:	rts
000939:0x00183058:	moves	key, key
000939:0x00183068:	rts
array<Vector2>::InsertAll()
000427:0x00183da8:	imove	i, 0x000000
000427:0x00183db8:	jump	0x183dd8
000427:0x00183dc0:	move	@m00, i
000427:0x00183dd0:	inc	i
000427:0x00183dd8:	ncalli	array<Vector2>.Count()
000427:0x00183de0:	cmpi	i, #return
000427:0x00183df0:	bge	0x183e20
000429:0x00183df8:	icall	
000429:0x00183e08:	icall	
000429:0x00183e18:	jump	0x183dc0
000429:0x00183e20:	rts
array<Vector2>::RemoveItem()
000479:0x00183e50:	movefm	@c00, value
000479:0x00183e60:	icall	
000479:0x00183e70:	move	remove_index, #return
000481:0x00183e80:	cmpi	remove_index, _i0
000481:0x00183e90:	blt	0x183ea8
000483:0x00183e98:	ncalli	array<Vector2>.RemoveOrdered(remove_index)
000483:0x00183ea8:	rts
array<Vector2>::RemoveItemUnOrdered()
000489:0x00183ed8:	movefm	@c00, value
000489:0x00183ee8:	icall	
000489:0x00183ef8:	move	remove_index, #return
000491:0x00183f08:	cmpi	remove_index, _i0
000491:0x00183f18:	blt	0x183f30
000493:0x00183f20:	ncalli	array<Vector2>.Remove(remove_index)
000493:0x00183f30:	rts
array<Vector2>::IsValidIndex()
000499:0x00183f38:	cmpi	index, _i-1
000499:0x00183f48:	ble	0x183f88
000499:0x00183f50:	ncalli	array<Vector2>.Count()
000499:0x00183f58:	cmpi	index, #return
000499:0x00183f68:	bge	0x183f88
000499:0x00183f70:	imove	#return, 0x000001
000499:0x00183f80:	jump	0x183f98
000499:0x00183f88:	imove	#return, 0x000000
000499:0x00183f98:	rts
000499:0x00183fa0:	rts
array<Vector2>::Debug()
000525:0x00183ff8:	ncalli	array<Vector2>.Count()
000525:0x00184000:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00184030:	icall	Print(#return)
000526:0x00184040:	imove	i, 0x000000
000526:0x00184050:	jump	0x184070
000526:0x00184058:	move	@m00, i
000526:0x00184068:	inc	i
000526:0x00184070:	ncalli	array<Vector2>.Count()
000526:0x00184078:	cmpi	i, #return
000526:0x00184088:	bge	0x184100
000528:0x00184090:	icall	
000528:0x001840a0:	movetm	item, #return
000529:0x001840b0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001840e0:	icall	Print(#return)
000529:0x001840f0:	release	item
000529:0x001840f8:	jump	0x184058
000529:0x00184100:	rts
array<Vector2>::GetRandomIndex()
000544:0x00184108:	ncalli	array<Vector2>.Count()
000544:0x00184110:	move	@m00, #return
000544:0x00184120:	cmpi	@m00, _i0
000544:0x00184130:	ble	0x184168
000546:0x00184138:	ncalli	array<Vector2>.Count()
000546:0x00184140:	icall	RandomInt(_i0, #return)
000546:0x00184150:	move	#return, #return
000546:0x00184160:	rts
000549:0x00184168:	imove	#return, 0xffffffff
000549:0x00184178:	rts
000549:0x00184180:	rts
array<Vector2>::GetRandomElement()
000563:0x00184188:	call	
000563:0x00184198:	icall	
000563:0x001841a8:	movetm	#return, #return
000563:0x001841b8:	rts
000563:0x001841c0:	rts
array<Vector2>::SwapItems()
000568:0x001841f0:	icall	
000568:0x00184200:	movetm	item1, #return
000569:0x00184210:	icall	
000569:0x00184220:	icall	
000570:0x00184230:	movefm	@c00, item1
000570:0x00184240:	icall	
000570:0x00184250:	release	item1
000570:0x00184258:	rts
array<Vector2>::InsertArray()
000575:0x001842b0:	imove	i, 0x000000
000575:0x001842c0:	jump	0x1842e0
000575:0x001842c8:	move	@m00, i
000575:0x001842d8:	inc	i
000575:0x001842e0:	ncalli	array<Vector2>.Count()
000575:0x001842e8:	cmpi	i, #return
000575:0x001842f8:	bge	0x184350
000577:0x00184300:	icall	
000577:0x00184310:	movetm	item, #return
000578:0x00184320:	movefm	@c00, item
000578:0x00184330:	icall	
000578:0x00184340:	release	item
000578:0x00184348:	jump	0x1842c8
000578:0x00184350:	rts
array<Vector2>::Invert()
000584:0x001843d0:	imove	left, 0x000000
000585:0x001843e0:	ncalli	array<Vector2>.Count()
000585:0x001843e8:	subi	right, #return, _i1
000586:0x001843f8:	cmpi	right, _i0
000586:0x00184408:	ble	0x1844c8
000588:0x00184410:	cmpi	left, right
000588:0x00184420:	bge	0x1844c8
000590:0x00184428:	icall	
000590:0x00184438:	movetm	temp, #return
000591:0x00184448:	move	@m00, left
000591:0x00184458:	inc	left
000591:0x00184460:	icall	
000591:0x00184470:	icall	
000592:0x00184480:	move	@m00, right
000592:0x00184490:	dec	right
000592:0x00184498:	movefm	@c00, temp
000592:0x001844a8:	icall	
000592:0x001844b8:	release	temp
000592:0x001844c0:	jump	0x184410
000592:0x001844c8:	rts
array<Vector2>::MoveIndex()
000612:0x00184520:	ncalli	array<Vector2>.Count()
000612:0x00184528:	move	count, #return
000613:0x00184538:	move	new_index, curr_index
000615:0x00184548:	cmpi	move_number, _i0
000615:0x00184558:	ble	0x184580
000617:0x00184560:	addi	@m00, curr_index, move_number
000617:0x00184570:	move	new_index, @m00
000620:0x00184580:	cmpi	move_number, _i0
000620:0x00184590:	bge	0x184638
000622:0x00184598:	subi	@m00, curr_index, move_number
000622:0x001845a8:	move	new_index, @m00
000624:0x001845b8:	cmpi	new_index, _i0
000624:0x001845c8:	bge	0x184638
000626:0x001845d0:	subi	@m01, _i0, count
000626:0x001845e0:	cmpi	new_index, @m01
000626:0x001845f0:	bgt	0x184618
000628:0x001845f8:	modi	@m00, new_index, count
000628:0x00184608:	move	new_index, @m00
000631:0x00184618:	addi	@m00, new_index, count
000631:0x00184628:	move	new_index, @m00
000635:0x00184638:	cmpi	new_index, count
000635:0x00184648:	blt	0x184670
000637:0x00184650:	modi	@m00, new_index, count
000637:0x00184660:	move	new_index, @m00
000641:0x00184670:	move	#return, new_index
000641:0x00184680:	rts
000641:0x00184688:	rts
array<Vector2>::ShuffleArray()
000646:0x001846b8:	imove	i, 0x000000
000646:0x001846c8:	jump	0x1846e8
000646:0x001846d0:	move	@m00, i
000646:0x001846e0:	inc	i
000646:0x001846e8:	ncalli	array<Vector2>.Count()
000646:0x001846f0:	cmpi	i, #return
000646:0x00184700:	bge	0x184738
000648:0x00184708:	call	
000648:0x00184718:	call	
000648:0x00184730:	jump	0x1846d0
000648:0x00184738:	rts
array<Vector2>::DifferentAtPosition()
000666:0x00184768:	ncalli	array<Vector2>.Count()
000666:0x00184770:	move	@m00, #return
000666:0x00184780:	push	#return
000666:0x00184788:	ncalli	array<Vector2>.Count()
000666:0x00184790:	move	@m02, #return
000666:0x001847a0:	pop	#return
000666:0x001847a8:	cmpi	@m00, @m02
000666:0x001847b8:	beq	0x1847e8
000668:0x001847c0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001847d0:	imove	#return, 0xffffffff
000669:0x001847e0:	rts
000672:0x001847e8:	imove	i, 0x000000
000672:0x001847f8:	jump	0x184808
000672:0x00184800:	inc	i
000672:0x00184808:	ncalli	array<Vector2>.Count()
000672:0x00184810:	cmpi	i, #return
000672:0x00184820:	bge	0x1848b0
000674:0x00184828:	icall	
000674:0x00184838:	movec	@c00, #return
000674:0x00184848:	pushc	#return
000674:0x00184850:	icall	
000674:0x00184860:	movec	@c02, #return
000674:0x00184870:	popc	#return
000674:0x00184878:	cmpc	@c00, @c02
000674:0x00184888:	beq	0x1848a8
000676:0x00184890:	move	#return, i
000676:0x001848a0:	rts
000676:0x001848a8:	jump	0x184800
000680:0x001848b0:	imove	#return, 0xffffffff
000680:0x001848c0:	rts
000680:0x001848c8:	rts
map<string,Vector2>::GetKeyArray()
000885:0x00184bc8:	new	keys, array<string>
000886:0x00184be8:	imove	i, 0x000000
000886:0x00184bf8:	jump	0x184c18
000886:0x00184c00:	move	@m00, i
000886:0x00184c10:	inc	i
000886:0x00184c18:	ncalli	map<string,Vector2>.Count()
000886:0x00184c20:	cmpi	i, #return
000886:0x00184c30:	bge	0x184c60
000888:0x00184c38:	icall	
000888:0x00184c48:	icall	
000888:0x00184c58:	jump	0x184c00
000890:0x00184c60:	movem	#return, keys
000890:0x00184c70:	release	keys
000890:0x00184c78:	rts
000890:0x00184c80:	release	keys
000890:0x00184c88:	rts
map<string,Vector2>::GetValueArray()
000895:0x00184ce0:	new	elements, array<Vector2>
000896:0x00184d00:	imove	i, 0x000000
000896:0x00184d10:	jump	0x184d30
000896:0x00184d18:	move	@m00, i
000896:0x00184d28:	inc	i
000896:0x00184d30:	ncalli	map<string,Vector2>.Count()
000896:0x00184d38:	cmpi	i, #return
000896:0x00184d48:	bge	0x184d78
000898:0x00184d50:	icall	
000898:0x00184d60:	icall	
000898:0x00184d70:	jump	0x184d18
000900:0x00184d78:	movem	#return, elements
000900:0x00184d88:	release	elements
000900:0x00184d90:	rts
000900:0x00184d98:	release	elements
000900:0x00184da0:	rts
map<string,Vector2>::ReplaceKey()
000905:0x00184da8:	icall	
000905:0x00184db8:	cmpi	#return, _i0
000905:0x00184dc8:	beq	0x184e18
000907:0x00184dd0:	icall	
000907:0x00184de0:	icall	
000908:0x00184df0:	icall	
000909:0x00184e00:	imove	#return, 0x000001
000909:0x00184e10:	rts
000911:0x00184e18:	imove	#return, 0x000000
000911:0x00184e28:	rts
000911:0x00184e30:	rts
map<string,Vector2>::GetKeyByValue()
000917:0x00184e88:	imove	i, 0x000000
000917:0x00184e98:	jump	0x184eb8
000917:0x00184ea0:	move	@m00, i
000917:0x00184eb0:	inc	i
000917:0x00184eb8:	ncalli	map<string,Vector2>.Count()
000917:0x00184ec0:	cmpi	i, #return
000917:0x00184ed0:	bge	0x184f40
000919:0x00184ed8:	icall	
000919:0x00184ee8:	movec	@c00, #return
000919:0x00184ef8:	cmpmc	@c00, value
000919:0x00184f08:	bne	0x184f38
000921:0x00184f10:	icall	
000921:0x00184f20:	moves	ret, #return
000922:0x00184f30:	jump	0x184f40
000922:0x00184f38:	jump	0x184ea0
000926:0x00184f40:	moves	#return, ret
000926:0x00184f50:	rts
000926:0x00184f58:	rts
map<string,Vector2>::GetKeyByValueChecked()
000931:0x00184f88:	imove	i, 0x000000
000931:0x00184f98:	jump	0x184fb8
000931:0x00184fa0:	move	@m00, i
000931:0x00184fb0:	inc	i
000931:0x00184fb8:	ncalli	map<string,Vector2>.Count()
000931:0x00184fc0:	cmpi	i, #return
000931:0x00184fd0:	bge	0x185060
000933:0x00184fd8:	icall	
000933:0x00184fe8:	movec	@c00, #return
000933:0x00184ff8:	cmpmc	@c00, value
000933:0x00185008:	bne	0x185058
000935:0x00185010:	icall	
000935:0x00185020:	moves	key, #return
000936:0x00185030:	imove	#return, 0x000001
000936:0x00185040:	moves	key, key
000936:0x00185050:	rts
000936:0x00185058:	jump	0x184fa0
000939:0x00185060:	imove	#return, 0x000000
000939:0x00185070:	moves	key, key
000939:0x00185080:	rts
000939:0x00185088:	moves	key, key
000939:0x00185098:	rts
map<string,@Vector2>::GetKeyArray()
000885:0x001853e8:	new	keys, array<string>
000886:0x00185408:	imove	i, 0x000000
000886:0x00185418:	jump	0x185438
000886:0x00185420:	move	@m00, i
000886:0x00185430:	inc	i
000886:0x00185438:	ncalli	map<string,@Vector2>.Count()
000886:0x00185440:	cmpi	i, #return
000886:0x00185450:	bge	0x185480
000888:0x00185458:	icall	
000888:0x00185468:	icall	
000888:0x00185478:	jump	0x185420
000890:0x00185480:	movem	#return, keys
000890:0x00185490:	release	keys
000890:0x00185498:	rts
000890:0x001854a0:	release	keys
000890:0x001854a8:	rts
map<string,@Vector2>::GetValueArray()
000895:0x00185500:	new	elements, array<Vector2>
000896:0x00185520:	imove	i, 0x000000
000896:0x00185530:	jump	0x185550
000896:0x00185538:	move	@m00, i
000896:0x00185548:	inc	i
000896:0x00185550:	ncalli	map<string,@Vector2>.Count()
000896:0x00185558:	cmpi	i, #return
000896:0x00185568:	bge	0x185598
000898:0x00185570:	icall	
000898:0x00185580:	icall	
000898:0x00185590:	jump	0x185538
000900:0x00185598:	movem	#return, elements
000900:0x001855a8:	release	elements
000900:0x001855b0:	rts
000900:0x001855b8:	release	elements
000900:0x001855c0:	rts
map<string,@Vector2>::ReplaceKey()
000905:0x001855c8:	icall	
000905:0x001855d8:	cmpi	#return, _i0
000905:0x001855e8:	beq	0x185638
000907:0x001855f0:	icall	
000907:0x00185600:	icall	
000908:0x00185610:	icall	
000909:0x00185620:	imove	#return, 0x000001
000909:0x00185630:	rts
000911:0x00185638:	imove	#return, 0x000000
000911:0x00185648:	rts
000911:0x00185650:	rts
map<string,@Vector2>::GetKeyByValue()
000917:0x001856a8:	imove	i, 0x000000
000917:0x001856b8:	jump	0x1856d8
000917:0x001856c0:	move	@m00, i
000917:0x001856d0:	inc	i
000917:0x001856d8:	ncalli	map<string,@Vector2>.Count()
000917:0x001856e0:	cmpi	i, #return
000917:0x001856f0:	bge	0x185760
000919:0x001856f8:	icall	
000919:0x00185708:	movec	@c00, #return
000919:0x00185718:	cmpmc	@c00, value
000919:0x00185728:	bne	0x185758
000921:0x00185730:	icall	
000921:0x00185740:	moves	ret, #return
000922:0x00185750:	jump	0x185760
000922:0x00185758:	jump	0x1856c0
000926:0x00185760:	moves	#return, ret
000926:0x00185770:	rts
000926:0x00185778:	rts
map<string,@Vector2>::GetKeyByValueChecked()
000931:0x001857a8:	imove	i, 0x000000
000931:0x001857b8:	jump	0x1857d8
000931:0x001857c0:	move	@m00, i
000931:0x001857d0:	inc	i
000931:0x001857d8:	ncalli	map<string,@Vector2>.Count()
000931:0x001857e0:	cmpi	i, #return
000931:0x001857f0:	bge	0x185880
000933:0x001857f8:	icall	
000933:0x00185808:	movec	@c00, #return
000933:0x00185818:	cmpmc	@c00, value
000933:0x00185828:	bne	0x185878
000935:0x00185830:	icall	
000935:0x00185840:	moves	key, #return
000936:0x00185850:	imove	#return, 0x000001
000936:0x00185860:	moves	key, key
000936:0x00185870:	rts
000936:0x00185878:	jump	0x1857c0
000939:0x00185880:	imove	#return, 0x000000
000939:0x00185890:	moves	key, key
000939:0x001858a0:	rts
000939:0x001858a8:	moves	key, key
000939:0x001858b8:	rts
map<int,EntityAI>::GetKeyArray()
000885:0x00185f28:	new	keys, array<int>
000886:0x00185f48:	imove	i, 0x000000
000886:0x00185f58:	jump	0x185f78
000886:0x00185f60:	move	@m00, i
000886:0x00185f70:	inc	i
000886:0x00185f78:	ncalli	map<int,EntityAI>.Count()
000886:0x00185f80:	cmpi	i, #return
000886:0x00185f90:	bge	0x185fc0
000888:0x00185f98:	icall	
000888:0x00185fa8:	icall	
000888:0x00185fb8:	jump	0x185f60
000890:0x00185fc0:	movem	#return, keys
000890:0x00185fd0:	release	keys
000890:0x00185fd8:	rts
000890:0x00185fe0:	release	keys
000890:0x00185fe8:	rts
map<int,EntityAI>::GetValueArray()
000895:0x00186040:	new	elements, array<EntityAI>
000896:0x00186060:	imove	i, 0x000000
000896:0x00186070:	jump	0x186090
000896:0x00186078:	move	@m00, i
000896:0x00186088:	inc	i
000896:0x00186090:	ncalli	map<int,EntityAI>.Count()
000896:0x00186098:	cmpi	i, #return
000896:0x001860a8:	bge	0x1860d8
000898:0x001860b0:	icall	
000898:0x001860c0:	icall	
000898:0x001860d0:	jump	0x186078
000900:0x001860d8:	movem	#return, elements
000900:0x001860e8:	release	elements
000900:0x001860f0:	rts
000900:0x001860f8:	release	elements
000900:0x00186100:	rts
map<int,EntityAI>::ReplaceKey()
000905:0x00186108:	icall	
000905:0x00186118:	cmpi	#return, _i0
000905:0x00186128:	beq	0x186178
000907:0x00186130:	icall	
000907:0x00186140:	icall	
000908:0x00186150:	icall	
000909:0x00186160:	imove	#return, 0x000001
000909:0x00186170:	rts
000911:0x00186178:	imove	#return, 0x000000
000911:0x00186188:	rts
000911:0x00186190:	rts
map<int,EntityAI>::GetKeyByValue()
000917:0x001861e8:	imove	i, 0x000000
000917:0x001861f8:	jump	0x186218
000917:0x00186200:	move	@m00, i
000917:0x00186210:	inc	i
000917:0x00186218:	ncalli	map<int,EntityAI>.Count()
000917:0x00186220:	cmpi	i, #return
000917:0x00186230:	bge	0x1862a0
000919:0x00186238:	icall	
000919:0x00186248:	movec	@c00, #return
000919:0x00186258:	cmpmc	@c00, value
000919:0x00186268:	bne	0x186298
000921:0x00186270:	icall	
000921:0x00186280:	move	ret, #return
000922:0x00186290:	jump	0x1862a0
000922:0x00186298:	jump	0x186200
000926:0x001862a0:	move	#return, ret
000926:0x001862b0:	rts
000926:0x001862b8:	rts
map<int,EntityAI>::GetKeyByValueChecked()
000931:0x001862e8:	imove	i, 0x000000
000931:0x001862f8:	jump	0x186318
000931:0x00186300:	move	@m00, i
000931:0x00186310:	inc	i
000931:0x00186318:	ncalli	map<int,EntityAI>.Count()
000931:0x00186320:	cmpi	i, #return
000931:0x00186330:	bge	0x1863c0
000933:0x00186338:	icall	
000933:0x00186348:	movec	@c00, #return
000933:0x00186358:	cmpmc	@c00, value
000933:0x00186368:	bne	0x1863b8
000935:0x00186370:	icall	
000935:0x00186380:	move	key, #return
000936:0x00186390:	imove	#return, 0x000001
000936:0x001863a0:	move	key, key
000936:0x001863b0:	rts
000936:0x001863b8:	jump	0x186300
000939:0x001863c0:	imove	#return, 0x000000
000939:0x001863d0:	move	key, key
000939:0x001863e0:	rts
000939:0x001863e8:	move	key, key
000939:0x001863f8:	rts
array<Man>::InsertAll()
000427:0x001869f0:	imove	i, 0x000000
000427:0x00186a00:	jump	0x186a20
000427:0x00186a08:	move	@m00, i
000427:0x00186a18:	inc	i
000427:0x00186a20:	ncalli	array<Man>.Count()
000427:0x00186a28:	cmpi	i, #return
000427:0x00186a38:	bge	0x186a68
000429:0x00186a40:	icall	
000429:0x00186a50:	icall	
000429:0x00186a60:	jump	0x186a08
000429:0x00186a68:	rts
array<Man>::RemoveItem()
000479:0x00186a98:	movefm	@c00, value
000479:0x00186aa8:	icall	
000479:0x00186ab8:	move	remove_index, #return
000481:0x00186ac8:	cmpi	remove_index, _i0
000481:0x00186ad8:	blt	0x186af0
000483:0x00186ae0:	ncalli	array<Man>.RemoveOrdered(remove_index)
000483:0x00186af0:	rts
array<Man>::RemoveItemUnOrdered()
000489:0x00186b20:	movefm	@c00, value
000489:0x00186b30:	icall	
000489:0x00186b40:	move	remove_index, #return
000491:0x00186b50:	cmpi	remove_index, _i0
000491:0x00186b60:	blt	0x186b78
000493:0x00186b68:	ncalli	array<Man>.Remove(remove_index)
000493:0x00186b78:	rts
array<Man>::IsValidIndex()
000499:0x00186b80:	cmpi	index, _i-1
000499:0x00186b90:	ble	0x186bd0
000499:0x00186b98:	ncalli	array<Man>.Count()
000499:0x00186ba0:	cmpi	index, #return
000499:0x00186bb0:	bge	0x186bd0
000499:0x00186bb8:	imove	#return, 0x000001
000499:0x00186bc8:	jump	0x186be0
000499:0x00186bd0:	imove	#return, 0x000000
000499:0x00186be0:	rts
000499:0x00186be8:	rts
array<Man>::Debug()
000525:0x00186c40:	ncalli	array<Man>.Count()
000525:0x00186c48:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00186c78:	icall	Print(#return)
000526:0x00186c88:	imove	i, 0x000000
000526:0x00186c98:	jump	0x186cb8
000526:0x00186ca0:	move	@m00, i
000526:0x00186cb0:	inc	i
000526:0x00186cb8:	ncalli	array<Man>.Count()
000526:0x00186cc0:	cmpi	i, #return
000526:0x00186cd0:	bge	0x186d48
000528:0x00186cd8:	icall	
000528:0x00186ce8:	movetm	item, #return
000529:0x00186cf8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00186d28:	icall	Print(#return)
000529:0x00186d38:	release	item
000529:0x00186d40:	jump	0x186ca0
000529:0x00186d48:	rts
array<Man>::GetRandomIndex()
000544:0x00186d50:	ncalli	array<Man>.Count()
000544:0x00186d58:	move	@m00, #return
000544:0x00186d68:	cmpi	@m00, _i0
000544:0x00186d78:	ble	0x186db0
000546:0x00186d80:	ncalli	array<Man>.Count()
000546:0x00186d88:	icall	RandomInt(_i0, #return)
000546:0x00186d98:	move	#return, #return
000546:0x00186da8:	rts
000549:0x00186db0:	imove	#return, 0xffffffff
000549:0x00186dc0:	rts
000549:0x00186dc8:	rts
array<Man>::GetRandomElement()
000563:0x00186dd0:	call	
000563:0x00186de0:	icall	
000563:0x00186df0:	movetm	#return, #return
000563:0x00186e00:	rts
000563:0x00186e08:	rts
array<Man>::SwapItems()
000568:0x00186e38:	icall	
000568:0x00186e48:	movetm	item1, #return
000569:0x00186e58:	icall	
000569:0x00186e68:	icall	
000570:0x00186e78:	movefm	@c00, item1
000570:0x00186e88:	icall	
000570:0x00186e98:	release	item1
000570:0x00186ea0:	rts
array<Man>::InsertArray()
000575:0x00186ef8:	imove	i, 0x000000
000575:0x00186f08:	jump	0x186f28
000575:0x00186f10:	move	@m00, i
000575:0x00186f20:	inc	i
000575:0x00186f28:	ncalli	array<Man>.Count()
000575:0x00186f30:	cmpi	i, #return
000575:0x00186f40:	bge	0x186f98
000577:0x00186f48:	icall	
000577:0x00186f58:	movetm	item, #return
000578:0x00186f68:	movefm	@c00, item
000578:0x00186f78:	icall	
000578:0x00186f88:	release	item
000578:0x00186f90:	jump	0x186f10
000578:0x00186f98:	rts
array<Man>::Invert()
000584:0x00187018:	imove	left, 0x000000
000585:0x00187028:	ncalli	array<Man>.Count()
000585:0x00187030:	subi	right, #return, _i1
000586:0x00187040:	cmpi	right, _i0
000586:0x00187050:	ble	0x187110
000588:0x00187058:	cmpi	left, right
000588:0x00187068:	bge	0x187110
000590:0x00187070:	icall	
000590:0x00187080:	movetm	temp, #return
000591:0x00187090:	move	@m00, left
000591:0x001870a0:	inc	left
000591:0x001870a8:	icall	
000591:0x001870b8:	icall	
000592:0x001870c8:	move	@m00, right
000592:0x001870d8:	dec	right
000592:0x001870e0:	movefm	@c00, temp
000592:0x001870f0:	icall	
000592:0x00187100:	release	temp
000592:0x00187108:	jump	0x187058
000592:0x00187110:	rts
array<Man>::MoveIndex()
000612:0x00187168:	ncalli	array<Man>.Count()
000612:0x00187170:	move	count, #return
000613:0x00187180:	move	new_index, curr_index
000615:0x00187190:	cmpi	move_number, _i0
000615:0x001871a0:	ble	0x1871c8
000617:0x001871a8:	addi	@m00, curr_index, move_number
000617:0x001871b8:	move	new_index, @m00
000620:0x001871c8:	cmpi	move_number, _i0
000620:0x001871d8:	bge	0x187280
000622:0x001871e0:	subi	@m00, curr_index, move_number
000622:0x001871f0:	move	new_index, @m00
000624:0x00187200:	cmpi	new_index, _i0
000624:0x00187210:	bge	0x187280
000626:0x00187218:	subi	@m01, _i0, count
000626:0x00187228:	cmpi	new_index, @m01
000626:0x00187238:	bgt	0x187260
000628:0x00187240:	modi	@m00, new_index, count
000628:0x00187250:	move	new_index, @m00
000631:0x00187260:	addi	@m00, new_index, count
000631:0x00187270:	move	new_index, @m00
000635:0x00187280:	cmpi	new_index, count
000635:0x00187290:	blt	0x1872b8
000637:0x00187298:	modi	@m00, new_index, count
000637:0x001872a8:	move	new_index, @m00
000641:0x001872b8:	move	#return, new_index
000641:0x001872c8:	rts
000641:0x001872d0:	rts
array<Man>::ShuffleArray()
000646:0x00187300:	imove	i, 0x000000
000646:0x00187310:	jump	0x187330
000646:0x00187318:	move	@m00, i
000646:0x00187328:	inc	i
000646:0x00187330:	ncalli	array<Man>.Count()
000646:0x00187338:	cmpi	i, #return
000646:0x00187348:	bge	0x187380
000648:0x00187350:	call	
000648:0x00187360:	call	
000648:0x00187378:	jump	0x187318
000648:0x00187380:	rts
array<Man>::DifferentAtPosition()
000666:0x001873b0:	ncalli	array<Man>.Count()
000666:0x001873b8:	move	@m00, #return
000666:0x001873c8:	push	#return
000666:0x001873d0:	ncalli	array<Man>.Count()
000666:0x001873d8:	move	@m02, #return
000666:0x001873e8:	pop	#return
000666:0x001873f0:	cmpi	@m00, @m02
000666:0x00187400:	beq	0x187430
000668:0x00187408:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00187418:	imove	#return, 0xffffffff
000669:0x00187428:	rts
000672:0x00187430:	imove	i, 0x000000
000672:0x00187440:	jump	0x187450
000672:0x00187448:	inc	i
000672:0x00187450:	ncalli	array<Man>.Count()
000672:0x00187458:	cmpi	i, #return
000672:0x00187468:	bge	0x1874f8
000674:0x00187470:	icall	
000674:0x00187480:	movec	@c00, #return
000674:0x00187490:	pushc	#return
000674:0x00187498:	icall	
000674:0x001874a8:	movec	@c02, #return
000674:0x001874b8:	popc	#return
000674:0x001874c0:	cmpc	@c00, @c02
000674:0x001874d0:	beq	0x1874f0
000676:0x001874d8:	move	#return, i
000676:0x001874e8:	rts
000676:0x001874f0:	jump	0x187448
000680:0x001874f8:	imove	#return, 0xffffffff
000680:0x00187508:	rts
000680:0x00187510:	rts
array<ITEM_DataBase>::InsertAll()
000427:0x00187d48:	imove	i, 0x000000
000427:0x00187d58:	jump	0x187d78
000427:0x00187d60:	move	@m00, i
000427:0x00187d70:	inc	i
000427:0x00187d78:	ncalli	array<ITEM_DataBase>.Count()
000427:0x00187d80:	cmpi	i, #return
000427:0x00187d90:	bge	0x187dc0
000429:0x00187d98:	icall	
000429:0x00187da8:	icall	
000429:0x00187db8:	jump	0x187d60
000429:0x00187dc0:	rts
array<ITEM_DataBase>::RemoveItem()
000479:0x00187df0:	movefm	@c00, value
000479:0x00187e00:	icall	
000479:0x00187e10:	move	remove_index, #return
000481:0x00187e20:	cmpi	remove_index, _i0
000481:0x00187e30:	blt	0x187e48
000483:0x00187e38:	ncalli	array<ITEM_DataBase>.RemoveOrdered(remove_index)
000483:0x00187e48:	rts
array<ITEM_DataBase>::RemoveItemUnOrdered()
000489:0x00187e78:	movefm	@c00, value
000489:0x00187e88:	icall	
000489:0x00187e98:	move	remove_index, #return
000491:0x00187ea8:	cmpi	remove_index, _i0
000491:0x00187eb8:	blt	0x187ed0
000493:0x00187ec0:	ncalli	array<ITEM_DataBase>.Remove(remove_index)
000493:0x00187ed0:	rts
array<ITEM_DataBase>::IsValidIndex()
000499:0x00187ed8:	cmpi	index, _i-1
000499:0x00187ee8:	ble	0x187f28
000499:0x00187ef0:	ncalli	array<ITEM_DataBase>.Count()
000499:0x00187ef8:	cmpi	index, #return
000499:0x00187f08:	bge	0x187f28
000499:0x00187f10:	imove	#return, 0x000001
000499:0x00187f20:	jump	0x187f38
000499:0x00187f28:	imove	#return, 0x000000
000499:0x00187f38:	rts
000499:0x00187f40:	rts
array<ITEM_DataBase>::Debug()
000525:0x00187f98:	ncalli	array<ITEM_DataBase>.Count()
000525:0x00187fa0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00187fd0:	icall	Print(#return)
000526:0x00187fe0:	imove	i, 0x000000
000526:0x00187ff0:	jump	0x188010
000526:0x00187ff8:	move	@m00, i
000526:0x00188008:	inc	i
000526:0x00188010:	ncalli	array<ITEM_DataBase>.Count()
000526:0x00188018:	cmpi	i, #return
000526:0x00188028:	bge	0x1880a0
000528:0x00188030:	icall	
000528:0x00188040:	movetm	item, #return
000529:0x00188050:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00188080:	icall	Print(#return)
000529:0x00188090:	release	item
000529:0x00188098:	jump	0x187ff8
000529:0x001880a0:	rts
array<ITEM_DataBase>::GetRandomIndex()
000544:0x001880a8:	ncalli	array<ITEM_DataBase>.Count()
000544:0x001880b0:	move	@m00, #return
000544:0x001880c0:	cmpi	@m00, _i0
000544:0x001880d0:	ble	0x188108
000546:0x001880d8:	ncalli	array<ITEM_DataBase>.Count()
000546:0x001880e0:	icall	RandomInt(_i0, #return)
000546:0x001880f0:	move	#return, #return
000546:0x00188100:	rts
000549:0x00188108:	imove	#return, 0xffffffff
000549:0x00188118:	rts
000549:0x00188120:	rts
array<ITEM_DataBase>::GetRandomElement()
000563:0x00188128:	call	
000563:0x00188138:	icall	
000563:0x00188148:	movetm	#return, #return
000563:0x00188158:	rts
000563:0x00188160:	rts
array<ITEM_DataBase>::SwapItems()
000568:0x00188190:	icall	
000568:0x001881a0:	movetm	item1, #return
000569:0x001881b0:	icall	
000569:0x001881c0:	icall	
000570:0x001881d0:	movefm	@c00, item1
000570:0x001881e0:	icall	
000570:0x001881f0:	release	item1
000570:0x001881f8:	rts
array<ITEM_DataBase>::InsertArray()
000575:0x00188250:	imove	i, 0x000000
000575:0x00188260:	jump	0x188280
000575:0x00188268:	move	@m00, i
000575:0x00188278:	inc	i
000575:0x00188280:	ncalli	array<ITEM_DataBase>.Count()
000575:0x00188288:	cmpi	i, #return
000575:0x00188298:	bge	0x1882f0
000577:0x001882a0:	icall	
000577:0x001882b0:	movetm	item, #return
000578:0x001882c0:	movefm	@c00, item
000578:0x001882d0:	icall	
000578:0x001882e0:	release	item
000578:0x001882e8:	jump	0x188268
000578:0x001882f0:	rts
array<ITEM_DataBase>::Invert()
000584:0x00188370:	imove	left, 0x000000
000585:0x00188380:	ncalli	array<ITEM_DataBase>.Count()
000585:0x00188388:	subi	right, #return, _i1
000586:0x00188398:	cmpi	right, _i0
000586:0x001883a8:	ble	0x188468
000588:0x001883b0:	cmpi	left, right
000588:0x001883c0:	bge	0x188468
000590:0x001883c8:	icall	
000590:0x001883d8:	movetm	temp, #return
000591:0x001883e8:	move	@m00, left
000591:0x001883f8:	inc	left
000591:0x00188400:	icall	
000591:0x00188410:	icall	
000592:0x00188420:	move	@m00, right
000592:0x00188430:	dec	right
000592:0x00188438:	movefm	@c00, temp
000592:0x00188448:	icall	
000592:0x00188458:	release	temp
000592:0x00188460:	jump	0x1883b0
000592:0x00188468:	rts
array<ITEM_DataBase>::MoveIndex()
000612:0x001884c0:	ncalli	array<ITEM_DataBase>.Count()
000612:0x001884c8:	move	count, #return
000613:0x001884d8:	move	new_index, curr_index
000615:0x001884e8:	cmpi	move_number, _i0
000615:0x001884f8:	ble	0x188520
000617:0x00188500:	addi	@m00, curr_index, move_number
000617:0x00188510:	move	new_index, @m00
000620:0x00188520:	cmpi	move_number, _i0
000620:0x00188530:	bge	0x1885d8
000622:0x00188538:	subi	@m00, curr_index, move_number
000622:0x00188548:	move	new_index, @m00
000624:0x00188558:	cmpi	new_index, _i0
000624:0x00188568:	bge	0x1885d8
000626:0x00188570:	subi	@m01, _i0, count
000626:0x00188580:	cmpi	new_index, @m01
000626:0x00188590:	bgt	0x1885b8
000628:0x00188598:	modi	@m00, new_index, count
000628:0x001885a8:	move	new_index, @m00
000631:0x001885b8:	addi	@m00, new_index, count
000631:0x001885c8:	move	new_index, @m00
000635:0x001885d8:	cmpi	new_index, count
000635:0x001885e8:	blt	0x188610
000637:0x001885f0:	modi	@m00, new_index, count
000637:0x00188600:	move	new_index, @m00
000641:0x00188610:	move	#return, new_index
000641:0x00188620:	rts
000641:0x00188628:	rts
array<ITEM_DataBase>::ShuffleArray()
000646:0x00188658:	imove	i, 0x000000
000646:0x00188668:	jump	0x188688
000646:0x00188670:	move	@m00, i
000646:0x00188680:	inc	i
000646:0x00188688:	ncalli	array<ITEM_DataBase>.Count()
000646:0x00188690:	cmpi	i, #return
000646:0x001886a0:	bge	0x1886d8
000648:0x001886a8:	call	
000648:0x001886b8:	call	
000648:0x001886d0:	jump	0x188670
000648:0x001886d8:	rts
array<ITEM_DataBase>::DifferentAtPosition()
000666:0x00188708:	ncalli	array<ITEM_DataBase>.Count()
000666:0x00188710:	move	@m00, #return
000666:0x00188720:	push	#return
000666:0x00188728:	ncalli	array<ITEM_DataBase>.Count()
000666:0x00188730:	move	@m02, #return
000666:0x00188740:	pop	#return
000666:0x00188748:	cmpi	@m00, @m02
000666:0x00188758:	beq	0x188788
000668:0x00188760:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00188770:	imove	#return, 0xffffffff
000669:0x00188780:	rts
000672:0x00188788:	imove	i, 0x000000
000672:0x00188798:	jump	0x1887a8
000672:0x001887a0:	inc	i
000672:0x001887a8:	ncalli	array<ITEM_DataBase>.Count()
000672:0x001887b0:	cmpi	i, #return
000672:0x001887c0:	bge	0x188850
000674:0x001887c8:	icall	
000674:0x001887d8:	movec	@c00, #return
000674:0x001887e8:	pushc	#return
000674:0x001887f0:	icall	
000674:0x00188800:	movec	@c02, #return
000674:0x00188810:	popc	#return
000674:0x00188818:	cmpc	@c00, @c02
000674:0x00188828:	beq	0x188848
000676:0x00188830:	move	#return, i
000676:0x00188840:	rts
000676:0x00188848:	jump	0x1887a0
000680:0x00188850:	imove	#return, 0xffffffff
000680:0x00188860:	rts
000680:0x00188868:	rts
array<@ITEM_DataBase>::InsertAll()
000427:0x00188c80:	imove	i, 0x000000
000427:0x00188c90:	jump	0x188cb0
000427:0x00188c98:	move	@m00, i
000427:0x00188ca8:	inc	i
000427:0x00188cb0:	ncalli	array<ITEM_DataBase>.Count()
000427:0x00188cb8:	cmpi	i, #return
000427:0x00188cc8:	bge	0x188cf8
000429:0x00188cd0:	icall	
000429:0x00188ce0:	icall	
000429:0x00188cf0:	jump	0x188c98
000429:0x00188cf8:	rts
array<@ITEM_DataBase>::RemoveItem()
000479:0x00188d28:	movefm	@c00, value
000479:0x00188d38:	icall	
000479:0x00188d48:	move	remove_index, #return
000481:0x00188d58:	cmpi	remove_index, _i0
000481:0x00188d68:	blt	0x188d80
000483:0x00188d70:	ncalli	array<@ITEM_DataBase>.RemoveOrdered(remove_index)
000483:0x00188d80:	rts
array<@ITEM_DataBase>::RemoveItemUnOrdered()
000489:0x00188db0:	movefm	@c00, value
000489:0x00188dc0:	icall	
000489:0x00188dd0:	move	remove_index, #return
000491:0x00188de0:	cmpi	remove_index, _i0
000491:0x00188df0:	blt	0x188e08
000493:0x00188df8:	ncalli	array<@ITEM_DataBase>.Remove(remove_index)
000493:0x00188e08:	rts
array<@ITEM_DataBase>::IsValidIndex()
000499:0x00188e10:	cmpi	index, _i-1
000499:0x00188e20:	ble	0x188e60
000499:0x00188e28:	ncalli	array<@ITEM_DataBase>.Count()
000499:0x00188e30:	cmpi	index, #return
000499:0x00188e40:	bge	0x188e60
000499:0x00188e48:	imove	#return, 0x000001
000499:0x00188e58:	jump	0x188e70
000499:0x00188e60:	imove	#return, 0x000000
000499:0x00188e70:	rts
000499:0x00188e78:	rts
array<@ITEM_DataBase>::Debug()
000525:0x00188ed0:	ncalli	array<@ITEM_DataBase>.Count()
000525:0x00188ed8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00188f08:	icall	Print(#return)
000526:0x00188f18:	imove	i, 0x000000
000526:0x00188f28:	jump	0x188f48
000526:0x00188f30:	move	@m00, i
000526:0x00188f40:	inc	i
000526:0x00188f48:	ncalli	array<@ITEM_DataBase>.Count()
000526:0x00188f50:	cmpi	i, #return
000526:0x00188f60:	bge	0x188fd8
000528:0x00188f68:	icall	
000528:0x00188f78:	movetm	item, #return
000529:0x00188f88:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00188fb8:	icall	Print(#return)
000529:0x00188fc8:	release	item
000529:0x00188fd0:	jump	0x188f30
000529:0x00188fd8:	rts
array<@ITEM_DataBase>::GetRandomIndex()
000544:0x00188fe0:	ncalli	array<@ITEM_DataBase>.Count()
000544:0x00188fe8:	move	@m00, #return
000544:0x00188ff8:	cmpi	@m00, _i0
000544:0x00189008:	ble	0x189040
000546:0x00189010:	ncalli	array<@ITEM_DataBase>.Count()
000546:0x00189018:	icall	RandomInt(_i0, #return)
000546:0x00189028:	move	#return, #return
000546:0x00189038:	rts
000549:0x00189040:	imove	#return, 0xffffffff
000549:0x00189050:	rts
000549:0x00189058:	rts
array<@ITEM_DataBase>::GetRandomElement()
000563:0x00189060:	call	
000563:0x00189070:	icall	
000563:0x00189080:	movetm	#return, #return
000563:0x00189090:	rts
000563:0x00189098:	rts
array<@ITEM_DataBase>::SwapItems()
000568:0x001890c8:	icall	
000568:0x001890d8:	movetm	item1, #return
000569:0x001890e8:	icall	
000569:0x001890f8:	icall	
000570:0x00189108:	movefm	@c00, item1
000570:0x00189118:	icall	
000570:0x00189128:	release	item1
000570:0x00189130:	rts
array<@ITEM_DataBase>::InsertArray()
000575:0x00189188:	imove	i, 0x000000
000575:0x00189198:	jump	0x1891b8
000575:0x001891a0:	move	@m00, i
000575:0x001891b0:	inc	i
000575:0x001891b8:	ncalli	array<ITEM_DataBase>.Count()
000575:0x001891c0:	cmpi	i, #return
000575:0x001891d0:	bge	0x189228
000577:0x001891d8:	icall	
000577:0x001891e8:	movetm	item, #return
000578:0x001891f8:	movefm	@c00, item
000578:0x00189208:	icall	
000578:0x00189218:	release	item
000578:0x00189220:	jump	0x1891a0
000578:0x00189228:	rts
array<@ITEM_DataBase>::Invert()
000584:0x001892a8:	imove	left, 0x000000
000585:0x001892b8:	ncalli	array<@ITEM_DataBase>.Count()
000585:0x001892c0:	subi	right, #return, _i1
000586:0x001892d0:	cmpi	right, _i0
000586:0x001892e0:	ble	0x1893a0
000588:0x001892e8:	cmpi	left, right
000588:0x001892f8:	bge	0x1893a0
000590:0x00189300:	icall	
000590:0x00189310:	movetm	temp, #return
000591:0x00189320:	move	@m00, left
000591:0x00189330:	inc	left
000591:0x00189338:	icall	
000591:0x00189348:	icall	
000592:0x00189358:	move	@m00, right
000592:0x00189368:	dec	right
000592:0x00189370:	movefm	@c00, temp
000592:0x00189380:	icall	
000592:0x00189390:	release	temp
000592:0x00189398:	jump	0x1892e8
000592:0x001893a0:	rts
array<@ITEM_DataBase>::MoveIndex()
000612:0x001893f8:	ncalli	array<@ITEM_DataBase>.Count()
000612:0x00189400:	move	count, #return
000613:0x00189410:	move	new_index, curr_index
000615:0x00189420:	cmpi	move_number, _i0
000615:0x00189430:	ble	0x189458
000617:0x00189438:	addi	@m00, curr_index, move_number
000617:0x00189448:	move	new_index, @m00
000620:0x00189458:	cmpi	move_number, _i0
000620:0x00189468:	bge	0x189510
000622:0x00189470:	subi	@m00, curr_index, move_number
000622:0x00189480:	move	new_index, @m00
000624:0x00189490:	cmpi	new_index, _i0
000624:0x001894a0:	bge	0x189510
000626:0x001894a8:	subi	@m01, _i0, count
000626:0x001894b8:	cmpi	new_index, @m01
000626:0x001894c8:	bgt	0x1894f0
000628:0x001894d0:	modi	@m00, new_index, count
000628:0x001894e0:	move	new_index, @m00
000631:0x001894f0:	addi	@m00, new_index, count
000631:0x00189500:	move	new_index, @m00
000635:0x00189510:	cmpi	new_index, count
000635:0x00189520:	blt	0x189548
000637:0x00189528:	modi	@m00, new_index, count
000637:0x00189538:	move	new_index, @m00
000641:0x00189548:	move	#return, new_index
000641:0x00189558:	rts
000641:0x00189560:	rts
array<@ITEM_DataBase>::ShuffleArray()
000646:0x00189590:	imove	i, 0x000000
000646:0x001895a0:	jump	0x1895c0
000646:0x001895a8:	move	@m00, i
000646:0x001895b8:	inc	i
000646:0x001895c0:	ncalli	array<@ITEM_DataBase>.Count()
000646:0x001895c8:	cmpi	i, #return
000646:0x001895d8:	bge	0x189610
000648:0x001895e0:	call	
000648:0x001895f0:	call	
000648:0x00189608:	jump	0x1895a8
000648:0x00189610:	rts
array<@ITEM_DataBase>::DifferentAtPosition()
000666:0x00189640:	ncalli	array<@ITEM_DataBase>.Count()
000666:0x00189648:	move	@m00, #return
000666:0x00189658:	ncalli	array<ITEM_DataBase>.Count()
000666:0x00189660:	cmpi	@m00, #return
000666:0x00189670:	beq	0x1896a0
000668:0x00189678:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00189688:	imove	#return, 0xffffffff
000669:0x00189698:	rts
000672:0x001896a0:	imove	i, 0x000000
000672:0x001896b0:	jump	0x1896c0
000672:0x001896b8:	inc	i
000672:0x001896c0:	ncalli	array<ITEM_DataBase>.Count()
000672:0x001896c8:	cmpi	i, #return
000672:0x001896d8:	bge	0x189748
000674:0x001896e0:	icall	
000674:0x001896f0:	movec	@c00, #return
000674:0x00189700:	icall	
000674:0x00189710:	cmpc	@c00, #return
000674:0x00189720:	beq	0x189740
000676:0x00189728:	move	#return, i
000676:0x00189738:	rts
000676:0x00189740:	jump	0x1896b8
000680:0x00189748:	imove	#return, 0xffffffff
000680:0x00189758:	rts
000680:0x00189760:	rts
array<InventoryLocation>::InsertAll()
000427:0x00189fa0:	imove	i, 0x000000
000427:0x00189fb0:	jump	0x189fd0
000427:0x00189fb8:	move	@m00, i
000427:0x00189fc8:	inc	i
000427:0x00189fd0:	ncalli	array<InventoryLocation>.Count()
000427:0x00189fd8:	cmpi	i, #return
000427:0x00189fe8:	bge	0x18a018
000429:0x00189ff0:	icall	
000429:0x0018a000:	icall	
000429:0x0018a010:	jump	0x189fb8
000429:0x0018a018:	rts
array<InventoryLocation>::RemoveItem()
000479:0x0018a048:	movefm	@c00, value
000479:0x0018a058:	icall	
000479:0x0018a068:	move	remove_index, #return
000481:0x0018a078:	cmpi	remove_index, _i0
000481:0x0018a088:	blt	0x18a0a0
000483:0x0018a090:	ncalli	array<InventoryLocation>.RemoveOrdered(remove_index)
000483:0x0018a0a0:	rts
array<InventoryLocation>::RemoveItemUnOrdered()
000489:0x0018a0d0:	movefm	@c00, value
000489:0x0018a0e0:	icall	
000489:0x0018a0f0:	move	remove_index, #return
000491:0x0018a100:	cmpi	remove_index, _i0
000491:0x0018a110:	blt	0x18a128
000493:0x0018a118:	ncalli	array<InventoryLocation>.Remove(remove_index)
000493:0x0018a128:	rts
array<InventoryLocation>::IsValidIndex()
000499:0x0018a130:	cmpi	index, _i-1
000499:0x0018a140:	ble	0x18a180
000499:0x0018a148:	ncalli	array<InventoryLocation>.Count()
000499:0x0018a150:	cmpi	index, #return
000499:0x0018a160:	bge	0x18a180
000499:0x0018a168:	imove	#return, 0x000001
000499:0x0018a178:	jump	0x18a190
000499:0x0018a180:	imove	#return, 0x000000
000499:0x0018a190:	rts
000499:0x0018a198:	rts
array<InventoryLocation>::Debug()
000525:0x0018a1f0:	ncalli	array<InventoryLocation>.Count()
000525:0x0018a1f8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0018a228:	icall	Print(#return)
000526:0x0018a238:	imove	i, 0x000000
000526:0x0018a248:	jump	0x18a268
000526:0x0018a250:	move	@m00, i
000526:0x0018a260:	inc	i
000526:0x0018a268:	ncalli	array<InventoryLocation>.Count()
000526:0x0018a270:	cmpi	i, #return
000526:0x0018a280:	bge	0x18a2f8
000528:0x0018a288:	icall	
000528:0x0018a298:	movetm	item, #return
000529:0x0018a2a8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0018a2d8:	icall	Print(#return)
000529:0x0018a2e8:	release	item
000529:0x0018a2f0:	jump	0x18a250
000529:0x0018a2f8:	rts
array<InventoryLocation>::GetRandomIndex()
000544:0x0018a300:	ncalli	array<InventoryLocation>.Count()
000544:0x0018a308:	move	@m00, #return
000544:0x0018a318:	cmpi	@m00, _i0
000544:0x0018a328:	ble	0x18a360
000546:0x0018a330:	ncalli	array<InventoryLocation>.Count()
000546:0x0018a338:	icall	RandomInt(_i0, #return)
000546:0x0018a348:	move	#return, #return
000546:0x0018a358:	rts
000549:0x0018a360:	imove	#return, 0xffffffff
000549:0x0018a370:	rts
000549:0x0018a378:	rts
array<InventoryLocation>::GetRandomElement()
000563:0x0018a380:	call	
000563:0x0018a390:	icall	
000563:0x0018a3a0:	movetm	#return, #return
000563:0x0018a3b0:	rts
000563:0x0018a3b8:	rts
array<InventoryLocation>::SwapItems()
000568:0x0018a3e8:	icall	
000568:0x0018a3f8:	movetm	item1, #return
000569:0x0018a408:	icall	
000569:0x0018a418:	icall	
000570:0x0018a428:	movefm	@c00, item1
000570:0x0018a438:	icall	
000570:0x0018a448:	release	item1
000570:0x0018a450:	rts
array<InventoryLocation>::InsertArray()
000575:0x0018a4a8:	imove	i, 0x000000
000575:0x0018a4b8:	jump	0x18a4d8
000575:0x0018a4c0:	move	@m00, i
000575:0x0018a4d0:	inc	i
000575:0x0018a4d8:	ncalli	array<InventoryLocation>.Count()
000575:0x0018a4e0:	cmpi	i, #return
000575:0x0018a4f0:	bge	0x18a548
000577:0x0018a4f8:	icall	
000577:0x0018a508:	movetm	item, #return
000578:0x0018a518:	movefm	@c00, item
000578:0x0018a528:	icall	
000578:0x0018a538:	release	item
000578:0x0018a540:	jump	0x18a4c0
000578:0x0018a548:	rts
array<InventoryLocation>::Invert()
000584:0x0018a5c8:	imove	left, 0x000000
000585:0x0018a5d8:	ncalli	array<InventoryLocation>.Count()
000585:0x0018a5e0:	subi	right, #return, _i1
000586:0x0018a5f0:	cmpi	right, _i0
000586:0x0018a600:	ble	0x18a6c0
000588:0x0018a608:	cmpi	left, right
000588:0x0018a618:	bge	0x18a6c0
000590:0x0018a620:	icall	
000590:0x0018a630:	movetm	temp, #return
000591:0x0018a640:	move	@m00, left
000591:0x0018a650:	inc	left
000591:0x0018a658:	icall	
000591:0x0018a668:	icall	
000592:0x0018a678:	move	@m00, right
000592:0x0018a688:	dec	right
000592:0x0018a690:	movefm	@c00, temp
000592:0x0018a6a0:	icall	
000592:0x0018a6b0:	release	temp
000592:0x0018a6b8:	jump	0x18a608
000592:0x0018a6c0:	rts
array<InventoryLocation>::MoveIndex()
000612:0x0018a718:	ncalli	array<InventoryLocation>.Count()
000612:0x0018a720:	move	count, #return
000613:0x0018a730:	move	new_index, curr_index
000615:0x0018a740:	cmpi	move_number, _i0
000615:0x0018a750:	ble	0x18a778
000617:0x0018a758:	addi	@m00, curr_index, move_number
000617:0x0018a768:	move	new_index, @m00
000620:0x0018a778:	cmpi	move_number, _i0
000620:0x0018a788:	bge	0x18a830
000622:0x0018a790:	subi	@m00, curr_index, move_number
000622:0x0018a7a0:	move	new_index, @m00
000624:0x0018a7b0:	cmpi	new_index, _i0
000624:0x0018a7c0:	bge	0x18a830
000626:0x0018a7c8:	subi	@m01, _i0, count
000626:0x0018a7d8:	cmpi	new_index, @m01
000626:0x0018a7e8:	bgt	0x18a810
000628:0x0018a7f0:	modi	@m00, new_index, count
000628:0x0018a800:	move	new_index, @m00
000631:0x0018a810:	addi	@m00, new_index, count
000631:0x0018a820:	move	new_index, @m00
000635:0x0018a830:	cmpi	new_index, count
000635:0x0018a840:	blt	0x18a868
000637:0x0018a848:	modi	@m00, new_index, count
000637:0x0018a858:	move	new_index, @m00
000641:0x0018a868:	move	#return, new_index
000641:0x0018a878:	rts
000641:0x0018a880:	rts
array<InventoryLocation>::ShuffleArray()
000646:0x0018a8b0:	imove	i, 0x000000
000646:0x0018a8c0:	jump	0x18a8e0
000646:0x0018a8c8:	move	@m00, i
000646:0x0018a8d8:	inc	i
000646:0x0018a8e0:	ncalli	array<InventoryLocation>.Count()
000646:0x0018a8e8:	cmpi	i, #return
000646:0x0018a8f8:	bge	0x18a930
000648:0x0018a900:	call	
000648:0x0018a910:	call	
000648:0x0018a928:	jump	0x18a8c8
000648:0x0018a930:	rts
array<InventoryLocation>::DifferentAtPosition()
000666:0x0018a960:	ncalli	array<InventoryLocation>.Count()
000666:0x0018a968:	move	@m00, #return
000666:0x0018a978:	push	#return
000666:0x0018a980:	ncalli	array<InventoryLocation>.Count()
000666:0x0018a988:	move	@m02, #return
000666:0x0018a998:	pop	#return
000666:0x0018a9a0:	cmpi	@m00, @m02
000666:0x0018a9b0:	beq	0x18a9e0
000668:0x0018a9b8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0018a9c8:	imove	#return, 0xffffffff
000669:0x0018a9d8:	rts
000672:0x0018a9e0:	imove	i, 0x000000
000672:0x0018a9f0:	jump	0x18aa00
000672:0x0018a9f8:	inc	i
000672:0x0018aa00:	ncalli	array<InventoryLocation>.Count()
000672:0x0018aa08:	cmpi	i, #return
000672:0x0018aa18:	bge	0x18aaa8
000674:0x0018aa20:	icall	
000674:0x0018aa30:	movec	@c00, #return
000674:0x0018aa40:	pushc	#return
000674:0x0018aa48:	icall	
000674:0x0018aa58:	movec	@c02, #return
000674:0x0018aa68:	popc	#return
000674:0x0018aa70:	cmpc	@c00, @c02
000674:0x0018aa80:	beq	0x18aaa0
000676:0x0018aa88:	move	#return, i
000676:0x0018aa98:	rts
000676:0x0018aaa0:	jump	0x18a9f8
000680:0x0018aaa8:	imove	#return, 0xffffffff
000680:0x0018aab8:	rts
000680:0x0018aac0:	rts
array<@InventoryLocation>::InsertAll()
000427:0x0018aed8:	imove	i, 0x000000
000427:0x0018aee8:	jump	0x18af08
000427:0x0018aef0:	move	@m00, i
000427:0x0018af00:	inc	i
000427:0x0018af08:	ncalli	array<InventoryLocation>.Count()
000427:0x0018af10:	cmpi	i, #return
000427:0x0018af20:	bge	0x18af50
000429:0x0018af28:	icall	
000429:0x0018af38:	icall	
000429:0x0018af48:	jump	0x18aef0
000429:0x0018af50:	rts
array<@InventoryLocation>::RemoveItem()
000479:0x0018af80:	movefm	@c00, value
000479:0x0018af90:	icall	
000479:0x0018afa0:	move	remove_index, #return
000481:0x0018afb0:	cmpi	remove_index, _i0
000481:0x0018afc0:	blt	0x18afd8
000483:0x0018afc8:	ncalli	array<@InventoryLocation>.RemoveOrdered(remove_index)
000483:0x0018afd8:	rts
array<@InventoryLocation>::RemoveItemUnOrdered()
000489:0x0018b008:	movefm	@c00, value
000489:0x0018b018:	icall	
000489:0x0018b028:	move	remove_index, #return
000491:0x0018b038:	cmpi	remove_index, _i0
000491:0x0018b048:	blt	0x18b060
000493:0x0018b050:	ncalli	array<@InventoryLocation>.Remove(remove_index)
000493:0x0018b060:	rts
array<@InventoryLocation>::IsValidIndex()
000499:0x0018b068:	cmpi	index, _i-1
000499:0x0018b078:	ble	0x18b0b8
000499:0x0018b080:	ncalli	array<@InventoryLocation>.Count()
000499:0x0018b088:	cmpi	index, #return
000499:0x0018b098:	bge	0x18b0b8
000499:0x0018b0a0:	imove	#return, 0x000001
000499:0x0018b0b0:	jump	0x18b0c8
000499:0x0018b0b8:	imove	#return, 0x000000
000499:0x0018b0c8:	rts
000499:0x0018b0d0:	rts
array<@InventoryLocation>::Debug()
000525:0x0018b128:	ncalli	array<@InventoryLocation>.Count()
000525:0x0018b130:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0018b160:	icall	Print(#return)
000526:0x0018b170:	imove	i, 0x000000
000526:0x0018b180:	jump	0x18b1a0
000526:0x0018b188:	move	@m00, i
000526:0x0018b198:	inc	i
000526:0x0018b1a0:	ncalli	array<@InventoryLocation>.Count()
000526:0x0018b1a8:	cmpi	i, #return
000526:0x0018b1b8:	bge	0x18b230
000528:0x0018b1c0:	icall	
000528:0x0018b1d0:	movetm	item, #return
000529:0x0018b1e0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0018b210:	icall	Print(#return)
000529:0x0018b220:	release	item
000529:0x0018b228:	jump	0x18b188
000529:0x0018b230:	rts
array<@InventoryLocation>::GetRandomIndex()
000544:0x0018b238:	ncalli	array<@InventoryLocation>.Count()
000544:0x0018b240:	move	@m00, #return
000544:0x0018b250:	cmpi	@m00, _i0
000544:0x0018b260:	ble	0x18b298
000546:0x0018b268:	ncalli	array<@InventoryLocation>.Count()
000546:0x0018b270:	icall	RandomInt(_i0, #return)
000546:0x0018b280:	move	#return, #return
000546:0x0018b290:	rts
000549:0x0018b298:	imove	#return, 0xffffffff
000549:0x0018b2a8:	rts
000549:0x0018b2b0:	rts
array<@InventoryLocation>::GetRandomElement()
000563:0x0018b2b8:	call	
000563:0x0018b2c8:	icall	
000563:0x0018b2d8:	movetm	#return, #return
000563:0x0018b2e8:	rts
000563:0x0018b2f0:	rts
array<@InventoryLocation>::SwapItems()
000568:0x0018b320:	icall	
000568:0x0018b330:	movetm	item1, #return
000569:0x0018b340:	icall	
000569:0x0018b350:	icall	
000570:0x0018b360:	movefm	@c00, item1
000570:0x0018b370:	icall	
000570:0x0018b380:	release	item1
000570:0x0018b388:	rts
array<@InventoryLocation>::InsertArray()
000575:0x0018b3e0:	imove	i, 0x000000
000575:0x0018b3f0:	jump	0x18b410
000575:0x0018b3f8:	move	@m00, i
000575:0x0018b408:	inc	i
000575:0x0018b410:	ncalli	array<InventoryLocation>.Count()
000575:0x0018b418:	cmpi	i, #return
000575:0x0018b428:	bge	0x18b480
000577:0x0018b430:	icall	
000577:0x0018b440:	movetm	item, #return
000578:0x0018b450:	movefm	@c00, item
000578:0x0018b460:	icall	
000578:0x0018b470:	release	item
000578:0x0018b478:	jump	0x18b3f8
000578:0x0018b480:	rts
array<@InventoryLocation>::Invert()
000584:0x0018b500:	imove	left, 0x000000
000585:0x0018b510:	ncalli	array<@InventoryLocation>.Count()
000585:0x0018b518:	subi	right, #return, _i1
000586:0x0018b528:	cmpi	right, _i0
000586:0x0018b538:	ble	0x18b5f8
000588:0x0018b540:	cmpi	left, right
000588:0x0018b550:	bge	0x18b5f8
000590:0x0018b558:	icall	
000590:0x0018b568:	movetm	temp, #return
000591:0x0018b578:	move	@m00, left
000591:0x0018b588:	inc	left
000591:0x0018b590:	icall	
000591:0x0018b5a0:	icall	
000592:0x0018b5b0:	move	@m00, right
000592:0x0018b5c0:	dec	right
000592:0x0018b5c8:	movefm	@c00, temp
000592:0x0018b5d8:	icall	
000592:0x0018b5e8:	release	temp
000592:0x0018b5f0:	jump	0x18b540
000592:0x0018b5f8:	rts
array<@InventoryLocation>::MoveIndex()
000612:0x0018b650:	ncalli	array<@InventoryLocation>.Count()
000612:0x0018b658:	move	count, #return
000613:0x0018b668:	move	new_index, curr_index
000615:0x0018b678:	cmpi	move_number, _i0
000615:0x0018b688:	ble	0x18b6b0
000617:0x0018b690:	addi	@m00, curr_index, move_number
000617:0x0018b6a0:	move	new_index, @m00
000620:0x0018b6b0:	cmpi	move_number, _i0
000620:0x0018b6c0:	bge	0x18b768
000622:0x0018b6c8:	subi	@m00, curr_index, move_number
000622:0x0018b6d8:	move	new_index, @m00
000624:0x0018b6e8:	cmpi	new_index, _i0
000624:0x0018b6f8:	bge	0x18b768
000626:0x0018b700:	subi	@m01, _i0, count
000626:0x0018b710:	cmpi	new_index, @m01
000626:0x0018b720:	bgt	0x18b748
000628:0x0018b728:	modi	@m00, new_index, count
000628:0x0018b738:	move	new_index, @m00
000631:0x0018b748:	addi	@m00, new_index, count
000631:0x0018b758:	move	new_index, @m00
000635:0x0018b768:	cmpi	new_index, count
000635:0x0018b778:	blt	0x18b7a0
000637:0x0018b780:	modi	@m00, new_index, count
000637:0x0018b790:	move	new_index, @m00
000641:0x0018b7a0:	move	#return, new_index
000641:0x0018b7b0:	rts
000641:0x0018b7b8:	rts
array<@InventoryLocation>::ShuffleArray()
000646:0x0018b7e8:	imove	i, 0x000000
000646:0x0018b7f8:	jump	0x18b818
000646:0x0018b800:	move	@m00, i
000646:0x0018b810:	inc	i
000646:0x0018b818:	ncalli	array<@InventoryLocation>.Count()
000646:0x0018b820:	cmpi	i, #return
000646:0x0018b830:	bge	0x18b868
000648:0x0018b838:	call	
000648:0x0018b848:	call	
000648:0x0018b860:	jump	0x18b800
000648:0x0018b868:	rts
array<@InventoryLocation>::DifferentAtPosition()
000666:0x0018b898:	ncalli	array<@InventoryLocation>.Count()
000666:0x0018b8a0:	move	@m00, #return
000666:0x0018b8b0:	ncalli	array<InventoryLocation>.Count()
000666:0x0018b8b8:	cmpi	@m00, #return
000666:0x0018b8c8:	beq	0x18b8f8
000668:0x0018b8d0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0018b8e0:	imove	#return, 0xffffffff
000669:0x0018b8f0:	rts
000672:0x0018b8f8:	imove	i, 0x000000
000672:0x0018b908:	jump	0x18b918
000672:0x0018b910:	inc	i
000672:0x0018b918:	ncalli	array<InventoryLocation>.Count()
000672:0x0018b920:	cmpi	i, #return
000672:0x0018b930:	bge	0x18b9a0
000674:0x0018b938:	icall	
000674:0x0018b948:	movec	@c00, #return
000674:0x0018b958:	icall	
000674:0x0018b968:	cmpc	@c00, #return
000674:0x0018b978:	beq	0x18b998
000676:0x0018b980:	move	#return, i
000676:0x0018b990:	rts
000676:0x0018b998:	jump	0x18b910
000680:0x0018b9a0:	imove	#return, 0xffffffff
000680:0x0018b9b0:	rts
000680:0x0018b9b8:	rts
array<Widget>::InsertAll()
000427:0x0018c350:	imove	i, 0x000000
000427:0x0018c360:	jump	0x18c380
000427:0x0018c368:	move	@m00, i
000427:0x0018c378:	inc	i
000427:0x0018c380:	ncalli	array<Widget>.Count()
000427:0x0018c388:	cmpi	i, #return
000427:0x0018c398:	bge	0x18c3c8
000429:0x0018c3a0:	icall	
000429:0x0018c3b0:	icall	
000429:0x0018c3c0:	jump	0x18c368
000429:0x0018c3c8:	rts
array<Widget>::RemoveItem()
000479:0x0018c3f8:	movefm	@c00, value
000479:0x0018c408:	icall	
000479:0x0018c418:	move	remove_index, #return
000481:0x0018c428:	cmpi	remove_index, _i0
000481:0x0018c438:	blt	0x18c450
000483:0x0018c440:	ncalli	array<Widget>.RemoveOrdered(remove_index)
000483:0x0018c450:	rts
array<Widget>::RemoveItemUnOrdered()
000489:0x0018c480:	movefm	@c00, value
000489:0x0018c490:	icall	
000489:0x0018c4a0:	move	remove_index, #return
000491:0x0018c4b0:	cmpi	remove_index, _i0
000491:0x0018c4c0:	blt	0x18c4d8
000493:0x0018c4c8:	ncalli	array<Widget>.Remove(remove_index)
000493:0x0018c4d8:	rts
array<Widget>::IsValidIndex()
000499:0x0018c4e0:	cmpi	index, _i-1
000499:0x0018c4f0:	ble	0x18c530
000499:0x0018c4f8:	ncalli	array<Widget>.Count()
000499:0x0018c500:	cmpi	index, #return
000499:0x0018c510:	bge	0x18c530
000499:0x0018c518:	imove	#return, 0x000001
000499:0x0018c528:	jump	0x18c540
000499:0x0018c530:	imove	#return, 0x000000
000499:0x0018c540:	rts
000499:0x0018c548:	rts
array<Widget>::Debug()
000525:0x0018c5a0:	ncalli	array<Widget>.Count()
000525:0x0018c5a8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0018c5d8:	icall	Print(#return)
000526:0x0018c5e8:	imove	i, 0x000000
000526:0x0018c5f8:	jump	0x18c618
000526:0x0018c600:	move	@m00, i
000526:0x0018c610:	inc	i
000526:0x0018c618:	ncalli	array<Widget>.Count()
000526:0x0018c620:	cmpi	i, #return
000526:0x0018c630:	bge	0x18c6a8
000528:0x0018c638:	icall	
000528:0x0018c648:	movetm	item, #return
000529:0x0018c658:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0018c688:	icall	Print(#return)
000529:0x0018c698:	release	item
000529:0x0018c6a0:	jump	0x18c600
000529:0x0018c6a8:	rts
array<Widget>::GetRandomIndex()
000544:0x0018c6b0:	ncalli	array<Widget>.Count()
000544:0x0018c6b8:	move	@m00, #return
000544:0x0018c6c8:	cmpi	@m00, _i0
000544:0x0018c6d8:	ble	0x18c710
000546:0x0018c6e0:	ncalli	array<Widget>.Count()
000546:0x0018c6e8:	icall	RandomInt(_i0, #return)
000546:0x0018c6f8:	move	#return, #return
000546:0x0018c708:	rts
000549:0x0018c710:	imove	#return, 0xffffffff
000549:0x0018c720:	rts
000549:0x0018c728:	rts
array<Widget>::GetRandomElement()
000563:0x0018c730:	call	
000563:0x0018c740:	icall	
000563:0x0018c750:	movetm	#return, #return
000563:0x0018c760:	rts
000563:0x0018c768:	rts
array<Widget>::SwapItems()
000568:0x0018c798:	icall	
000568:0x0018c7a8:	movetm	item1, #return
000569:0x0018c7b8:	icall	
000569:0x0018c7c8:	icall	
000570:0x0018c7d8:	movefm	@c00, item1
000570:0x0018c7e8:	icall	
000570:0x0018c7f8:	release	item1
000570:0x0018c800:	rts
array<Widget>::InsertArray()
000575:0x0018c858:	imove	i, 0x000000
000575:0x0018c868:	jump	0x18c888
000575:0x0018c870:	move	@m00, i
000575:0x0018c880:	inc	i
000575:0x0018c888:	ncalli	array<Widget>.Count()
000575:0x0018c890:	cmpi	i, #return
000575:0x0018c8a0:	bge	0x18c8f8
000577:0x0018c8a8:	icall	
000577:0x0018c8b8:	movetm	item, #return
000578:0x0018c8c8:	movefm	@c00, item
000578:0x0018c8d8:	icall	
000578:0x0018c8e8:	release	item
000578:0x0018c8f0:	jump	0x18c870
000578:0x0018c8f8:	rts
array<Widget>::Invert()
000584:0x0018c978:	imove	left, 0x000000
000585:0x0018c988:	ncalli	array<Widget>.Count()
000585:0x0018c990:	subi	right, #return, _i1
000586:0x0018c9a0:	cmpi	right, _i0
000586:0x0018c9b0:	ble	0x18ca70
000588:0x0018c9b8:	cmpi	left, right
000588:0x0018c9c8:	bge	0x18ca70
000590:0x0018c9d0:	icall	
000590:0x0018c9e0:	movetm	temp, #return
000591:0x0018c9f0:	move	@m00, left
000591:0x0018ca00:	inc	left
000591:0x0018ca08:	icall	
000591:0x0018ca18:	icall	
000592:0x0018ca28:	move	@m00, right
000592:0x0018ca38:	dec	right
000592:0x0018ca40:	movefm	@c00, temp
000592:0x0018ca50:	icall	
000592:0x0018ca60:	release	temp
000592:0x0018ca68:	jump	0x18c9b8
000592:0x0018ca70:	rts
array<Widget>::MoveIndex()
000612:0x0018cac8:	ncalli	array<Widget>.Count()
000612:0x0018cad0:	move	count, #return
000613:0x0018cae0:	move	new_index, curr_index
000615:0x0018caf0:	cmpi	move_number, _i0
000615:0x0018cb00:	ble	0x18cb28
000617:0x0018cb08:	addi	@m00, curr_index, move_number
000617:0x0018cb18:	move	new_index, @m00
000620:0x0018cb28:	cmpi	move_number, _i0
000620:0x0018cb38:	bge	0x18cbe0
000622:0x0018cb40:	subi	@m00, curr_index, move_number
000622:0x0018cb50:	move	new_index, @m00
000624:0x0018cb60:	cmpi	new_index, _i0
000624:0x0018cb70:	bge	0x18cbe0
000626:0x0018cb78:	subi	@m01, _i0, count
000626:0x0018cb88:	cmpi	new_index, @m01
000626:0x0018cb98:	bgt	0x18cbc0
000628:0x0018cba0:	modi	@m00, new_index, count
000628:0x0018cbb0:	move	new_index, @m00
000631:0x0018cbc0:	addi	@m00, new_index, count
000631:0x0018cbd0:	move	new_index, @m00
000635:0x0018cbe0:	cmpi	new_index, count
000635:0x0018cbf0:	blt	0x18cc18
000637:0x0018cbf8:	modi	@m00, new_index, count
000637:0x0018cc08:	move	new_index, @m00
000641:0x0018cc18:	move	#return, new_index
000641:0x0018cc28:	rts
000641:0x0018cc30:	rts
array<Widget>::ShuffleArray()
000646:0x0018cc60:	imove	i, 0x000000
000646:0x0018cc70:	jump	0x18cc90
000646:0x0018cc78:	move	@m00, i
000646:0x0018cc88:	inc	i
000646:0x0018cc90:	ncalli	array<Widget>.Count()
000646:0x0018cc98:	cmpi	i, #return
000646:0x0018cca8:	bge	0x18cce0
000648:0x0018ccb0:	call	
000648:0x0018ccc0:	call	
000648:0x0018ccd8:	jump	0x18cc78
000648:0x0018cce0:	rts
array<Widget>::DifferentAtPosition()
000666:0x0018cd10:	ncalli	array<Widget>.Count()
000666:0x0018cd18:	move	@m00, #return
000666:0x0018cd28:	push	#return
000666:0x0018cd30:	ncalli	array<Widget>.Count()
000666:0x0018cd38:	move	@m02, #return
000666:0x0018cd48:	pop	#return
000666:0x0018cd50:	cmpi	@m00, @m02
000666:0x0018cd60:	beq	0x18cd90
000668:0x0018cd68:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0018cd78:	imove	#return, 0xffffffff
000669:0x0018cd88:	rts
000672:0x0018cd90:	imove	i, 0x000000
000672:0x0018cda0:	jump	0x18cdb0
000672:0x0018cda8:	inc	i
000672:0x0018cdb0:	ncalli	array<Widget>.Count()
000672:0x0018cdb8:	cmpi	i, #return
000672:0x0018cdc8:	bge	0x18ce58
000674:0x0018cdd0:	icall	
000674:0x0018cde0:	movec	@c00, #return
000674:0x0018cdf0:	pushc	#return
000674:0x0018cdf8:	icall	
000674:0x0018ce08:	movec	@c02, #return
000674:0x0018ce18:	popc	#return
000674:0x0018ce20:	cmpc	@c00, @c02
000674:0x0018ce30:	beq	0x18ce50
000676:0x0018ce38:	move	#return, i
000676:0x0018ce48:	rts
000676:0x0018ce50:	jump	0x18cda8
000680:0x0018ce58:	imove	#return, 0xffffffff
000680:0x0018ce68:	rts
000680:0x0018ce70:	rts
map<Widget,float>::GetKeyArray()
000885:0x0018d198:	new	keys, array<Widget>
000886:0x0018d1b8:	imove	i, 0x000000
000886:0x0018d1c8:	jump	0x18d1e8
000886:0x0018d1d0:	move	@m00, i
000886:0x0018d1e0:	inc	i
000886:0x0018d1e8:	ncalli	map<Widget,float>.Count()
000886:0x0018d1f0:	cmpi	i, #return
000886:0x0018d200:	bge	0x18d230
000888:0x0018d208:	icall	
000888:0x0018d218:	icall	
000888:0x0018d228:	jump	0x18d1d0
000890:0x0018d230:	movem	#return, keys
000890:0x0018d240:	release	keys
000890:0x0018d248:	rts
000890:0x0018d250:	release	keys
000890:0x0018d258:	rts
map<Widget,float>::GetValueArray()
000895:0x0018d2b0:	new	elements, array<float>
000896:0x0018d2d0:	imove	i, 0x000000
000896:0x0018d2e0:	jump	0x18d300
000896:0x0018d2e8:	move	@m00, i
000896:0x0018d2f8:	inc	i
000896:0x0018d300:	ncalli	map<Widget,float>.Count()
000896:0x0018d308:	cmpi	i, #return
000896:0x0018d318:	bge	0x18d348
000898:0x0018d320:	icall	
000898:0x0018d330:	icall	
000898:0x0018d340:	jump	0x18d2e8
000900:0x0018d348:	movem	#return, elements
000900:0x0018d358:	release	elements
000900:0x0018d360:	rts
000900:0x0018d368:	release	elements
000900:0x0018d370:	rts
map<Widget,float>::ReplaceKey()
000905:0x0018d378:	movefm	@c00, old_key
000905:0x0018d388:	icall	
000905:0x0018d398:	cmpi	#return, _i0
000905:0x0018d3a8:	beq	0x18d428
000907:0x0018d3b0:	movefm	@c00, new_key
000907:0x0018d3c0:	movefm	@c01, old_key
000907:0x0018d3d0:	icall	
000907:0x0018d3e0:	icall	
000908:0x0018d3f0:	movefm	@c00, old_key
000908:0x0018d400:	icall	
000909:0x0018d410:	imove	#return, 0x000001
000909:0x0018d420:	rts
000911:0x0018d428:	imove	#return, 0x000000
000911:0x0018d438:	rts
000911:0x0018d440:	rts
map<Widget,float>::GetKeyByValue()
000917:0x0018d498:	imove	i, 0x000000
000917:0x0018d4a8:	jump	0x18d4c8
000917:0x0018d4b0:	move	@m00, i
000917:0x0018d4c0:	inc	i
000917:0x0018d4c8:	ncalli	map<Widget,float>.Count()
000917:0x0018d4d0:	cmpi	i, #return
000917:0x0018d4e0:	bge	0x18d550
000919:0x0018d4e8:	icall	
000919:0x0018d4f8:	move	@f00, #return
000919:0x0018d508:	cmpf	@f00, value
000919:0x0018d518:	bne	0x18d548
000921:0x0018d520:	icall	
000921:0x0018d530:	movetm	ret, #return
000922:0x0018d540:	jump	0x18d550
000922:0x0018d548:	jump	0x18d4b0
000926:0x0018d550:	movem	#return, ret
000926:0x0018d560:	release	ret
000926:0x0018d568:	rts
000926:0x0018d570:	release	ret
000926:0x0018d578:	rts
map<Widget,float>::GetKeyByValueChecked()
000931:0x0018d5a8:	imove	i, 0x000000
000931:0x0018d5b8:	jump	0x18d5d8
000931:0x0018d5c0:	move	@m00, i
000931:0x0018d5d0:	inc	i
000931:0x0018d5d8:	ncalli	map<Widget,float>.Count()
000931:0x0018d5e0:	cmpi	i, #return
000931:0x0018d5f0:	bge	0x18d680
000933:0x0018d5f8:	icall	
000933:0x0018d608:	move	@f00, #return
000933:0x0018d618:	cmpf	@f00, value
000933:0x0018d628:	bne	0x18d678
000935:0x0018d630:	icall	
000935:0x0018d640:	movetm	key, #return
000936:0x0018d650:	imove	#return, 0x000001
000936:0x0018d660:	movem	key, key
000936:0x0018d670:	rts
000936:0x0018d678:	jump	0x18d5c0
000939:0x0018d680:	imove	#return, 0x000000
000939:0x0018d690:	movem	key, key
000939:0x0018d6a0:	rts
000939:0x0018d6a8:	movem	key, key
000939:0x0018d6b8:	rts
array<array<float>>::InsertAll()
000427:0x0018e400:	imove	i, 0x000000
000427:0x0018e410:	jump	0x18e430
000427:0x0018e418:	move	@m00, i
000427:0x0018e428:	inc	i
000427:0x0018e430:	ncalli	array<array<float>>.Count()
000427:0x0018e438:	cmpi	i, #return
000427:0x0018e448:	bge	0x18e478
000429:0x0018e450:	icall	
000429:0x0018e460:	icall	
000429:0x0018e470:	jump	0x18e418
000429:0x0018e478:	rts
array<array<float>>::RemoveItem()
000479:0x0018e4a8:	movefm	@c00, value
000479:0x0018e4b8:	icall	
000479:0x0018e4c8:	move	remove_index, #return
000481:0x0018e4d8:	cmpi	remove_index, _i0
000481:0x0018e4e8:	blt	0x18e500
000483:0x0018e4f0:	ncalli	array<array<float>>.RemoveOrdered(remove_index)
000483:0x0018e500:	rts
array<array<float>>::RemoveItemUnOrdered()
000489:0x0018e530:	movefm	@c00, value
000489:0x0018e540:	icall	
000489:0x0018e550:	move	remove_index, #return
000491:0x0018e560:	cmpi	remove_index, _i0
000491:0x0018e570:	blt	0x18e588
000493:0x0018e578:	ncalli	array<array<float>>.Remove(remove_index)
000493:0x0018e588:	rts
array<array<float>>::IsValidIndex()
000499:0x0018e590:	cmpi	index, _i-1
000499:0x0018e5a0:	ble	0x18e5e0
000499:0x0018e5a8:	ncalli	array<array<float>>.Count()
000499:0x0018e5b0:	cmpi	index, #return
000499:0x0018e5c0:	bge	0x18e5e0
000499:0x0018e5c8:	imove	#return, 0x000001
000499:0x0018e5d8:	jump	0x18e5f0
000499:0x0018e5e0:	imove	#return, 0x000000
000499:0x0018e5f0:	rts
000499:0x0018e5f8:	rts
array<array<float>>::Debug()
000525:0x0018e650:	ncalli	array<array<float>>.Count()
000525:0x0018e658:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0018e688:	icall	Print(#return)
000526:0x0018e698:	imove	i, 0x000000
000526:0x0018e6a8:	jump	0x18e6c8
000526:0x0018e6b0:	move	@m00, i
000526:0x0018e6c0:	inc	i
000526:0x0018e6c8:	ncalli	array<array<float>>.Count()
000526:0x0018e6d0:	cmpi	i, #return
000526:0x0018e6e0:	bge	0x18e758
000528:0x0018e6e8:	icall	
000528:0x0018e6f8:	movetm	item, #return
000529:0x0018e708:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0018e738:	icall	Print(#return)
000529:0x0018e748:	release	item
000529:0x0018e750:	jump	0x18e6b0
000529:0x0018e758:	rts
array<array<float>>::GetRandomIndex()
000544:0x0018e760:	ncalli	array<array<float>>.Count()
000544:0x0018e768:	move	@m00, #return
000544:0x0018e778:	cmpi	@m00, _i0
000544:0x0018e788:	ble	0x18e7c0
000546:0x0018e790:	ncalli	array<array<float>>.Count()
000546:0x0018e798:	icall	RandomInt(_i0, #return)
000546:0x0018e7a8:	move	#return, #return
000546:0x0018e7b8:	rts
000549:0x0018e7c0:	imove	#return, 0xffffffff
000549:0x0018e7d0:	rts
000549:0x0018e7d8:	rts
array<array<float>>::GetRandomElement()
000563:0x0018e7e0:	call	
000563:0x0018e7f0:	icall	
000563:0x0018e800:	movetm	#return, #return
000563:0x0018e810:	rts
000563:0x0018e818:	rts
array<array<float>>::SwapItems()
000568:0x0018e848:	icall	
000568:0x0018e858:	movetm	item1, #return
000569:0x0018e868:	icall	
000569:0x0018e878:	icall	
000570:0x0018e888:	movefm	@c00, item1
000570:0x0018e898:	icall	
000570:0x0018e8a8:	release	item1
000570:0x0018e8b0:	rts
array<array<float>>::InsertArray()
000575:0x0018e908:	imove	i, 0x000000
000575:0x0018e918:	jump	0x18e938
000575:0x0018e920:	move	@m00, i
000575:0x0018e930:	inc	i
000575:0x0018e938:	ncalli	array<array<float>>.Count()
000575:0x0018e940:	cmpi	i, #return
000575:0x0018e950:	bge	0x18e9a8
000577:0x0018e958:	icall	
000577:0x0018e968:	movetm	item, #return
000578:0x0018e978:	movefm	@c00, item
000578:0x0018e988:	icall	
000578:0x0018e998:	release	item
000578:0x0018e9a0:	jump	0x18e920
000578:0x0018e9a8:	rts
array<array<float>>::Invert()
000584:0x0018ea28:	imove	left, 0x000000
000585:0x0018ea38:	ncalli	array<array<float>>.Count()
000585:0x0018ea40:	subi	right, #return, _i1
000586:0x0018ea50:	cmpi	right, _i0
000586:0x0018ea60:	ble	0x18eb20
000588:0x0018ea68:	cmpi	left, right
000588:0x0018ea78:	bge	0x18eb20
000590:0x0018ea80:	icall	
000590:0x0018ea90:	movetm	temp, #return
000591:0x0018eaa0:	move	@m00, left
000591:0x0018eab0:	inc	left
000591:0x0018eab8:	icall	
000591:0x0018eac8:	icall	
000592:0x0018ead8:	move	@m00, right
000592:0x0018eae8:	dec	right
000592:0x0018eaf0:	movefm	@c00, temp
000592:0x0018eb00:	icall	
000592:0x0018eb10:	release	temp
000592:0x0018eb18:	jump	0x18ea68
000592:0x0018eb20:	rts
array<array<float>>::MoveIndex()
000612:0x0018eb78:	ncalli	array<array<float>>.Count()
000612:0x0018eb80:	move	count, #return
000613:0x0018eb90:	move	new_index, curr_index
000615:0x0018eba0:	cmpi	move_number, _i0
000615:0x0018ebb0:	ble	0x18ebd8
000617:0x0018ebb8:	addi	@m00, curr_index, move_number
000617:0x0018ebc8:	move	new_index, @m00
000620:0x0018ebd8:	cmpi	move_number, _i0
000620:0x0018ebe8:	bge	0x18ec90
000622:0x0018ebf0:	subi	@m00, curr_index, move_number
000622:0x0018ec00:	move	new_index, @m00
000624:0x0018ec10:	cmpi	new_index, _i0
000624:0x0018ec20:	bge	0x18ec90
000626:0x0018ec28:	subi	@m01, _i0, count
000626:0x0018ec38:	cmpi	new_index, @m01
000626:0x0018ec48:	bgt	0x18ec70
000628:0x0018ec50:	modi	@m00, new_index, count
000628:0x0018ec60:	move	new_index, @m00
000631:0x0018ec70:	addi	@m00, new_index, count
000631:0x0018ec80:	move	new_index, @m00
000635:0x0018ec90:	cmpi	new_index, count
000635:0x0018eca0:	blt	0x18ecc8
000637:0x0018eca8:	modi	@m00, new_index, count
000637:0x0018ecb8:	move	new_index, @m00
000641:0x0018ecc8:	move	#return, new_index
000641:0x0018ecd8:	rts
000641:0x0018ece0:	rts
array<array<float>>::ShuffleArray()
000646:0x0018ed10:	imove	i, 0x000000
000646:0x0018ed20:	jump	0x18ed40
000646:0x0018ed28:	move	@m00, i
000646:0x0018ed38:	inc	i
000646:0x0018ed40:	ncalli	array<array<float>>.Count()
000646:0x0018ed48:	cmpi	i, #return
000646:0x0018ed58:	bge	0x18ed90
000648:0x0018ed60:	call	
000648:0x0018ed70:	call	
000648:0x0018ed88:	jump	0x18ed28
000648:0x0018ed90:	rts
array<array<float>>::DifferentAtPosition()
000666:0x0018edc0:	ncalli	array<array<float>>.Count()
000666:0x0018edc8:	move	@m00, #return
000666:0x0018edd8:	push	#return
000666:0x0018ede0:	ncalli	array<array<float>>.Count()
000666:0x0018ede8:	move	@m02, #return
000666:0x0018edf8:	pop	#return
000666:0x0018ee00:	cmpi	@m00, @m02
000666:0x0018ee10:	beq	0x18ee40
000668:0x0018ee18:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0018ee28:	imove	#return, 0xffffffff
000669:0x0018ee38:	rts
000672:0x0018ee40:	imove	i, 0x000000
000672:0x0018ee50:	jump	0x18ee60
000672:0x0018ee58:	inc	i
000672:0x0018ee60:	ncalli	array<array<float>>.Count()
000672:0x0018ee68:	cmpi	i, #return
000672:0x0018ee78:	bge	0x18ef08
000674:0x0018ee80:	icall	
000674:0x0018ee90:	movec	@c00, #return
000674:0x0018eea0:	pushc	#return
000674:0x0018eea8:	icall	
000674:0x0018eeb8:	movec	@c02, #return
000674:0x0018eec8:	popc	#return
000674:0x0018eed0:	cmpc	@c00, @c02
000674:0x0018eee0:	beq	0x18ef00
000676:0x0018eee8:	move	#return, i
000676:0x0018eef8:	rts
000676:0x0018ef00:	jump	0x18ee58
000680:0x0018ef08:	imove	#return, 0xffffffff
000680:0x0018ef18:	rts
000680:0x0018ef20:	rts
map<int,array<float>>::GetKeyArray()
000885:0x0018f220:	new	keys, array<int>
000886:0x0018f240:	imove	i, 0x000000
000886:0x0018f250:	jump	0x18f270
000886:0x0018f258:	move	@m00, i
000886:0x0018f268:	inc	i
000886:0x0018f270:	ncalli	map<int,array<float>>.Count()
000886:0x0018f278:	cmpi	i, #return
000886:0x0018f288:	bge	0x18f2b8
000888:0x0018f290:	icall	
000888:0x0018f2a0:	icall	
000888:0x0018f2b0:	jump	0x18f258
000890:0x0018f2b8:	movem	#return, keys
000890:0x0018f2c8:	release	keys
000890:0x0018f2d0:	rts
000890:0x0018f2d8:	release	keys
000890:0x0018f2e0:	rts
map<int,array<float>>::GetValueArray()
000895:0x0018f338:	new	elements, array<array<float>>
000896:0x0018f358:	imove	i, 0x000000
000896:0x0018f368:	jump	0x18f388
000896:0x0018f370:	move	@m00, i
000896:0x0018f380:	inc	i
000896:0x0018f388:	ncalli	map<int,array<float>>.Count()
000896:0x0018f390:	cmpi	i, #return
000896:0x0018f3a0:	bge	0x18f3d0
000898:0x0018f3a8:	icall	
000898:0x0018f3b8:	icall	
000898:0x0018f3c8:	jump	0x18f370
000900:0x0018f3d0:	movem	#return, elements
000900:0x0018f3e0:	release	elements
000900:0x0018f3e8:	rts
000900:0x0018f3f0:	release	elements
000900:0x0018f3f8:	rts
map<int,array<float>>::ReplaceKey()
000905:0x0018f400:	icall	
000905:0x0018f410:	cmpi	#return, _i0
000905:0x0018f420:	beq	0x18f470
000907:0x0018f428:	icall	
000907:0x0018f438:	icall	
000908:0x0018f448:	icall	
000909:0x0018f458:	imove	#return, 0x000001
000909:0x0018f468:	rts
000911:0x0018f470:	imove	#return, 0x000000
000911:0x0018f480:	rts
000911:0x0018f488:	rts
map<int,array<float>>::GetKeyByValue()
000917:0x0018f4e0:	imove	i, 0x000000
000917:0x0018f4f0:	jump	0x18f510
000917:0x0018f4f8:	move	@m00, i
000917:0x0018f508:	inc	i
000917:0x0018f510:	ncalli	map<int,array<float>>.Count()
000917:0x0018f518:	cmpi	i, #return
000917:0x0018f528:	bge	0x18f598
000919:0x0018f530:	icall	
000919:0x0018f540:	movec	@c00, #return
000919:0x0018f550:	cmpmc	@c00, value
000919:0x0018f560:	bne	0x18f590
000921:0x0018f568:	icall	
000921:0x0018f578:	move	ret, #return
000922:0x0018f588:	jump	0x18f598
000922:0x0018f590:	jump	0x18f4f8
000926:0x0018f598:	move	#return, ret
000926:0x0018f5a8:	rts
000926:0x0018f5b0:	rts
map<int,array<float>>::GetKeyByValueChecked()
000931:0x0018f5e0:	imove	i, 0x000000
000931:0x0018f5f0:	jump	0x18f610
000931:0x0018f5f8:	move	@m00, i
000931:0x0018f608:	inc	i
000931:0x0018f610:	ncalli	map<int,array<float>>.Count()
000931:0x0018f618:	cmpi	i, #return
000931:0x0018f628:	bge	0x18f6b8
000933:0x0018f630:	icall	
000933:0x0018f640:	movec	@c00, #return
000933:0x0018f650:	cmpmc	@c00, value
000933:0x0018f660:	bne	0x18f6b0
000935:0x0018f668:	icall	
000935:0x0018f678:	move	key, #return
000936:0x0018f688:	imove	#return, 0x000001
000936:0x0018f698:	move	key, key
000936:0x0018f6a8:	rts
000936:0x0018f6b0:	jump	0x18f5f8
000939:0x0018f6b8:	imove	#return, 0x000000
000939:0x0018f6c8:	move	key, key
000939:0x0018f6d8:	rts
000939:0x0018f6e0:	move	key, key
000939:0x0018f6f0:	rts
map<int,@array<float>>::GetKeyArray()
000885:0x0018fa40:	new	keys, array<int>
000886:0x0018fa60:	imove	i, 0x000000
000886:0x0018fa70:	jump	0x18fa90
000886:0x0018fa78:	move	@m00, i
000886:0x0018fa88:	inc	i
000886:0x0018fa90:	ncalli	map<int,@array<float>>.Count()
000886:0x0018fa98:	cmpi	i, #return
000886:0x0018faa8:	bge	0x18fad8
000888:0x0018fab0:	icall	
000888:0x0018fac0:	icall	
000888:0x0018fad0:	jump	0x18fa78
000890:0x0018fad8:	movem	#return, keys
000890:0x0018fae8:	release	keys
000890:0x0018faf0:	rts
000890:0x0018faf8:	release	keys
000890:0x0018fb00:	rts
map<int,@array<float>>::GetValueArray()
000895:0x0018fb58:	new	elements, array<array<float>>
000896:0x0018fb78:	imove	i, 0x000000
000896:0x0018fb88:	jump	0x18fba8
000896:0x0018fb90:	move	@m00, i
000896:0x0018fba0:	inc	i
000896:0x0018fba8:	ncalli	map<int,@array<float>>.Count()
000896:0x0018fbb0:	cmpi	i, #return
000896:0x0018fbc0:	bge	0x18fbf0
000898:0x0018fbc8:	icall	
000898:0x0018fbd8:	icall	
000898:0x0018fbe8:	jump	0x18fb90
000900:0x0018fbf0:	movem	#return, elements
000900:0x0018fc00:	release	elements
000900:0x0018fc08:	rts
000900:0x0018fc10:	release	elements
000900:0x0018fc18:	rts
map<int,@array<float>>::ReplaceKey()
000905:0x0018fc20:	icall	
000905:0x0018fc30:	cmpi	#return, _i0
000905:0x0018fc40:	beq	0x18fc90
000907:0x0018fc48:	icall	
000907:0x0018fc58:	icall	
000908:0x0018fc68:	icall	
000909:0x0018fc78:	imove	#return, 0x000001
000909:0x0018fc88:	rts
000911:0x0018fc90:	imove	#return, 0x000000
000911:0x0018fca0:	rts
000911:0x0018fca8:	rts
map<int,@array<float>>::GetKeyByValue()
000917:0x0018fd00:	imove	i, 0x000000
000917:0x0018fd10:	jump	0x18fd30
000917:0x0018fd18:	move	@m00, i
000917:0x0018fd28:	inc	i
000917:0x0018fd30:	ncalli	map<int,@array<float>>.Count()
000917:0x0018fd38:	cmpi	i, #return
000917:0x0018fd48:	bge	0x18fdb8
000919:0x0018fd50:	icall	
000919:0x0018fd60:	movec	@c00, #return
000919:0x0018fd70:	cmpmc	@c00, value
000919:0x0018fd80:	bne	0x18fdb0
000921:0x0018fd88:	icall	
000921:0x0018fd98:	move	ret, #return
000922:0x0018fda8:	jump	0x18fdb8
000922:0x0018fdb0:	jump	0x18fd18
000926:0x0018fdb8:	move	#return, ret
000926:0x0018fdc8:	rts
000926:0x0018fdd0:	rts
map<int,@array<float>>::GetKeyByValueChecked()
000931:0x0018fe00:	imove	i, 0x000000
000931:0x0018fe10:	jump	0x18fe30
000931:0x0018fe18:	move	@m00, i
000931:0x0018fe28:	inc	i
000931:0x0018fe30:	ncalli	map<int,@array<float>>.Count()
000931:0x0018fe38:	cmpi	i, #return
000931:0x0018fe48:	bge	0x18fed8
000933:0x0018fe50:	icall	
000933:0x0018fe60:	movec	@c00, #return
000933:0x0018fe70:	cmpmc	@c00, value
000933:0x0018fe80:	bne	0x18fed0
000935:0x0018fe88:	icall	
000935:0x0018fe98:	move	key, #return
000936:0x0018fea8:	imove	#return, 0x000001
000936:0x0018feb8:	move	key, key
000936:0x0018fec8:	rts
000936:0x0018fed0:	jump	0x18fe18
000939:0x0018fed8:	imove	#return, 0x000000
000939:0x0018fee8:	move	key, key
000939:0x0018fef8:	rts
000939:0x0018ff00:	move	key, key
000939:0x0018ff10:	rts
array<SoundObjectBuilder>::InsertAll()
000427:0x00190c00:	imove	i, 0x000000
000427:0x00190c10:	jump	0x190c30
000427:0x00190c18:	move	@m00, i
000427:0x00190c28:	inc	i
000427:0x00190c30:	ncalli	array<SoundObjectBuilder>.Count()
000427:0x00190c38:	cmpi	i, #return
000427:0x00190c48:	bge	0x190c78
000429:0x00190c50:	icall	
000429:0x00190c60:	icall	
000429:0x00190c70:	jump	0x190c18
000429:0x00190c78:	rts
array<SoundObjectBuilder>::RemoveItem()
000479:0x00190ca8:	movefm	@c00, value
000479:0x00190cb8:	icall	
000479:0x00190cc8:	move	remove_index, #return
000481:0x00190cd8:	cmpi	remove_index, _i0
000481:0x00190ce8:	blt	0x190d00
000483:0x00190cf0:	ncalli	array<SoundObjectBuilder>.RemoveOrdered(remove_index)
000483:0x00190d00:	rts
array<SoundObjectBuilder>::RemoveItemUnOrdered()
000489:0x00190d30:	movefm	@c00, value
000489:0x00190d40:	icall	
000489:0x00190d50:	move	remove_index, #return
000491:0x00190d60:	cmpi	remove_index, _i0
000491:0x00190d70:	blt	0x190d88
000493:0x00190d78:	ncalli	array<SoundObjectBuilder>.Remove(remove_index)
000493:0x00190d88:	rts
array<SoundObjectBuilder>::IsValidIndex()
000499:0x00190d90:	cmpi	index, _i-1
000499:0x00190da0:	ble	0x190de0
000499:0x00190da8:	ncalli	array<SoundObjectBuilder>.Count()
000499:0x00190db0:	cmpi	index, #return
000499:0x00190dc0:	bge	0x190de0
000499:0x00190dc8:	imove	#return, 0x000001
000499:0x00190dd8:	jump	0x190df0
000499:0x00190de0:	imove	#return, 0x000000
000499:0x00190df0:	rts
000499:0x00190df8:	rts
array<SoundObjectBuilder>::Debug()
000525:0x00190e50:	ncalli	array<SoundObjectBuilder>.Count()
000525:0x00190e58:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00190e88:	icall	Print(#return)
000526:0x00190e98:	imove	i, 0x000000
000526:0x00190ea8:	jump	0x190ec8
000526:0x00190eb0:	move	@m00, i
000526:0x00190ec0:	inc	i
000526:0x00190ec8:	ncalli	array<SoundObjectBuilder>.Count()
000526:0x00190ed0:	cmpi	i, #return
000526:0x00190ee0:	bge	0x190f58
000528:0x00190ee8:	icall	
000528:0x00190ef8:	movetm	item, #return
000529:0x00190f08:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00190f38:	icall	Print(#return)
000529:0x00190f48:	release	item
000529:0x00190f50:	jump	0x190eb0
000529:0x00190f58:	rts
array<SoundObjectBuilder>::GetRandomIndex()
000544:0x00190f60:	ncalli	array<SoundObjectBuilder>.Count()
000544:0x00190f68:	move	@m00, #return
000544:0x00190f78:	cmpi	@m00, _i0
000544:0x00190f88:	ble	0x190fc0
000546:0x00190f90:	ncalli	array<SoundObjectBuilder>.Count()
000546:0x00190f98:	icall	RandomInt(_i0, #return)
000546:0x00190fa8:	move	#return, #return
000546:0x00190fb8:	rts
000549:0x00190fc0:	imove	#return, 0xffffffff
000549:0x00190fd0:	rts
000549:0x00190fd8:	rts
array<SoundObjectBuilder>::GetRandomElement()
000563:0x00190fe0:	call	
000563:0x00190ff0:	icall	
000563:0x00191000:	movetm	#return, #return
000563:0x00191010:	rts
000563:0x00191018:	rts
array<SoundObjectBuilder>::SwapItems()
000568:0x00191048:	icall	
000568:0x00191058:	movetm	item1, #return
000569:0x00191068:	icall	
000569:0x00191078:	icall	
000570:0x00191088:	movefm	@c00, item1
000570:0x00191098:	icall	
000570:0x001910a8:	release	item1
000570:0x001910b0:	rts
array<SoundObjectBuilder>::InsertArray()
000575:0x00191108:	imove	i, 0x000000
000575:0x00191118:	jump	0x191138
000575:0x00191120:	move	@m00, i
000575:0x00191130:	inc	i
000575:0x00191138:	ncalli	array<SoundObjectBuilder>.Count()
000575:0x00191140:	cmpi	i, #return
000575:0x00191150:	bge	0x1911a8
000577:0x00191158:	icall	
000577:0x00191168:	movetm	item, #return
000578:0x00191178:	movefm	@c00, item
000578:0x00191188:	icall	
000578:0x00191198:	release	item
000578:0x001911a0:	jump	0x191120
000578:0x001911a8:	rts
array<SoundObjectBuilder>::Invert()
000584:0x00191228:	imove	left, 0x000000
000585:0x00191238:	ncalli	array<SoundObjectBuilder>.Count()
000585:0x00191240:	subi	right, #return, _i1
000586:0x00191250:	cmpi	right, _i0
000586:0x00191260:	ble	0x191320
000588:0x00191268:	cmpi	left, right
000588:0x00191278:	bge	0x191320
000590:0x00191280:	icall	
000590:0x00191290:	movetm	temp, #return
000591:0x001912a0:	move	@m00, left
000591:0x001912b0:	inc	left
000591:0x001912b8:	icall	
000591:0x001912c8:	icall	
000592:0x001912d8:	move	@m00, right
000592:0x001912e8:	dec	right
000592:0x001912f0:	movefm	@c00, temp
000592:0x00191300:	icall	
000592:0x00191310:	release	temp
000592:0x00191318:	jump	0x191268
000592:0x00191320:	rts
array<SoundObjectBuilder>::MoveIndex()
000612:0x00191378:	ncalli	array<SoundObjectBuilder>.Count()
000612:0x00191380:	move	count, #return
000613:0x00191390:	move	new_index, curr_index
000615:0x001913a0:	cmpi	move_number, _i0
000615:0x001913b0:	ble	0x1913d8
000617:0x001913b8:	addi	@m00, curr_index, move_number
000617:0x001913c8:	move	new_index, @m00
000620:0x001913d8:	cmpi	move_number, _i0
000620:0x001913e8:	bge	0x191490
000622:0x001913f0:	subi	@m00, curr_index, move_number
000622:0x00191400:	move	new_index, @m00
000624:0x00191410:	cmpi	new_index, _i0
000624:0x00191420:	bge	0x191490
000626:0x00191428:	subi	@m01, _i0, count
000626:0x00191438:	cmpi	new_index, @m01
000626:0x00191448:	bgt	0x191470
000628:0x00191450:	modi	@m00, new_index, count
000628:0x00191460:	move	new_index, @m00
000631:0x00191470:	addi	@m00, new_index, count
000631:0x00191480:	move	new_index, @m00
000635:0x00191490:	cmpi	new_index, count
000635:0x001914a0:	blt	0x1914c8
000637:0x001914a8:	modi	@m00, new_index, count
000637:0x001914b8:	move	new_index, @m00
000641:0x001914c8:	move	#return, new_index
000641:0x001914d8:	rts
000641:0x001914e0:	rts
array<SoundObjectBuilder>::ShuffleArray()
000646:0x00191510:	imove	i, 0x000000
000646:0x00191520:	jump	0x191540
000646:0x00191528:	move	@m00, i
000646:0x00191538:	inc	i
000646:0x00191540:	ncalli	array<SoundObjectBuilder>.Count()
000646:0x00191548:	cmpi	i, #return
000646:0x00191558:	bge	0x191590
000648:0x00191560:	call	
000648:0x00191570:	call	
000648:0x00191588:	jump	0x191528
000648:0x00191590:	rts
array<SoundObjectBuilder>::DifferentAtPosition()
000666:0x001915c0:	ncalli	array<SoundObjectBuilder>.Count()
000666:0x001915c8:	move	@m00, #return
000666:0x001915d8:	push	#return
000666:0x001915e0:	ncalli	array<SoundObjectBuilder>.Count()
000666:0x001915e8:	move	@m02, #return
000666:0x001915f8:	pop	#return
000666:0x00191600:	cmpi	@m00, @m02
000666:0x00191610:	beq	0x191640
000668:0x00191618:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00191628:	imove	#return, 0xffffffff
000669:0x00191638:	rts
000672:0x00191640:	imove	i, 0x000000
000672:0x00191650:	jump	0x191660
000672:0x00191658:	inc	i
000672:0x00191660:	ncalli	array<SoundObjectBuilder>.Count()
000672:0x00191668:	cmpi	i, #return
000672:0x00191678:	bge	0x191708
000674:0x00191680:	icall	
000674:0x00191690:	movec	@c00, #return
000674:0x001916a0:	pushc	#return
000674:0x001916a8:	icall	
000674:0x001916b8:	movec	@c02, #return
000674:0x001916c8:	popc	#return
000674:0x001916d0:	cmpc	@c00, @c02
000674:0x001916e0:	beq	0x191700
000676:0x001916e8:	move	#return, i
000676:0x001916f8:	rts
000676:0x00191700:	jump	0x191658
000680:0x00191708:	imove	#return, 0xffffffff
000680:0x00191718:	rts
000680:0x00191720:	rts
map<int,SoundObjectBuilder>::GetKeyArray()
000885:0x00191a20:	new	keys, array<int>
000886:0x00191a40:	imove	i, 0x000000
000886:0x00191a50:	jump	0x191a70
000886:0x00191a58:	move	@m00, i
000886:0x00191a68:	inc	i
000886:0x00191a70:	ncalli	map<int,SoundObjectBuilder>.Count()
000886:0x00191a78:	cmpi	i, #return
000886:0x00191a88:	bge	0x191ab8
000888:0x00191a90:	icall	
000888:0x00191aa0:	icall	
000888:0x00191ab0:	jump	0x191a58
000890:0x00191ab8:	movem	#return, keys
000890:0x00191ac8:	release	keys
000890:0x00191ad0:	rts
000890:0x00191ad8:	release	keys
000890:0x00191ae0:	rts
map<int,SoundObjectBuilder>::GetValueArray()
000895:0x00191b38:	new	elements, array<SoundObjectBuilder>
000896:0x00191b58:	imove	i, 0x000000
000896:0x00191b68:	jump	0x191b88
000896:0x00191b70:	move	@m00, i
000896:0x00191b80:	inc	i
000896:0x00191b88:	ncalli	map<int,SoundObjectBuilder>.Count()
000896:0x00191b90:	cmpi	i, #return
000896:0x00191ba0:	bge	0x191bd0
000898:0x00191ba8:	icall	
000898:0x00191bb8:	icall	
000898:0x00191bc8:	jump	0x191b70
000900:0x00191bd0:	movem	#return, elements
000900:0x00191be0:	release	elements
000900:0x00191be8:	rts
000900:0x00191bf0:	release	elements
000900:0x00191bf8:	rts
map<int,SoundObjectBuilder>::ReplaceKey()
000905:0x00191c00:	icall	
000905:0x00191c10:	cmpi	#return, _i0
000905:0x00191c20:	beq	0x191c70
000907:0x00191c28:	icall	
000907:0x00191c38:	icall	
000908:0x00191c48:	icall	
000909:0x00191c58:	imove	#return, 0x000001
000909:0x00191c68:	rts
000911:0x00191c70:	imove	#return, 0x000000
000911:0x00191c80:	rts
000911:0x00191c88:	rts
map<int,SoundObjectBuilder>::GetKeyByValue()
000917:0x00191ce0:	imove	i, 0x000000
000917:0x00191cf0:	jump	0x191d10
000917:0x00191cf8:	move	@m00, i
000917:0x00191d08:	inc	i
000917:0x00191d10:	ncalli	map<int,SoundObjectBuilder>.Count()
000917:0x00191d18:	cmpi	i, #return
000917:0x00191d28:	bge	0x191d98
000919:0x00191d30:	icall	
000919:0x00191d40:	movec	@c00, #return
000919:0x00191d50:	cmpmc	@c00, value
000919:0x00191d60:	bne	0x191d90
000921:0x00191d68:	icall	
000921:0x00191d78:	move	ret, #return
000922:0x00191d88:	jump	0x191d98
000922:0x00191d90:	jump	0x191cf8
000926:0x00191d98:	move	#return, ret
000926:0x00191da8:	rts
000926:0x00191db0:	rts
map<int,SoundObjectBuilder>::GetKeyByValueChecked()
000931:0x00191de0:	imove	i, 0x000000
000931:0x00191df0:	jump	0x191e10
000931:0x00191df8:	move	@m00, i
000931:0x00191e08:	inc	i
000931:0x00191e10:	ncalli	map<int,SoundObjectBuilder>.Count()
000931:0x00191e18:	cmpi	i, #return
000931:0x00191e28:	bge	0x191eb8
000933:0x00191e30:	icall	
000933:0x00191e40:	movec	@c00, #return
000933:0x00191e50:	cmpmc	@c00, value
000933:0x00191e60:	bne	0x191eb0
000935:0x00191e68:	icall	
000935:0x00191e78:	move	key, #return
000936:0x00191e88:	imove	#return, 0x000001
000936:0x00191e98:	move	key, key
000936:0x00191ea8:	rts
000936:0x00191eb0:	jump	0x191df8
000939:0x00191eb8:	imove	#return, 0x000000
000939:0x00191ec8:	move	key, key
000939:0x00191ed8:	rts
000939:0x00191ee0:	move	key, key
000939:0x00191ef0:	rts
map<int,@SoundObjectBuilder>::GetKeyArray()
000885:0x00192240:	new	keys, array<int>
000886:0x00192260:	imove	i, 0x000000
000886:0x00192270:	jump	0x192290
000886:0x00192278:	move	@m00, i
000886:0x00192288:	inc	i
000886:0x00192290:	ncalli	map<int,@SoundObjectBuilder>.Count()
000886:0x00192298:	cmpi	i, #return
000886:0x001922a8:	bge	0x1922d8
000888:0x001922b0:	icall	
000888:0x001922c0:	icall	
000888:0x001922d0:	jump	0x192278
000890:0x001922d8:	movem	#return, keys
000890:0x001922e8:	release	keys
000890:0x001922f0:	rts
000890:0x001922f8:	release	keys
000890:0x00192300:	rts
map<int,@SoundObjectBuilder>::GetValueArray()
000895:0x00192358:	new	elements, array<SoundObjectBuilder>
000896:0x00192378:	imove	i, 0x000000
000896:0x00192388:	jump	0x1923a8
000896:0x00192390:	move	@m00, i
000896:0x001923a0:	inc	i
000896:0x001923a8:	ncalli	map<int,@SoundObjectBuilder>.Count()
000896:0x001923b0:	cmpi	i, #return
000896:0x001923c0:	bge	0x1923f0
000898:0x001923c8:	icall	
000898:0x001923d8:	icall	
000898:0x001923e8:	jump	0x192390
000900:0x001923f0:	movem	#return, elements
000900:0x00192400:	release	elements
000900:0x00192408:	rts
000900:0x00192410:	release	elements
000900:0x00192418:	rts
map<int,@SoundObjectBuilder>::ReplaceKey()
000905:0x00192420:	icall	
000905:0x00192430:	cmpi	#return, _i0
000905:0x00192440:	beq	0x192490
000907:0x00192448:	icall	
000907:0x00192458:	icall	
000908:0x00192468:	icall	
000909:0x00192478:	imove	#return, 0x000001
000909:0x00192488:	rts
000911:0x00192490:	imove	#return, 0x000000
000911:0x001924a0:	rts
000911:0x001924a8:	rts
map<int,@SoundObjectBuilder>::GetKeyByValue()
000917:0x00192500:	imove	i, 0x000000
000917:0x00192510:	jump	0x192530
000917:0x00192518:	move	@m00, i
000917:0x00192528:	inc	i
000917:0x00192530:	ncalli	map<int,@SoundObjectBuilder>.Count()
000917:0x00192538:	cmpi	i, #return
000917:0x00192548:	bge	0x1925b8
000919:0x00192550:	icall	
000919:0x00192560:	movec	@c00, #return
000919:0x00192570:	cmpmc	@c00, value
000919:0x00192580:	bne	0x1925b0
000921:0x00192588:	icall	
000921:0x00192598:	move	ret, #return
000922:0x001925a8:	jump	0x1925b8
000922:0x001925b0:	jump	0x192518
000926:0x001925b8:	move	#return, ret
000926:0x001925c8:	rts
000926:0x001925d0:	rts
map<int,@SoundObjectBuilder>::GetKeyByValueChecked()
000931:0x00192600:	imove	i, 0x000000
000931:0x00192610:	jump	0x192630
000931:0x00192618:	move	@m00, i
000931:0x00192628:	inc	i
000931:0x00192630:	ncalli	map<int,@SoundObjectBuilder>.Count()
000931:0x00192638:	cmpi	i, #return
000931:0x00192648:	bge	0x1926d8
000933:0x00192650:	icall	
000933:0x00192660:	movec	@c00, #return
000933:0x00192670:	cmpmc	@c00, value
000933:0x00192680:	bne	0x1926d0
000935:0x00192688:	icall	
000935:0x00192698:	move	key, #return
000936:0x001926a8:	imove	#return, 0x000001
000936:0x001926b8:	move	key, key
000936:0x001926c8:	rts
000936:0x001926d0:	jump	0x192618
000939:0x001926d8:	imove	#return, 0x000000
000939:0x001926e8:	move	key, key
000939:0x001926f8:	rts
000939:0x00192700:	move	key, key
000939:0x00192710:	rts
array<NotificationRuntimeData>::InsertAll()
000427:0x00192f50:	imove	i, 0x000000
000427:0x00192f60:	jump	0x192f80
000427:0x00192f68:	move	@m00, i
000427:0x00192f78:	inc	i
000427:0x00192f80:	ncalli	array<NotificationRuntimeData>.Count()
000427:0x00192f88:	cmpi	i, #return
000427:0x00192f98:	bge	0x192fc8
000429:0x00192fa0:	icall	
000429:0x00192fb0:	icall	
000429:0x00192fc0:	jump	0x192f68
000429:0x00192fc8:	rts
array<NotificationRuntimeData>::RemoveItem()
000479:0x00192ff8:	movefm	@c00, value
000479:0x00193008:	icall	
000479:0x00193018:	move	remove_index, #return
000481:0x00193028:	cmpi	remove_index, _i0
000481:0x00193038:	blt	0x193050
000483:0x00193040:	ncalli	array<NotificationRuntimeData>.RemoveOrdered(remove_index)
000483:0x00193050:	rts
array<NotificationRuntimeData>::RemoveItemUnOrdered()
000489:0x00193080:	movefm	@c00, value
000489:0x00193090:	icall	
000489:0x001930a0:	move	remove_index, #return
000491:0x001930b0:	cmpi	remove_index, _i0
000491:0x001930c0:	blt	0x1930d8
000493:0x001930c8:	ncalli	array<NotificationRuntimeData>.Remove(remove_index)
000493:0x001930d8:	rts
array<NotificationRuntimeData>::IsValidIndex()
000499:0x001930e0:	cmpi	index, _i-1
000499:0x001930f0:	ble	0x193130
000499:0x001930f8:	ncalli	array<NotificationRuntimeData>.Count()
000499:0x00193100:	cmpi	index, #return
000499:0x00193110:	bge	0x193130
000499:0x00193118:	imove	#return, 0x000001
000499:0x00193128:	jump	0x193140
000499:0x00193130:	imove	#return, 0x000000
000499:0x00193140:	rts
000499:0x00193148:	rts
array<NotificationRuntimeData>::Debug()
000525:0x001931a0:	ncalli	array<NotificationRuntimeData>.Count()
000525:0x001931a8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001931d8:	icall	Print(#return)
000526:0x001931e8:	imove	i, 0x000000
000526:0x001931f8:	jump	0x193218
000526:0x00193200:	move	@m00, i
000526:0x00193210:	inc	i
000526:0x00193218:	ncalli	array<NotificationRuntimeData>.Count()
000526:0x00193220:	cmpi	i, #return
000526:0x00193230:	bge	0x1932a8
000528:0x00193238:	icall	
000528:0x00193248:	movetm	item, #return
000529:0x00193258:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00193288:	icall	Print(#return)
000529:0x00193298:	release	item
000529:0x001932a0:	jump	0x193200
000529:0x001932a8:	rts
array<NotificationRuntimeData>::GetRandomIndex()
000544:0x001932b0:	ncalli	array<NotificationRuntimeData>.Count()
000544:0x001932b8:	move	@m00, #return
000544:0x001932c8:	cmpi	@m00, _i0
000544:0x001932d8:	ble	0x193310
000546:0x001932e0:	ncalli	array<NotificationRuntimeData>.Count()
000546:0x001932e8:	icall	RandomInt(_i0, #return)
000546:0x001932f8:	move	#return, #return
000546:0x00193308:	rts
000549:0x00193310:	imove	#return, 0xffffffff
000549:0x00193320:	rts
000549:0x00193328:	rts
array<NotificationRuntimeData>::GetRandomElement()
000563:0x00193330:	call	
000563:0x00193340:	icall	
000563:0x00193350:	movetm	#return, #return
000563:0x00193360:	rts
000563:0x00193368:	rts
array<NotificationRuntimeData>::SwapItems()
000568:0x00193398:	icall	
000568:0x001933a8:	movetm	item1, #return
000569:0x001933b8:	icall	
000569:0x001933c8:	icall	
000570:0x001933d8:	movefm	@c00, item1
000570:0x001933e8:	icall	
000570:0x001933f8:	release	item1
000570:0x00193400:	rts
array<NotificationRuntimeData>::InsertArray()
000575:0x00193458:	imove	i, 0x000000
000575:0x00193468:	jump	0x193488
000575:0x00193470:	move	@m00, i
000575:0x00193480:	inc	i
000575:0x00193488:	ncalli	array<NotificationRuntimeData>.Count()
000575:0x00193490:	cmpi	i, #return
000575:0x001934a0:	bge	0x1934f8
000577:0x001934a8:	icall	
000577:0x001934b8:	movetm	item, #return
000578:0x001934c8:	movefm	@c00, item
000578:0x001934d8:	icall	
000578:0x001934e8:	release	item
000578:0x001934f0:	jump	0x193470
000578:0x001934f8:	rts
array<NotificationRuntimeData>::Invert()
000584:0x00193578:	imove	left, 0x000000
000585:0x00193588:	ncalli	array<NotificationRuntimeData>.Count()
000585:0x00193590:	subi	right, #return, _i1
000586:0x001935a0:	cmpi	right, _i0
000586:0x001935b0:	ble	0x193670
000588:0x001935b8:	cmpi	left, right
000588:0x001935c8:	bge	0x193670
000590:0x001935d0:	icall	
000590:0x001935e0:	movetm	temp, #return
000591:0x001935f0:	move	@m00, left
000591:0x00193600:	inc	left
000591:0x00193608:	icall	
000591:0x00193618:	icall	
000592:0x00193628:	move	@m00, right
000592:0x00193638:	dec	right
000592:0x00193640:	movefm	@c00, temp
000592:0x00193650:	icall	
000592:0x00193660:	release	temp
000592:0x00193668:	jump	0x1935b8
000592:0x00193670:	rts
array<NotificationRuntimeData>::MoveIndex()
000612:0x001936c8:	ncalli	array<NotificationRuntimeData>.Count()
000612:0x001936d0:	move	count, #return
000613:0x001936e0:	move	new_index, curr_index
000615:0x001936f0:	cmpi	move_number, _i0
000615:0x00193700:	ble	0x193728
000617:0x00193708:	addi	@m00, curr_index, move_number
000617:0x00193718:	move	new_index, @m00
000620:0x00193728:	cmpi	move_number, _i0
000620:0x00193738:	bge	0x1937e0
000622:0x00193740:	subi	@m00, curr_index, move_number
000622:0x00193750:	move	new_index, @m00
000624:0x00193760:	cmpi	new_index, _i0
000624:0x00193770:	bge	0x1937e0
000626:0x00193778:	subi	@m01, _i0, count
000626:0x00193788:	cmpi	new_index, @m01
000626:0x00193798:	bgt	0x1937c0
000628:0x001937a0:	modi	@m00, new_index, count
000628:0x001937b0:	move	new_index, @m00
000631:0x001937c0:	addi	@m00, new_index, count
000631:0x001937d0:	move	new_index, @m00
000635:0x001937e0:	cmpi	new_index, count
000635:0x001937f0:	blt	0x193818
000637:0x001937f8:	modi	@m00, new_index, count
000637:0x00193808:	move	new_index, @m00
000641:0x00193818:	move	#return, new_index
000641:0x00193828:	rts
000641:0x00193830:	rts
array<NotificationRuntimeData>::ShuffleArray()
000646:0x00193860:	imove	i, 0x000000
000646:0x00193870:	jump	0x193890
000646:0x00193878:	move	@m00, i
000646:0x00193888:	inc	i
000646:0x00193890:	ncalli	array<NotificationRuntimeData>.Count()
000646:0x00193898:	cmpi	i, #return
000646:0x001938a8:	bge	0x1938e0
000648:0x001938b0:	call	
000648:0x001938c0:	call	
000648:0x001938d8:	jump	0x193878
000648:0x001938e0:	rts
array<NotificationRuntimeData>::DifferentAtPosition()
000666:0x00193910:	ncalli	array<NotificationRuntimeData>.Count()
000666:0x00193918:	move	@m00, #return
000666:0x00193928:	push	#return
000666:0x00193930:	ncalli	array<NotificationRuntimeData>.Count()
000666:0x00193938:	move	@m02, #return
000666:0x00193948:	pop	#return
000666:0x00193950:	cmpi	@m00, @m02
000666:0x00193960:	beq	0x193990
000668:0x00193968:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00193978:	imove	#return, 0xffffffff
000669:0x00193988:	rts
000672:0x00193990:	imove	i, 0x000000
000672:0x001939a0:	jump	0x1939b0
000672:0x001939a8:	inc	i
000672:0x001939b0:	ncalli	array<NotificationRuntimeData>.Count()
000672:0x001939b8:	cmpi	i, #return
000672:0x001939c8:	bge	0x193a58
000674:0x001939d0:	icall	
000674:0x001939e0:	movec	@c00, #return
000674:0x001939f0:	pushc	#return
000674:0x001939f8:	icall	
000674:0x00193a08:	movec	@c02, #return
000674:0x00193a18:	popc	#return
000674:0x00193a20:	cmpc	@c00, @c02
000674:0x00193a30:	beq	0x193a50
000676:0x00193a38:	move	#return, i
000676:0x00193a48:	rts
000676:0x00193a50:	jump	0x1939a8
000680:0x00193a58:	imove	#return, 0xffffffff
000680:0x00193a68:	rts
000680:0x00193a70:	rts
array<@NotificationRuntimeData>::InsertAll()
000427:0x00193e88:	imove	i, 0x000000
000427:0x00193e98:	jump	0x193eb8
000427:0x00193ea0:	move	@m00, i
000427:0x00193eb0:	inc	i
000427:0x00193eb8:	ncalli	array<NotificationRuntimeData>.Count()
000427:0x00193ec0:	cmpi	i, #return
000427:0x00193ed0:	bge	0x193f00
000429:0x00193ed8:	icall	
000429:0x00193ee8:	icall	
000429:0x00193ef8:	jump	0x193ea0
000429:0x00193f00:	rts
array<@NotificationRuntimeData>::RemoveItem()
000479:0x00193f30:	movefm	@c00, value
000479:0x00193f40:	icall	
000479:0x00193f50:	move	remove_index, #return
000481:0x00193f60:	cmpi	remove_index, _i0
000481:0x00193f70:	blt	0x193f88
000483:0x00193f78:	ncalli	array<@NotificationRuntimeData>.RemoveOrdered(remove_index)
000483:0x00193f88:	rts
array<@NotificationRuntimeData>::RemoveItemUnOrdered()
000489:0x00193fb8:	movefm	@c00, value
000489:0x00193fc8:	icall	
000489:0x00193fd8:	move	remove_index, #return
000491:0x00193fe8:	cmpi	remove_index, _i0
000491:0x00193ff8:	blt	0x194010
000493:0x00194000:	ncalli	array<@NotificationRuntimeData>.Remove(remove_index)
000493:0x00194010:	rts
array<@NotificationRuntimeData>::IsValidIndex()
000499:0x00194018:	cmpi	index, _i-1
000499:0x00194028:	ble	0x194068
000499:0x00194030:	ncalli	array<@NotificationRuntimeData>.Count()
000499:0x00194038:	cmpi	index, #return
000499:0x00194048:	bge	0x194068
000499:0x00194050:	imove	#return, 0x000001
000499:0x00194060:	jump	0x194078
000499:0x00194068:	imove	#return, 0x000000
000499:0x00194078:	rts
000499:0x00194080:	rts
array<@NotificationRuntimeData>::Debug()
000525:0x001940d8:	ncalli	array<@NotificationRuntimeData>.Count()
000525:0x001940e0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00194110:	icall	Print(#return)
000526:0x00194120:	imove	i, 0x000000
000526:0x00194130:	jump	0x194150
000526:0x00194138:	move	@m00, i
000526:0x00194148:	inc	i
000526:0x00194150:	ncalli	array<@NotificationRuntimeData>.Count()
000526:0x00194158:	cmpi	i, #return
000526:0x00194168:	bge	0x1941e0
000528:0x00194170:	icall	
000528:0x00194180:	movetm	item, #return
000529:0x00194190:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001941c0:	icall	Print(#return)
000529:0x001941d0:	release	item
000529:0x001941d8:	jump	0x194138
000529:0x001941e0:	rts
array<@NotificationRuntimeData>::GetRandomIndex()
000544:0x001941e8:	ncalli	array<@NotificationRuntimeData>.Count()
000544:0x001941f0:	move	@m00, #return
000544:0x00194200:	cmpi	@m00, _i0
000544:0x00194210:	ble	0x194248
000546:0x00194218:	ncalli	array<@NotificationRuntimeData>.Count()
000546:0x00194220:	icall	RandomInt(_i0, #return)
000546:0x00194230:	move	#return, #return
000546:0x00194240:	rts
000549:0x00194248:	imove	#return, 0xffffffff
000549:0x00194258:	rts
000549:0x00194260:	rts
array<@NotificationRuntimeData>::GetRandomElement()
000563:0x00194268:	call	
000563:0x00194278:	icall	
000563:0x00194288:	movetm	#return, #return
000563:0x00194298:	rts
000563:0x001942a0:	rts
array<@NotificationRuntimeData>::SwapItems()
000568:0x001942d0:	icall	
000568:0x001942e0:	movetm	item1, #return
000569:0x001942f0:	icall	
000569:0x00194300:	icall	
000570:0x00194310:	movefm	@c00, item1
000570:0x00194320:	icall	
000570:0x00194330:	release	item1
000570:0x00194338:	rts
array<@NotificationRuntimeData>::InsertArray()
000575:0x00194390:	imove	i, 0x000000
000575:0x001943a0:	jump	0x1943c0
000575:0x001943a8:	move	@m00, i
000575:0x001943b8:	inc	i
000575:0x001943c0:	ncalli	array<NotificationRuntimeData>.Count()
000575:0x001943c8:	cmpi	i, #return
000575:0x001943d8:	bge	0x194430
000577:0x001943e0:	icall	
000577:0x001943f0:	movetm	item, #return
000578:0x00194400:	movefm	@c00, item
000578:0x00194410:	icall	
000578:0x00194420:	release	item
000578:0x00194428:	jump	0x1943a8
000578:0x00194430:	rts
array<@NotificationRuntimeData>::Invert()
000584:0x001944b0:	imove	left, 0x000000
000585:0x001944c0:	ncalli	array<@NotificationRuntimeData>.Count()
000585:0x001944c8:	subi	right, #return, _i1
000586:0x001944d8:	cmpi	right, _i0
000586:0x001944e8:	ble	0x1945a8
000588:0x001944f0:	cmpi	left, right
000588:0x00194500:	bge	0x1945a8
000590:0x00194508:	icall	
000590:0x00194518:	movetm	temp, #return
000591:0x00194528:	move	@m00, left
000591:0x00194538:	inc	left
000591:0x00194540:	icall	
000591:0x00194550:	icall	
000592:0x00194560:	move	@m00, right
000592:0x00194570:	dec	right
000592:0x00194578:	movefm	@c00, temp
000592:0x00194588:	icall	
000592:0x00194598:	release	temp
000592:0x001945a0:	jump	0x1944f0
000592:0x001945a8:	rts
array<@NotificationRuntimeData>::MoveIndex()
000612:0x00194600:	ncalli	array<@NotificationRuntimeData>.Count()
000612:0x00194608:	move	count, #return
000613:0x00194618:	move	new_index, curr_index
000615:0x00194628:	cmpi	move_number, _i0
000615:0x00194638:	ble	0x194660
000617:0x00194640:	addi	@m00, curr_index, move_number
000617:0x00194650:	move	new_index, @m00
000620:0x00194660:	cmpi	move_number, _i0
000620:0x00194670:	bge	0x194718
000622:0x00194678:	subi	@m00, curr_index, move_number
000622:0x00194688:	move	new_index, @m00
000624:0x00194698:	cmpi	new_index, _i0
000624:0x001946a8:	bge	0x194718
000626:0x001946b0:	subi	@m01, _i0, count
000626:0x001946c0:	cmpi	new_index, @m01
000626:0x001946d0:	bgt	0x1946f8
000628:0x001946d8:	modi	@m00, new_index, count
000628:0x001946e8:	move	new_index, @m00
000631:0x001946f8:	addi	@m00, new_index, count
000631:0x00194708:	move	new_index, @m00
000635:0x00194718:	cmpi	new_index, count
000635:0x00194728:	blt	0x194750
000637:0x00194730:	modi	@m00, new_index, count
000637:0x00194740:	move	new_index, @m00
000641:0x00194750:	move	#return, new_index
000641:0x00194760:	rts
000641:0x00194768:	rts
array<@NotificationRuntimeData>::ShuffleArray()
000646:0x00194798:	imove	i, 0x000000
000646:0x001947a8:	jump	0x1947c8
000646:0x001947b0:	move	@m00, i
000646:0x001947c0:	inc	i
000646:0x001947c8:	ncalli	array<@NotificationRuntimeData>.Count()
000646:0x001947d0:	cmpi	i, #return
000646:0x001947e0:	bge	0x194818
000648:0x001947e8:	call	
000648:0x001947f8:	call	
000648:0x00194810:	jump	0x1947b0
000648:0x00194818:	rts
array<@NotificationRuntimeData>::DifferentAtPosition()
000666:0x00194848:	ncalli	array<@NotificationRuntimeData>.Count()
000666:0x00194850:	move	@m00, #return
000666:0x00194860:	ncalli	array<NotificationRuntimeData>.Count()
000666:0x00194868:	cmpi	@m00, #return
000666:0x00194878:	beq	0x1948a8
000668:0x00194880:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00194890:	imove	#return, 0xffffffff
000669:0x001948a0:	rts
000672:0x001948a8:	imove	i, 0x000000
000672:0x001948b8:	jump	0x1948c8
000672:0x001948c0:	inc	i
000672:0x001948c8:	ncalli	array<NotificationRuntimeData>.Count()
000672:0x001948d0:	cmpi	i, #return
000672:0x001948e0:	bge	0x194950
000674:0x001948e8:	icall	
000674:0x001948f8:	movec	@c00, #return
000674:0x00194908:	icall	
000674:0x00194918:	cmpc	@c00, #return
000674:0x00194928:	beq	0x194948
000676:0x00194930:	move	#return, i
000676:0x00194940:	rts
000676:0x00194948:	jump	0x1948c0
000680:0x00194950:	imove	#return, 0xffffffff
000680:0x00194960:	rts
000680:0x00194968:	rts
array<NotificationData>::InsertAll()
000427:0x001956b8:	imove	i, 0x000000
000427:0x001956c8:	jump	0x1956e8
000427:0x001956d0:	move	@m00, i
000427:0x001956e0:	inc	i
000427:0x001956e8:	ncalli	array<NotificationData>.Count()
000427:0x001956f0:	cmpi	i, #return
000427:0x00195700:	bge	0x195730
000429:0x00195708:	icall	
000429:0x00195718:	icall	
000429:0x00195728:	jump	0x1956d0
000429:0x00195730:	rts
array<NotificationData>::RemoveItem()
000479:0x00195760:	movefm	@c00, value
000479:0x00195770:	icall	
000479:0x00195780:	move	remove_index, #return
000481:0x00195790:	cmpi	remove_index, _i0
000481:0x001957a0:	blt	0x1957b8
000483:0x001957a8:	ncalli	array<NotificationData>.RemoveOrdered(remove_index)
000483:0x001957b8:	rts
array<NotificationData>::RemoveItemUnOrdered()
000489:0x001957e8:	movefm	@c00, value
000489:0x001957f8:	icall	
000489:0x00195808:	move	remove_index, #return
000491:0x00195818:	cmpi	remove_index, _i0
000491:0x00195828:	blt	0x195840
000493:0x00195830:	ncalli	array<NotificationData>.Remove(remove_index)
000493:0x00195840:	rts
array<NotificationData>::IsValidIndex()
000499:0x00195848:	cmpi	index, _i-1
000499:0x00195858:	ble	0x195898
000499:0x00195860:	ncalli	array<NotificationData>.Count()
000499:0x00195868:	cmpi	index, #return
000499:0x00195878:	bge	0x195898
000499:0x00195880:	imove	#return, 0x000001
000499:0x00195890:	jump	0x1958a8
000499:0x00195898:	imove	#return, 0x000000
000499:0x001958a8:	rts
000499:0x001958b0:	rts
array<NotificationData>::Debug()
000525:0x00195908:	ncalli	array<NotificationData>.Count()
000525:0x00195910:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00195940:	icall	Print(#return)
000526:0x00195950:	imove	i, 0x000000
000526:0x00195960:	jump	0x195980
000526:0x00195968:	move	@m00, i
000526:0x00195978:	inc	i
000526:0x00195980:	ncalli	array<NotificationData>.Count()
000526:0x00195988:	cmpi	i, #return
000526:0x00195998:	bge	0x195a10
000528:0x001959a0:	icall	
000528:0x001959b0:	movetm	item, #return
000529:0x001959c0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001959f0:	icall	Print(#return)
000529:0x00195a00:	release	item
000529:0x00195a08:	jump	0x195968
000529:0x00195a10:	rts
array<NotificationData>::GetRandomIndex()
000544:0x00195a18:	ncalli	array<NotificationData>.Count()
000544:0x00195a20:	move	@m00, #return
000544:0x00195a30:	cmpi	@m00, _i0
000544:0x00195a40:	ble	0x195a78
000546:0x00195a48:	ncalli	array<NotificationData>.Count()
000546:0x00195a50:	icall	RandomInt(_i0, #return)
000546:0x00195a60:	move	#return, #return
000546:0x00195a70:	rts
000549:0x00195a78:	imove	#return, 0xffffffff
000549:0x00195a88:	rts
000549:0x00195a90:	rts
array<NotificationData>::GetRandomElement()
000563:0x00195a98:	call	
000563:0x00195aa8:	icall	
000563:0x00195ab8:	movetm	#return, #return
000563:0x00195ac8:	rts
000563:0x00195ad0:	rts
array<NotificationData>::SwapItems()
000568:0x00195b00:	icall	
000568:0x00195b10:	movetm	item1, #return
000569:0x00195b20:	icall	
000569:0x00195b30:	icall	
000570:0x00195b40:	movefm	@c00, item1
000570:0x00195b50:	icall	
000570:0x00195b60:	release	item1
000570:0x00195b68:	rts
array<NotificationData>::InsertArray()
000575:0x00195bc0:	imove	i, 0x000000
000575:0x00195bd0:	jump	0x195bf0
000575:0x00195bd8:	move	@m00, i
000575:0x00195be8:	inc	i
000575:0x00195bf0:	ncalli	array<NotificationData>.Count()
000575:0x00195bf8:	cmpi	i, #return
000575:0x00195c08:	bge	0x195c60
000577:0x00195c10:	icall	
000577:0x00195c20:	movetm	item, #return
000578:0x00195c30:	movefm	@c00, item
000578:0x00195c40:	icall	
000578:0x00195c50:	release	item
000578:0x00195c58:	jump	0x195bd8
000578:0x00195c60:	rts
array<NotificationData>::Invert()
000584:0x00195ce0:	imove	left, 0x000000
000585:0x00195cf0:	ncalli	array<NotificationData>.Count()
000585:0x00195cf8:	subi	right, #return, _i1
000586:0x00195d08:	cmpi	right, _i0
000586:0x00195d18:	ble	0x195dd8
000588:0x00195d20:	cmpi	left, right
000588:0x00195d30:	bge	0x195dd8
000590:0x00195d38:	icall	
000590:0x00195d48:	movetm	temp, #return
000591:0x00195d58:	move	@m00, left
000591:0x00195d68:	inc	left
000591:0x00195d70:	icall	
000591:0x00195d80:	icall	
000592:0x00195d90:	move	@m00, right
000592:0x00195da0:	dec	right
000592:0x00195da8:	movefm	@c00, temp
000592:0x00195db8:	icall	
000592:0x00195dc8:	release	temp
000592:0x00195dd0:	jump	0x195d20
000592:0x00195dd8:	rts
array<NotificationData>::MoveIndex()
000612:0x00195e30:	ncalli	array<NotificationData>.Count()
000612:0x00195e38:	move	count, #return
000613:0x00195e48:	move	new_index, curr_index
000615:0x00195e58:	cmpi	move_number, _i0
000615:0x00195e68:	ble	0x195e90
000617:0x00195e70:	addi	@m00, curr_index, move_number
000617:0x00195e80:	move	new_index, @m00
000620:0x00195e90:	cmpi	move_number, _i0
000620:0x00195ea0:	bge	0x195f48
000622:0x00195ea8:	subi	@m00, curr_index, move_number
000622:0x00195eb8:	move	new_index, @m00
000624:0x00195ec8:	cmpi	new_index, _i0
000624:0x00195ed8:	bge	0x195f48
000626:0x00195ee0:	subi	@m01, _i0, count
000626:0x00195ef0:	cmpi	new_index, @m01
000626:0x00195f00:	bgt	0x195f28
000628:0x00195f08:	modi	@m00, new_index, count
000628:0x00195f18:	move	new_index, @m00
000631:0x00195f28:	addi	@m00, new_index, count
000631:0x00195f38:	move	new_index, @m00
000635:0x00195f48:	cmpi	new_index, count
000635:0x00195f58:	blt	0x195f80
000637:0x00195f60:	modi	@m00, new_index, count
000637:0x00195f70:	move	new_index, @m00
000641:0x00195f80:	move	#return, new_index
000641:0x00195f90:	rts
000641:0x00195f98:	rts
array<NotificationData>::ShuffleArray()
000646:0x00195fc8:	imove	i, 0x000000
000646:0x00195fd8:	jump	0x195ff8
000646:0x00195fe0:	move	@m00, i
000646:0x00195ff0:	inc	i
000646:0x00195ff8:	ncalli	array<NotificationData>.Count()
000646:0x00196000:	cmpi	i, #return
000646:0x00196010:	bge	0x196048
000648:0x00196018:	call	
000648:0x00196028:	call	
000648:0x00196040:	jump	0x195fe0
000648:0x00196048:	rts
array<NotificationData>::DifferentAtPosition()
000666:0x00196078:	ncalli	array<NotificationData>.Count()
000666:0x00196080:	move	@m00, #return
000666:0x00196090:	push	#return
000666:0x00196098:	ncalli	array<NotificationData>.Count()
000666:0x001960a0:	move	@m02, #return
000666:0x001960b0:	pop	#return
000666:0x001960b8:	cmpi	@m00, @m02
000666:0x001960c8:	beq	0x1960f8
000668:0x001960d0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001960e0:	imove	#return, 0xffffffff
000669:0x001960f0:	rts
000672:0x001960f8:	imove	i, 0x000000
000672:0x00196108:	jump	0x196118
000672:0x00196110:	inc	i
000672:0x00196118:	ncalli	array<NotificationData>.Count()
000672:0x00196120:	cmpi	i, #return
000672:0x00196130:	bge	0x1961c0
000674:0x00196138:	icall	
000674:0x00196148:	movec	@c00, #return
000674:0x00196158:	pushc	#return
000674:0x00196160:	icall	
000674:0x00196170:	movec	@c02, #return
000674:0x00196180:	popc	#return
000674:0x00196188:	cmpc	@c00, @c02
000674:0x00196198:	beq	0x1961b8
000676:0x001961a0:	move	#return, i
000676:0x001961b0:	rts
000676:0x001961b8:	jump	0x196110
000680:0x001961c0:	imove	#return, 0xffffffff
000680:0x001961d0:	rts
000680:0x001961d8:	rts
map<int,NotificationData>::GetKeyArray()
000885:0x001964d8:	new	keys, array<int>
000886:0x001964f8:	imove	i, 0x000000
000886:0x00196508:	jump	0x196528
000886:0x00196510:	move	@m00, i
000886:0x00196520:	inc	i
000886:0x00196528:	ncalli	map<int,NotificationData>.Count()
000886:0x00196530:	cmpi	i, #return
000886:0x00196540:	bge	0x196570
000888:0x00196548:	icall	
000888:0x00196558:	icall	
000888:0x00196568:	jump	0x196510
000890:0x00196570:	movem	#return, keys
000890:0x00196580:	release	keys
000890:0x00196588:	rts
000890:0x00196590:	release	keys
000890:0x00196598:	rts
map<int,NotificationData>::GetValueArray()
000895:0x001965f0:	new	elements, array<NotificationData>
000896:0x00196610:	imove	i, 0x000000
000896:0x00196620:	jump	0x196640
000896:0x00196628:	move	@m00, i
000896:0x00196638:	inc	i
000896:0x00196640:	ncalli	map<int,NotificationData>.Count()
000896:0x00196648:	cmpi	i, #return
000896:0x00196658:	bge	0x196688
000898:0x00196660:	icall	
000898:0x00196670:	icall	
000898:0x00196680:	jump	0x196628
000900:0x00196688:	movem	#return, elements
000900:0x00196698:	release	elements
000900:0x001966a0:	rts
000900:0x001966a8:	release	elements
000900:0x001966b0:	rts
map<int,NotificationData>::ReplaceKey()
000905:0x001966b8:	icall	
000905:0x001966c8:	cmpi	#return, _i0
000905:0x001966d8:	beq	0x196728
000907:0x001966e0:	icall	
000907:0x001966f0:	icall	
000908:0x00196700:	icall	
000909:0x00196710:	imove	#return, 0x000001
000909:0x00196720:	rts
000911:0x00196728:	imove	#return, 0x000000
000911:0x00196738:	rts
000911:0x00196740:	rts
map<int,NotificationData>::GetKeyByValue()
000917:0x00196798:	imove	i, 0x000000
000917:0x001967a8:	jump	0x1967c8
000917:0x001967b0:	move	@m00, i
000917:0x001967c0:	inc	i
000917:0x001967c8:	ncalli	map<int,NotificationData>.Count()
000917:0x001967d0:	cmpi	i, #return
000917:0x001967e0:	bge	0x196850
000919:0x001967e8:	icall	
000919:0x001967f8:	movec	@c00, #return
000919:0x00196808:	cmpmc	@c00, value
000919:0x00196818:	bne	0x196848
000921:0x00196820:	icall	
000921:0x00196830:	move	ret, #return
000922:0x00196840:	jump	0x196850
000922:0x00196848:	jump	0x1967b0
000926:0x00196850:	move	#return, ret
000926:0x00196860:	rts
000926:0x00196868:	rts
map<int,NotificationData>::GetKeyByValueChecked()
000931:0x00196898:	imove	i, 0x000000
000931:0x001968a8:	jump	0x1968c8
000931:0x001968b0:	move	@m00, i
000931:0x001968c0:	inc	i
000931:0x001968c8:	ncalli	map<int,NotificationData>.Count()
000931:0x001968d0:	cmpi	i, #return
000931:0x001968e0:	bge	0x196970
000933:0x001968e8:	icall	
000933:0x001968f8:	movec	@c00, #return
000933:0x00196908:	cmpmc	@c00, value
000933:0x00196918:	bne	0x196968
000935:0x00196920:	icall	
000935:0x00196930:	move	key, #return
000936:0x00196940:	imove	#return, 0x000001
000936:0x00196950:	move	key, key
000936:0x00196960:	rts
000936:0x00196968:	jump	0x1968b0
000939:0x00196970:	imove	#return, 0x000000
000939:0x00196980:	move	key, key
000939:0x00196990:	rts
000939:0x00196998:	move	key, key
000939:0x001969a8:	rts
map<int,@NotificationData>::GetKeyArray()
000885:0x00196cf8:	new	keys, array<int>
000886:0x00196d18:	imove	i, 0x000000
000886:0x00196d28:	jump	0x196d48
000886:0x00196d30:	move	@m00, i
000886:0x00196d40:	inc	i
000886:0x00196d48:	ncalli	map<int,@NotificationData>.Count()
000886:0x00196d50:	cmpi	i, #return
000886:0x00196d60:	bge	0x196d90
000888:0x00196d68:	icall	
000888:0x00196d78:	icall	
000888:0x00196d88:	jump	0x196d30
000890:0x00196d90:	movem	#return, keys
000890:0x00196da0:	release	keys
000890:0x00196da8:	rts
000890:0x00196db0:	release	keys
000890:0x00196db8:	rts
map<int,@NotificationData>::GetValueArray()
000895:0x00196e10:	new	elements, array<NotificationData>
000896:0x00196e30:	imove	i, 0x000000
000896:0x00196e40:	jump	0x196e60
000896:0x00196e48:	move	@m00, i
000896:0x00196e58:	inc	i
000896:0x00196e60:	ncalli	map<int,@NotificationData>.Count()
000896:0x00196e68:	cmpi	i, #return
000896:0x00196e78:	bge	0x196ea8
000898:0x00196e80:	icall	
000898:0x00196e90:	icall	
000898:0x00196ea0:	jump	0x196e48
000900:0x00196ea8:	movem	#return, elements
000900:0x00196eb8:	release	elements
000900:0x00196ec0:	rts
000900:0x00196ec8:	release	elements
000900:0x00196ed0:	rts
map<int,@NotificationData>::ReplaceKey()
000905:0x00196ed8:	icall	
000905:0x00196ee8:	cmpi	#return, _i0
000905:0x00196ef8:	beq	0x196f48
000907:0x00196f00:	icall	
000907:0x00196f10:	icall	
000908:0x00196f20:	icall	
000909:0x00196f30:	imove	#return, 0x000001
000909:0x00196f40:	rts
000911:0x00196f48:	imove	#return, 0x000000
000911:0x00196f58:	rts
000911:0x00196f60:	rts
map<int,@NotificationData>::GetKeyByValue()
000917:0x00196fb8:	imove	i, 0x000000
000917:0x00196fc8:	jump	0x196fe8
000917:0x00196fd0:	move	@m00, i
000917:0x00196fe0:	inc	i
000917:0x00196fe8:	ncalli	map<int,@NotificationData>.Count()
000917:0x00196ff0:	cmpi	i, #return
000917:0x00197000:	bge	0x197070
000919:0x00197008:	icall	
000919:0x00197018:	movec	@c00, #return
000919:0x00197028:	cmpmc	@c00, value
000919:0x00197038:	bne	0x197068
000921:0x00197040:	icall	
000921:0x00197050:	move	ret, #return
000922:0x00197060:	jump	0x197070
000922:0x00197068:	jump	0x196fd0
000926:0x00197070:	move	#return, ret
000926:0x00197080:	rts
000926:0x00197088:	rts
map<int,@NotificationData>::GetKeyByValueChecked()
000931:0x001970b8:	imove	i, 0x000000
000931:0x001970c8:	jump	0x1970e8
000931:0x001970d0:	move	@m00, i
000931:0x001970e0:	inc	i
000931:0x001970e8:	ncalli	map<int,@NotificationData>.Count()
000931:0x001970f0:	cmpi	i, #return
000931:0x00197100:	bge	0x197190
000933:0x00197108:	icall	
000933:0x00197118:	movec	@c00, #return
000933:0x00197128:	cmpmc	@c00, value
000933:0x00197138:	bne	0x197188
000935:0x00197140:	icall	
000935:0x00197150:	move	key, #return
000936:0x00197160:	imove	#return, 0x000001
000936:0x00197170:	move	key, key
000936:0x00197180:	rts
000936:0x00197188:	jump	0x1970d0
000939:0x00197190:	imove	#return, 0x000000
000939:0x001971a0:	move	key, key
000939:0x001971b0:	rts
000939:0x001971b8:	move	key, key
000939:0x001971c8:	rts
array<SoundLookupTable>::InsertAll()
000427:0x00197f18:	imove	i, 0x000000
000427:0x00197f28:	jump	0x197f48
000427:0x00197f30:	move	@m00, i
000427:0x00197f40:	inc	i
000427:0x00197f48:	ncalli	array<SoundLookupTable>.Count()
000427:0x00197f50:	cmpi	i, #return
000427:0x00197f60:	bge	0x197f90
000429:0x00197f68:	icall	
000429:0x00197f78:	icall	
000429:0x00197f88:	jump	0x197f30
000429:0x00197f90:	rts
array<SoundLookupTable>::RemoveItem()
000479:0x00197fc0:	movefm	@c00, value
000479:0x00197fd0:	icall	
000479:0x00197fe0:	move	remove_index, #return
000481:0x00197ff0:	cmpi	remove_index, _i0
000481:0x00198000:	blt	0x198018
000483:0x00198008:	ncalli	array<SoundLookupTable>.RemoveOrdered(remove_index)
000483:0x00198018:	rts
array<SoundLookupTable>::RemoveItemUnOrdered()
000489:0x00198048:	movefm	@c00, value
000489:0x00198058:	icall	
000489:0x00198068:	move	remove_index, #return
000491:0x00198078:	cmpi	remove_index, _i0
000491:0x00198088:	blt	0x1980a0
000493:0x00198090:	ncalli	array<SoundLookupTable>.Remove(remove_index)
000493:0x001980a0:	rts
array<SoundLookupTable>::IsValidIndex()
000499:0x001980a8:	cmpi	index, _i-1
000499:0x001980b8:	ble	0x1980f8
000499:0x001980c0:	ncalli	array<SoundLookupTable>.Count()
000499:0x001980c8:	cmpi	index, #return
000499:0x001980d8:	bge	0x1980f8
000499:0x001980e0:	imove	#return, 0x000001
000499:0x001980f0:	jump	0x198108
000499:0x001980f8:	imove	#return, 0x000000
000499:0x00198108:	rts
000499:0x00198110:	rts
array<SoundLookupTable>::Debug()
000525:0x00198168:	ncalli	array<SoundLookupTable>.Count()
000525:0x00198170:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001981a0:	icall	Print(#return)
000526:0x001981b0:	imove	i, 0x000000
000526:0x001981c0:	jump	0x1981e0
000526:0x001981c8:	move	@m00, i
000526:0x001981d8:	inc	i
000526:0x001981e0:	ncalli	array<SoundLookupTable>.Count()
000526:0x001981e8:	cmpi	i, #return
000526:0x001981f8:	bge	0x198270
000528:0x00198200:	icall	
000528:0x00198210:	movetm	item, #return
000529:0x00198220:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00198250:	icall	Print(#return)
000529:0x00198260:	release	item
000529:0x00198268:	jump	0x1981c8
000529:0x00198270:	rts
array<SoundLookupTable>::GetRandomIndex()
000544:0x00198278:	ncalli	array<SoundLookupTable>.Count()
000544:0x00198280:	move	@m00, #return
000544:0x00198290:	cmpi	@m00, _i0
000544:0x001982a0:	ble	0x1982d8
000546:0x001982a8:	ncalli	array<SoundLookupTable>.Count()
000546:0x001982b0:	icall	RandomInt(_i0, #return)
000546:0x001982c0:	move	#return, #return
000546:0x001982d0:	rts
000549:0x001982d8:	imove	#return, 0xffffffff
000549:0x001982e8:	rts
000549:0x001982f0:	rts
array<SoundLookupTable>::GetRandomElement()
000563:0x001982f8:	call	
000563:0x00198308:	icall	
000563:0x00198318:	movetm	#return, #return
000563:0x00198328:	rts
000563:0x00198330:	rts
array<SoundLookupTable>::SwapItems()
000568:0x00198360:	icall	
000568:0x00198370:	movetm	item1, #return
000569:0x00198380:	icall	
000569:0x00198390:	icall	
000570:0x001983a0:	movefm	@c00, item1
000570:0x001983b0:	icall	
000570:0x001983c0:	release	item1
000570:0x001983c8:	rts
array<SoundLookupTable>::InsertArray()
000575:0x00198420:	imove	i, 0x000000
000575:0x00198430:	jump	0x198450
000575:0x00198438:	move	@m00, i
000575:0x00198448:	inc	i
000575:0x00198450:	ncalli	array<SoundLookupTable>.Count()
000575:0x00198458:	cmpi	i, #return
000575:0x00198468:	bge	0x1984c0
000577:0x00198470:	icall	
000577:0x00198480:	movetm	item, #return
000578:0x00198490:	movefm	@c00, item
000578:0x001984a0:	icall	
000578:0x001984b0:	release	item
000578:0x001984b8:	jump	0x198438
000578:0x001984c0:	rts
array<SoundLookupTable>::Invert()
000584:0x00198540:	imove	left, 0x000000
000585:0x00198550:	ncalli	array<SoundLookupTable>.Count()
000585:0x00198558:	subi	right, #return, _i1
000586:0x00198568:	cmpi	right, _i0
000586:0x00198578:	ble	0x198638
000588:0x00198580:	cmpi	left, right
000588:0x00198590:	bge	0x198638
000590:0x00198598:	icall	
000590:0x001985a8:	movetm	temp, #return
000591:0x001985b8:	move	@m00, left
000591:0x001985c8:	inc	left
000591:0x001985d0:	icall	
000591:0x001985e0:	icall	
000592:0x001985f0:	move	@m00, right
000592:0x00198600:	dec	right
000592:0x00198608:	movefm	@c00, temp
000592:0x00198618:	icall	
000592:0x00198628:	release	temp
000592:0x00198630:	jump	0x198580
000592:0x00198638:	rts
array<SoundLookupTable>::MoveIndex()
000612:0x00198690:	ncalli	array<SoundLookupTable>.Count()
000612:0x00198698:	move	count, #return
000613:0x001986a8:	move	new_index, curr_index
000615:0x001986b8:	cmpi	move_number, _i0
000615:0x001986c8:	ble	0x1986f0
000617:0x001986d0:	addi	@m00, curr_index, move_number
000617:0x001986e0:	move	new_index, @m00
000620:0x001986f0:	cmpi	move_number, _i0
000620:0x00198700:	bge	0x1987a8
000622:0x00198708:	subi	@m00, curr_index, move_number
000622:0x00198718:	move	new_index, @m00
000624:0x00198728:	cmpi	new_index, _i0
000624:0x00198738:	bge	0x1987a8
000626:0x00198740:	subi	@m01, _i0, count
000626:0x00198750:	cmpi	new_index, @m01
000626:0x00198760:	bgt	0x198788
000628:0x00198768:	modi	@m00, new_index, count
000628:0x00198778:	move	new_index, @m00
000631:0x00198788:	addi	@m00, new_index, count
000631:0x00198798:	move	new_index, @m00
000635:0x001987a8:	cmpi	new_index, count
000635:0x001987b8:	blt	0x1987e0
000637:0x001987c0:	modi	@m00, new_index, count
000637:0x001987d0:	move	new_index, @m00
000641:0x001987e0:	move	#return, new_index
000641:0x001987f0:	rts
000641:0x001987f8:	rts
array<SoundLookupTable>::ShuffleArray()
000646:0x00198828:	imove	i, 0x000000
000646:0x00198838:	jump	0x198858
000646:0x00198840:	move	@m00, i
000646:0x00198850:	inc	i
000646:0x00198858:	ncalli	array<SoundLookupTable>.Count()
000646:0x00198860:	cmpi	i, #return
000646:0x00198870:	bge	0x1988a8
000648:0x00198878:	call	
000648:0x00198888:	call	
000648:0x001988a0:	jump	0x198840
000648:0x001988a8:	rts
array<SoundLookupTable>::DifferentAtPosition()
000666:0x001988d8:	ncalli	array<SoundLookupTable>.Count()
000666:0x001988e0:	move	@m00, #return
000666:0x001988f0:	push	#return
000666:0x001988f8:	ncalli	array<SoundLookupTable>.Count()
000666:0x00198900:	move	@m02, #return
000666:0x00198910:	pop	#return
000666:0x00198918:	cmpi	@m00, @m02
000666:0x00198928:	beq	0x198958
000668:0x00198930:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00198940:	imove	#return, 0xffffffff
000669:0x00198950:	rts
000672:0x00198958:	imove	i, 0x000000
000672:0x00198968:	jump	0x198978
000672:0x00198970:	inc	i
000672:0x00198978:	ncalli	array<SoundLookupTable>.Count()
000672:0x00198980:	cmpi	i, #return
000672:0x00198990:	bge	0x198a20
000674:0x00198998:	icall	
000674:0x001989a8:	movec	@c00, #return
000674:0x001989b8:	pushc	#return
000674:0x001989c0:	icall	
000674:0x001989d0:	movec	@c02, #return
000674:0x001989e0:	popc	#return
000674:0x001989e8:	cmpc	@c00, @c02
000674:0x001989f8:	beq	0x198a18
000676:0x00198a00:	move	#return, i
000676:0x00198a10:	rts
000676:0x00198a18:	jump	0x198970
000680:0x00198a20:	imove	#return, 0xffffffff
000680:0x00198a30:	rts
000680:0x00198a38:	rts
map<int,SoundLookupTable>::GetKeyArray()
000885:0x00198d38:	new	keys, array<int>
000886:0x00198d58:	imove	i, 0x000000
000886:0x00198d68:	jump	0x198d88
000886:0x00198d70:	move	@m00, i
000886:0x00198d80:	inc	i
000886:0x00198d88:	ncalli	map<int,SoundLookupTable>.Count()
000886:0x00198d90:	cmpi	i, #return
000886:0x00198da0:	bge	0x198dd0
000888:0x00198da8:	icall	
000888:0x00198db8:	icall	
000888:0x00198dc8:	jump	0x198d70
000890:0x00198dd0:	movem	#return, keys
000890:0x00198de0:	release	keys
000890:0x00198de8:	rts
000890:0x00198df0:	release	keys
000890:0x00198df8:	rts
map<int,SoundLookupTable>::GetValueArray()
000895:0x00198e50:	new	elements, array<SoundLookupTable>
000896:0x00198e70:	imove	i, 0x000000
000896:0x00198e80:	jump	0x198ea0
000896:0x00198e88:	move	@m00, i
000896:0x00198e98:	inc	i
000896:0x00198ea0:	ncalli	map<int,SoundLookupTable>.Count()
000896:0x00198ea8:	cmpi	i, #return
000896:0x00198eb8:	bge	0x198ee8
000898:0x00198ec0:	icall	
000898:0x00198ed0:	icall	
000898:0x00198ee0:	jump	0x198e88
000900:0x00198ee8:	movem	#return, elements
000900:0x00198ef8:	release	elements
000900:0x00198f00:	rts
000900:0x00198f08:	release	elements
000900:0x00198f10:	rts
map<int,SoundLookupTable>::ReplaceKey()
000905:0x00198f18:	icall	
000905:0x00198f28:	cmpi	#return, _i0
000905:0x00198f38:	beq	0x198f88
000907:0x00198f40:	icall	
000907:0x00198f50:	icall	
000908:0x00198f60:	icall	
000909:0x00198f70:	imove	#return, 0x000001
000909:0x00198f80:	rts
000911:0x00198f88:	imove	#return, 0x000000
000911:0x00198f98:	rts
000911:0x00198fa0:	rts
map<int,SoundLookupTable>::GetKeyByValue()
000917:0x00198ff8:	imove	i, 0x000000
000917:0x00199008:	jump	0x199028
000917:0x00199010:	move	@m00, i
000917:0x00199020:	inc	i
000917:0x00199028:	ncalli	map<int,SoundLookupTable>.Count()
000917:0x00199030:	cmpi	i, #return
000917:0x00199040:	bge	0x1990b0
000919:0x00199048:	icall	
000919:0x00199058:	movec	@c00, #return
000919:0x00199068:	cmpmc	@c00, value
000919:0x00199078:	bne	0x1990a8
000921:0x00199080:	icall	
000921:0x00199090:	move	ret, #return
000922:0x001990a0:	jump	0x1990b0
000922:0x001990a8:	jump	0x199010
000926:0x001990b0:	move	#return, ret
000926:0x001990c0:	rts
000926:0x001990c8:	rts
map<int,SoundLookupTable>::GetKeyByValueChecked()
000931:0x001990f8:	imove	i, 0x000000
000931:0x00199108:	jump	0x199128
000931:0x00199110:	move	@m00, i
000931:0x00199120:	inc	i
000931:0x00199128:	ncalli	map<int,SoundLookupTable>.Count()
000931:0x00199130:	cmpi	i, #return
000931:0x00199140:	bge	0x1991d0
000933:0x00199148:	icall	
000933:0x00199158:	movec	@c00, #return
000933:0x00199168:	cmpmc	@c00, value
000933:0x00199178:	bne	0x1991c8
000935:0x00199180:	icall	
000935:0x00199190:	move	key, #return
000936:0x001991a0:	imove	#return, 0x000001
000936:0x001991b0:	move	key, key
000936:0x001991c0:	rts
000936:0x001991c8:	jump	0x199110
000939:0x001991d0:	imove	#return, 0x000000
000939:0x001991e0:	move	key, key
000939:0x001991f0:	rts
000939:0x001991f8:	move	key, key
000939:0x00199208:	rts
map<int,@SoundLookupTable>::GetKeyArray()
000885:0x00199558:	new	keys, array<int>
000886:0x00199578:	imove	i, 0x000000
000886:0x00199588:	jump	0x1995a8
000886:0x00199590:	move	@m00, i
000886:0x001995a0:	inc	i
000886:0x001995a8:	ncalli	map<int,@SoundLookupTable>.Count()
000886:0x001995b0:	cmpi	i, #return
000886:0x001995c0:	bge	0x1995f0
000888:0x001995c8:	icall	
000888:0x001995d8:	icall	
000888:0x001995e8:	jump	0x199590
000890:0x001995f0:	movem	#return, keys
000890:0x00199600:	release	keys
000890:0x00199608:	rts
000890:0x00199610:	release	keys
000890:0x00199618:	rts
map<int,@SoundLookupTable>::GetValueArray()
000895:0x00199670:	new	elements, array<SoundLookupTable>
000896:0x00199690:	imove	i, 0x000000
000896:0x001996a0:	jump	0x1996c0
000896:0x001996a8:	move	@m00, i
000896:0x001996b8:	inc	i
000896:0x001996c0:	ncalli	map<int,@SoundLookupTable>.Count()
000896:0x001996c8:	cmpi	i, #return
000896:0x001996d8:	bge	0x199708
000898:0x001996e0:	icall	
000898:0x001996f0:	icall	
000898:0x00199700:	jump	0x1996a8
000900:0x00199708:	movem	#return, elements
000900:0x00199718:	release	elements
000900:0x00199720:	rts
000900:0x00199728:	release	elements
000900:0x00199730:	rts
map<int,@SoundLookupTable>::ReplaceKey()
000905:0x00199738:	icall	
000905:0x00199748:	cmpi	#return, _i0
000905:0x00199758:	beq	0x1997a8
000907:0x00199760:	icall	
000907:0x00199770:	icall	
000908:0x00199780:	icall	
000909:0x00199790:	imove	#return, 0x000001
000909:0x001997a0:	rts
000911:0x001997a8:	imove	#return, 0x000000
000911:0x001997b8:	rts
000911:0x001997c0:	rts
map<int,@SoundLookupTable>::GetKeyByValue()
000917:0x00199818:	imove	i, 0x000000
000917:0x00199828:	jump	0x199848
000917:0x00199830:	move	@m00, i
000917:0x00199840:	inc	i
000917:0x00199848:	ncalli	map<int,@SoundLookupTable>.Count()
000917:0x00199850:	cmpi	i, #return
000917:0x00199860:	bge	0x1998d0
000919:0x00199868:	icall	
000919:0x00199878:	movec	@c00, #return
000919:0x00199888:	cmpmc	@c00, value
000919:0x00199898:	bne	0x1998c8
000921:0x001998a0:	icall	
000921:0x001998b0:	move	ret, #return
000922:0x001998c0:	jump	0x1998d0
000922:0x001998c8:	jump	0x199830
000926:0x001998d0:	move	#return, ret
000926:0x001998e0:	rts
000926:0x001998e8:	rts
map<int,@SoundLookupTable>::GetKeyByValueChecked()
000931:0x00199918:	imove	i, 0x000000
000931:0x00199928:	jump	0x199948
000931:0x00199930:	move	@m00, i
000931:0x00199940:	inc	i
000931:0x00199948:	ncalli	map<int,@SoundLookupTable>.Count()
000931:0x00199950:	cmpi	i, #return
000931:0x00199960:	bge	0x1999f0
000933:0x00199968:	icall	
000933:0x00199978:	movec	@c00, #return
000933:0x00199988:	cmpmc	@c00, value
000933:0x00199998:	bne	0x1999e8
000935:0x001999a0:	icall	
000935:0x001999b0:	move	key, #return
000936:0x001999c0:	imove	#return, 0x000001
000936:0x001999d0:	move	key, key
000936:0x001999e0:	rts
000936:0x001999e8:	jump	0x199930
000939:0x001999f0:	imove	#return, 0x000000
000939:0x00199a00:	move	key, key
000939:0x00199a10:	rts
000939:0x00199a18:	move	key, key
000939:0x00199a28:	rts
array<BiosUser>::InsertAll()
000427:0x0019a258:	imove	i, 0x000000
000427:0x0019a268:	jump	0x19a288
000427:0x0019a270:	move	@m00, i
000427:0x0019a280:	inc	i
000427:0x0019a288:	ncalli	array<BiosUser>.Count()
000427:0x0019a290:	cmpi	i, #return
000427:0x0019a2a0:	bge	0x19a2d0
000429:0x0019a2a8:	icall	
000429:0x0019a2b8:	icall	
000429:0x0019a2c8:	jump	0x19a270
000429:0x0019a2d0:	rts
array<BiosUser>::RemoveItem()
000479:0x0019a300:	movefm	@c00, value
000479:0x0019a310:	icall	
000479:0x0019a320:	move	remove_index, #return
000481:0x0019a330:	cmpi	remove_index, _i0
000481:0x0019a340:	blt	0x19a358
000483:0x0019a348:	ncalli	array<BiosUser>.RemoveOrdered(remove_index)
000483:0x0019a358:	rts
array<BiosUser>::RemoveItemUnOrdered()
000489:0x0019a388:	movefm	@c00, value
000489:0x0019a398:	icall	
000489:0x0019a3a8:	move	remove_index, #return
000491:0x0019a3b8:	cmpi	remove_index, _i0
000491:0x0019a3c8:	blt	0x19a3e0
000493:0x0019a3d0:	ncalli	array<BiosUser>.Remove(remove_index)
000493:0x0019a3e0:	rts
array<BiosUser>::IsValidIndex()
000499:0x0019a3e8:	cmpi	index, _i-1
000499:0x0019a3f8:	ble	0x19a438
000499:0x0019a400:	ncalli	array<BiosUser>.Count()
000499:0x0019a408:	cmpi	index, #return
000499:0x0019a418:	bge	0x19a438
000499:0x0019a420:	imove	#return, 0x000001
000499:0x0019a430:	jump	0x19a448
000499:0x0019a438:	imove	#return, 0x000000
000499:0x0019a448:	rts
000499:0x0019a450:	rts
array<BiosUser>::Debug()
000525:0x0019a4a8:	ncalli	array<BiosUser>.Count()
000525:0x0019a4b0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0019a4e0:	icall	Print(#return)
000526:0x0019a4f0:	imove	i, 0x000000
000526:0x0019a500:	jump	0x19a520
000526:0x0019a508:	move	@m00, i
000526:0x0019a518:	inc	i
000526:0x0019a520:	ncalli	array<BiosUser>.Count()
000526:0x0019a528:	cmpi	i, #return
000526:0x0019a538:	bge	0x19a5b0
000528:0x0019a540:	icall	
000528:0x0019a550:	movetm	item, #return
000529:0x0019a560:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0019a590:	icall	Print(#return)
000529:0x0019a5a0:	release	item
000529:0x0019a5a8:	jump	0x19a508
000529:0x0019a5b0:	rts
array<BiosUser>::GetRandomIndex()
000544:0x0019a5b8:	ncalli	array<BiosUser>.Count()
000544:0x0019a5c0:	move	@m00, #return
000544:0x0019a5d0:	cmpi	@m00, _i0
000544:0x0019a5e0:	ble	0x19a618
000546:0x0019a5e8:	ncalli	array<BiosUser>.Count()
000546:0x0019a5f0:	icall	RandomInt(_i0, #return)
000546:0x0019a600:	move	#return, #return
000546:0x0019a610:	rts
000549:0x0019a618:	imove	#return, 0xffffffff
000549:0x0019a628:	rts
000549:0x0019a630:	rts
array<BiosUser>::GetRandomElement()
000563:0x0019a638:	call	
000563:0x0019a648:	icall	
000563:0x0019a658:	movetm	#return, #return
000563:0x0019a668:	rts
000563:0x0019a670:	rts
array<BiosUser>::SwapItems()
000568:0x0019a6a0:	icall	
000568:0x0019a6b0:	movetm	item1, #return
000569:0x0019a6c0:	icall	
000569:0x0019a6d0:	icall	
000570:0x0019a6e0:	movefm	@c00, item1
000570:0x0019a6f0:	icall	
000570:0x0019a700:	release	item1
000570:0x0019a708:	rts
array<BiosUser>::InsertArray()
000575:0x0019a760:	imove	i, 0x000000
000575:0x0019a770:	jump	0x19a790
000575:0x0019a778:	move	@m00, i
000575:0x0019a788:	inc	i
000575:0x0019a790:	ncalli	array<BiosUser>.Count()
000575:0x0019a798:	cmpi	i, #return
000575:0x0019a7a8:	bge	0x19a800
000577:0x0019a7b0:	icall	
000577:0x0019a7c0:	movetm	item, #return
000578:0x0019a7d0:	movefm	@c00, item
000578:0x0019a7e0:	icall	
000578:0x0019a7f0:	release	item
000578:0x0019a7f8:	jump	0x19a778
000578:0x0019a800:	rts
array<BiosUser>::Invert()
000584:0x0019a880:	imove	left, 0x000000
000585:0x0019a890:	ncalli	array<BiosUser>.Count()
000585:0x0019a898:	subi	right, #return, _i1
000586:0x0019a8a8:	cmpi	right, _i0
000586:0x0019a8b8:	ble	0x19a978
000588:0x0019a8c0:	cmpi	left, right
000588:0x0019a8d0:	bge	0x19a978
000590:0x0019a8d8:	icall	
000590:0x0019a8e8:	movetm	temp, #return
000591:0x0019a8f8:	move	@m00, left
000591:0x0019a908:	inc	left
000591:0x0019a910:	icall	
000591:0x0019a920:	icall	
000592:0x0019a930:	move	@m00, right
000592:0x0019a940:	dec	right
000592:0x0019a948:	movefm	@c00, temp
000592:0x0019a958:	icall	
000592:0x0019a968:	release	temp
000592:0x0019a970:	jump	0x19a8c0
000592:0x0019a978:	rts
array<BiosUser>::MoveIndex()
000612:0x0019a9d0:	ncalli	array<BiosUser>.Count()
000612:0x0019a9d8:	move	count, #return
000613:0x0019a9e8:	move	new_index, curr_index
000615:0x0019a9f8:	cmpi	move_number, _i0
000615:0x0019aa08:	ble	0x19aa30
000617:0x0019aa10:	addi	@m00, curr_index, move_number
000617:0x0019aa20:	move	new_index, @m00
000620:0x0019aa30:	cmpi	move_number, _i0
000620:0x0019aa40:	bge	0x19aae8
000622:0x0019aa48:	subi	@m00, curr_index, move_number
000622:0x0019aa58:	move	new_index, @m00
000624:0x0019aa68:	cmpi	new_index, _i0
000624:0x0019aa78:	bge	0x19aae8
000626:0x0019aa80:	subi	@m01, _i0, count
000626:0x0019aa90:	cmpi	new_index, @m01
000626:0x0019aaa0:	bgt	0x19aac8
000628:0x0019aaa8:	modi	@m00, new_index, count
000628:0x0019aab8:	move	new_index, @m00
000631:0x0019aac8:	addi	@m00, new_index, count
000631:0x0019aad8:	move	new_index, @m00
000635:0x0019aae8:	cmpi	new_index, count
000635:0x0019aaf8:	blt	0x19ab20
000637:0x0019ab00:	modi	@m00, new_index, count
000637:0x0019ab10:	move	new_index, @m00
000641:0x0019ab20:	move	#return, new_index
000641:0x0019ab30:	rts
000641:0x0019ab38:	rts
array<BiosUser>::ShuffleArray()
000646:0x0019ab68:	imove	i, 0x000000
000646:0x0019ab78:	jump	0x19ab98
000646:0x0019ab80:	move	@m00, i
000646:0x0019ab90:	inc	i
000646:0x0019ab98:	ncalli	array<BiosUser>.Count()
000646:0x0019aba0:	cmpi	i, #return
000646:0x0019abb0:	bge	0x19abe8
000648:0x0019abb8:	call	
000648:0x0019abc8:	call	
000648:0x0019abe0:	jump	0x19ab80
000648:0x0019abe8:	rts
array<BiosUser>::DifferentAtPosition()
000666:0x0019ac18:	ncalli	array<BiosUser>.Count()
000666:0x0019ac20:	move	@m00, #return
000666:0x0019ac30:	push	#return
000666:0x0019ac38:	ncalli	array<BiosUser>.Count()
000666:0x0019ac40:	move	@m02, #return
000666:0x0019ac50:	pop	#return
000666:0x0019ac58:	cmpi	@m00, @m02
000666:0x0019ac68:	beq	0x19ac98
000668:0x0019ac70:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0019ac80:	imove	#return, 0xffffffff
000669:0x0019ac90:	rts
000672:0x0019ac98:	imove	i, 0x000000
000672:0x0019aca8:	jump	0x19acb8
000672:0x0019acb0:	inc	i
000672:0x0019acb8:	ncalli	array<BiosUser>.Count()
000672:0x0019acc0:	cmpi	i, #return
000672:0x0019acd0:	bge	0x19ad60
000674:0x0019acd8:	icall	
000674:0x0019ace8:	movec	@c00, #return
000674:0x0019acf8:	pushc	#return
000674:0x0019ad00:	icall	
000674:0x0019ad10:	movec	@c02, #return
000674:0x0019ad20:	popc	#return
000674:0x0019ad28:	cmpc	@c00, @c02
000674:0x0019ad38:	beq	0x19ad58
000676:0x0019ad40:	move	#return, i
000676:0x0019ad50:	rts
000676:0x0019ad58:	jump	0x19acb0
000680:0x0019ad60:	imove	#return, 0xffffffff
000680:0x0019ad70:	rts
000680:0x0019ad78:	rts
array<@BiosUser>::InsertAll()
000427:0x0019b190:	imove	i, 0x000000
000427:0x0019b1a0:	jump	0x19b1c0
000427:0x0019b1a8:	move	@m00, i
000427:0x0019b1b8:	inc	i
000427:0x0019b1c0:	ncalli	array<BiosUser>.Count()
000427:0x0019b1c8:	cmpi	i, #return
000427:0x0019b1d8:	bge	0x19b208
000429:0x0019b1e0:	icall	
000429:0x0019b1f0:	icall	
000429:0x0019b200:	jump	0x19b1a8
000429:0x0019b208:	rts
array<@BiosUser>::RemoveItem()
000479:0x0019b238:	movefm	@c00, value
000479:0x0019b248:	icall	
000479:0x0019b258:	move	remove_index, #return
000481:0x0019b268:	cmpi	remove_index, _i0
000481:0x0019b278:	blt	0x19b290
000483:0x0019b280:	ncalli	array<@BiosUser>.RemoveOrdered(remove_index)
000483:0x0019b290:	rts
array<@BiosUser>::RemoveItemUnOrdered()
000489:0x0019b2c0:	movefm	@c00, value
000489:0x0019b2d0:	icall	
000489:0x0019b2e0:	move	remove_index, #return
000491:0x0019b2f0:	cmpi	remove_index, _i0
000491:0x0019b300:	blt	0x19b318
000493:0x0019b308:	ncalli	array<@BiosUser>.Remove(remove_index)
000493:0x0019b318:	rts
array<@BiosUser>::IsValidIndex()
000499:0x0019b320:	cmpi	index, _i-1
000499:0x0019b330:	ble	0x19b370
000499:0x0019b338:	ncalli	array<@BiosUser>.Count()
000499:0x0019b340:	cmpi	index, #return
000499:0x0019b350:	bge	0x19b370
000499:0x0019b358:	imove	#return, 0x000001
000499:0x0019b368:	jump	0x19b380
000499:0x0019b370:	imove	#return, 0x000000
000499:0x0019b380:	rts
000499:0x0019b388:	rts
array<@BiosUser>::Debug()
000525:0x0019b3e0:	ncalli	array<@BiosUser>.Count()
000525:0x0019b3e8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0019b418:	icall	Print(#return)
000526:0x0019b428:	imove	i, 0x000000
000526:0x0019b438:	jump	0x19b458
000526:0x0019b440:	move	@m00, i
000526:0x0019b450:	inc	i
000526:0x0019b458:	ncalli	array<@BiosUser>.Count()
000526:0x0019b460:	cmpi	i, #return
000526:0x0019b470:	bge	0x19b4e8
000528:0x0019b478:	icall	
000528:0x0019b488:	movetm	item, #return
000529:0x0019b498:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0019b4c8:	icall	Print(#return)
000529:0x0019b4d8:	release	item
000529:0x0019b4e0:	jump	0x19b440
000529:0x0019b4e8:	rts
array<@BiosUser>::GetRandomIndex()
000544:0x0019b4f0:	ncalli	array<@BiosUser>.Count()
000544:0x0019b4f8:	move	@m00, #return
000544:0x0019b508:	cmpi	@m00, _i0
000544:0x0019b518:	ble	0x19b550
000546:0x0019b520:	ncalli	array<@BiosUser>.Count()
000546:0x0019b528:	icall	RandomInt(_i0, #return)
000546:0x0019b538:	move	#return, #return
000546:0x0019b548:	rts
000549:0x0019b550:	imove	#return, 0xffffffff
000549:0x0019b560:	rts
000549:0x0019b568:	rts
array<@BiosUser>::GetRandomElement()
000563:0x0019b570:	call	
000563:0x0019b580:	icall	
000563:0x0019b590:	movetm	#return, #return
000563:0x0019b5a0:	rts
000563:0x0019b5a8:	rts
array<@BiosUser>::SwapItems()
000568:0x0019b5d8:	icall	
000568:0x0019b5e8:	movetm	item1, #return
000569:0x0019b5f8:	icall	
000569:0x0019b608:	icall	
000570:0x0019b618:	movefm	@c00, item1
000570:0x0019b628:	icall	
000570:0x0019b638:	release	item1
000570:0x0019b640:	rts
array<@BiosUser>::InsertArray()
000575:0x0019b698:	imove	i, 0x000000
000575:0x0019b6a8:	jump	0x19b6c8
000575:0x0019b6b0:	move	@m00, i
000575:0x0019b6c0:	inc	i
000575:0x0019b6c8:	ncalli	array<BiosUser>.Count()
000575:0x0019b6d0:	cmpi	i, #return
000575:0x0019b6e0:	bge	0x19b738
000577:0x0019b6e8:	icall	
000577:0x0019b6f8:	movetm	item, #return
000578:0x0019b708:	movefm	@c00, item
000578:0x0019b718:	icall	
000578:0x0019b728:	release	item
000578:0x0019b730:	jump	0x19b6b0
000578:0x0019b738:	rts
array<@BiosUser>::Invert()
000584:0x0019b7b8:	imove	left, 0x000000
000585:0x0019b7c8:	ncalli	array<@BiosUser>.Count()
000585:0x0019b7d0:	subi	right, #return, _i1
000586:0x0019b7e0:	cmpi	right, _i0
000586:0x0019b7f0:	ble	0x19b8b0
000588:0x0019b7f8:	cmpi	left, right
000588:0x0019b808:	bge	0x19b8b0
000590:0x0019b810:	icall	
000590:0x0019b820:	movetm	temp, #return
000591:0x0019b830:	move	@m00, left
000591:0x0019b840:	inc	left
000591:0x0019b848:	icall	
000591:0x0019b858:	icall	
000592:0x0019b868:	move	@m00, right
000592:0x0019b878:	dec	right
000592:0x0019b880:	movefm	@c00, temp
000592:0x0019b890:	icall	
000592:0x0019b8a0:	release	temp
000592:0x0019b8a8:	jump	0x19b7f8
000592:0x0019b8b0:	rts
array<@BiosUser>::MoveIndex()
000612:0x0019b908:	ncalli	array<@BiosUser>.Count()
000612:0x0019b910:	move	count, #return
000613:0x0019b920:	move	new_index, curr_index
000615:0x0019b930:	cmpi	move_number, _i0
000615:0x0019b940:	ble	0x19b968
000617:0x0019b948:	addi	@m00, curr_index, move_number
000617:0x0019b958:	move	new_index, @m00
000620:0x0019b968:	cmpi	move_number, _i0
000620:0x0019b978:	bge	0x19ba20
000622:0x0019b980:	subi	@m00, curr_index, move_number
000622:0x0019b990:	move	new_index, @m00
000624:0x0019b9a0:	cmpi	new_index, _i0
000624:0x0019b9b0:	bge	0x19ba20
000626:0x0019b9b8:	subi	@m01, _i0, count
000626:0x0019b9c8:	cmpi	new_index, @m01
000626:0x0019b9d8:	bgt	0x19ba00
000628:0x0019b9e0:	modi	@m00, new_index, count
000628:0x0019b9f0:	move	new_index, @m00
000631:0x0019ba00:	addi	@m00, new_index, count
000631:0x0019ba10:	move	new_index, @m00
000635:0x0019ba20:	cmpi	new_index, count
000635:0x0019ba30:	blt	0x19ba58
000637:0x0019ba38:	modi	@m00, new_index, count
000637:0x0019ba48:	move	new_index, @m00
000641:0x0019ba58:	move	#return, new_index
000641:0x0019ba68:	rts
000641:0x0019ba70:	rts
array<@BiosUser>::ShuffleArray()
000646:0x0019baa0:	imove	i, 0x000000
000646:0x0019bab0:	jump	0x19bad0
000646:0x0019bab8:	move	@m00, i
000646:0x0019bac8:	inc	i
000646:0x0019bad0:	ncalli	array<@BiosUser>.Count()
000646:0x0019bad8:	cmpi	i, #return
000646:0x0019bae8:	bge	0x19bb20
000648:0x0019baf0:	call	
000648:0x0019bb00:	call	
000648:0x0019bb18:	jump	0x19bab8
000648:0x0019bb20:	rts
array<@BiosUser>::DifferentAtPosition()
000666:0x0019bb50:	ncalli	array<@BiosUser>.Count()
000666:0x0019bb58:	move	@m00, #return
000666:0x0019bb68:	ncalli	array<BiosUser>.Count()
000666:0x0019bb70:	cmpi	@m00, #return
000666:0x0019bb80:	beq	0x19bbb0
000668:0x0019bb88:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0019bb98:	imove	#return, 0xffffffff
000669:0x0019bba8:	rts
000672:0x0019bbb0:	imove	i, 0x000000
000672:0x0019bbc0:	jump	0x19bbd0
000672:0x0019bbc8:	inc	i
000672:0x0019bbd0:	ncalli	array<BiosUser>.Count()
000672:0x0019bbd8:	cmpi	i, #return
000672:0x0019bbe8:	bge	0x19bc58
000674:0x0019bbf0:	icall	
000674:0x0019bc00:	movec	@c00, #return
000674:0x0019bc10:	icall	
000674:0x0019bc20:	cmpc	@c00, #return
000674:0x0019bc30:	beq	0x19bc50
000676:0x0019bc38:	move	#return, i
000676:0x0019bc48:	rts
000676:0x0019bc50:	jump	0x19bbc8
000680:0x0019bc58:	imove	#return, 0xffffffff
000680:0x0019bc68:	rts
000680:0x0019bc70:	rts
map<string,BiosFriendInfo>::GetKeyArray()
000885:0x0019c668:	new	keys, array<string>
000886:0x0019c688:	imove	i, 0x000000
000886:0x0019c698:	jump	0x19c6b8
000886:0x0019c6a0:	move	@m00, i
000886:0x0019c6b0:	inc	i
000886:0x0019c6b8:	ncalli	map<string,BiosFriendInfo>.Count()
000886:0x0019c6c0:	cmpi	i, #return
000886:0x0019c6d0:	bge	0x19c700
000888:0x0019c6d8:	icall	
000888:0x0019c6e8:	icall	
000888:0x0019c6f8:	jump	0x19c6a0
000890:0x0019c700:	movem	#return, keys
000890:0x0019c710:	release	keys
000890:0x0019c718:	rts
000890:0x0019c720:	release	keys
000890:0x0019c728:	rts
map<string,BiosFriendInfo>::GetValueArray()
000895:0x0019c780:	new	elements, array<BiosFriendInfo>
000896:0x0019c7a0:	imove	i, 0x000000
000896:0x0019c7b0:	jump	0x19c7d0
000896:0x0019c7b8:	move	@m00, i
000896:0x0019c7c8:	inc	i
000896:0x0019c7d0:	ncalli	map<string,BiosFriendInfo>.Count()
000896:0x0019c7d8:	cmpi	i, #return
000896:0x0019c7e8:	bge	0x19c818
000898:0x0019c7f0:	icall	
000898:0x0019c800:	icall	
000898:0x0019c810:	jump	0x19c7b8
000900:0x0019c818:	movem	#return, elements
000900:0x0019c828:	release	elements
000900:0x0019c830:	rts
000900:0x0019c838:	release	elements
000900:0x0019c840:	rts
map<string,BiosFriendInfo>::ReplaceKey()
000905:0x0019c848:	icall	
000905:0x0019c858:	cmpi	#return, _i0
000905:0x0019c868:	beq	0x19c8b8
000907:0x0019c870:	icall	
000907:0x0019c880:	icall	
000908:0x0019c890:	icall	
000909:0x0019c8a0:	imove	#return, 0x000001
000909:0x0019c8b0:	rts
000911:0x0019c8b8:	imove	#return, 0x000000
000911:0x0019c8c8:	rts
000911:0x0019c8d0:	rts
map<string,BiosFriendInfo>::GetKeyByValue()
000917:0x0019c928:	imove	i, 0x000000
000917:0x0019c938:	jump	0x19c958
000917:0x0019c940:	move	@m00, i
000917:0x0019c950:	inc	i
000917:0x0019c958:	ncalli	map<string,BiosFriendInfo>.Count()
000917:0x0019c960:	cmpi	i, #return
000917:0x0019c970:	bge	0x19c9e0
000919:0x0019c978:	icall	
000919:0x0019c988:	movec	@c00, #return
000919:0x0019c998:	cmpmc	@c00, value
000919:0x0019c9a8:	bne	0x19c9d8
000921:0x0019c9b0:	icall	
000921:0x0019c9c0:	moves	ret, #return
000922:0x0019c9d0:	jump	0x19c9e0
000922:0x0019c9d8:	jump	0x19c940
000926:0x0019c9e0:	moves	#return, ret
000926:0x0019c9f0:	rts
000926:0x0019c9f8:	rts
map<string,BiosFriendInfo>::GetKeyByValueChecked()
000931:0x0019ca28:	imove	i, 0x000000
000931:0x0019ca38:	jump	0x19ca58
000931:0x0019ca40:	move	@m00, i
000931:0x0019ca50:	inc	i
000931:0x0019ca58:	ncalli	map<string,BiosFriendInfo>.Count()
000931:0x0019ca60:	cmpi	i, #return
000931:0x0019ca70:	bge	0x19cb00
000933:0x0019ca78:	icall	
000933:0x0019ca88:	movec	@c00, #return
000933:0x0019ca98:	cmpmc	@c00, value
000933:0x0019caa8:	bne	0x19caf8
000935:0x0019cab0:	icall	
000935:0x0019cac0:	moves	key, #return
000936:0x0019cad0:	imove	#return, 0x000001
000936:0x0019cae0:	moves	key, key
000936:0x0019caf0:	rts
000936:0x0019caf8:	jump	0x19ca40
000939:0x0019cb00:	imove	#return, 0x000000
000939:0x0019cb10:	moves	key, key
000939:0x0019cb20:	rts
000939:0x0019cb28:	moves	key, key
000939:0x0019cb38:	rts
map<string,@BiosFriendInfo>::GetKeyArray()
000885:0x0019ce88:	new	keys, array<string>
000886:0x0019cea8:	imove	i, 0x000000
000886:0x0019ceb8:	jump	0x19ced8
000886:0x0019cec0:	move	@m00, i
000886:0x0019ced0:	inc	i
000886:0x0019ced8:	ncalli	map<string,@BiosFriendInfo>.Count()
000886:0x0019cee0:	cmpi	i, #return
000886:0x0019cef0:	bge	0x19cf20
000888:0x0019cef8:	icall	
000888:0x0019cf08:	icall	
000888:0x0019cf18:	jump	0x19cec0
000890:0x0019cf20:	movem	#return, keys
000890:0x0019cf30:	release	keys
000890:0x0019cf38:	rts
000890:0x0019cf40:	release	keys
000890:0x0019cf48:	rts
map<string,@BiosFriendInfo>::GetValueArray()
000895:0x0019cfa0:	new	elements, array<BiosFriendInfo>
000896:0x0019cfc0:	imove	i, 0x000000
000896:0x0019cfd0:	jump	0x19cff0
000896:0x0019cfd8:	move	@m00, i
000896:0x0019cfe8:	inc	i
000896:0x0019cff0:	ncalli	map<string,@BiosFriendInfo>.Count()
000896:0x0019cff8:	cmpi	i, #return
000896:0x0019d008:	bge	0x19d038
000898:0x0019d010:	icall	
000898:0x0019d020:	icall	
000898:0x0019d030:	jump	0x19cfd8
000900:0x0019d038:	movem	#return, elements
000900:0x0019d048:	release	elements
000900:0x0019d050:	rts
000900:0x0019d058:	release	elements
000900:0x0019d060:	rts
map<string,@BiosFriendInfo>::ReplaceKey()
000905:0x0019d068:	icall	
000905:0x0019d078:	cmpi	#return, _i0
000905:0x0019d088:	beq	0x19d0d8
000907:0x0019d090:	icall	
000907:0x0019d0a0:	icall	
000908:0x0019d0b0:	icall	
000909:0x0019d0c0:	imove	#return, 0x000001
000909:0x0019d0d0:	rts
000911:0x0019d0d8:	imove	#return, 0x000000
000911:0x0019d0e8:	rts
000911:0x0019d0f0:	rts
map<string,@BiosFriendInfo>::GetKeyByValue()
000917:0x0019d148:	imove	i, 0x000000
000917:0x0019d158:	jump	0x19d178
000917:0x0019d160:	move	@m00, i
000917:0x0019d170:	inc	i
000917:0x0019d178:	ncalli	map<string,@BiosFriendInfo>.Count()
000917:0x0019d180:	cmpi	i, #return
000917:0x0019d190:	bge	0x19d200
000919:0x0019d198:	icall	
000919:0x0019d1a8:	movec	@c00, #return
000919:0x0019d1b8:	cmpmc	@c00, value
000919:0x0019d1c8:	bne	0x19d1f8
000921:0x0019d1d0:	icall	
000921:0x0019d1e0:	moves	ret, #return
000922:0x0019d1f0:	jump	0x19d200
000922:0x0019d1f8:	jump	0x19d160
000926:0x0019d200:	moves	#return, ret
000926:0x0019d210:	rts
000926:0x0019d218:	rts
map<string,@BiosFriendInfo>::GetKeyByValueChecked()
000931:0x0019d248:	imove	i, 0x000000
000931:0x0019d258:	jump	0x19d278
000931:0x0019d260:	move	@m00, i
000931:0x0019d270:	inc	i
000931:0x0019d278:	ncalli	map<string,@BiosFriendInfo>.Count()
000931:0x0019d280:	cmpi	i, #return
000931:0x0019d290:	bge	0x19d320
000933:0x0019d298:	icall	
000933:0x0019d2a8:	movec	@c00, #return
000933:0x0019d2b8:	cmpmc	@c00, value
000933:0x0019d2c8:	bne	0x19d318
000935:0x0019d2d0:	icall	
000935:0x0019d2e0:	moves	key, #return
000936:0x0019d2f0:	imove	#return, 0x000001
000936:0x0019d300:	moves	key, key
000936:0x0019d310:	rts
000936:0x0019d318:	jump	0x19d260
000939:0x0019d320:	imove	#return, 0x000000
000939:0x0019d330:	moves	key, key
000939:0x0019d340:	rts
000939:0x0019d348:	moves	key, key
000939:0x0019d358:	rts
array<array<@BiosPrivacyPermissionResult>>::InsertAll()
000427:0x0019e0d0:	imove	i, 0x000000
000427:0x0019e0e0:	jump	0x19e100
000427:0x0019e0e8:	move	@m00, i
000427:0x0019e0f8:	inc	i
000427:0x0019e100:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000427:0x0019e108:	cmpi	i, #return
000427:0x0019e118:	bge	0x19e148
000429:0x0019e120:	icall	
000429:0x0019e130:	icall	
000429:0x0019e140:	jump	0x19e0e8
000429:0x0019e148:	rts
array<array<@BiosPrivacyPermissionResult>>::RemoveItem()
000479:0x0019e178:	movefm	@c00, value
000479:0x0019e188:	icall	
000479:0x0019e198:	move	remove_index, #return
000481:0x0019e1a8:	cmpi	remove_index, _i0
000481:0x0019e1b8:	blt	0x19e1d0
000483:0x0019e1c0:	ncalli	array<array<@BiosPrivacyPermissionResult>>.RemoveOrdered(remove_index)
000483:0x0019e1d0:	rts
array<array<@BiosPrivacyPermissionResult>>::RemoveItemUnOrdered()
000489:0x0019e200:	movefm	@c00, value
000489:0x0019e210:	icall	
000489:0x0019e220:	move	remove_index, #return
000491:0x0019e230:	cmpi	remove_index, _i0
000491:0x0019e240:	blt	0x19e258
000493:0x0019e248:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Remove(remove_index)
000493:0x0019e258:	rts
array<array<@BiosPrivacyPermissionResult>>::IsValidIndex()
000499:0x0019e260:	cmpi	index, _i-1
000499:0x0019e270:	ble	0x19e2b0
000499:0x0019e278:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000499:0x0019e280:	cmpi	index, #return
000499:0x0019e290:	bge	0x19e2b0
000499:0x0019e298:	imove	#return, 0x000001
000499:0x0019e2a8:	jump	0x19e2c0
000499:0x0019e2b0:	imove	#return, 0x000000
000499:0x0019e2c0:	rts
000499:0x0019e2c8:	rts
array<array<@BiosPrivacyPermissionResult>>::Debug()
000525:0x0019e320:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000525:0x0019e328:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0019e358:	icall	Print(#return)
000526:0x0019e368:	imove	i, 0x000000
000526:0x0019e378:	jump	0x19e398
000526:0x0019e380:	move	@m00, i
000526:0x0019e390:	inc	i
000526:0x0019e398:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000526:0x0019e3a0:	cmpi	i, #return
000526:0x0019e3b0:	bge	0x19e428
000528:0x0019e3b8:	icall	
000528:0x0019e3c8:	movetm	item, #return
000529:0x0019e3d8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0019e408:	icall	Print(#return)
000529:0x0019e418:	release	item
000529:0x0019e420:	jump	0x19e380
000529:0x0019e428:	rts
array<array<@BiosPrivacyPermissionResult>>::GetRandomIndex()
000544:0x0019e430:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000544:0x0019e438:	move	@m00, #return
000544:0x0019e448:	cmpi	@m00, _i0
000544:0x0019e458:	ble	0x19e490
000546:0x0019e460:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000546:0x0019e468:	icall	RandomInt(_i0, #return)
000546:0x0019e478:	move	#return, #return
000546:0x0019e488:	rts
000549:0x0019e490:	imove	#return, 0xffffffff
000549:0x0019e4a0:	rts
000549:0x0019e4a8:	rts
array<array<@BiosPrivacyPermissionResult>>::GetRandomElement()
000563:0x0019e4b0:	call	
000563:0x0019e4c0:	icall	
000563:0x0019e4d0:	movetm	#return, #return
000563:0x0019e4e0:	rts
000563:0x0019e4e8:	rts
array<array<@BiosPrivacyPermissionResult>>::SwapItems()
000568:0x0019e518:	icall	
000568:0x0019e528:	movetm	item1, #return
000569:0x0019e538:	icall	
000569:0x0019e548:	icall	
000570:0x0019e558:	movefm	@c00, item1
000570:0x0019e568:	icall	
000570:0x0019e578:	release	item1
000570:0x0019e580:	rts
array<array<@BiosPrivacyPermissionResult>>::InsertArray()
000575:0x0019e5d8:	imove	i, 0x000000
000575:0x0019e5e8:	jump	0x19e608
000575:0x0019e5f0:	move	@m00, i
000575:0x0019e600:	inc	i
000575:0x0019e608:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000575:0x0019e610:	cmpi	i, #return
000575:0x0019e620:	bge	0x19e678
000577:0x0019e628:	icall	
000577:0x0019e638:	movetm	item, #return
000578:0x0019e648:	movefm	@c00, item
000578:0x0019e658:	icall	
000578:0x0019e668:	release	item
000578:0x0019e670:	jump	0x19e5f0
000578:0x0019e678:	rts
array<array<@BiosPrivacyPermissionResult>>::Invert()
000584:0x0019e6f8:	imove	left, 0x000000
000585:0x0019e708:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000585:0x0019e710:	subi	right, #return, _i1
000586:0x0019e720:	cmpi	right, _i0
000586:0x0019e730:	ble	0x19e7f0
000588:0x0019e738:	cmpi	left, right
000588:0x0019e748:	bge	0x19e7f0
000590:0x0019e750:	icall	
000590:0x0019e760:	movetm	temp, #return
000591:0x0019e770:	move	@m00, left
000591:0x0019e780:	inc	left
000591:0x0019e788:	icall	
000591:0x0019e798:	icall	
000592:0x0019e7a8:	move	@m00, right
000592:0x0019e7b8:	dec	right
000592:0x0019e7c0:	movefm	@c00, temp
000592:0x0019e7d0:	icall	
000592:0x0019e7e0:	release	temp
000592:0x0019e7e8:	jump	0x19e738
000592:0x0019e7f0:	rts
array<array<@BiosPrivacyPermissionResult>>::MoveIndex()
000612:0x0019e848:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000612:0x0019e850:	move	count, #return
000613:0x0019e860:	move	new_index, curr_index
000615:0x0019e870:	cmpi	move_number, _i0
000615:0x0019e880:	ble	0x19e8a8
000617:0x0019e888:	addi	@m00, curr_index, move_number
000617:0x0019e898:	move	new_index, @m00
000620:0x0019e8a8:	cmpi	move_number, _i0
000620:0x0019e8b8:	bge	0x19e960
000622:0x0019e8c0:	subi	@m00, curr_index, move_number
000622:0x0019e8d0:	move	new_index, @m00
000624:0x0019e8e0:	cmpi	new_index, _i0
000624:0x0019e8f0:	bge	0x19e960
000626:0x0019e8f8:	subi	@m01, _i0, count
000626:0x0019e908:	cmpi	new_index, @m01
000626:0x0019e918:	bgt	0x19e940
000628:0x0019e920:	modi	@m00, new_index, count
000628:0x0019e930:	move	new_index, @m00
000631:0x0019e940:	addi	@m00, new_index, count
000631:0x0019e950:	move	new_index, @m00
000635:0x0019e960:	cmpi	new_index, count
000635:0x0019e970:	blt	0x19e998
000637:0x0019e978:	modi	@m00, new_index, count
000637:0x0019e988:	move	new_index, @m00
000641:0x0019e998:	move	#return, new_index
000641:0x0019e9a8:	rts
000641:0x0019e9b0:	rts
array<array<@BiosPrivacyPermissionResult>>::ShuffleArray()
000646:0x0019e9e0:	imove	i, 0x000000
000646:0x0019e9f0:	jump	0x19ea10
000646:0x0019e9f8:	move	@m00, i
000646:0x0019ea08:	inc	i
000646:0x0019ea10:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000646:0x0019ea18:	cmpi	i, #return
000646:0x0019ea28:	bge	0x19ea60
000648:0x0019ea30:	call	
000648:0x0019ea40:	call	
000648:0x0019ea58:	jump	0x19e9f8
000648:0x0019ea60:	rts
array<array<@BiosPrivacyPermissionResult>>::DifferentAtPosition()
000666:0x0019ea90:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000666:0x0019ea98:	move	@m00, #return
000666:0x0019eaa8:	push	#return
000666:0x0019eab0:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000666:0x0019eab8:	move	@m02, #return
000666:0x0019eac8:	pop	#return
000666:0x0019ead0:	cmpi	@m00, @m02
000666:0x0019eae0:	beq	0x19eb10
000668:0x0019eae8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0019eaf8:	imove	#return, 0xffffffff
000669:0x0019eb08:	rts
000672:0x0019eb10:	imove	i, 0x000000
000672:0x0019eb20:	jump	0x19eb30
000672:0x0019eb28:	inc	i
000672:0x0019eb30:	ncalli	array<array<@BiosPrivacyPermissionResult>>.Count()
000672:0x0019eb38:	cmpi	i, #return
000672:0x0019eb48:	bge	0x19ebd8
000674:0x0019eb50:	icall	
000674:0x0019eb60:	movec	@c00, #return
000674:0x0019eb70:	pushc	#return
000674:0x0019eb78:	icall	
000674:0x0019eb88:	movec	@c02, #return
000674:0x0019eb98:	popc	#return
000674:0x0019eba0:	cmpc	@c00, @c02
000674:0x0019ebb0:	beq	0x19ebd0
000676:0x0019ebb8:	move	#return, i
000676:0x0019ebc8:	rts
000676:0x0019ebd0:	jump	0x19eb28
000680:0x0019ebd8:	imove	#return, 0xffffffff
000680:0x0019ebe8:	rts
000680:0x0019ebf0:	rts
map<string,array<@BiosPrivacyPermissionResult>>::GetKeyArray()
000885:0x0019eef0:	new	keys, array<string>
000886:0x0019ef10:	imove	i, 0x000000
000886:0x0019ef20:	jump	0x19ef40
000886:0x0019ef28:	move	@m00, i
000886:0x0019ef38:	inc	i
000886:0x0019ef40:	ncalli	map<string,array<@BiosPrivacyPermissionResult>>.Count()
000886:0x0019ef48:	cmpi	i, #return
000886:0x0019ef58:	bge	0x19ef88
000888:0x0019ef60:	icall	
000888:0x0019ef70:	icall	
000888:0x0019ef80:	jump	0x19ef28
000890:0x0019ef88:	movem	#return, keys
000890:0x0019ef98:	release	keys
000890:0x0019efa0:	rts
000890:0x0019efa8:	release	keys
000890:0x0019efb0:	rts
map<string,array<@BiosPrivacyPermissionResult>>::GetValueArray()
000895:0x0019f008:	new	elements, array<array<@BiosPrivacyPermissionResult>>
000896:0x0019f028:	imove	i, 0x000000
000896:0x0019f038:	jump	0x19f058
000896:0x0019f040:	move	@m00, i
000896:0x0019f050:	inc	i
000896:0x0019f058:	ncalli	map<string,array<@BiosPrivacyPermissionResult>>.Count()
000896:0x0019f060:	cmpi	i, #return
000896:0x0019f070:	bge	0x19f0a0
000898:0x0019f078:	icall	
000898:0x0019f088:	icall	
000898:0x0019f098:	jump	0x19f040
000900:0x0019f0a0:	movem	#return, elements
000900:0x0019f0b0:	release	elements
000900:0x0019f0b8:	rts
000900:0x0019f0c0:	release	elements
000900:0x0019f0c8:	rts
map<string,array<@BiosPrivacyPermissionResult>>::ReplaceKey()
000905:0x0019f0d0:	icall	
000905:0x0019f0e0:	cmpi	#return, _i0
000905:0x0019f0f0:	beq	0x19f140
000907:0x0019f0f8:	icall	
000907:0x0019f108:	icall	
000908:0x0019f118:	icall	
000909:0x0019f128:	imove	#return, 0x000001
000909:0x0019f138:	rts
000911:0x0019f140:	imove	#return, 0x000000
000911:0x0019f150:	rts
000911:0x0019f158:	rts
map<string,array<@BiosPrivacyPermissionResult>>::GetKeyByValue()
000917:0x0019f1b0:	imove	i, 0x000000
000917:0x0019f1c0:	jump	0x19f1e0
000917:0x0019f1c8:	move	@m00, i
000917:0x0019f1d8:	inc	i
000917:0x0019f1e0:	ncalli	map<string,array<@BiosPrivacyPermissionResult>>.Count()
000917:0x0019f1e8:	cmpi	i, #return
000917:0x0019f1f8:	bge	0x19f268
000919:0x0019f200:	icall	
000919:0x0019f210:	movec	@c00, #return
000919:0x0019f220:	cmpmc	@c00, value
000919:0x0019f230:	bne	0x19f260
000921:0x0019f238:	icall	
000921:0x0019f248:	moves	ret, #return
000922:0x0019f258:	jump	0x19f268
000922:0x0019f260:	jump	0x19f1c8
000926:0x0019f268:	moves	#return, ret
000926:0x0019f278:	rts
000926:0x0019f280:	rts
map<string,array<@BiosPrivacyPermissionResult>>::GetKeyByValueChecked()
000931:0x0019f2b0:	imove	i, 0x000000
000931:0x0019f2c0:	jump	0x19f2e0
000931:0x0019f2c8:	move	@m00, i
000931:0x0019f2d8:	inc	i
000931:0x0019f2e0:	ncalli	map<string,array<@BiosPrivacyPermissionResult>>.Count()
000931:0x0019f2e8:	cmpi	i, #return
000931:0x0019f2f8:	bge	0x19f388
000933:0x0019f300:	icall	
000933:0x0019f310:	movec	@c00, #return
000933:0x0019f320:	cmpmc	@c00, value
000933:0x0019f330:	bne	0x19f380
000935:0x0019f338:	icall	
000935:0x0019f348:	moves	key, #return
000936:0x0019f358:	imove	#return, 0x000001
000936:0x0019f368:	moves	key, key
000936:0x0019f378:	rts
000936:0x0019f380:	jump	0x19f2c8
000939:0x0019f388:	imove	#return, 0x000000
000939:0x0019f398:	moves	key, key
000939:0x0019f3a8:	rts
000939:0x0019f3b0:	moves	key, key
000939:0x0019f3c0:	rts
map<string,@array<@BiosPrivacyPermissionResult>>::GetKeyArray()
000885:0x0019f710:	new	keys, array<string>
000886:0x0019f730:	imove	i, 0x000000
000886:0x0019f740:	jump	0x19f760
000886:0x0019f748:	move	@m00, i
000886:0x0019f758:	inc	i
000886:0x0019f760:	ncalli	map<string,@array<@BiosPrivacyPermissionResult>>.Count()
000886:0x0019f768:	cmpi	i, #return
000886:0x0019f778:	bge	0x19f7a8
000888:0x0019f780:	icall	
000888:0x0019f790:	icall	
000888:0x0019f7a0:	jump	0x19f748
000890:0x0019f7a8:	movem	#return, keys
000890:0x0019f7b8:	release	keys
000890:0x0019f7c0:	rts
000890:0x0019f7c8:	release	keys
000890:0x0019f7d0:	rts
map<string,@array<@BiosPrivacyPermissionResult>>::GetValueArray()
000895:0x0019f828:	new	elements, array<array<@BiosPrivacyPermissionResult>>
000896:0x0019f848:	imove	i, 0x000000
000896:0x0019f858:	jump	0x19f878
000896:0x0019f860:	move	@m00, i
000896:0x0019f870:	inc	i
000896:0x0019f878:	ncalli	map<string,@array<@BiosPrivacyPermissionResult>>.Count()
000896:0x0019f880:	cmpi	i, #return
000896:0x0019f890:	bge	0x19f8c0
000898:0x0019f898:	icall	
000898:0x0019f8a8:	icall	
000898:0x0019f8b8:	jump	0x19f860
000900:0x0019f8c0:	movem	#return, elements
000900:0x0019f8d0:	release	elements
000900:0x0019f8d8:	rts
000900:0x0019f8e0:	release	elements
000900:0x0019f8e8:	rts
map<string,@array<@BiosPrivacyPermissionResult>>::ReplaceKey()
000905:0x0019f8f0:	icall	
000905:0x0019f900:	cmpi	#return, _i0
000905:0x0019f910:	beq	0x19f960
000907:0x0019f918:	icall	
000907:0x0019f928:	icall	
000908:0x0019f938:	icall	
000909:0x0019f948:	imove	#return, 0x000001
000909:0x0019f958:	rts
000911:0x0019f960:	imove	#return, 0x000000
000911:0x0019f970:	rts
000911:0x0019f978:	rts
map<string,@array<@BiosPrivacyPermissionResult>>::GetKeyByValue()
000917:0x0019f9d0:	imove	i, 0x000000
000917:0x0019f9e0:	jump	0x19fa00
000917:0x0019f9e8:	move	@m00, i
000917:0x0019f9f8:	inc	i
000917:0x0019fa00:	ncalli	map<string,@array<@BiosPrivacyPermissionResult>>.Count()
000917:0x0019fa08:	cmpi	i, #return
000917:0x0019fa18:	bge	0x19fa88
000919:0x0019fa20:	icall	
000919:0x0019fa30:	movec	@c00, #return
000919:0x0019fa40:	cmpmc	@c00, value
000919:0x0019fa50:	bne	0x19fa80
000921:0x0019fa58:	icall	
000921:0x0019fa68:	moves	ret, #return
000922:0x0019fa78:	jump	0x19fa88
000922:0x0019fa80:	jump	0x19f9e8
000926:0x0019fa88:	moves	#return, ret
000926:0x0019fa98:	rts
000926:0x0019faa0:	rts
map<string,@array<@BiosPrivacyPermissionResult>>::GetKeyByValueChecked()
000931:0x0019fad0:	imove	i, 0x000000
000931:0x0019fae0:	jump	0x19fb00
000931:0x0019fae8:	move	@m00, i
000931:0x0019faf8:	inc	i
000931:0x0019fb00:	ncalli	map<string,@array<@BiosPrivacyPermissionResult>>.Count()
000931:0x0019fb08:	cmpi	i, #return
000931:0x0019fb18:	bge	0x19fba8
000933:0x0019fb20:	icall	
000933:0x0019fb30:	movec	@c00, #return
000933:0x0019fb40:	cmpmc	@c00, value
000933:0x0019fb50:	bne	0x19fba0
000935:0x0019fb58:	icall	
000935:0x0019fb68:	moves	key, #return
000936:0x0019fb78:	imove	#return, 0x000001
000936:0x0019fb88:	moves	key, key
000936:0x0019fb98:	rts
000936:0x0019fba0:	jump	0x19fae8
000939:0x0019fba8:	imove	#return, 0x000000
000939:0x0019fbb8:	moves	key, key
000939:0x0019fbc8:	rts
000939:0x0019fbd0:	moves	key, key
000939:0x0019fbe0:	rts
array<Param4<string,string,int,int>>::InsertAll()
000427:0x001a0428:	imove	i, 0x000000
000427:0x001a0438:	jump	0x1a0458
000427:0x001a0440:	move	@m00, i
000427:0x001a0450:	inc	i
000427:0x001a0458:	ncalli	array<Param4<string,string,int,int>>.Count()
000427:0x001a0460:	cmpi	i, #return
000427:0x001a0470:	bge	0x1a04a0
000429:0x001a0478:	icall	
000429:0x001a0488:	icall	
000429:0x001a0498:	jump	0x1a0440
000429:0x001a04a0:	rts
array<Param4<string,string,int,int>>::RemoveItem()
000479:0x001a04d0:	movefm	@c00, value
000479:0x001a04e0:	icall	
000479:0x001a04f0:	move	remove_index, #return
000481:0x001a0500:	cmpi	remove_index, _i0
000481:0x001a0510:	blt	0x1a0528
000483:0x001a0518:	ncalli	array<Param4<string,string,int,int>>.RemoveOrdered(remove_index)
000483:0x001a0528:	rts
array<Param4<string,string,int,int>>::RemoveItemUnOrdered()
000489:0x001a0558:	movefm	@c00, value
000489:0x001a0568:	icall	
000489:0x001a0578:	move	remove_index, #return
000491:0x001a0588:	cmpi	remove_index, _i0
000491:0x001a0598:	blt	0x1a05b0
000493:0x001a05a0:	ncalli	array<Param4<string,string,int,int>>.Remove(remove_index)
000493:0x001a05b0:	rts
array<Param4<string,string,int,int>>::IsValidIndex()
000499:0x001a05b8:	cmpi	index, _i-1
000499:0x001a05c8:	ble	0x1a0608
000499:0x001a05d0:	ncalli	array<Param4<string,string,int,int>>.Count()
000499:0x001a05d8:	cmpi	index, #return
000499:0x001a05e8:	bge	0x1a0608
000499:0x001a05f0:	imove	#return, 0x000001
000499:0x001a0600:	jump	0x1a0618
000499:0x001a0608:	imove	#return, 0x000000
000499:0x001a0618:	rts
000499:0x001a0620:	rts
array<Param4<string,string,int,int>>::Debug()
000525:0x001a0678:	ncalli	array<Param4<string,string,int,int>>.Count()
000525:0x001a0680:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001a06b0:	icall	Print(#return)
000526:0x001a06c0:	imove	i, 0x000000
000526:0x001a06d0:	jump	0x1a06f0
000526:0x001a06d8:	move	@m00, i
000526:0x001a06e8:	inc	i
000526:0x001a06f0:	ncalli	array<Param4<string,string,int,int>>.Count()
000526:0x001a06f8:	cmpi	i, #return
000526:0x001a0708:	bge	0x1a0780
000528:0x001a0710:	icall	
000528:0x001a0720:	movetm	item, #return
000529:0x001a0730:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001a0760:	icall	Print(#return)
000529:0x001a0770:	release	item
000529:0x001a0778:	jump	0x1a06d8
000529:0x001a0780:	rts
array<Param4<string,string,int,int>>::GetRandomIndex()
000544:0x001a0788:	ncalli	array<Param4<string,string,int,int>>.Count()
000544:0x001a0790:	move	@m00, #return
000544:0x001a07a0:	cmpi	@m00, _i0
000544:0x001a07b0:	ble	0x1a07e8
000546:0x001a07b8:	ncalli	array<Param4<string,string,int,int>>.Count()
000546:0x001a07c0:	icall	RandomInt(_i0, #return)
000546:0x001a07d0:	move	#return, #return
000546:0x001a07e0:	rts
000549:0x001a07e8:	imove	#return, 0xffffffff
000549:0x001a07f8:	rts
000549:0x001a0800:	rts
array<Param4<string,string,int,int>>::GetRandomElement()
000563:0x001a0808:	call	
000563:0x001a0818:	icall	
000563:0x001a0828:	movetm	#return, #return
000563:0x001a0838:	rts
000563:0x001a0840:	rts
array<Param4<string,string,int,int>>::SwapItems()
000568:0x001a0870:	icall	
000568:0x001a0880:	movetm	item1, #return
000569:0x001a0890:	icall	
000569:0x001a08a0:	icall	
000570:0x001a08b0:	movefm	@c00, item1
000570:0x001a08c0:	icall	
000570:0x001a08d0:	release	item1
000570:0x001a08d8:	rts
array<Param4<string,string,int,int>>::InsertArray()
000575:0x001a0930:	imove	i, 0x000000
000575:0x001a0940:	jump	0x1a0960
000575:0x001a0948:	move	@m00, i
000575:0x001a0958:	inc	i
000575:0x001a0960:	ncalli	array<Param4<string,string,int,int>>.Count()
000575:0x001a0968:	cmpi	i, #return
000575:0x001a0978:	bge	0x1a09d0
000577:0x001a0980:	icall	
000577:0x001a0990:	movetm	item, #return
000578:0x001a09a0:	movefm	@c00, item
000578:0x001a09b0:	icall	
000578:0x001a09c0:	release	item
000578:0x001a09c8:	jump	0x1a0948
000578:0x001a09d0:	rts
array<Param4<string,string,int,int>>::Invert()
000584:0x001a0a50:	imove	left, 0x000000
000585:0x001a0a60:	ncalli	array<Param4<string,string,int,int>>.Count()
000585:0x001a0a68:	subi	right, #return, _i1
000586:0x001a0a78:	cmpi	right, _i0
000586:0x001a0a88:	ble	0x1a0b48
000588:0x001a0a90:	cmpi	left, right
000588:0x001a0aa0:	bge	0x1a0b48
000590:0x001a0aa8:	icall	
000590:0x001a0ab8:	movetm	temp, #return
000591:0x001a0ac8:	move	@m00, left
000591:0x001a0ad8:	inc	left
000591:0x001a0ae0:	icall	
000591:0x001a0af0:	icall	
000592:0x001a0b00:	move	@m00, right
000592:0x001a0b10:	dec	right
000592:0x001a0b18:	movefm	@c00, temp
000592:0x001a0b28:	icall	
000592:0x001a0b38:	release	temp
000592:0x001a0b40:	jump	0x1a0a90
000592:0x001a0b48:	rts
array<Param4<string,string,int,int>>::MoveIndex()
000612:0x001a0ba0:	ncalli	array<Param4<string,string,int,int>>.Count()
000612:0x001a0ba8:	move	count, #return
000613:0x001a0bb8:	move	new_index, curr_index
000615:0x001a0bc8:	cmpi	move_number, _i0
000615:0x001a0bd8:	ble	0x1a0c00
000617:0x001a0be0:	addi	@m00, curr_index, move_number
000617:0x001a0bf0:	move	new_index, @m00
000620:0x001a0c00:	cmpi	move_number, _i0
000620:0x001a0c10:	bge	0x1a0cb8
000622:0x001a0c18:	subi	@m00, curr_index, move_number
000622:0x001a0c28:	move	new_index, @m00
000624:0x001a0c38:	cmpi	new_index, _i0
000624:0x001a0c48:	bge	0x1a0cb8
000626:0x001a0c50:	subi	@m01, _i0, count
000626:0x001a0c60:	cmpi	new_index, @m01
000626:0x001a0c70:	bgt	0x1a0c98
000628:0x001a0c78:	modi	@m00, new_index, count
000628:0x001a0c88:	move	new_index, @m00
000631:0x001a0c98:	addi	@m00, new_index, count
000631:0x001a0ca8:	move	new_index, @m00
000635:0x001a0cb8:	cmpi	new_index, count
000635:0x001a0cc8:	blt	0x1a0cf0
000637:0x001a0cd0:	modi	@m00, new_index, count
000637:0x001a0ce0:	move	new_index, @m00
000641:0x001a0cf0:	move	#return, new_index
000641:0x001a0d00:	rts
000641:0x001a0d08:	rts
array<Param4<string,string,int,int>>::ShuffleArray()
000646:0x001a0d38:	imove	i, 0x000000
000646:0x001a0d48:	jump	0x1a0d68
000646:0x001a0d50:	move	@m00, i
000646:0x001a0d60:	inc	i
000646:0x001a0d68:	ncalli	array<Param4<string,string,int,int>>.Count()
000646:0x001a0d70:	cmpi	i, #return
000646:0x001a0d80:	bge	0x1a0db8
000648:0x001a0d88:	call	
000648:0x001a0d98:	call	
000648:0x001a0db0:	jump	0x1a0d50
000648:0x001a0db8:	rts
array<Param4<string,string,int,int>>::DifferentAtPosition()
000666:0x001a0de8:	ncalli	array<Param4<string,string,int,int>>.Count()
000666:0x001a0df0:	move	@m00, #return
000666:0x001a0e00:	push	#return
000666:0x001a0e08:	ncalli	array<Param4<string,string,int,int>>.Count()
000666:0x001a0e10:	move	@m02, #return
000666:0x001a0e20:	pop	#return
000666:0x001a0e28:	cmpi	@m00, @m02
000666:0x001a0e38:	beq	0x1a0e68
000668:0x001a0e40:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001a0e50:	imove	#return, 0xffffffff
000669:0x001a0e60:	rts
000672:0x001a0e68:	imove	i, 0x000000
000672:0x001a0e78:	jump	0x1a0e88
000672:0x001a0e80:	inc	i
000672:0x001a0e88:	ncalli	array<Param4<string,string,int,int>>.Count()
000672:0x001a0e90:	cmpi	i, #return
000672:0x001a0ea0:	bge	0x1a0f30
000674:0x001a0ea8:	icall	
000674:0x001a0eb8:	movec	@c00, #return
000674:0x001a0ec8:	pushc	#return
000674:0x001a0ed0:	icall	
000674:0x001a0ee0:	movec	@c02, #return
000674:0x001a0ef0:	popc	#return
000674:0x001a0ef8:	cmpc	@c00, @c02
000674:0x001a0f08:	beq	0x1a0f28
000676:0x001a0f10:	move	#return, i
000676:0x001a0f20:	rts
000676:0x001a0f28:	jump	0x1a0e80
000680:0x001a0f30:	imove	#return, 0xffffffff
000680:0x001a0f40:	rts
000680:0x001a0f48:	rts
array<@Param4<string,string,int,int>>::InsertAll()
000427:0x001a1360:	imove	i, 0x000000
000427:0x001a1370:	jump	0x1a1390
000427:0x001a1378:	move	@m00, i
000427:0x001a1388:	inc	i
000427:0x001a1390:	ncalli	array<Param4<string,string,int,int>>.Count()
000427:0x001a1398:	cmpi	i, #return
000427:0x001a13a8:	bge	0x1a13d8
000429:0x001a13b0:	icall	
000429:0x001a13c0:	icall	
000429:0x001a13d0:	jump	0x1a1378
000429:0x001a13d8:	rts
array<@Param4<string,string,int,int>>::RemoveItem()
000479:0x001a1408:	movefm	@c00, value
000479:0x001a1418:	icall	
000479:0x001a1428:	move	remove_index, #return
000481:0x001a1438:	cmpi	remove_index, _i0
000481:0x001a1448:	blt	0x1a1460
000483:0x001a1450:	ncalli	array<@Param4<string,string,int,int>>.RemoveOrdered(remove_index)
000483:0x001a1460:	rts
array<@Param4<string,string,int,int>>::RemoveItemUnOrdered()
000489:0x001a1490:	movefm	@c00, value
000489:0x001a14a0:	icall	
000489:0x001a14b0:	move	remove_index, #return
000491:0x001a14c0:	cmpi	remove_index, _i0
000491:0x001a14d0:	blt	0x1a14e8
000493:0x001a14d8:	ncalli	array<@Param4<string,string,int,int>>.Remove(remove_index)
000493:0x001a14e8:	rts
array<@Param4<string,string,int,int>>::IsValidIndex()
000499:0x001a14f0:	cmpi	index, _i-1
000499:0x001a1500:	ble	0x1a1540
000499:0x001a1508:	ncalli	array<@Param4<string,string,int,int>>.Count()
000499:0x001a1510:	cmpi	index, #return
000499:0x001a1520:	bge	0x1a1540
000499:0x001a1528:	imove	#return, 0x000001
000499:0x001a1538:	jump	0x1a1550
000499:0x001a1540:	imove	#return, 0x000000
000499:0x001a1550:	rts
000499:0x001a1558:	rts
array<@Param4<string,string,int,int>>::Debug()
000525:0x001a15b0:	ncalli	array<@Param4<string,string,int,int>>.Count()
000525:0x001a15b8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001a15e8:	icall	Print(#return)
000526:0x001a15f8:	imove	i, 0x000000
000526:0x001a1608:	jump	0x1a1628
000526:0x001a1610:	move	@m00, i
000526:0x001a1620:	inc	i
000526:0x001a1628:	ncalli	array<@Param4<string,string,int,int>>.Count()
000526:0x001a1630:	cmpi	i, #return
000526:0x001a1640:	bge	0x1a16b8
000528:0x001a1648:	icall	
000528:0x001a1658:	movetm	item, #return
000529:0x001a1668:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001a1698:	icall	Print(#return)
000529:0x001a16a8:	release	item
000529:0x001a16b0:	jump	0x1a1610
000529:0x001a16b8:	rts
array<@Param4<string,string,int,int>>::GetRandomIndex()
000544:0x001a16c0:	ncalli	array<@Param4<string,string,int,int>>.Count()
000544:0x001a16c8:	move	@m00, #return
000544:0x001a16d8:	cmpi	@m00, _i0
000544:0x001a16e8:	ble	0x1a1720
000546:0x001a16f0:	ncalli	array<@Param4<string,string,int,int>>.Count()
000546:0x001a16f8:	icall	RandomInt(_i0, #return)
000546:0x001a1708:	move	#return, #return
000546:0x001a1718:	rts
000549:0x001a1720:	imove	#return, 0xffffffff
000549:0x001a1730:	rts
000549:0x001a1738:	rts
array<@Param4<string,string,int,int>>::GetRandomElement()
000563:0x001a1740:	call	
000563:0x001a1750:	icall	
000563:0x001a1760:	movetm	#return, #return
000563:0x001a1770:	rts
000563:0x001a1778:	rts
array<@Param4<string,string,int,int>>::SwapItems()
000568:0x001a17a8:	icall	
000568:0x001a17b8:	movetm	item1, #return
000569:0x001a17c8:	icall	
000569:0x001a17d8:	icall	
000570:0x001a17e8:	movefm	@c00, item1
000570:0x001a17f8:	icall	
000570:0x001a1808:	release	item1
000570:0x001a1810:	rts
array<@Param4<string,string,int,int>>::InsertArray()
000575:0x001a1868:	imove	i, 0x000000
000575:0x001a1878:	jump	0x1a1898
000575:0x001a1880:	move	@m00, i
000575:0x001a1890:	inc	i
000575:0x001a1898:	ncalli	array<Param4<string,string,int,int>>.Count()
000575:0x001a18a0:	cmpi	i, #return
000575:0x001a18b0:	bge	0x1a1908
000577:0x001a18b8:	icall	
000577:0x001a18c8:	movetm	item, #return
000578:0x001a18d8:	movefm	@c00, item
000578:0x001a18e8:	icall	
000578:0x001a18f8:	release	item
000578:0x001a1900:	jump	0x1a1880
000578:0x001a1908:	rts
array<@Param4<string,string,int,int>>::Invert()
000584:0x001a1988:	imove	left, 0x000000
000585:0x001a1998:	ncalli	array<@Param4<string,string,int,int>>.Count()
000585:0x001a19a0:	subi	right, #return, _i1
000586:0x001a19b0:	cmpi	right, _i0
000586:0x001a19c0:	ble	0x1a1a80
000588:0x001a19c8:	cmpi	left, right
000588:0x001a19d8:	bge	0x1a1a80
000590:0x001a19e0:	icall	
000590:0x001a19f0:	movetm	temp, #return
000591:0x001a1a00:	move	@m00, left
000591:0x001a1a10:	inc	left
000591:0x001a1a18:	icall	
000591:0x001a1a28:	icall	
000592:0x001a1a38:	move	@m00, right
000592:0x001a1a48:	dec	right
000592:0x001a1a50:	movefm	@c00, temp
000592:0x001a1a60:	icall	
000592:0x001a1a70:	release	temp
000592:0x001a1a78:	jump	0x1a19c8
000592:0x001a1a80:	rts
array<@Param4<string,string,int,int>>::MoveIndex()
000612:0x001a1ad8:	ncalli	array<@Param4<string,string,int,int>>.Count()
000612:0x001a1ae0:	move	count, #return
000613:0x001a1af0:	move	new_index, curr_index
000615:0x001a1b00:	cmpi	move_number, _i0
000615:0x001a1b10:	ble	0x1a1b38
000617:0x001a1b18:	addi	@m00, curr_index, move_number
000617:0x001a1b28:	move	new_index, @m00
000620:0x001a1b38:	cmpi	move_number, _i0
000620:0x001a1b48:	bge	0x1a1bf0
000622:0x001a1b50:	subi	@m00, curr_index, move_number
000622:0x001a1b60:	move	new_index, @m00
000624:0x001a1b70:	cmpi	new_index, _i0
000624:0x001a1b80:	bge	0x1a1bf0
000626:0x001a1b88:	subi	@m01, _i0, count
000626:0x001a1b98:	cmpi	new_index, @m01
000626:0x001a1ba8:	bgt	0x1a1bd0
000628:0x001a1bb0:	modi	@m00, new_index, count
000628:0x001a1bc0:	move	new_index, @m00
000631:0x001a1bd0:	addi	@m00, new_index, count
000631:0x001a1be0:	move	new_index, @m00
000635:0x001a1bf0:	cmpi	new_index, count
000635:0x001a1c00:	blt	0x1a1c28
000637:0x001a1c08:	modi	@m00, new_index, count
000637:0x001a1c18:	move	new_index, @m00
000641:0x001a1c28:	move	#return, new_index
000641:0x001a1c38:	rts
000641:0x001a1c40:	rts
array<@Param4<string,string,int,int>>::ShuffleArray()
000646:0x001a1c70:	imove	i, 0x000000
000646:0x001a1c80:	jump	0x1a1ca0
000646:0x001a1c88:	move	@m00, i
000646:0x001a1c98:	inc	i
000646:0x001a1ca0:	ncalli	array<@Param4<string,string,int,int>>.Count()
000646:0x001a1ca8:	cmpi	i, #return
000646:0x001a1cb8:	bge	0x1a1cf0
000648:0x001a1cc0:	call	
000648:0x001a1cd0:	call	
000648:0x001a1ce8:	jump	0x1a1c88
000648:0x001a1cf0:	rts
array<@Param4<string,string,int,int>>::DifferentAtPosition()
000666:0x001a1d20:	ncalli	array<@Param4<string,string,int,int>>.Count()
000666:0x001a1d28:	move	@m00, #return
000666:0x001a1d38:	ncalli	array<Param4<string,string,int,int>>.Count()
000666:0x001a1d40:	cmpi	@m00, #return
000666:0x001a1d50:	beq	0x1a1d80
000668:0x001a1d58:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001a1d68:	imove	#return, 0xffffffff
000669:0x001a1d78:	rts
000672:0x001a1d80:	imove	i, 0x000000
000672:0x001a1d90:	jump	0x1a1da0
000672:0x001a1d98:	inc	i
000672:0x001a1da0:	ncalli	array<Param4<string,string,int,int>>.Count()
000672:0x001a1da8:	cmpi	i, #return
000672:0x001a1db8:	bge	0x1a1e28
000674:0x001a1dc0:	icall	
000674:0x001a1dd0:	movec	@c00, #return
000674:0x001a1de0:	icall	
000674:0x001a1df0:	cmpc	@c00, #return
000674:0x001a1e00:	beq	0x1a1e20
000676:0x001a1e08:	move	#return, i
000676:0x001a1e18:	rts
000676:0x001a1e20:	jump	0x1a1d98
000680:0x001a1e28:	imove	#return, 0xffffffff
000680:0x001a1e38:	rts
000680:0x001a1e40:	rts
array<PIXEL>::InsertAll()
000427:0x001a2438:	imove	i, 0x000000
000427:0x001a2448:	jump	0x1a2468
000427:0x001a2450:	move	@m00, i
000427:0x001a2460:	inc	i
000427:0x001a2468:	ncalli	array<PIXEL>.Count()
000427:0x001a2470:	cmpi	i, #return
000427:0x001a2480:	bge	0x1a24b0
000429:0x001a2488:	icall	
000429:0x001a2498:	icall	
000429:0x001a24a8:	jump	0x1a2450
000429:0x001a24b0:	rts
array<PIXEL>::RemoveItem()
000479:0x001a24e0:	icall	
000479:0x001a24f0:	move	remove_index, #return
000481:0x001a2500:	cmpi	remove_index, _i0
000481:0x001a2510:	blt	0x1a2528
000483:0x001a2518:	ncalli	array<PIXEL>.RemoveOrdered(remove_index)
000483:0x001a2528:	rts
array<PIXEL>::RemoveItemUnOrdered()
000489:0x001a2558:	icall	
000489:0x001a2568:	move	remove_index, #return
000491:0x001a2578:	cmpi	remove_index, _i0
000491:0x001a2588:	blt	0x1a25a0
000493:0x001a2590:	ncalli	array<PIXEL>.Remove(remove_index)
000493:0x001a25a0:	rts
array<PIXEL>::IsValidIndex()
000499:0x001a25a8:	cmpi	index, _i-1
000499:0x001a25b8:	ble	0x1a25f8
000499:0x001a25c0:	ncalli	array<PIXEL>.Count()
000499:0x001a25c8:	cmpi	index, #return
000499:0x001a25d8:	bge	0x1a25f8
000499:0x001a25e0:	imove	#return, 0x000001
000499:0x001a25f0:	jump	0x1a2608
000499:0x001a25f8:	imove	#return, 0x000000
000499:0x001a2608:	rts
000499:0x001a2610:	rts
array<PIXEL>::Debug()
000525:0x001a2668:	ncalli	array<PIXEL>.Count()
000525:0x001a2670:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001a26a0:	icall	Print(#return)
000526:0x001a26b0:	imove	i, 0x000000
000526:0x001a26c0:	jump	0x1a26e0
000526:0x001a26c8:	move	@m00, i
000526:0x001a26d8:	inc	i
000526:0x001a26e0:	ncalli	array<PIXEL>.Count()
000526:0x001a26e8:	cmpi	i, #return
000526:0x001a26f8:	bge	0x1a2768
000528:0x001a2700:	icall	
000528:0x001a2710:	move	item, #return
000529:0x001a2720:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001a2750:	icall	Print(#return)
000529:0x001a2760:	jump	0x1a26c8
000529:0x001a2768:	rts
array<PIXEL>::GetRandomIndex()
000544:0x001a2770:	ncalli	array<PIXEL>.Count()
000544:0x001a2778:	move	@m00, #return
000544:0x001a2788:	cmpi	@m00, _i0
000544:0x001a2798:	ble	0x1a27d0
000546:0x001a27a0:	ncalli	array<PIXEL>.Count()
000546:0x001a27a8:	icall	RandomInt(_i0, #return)
000546:0x001a27b8:	move	#return, #return
000546:0x001a27c8:	rts
000549:0x001a27d0:	imove	#return, 0xffffffff
000549:0x001a27e0:	rts
000549:0x001a27e8:	rts
array<PIXEL>::GetRandomElement()
000563:0x001a27f0:	call	
000563:0x001a2800:	icall	
000563:0x001a2810:	move	#return, #return
000563:0x001a2820:	rts
000563:0x001a2828:	rts
array<PIXEL>::SwapItems()
000568:0x001a2858:	icall	
000568:0x001a2868:	move	item1, #return
000569:0x001a2878:	icall	
000569:0x001a2888:	icall	
000570:0x001a2898:	icall	
000570:0x001a28a8:	rts
array<PIXEL>::InsertArray()
000575:0x001a2900:	imove	i, 0x000000
000575:0x001a2910:	jump	0x1a2930
000575:0x001a2918:	move	@m00, i
000575:0x001a2928:	inc	i
000575:0x001a2930:	ncalli	array<PIXEL>.Count()
000575:0x001a2938:	cmpi	i, #return
000575:0x001a2948:	bge	0x1a2988
000577:0x001a2950:	icall	
000577:0x001a2960:	move	item, #return
000578:0x001a2970:	icall	
000578:0x001a2980:	jump	0x1a2918
000578:0x001a2988:	rts
array<PIXEL>::Invert()
000584:0x001a2a08:	imove	left, 0x000000
000585:0x001a2a18:	ncalli	array<PIXEL>.Count()
000585:0x001a2a20:	subi	right, #return, _i1
000586:0x001a2a30:	cmpi	right, _i0
000586:0x001a2a40:	ble	0x1a2ae8
000588:0x001a2a48:	cmpi	left, right
000588:0x001a2a58:	bge	0x1a2ae8
000590:0x001a2a60:	icall	
000590:0x001a2a70:	move	temp, #return
000591:0x001a2a80:	move	@m00, left
000591:0x001a2a90:	inc	left
000591:0x001a2a98:	icall	
000591:0x001a2aa8:	icall	
000592:0x001a2ab8:	move	@m00, right
000592:0x001a2ac8:	dec	right
000592:0x001a2ad0:	icall	
000592:0x001a2ae0:	jump	0x1a2a48
000592:0x001a2ae8:	rts
array<PIXEL>::MoveIndex()
000612:0x001a2b40:	ncalli	array<PIXEL>.Count()
000612:0x001a2b48:	move	count, #return
000613:0x001a2b58:	move	new_index, curr_index
000615:0x001a2b68:	cmpi	move_number, _i0
000615:0x001a2b78:	ble	0x1a2ba0
000617:0x001a2b80:	addi	@m00, curr_index, move_number
000617:0x001a2b90:	move	new_index, @m00
000620:0x001a2ba0:	cmpi	move_number, _i0
000620:0x001a2bb0:	bge	0x1a2c58
000622:0x001a2bb8:	subi	@m00, curr_index, move_number
000622:0x001a2bc8:	move	new_index, @m00
000624:0x001a2bd8:	cmpi	new_index, _i0
000624:0x001a2be8:	bge	0x1a2c58
000626:0x001a2bf0:	subi	@m01, _i0, count
000626:0x001a2c00:	cmpi	new_index, @m01
000626:0x001a2c10:	bgt	0x1a2c38
000628:0x001a2c18:	modi	@m00, new_index, count
000628:0x001a2c28:	move	new_index, @m00
000631:0x001a2c38:	addi	@m00, new_index, count
000631:0x001a2c48:	move	new_index, @m00
000635:0x001a2c58:	cmpi	new_index, count
000635:0x001a2c68:	blt	0x1a2c90
000637:0x001a2c70:	modi	@m00, new_index, count
000637:0x001a2c80:	move	new_index, @m00
000641:0x001a2c90:	move	#return, new_index
000641:0x001a2ca0:	rts
000641:0x001a2ca8:	rts
array<PIXEL>::ShuffleArray()
000646:0x001a2cd8:	imove	i, 0x000000
000646:0x001a2ce8:	jump	0x1a2d08
000646:0x001a2cf0:	move	@m00, i
000646:0x001a2d00:	inc	i
000646:0x001a2d08:	ncalli	array<PIXEL>.Count()
000646:0x001a2d10:	cmpi	i, #return
000646:0x001a2d20:	bge	0x1a2d58
000648:0x001a2d28:	call	
000648:0x001a2d38:	call	
000648:0x001a2d50:	jump	0x1a2cf0
000648:0x001a2d58:	rts
array<PIXEL>::DifferentAtPosition()
000666:0x001a2d88:	ncalli	array<PIXEL>.Count()
000666:0x001a2d90:	move	@m00, #return
000666:0x001a2da0:	push	#return
000666:0x001a2da8:	ncalli	array<PIXEL>.Count()
000666:0x001a2db0:	move	@m02, #return
000666:0x001a2dc0:	pop	#return
000666:0x001a2dc8:	cmpi	@m00, @m02
000666:0x001a2dd8:	beq	0x1a2e08
000668:0x001a2de0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001a2df0:	imove	#return, 0xffffffff
000669:0x001a2e00:	rts
000672:0x001a2e08:	imove	i, 0x000000
000672:0x001a2e18:	jump	0x1a2e28
000672:0x001a2e20:	inc	i
000672:0x001a2e28:	ncalli	array<PIXEL>.Count()
000672:0x001a2e30:	cmpi	i, #return
000672:0x001a2e40:	bge	0x1a2ed0
000674:0x001a2e48:	icall	
000674:0x001a2e58:	move	@m00, #return
000674:0x001a2e68:	push	#return
000674:0x001a2e70:	icall	
000674:0x001a2e80:	move	@m02, #return
000674:0x001a2e90:	pop	#return
000674:0x001a2e98:	cmpi	@m00, @m02
000674:0x001a2ea8:	beq	0x1a2ec8
000676:0x001a2eb0:	move	#return, i
000676:0x001a2ec0:	rts
000676:0x001a2ec8:	jump	0x1a2e20
000680:0x001a2ed0:	imove	#return, 0xffffffff
000680:0x001a2ee0:	rts
000680:0x001a2ee8:	rts
array<array<PIXEL>>::InsertAll()
000427:0x001a3720:	imove	i, 0x000000
000427:0x001a3730:	jump	0x1a3750
000427:0x001a3738:	move	@m00, i
000427:0x001a3748:	inc	i
000427:0x001a3750:	ncalli	array<array<PIXEL>>.Count()
000427:0x001a3758:	cmpi	i, #return
000427:0x001a3768:	bge	0x1a3798
000429:0x001a3770:	icall	
000429:0x001a3780:	icall	
000429:0x001a3790:	jump	0x1a3738
000429:0x001a3798:	rts
array<array<PIXEL>>::RemoveItem()
000479:0x001a37c8:	movefm	@c00, value
000479:0x001a37d8:	icall	
000479:0x001a37e8:	move	remove_index, #return
000481:0x001a37f8:	cmpi	remove_index, _i0
000481:0x001a3808:	blt	0x1a3820
000483:0x001a3810:	ncalli	array<array<PIXEL>>.RemoveOrdered(remove_index)
000483:0x001a3820:	rts
array<array<PIXEL>>::RemoveItemUnOrdered()
000489:0x001a3850:	movefm	@c00, value
000489:0x001a3860:	icall	
000489:0x001a3870:	move	remove_index, #return
000491:0x001a3880:	cmpi	remove_index, _i0
000491:0x001a3890:	blt	0x1a38a8
000493:0x001a3898:	ncalli	array<array<PIXEL>>.Remove(remove_index)
000493:0x001a38a8:	rts
array<array<PIXEL>>::IsValidIndex()
000499:0x001a38b0:	cmpi	index, _i-1
000499:0x001a38c0:	ble	0x1a3900
000499:0x001a38c8:	ncalli	array<array<PIXEL>>.Count()
000499:0x001a38d0:	cmpi	index, #return
000499:0x001a38e0:	bge	0x1a3900
000499:0x001a38e8:	imove	#return, 0x000001
000499:0x001a38f8:	jump	0x1a3910
000499:0x001a3900:	imove	#return, 0x000000
000499:0x001a3910:	rts
000499:0x001a3918:	rts
array<array<PIXEL>>::Debug()
000525:0x001a3970:	ncalli	array<array<PIXEL>>.Count()
000525:0x001a3978:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001a39a8:	icall	Print(#return)
000526:0x001a39b8:	imove	i, 0x000000
000526:0x001a39c8:	jump	0x1a39e8
000526:0x001a39d0:	move	@m00, i
000526:0x001a39e0:	inc	i
000526:0x001a39e8:	ncalli	array<array<PIXEL>>.Count()
000526:0x001a39f0:	cmpi	i, #return
000526:0x001a3a00:	bge	0x1a3a78
000528:0x001a3a08:	icall	
000528:0x001a3a18:	movetm	item, #return
000529:0x001a3a28:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001a3a58:	icall	Print(#return)
000529:0x001a3a68:	release	item
000529:0x001a3a70:	jump	0x1a39d0
000529:0x001a3a78:	rts
array<array<PIXEL>>::GetRandomIndex()
000544:0x001a3a80:	ncalli	array<array<PIXEL>>.Count()
000544:0x001a3a88:	move	@m00, #return
000544:0x001a3a98:	cmpi	@m00, _i0
000544:0x001a3aa8:	ble	0x1a3ae0
000546:0x001a3ab0:	ncalli	array<array<PIXEL>>.Count()
000546:0x001a3ab8:	icall	RandomInt(_i0, #return)
000546:0x001a3ac8:	move	#return, #return
000546:0x001a3ad8:	rts
000549:0x001a3ae0:	imove	#return, 0xffffffff
000549:0x001a3af0:	rts
000549:0x001a3af8:	rts
array<array<PIXEL>>::GetRandomElement()
000563:0x001a3b00:	call	
000563:0x001a3b10:	icall	
000563:0x001a3b20:	movetm	#return, #return
000563:0x001a3b30:	rts
000563:0x001a3b38:	rts
array<array<PIXEL>>::SwapItems()
000568:0x001a3b68:	icall	
000568:0x001a3b78:	movetm	item1, #return
000569:0x001a3b88:	icall	
000569:0x001a3b98:	icall	
000570:0x001a3ba8:	movefm	@c00, item1
000570:0x001a3bb8:	icall	
000570:0x001a3bc8:	release	item1
000570:0x001a3bd0:	rts
array<array<PIXEL>>::InsertArray()
000575:0x001a3c28:	imove	i, 0x000000
000575:0x001a3c38:	jump	0x1a3c58
000575:0x001a3c40:	move	@m00, i
000575:0x001a3c50:	inc	i
000575:0x001a3c58:	ncalli	array<array<PIXEL>>.Count()
000575:0x001a3c60:	cmpi	i, #return
000575:0x001a3c70:	bge	0x1a3cc8
000577:0x001a3c78:	icall	
000577:0x001a3c88:	movetm	item, #return
000578:0x001a3c98:	movefm	@c00, item
000578:0x001a3ca8:	icall	
000578:0x001a3cb8:	release	item
000578:0x001a3cc0:	jump	0x1a3c40
000578:0x001a3cc8:	rts
array<array<PIXEL>>::Invert()
000584:0x001a3d48:	imove	left, 0x000000
000585:0x001a3d58:	ncalli	array<array<PIXEL>>.Count()
000585:0x001a3d60:	subi	right, #return, _i1
000586:0x001a3d70:	cmpi	right, _i0
000586:0x001a3d80:	ble	0x1a3e40
000588:0x001a3d88:	cmpi	left, right
000588:0x001a3d98:	bge	0x1a3e40
000590:0x001a3da0:	icall	
000590:0x001a3db0:	movetm	temp, #return
000591:0x001a3dc0:	move	@m00, left
000591:0x001a3dd0:	inc	left
000591:0x001a3dd8:	icall	
000591:0x001a3de8:	icall	
000592:0x001a3df8:	move	@m00, right
000592:0x001a3e08:	dec	right
000592:0x001a3e10:	movefm	@c00, temp
000592:0x001a3e20:	icall	
000592:0x001a3e30:	release	temp
000592:0x001a3e38:	jump	0x1a3d88
000592:0x001a3e40:	rts
array<array<PIXEL>>::MoveIndex()
000612:0x001a3e98:	ncalli	array<array<PIXEL>>.Count()
000612:0x001a3ea0:	move	count, #return
000613:0x001a3eb0:	move	new_index, curr_index
000615:0x001a3ec0:	cmpi	move_number, _i0
000615:0x001a3ed0:	ble	0x1a3ef8
000617:0x001a3ed8:	addi	@m00, curr_index, move_number
000617:0x001a3ee8:	move	new_index, @m00
000620:0x001a3ef8:	cmpi	move_number, _i0
000620:0x001a3f08:	bge	0x1a3fb0
000622:0x001a3f10:	subi	@m00, curr_index, move_number
000622:0x001a3f20:	move	new_index, @m00
000624:0x001a3f30:	cmpi	new_index, _i0
000624:0x001a3f40:	bge	0x1a3fb0
000626:0x001a3f48:	subi	@m01, _i0, count
000626:0x001a3f58:	cmpi	new_index, @m01
000626:0x001a3f68:	bgt	0x1a3f90
000628:0x001a3f70:	modi	@m00, new_index, count
000628:0x001a3f80:	move	new_index, @m00
000631:0x001a3f90:	addi	@m00, new_index, count
000631:0x001a3fa0:	move	new_index, @m00
000635:0x001a3fb0:	cmpi	new_index, count
000635:0x001a3fc0:	blt	0x1a3fe8
000637:0x001a3fc8:	modi	@m00, new_index, count
000637:0x001a3fd8:	move	new_index, @m00
000641:0x001a3fe8:	move	#return, new_index
000641:0x001a3ff8:	rts
000641:0x001a4000:	rts
array<array<PIXEL>>::ShuffleArray()
000646:0x001a4030:	imove	i, 0x000000
000646:0x001a4040:	jump	0x1a4060
000646:0x001a4048:	move	@m00, i
000646:0x001a4058:	inc	i
000646:0x001a4060:	ncalli	array<array<PIXEL>>.Count()
000646:0x001a4068:	cmpi	i, #return
000646:0x001a4078:	bge	0x1a40b0
000648:0x001a4080:	call	
000648:0x001a4090:	call	
000648:0x001a40a8:	jump	0x1a4048
000648:0x001a40b0:	rts
array<array<PIXEL>>::DifferentAtPosition()
000666:0x001a40e0:	ncalli	array<array<PIXEL>>.Count()
000666:0x001a40e8:	move	@m00, #return
000666:0x001a40f8:	push	#return
000666:0x001a4100:	ncalli	array<array<PIXEL>>.Count()
000666:0x001a4108:	move	@m02, #return
000666:0x001a4118:	pop	#return
000666:0x001a4120:	cmpi	@m00, @m02
000666:0x001a4130:	beq	0x1a4160
000668:0x001a4138:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001a4148:	imove	#return, 0xffffffff
000669:0x001a4158:	rts
000672:0x001a4160:	imove	i, 0x000000
000672:0x001a4170:	jump	0x1a4180
000672:0x001a4178:	inc	i
000672:0x001a4180:	ncalli	array<array<PIXEL>>.Count()
000672:0x001a4188:	cmpi	i, #return
000672:0x001a4198:	bge	0x1a4228
000674:0x001a41a0:	icall	
000674:0x001a41b0:	movec	@c00, #return
000674:0x001a41c0:	pushc	#return
000674:0x001a41c8:	icall	
000674:0x001a41d8:	movec	@c02, #return
000674:0x001a41e8:	popc	#return
000674:0x001a41f0:	cmpc	@c00, @c02
000674:0x001a4200:	beq	0x1a4220
000676:0x001a4208:	move	#return, i
000676:0x001a4218:	rts
000676:0x001a4220:	jump	0x1a4178
000680:0x001a4228:	imove	#return, 0xffffffff
000680:0x001a4238:	rts
000680:0x001a4240:	rts
array<@array<PIXEL>>::InsertAll()
000427:0x001a4658:	imove	i, 0x000000
000427:0x001a4668:	jump	0x1a4688
000427:0x001a4670:	move	@m00, i
000427:0x001a4680:	inc	i
000427:0x001a4688:	ncalli	array<array<PIXEL>>.Count()
000427:0x001a4690:	cmpi	i, #return
000427:0x001a46a0:	bge	0x1a46d0
000429:0x001a46a8:	icall	
000429:0x001a46b8:	icall	
000429:0x001a46c8:	jump	0x1a4670
000429:0x001a46d0:	rts
array<@array<PIXEL>>::RemoveItem()
000479:0x001a4700:	movefm	@c00, value
000479:0x001a4710:	icall	
000479:0x001a4720:	move	remove_index, #return
000481:0x001a4730:	cmpi	remove_index, _i0
000481:0x001a4740:	blt	0x1a4758
000483:0x001a4748:	ncalli	array<@array<PIXEL>>.RemoveOrdered(remove_index)
000483:0x001a4758:	rts
array<@array<PIXEL>>::RemoveItemUnOrdered()
000489:0x001a4788:	movefm	@c00, value
000489:0x001a4798:	icall	
000489:0x001a47a8:	move	remove_index, #return
000491:0x001a47b8:	cmpi	remove_index, _i0
000491:0x001a47c8:	blt	0x1a47e0
000493:0x001a47d0:	ncalli	array<@array<PIXEL>>.Remove(remove_index)
000493:0x001a47e0:	rts
array<@array<PIXEL>>::IsValidIndex()
000499:0x001a47e8:	cmpi	index, _i-1
000499:0x001a47f8:	ble	0x1a4838
000499:0x001a4800:	ncalli	array<@array<PIXEL>>.Count()
000499:0x001a4808:	cmpi	index, #return
000499:0x001a4818:	bge	0x1a4838
000499:0x001a4820:	imove	#return, 0x000001
000499:0x001a4830:	jump	0x1a4848
000499:0x001a4838:	imove	#return, 0x000000
000499:0x001a4848:	rts
000499:0x001a4850:	rts
array<@array<PIXEL>>::Debug()
000525:0x001a48a8:	ncalli	array<@array<PIXEL>>.Count()
000525:0x001a48b0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001a48e0:	icall	Print(#return)
000526:0x001a48f0:	imove	i, 0x000000
000526:0x001a4900:	jump	0x1a4920
000526:0x001a4908:	move	@m00, i
000526:0x001a4918:	inc	i
000526:0x001a4920:	ncalli	array<@array<PIXEL>>.Count()
000526:0x001a4928:	cmpi	i, #return
000526:0x001a4938:	bge	0x1a49b0
000528:0x001a4940:	icall	
000528:0x001a4950:	movetm	item, #return
000529:0x001a4960:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001a4990:	icall	Print(#return)
000529:0x001a49a0:	release	item
000529:0x001a49a8:	jump	0x1a4908
000529:0x001a49b0:	rts
array<@array<PIXEL>>::GetRandomIndex()
000544:0x001a49b8:	ncalli	array<@array<PIXEL>>.Count()
000544:0x001a49c0:	move	@m00, #return
000544:0x001a49d0:	cmpi	@m00, _i0
000544:0x001a49e0:	ble	0x1a4a18
000546:0x001a49e8:	ncalli	array<@array<PIXEL>>.Count()
000546:0x001a49f0:	icall	RandomInt(_i0, #return)
000546:0x001a4a00:	move	#return, #return
000546:0x001a4a10:	rts
000549:0x001a4a18:	imove	#return, 0xffffffff
000549:0x001a4a28:	rts
000549:0x001a4a30:	rts
array<@array<PIXEL>>::GetRandomElement()
000563:0x001a4a38:	call	
000563:0x001a4a48:	icall	
000563:0x001a4a58:	movetm	#return, #return
000563:0x001a4a68:	rts
000563:0x001a4a70:	rts
array<@array<PIXEL>>::SwapItems()
000568:0x001a4aa0:	icall	
000568:0x001a4ab0:	movetm	item1, #return
000569:0x001a4ac0:	icall	
000569:0x001a4ad0:	icall	
000570:0x001a4ae0:	movefm	@c00, item1
000570:0x001a4af0:	icall	
000570:0x001a4b00:	release	item1
000570:0x001a4b08:	rts
array<@array<PIXEL>>::InsertArray()
000575:0x001a4b60:	imove	i, 0x000000
000575:0x001a4b70:	jump	0x1a4b90
000575:0x001a4b78:	move	@m00, i
000575:0x001a4b88:	inc	i
000575:0x001a4b90:	ncalli	array<array<PIXEL>>.Count()
000575:0x001a4b98:	cmpi	i, #return
000575:0x001a4ba8:	bge	0x1a4c00
000577:0x001a4bb0:	icall	
000577:0x001a4bc0:	movetm	item, #return
000578:0x001a4bd0:	movefm	@c00, item
000578:0x001a4be0:	icall	
000578:0x001a4bf0:	release	item
000578:0x001a4bf8:	jump	0x1a4b78
000578:0x001a4c00:	rts
array<@array<PIXEL>>::Invert()
000584:0x001a4c80:	imove	left, 0x000000
000585:0x001a4c90:	ncalli	array<@array<PIXEL>>.Count()
000585:0x001a4c98:	subi	right, #return, _i1
000586:0x001a4ca8:	cmpi	right, _i0
000586:0x001a4cb8:	ble	0x1a4d78
000588:0x001a4cc0:	cmpi	left, right
000588:0x001a4cd0:	bge	0x1a4d78
000590:0x001a4cd8:	icall	
000590:0x001a4ce8:	movetm	temp, #return
000591:0x001a4cf8:	move	@m00, left
000591:0x001a4d08:	inc	left
000591:0x001a4d10:	icall	
000591:0x001a4d20:	icall	
000592:0x001a4d30:	move	@m00, right
000592:0x001a4d40:	dec	right
000592:0x001a4d48:	movefm	@c00, temp
000592:0x001a4d58:	icall	
000592:0x001a4d68:	release	temp
000592:0x001a4d70:	jump	0x1a4cc0
000592:0x001a4d78:	rts
array<@array<PIXEL>>::MoveIndex()
000612:0x001a4dd0:	ncalli	array<@array<PIXEL>>.Count()
000612:0x001a4dd8:	move	count, #return
000613:0x001a4de8:	move	new_index, curr_index
000615:0x001a4df8:	cmpi	move_number, _i0
000615:0x001a4e08:	ble	0x1a4e30
000617:0x001a4e10:	addi	@m00, curr_index, move_number
000617:0x001a4e20:	move	new_index, @m00
000620:0x001a4e30:	cmpi	move_number, _i0
000620:0x001a4e40:	bge	0x1a4ee8
000622:0x001a4e48:	subi	@m00, curr_index, move_number
000622:0x001a4e58:	move	new_index, @m00
000624:0x001a4e68:	cmpi	new_index, _i0
000624:0x001a4e78:	bge	0x1a4ee8
000626:0x001a4e80:	subi	@m01, _i0, count
000626:0x001a4e90:	cmpi	new_index, @m01
000626:0x001a4ea0:	bgt	0x1a4ec8
000628:0x001a4ea8:	modi	@m00, new_index, count
000628:0x001a4eb8:	move	new_index, @m00
000631:0x001a4ec8:	addi	@m00, new_index, count
000631:0x001a4ed8:	move	new_index, @m00
000635:0x001a4ee8:	cmpi	new_index, count
000635:0x001a4ef8:	blt	0x1a4f20
000637:0x001a4f00:	modi	@m00, new_index, count
000637:0x001a4f10:	move	new_index, @m00
000641:0x001a4f20:	move	#return, new_index
000641:0x001a4f30:	rts
000641:0x001a4f38:	rts
array<@array<PIXEL>>::ShuffleArray()
000646:0x001a4f68:	imove	i, 0x000000
000646:0x001a4f78:	jump	0x1a4f98
000646:0x001a4f80:	move	@m00, i
000646:0x001a4f90:	inc	i
000646:0x001a4f98:	ncalli	array<@array<PIXEL>>.Count()
000646:0x001a4fa0:	cmpi	i, #return
000646:0x001a4fb0:	bge	0x1a4fe8
000648:0x001a4fb8:	call	
000648:0x001a4fc8:	call	
000648:0x001a4fe0:	jump	0x1a4f80
000648:0x001a4fe8:	rts
array<@array<PIXEL>>::DifferentAtPosition()
000666:0x001a5018:	ncalli	array<@array<PIXEL>>.Count()
000666:0x001a5020:	move	@m00, #return
000666:0x001a5030:	ncalli	array<array<PIXEL>>.Count()
000666:0x001a5038:	cmpi	@m00, #return
000666:0x001a5048:	beq	0x1a5078
000668:0x001a5050:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001a5060:	imove	#return, 0xffffffff
000669:0x001a5070:	rts
000672:0x001a5078:	imove	i, 0x000000
000672:0x001a5088:	jump	0x1a5098
000672:0x001a5090:	inc	i
000672:0x001a5098:	ncalli	array<array<PIXEL>>.Count()
000672:0x001a50a0:	cmpi	i, #return
000672:0x001a50b0:	bge	0x1a5120
000674:0x001a50b8:	icall	
000674:0x001a50c8:	movec	@c00, #return
000674:0x001a50d8:	icall	
000674:0x001a50e8:	cmpc	@c00, #return
000674:0x001a50f8:	beq	0x1a5118
000676:0x001a5100:	move	#return, i
000676:0x001a5110:	rts
000676:0x001a5118:	jump	0x1a5090
000680:0x001a5120:	imove	#return, 0xffffffff
000680:0x001a5130:	rts
000680:0x001a5138:	rts
array<PPEClassBase>::InsertAll()
000427:0x001a5e80:	imove	i, 0x000000
000427:0x001a5e90:	jump	0x1a5eb0
000427:0x001a5e98:	move	@m00, i
000427:0x001a5ea8:	inc	i
000427:0x001a5eb0:	ncalli	array<PPEClassBase>.Count()
000427:0x001a5eb8:	cmpi	i, #return
000427:0x001a5ec8:	bge	0x1a5ef8
000429:0x001a5ed0:	icall	
000429:0x001a5ee0:	icall	
000429:0x001a5ef0:	jump	0x1a5e98
000429:0x001a5ef8:	rts
array<PPEClassBase>::RemoveItem()
000479:0x001a5f28:	movefm	@c00, value
000479:0x001a5f38:	icall	
000479:0x001a5f48:	move	remove_index, #return
000481:0x001a5f58:	cmpi	remove_index, _i0
000481:0x001a5f68:	blt	0x1a5f80
000483:0x001a5f70:	ncalli	array<PPEClassBase>.RemoveOrdered(remove_index)
000483:0x001a5f80:	rts
array<PPEClassBase>::RemoveItemUnOrdered()
000489:0x001a5fb0:	movefm	@c00, value
000489:0x001a5fc0:	icall	
000489:0x001a5fd0:	move	remove_index, #return
000491:0x001a5fe0:	cmpi	remove_index, _i0
000491:0x001a5ff0:	blt	0x1a6008
000493:0x001a5ff8:	ncalli	array<PPEClassBase>.Remove(remove_index)
000493:0x001a6008:	rts
array<PPEClassBase>::IsValidIndex()
000499:0x001a6010:	cmpi	index, _i-1
000499:0x001a6020:	ble	0x1a6060
000499:0x001a6028:	ncalli	array<PPEClassBase>.Count()
000499:0x001a6030:	cmpi	index, #return
000499:0x001a6040:	bge	0x1a6060
000499:0x001a6048:	imove	#return, 0x000001
000499:0x001a6058:	jump	0x1a6070
000499:0x001a6060:	imove	#return, 0x000000
000499:0x001a6070:	rts
000499:0x001a6078:	rts
array<PPEClassBase>::Debug()
000525:0x001a60d0:	ncalli	array<PPEClassBase>.Count()
000525:0x001a60d8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001a6108:	icall	Print(#return)
000526:0x001a6118:	imove	i, 0x000000
000526:0x001a6128:	jump	0x1a6148
000526:0x001a6130:	move	@m00, i
000526:0x001a6140:	inc	i
000526:0x001a6148:	ncalli	array<PPEClassBase>.Count()
000526:0x001a6150:	cmpi	i, #return
000526:0x001a6160:	bge	0x1a61d8
000528:0x001a6168:	icall	
000528:0x001a6178:	movetm	item, #return
000529:0x001a6188:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001a61b8:	icall	Print(#return)
000529:0x001a61c8:	release	item
000529:0x001a61d0:	jump	0x1a6130
000529:0x001a61d8:	rts
array<PPEClassBase>::GetRandomIndex()
000544:0x001a61e0:	ncalli	array<PPEClassBase>.Count()
000544:0x001a61e8:	move	@m00, #return
000544:0x001a61f8:	cmpi	@m00, _i0
000544:0x001a6208:	ble	0x1a6240
000546:0x001a6210:	ncalli	array<PPEClassBase>.Count()
000546:0x001a6218:	icall	RandomInt(_i0, #return)
000546:0x001a6228:	move	#return, #return
000546:0x001a6238:	rts
000549:0x001a6240:	imove	#return, 0xffffffff
000549:0x001a6250:	rts
000549:0x001a6258:	rts
array<PPEClassBase>::GetRandomElement()
000563:0x001a6260:	call	
000563:0x001a6270:	icall	
000563:0x001a6280:	movetm	#return, #return
000563:0x001a6290:	rts
000563:0x001a6298:	rts
array<PPEClassBase>::SwapItems()
000568:0x001a62c8:	icall	
000568:0x001a62d8:	movetm	item1, #return
000569:0x001a62e8:	icall	
000569:0x001a62f8:	icall	
000570:0x001a6308:	movefm	@c00, item1
000570:0x001a6318:	icall	
000570:0x001a6328:	release	item1
000570:0x001a6330:	rts
array<PPEClassBase>::InsertArray()
000575:0x001a6388:	imove	i, 0x000000
000575:0x001a6398:	jump	0x1a63b8
000575:0x001a63a0:	move	@m00, i
000575:0x001a63b0:	inc	i
000575:0x001a63b8:	ncalli	array<PPEClassBase>.Count()
000575:0x001a63c0:	cmpi	i, #return
000575:0x001a63d0:	bge	0x1a6428
000577:0x001a63d8:	icall	
000577:0x001a63e8:	movetm	item, #return
000578:0x001a63f8:	movefm	@c00, item
000578:0x001a6408:	icall	
000578:0x001a6418:	release	item
000578:0x001a6420:	jump	0x1a63a0
000578:0x001a6428:	rts
array<PPEClassBase>::Invert()
000584:0x001a64a8:	imove	left, 0x000000
000585:0x001a64b8:	ncalli	array<PPEClassBase>.Count()
000585:0x001a64c0:	subi	right, #return, _i1
000586:0x001a64d0:	cmpi	right, _i0
000586:0x001a64e0:	ble	0x1a65a0
000588:0x001a64e8:	cmpi	left, right
000588:0x001a64f8:	bge	0x1a65a0
000590:0x001a6500:	icall	
000590:0x001a6510:	movetm	temp, #return
000591:0x001a6520:	move	@m00, left
000591:0x001a6530:	inc	left
000591:0x001a6538:	icall	
000591:0x001a6548:	icall	
000592:0x001a6558:	move	@m00, right
000592:0x001a6568:	dec	right
000592:0x001a6570:	movefm	@c00, temp
000592:0x001a6580:	icall	
000592:0x001a6590:	release	temp
000592:0x001a6598:	jump	0x1a64e8
000592:0x001a65a0:	rts
array<PPEClassBase>::MoveIndex()
000612:0x001a65f8:	ncalli	array<PPEClassBase>.Count()
000612:0x001a6600:	move	count, #return
000613:0x001a6610:	move	new_index, curr_index
000615:0x001a6620:	cmpi	move_number, _i0
000615:0x001a6630:	ble	0x1a6658
000617:0x001a6638:	addi	@m00, curr_index, move_number
000617:0x001a6648:	move	new_index, @m00
000620:0x001a6658:	cmpi	move_number, _i0
000620:0x001a6668:	bge	0x1a6710
000622:0x001a6670:	subi	@m00, curr_index, move_number
000622:0x001a6680:	move	new_index, @m00
000624:0x001a6690:	cmpi	new_index, _i0
000624:0x001a66a0:	bge	0x1a6710
000626:0x001a66a8:	subi	@m01, _i0, count
000626:0x001a66b8:	cmpi	new_index, @m01
000626:0x001a66c8:	bgt	0x1a66f0
000628:0x001a66d0:	modi	@m00, new_index, count
000628:0x001a66e0:	move	new_index, @m00
000631:0x001a66f0:	addi	@m00, new_index, count
000631:0x001a6700:	move	new_index, @m00
000635:0x001a6710:	cmpi	new_index, count
000635:0x001a6720:	blt	0x1a6748
000637:0x001a6728:	modi	@m00, new_index, count
000637:0x001a6738:	move	new_index, @m00
000641:0x001a6748:	move	#return, new_index
000641:0x001a6758:	rts
000641:0x001a6760:	rts
array<PPEClassBase>::ShuffleArray()
000646:0x001a6790:	imove	i, 0x000000
000646:0x001a67a0:	jump	0x1a67c0
000646:0x001a67a8:	move	@m00, i
000646:0x001a67b8:	inc	i
000646:0x001a67c0:	ncalli	array<PPEClassBase>.Count()
000646:0x001a67c8:	cmpi	i, #return
000646:0x001a67d8:	bge	0x1a6810
000648:0x001a67e0:	call	
000648:0x001a67f0:	call	
000648:0x001a6808:	jump	0x1a67a8
000648:0x001a6810:	rts
array<PPEClassBase>::DifferentAtPosition()
000666:0x001a6840:	ncalli	array<PPEClassBase>.Count()
000666:0x001a6848:	move	@m00, #return
000666:0x001a6858:	push	#return
000666:0x001a6860:	ncalli	array<PPEClassBase>.Count()
000666:0x001a6868:	move	@m02, #return
000666:0x001a6878:	pop	#return
000666:0x001a6880:	cmpi	@m00, @m02
000666:0x001a6890:	beq	0x1a68c0
000668:0x001a6898:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001a68a8:	imove	#return, 0xffffffff
000669:0x001a68b8:	rts
000672:0x001a68c0:	imove	i, 0x000000
000672:0x001a68d0:	jump	0x1a68e0
000672:0x001a68d8:	inc	i
000672:0x001a68e0:	ncalli	array<PPEClassBase>.Count()
000672:0x001a68e8:	cmpi	i, #return
000672:0x001a68f8:	bge	0x1a6988
000674:0x001a6900:	icall	
000674:0x001a6910:	movec	@c00, #return
000674:0x001a6920:	pushc	#return
000674:0x001a6928:	icall	
000674:0x001a6938:	movec	@c02, #return
000674:0x001a6948:	popc	#return
000674:0x001a6950:	cmpc	@c00, @c02
000674:0x001a6960:	beq	0x1a6980
000676:0x001a6968:	move	#return, i
000676:0x001a6978:	rts
000676:0x001a6980:	jump	0x1a68d8
000680:0x001a6988:	imove	#return, 0xffffffff
000680:0x001a6998:	rts
000680:0x001a69a0:	rts
map<int,PPEClassBase>::GetKeyArray()
000885:0x001a6ca0:	new	keys, array<int>
000886:0x001a6cc0:	imove	i, 0x000000
000886:0x001a6cd0:	jump	0x1a6cf0
000886:0x001a6cd8:	move	@m00, i
000886:0x001a6ce8:	inc	i
000886:0x001a6cf0:	ncalli	map<int,PPEClassBase>.Count()
000886:0x001a6cf8:	cmpi	i, #return
000886:0x001a6d08:	bge	0x1a6d38
000888:0x001a6d10:	icall	
000888:0x001a6d20:	icall	
000888:0x001a6d30:	jump	0x1a6cd8
000890:0x001a6d38:	movem	#return, keys
000890:0x001a6d48:	release	keys
000890:0x001a6d50:	rts
000890:0x001a6d58:	release	keys
000890:0x001a6d60:	rts
map<int,PPEClassBase>::GetValueArray()
000895:0x001a6db8:	new	elements, array<PPEClassBase>
000896:0x001a6dd8:	imove	i, 0x000000
000896:0x001a6de8:	jump	0x1a6e08
000896:0x001a6df0:	move	@m00, i
000896:0x001a6e00:	inc	i
000896:0x001a6e08:	ncalli	map<int,PPEClassBase>.Count()
000896:0x001a6e10:	cmpi	i, #return
000896:0x001a6e20:	bge	0x1a6e50
000898:0x001a6e28:	icall	
000898:0x001a6e38:	icall	
000898:0x001a6e48:	jump	0x1a6df0
000900:0x001a6e50:	movem	#return, elements
000900:0x001a6e60:	release	elements
000900:0x001a6e68:	rts
000900:0x001a6e70:	release	elements
000900:0x001a6e78:	rts
map<int,PPEClassBase>::ReplaceKey()
000905:0x001a6e80:	icall	
000905:0x001a6e90:	cmpi	#return, _i0
000905:0x001a6ea0:	beq	0x1a6ef0
000907:0x001a6ea8:	icall	
000907:0x001a6eb8:	icall	
000908:0x001a6ec8:	icall	
000909:0x001a6ed8:	imove	#return, 0x000001
000909:0x001a6ee8:	rts
000911:0x001a6ef0:	imove	#return, 0x000000
000911:0x001a6f00:	rts
000911:0x001a6f08:	rts
map<int,PPEClassBase>::GetKeyByValue()
000917:0x001a6f60:	imove	i, 0x000000
000917:0x001a6f70:	jump	0x1a6f90
000917:0x001a6f78:	move	@m00, i
000917:0x001a6f88:	inc	i
000917:0x001a6f90:	ncalli	map<int,PPEClassBase>.Count()
000917:0x001a6f98:	cmpi	i, #return
000917:0x001a6fa8:	bge	0x1a7018
000919:0x001a6fb0:	icall	
000919:0x001a6fc0:	movec	@c00, #return
000919:0x001a6fd0:	cmpmc	@c00, value
000919:0x001a6fe0:	bne	0x1a7010
000921:0x001a6fe8:	icall	
000921:0x001a6ff8:	move	ret, #return
000922:0x001a7008:	jump	0x1a7018
000922:0x001a7010:	jump	0x1a6f78
000926:0x001a7018:	move	#return, ret
000926:0x001a7028:	rts
000926:0x001a7030:	rts
map<int,PPEClassBase>::GetKeyByValueChecked()
000931:0x001a7060:	imove	i, 0x000000
000931:0x001a7070:	jump	0x1a7090
000931:0x001a7078:	move	@m00, i
000931:0x001a7088:	inc	i
000931:0x001a7090:	ncalli	map<int,PPEClassBase>.Count()
000931:0x001a7098:	cmpi	i, #return
000931:0x001a70a8:	bge	0x1a7138
000933:0x001a70b0:	icall	
000933:0x001a70c0:	movec	@c00, #return
000933:0x001a70d0:	cmpmc	@c00, value
000933:0x001a70e0:	bne	0x1a7130
000935:0x001a70e8:	icall	
000935:0x001a70f8:	move	key, #return
000936:0x001a7108:	imove	#return, 0x000001
000936:0x001a7118:	move	key, key
000936:0x001a7128:	rts
000936:0x001a7130:	jump	0x1a7078
000939:0x001a7138:	imove	#return, 0x000000
000939:0x001a7148:	move	key, key
000939:0x001a7158:	rts
000939:0x001a7160:	move	key, key
000939:0x001a7170:	rts
map<int,@PPEClassBase>::GetKeyArray()
000885:0x001a74c0:	new	keys, array<int>
000886:0x001a74e0:	imove	i, 0x000000
000886:0x001a74f0:	jump	0x1a7510
000886:0x001a74f8:	move	@m00, i
000886:0x001a7508:	inc	i
000886:0x001a7510:	ncalli	map<int,@PPEClassBase>.Count()
000886:0x001a7518:	cmpi	i, #return
000886:0x001a7528:	bge	0x1a7558
000888:0x001a7530:	icall	
000888:0x001a7540:	icall	
000888:0x001a7550:	jump	0x1a74f8
000890:0x001a7558:	movem	#return, keys
000890:0x001a7568:	release	keys
000890:0x001a7570:	rts
000890:0x001a7578:	release	keys
000890:0x001a7580:	rts
map<int,@PPEClassBase>::GetValueArray()
000895:0x001a75d8:	new	elements, array<PPEClassBase>
000896:0x001a75f8:	imove	i, 0x000000
000896:0x001a7608:	jump	0x1a7628
000896:0x001a7610:	move	@m00, i
000896:0x001a7620:	inc	i
000896:0x001a7628:	ncalli	map<int,@PPEClassBase>.Count()
000896:0x001a7630:	cmpi	i, #return
000896:0x001a7640:	bge	0x1a7670
000898:0x001a7648:	icall	
000898:0x001a7658:	icall	
000898:0x001a7668:	jump	0x1a7610
000900:0x001a7670:	movem	#return, elements
000900:0x001a7680:	release	elements
000900:0x001a7688:	rts
000900:0x001a7690:	release	elements
000900:0x001a7698:	rts
map<int,@PPEClassBase>::ReplaceKey()
000905:0x001a76a0:	icall	
000905:0x001a76b0:	cmpi	#return, _i0
000905:0x001a76c0:	beq	0x1a7710
000907:0x001a76c8:	icall	
000907:0x001a76d8:	icall	
000908:0x001a76e8:	icall	
000909:0x001a76f8:	imove	#return, 0x000001
000909:0x001a7708:	rts
000911:0x001a7710:	imove	#return, 0x000000
000911:0x001a7720:	rts
000911:0x001a7728:	rts
map<int,@PPEClassBase>::GetKeyByValue()
000917:0x001a7780:	imove	i, 0x000000
000917:0x001a7790:	jump	0x1a77b0
000917:0x001a7798:	move	@m00, i
000917:0x001a77a8:	inc	i
000917:0x001a77b0:	ncalli	map<int,@PPEClassBase>.Count()
000917:0x001a77b8:	cmpi	i, #return
000917:0x001a77c8:	bge	0x1a7838
000919:0x001a77d0:	icall	
000919:0x001a77e0:	movec	@c00, #return
000919:0x001a77f0:	cmpmc	@c00, value
000919:0x001a7800:	bne	0x1a7830
000921:0x001a7808:	icall	
000921:0x001a7818:	move	ret, #return
000922:0x001a7828:	jump	0x1a7838
000922:0x001a7830:	jump	0x1a7798
000926:0x001a7838:	move	#return, ret
000926:0x001a7848:	rts
000926:0x001a7850:	rts
map<int,@PPEClassBase>::GetKeyByValueChecked()
000931:0x001a7880:	imove	i, 0x000000
000931:0x001a7890:	jump	0x1a78b0
000931:0x001a7898:	move	@m00, i
000931:0x001a78a8:	inc	i
000931:0x001a78b0:	ncalli	map<int,@PPEClassBase>.Count()
000931:0x001a78b8:	cmpi	i, #return
000931:0x001a78c8:	bge	0x1a7958
000933:0x001a78d0:	icall	
000933:0x001a78e0:	movec	@c00, #return
000933:0x001a78f0:	cmpmc	@c00, value
000933:0x001a7900:	bne	0x1a7950
000935:0x001a7908:	icall	
000935:0x001a7918:	move	key, #return
000936:0x001a7928:	imove	#return, 0x000001
000936:0x001a7938:	move	key, key
000936:0x001a7948:	rts
000936:0x001a7950:	jump	0x1a7898
000939:0x001a7958:	imove	#return, 0x000000
000939:0x001a7968:	move	key, key
000939:0x001a7978:	rts
000939:0x001a7980:	move	key, key
000939:0x001a7990:	rts
array<PPERequesterBase>::InsertAll()
000427:0x001a81c8:	imove	i, 0x000000
000427:0x001a81d8:	jump	0x1a81f8
000427:0x001a81e0:	move	@m00, i
000427:0x001a81f0:	inc	i
000427:0x001a81f8:	ncalli	array<PPERequesterBase>.Count()
000427:0x001a8200:	cmpi	i, #return
000427:0x001a8210:	bge	0x1a8240
000429:0x001a8218:	icall	
000429:0x001a8228:	icall	
000429:0x001a8238:	jump	0x1a81e0
000429:0x001a8240:	rts
array<PPERequesterBase>::RemoveItem()
000479:0x001a8270:	movefm	@c00, value
000479:0x001a8280:	icall	
000479:0x001a8290:	move	remove_index, #return
000481:0x001a82a0:	cmpi	remove_index, _i0
000481:0x001a82b0:	blt	0x1a82c8
000483:0x001a82b8:	ncalli	array<PPERequesterBase>.RemoveOrdered(remove_index)
000483:0x001a82c8:	rts
array<PPERequesterBase>::RemoveItemUnOrdered()
000489:0x001a82f8:	movefm	@c00, value
000489:0x001a8308:	icall	
000489:0x001a8318:	move	remove_index, #return
000491:0x001a8328:	cmpi	remove_index, _i0
000491:0x001a8338:	blt	0x1a8350
000493:0x001a8340:	ncalli	array<PPERequesterBase>.Remove(remove_index)
000493:0x001a8350:	rts
array<PPERequesterBase>::IsValidIndex()
000499:0x001a8358:	cmpi	index, _i-1
000499:0x001a8368:	ble	0x1a83a8
000499:0x001a8370:	ncalli	array<PPERequesterBase>.Count()
000499:0x001a8378:	cmpi	index, #return
000499:0x001a8388:	bge	0x1a83a8
000499:0x001a8390:	imove	#return, 0x000001
000499:0x001a83a0:	jump	0x1a83b8
000499:0x001a83a8:	imove	#return, 0x000000
000499:0x001a83b8:	rts
000499:0x001a83c0:	rts
array<PPERequesterBase>::Debug()
000525:0x001a8418:	ncalli	array<PPERequesterBase>.Count()
000525:0x001a8420:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001a8450:	icall	Print(#return)
000526:0x001a8460:	imove	i, 0x000000
000526:0x001a8470:	jump	0x1a8490
000526:0x001a8478:	move	@m00, i
000526:0x001a8488:	inc	i
000526:0x001a8490:	ncalli	array<PPERequesterBase>.Count()
000526:0x001a8498:	cmpi	i, #return
000526:0x001a84a8:	bge	0x1a8520
000528:0x001a84b0:	icall	
000528:0x001a84c0:	movetm	item, #return
000529:0x001a84d0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001a8500:	icall	Print(#return)
000529:0x001a8510:	release	item
000529:0x001a8518:	jump	0x1a8478
000529:0x001a8520:	rts
array<PPERequesterBase>::GetRandomIndex()
000544:0x001a8528:	ncalli	array<PPERequesterBase>.Count()
000544:0x001a8530:	move	@m00, #return
000544:0x001a8540:	cmpi	@m00, _i0
000544:0x001a8550:	ble	0x1a8588
000546:0x001a8558:	ncalli	array<PPERequesterBase>.Count()
000546:0x001a8560:	icall	RandomInt(_i0, #return)
000546:0x001a8570:	move	#return, #return
000546:0x001a8580:	rts
000549:0x001a8588:	imove	#return, 0xffffffff
000549:0x001a8598:	rts
000549:0x001a85a0:	rts
array<PPERequesterBase>::GetRandomElement()
000563:0x001a85a8:	call	
000563:0x001a85b8:	icall	
000563:0x001a85c8:	movetm	#return, #return
000563:0x001a85d8:	rts
000563:0x001a85e0:	rts
array<PPERequesterBase>::SwapItems()
000568:0x001a8610:	icall	
000568:0x001a8620:	movetm	item1, #return
000569:0x001a8630:	icall	
000569:0x001a8640:	icall	
000570:0x001a8650:	movefm	@c00, item1
000570:0x001a8660:	icall	
000570:0x001a8670:	release	item1
000570:0x001a8678:	rts
array<PPERequesterBase>::InsertArray()
000575:0x001a86d0:	imove	i, 0x000000
000575:0x001a86e0:	jump	0x1a8700
000575:0x001a86e8:	move	@m00, i
000575:0x001a86f8:	inc	i
000575:0x001a8700:	ncalli	array<PPERequesterBase>.Count()
000575:0x001a8708:	cmpi	i, #return
000575:0x001a8718:	bge	0x1a8770
000577:0x001a8720:	icall	
000577:0x001a8730:	movetm	item, #return
000578:0x001a8740:	movefm	@c00, item
000578:0x001a8750:	icall	
000578:0x001a8760:	release	item
000578:0x001a8768:	jump	0x1a86e8
000578:0x001a8770:	rts
array<PPERequesterBase>::Invert()
000584:0x001a87f0:	imove	left, 0x000000
000585:0x001a8800:	ncalli	array<PPERequesterBase>.Count()
000585:0x001a8808:	subi	right, #return, _i1
000586:0x001a8818:	cmpi	right, _i0
000586:0x001a8828:	ble	0x1a88e8
000588:0x001a8830:	cmpi	left, right
000588:0x001a8840:	bge	0x1a88e8
000590:0x001a8848:	icall	
000590:0x001a8858:	movetm	temp, #return
000591:0x001a8868:	move	@m00, left
000591:0x001a8878:	inc	left
000591:0x001a8880:	icall	
000591:0x001a8890:	icall	
000592:0x001a88a0:	move	@m00, right
000592:0x001a88b0:	dec	right
000592:0x001a88b8:	movefm	@c00, temp
000592:0x001a88c8:	icall	
000592:0x001a88d8:	release	temp
000592:0x001a88e0:	jump	0x1a8830
000592:0x001a88e8:	rts
array<PPERequesterBase>::MoveIndex()
000612:0x001a8940:	ncalli	array<PPERequesterBase>.Count()
000612:0x001a8948:	move	count, #return
000613:0x001a8958:	move	new_index, curr_index
000615:0x001a8968:	cmpi	move_number, _i0
000615:0x001a8978:	ble	0x1a89a0
000617:0x001a8980:	addi	@m00, curr_index, move_number
000617:0x001a8990:	move	new_index, @m00
000620:0x001a89a0:	cmpi	move_number, _i0
000620:0x001a89b0:	bge	0x1a8a58
000622:0x001a89b8:	subi	@m00, curr_index, move_number
000622:0x001a89c8:	move	new_index, @m00
000624:0x001a89d8:	cmpi	new_index, _i0
000624:0x001a89e8:	bge	0x1a8a58
000626:0x001a89f0:	subi	@m01, _i0, count
000626:0x001a8a00:	cmpi	new_index, @m01
000626:0x001a8a10:	bgt	0x1a8a38
000628:0x001a8a18:	modi	@m00, new_index, count
000628:0x001a8a28:	move	new_index, @m00
000631:0x001a8a38:	addi	@m00, new_index, count
000631:0x001a8a48:	move	new_index, @m00
000635:0x001a8a58:	cmpi	new_index, count
000635:0x001a8a68:	blt	0x1a8a90
000637:0x001a8a70:	modi	@m00, new_index, count
000637:0x001a8a80:	move	new_index, @m00
000641:0x001a8a90:	move	#return, new_index
000641:0x001a8aa0:	rts
000641:0x001a8aa8:	rts
array<PPERequesterBase>::ShuffleArray()
000646:0x001a8ad8:	imove	i, 0x000000
000646:0x001a8ae8:	jump	0x1a8b08
000646:0x001a8af0:	move	@m00, i
000646:0x001a8b00:	inc	i
000646:0x001a8b08:	ncalli	array<PPERequesterBase>.Count()
000646:0x001a8b10:	cmpi	i, #return
000646:0x001a8b20:	bge	0x1a8b58
000648:0x001a8b28:	call	
000648:0x001a8b38:	call	
000648:0x001a8b50:	jump	0x1a8af0
000648:0x001a8b58:	rts
array<PPERequesterBase>::DifferentAtPosition()
000666:0x001a8b88:	ncalli	array<PPERequesterBase>.Count()
000666:0x001a8b90:	move	@m00, #return
000666:0x001a8ba0:	push	#return
000666:0x001a8ba8:	ncalli	array<PPERequesterBase>.Count()
000666:0x001a8bb0:	move	@m02, #return
000666:0x001a8bc0:	pop	#return
000666:0x001a8bc8:	cmpi	@m00, @m02
000666:0x001a8bd8:	beq	0x1a8c08
000668:0x001a8be0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001a8bf0:	imove	#return, 0xffffffff
000669:0x001a8c00:	rts
000672:0x001a8c08:	imove	i, 0x000000
000672:0x001a8c18:	jump	0x1a8c28
000672:0x001a8c20:	inc	i
000672:0x001a8c28:	ncalli	array<PPERequesterBase>.Count()
000672:0x001a8c30:	cmpi	i, #return
000672:0x001a8c40:	bge	0x1a8cd0
000674:0x001a8c48:	icall	
000674:0x001a8c58:	movec	@c00, #return
000674:0x001a8c68:	pushc	#return
000674:0x001a8c70:	icall	
000674:0x001a8c80:	movec	@c02, #return
000674:0x001a8c90:	popc	#return
000674:0x001a8c98:	cmpc	@c00, @c02
000674:0x001a8ca8:	beq	0x1a8cc8
000676:0x001a8cb0:	move	#return, i
000676:0x001a8cc0:	rts
000676:0x001a8cc8:	jump	0x1a8c20
000680:0x001a8cd0:	imove	#return, 0xffffffff
000680:0x001a8ce0:	rts
000680:0x001a8ce8:	rts
array<@PPERequesterBase>::InsertAll()
000427:0x001a9100:	imove	i, 0x000000
000427:0x001a9110:	jump	0x1a9130
000427:0x001a9118:	move	@m00, i
000427:0x001a9128:	inc	i
000427:0x001a9130:	ncalli	array<PPERequesterBase>.Count()
000427:0x001a9138:	cmpi	i, #return
000427:0x001a9148:	bge	0x1a9178
000429:0x001a9150:	icall	
000429:0x001a9160:	icall	
000429:0x001a9170:	jump	0x1a9118
000429:0x001a9178:	rts
array<@PPERequesterBase>::RemoveItem()
000479:0x001a91a8:	movefm	@c00, value
000479:0x001a91b8:	icall	
000479:0x001a91c8:	move	remove_index, #return
000481:0x001a91d8:	cmpi	remove_index, _i0
000481:0x001a91e8:	blt	0x1a9200
000483:0x001a91f0:	ncalli	array<@PPERequesterBase>.RemoveOrdered(remove_index)
000483:0x001a9200:	rts
array<@PPERequesterBase>::RemoveItemUnOrdered()
000489:0x001a9230:	movefm	@c00, value
000489:0x001a9240:	icall	
000489:0x001a9250:	move	remove_index, #return
000491:0x001a9260:	cmpi	remove_index, _i0
000491:0x001a9270:	blt	0x1a9288
000493:0x001a9278:	ncalli	array<@PPERequesterBase>.Remove(remove_index)
000493:0x001a9288:	rts
array<@PPERequesterBase>::IsValidIndex()
000499:0x001a9290:	cmpi	index, _i-1
000499:0x001a92a0:	ble	0x1a92e0
000499:0x001a92a8:	ncalli	array<@PPERequesterBase>.Count()
000499:0x001a92b0:	cmpi	index, #return
000499:0x001a92c0:	bge	0x1a92e0
000499:0x001a92c8:	imove	#return, 0x000001
000499:0x001a92d8:	jump	0x1a92f0
000499:0x001a92e0:	imove	#return, 0x000000
000499:0x001a92f0:	rts
000499:0x001a92f8:	rts
array<@PPERequesterBase>::Debug()
000525:0x001a9350:	ncalli	array<@PPERequesterBase>.Count()
000525:0x001a9358:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001a9388:	icall	Print(#return)
000526:0x001a9398:	imove	i, 0x000000
000526:0x001a93a8:	jump	0x1a93c8
000526:0x001a93b0:	move	@m00, i
000526:0x001a93c0:	inc	i
000526:0x001a93c8:	ncalli	array<@PPERequesterBase>.Count()
000526:0x001a93d0:	cmpi	i, #return
000526:0x001a93e0:	bge	0x1a9458
000528:0x001a93e8:	icall	
000528:0x001a93f8:	movetm	item, #return
000529:0x001a9408:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001a9438:	icall	Print(#return)
000529:0x001a9448:	release	item
000529:0x001a9450:	jump	0x1a93b0
000529:0x001a9458:	rts
array<@PPERequesterBase>::GetRandomIndex()
000544:0x001a9460:	ncalli	array<@PPERequesterBase>.Count()
000544:0x001a9468:	move	@m00, #return
000544:0x001a9478:	cmpi	@m00, _i0
000544:0x001a9488:	ble	0x1a94c0
000546:0x001a9490:	ncalli	array<@PPERequesterBase>.Count()
000546:0x001a9498:	icall	RandomInt(_i0, #return)
000546:0x001a94a8:	move	#return, #return
000546:0x001a94b8:	rts
000549:0x001a94c0:	imove	#return, 0xffffffff
000549:0x001a94d0:	rts
000549:0x001a94d8:	rts
array<@PPERequesterBase>::GetRandomElement()
000563:0x001a94e0:	call	
000563:0x001a94f0:	icall	
000563:0x001a9500:	movetm	#return, #return
000563:0x001a9510:	rts
000563:0x001a9518:	rts
array<@PPERequesterBase>::SwapItems()
000568:0x001a9548:	icall	
000568:0x001a9558:	movetm	item1, #return
000569:0x001a9568:	icall	
000569:0x001a9578:	icall	
000570:0x001a9588:	movefm	@c00, item1
000570:0x001a9598:	icall	
000570:0x001a95a8:	release	item1
000570:0x001a95b0:	rts
array<@PPERequesterBase>::InsertArray()
000575:0x001a9608:	imove	i, 0x000000
000575:0x001a9618:	jump	0x1a9638
000575:0x001a9620:	move	@m00, i
000575:0x001a9630:	inc	i
000575:0x001a9638:	ncalli	array<PPERequesterBase>.Count()
000575:0x001a9640:	cmpi	i, #return
000575:0x001a9650:	bge	0x1a96a8
000577:0x001a9658:	icall	
000577:0x001a9668:	movetm	item, #return
000578:0x001a9678:	movefm	@c00, item
000578:0x001a9688:	icall	
000578:0x001a9698:	release	item
000578:0x001a96a0:	jump	0x1a9620
000578:0x001a96a8:	rts
array<@PPERequesterBase>::Invert()
000584:0x001a9728:	imove	left, 0x000000
000585:0x001a9738:	ncalli	array<@PPERequesterBase>.Count()
000585:0x001a9740:	subi	right, #return, _i1
000586:0x001a9750:	cmpi	right, _i0
000586:0x001a9760:	ble	0x1a9820
000588:0x001a9768:	cmpi	left, right
000588:0x001a9778:	bge	0x1a9820
000590:0x001a9780:	icall	
000590:0x001a9790:	movetm	temp, #return
000591:0x001a97a0:	move	@m00, left
000591:0x001a97b0:	inc	left
000591:0x001a97b8:	icall	
000591:0x001a97c8:	icall	
000592:0x001a97d8:	move	@m00, right
000592:0x001a97e8:	dec	right
000592:0x001a97f0:	movefm	@c00, temp
000592:0x001a9800:	icall	
000592:0x001a9810:	release	temp
000592:0x001a9818:	jump	0x1a9768
000592:0x001a9820:	rts
array<@PPERequesterBase>::MoveIndex()
000612:0x001a9878:	ncalli	array<@PPERequesterBase>.Count()
000612:0x001a9880:	move	count, #return
000613:0x001a9890:	move	new_index, curr_index
000615:0x001a98a0:	cmpi	move_number, _i0
000615:0x001a98b0:	ble	0x1a98d8
000617:0x001a98b8:	addi	@m00, curr_index, move_number
000617:0x001a98c8:	move	new_index, @m00
000620:0x001a98d8:	cmpi	move_number, _i0
000620:0x001a98e8:	bge	0x1a9990
000622:0x001a98f0:	subi	@m00, curr_index, move_number
000622:0x001a9900:	move	new_index, @m00
000624:0x001a9910:	cmpi	new_index, _i0
000624:0x001a9920:	bge	0x1a9990
000626:0x001a9928:	subi	@m01, _i0, count
000626:0x001a9938:	cmpi	new_index, @m01
000626:0x001a9948:	bgt	0x1a9970
000628:0x001a9950:	modi	@m00, new_index, count
000628:0x001a9960:	move	new_index, @m00
000631:0x001a9970:	addi	@m00, new_index, count
000631:0x001a9980:	move	new_index, @m00
000635:0x001a9990:	cmpi	new_index, count
000635:0x001a99a0:	blt	0x1a99c8
000637:0x001a99a8:	modi	@m00, new_index, count
000637:0x001a99b8:	move	new_index, @m00
000641:0x001a99c8:	move	#return, new_index
000641:0x001a99d8:	rts
000641:0x001a99e0:	rts
array<@PPERequesterBase>::ShuffleArray()
000646:0x001a9a10:	imove	i, 0x000000
000646:0x001a9a20:	jump	0x1a9a40
000646:0x001a9a28:	move	@m00, i
000646:0x001a9a38:	inc	i
000646:0x001a9a40:	ncalli	array<@PPERequesterBase>.Count()
000646:0x001a9a48:	cmpi	i, #return
000646:0x001a9a58:	bge	0x1a9a90
000648:0x001a9a60:	call	
000648:0x001a9a70:	call	
000648:0x001a9a88:	jump	0x1a9a28
000648:0x001a9a90:	rts
array<@PPERequesterBase>::DifferentAtPosition()
000666:0x001a9ac0:	ncalli	array<@PPERequesterBase>.Count()
000666:0x001a9ac8:	move	@m00, #return
000666:0x001a9ad8:	ncalli	array<PPERequesterBase>.Count()
000666:0x001a9ae0:	cmpi	@m00, #return
000666:0x001a9af0:	beq	0x1a9b20
000668:0x001a9af8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001a9b08:	imove	#return, 0xffffffff
000669:0x001a9b18:	rts
000672:0x001a9b20:	imove	i, 0x000000
000672:0x001a9b30:	jump	0x1a9b40
000672:0x001a9b38:	inc	i
000672:0x001a9b40:	ncalli	array<PPERequesterBase>.Count()
000672:0x001a9b48:	cmpi	i, #return
000672:0x001a9b58:	bge	0x1a9bc8
000674:0x001a9b60:	icall	
000674:0x001a9b70:	movec	@c00, #return
000674:0x001a9b80:	icall	
000674:0x001a9b90:	cmpc	@c00, #return
000674:0x001a9ba0:	beq	0x1a9bc0
000676:0x001a9ba8:	move	#return, i
000676:0x001a9bb8:	rts
000676:0x001a9bc0:	jump	0x1a9b38
000680:0x001a9bc8:	imove	#return, 0xffffffff
000680:0x001a9bd8:	rts
000680:0x001a9be0:	rts
array<ITEM_SpawnerObject>::InsertAll()
000427:0x001aa420:	imove	i, 0x000000
000427:0x001aa430:	jump	0x1aa450
000427:0x001aa438:	move	@m00, i
000427:0x001aa448:	inc	i
000427:0x001aa450:	ncalli	array<ITEM_SpawnerObject>.Count()
000427:0x001aa458:	cmpi	i, #return
000427:0x001aa468:	bge	0x1aa498
000429:0x001aa470:	icall	
000429:0x001aa480:	icall	
000429:0x001aa490:	jump	0x1aa438
000429:0x001aa498:	rts
array<ITEM_SpawnerObject>::RemoveItem()
000479:0x001aa4c8:	movefm	@c00, value
000479:0x001aa4d8:	icall	
000479:0x001aa4e8:	move	remove_index, #return
000481:0x001aa4f8:	cmpi	remove_index, _i0
000481:0x001aa508:	blt	0x1aa520
000483:0x001aa510:	ncalli	array<ITEM_SpawnerObject>.RemoveOrdered(remove_index)
000483:0x001aa520:	rts
array<ITEM_SpawnerObject>::RemoveItemUnOrdered()
000489:0x001aa550:	movefm	@c00, value
000489:0x001aa560:	icall	
000489:0x001aa570:	move	remove_index, #return
000491:0x001aa580:	cmpi	remove_index, _i0
000491:0x001aa590:	blt	0x1aa5a8
000493:0x001aa598:	ncalli	array<ITEM_SpawnerObject>.Remove(remove_index)
000493:0x001aa5a8:	rts
array<ITEM_SpawnerObject>::IsValidIndex()
000499:0x001aa5b0:	cmpi	index, _i-1
000499:0x001aa5c0:	ble	0x1aa600
000499:0x001aa5c8:	ncalli	array<ITEM_SpawnerObject>.Count()
000499:0x001aa5d0:	cmpi	index, #return
000499:0x001aa5e0:	bge	0x1aa600
000499:0x001aa5e8:	imove	#return, 0x000001
000499:0x001aa5f8:	jump	0x1aa610
000499:0x001aa600:	imove	#return, 0x000000
000499:0x001aa610:	rts
000499:0x001aa618:	rts
array<ITEM_SpawnerObject>::Debug()
000525:0x001aa670:	ncalli	array<ITEM_SpawnerObject>.Count()
000525:0x001aa678:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001aa6a8:	icall	Print(#return)
000526:0x001aa6b8:	imove	i, 0x000000
000526:0x001aa6c8:	jump	0x1aa6e8
000526:0x001aa6d0:	move	@m00, i
000526:0x001aa6e0:	inc	i
000526:0x001aa6e8:	ncalli	array<ITEM_SpawnerObject>.Count()
000526:0x001aa6f0:	cmpi	i, #return
000526:0x001aa700:	bge	0x1aa778
000528:0x001aa708:	icall	
000528:0x001aa718:	movetm	item, #return
000529:0x001aa728:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001aa758:	icall	Print(#return)
000529:0x001aa768:	release	item
000529:0x001aa770:	jump	0x1aa6d0
000529:0x001aa778:	rts
array<ITEM_SpawnerObject>::GetRandomIndex()
000544:0x001aa780:	ncalli	array<ITEM_SpawnerObject>.Count()
000544:0x001aa788:	move	@m00, #return
000544:0x001aa798:	cmpi	@m00, _i0
000544:0x001aa7a8:	ble	0x1aa7e0
000546:0x001aa7b0:	ncalli	array<ITEM_SpawnerObject>.Count()
000546:0x001aa7b8:	icall	RandomInt(_i0, #return)
000546:0x001aa7c8:	move	#return, #return
000546:0x001aa7d8:	rts
000549:0x001aa7e0:	imove	#return, 0xffffffff
000549:0x001aa7f0:	rts
000549:0x001aa7f8:	rts
array<ITEM_SpawnerObject>::GetRandomElement()
000563:0x001aa800:	call	
000563:0x001aa810:	icall	
000563:0x001aa820:	movetm	#return, #return
000563:0x001aa830:	rts
000563:0x001aa838:	rts
array<ITEM_SpawnerObject>::SwapItems()
000568:0x001aa868:	icall	
000568:0x001aa878:	movetm	item1, #return
000569:0x001aa888:	icall	
000569:0x001aa898:	icall	
000570:0x001aa8a8:	movefm	@c00, item1
000570:0x001aa8b8:	icall	
000570:0x001aa8c8:	release	item1
000570:0x001aa8d0:	rts
array<ITEM_SpawnerObject>::InsertArray()
000575:0x001aa928:	imove	i, 0x000000
000575:0x001aa938:	jump	0x1aa958
000575:0x001aa940:	move	@m00, i
000575:0x001aa950:	inc	i
000575:0x001aa958:	ncalli	array<ITEM_SpawnerObject>.Count()
000575:0x001aa960:	cmpi	i, #return
000575:0x001aa970:	bge	0x1aa9c8
000577:0x001aa978:	icall	
000577:0x001aa988:	movetm	item, #return
000578:0x001aa998:	movefm	@c00, item
000578:0x001aa9a8:	icall	
000578:0x001aa9b8:	release	item
000578:0x001aa9c0:	jump	0x1aa940
000578:0x001aa9c8:	rts
array<ITEM_SpawnerObject>::Invert()
000584:0x001aaa48:	imove	left, 0x000000
000585:0x001aaa58:	ncalli	array<ITEM_SpawnerObject>.Count()
000585:0x001aaa60:	subi	right, #return, _i1
000586:0x001aaa70:	cmpi	right, _i0
000586:0x001aaa80:	ble	0x1aab40
000588:0x001aaa88:	cmpi	left, right
000588:0x001aaa98:	bge	0x1aab40
000590:0x001aaaa0:	icall	
000590:0x001aaab0:	movetm	temp, #return
000591:0x001aaac0:	move	@m00, left
000591:0x001aaad0:	inc	left
000591:0x001aaad8:	icall	
000591:0x001aaae8:	icall	
000592:0x001aaaf8:	move	@m00, right
000592:0x001aab08:	dec	right
000592:0x001aab10:	movefm	@c00, temp
000592:0x001aab20:	icall	
000592:0x001aab30:	release	temp
000592:0x001aab38:	jump	0x1aaa88
000592:0x001aab40:	rts
array<ITEM_SpawnerObject>::MoveIndex()
000612:0x001aab98:	ncalli	array<ITEM_SpawnerObject>.Count()
000612:0x001aaba0:	move	count, #return
000613:0x001aabb0:	move	new_index, curr_index
000615:0x001aabc0:	cmpi	move_number, _i0
000615:0x001aabd0:	ble	0x1aabf8
000617:0x001aabd8:	addi	@m00, curr_index, move_number
000617:0x001aabe8:	move	new_index, @m00
000620:0x001aabf8:	cmpi	move_number, _i0
000620:0x001aac08:	bge	0x1aacb0
000622:0x001aac10:	subi	@m00, curr_index, move_number
000622:0x001aac20:	move	new_index, @m00
000624:0x001aac30:	cmpi	new_index, _i0
000624:0x001aac40:	bge	0x1aacb0
000626:0x001aac48:	subi	@m01, _i0, count
000626:0x001aac58:	cmpi	new_index, @m01
000626:0x001aac68:	bgt	0x1aac90
000628:0x001aac70:	modi	@m00, new_index, count
000628:0x001aac80:	move	new_index, @m00
000631:0x001aac90:	addi	@m00, new_index, count
000631:0x001aaca0:	move	new_index, @m00
000635:0x001aacb0:	cmpi	new_index, count
000635:0x001aacc0:	blt	0x1aace8
000637:0x001aacc8:	modi	@m00, new_index, count
000637:0x001aacd8:	move	new_index, @m00
000641:0x001aace8:	move	#return, new_index
000641:0x001aacf8:	rts
000641:0x001aad00:	rts
array<ITEM_SpawnerObject>::ShuffleArray()
000646:0x001aad30:	imove	i, 0x000000
000646:0x001aad40:	jump	0x1aad60
000646:0x001aad48:	move	@m00, i
000646:0x001aad58:	inc	i
000646:0x001aad60:	ncalli	array<ITEM_SpawnerObject>.Count()
000646:0x001aad68:	cmpi	i, #return
000646:0x001aad78:	bge	0x1aadb0
000648:0x001aad80:	call	
000648:0x001aad90:	call	
000648:0x001aada8:	jump	0x1aad48
000648:0x001aadb0:	rts
array<ITEM_SpawnerObject>::DifferentAtPosition()
000666:0x001aade0:	ncalli	array<ITEM_SpawnerObject>.Count()
000666:0x001aade8:	move	@m00, #return
000666:0x001aadf8:	push	#return
000666:0x001aae00:	ncalli	array<ITEM_SpawnerObject>.Count()
000666:0x001aae08:	move	@m02, #return
000666:0x001aae18:	pop	#return
000666:0x001aae20:	cmpi	@m00, @m02
000666:0x001aae30:	beq	0x1aae60
000668:0x001aae38:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001aae48:	imove	#return, 0xffffffff
000669:0x001aae58:	rts
000672:0x001aae60:	imove	i, 0x000000
000672:0x001aae70:	jump	0x1aae80
000672:0x001aae78:	inc	i
000672:0x001aae80:	ncalli	array<ITEM_SpawnerObject>.Count()
000672:0x001aae88:	cmpi	i, #return
000672:0x001aae98:	bge	0x1aaf28
000674:0x001aaea0:	icall	
000674:0x001aaeb0:	movec	@c00, #return
000674:0x001aaec0:	pushc	#return
000674:0x001aaec8:	icall	
000674:0x001aaed8:	movec	@c02, #return
000674:0x001aaee8:	popc	#return
000674:0x001aaef0:	cmpc	@c00, @c02
000674:0x001aaf00:	beq	0x1aaf20
000676:0x001aaf08:	move	#return, i
000676:0x001aaf18:	rts
000676:0x001aaf20:	jump	0x1aae78
000680:0x001aaf28:	imove	#return, 0xffffffff
000680:0x001aaf38:	rts
000680:0x001aaf40:	rts
array<@ITEM_SpawnerObject>::InsertAll()
000427:0x001ab358:	imove	i, 0x000000
000427:0x001ab368:	jump	0x1ab388
000427:0x001ab370:	move	@m00, i
000427:0x001ab380:	inc	i
000427:0x001ab388:	ncalli	array<ITEM_SpawnerObject>.Count()
000427:0x001ab390:	cmpi	i, #return
000427:0x001ab3a0:	bge	0x1ab3d0
000429:0x001ab3a8:	icall	
000429:0x001ab3b8:	icall	
000429:0x001ab3c8:	jump	0x1ab370
000429:0x001ab3d0:	rts
array<@ITEM_SpawnerObject>::RemoveItem()
000479:0x001ab400:	movefm	@c00, value
000479:0x001ab410:	icall	
000479:0x001ab420:	move	remove_index, #return
000481:0x001ab430:	cmpi	remove_index, _i0
000481:0x001ab440:	blt	0x1ab458
000483:0x001ab448:	ncalli	array<@ITEM_SpawnerObject>.RemoveOrdered(remove_index)
000483:0x001ab458:	rts
array<@ITEM_SpawnerObject>::RemoveItemUnOrdered()
000489:0x001ab488:	movefm	@c00, value
000489:0x001ab498:	icall	
000489:0x001ab4a8:	move	remove_index, #return
000491:0x001ab4b8:	cmpi	remove_index, _i0
000491:0x001ab4c8:	blt	0x1ab4e0
000493:0x001ab4d0:	ncalli	array<@ITEM_SpawnerObject>.Remove(remove_index)
000493:0x001ab4e0:	rts
array<@ITEM_SpawnerObject>::IsValidIndex()
000499:0x001ab4e8:	cmpi	index, _i-1
000499:0x001ab4f8:	ble	0x1ab538
000499:0x001ab500:	ncalli	array<@ITEM_SpawnerObject>.Count()
000499:0x001ab508:	cmpi	index, #return
000499:0x001ab518:	bge	0x1ab538
000499:0x001ab520:	imove	#return, 0x000001
000499:0x001ab530:	jump	0x1ab548
000499:0x001ab538:	imove	#return, 0x000000
000499:0x001ab548:	rts
000499:0x001ab550:	rts
array<@ITEM_SpawnerObject>::Debug()
000525:0x001ab5a8:	ncalli	array<@ITEM_SpawnerObject>.Count()
000525:0x001ab5b0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001ab5e0:	icall	Print(#return)
000526:0x001ab5f0:	imove	i, 0x000000
000526:0x001ab600:	jump	0x1ab620
000526:0x001ab608:	move	@m00, i
000526:0x001ab618:	inc	i
000526:0x001ab620:	ncalli	array<@ITEM_SpawnerObject>.Count()
000526:0x001ab628:	cmpi	i, #return
000526:0x001ab638:	bge	0x1ab6b0
000528:0x001ab640:	icall	
000528:0x001ab650:	movetm	item, #return
000529:0x001ab660:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001ab690:	icall	Print(#return)
000529:0x001ab6a0:	release	item
000529:0x001ab6a8:	jump	0x1ab608
000529:0x001ab6b0:	rts
array<@ITEM_SpawnerObject>::GetRandomIndex()
000544:0x001ab6b8:	ncalli	array<@ITEM_SpawnerObject>.Count()
000544:0x001ab6c0:	move	@m00, #return
000544:0x001ab6d0:	cmpi	@m00, _i0
000544:0x001ab6e0:	ble	0x1ab718
000546:0x001ab6e8:	ncalli	array<@ITEM_SpawnerObject>.Count()
000546:0x001ab6f0:	icall	RandomInt(_i0, #return)
000546:0x001ab700:	move	#return, #return
000546:0x001ab710:	rts
000549:0x001ab718:	imove	#return, 0xffffffff
000549:0x001ab728:	rts
000549:0x001ab730:	rts
array<@ITEM_SpawnerObject>::GetRandomElement()
000563:0x001ab738:	call	
000563:0x001ab748:	icall	
000563:0x001ab758:	movetm	#return, #return
000563:0x001ab768:	rts
000563:0x001ab770:	rts
array<@ITEM_SpawnerObject>::SwapItems()
000568:0x001ab7a0:	icall	
000568:0x001ab7b0:	movetm	item1, #return
000569:0x001ab7c0:	icall	
000569:0x001ab7d0:	icall	
000570:0x001ab7e0:	movefm	@c00, item1
000570:0x001ab7f0:	icall	
000570:0x001ab800:	release	item1
000570:0x001ab808:	rts
array<@ITEM_SpawnerObject>::InsertArray()
000575:0x001ab860:	imove	i, 0x000000
000575:0x001ab870:	jump	0x1ab890
000575:0x001ab878:	move	@m00, i
000575:0x001ab888:	inc	i
000575:0x001ab890:	ncalli	array<ITEM_SpawnerObject>.Count()
000575:0x001ab898:	cmpi	i, #return
000575:0x001ab8a8:	bge	0x1ab900
000577:0x001ab8b0:	icall	
000577:0x001ab8c0:	movetm	item, #return
000578:0x001ab8d0:	movefm	@c00, item
000578:0x001ab8e0:	icall	
000578:0x001ab8f0:	release	item
000578:0x001ab8f8:	jump	0x1ab878
000578:0x001ab900:	rts
array<@ITEM_SpawnerObject>::Invert()
000584:0x001ab980:	imove	left, 0x000000
000585:0x001ab990:	ncalli	array<@ITEM_SpawnerObject>.Count()
000585:0x001ab998:	subi	right, #return, _i1
000586:0x001ab9a8:	cmpi	right, _i0
000586:0x001ab9b8:	ble	0x1aba78
000588:0x001ab9c0:	cmpi	left, right
000588:0x001ab9d0:	bge	0x1aba78
000590:0x001ab9d8:	icall	
000590:0x001ab9e8:	movetm	temp, #return
000591:0x001ab9f8:	move	@m00, left
000591:0x001aba08:	inc	left
000591:0x001aba10:	icall	
000591:0x001aba20:	icall	
000592:0x001aba30:	move	@m00, right
000592:0x001aba40:	dec	right
000592:0x001aba48:	movefm	@c00, temp
000592:0x001aba58:	icall	
000592:0x001aba68:	release	temp
000592:0x001aba70:	jump	0x1ab9c0
000592:0x001aba78:	rts
array<@ITEM_SpawnerObject>::MoveIndex()
000612:0x001abad0:	ncalli	array<@ITEM_SpawnerObject>.Count()
000612:0x001abad8:	move	count, #return
000613:0x001abae8:	move	new_index, curr_index
000615:0x001abaf8:	cmpi	move_number, _i0
000615:0x001abb08:	ble	0x1abb30
000617:0x001abb10:	addi	@m00, curr_index, move_number
000617:0x001abb20:	move	new_index, @m00
000620:0x001abb30:	cmpi	move_number, _i0
000620:0x001abb40:	bge	0x1abbe8
000622:0x001abb48:	subi	@m00, curr_index, move_number
000622:0x001abb58:	move	new_index, @m00
000624:0x001abb68:	cmpi	new_index, _i0
000624:0x001abb78:	bge	0x1abbe8
000626:0x001abb80:	subi	@m01, _i0, count
000626:0x001abb90:	cmpi	new_index, @m01
000626:0x001abba0:	bgt	0x1abbc8
000628:0x001abba8:	modi	@m00, new_index, count
000628:0x001abbb8:	move	new_index, @m00
000631:0x001abbc8:	addi	@m00, new_index, count
000631:0x001abbd8:	move	new_index, @m00
000635:0x001abbe8:	cmpi	new_index, count
000635:0x001abbf8:	blt	0x1abc20
000637:0x001abc00:	modi	@m00, new_index, count
000637:0x001abc10:	move	new_index, @m00
000641:0x001abc20:	move	#return, new_index
000641:0x001abc30:	rts
000641:0x001abc38:	rts
array<@ITEM_SpawnerObject>::ShuffleArray()
000646:0x001abc68:	imove	i, 0x000000
000646:0x001abc78:	jump	0x1abc98
000646:0x001abc80:	move	@m00, i
000646:0x001abc90:	inc	i
000646:0x001abc98:	ncalli	array<@ITEM_SpawnerObject>.Count()
000646:0x001abca0:	cmpi	i, #return
000646:0x001abcb0:	bge	0x1abce8
000648:0x001abcb8:	call	
000648:0x001abcc8:	call	
000648:0x001abce0:	jump	0x1abc80
000648:0x001abce8:	rts
array<@ITEM_SpawnerObject>::DifferentAtPosition()
000666:0x001abd18:	ncalli	array<@ITEM_SpawnerObject>.Count()
000666:0x001abd20:	move	@m00, #return
000666:0x001abd30:	ncalli	array<ITEM_SpawnerObject>.Count()
000666:0x001abd38:	cmpi	@m00, #return
000666:0x001abd48:	beq	0x1abd78
000668:0x001abd50:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001abd60:	imove	#return, 0xffffffff
000669:0x001abd70:	rts
000672:0x001abd78:	imove	i, 0x000000
000672:0x001abd88:	jump	0x1abd98
000672:0x001abd90:	inc	i
000672:0x001abd98:	ncalli	array<ITEM_SpawnerObject>.Count()
000672:0x001abda0:	cmpi	i, #return
000672:0x001abdb0:	bge	0x1abe20
000674:0x001abdb8:	icall	
000674:0x001abdc8:	movec	@c00, #return
000674:0x001abdd8:	icall	
000674:0x001abde8:	cmpc	@c00, #return
000674:0x001abdf8:	beq	0x1abe18
000676:0x001abe00:	move	#return, i
000676:0x001abe10:	rts
000676:0x001abe18:	jump	0x1abd90
000680:0x001abe20:	imove	#return, 0xffffffff
000680:0x001abe30:	rts
000680:0x001abe38:	rts
array<HintPage>::InsertAll()
000427:0x001ac668:	imove	i, 0x000000
000427:0x001ac678:	jump	0x1ac698
000427:0x001ac680:	move	@m00, i
000427:0x001ac690:	inc	i
000427:0x001ac698:	ncalli	array<HintPage>.Count()
000427:0x001ac6a0:	cmpi	i, #return
000427:0x001ac6b0:	bge	0x1ac6e0
000429:0x001ac6b8:	icall	
000429:0x001ac6c8:	icall	
000429:0x001ac6d8:	jump	0x1ac680
000429:0x001ac6e0:	rts
array<HintPage>::RemoveItem()
000479:0x001ac710:	movefm	@c00, value
000479:0x001ac720:	icall	
000479:0x001ac730:	move	remove_index, #return
000481:0x001ac740:	cmpi	remove_index, _i0
000481:0x001ac750:	blt	0x1ac768
000483:0x001ac758:	ncalli	array<HintPage>.RemoveOrdered(remove_index)
000483:0x001ac768:	rts
array<HintPage>::RemoveItemUnOrdered()
000489:0x001ac798:	movefm	@c00, value
000489:0x001ac7a8:	icall	
000489:0x001ac7b8:	move	remove_index, #return
000491:0x001ac7c8:	cmpi	remove_index, _i0
000491:0x001ac7d8:	blt	0x1ac7f0
000493:0x001ac7e0:	ncalli	array<HintPage>.Remove(remove_index)
000493:0x001ac7f0:	rts
array<HintPage>::IsValidIndex()
000499:0x001ac7f8:	cmpi	index, _i-1
000499:0x001ac808:	ble	0x1ac848
000499:0x001ac810:	ncalli	array<HintPage>.Count()
000499:0x001ac818:	cmpi	index, #return
000499:0x001ac828:	bge	0x1ac848
000499:0x001ac830:	imove	#return, 0x000001
000499:0x001ac840:	jump	0x1ac858
000499:0x001ac848:	imove	#return, 0x000000
000499:0x001ac858:	rts
000499:0x001ac860:	rts
array<HintPage>::Debug()
000525:0x001ac8b8:	ncalli	array<HintPage>.Count()
000525:0x001ac8c0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001ac8f0:	icall	Print(#return)
000526:0x001ac900:	imove	i, 0x000000
000526:0x001ac910:	jump	0x1ac930
000526:0x001ac918:	move	@m00, i
000526:0x001ac928:	inc	i
000526:0x001ac930:	ncalli	array<HintPage>.Count()
000526:0x001ac938:	cmpi	i, #return
000526:0x001ac948:	bge	0x1ac9c0
000528:0x001ac950:	icall	
000528:0x001ac960:	movetm	item, #return
000529:0x001ac970:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001ac9a0:	icall	Print(#return)
000529:0x001ac9b0:	release	item
000529:0x001ac9b8:	jump	0x1ac918
000529:0x001ac9c0:	rts
array<HintPage>::GetRandomIndex()
000544:0x001ac9c8:	ncalli	array<HintPage>.Count()
000544:0x001ac9d0:	move	@m00, #return
000544:0x001ac9e0:	cmpi	@m00, _i0
000544:0x001ac9f0:	ble	0x1aca28
000546:0x001ac9f8:	ncalli	array<HintPage>.Count()
000546:0x001aca00:	icall	RandomInt(_i0, #return)
000546:0x001aca10:	move	#return, #return
000546:0x001aca20:	rts
000549:0x001aca28:	imove	#return, 0xffffffff
000549:0x001aca38:	rts
000549:0x001aca40:	rts
array<HintPage>::GetRandomElement()
000563:0x001aca48:	call	
000563:0x001aca58:	icall	
000563:0x001aca68:	movetm	#return, #return
000563:0x001aca78:	rts
000563:0x001aca80:	rts
array<HintPage>::SwapItems()
000568:0x001acab0:	icall	
000568:0x001acac0:	movetm	item1, #return
000569:0x001acad0:	icall	
000569:0x001acae0:	icall	
000570:0x001acaf0:	movefm	@c00, item1
000570:0x001acb00:	icall	
000570:0x001acb10:	release	item1
000570:0x001acb18:	rts
array<HintPage>::InsertArray()
000575:0x001acb70:	imove	i, 0x000000
000575:0x001acb80:	jump	0x1acba0
000575:0x001acb88:	move	@m00, i
000575:0x001acb98:	inc	i
000575:0x001acba0:	ncalli	array<HintPage>.Count()
000575:0x001acba8:	cmpi	i, #return
000575:0x001acbb8:	bge	0x1acc10
000577:0x001acbc0:	icall	
000577:0x001acbd0:	movetm	item, #return
000578:0x001acbe0:	movefm	@c00, item
000578:0x001acbf0:	icall	
000578:0x001acc00:	release	item
000578:0x001acc08:	jump	0x1acb88
000578:0x001acc10:	rts
array<HintPage>::Invert()
000584:0x001acc90:	imove	left, 0x000000
000585:0x001acca0:	ncalli	array<HintPage>.Count()
000585:0x001acca8:	subi	right, #return, _i1
000586:0x001accb8:	cmpi	right, _i0
000586:0x001accc8:	ble	0x1acd88
000588:0x001accd0:	cmpi	left, right
000588:0x001acce0:	bge	0x1acd88
000590:0x001acce8:	icall	
000590:0x001accf8:	movetm	temp, #return
000591:0x001acd08:	move	@m00, left
000591:0x001acd18:	inc	left
000591:0x001acd20:	icall	
000591:0x001acd30:	icall	
000592:0x001acd40:	move	@m00, right
000592:0x001acd50:	dec	right
000592:0x001acd58:	movefm	@c00, temp
000592:0x001acd68:	icall	
000592:0x001acd78:	release	temp
000592:0x001acd80:	jump	0x1accd0
000592:0x001acd88:	rts
array<HintPage>::MoveIndex()
000612:0x001acde0:	ncalli	array<HintPage>.Count()
000612:0x001acde8:	move	count, #return
000613:0x001acdf8:	move	new_index, curr_index
000615:0x001ace08:	cmpi	move_number, _i0
000615:0x001ace18:	ble	0x1ace40
000617:0x001ace20:	addi	@m00, curr_index, move_number
000617:0x001ace30:	move	new_index, @m00
000620:0x001ace40:	cmpi	move_number, _i0
000620:0x001ace50:	bge	0x1acef8
000622:0x001ace58:	subi	@m00, curr_index, move_number
000622:0x001ace68:	move	new_index, @m00
000624:0x001ace78:	cmpi	new_index, _i0
000624:0x001ace88:	bge	0x1acef8
000626:0x001ace90:	subi	@m01, _i0, count
000626:0x001acea0:	cmpi	new_index, @m01
000626:0x001aceb0:	bgt	0x1aced8
000628:0x001aceb8:	modi	@m00, new_index, count
000628:0x001acec8:	move	new_index, @m00
000631:0x001aced8:	addi	@m00, new_index, count
000631:0x001acee8:	move	new_index, @m00
000635:0x001acef8:	cmpi	new_index, count
000635:0x001acf08:	blt	0x1acf30
000637:0x001acf10:	modi	@m00, new_index, count
000637:0x001acf20:	move	new_index, @m00
000641:0x001acf30:	move	#return, new_index
000641:0x001acf40:	rts
000641:0x001acf48:	rts
array<HintPage>::ShuffleArray()
000646:0x001acf78:	imove	i, 0x000000
000646:0x001acf88:	jump	0x1acfa8
000646:0x001acf90:	move	@m00, i
000646:0x001acfa0:	inc	i
000646:0x001acfa8:	ncalli	array<HintPage>.Count()
000646:0x001acfb0:	cmpi	i, #return
000646:0x001acfc0:	bge	0x1acff8
000648:0x001acfc8:	call	
000648:0x001acfd8:	call	
000648:0x001acff0:	jump	0x1acf90
000648:0x001acff8:	rts
array<HintPage>::DifferentAtPosition()
000666:0x001ad028:	ncalli	array<HintPage>.Count()
000666:0x001ad030:	move	@m00, #return
000666:0x001ad040:	push	#return
000666:0x001ad048:	ncalli	array<HintPage>.Count()
000666:0x001ad050:	move	@m02, #return
000666:0x001ad060:	pop	#return
000666:0x001ad068:	cmpi	@m00, @m02
000666:0x001ad078:	beq	0x1ad0a8
000668:0x001ad080:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001ad090:	imove	#return, 0xffffffff
000669:0x001ad0a0:	rts
000672:0x001ad0a8:	imove	i, 0x000000
000672:0x001ad0b8:	jump	0x1ad0c8
000672:0x001ad0c0:	inc	i
000672:0x001ad0c8:	ncalli	array<HintPage>.Count()
000672:0x001ad0d0:	cmpi	i, #return
000672:0x001ad0e0:	bge	0x1ad170
000674:0x001ad0e8:	icall	
000674:0x001ad0f8:	movec	@c00, #return
000674:0x001ad108:	pushc	#return
000674:0x001ad110:	icall	
000674:0x001ad120:	movec	@c02, #return
000674:0x001ad130:	popc	#return
000674:0x001ad138:	cmpc	@c00, @c02
000674:0x001ad148:	beq	0x1ad168
000676:0x001ad150:	move	#return, i
000676:0x001ad160:	rts
000676:0x001ad168:	jump	0x1ad0c0
000680:0x001ad170:	imove	#return, 0xffffffff
000680:0x001ad180:	rts
000680:0x001ad188:	rts
array<@HintPage>::InsertAll()
000427:0x001ad5a0:	imove	i, 0x000000
000427:0x001ad5b0:	jump	0x1ad5d0
000427:0x001ad5b8:	move	@m00, i
000427:0x001ad5c8:	inc	i
000427:0x001ad5d0:	ncalli	array<HintPage>.Count()
000427:0x001ad5d8:	cmpi	i, #return
000427:0x001ad5e8:	bge	0x1ad618
000429:0x001ad5f0:	icall	
000429:0x001ad600:	icall	
000429:0x001ad610:	jump	0x1ad5b8
000429:0x001ad618:	rts
array<@HintPage>::RemoveItem()
000479:0x001ad648:	movefm	@c00, value
000479:0x001ad658:	icall	
000479:0x001ad668:	move	remove_index, #return
000481:0x001ad678:	cmpi	remove_index, _i0
000481:0x001ad688:	blt	0x1ad6a0
000483:0x001ad690:	ncalli	array<@HintPage>.RemoveOrdered(remove_index)
000483:0x001ad6a0:	rts
array<@HintPage>::RemoveItemUnOrdered()
000489:0x001ad6d0:	movefm	@c00, value
000489:0x001ad6e0:	icall	
000489:0x001ad6f0:	move	remove_index, #return
000491:0x001ad700:	cmpi	remove_index, _i0
000491:0x001ad710:	blt	0x1ad728
000493:0x001ad718:	ncalli	array<@HintPage>.Remove(remove_index)
000493:0x001ad728:	rts
array<@HintPage>::IsValidIndex()
000499:0x001ad730:	cmpi	index, _i-1
000499:0x001ad740:	ble	0x1ad780
000499:0x001ad748:	ncalli	array<@HintPage>.Count()
000499:0x001ad750:	cmpi	index, #return
000499:0x001ad760:	bge	0x1ad780
000499:0x001ad768:	imove	#return, 0x000001
000499:0x001ad778:	jump	0x1ad790
000499:0x001ad780:	imove	#return, 0x000000
000499:0x001ad790:	rts
000499:0x001ad798:	rts
array<@HintPage>::Debug()
000525:0x001ad7f0:	ncalli	array<@HintPage>.Count()
000525:0x001ad7f8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001ad828:	icall	Print(#return)
000526:0x001ad838:	imove	i, 0x000000
000526:0x001ad848:	jump	0x1ad868
000526:0x001ad850:	move	@m00, i
000526:0x001ad860:	inc	i
000526:0x001ad868:	ncalli	array<@HintPage>.Count()
000526:0x001ad870:	cmpi	i, #return
000526:0x001ad880:	bge	0x1ad8f8
000528:0x001ad888:	icall	
000528:0x001ad898:	movetm	item, #return
000529:0x001ad8a8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001ad8d8:	icall	Print(#return)
000529:0x001ad8e8:	release	item
000529:0x001ad8f0:	jump	0x1ad850
000529:0x001ad8f8:	rts
array<@HintPage>::GetRandomIndex()
000544:0x001ad900:	ncalli	array<@HintPage>.Count()
000544:0x001ad908:	move	@m00, #return
000544:0x001ad918:	cmpi	@m00, _i0
000544:0x001ad928:	ble	0x1ad960
000546:0x001ad930:	ncalli	array<@HintPage>.Count()
000546:0x001ad938:	icall	RandomInt(_i0, #return)
000546:0x001ad948:	move	#return, #return
000546:0x001ad958:	rts
000549:0x001ad960:	imove	#return, 0xffffffff
000549:0x001ad970:	rts
000549:0x001ad978:	rts
array<@HintPage>::GetRandomElement()
000563:0x001ad980:	call	
000563:0x001ad990:	icall	
000563:0x001ad9a0:	movetm	#return, #return
000563:0x001ad9b0:	rts
000563:0x001ad9b8:	rts
array<@HintPage>::SwapItems()
000568:0x001ad9e8:	icall	
000568:0x001ad9f8:	movetm	item1, #return
000569:0x001ada08:	icall	
000569:0x001ada18:	icall	
000570:0x001ada28:	movefm	@c00, item1
000570:0x001ada38:	icall	
000570:0x001ada48:	release	item1
000570:0x001ada50:	rts
array<@HintPage>::InsertArray()
000575:0x001adaa8:	imove	i, 0x000000
000575:0x001adab8:	jump	0x1adad8
000575:0x001adac0:	move	@m00, i
000575:0x001adad0:	inc	i
000575:0x001adad8:	ncalli	array<HintPage>.Count()
000575:0x001adae0:	cmpi	i, #return
000575:0x001adaf0:	bge	0x1adb48
000577:0x001adaf8:	icall	
000577:0x001adb08:	movetm	item, #return
000578:0x001adb18:	movefm	@c00, item
000578:0x001adb28:	icall	
000578:0x001adb38:	release	item
000578:0x001adb40:	jump	0x1adac0
000578:0x001adb48:	rts
array<@HintPage>::Invert()
000584:0x001adbc8:	imove	left, 0x000000
000585:0x001adbd8:	ncalli	array<@HintPage>.Count()
000585:0x001adbe0:	subi	right, #return, _i1
000586:0x001adbf0:	cmpi	right, _i0
000586:0x001adc00:	ble	0x1adcc0
000588:0x001adc08:	cmpi	left, right
000588:0x001adc18:	bge	0x1adcc0
000590:0x001adc20:	icall	
000590:0x001adc30:	movetm	temp, #return
000591:0x001adc40:	move	@m00, left
000591:0x001adc50:	inc	left
000591:0x001adc58:	icall	
000591:0x001adc68:	icall	
000592:0x001adc78:	move	@m00, right
000592:0x001adc88:	dec	right
000592:0x001adc90:	movefm	@c00, temp
000592:0x001adca0:	icall	
000592:0x001adcb0:	release	temp
000592:0x001adcb8:	jump	0x1adc08
000592:0x001adcc0:	rts
array<@HintPage>::MoveIndex()
000612:0x001add18:	ncalli	array<@HintPage>.Count()
000612:0x001add20:	move	count, #return
000613:0x001add30:	move	new_index, curr_index
000615:0x001add40:	cmpi	move_number, _i0
000615:0x001add50:	ble	0x1add78
000617:0x001add58:	addi	@m00, curr_index, move_number
000617:0x001add68:	move	new_index, @m00
000620:0x001add78:	cmpi	move_number, _i0
000620:0x001add88:	bge	0x1ade30
000622:0x001add90:	subi	@m00, curr_index, move_number
000622:0x001adda0:	move	new_index, @m00
000624:0x001addb0:	cmpi	new_index, _i0
000624:0x001addc0:	bge	0x1ade30
000626:0x001addc8:	subi	@m01, _i0, count
000626:0x001addd8:	cmpi	new_index, @m01
000626:0x001adde8:	bgt	0x1ade10
000628:0x001addf0:	modi	@m00, new_index, count
000628:0x001ade00:	move	new_index, @m00
000631:0x001ade10:	addi	@m00, new_index, count
000631:0x001ade20:	move	new_index, @m00
000635:0x001ade30:	cmpi	new_index, count
000635:0x001ade40:	blt	0x1ade68
000637:0x001ade48:	modi	@m00, new_index, count
000637:0x001ade58:	move	new_index, @m00
000641:0x001ade68:	move	#return, new_index
000641:0x001ade78:	rts
000641:0x001ade80:	rts
array<@HintPage>::ShuffleArray()
000646:0x001adeb0:	imove	i, 0x000000
000646:0x001adec0:	jump	0x1adee0
000646:0x001adec8:	move	@m00, i
000646:0x001aded8:	inc	i
000646:0x001adee0:	ncalli	array<@HintPage>.Count()
000646:0x001adee8:	cmpi	i, #return
000646:0x001adef8:	bge	0x1adf30
000648:0x001adf00:	call	
000648:0x001adf10:	call	
000648:0x001adf28:	jump	0x1adec8
000648:0x001adf30:	rts
array<@HintPage>::DifferentAtPosition()
000666:0x001adf60:	ncalli	array<@HintPage>.Count()
000666:0x001adf68:	move	@m00, #return
000666:0x001adf78:	ncalli	array<HintPage>.Count()
000666:0x001adf80:	cmpi	@m00, #return
000666:0x001adf90:	beq	0x1adfc0
000668:0x001adf98:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001adfa8:	imove	#return, 0xffffffff
000669:0x001adfb8:	rts
000672:0x001adfc0:	imove	i, 0x000000
000672:0x001adfd0:	jump	0x1adfe0
000672:0x001adfd8:	inc	i
000672:0x001adfe0:	ncalli	array<HintPage>.Count()
000672:0x001adfe8:	cmpi	i, #return
000672:0x001adff8:	bge	0x1ae068
000674:0x001ae000:	icall	
000674:0x001ae010:	movec	@c00, #return
000674:0x001ae020:	icall	
000674:0x001ae030:	cmpc	@c00, #return
000674:0x001ae040:	beq	0x1ae060
000676:0x001ae048:	move	#return, i
000676:0x001ae058:	rts
000676:0x001ae060:	jump	0x1adfd8
000680:0x001ae068:	imove	#return, 0xffffffff
000680:0x001ae078:	rts
000680:0x001ae080:	rts
array<DayZAIHitComponent>::InsertAll()
000427:0x001ae8c0:	imove	i, 0x000000
000427:0x001ae8d0:	jump	0x1ae8f0
000427:0x001ae8d8:	move	@m00, i
000427:0x001ae8e8:	inc	i
000427:0x001ae8f0:	ncalli	array<DayZAIHitComponent>.Count()
000427:0x001ae8f8:	cmpi	i, #return
000427:0x001ae908:	bge	0x1ae938
000429:0x001ae910:	icall	
000429:0x001ae920:	icall	
000429:0x001ae930:	jump	0x1ae8d8
000429:0x001ae938:	rts
array<DayZAIHitComponent>::RemoveItem()
000479:0x001ae968:	movefm	@c00, value
000479:0x001ae978:	icall	
000479:0x001ae988:	move	remove_index, #return
000481:0x001ae998:	cmpi	remove_index, _i0
000481:0x001ae9a8:	blt	0x1ae9c0
000483:0x001ae9b0:	ncalli	array<DayZAIHitComponent>.RemoveOrdered(remove_index)
000483:0x001ae9c0:	rts
array<DayZAIHitComponent>::RemoveItemUnOrdered()
000489:0x001ae9f0:	movefm	@c00, value
000489:0x001aea00:	icall	
000489:0x001aea10:	move	remove_index, #return
000491:0x001aea20:	cmpi	remove_index, _i0
000491:0x001aea30:	blt	0x1aea48
000493:0x001aea38:	ncalli	array<DayZAIHitComponent>.Remove(remove_index)
000493:0x001aea48:	rts
array<DayZAIHitComponent>::IsValidIndex()
000499:0x001aea50:	cmpi	index, _i-1
000499:0x001aea60:	ble	0x1aeaa0
000499:0x001aea68:	ncalli	array<DayZAIHitComponent>.Count()
000499:0x001aea70:	cmpi	index, #return
000499:0x001aea80:	bge	0x1aeaa0
000499:0x001aea88:	imove	#return, 0x000001
000499:0x001aea98:	jump	0x1aeab0
000499:0x001aeaa0:	imove	#return, 0x000000
000499:0x001aeab0:	rts
000499:0x001aeab8:	rts
array<DayZAIHitComponent>::Debug()
000525:0x001aeb10:	ncalli	array<DayZAIHitComponent>.Count()
000525:0x001aeb18:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001aeb48:	icall	Print(#return)
000526:0x001aeb58:	imove	i, 0x000000
000526:0x001aeb68:	jump	0x1aeb88
000526:0x001aeb70:	move	@m00, i
000526:0x001aeb80:	inc	i
000526:0x001aeb88:	ncalli	array<DayZAIHitComponent>.Count()
000526:0x001aeb90:	cmpi	i, #return
000526:0x001aeba0:	bge	0x1aec18
000528:0x001aeba8:	icall	
000528:0x001aebb8:	movetm	item, #return
000529:0x001aebc8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001aebf8:	icall	Print(#return)
000529:0x001aec08:	release	item
000529:0x001aec10:	jump	0x1aeb70
000529:0x001aec18:	rts
array<DayZAIHitComponent>::GetRandomIndex()
000544:0x001aec20:	ncalli	array<DayZAIHitComponent>.Count()
000544:0x001aec28:	move	@m00, #return
000544:0x001aec38:	cmpi	@m00, _i0
000544:0x001aec48:	ble	0x1aec80
000546:0x001aec50:	ncalli	array<DayZAIHitComponent>.Count()
000546:0x001aec58:	icall	RandomInt(_i0, #return)
000546:0x001aec68:	move	#return, #return
000546:0x001aec78:	rts
000549:0x001aec80:	imove	#return, 0xffffffff
000549:0x001aec90:	rts
000549:0x001aec98:	rts
array<DayZAIHitComponent>::GetRandomElement()
000563:0x001aeca0:	call	
000563:0x001aecb0:	icall	
000563:0x001aecc0:	movetm	#return, #return
000563:0x001aecd0:	rts
000563:0x001aecd8:	rts
array<DayZAIHitComponent>::SwapItems()
000568:0x001aed08:	icall	
000568:0x001aed18:	movetm	item1, #return
000569:0x001aed28:	icall	
000569:0x001aed38:	icall	
000570:0x001aed48:	movefm	@c00, item1
000570:0x001aed58:	icall	
000570:0x001aed68:	release	item1
000570:0x001aed70:	rts
array<DayZAIHitComponent>::InsertArray()
000575:0x001aedc8:	imove	i, 0x000000
000575:0x001aedd8:	jump	0x1aedf8
000575:0x001aede0:	move	@m00, i
000575:0x001aedf0:	inc	i
000575:0x001aedf8:	ncalli	array<DayZAIHitComponent>.Count()
000575:0x001aee00:	cmpi	i, #return
000575:0x001aee10:	bge	0x1aee68
000577:0x001aee18:	icall	
000577:0x001aee28:	movetm	item, #return
000578:0x001aee38:	movefm	@c00, item
000578:0x001aee48:	icall	
000578:0x001aee58:	release	item
000578:0x001aee60:	jump	0x1aede0
000578:0x001aee68:	rts
array<DayZAIHitComponent>::Invert()
000584:0x001aeee8:	imove	left, 0x000000
000585:0x001aeef8:	ncalli	array<DayZAIHitComponent>.Count()
000585:0x001aef00:	subi	right, #return, _i1
000586:0x001aef10:	cmpi	right, _i0
000586:0x001aef20:	ble	0x1aefe0
000588:0x001aef28:	cmpi	left, right
000588:0x001aef38:	bge	0x1aefe0
000590:0x001aef40:	icall	
000590:0x001aef50:	movetm	temp, #return
000591:0x001aef60:	move	@m00, left
000591:0x001aef70:	inc	left
000591:0x001aef78:	icall	
000591:0x001aef88:	icall	
000592:0x001aef98:	move	@m00, right
000592:0x001aefa8:	dec	right
000592:0x001aefb0:	movefm	@c00, temp
000592:0x001aefc0:	icall	
000592:0x001aefd0:	release	temp
000592:0x001aefd8:	jump	0x1aef28
000592:0x001aefe0:	rts
array<DayZAIHitComponent>::MoveIndex()
000612:0x001af038:	ncalli	array<DayZAIHitComponent>.Count()
000612:0x001af040:	move	count, #return
000613:0x001af050:	move	new_index, curr_index
000615:0x001af060:	cmpi	move_number, _i0
000615:0x001af070:	ble	0x1af098
000617:0x001af078:	addi	@m00, curr_index, move_number
000617:0x001af088:	move	new_index, @m00
000620:0x001af098:	cmpi	move_number, _i0
000620:0x001af0a8:	bge	0x1af150
000622:0x001af0b0:	subi	@m00, curr_index, move_number
000622:0x001af0c0:	move	new_index, @m00
000624:0x001af0d0:	cmpi	new_index, _i0
000624:0x001af0e0:	bge	0x1af150
000626:0x001af0e8:	subi	@m01, _i0, count
000626:0x001af0f8:	cmpi	new_index, @m01
000626:0x001af108:	bgt	0x1af130
000628:0x001af110:	modi	@m00, new_index, count
000628:0x001af120:	move	new_index, @m00
000631:0x001af130:	addi	@m00, new_index, count
000631:0x001af140:	move	new_index, @m00
000635:0x001af150:	cmpi	new_index, count
000635:0x001af160:	blt	0x1af188
000637:0x001af168:	modi	@m00, new_index, count
000637:0x001af178:	move	new_index, @m00
000641:0x001af188:	move	#return, new_index
000641:0x001af198:	rts
000641:0x001af1a0:	rts
array<DayZAIHitComponent>::ShuffleArray()
000646:0x001af1d0:	imove	i, 0x000000
000646:0x001af1e0:	jump	0x1af200
000646:0x001af1e8:	move	@m00, i
000646:0x001af1f8:	inc	i
000646:0x001af200:	ncalli	array<DayZAIHitComponent>.Count()
000646:0x001af208:	cmpi	i, #return
000646:0x001af218:	bge	0x1af250
000648:0x001af220:	call	
000648:0x001af230:	call	
000648:0x001af248:	jump	0x1af1e8
000648:0x001af250:	rts
array<DayZAIHitComponent>::DifferentAtPosition()
000666:0x001af280:	ncalli	array<DayZAIHitComponent>.Count()
000666:0x001af288:	move	@m00, #return
000666:0x001af298:	push	#return
000666:0x001af2a0:	ncalli	array<DayZAIHitComponent>.Count()
000666:0x001af2a8:	move	@m02, #return
000666:0x001af2b8:	pop	#return
000666:0x001af2c0:	cmpi	@m00, @m02
000666:0x001af2d0:	beq	0x1af300
000668:0x001af2d8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001af2e8:	imove	#return, 0xffffffff
000669:0x001af2f8:	rts
000672:0x001af300:	imove	i, 0x000000
000672:0x001af310:	jump	0x1af320
000672:0x001af318:	inc	i
000672:0x001af320:	ncalli	array<DayZAIHitComponent>.Count()
000672:0x001af328:	cmpi	i, #return
000672:0x001af338:	bge	0x1af3c8
000674:0x001af340:	icall	
000674:0x001af350:	movec	@c00, #return
000674:0x001af360:	pushc	#return
000674:0x001af368:	icall	
000674:0x001af378:	movec	@c02, #return
000674:0x001af388:	popc	#return
000674:0x001af390:	cmpc	@c00, @c02
000674:0x001af3a0:	beq	0x1af3c0
000676:0x001af3a8:	move	#return, i
000676:0x001af3b8:	rts
000676:0x001af3c0:	jump	0x1af318
000680:0x001af3c8:	imove	#return, 0xffffffff
000680:0x001af3d8:	rts
000680:0x001af3e0:	rts
array<@DayZAIHitComponent>::InsertAll()
000427:0x001af7f8:	imove	i, 0x000000
000427:0x001af808:	jump	0x1af828
000427:0x001af810:	move	@m00, i
000427:0x001af820:	inc	i
000427:0x001af828:	ncalli	array<DayZAIHitComponent>.Count()
000427:0x001af830:	cmpi	i, #return
000427:0x001af840:	bge	0x1af870
000429:0x001af848:	icall	
000429:0x001af858:	icall	
000429:0x001af868:	jump	0x1af810
000429:0x001af870:	rts
array<@DayZAIHitComponent>::RemoveItem()
000479:0x001af8a0:	movefm	@c00, value
000479:0x001af8b0:	icall	
000479:0x001af8c0:	move	remove_index, #return
000481:0x001af8d0:	cmpi	remove_index, _i0
000481:0x001af8e0:	blt	0x1af8f8
000483:0x001af8e8:	ncalli	array<@DayZAIHitComponent>.RemoveOrdered(remove_index)
000483:0x001af8f8:	rts
array<@DayZAIHitComponent>::RemoveItemUnOrdered()
000489:0x001af928:	movefm	@c00, value
000489:0x001af938:	icall	
000489:0x001af948:	move	remove_index, #return
000491:0x001af958:	cmpi	remove_index, _i0
000491:0x001af968:	blt	0x1af980
000493:0x001af970:	ncalli	array<@DayZAIHitComponent>.Remove(remove_index)
000493:0x001af980:	rts
array<@DayZAIHitComponent>::IsValidIndex()
000499:0x001af988:	cmpi	index, _i-1
000499:0x001af998:	ble	0x1af9d8
000499:0x001af9a0:	ncalli	array<@DayZAIHitComponent>.Count()
000499:0x001af9a8:	cmpi	index, #return
000499:0x001af9b8:	bge	0x1af9d8
000499:0x001af9c0:	imove	#return, 0x000001
000499:0x001af9d0:	jump	0x1af9e8
000499:0x001af9d8:	imove	#return, 0x000000
000499:0x001af9e8:	rts
000499:0x001af9f0:	rts
array<@DayZAIHitComponent>::Debug()
000525:0x001afa48:	ncalli	array<@DayZAIHitComponent>.Count()
000525:0x001afa50:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001afa80:	icall	Print(#return)
000526:0x001afa90:	imove	i, 0x000000
000526:0x001afaa0:	jump	0x1afac0
000526:0x001afaa8:	move	@m00, i
000526:0x001afab8:	inc	i
000526:0x001afac0:	ncalli	array<@DayZAIHitComponent>.Count()
000526:0x001afac8:	cmpi	i, #return
000526:0x001afad8:	bge	0x1afb50
000528:0x001afae0:	icall	
000528:0x001afaf0:	movetm	item, #return
000529:0x001afb00:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001afb30:	icall	Print(#return)
000529:0x001afb40:	release	item
000529:0x001afb48:	jump	0x1afaa8
000529:0x001afb50:	rts
array<@DayZAIHitComponent>::GetRandomIndex()
000544:0x001afb58:	ncalli	array<@DayZAIHitComponent>.Count()
000544:0x001afb60:	move	@m00, #return
000544:0x001afb70:	cmpi	@m00, _i0
000544:0x001afb80:	ble	0x1afbb8
000546:0x001afb88:	ncalli	array<@DayZAIHitComponent>.Count()
000546:0x001afb90:	icall	RandomInt(_i0, #return)
000546:0x001afba0:	move	#return, #return
000546:0x001afbb0:	rts
000549:0x001afbb8:	imove	#return, 0xffffffff
000549:0x001afbc8:	rts
000549:0x001afbd0:	rts
array<@DayZAIHitComponent>::GetRandomElement()
000563:0x001afbd8:	call	
000563:0x001afbe8:	icall	
000563:0x001afbf8:	movetm	#return, #return
000563:0x001afc08:	rts
000563:0x001afc10:	rts
array<@DayZAIHitComponent>::SwapItems()
000568:0x001afc40:	icall	
000568:0x001afc50:	movetm	item1, #return
000569:0x001afc60:	icall	
000569:0x001afc70:	icall	
000570:0x001afc80:	movefm	@c00, item1
000570:0x001afc90:	icall	
000570:0x001afca0:	release	item1
000570:0x001afca8:	rts
array<@DayZAIHitComponent>::InsertArray()
000575:0x001afd00:	imove	i, 0x000000
000575:0x001afd10:	jump	0x1afd30
000575:0x001afd18:	move	@m00, i
000575:0x001afd28:	inc	i
000575:0x001afd30:	ncalli	array<DayZAIHitComponent>.Count()
000575:0x001afd38:	cmpi	i, #return
000575:0x001afd48:	bge	0x1afda0
000577:0x001afd50:	icall	
000577:0x001afd60:	movetm	item, #return
000578:0x001afd70:	movefm	@c00, item
000578:0x001afd80:	icall	
000578:0x001afd90:	release	item
000578:0x001afd98:	jump	0x1afd18
000578:0x001afda0:	rts
array<@DayZAIHitComponent>::Invert()
000584:0x001afe20:	imove	left, 0x000000
000585:0x001afe30:	ncalli	array<@DayZAIHitComponent>.Count()
000585:0x001afe38:	subi	right, #return, _i1
000586:0x001afe48:	cmpi	right, _i0
000586:0x001afe58:	ble	0x1aff18
000588:0x001afe60:	cmpi	left, right
000588:0x001afe70:	bge	0x1aff18
000590:0x001afe78:	icall	
000590:0x001afe88:	movetm	temp, #return
000591:0x001afe98:	move	@m00, left
000591:0x001afea8:	inc	left
000591:0x001afeb0:	icall	
000591:0x001afec0:	icall	
000592:0x001afed0:	move	@m00, right
000592:0x001afee0:	dec	right
000592:0x001afee8:	movefm	@c00, temp
000592:0x001afef8:	icall	
000592:0x001aff08:	release	temp
000592:0x001aff10:	jump	0x1afe60
000592:0x001aff18:	rts
array<@DayZAIHitComponent>::MoveIndex()
000612:0x001aff70:	ncalli	array<@DayZAIHitComponent>.Count()
000612:0x001aff78:	move	count, #return
000613:0x001aff88:	move	new_index, curr_index
000615:0x001aff98:	cmpi	move_number, _i0
000615:0x001affa8:	ble	0x1affd0
000617:0x001affb0:	addi	@m00, curr_index, move_number
000617:0x001affc0:	move	new_index, @m00
000620:0x001affd0:	cmpi	move_number, _i0
000620:0x001affe0:	bge	0x1b0088
000622:0x001affe8:	subi	@m00, curr_index, move_number
000622:0x001afff8:	move	new_index, @m00
000624:0x001b0008:	cmpi	new_index, _i0
000624:0x001b0018:	bge	0x1b0088
000626:0x001b0020:	subi	@m01, _i0, count
000626:0x001b0030:	cmpi	new_index, @m01
000626:0x001b0040:	bgt	0x1b0068
000628:0x001b0048:	modi	@m00, new_index, count
000628:0x001b0058:	move	new_index, @m00
000631:0x001b0068:	addi	@m00, new_index, count
000631:0x001b0078:	move	new_index, @m00
000635:0x001b0088:	cmpi	new_index, count
000635:0x001b0098:	blt	0x1b00c0
000637:0x001b00a0:	modi	@m00, new_index, count
000637:0x001b00b0:	move	new_index, @m00
000641:0x001b00c0:	move	#return, new_index
000641:0x001b00d0:	rts
000641:0x001b00d8:	rts
array<@DayZAIHitComponent>::ShuffleArray()
000646:0x001b0108:	imove	i, 0x000000
000646:0x001b0118:	jump	0x1b0138
000646:0x001b0120:	move	@m00, i
000646:0x001b0130:	inc	i
000646:0x001b0138:	ncalli	array<@DayZAIHitComponent>.Count()
000646:0x001b0140:	cmpi	i, #return
000646:0x001b0150:	bge	0x1b0188
000648:0x001b0158:	call	
000648:0x001b0168:	call	
000648:0x001b0180:	jump	0x1b0120
000648:0x001b0188:	rts
array<@DayZAIHitComponent>::DifferentAtPosition()
000666:0x001b01b8:	ncalli	array<@DayZAIHitComponent>.Count()
000666:0x001b01c0:	move	@m00, #return
000666:0x001b01d0:	ncalli	array<DayZAIHitComponent>.Count()
000666:0x001b01d8:	cmpi	@m00, #return
000666:0x001b01e8:	beq	0x1b0218
000668:0x001b01f0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001b0200:	imove	#return, 0xffffffff
000669:0x001b0210:	rts
000672:0x001b0218:	imove	i, 0x000000
000672:0x001b0228:	jump	0x1b0238
000672:0x001b0230:	inc	i
000672:0x001b0238:	ncalli	array<DayZAIHitComponent>.Count()
000672:0x001b0240:	cmpi	i, #return
000672:0x001b0250:	bge	0x1b02c0
000674:0x001b0258:	icall	
000674:0x001b0268:	movec	@c00, #return
000674:0x001b0278:	icall	
000674:0x001b0288:	cmpc	@c00, #return
000674:0x001b0298:	beq	0x1b02b8
000676:0x001b02a0:	move	#return, i
000676:0x001b02b0:	rts
000676:0x001b02b8:	jump	0x1b0230
000680:0x001b02c0:	imove	#return, 0xffffffff
000680:0x001b02d0:	rts
000680:0x001b02d8:	rts
map<int,PPERequesterBase>::GetKeyArray()
000885:0x001b0cd0:	new	keys, array<int>
000886:0x001b0cf0:	imove	i, 0x000000
000886:0x001b0d00:	jump	0x1b0d20
000886:0x001b0d08:	move	@m00, i
000886:0x001b0d18:	inc	i
000886:0x001b0d20:	ncalli	map<int,PPERequesterBase>.Count()
000886:0x001b0d28:	cmpi	i, #return
000886:0x001b0d38:	bge	0x1b0d68
000888:0x001b0d40:	icall	
000888:0x001b0d50:	icall	
000888:0x001b0d60:	jump	0x1b0d08
000890:0x001b0d68:	movem	#return, keys
000890:0x001b0d78:	release	keys
000890:0x001b0d80:	rts
000890:0x001b0d88:	release	keys
000890:0x001b0d90:	rts
map<int,PPERequesterBase>::GetValueArray()
000895:0x001b0de8:	new	elements, array<PPERequesterBase>
000896:0x001b0e08:	imove	i, 0x000000
000896:0x001b0e18:	jump	0x1b0e38
000896:0x001b0e20:	move	@m00, i
000896:0x001b0e30:	inc	i
000896:0x001b0e38:	ncalli	map<int,PPERequesterBase>.Count()
000896:0x001b0e40:	cmpi	i, #return
000896:0x001b0e50:	bge	0x1b0e80
000898:0x001b0e58:	icall	
000898:0x001b0e68:	icall	
000898:0x001b0e78:	jump	0x1b0e20
000900:0x001b0e80:	movem	#return, elements
000900:0x001b0e90:	release	elements
000900:0x001b0e98:	rts
000900:0x001b0ea0:	release	elements
000900:0x001b0ea8:	rts
map<int,PPERequesterBase>::ReplaceKey()
000905:0x001b0eb0:	icall	
000905:0x001b0ec0:	cmpi	#return, _i0
000905:0x001b0ed0:	beq	0x1b0f20
000907:0x001b0ed8:	icall	
000907:0x001b0ee8:	icall	
000908:0x001b0ef8:	icall	
000909:0x001b0f08:	imove	#return, 0x000001
000909:0x001b0f18:	rts
000911:0x001b0f20:	imove	#return, 0x000000
000911:0x001b0f30:	rts
000911:0x001b0f38:	rts
map<int,PPERequesterBase>::GetKeyByValue()
000917:0x001b0f90:	imove	i, 0x000000
000917:0x001b0fa0:	jump	0x1b0fc0
000917:0x001b0fa8:	move	@m00, i
000917:0x001b0fb8:	inc	i
000917:0x001b0fc0:	ncalli	map<int,PPERequesterBase>.Count()
000917:0x001b0fc8:	cmpi	i, #return
000917:0x001b0fd8:	bge	0x1b1048
000919:0x001b0fe0:	icall	
000919:0x001b0ff0:	movec	@c00, #return
000919:0x001b1000:	cmpmc	@c00, value
000919:0x001b1010:	bne	0x1b1040
000921:0x001b1018:	icall	
000921:0x001b1028:	move	ret, #return
000922:0x001b1038:	jump	0x1b1048
000922:0x001b1040:	jump	0x1b0fa8
000926:0x001b1048:	move	#return, ret
000926:0x001b1058:	rts
000926:0x001b1060:	rts
map<int,PPERequesterBase>::GetKeyByValueChecked()
000931:0x001b1090:	imove	i, 0x000000
000931:0x001b10a0:	jump	0x1b10c0
000931:0x001b10a8:	move	@m00, i
000931:0x001b10b8:	inc	i
000931:0x001b10c0:	ncalli	map<int,PPERequesterBase>.Count()
000931:0x001b10c8:	cmpi	i, #return
000931:0x001b10d8:	bge	0x1b1168
000933:0x001b10e0:	icall	
000933:0x001b10f0:	movec	@c00, #return
000933:0x001b1100:	cmpmc	@c00, value
000933:0x001b1110:	bne	0x1b1160
000935:0x001b1118:	icall	
000935:0x001b1128:	move	key, #return
000936:0x001b1138:	imove	#return, 0x000001
000936:0x001b1148:	move	key, key
000936:0x001b1158:	rts
000936:0x001b1160:	jump	0x1b10a8
000939:0x001b1168:	imove	#return, 0x000000
000939:0x001b1178:	move	key, key
000939:0x001b1188:	rts
000939:0x001b1190:	move	key, key
000939:0x001b11a0:	rts
map<int,@PPERequesterBase>::GetKeyArray()
000885:0x001b14f0:	new	keys, array<int>
000886:0x001b1510:	imove	i, 0x000000
000886:0x001b1520:	jump	0x1b1540
000886:0x001b1528:	move	@m00, i
000886:0x001b1538:	inc	i
000886:0x001b1540:	ncalli	map<int,@PPERequesterBase>.Count()
000886:0x001b1548:	cmpi	i, #return
000886:0x001b1558:	bge	0x1b1588
000888:0x001b1560:	icall	
000888:0x001b1570:	icall	
000888:0x001b1580:	jump	0x1b1528
000890:0x001b1588:	movem	#return, keys
000890:0x001b1598:	release	keys
000890:0x001b15a0:	rts
000890:0x001b15a8:	release	keys
000890:0x001b15b0:	rts
map<int,@PPERequesterBase>::GetValueArray()
000895:0x001b1608:	new	elements, array<PPERequesterBase>
000896:0x001b1628:	imove	i, 0x000000
000896:0x001b1638:	jump	0x1b1658
000896:0x001b1640:	move	@m00, i
000896:0x001b1650:	inc	i
000896:0x001b1658:	ncalli	map<int,@PPERequesterBase>.Count()
000896:0x001b1660:	cmpi	i, #return
000896:0x001b1670:	bge	0x1b16a0
000898:0x001b1678:	icall	
000898:0x001b1688:	icall	
000898:0x001b1698:	jump	0x1b1640
000900:0x001b16a0:	movem	#return, elements
000900:0x001b16b0:	release	elements
000900:0x001b16b8:	rts
000900:0x001b16c0:	release	elements
000900:0x001b16c8:	rts
map<int,@PPERequesterBase>::ReplaceKey()
000905:0x001b16d0:	icall	
000905:0x001b16e0:	cmpi	#return, _i0
000905:0x001b16f0:	beq	0x1b1740
000907:0x001b16f8:	icall	
000907:0x001b1708:	icall	
000908:0x001b1718:	icall	
000909:0x001b1728:	imove	#return, 0x000001
000909:0x001b1738:	rts
000911:0x001b1740:	imove	#return, 0x000000
000911:0x001b1750:	rts
000911:0x001b1758:	rts
map<int,@PPERequesterBase>::GetKeyByValue()
000917:0x001b17b0:	imove	i, 0x000000
000917:0x001b17c0:	jump	0x1b17e0
000917:0x001b17c8:	move	@m00, i
000917:0x001b17d8:	inc	i
000917:0x001b17e0:	ncalli	map<int,@PPERequesterBase>.Count()
000917:0x001b17e8:	cmpi	i, #return
000917:0x001b17f8:	bge	0x1b1868
000919:0x001b1800:	icall	
000919:0x001b1810:	movec	@c00, #return
000919:0x001b1820:	cmpmc	@c00, value
000919:0x001b1830:	bne	0x1b1860
000921:0x001b1838:	icall	
000921:0x001b1848:	move	ret, #return
000922:0x001b1858:	jump	0x1b1868
000922:0x001b1860:	jump	0x1b17c8
000926:0x001b1868:	move	#return, ret
000926:0x001b1878:	rts
000926:0x001b1880:	rts
map<int,@PPERequesterBase>::GetKeyByValueChecked()
000931:0x001b18b0:	imove	i, 0x000000
000931:0x001b18c0:	jump	0x1b18e0
000931:0x001b18c8:	move	@m00, i
000931:0x001b18d8:	inc	i
000931:0x001b18e0:	ncalli	map<int,@PPERequesterBase>.Count()
000931:0x001b18e8:	cmpi	i, #return
000931:0x001b18f8:	bge	0x1b1988
000933:0x001b1900:	icall	
000933:0x001b1910:	movec	@c00, #return
000933:0x001b1920:	cmpmc	@c00, value
000933:0x001b1930:	bne	0x1b1980
000935:0x001b1938:	icall	
000935:0x001b1948:	move	key, #return
000936:0x001b1958:	imove	#return, 0x000001
000936:0x001b1968:	move	key, key
000936:0x001b1978:	rts
000936:0x001b1980:	jump	0x1b18c8
000939:0x001b1988:	imove	#return, 0x000000
000939:0x001b1998:	move	key, key
000939:0x001b19a8:	rts
000939:0x001b19b0:	move	key, key
000939:0x001b19c0:	rts
array<Effect>::InsertAll()
000427:0x001b26f8:	imove	i, 0x000000
000427:0x001b2708:	jump	0x1b2728
000427:0x001b2710:	move	@m00, i
000427:0x001b2720:	inc	i
000427:0x001b2728:	ncalli	array<Effect>.Count()
000427:0x001b2730:	cmpi	i, #return
000427:0x001b2740:	bge	0x1b2770
000429:0x001b2748:	icall	
000429:0x001b2758:	icall	
000429:0x001b2768:	jump	0x1b2710
000429:0x001b2770:	rts
array<Effect>::RemoveItem()
000479:0x001b27a0:	movefm	@c00, value
000479:0x001b27b0:	icall	
000479:0x001b27c0:	move	remove_index, #return
000481:0x001b27d0:	cmpi	remove_index, _i0
000481:0x001b27e0:	blt	0x1b27f8
000483:0x001b27e8:	ncalli	array<Effect>.RemoveOrdered(remove_index)
000483:0x001b27f8:	rts
array<Effect>::RemoveItemUnOrdered()
000489:0x001b2828:	movefm	@c00, value
000489:0x001b2838:	icall	
000489:0x001b2848:	move	remove_index, #return
000491:0x001b2858:	cmpi	remove_index, _i0
000491:0x001b2868:	blt	0x1b2880
000493:0x001b2870:	ncalli	array<Effect>.Remove(remove_index)
000493:0x001b2880:	rts
array<Effect>::IsValidIndex()
000499:0x001b2888:	cmpi	index, _i-1
000499:0x001b2898:	ble	0x1b28d8
000499:0x001b28a0:	ncalli	array<Effect>.Count()
000499:0x001b28a8:	cmpi	index, #return
000499:0x001b28b8:	bge	0x1b28d8
000499:0x001b28c0:	imove	#return, 0x000001
000499:0x001b28d0:	jump	0x1b28e8
000499:0x001b28d8:	imove	#return, 0x000000
000499:0x001b28e8:	rts
000499:0x001b28f0:	rts
array<Effect>::Debug()
000525:0x001b2948:	ncalli	array<Effect>.Count()
000525:0x001b2950:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001b2980:	icall	Print(#return)
000526:0x001b2990:	imove	i, 0x000000
000526:0x001b29a0:	jump	0x1b29c0
000526:0x001b29a8:	move	@m00, i
000526:0x001b29b8:	inc	i
000526:0x001b29c0:	ncalli	array<Effect>.Count()
000526:0x001b29c8:	cmpi	i, #return
000526:0x001b29d8:	bge	0x1b2a50
000528:0x001b29e0:	icall	
000528:0x001b29f0:	movetm	item, #return
000529:0x001b2a00:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001b2a30:	icall	Print(#return)
000529:0x001b2a40:	release	item
000529:0x001b2a48:	jump	0x1b29a8
000529:0x001b2a50:	rts
array<Effect>::GetRandomIndex()
000544:0x001b2a58:	ncalli	array<Effect>.Count()
000544:0x001b2a60:	move	@m00, #return
000544:0x001b2a70:	cmpi	@m00, _i0
000544:0x001b2a80:	ble	0x1b2ab8
000546:0x001b2a88:	ncalli	array<Effect>.Count()
000546:0x001b2a90:	icall	RandomInt(_i0, #return)
000546:0x001b2aa0:	move	#return, #return
000546:0x001b2ab0:	rts
000549:0x001b2ab8:	imove	#return, 0xffffffff
000549:0x001b2ac8:	rts
000549:0x001b2ad0:	rts
array<Effect>::GetRandomElement()
000563:0x001b2ad8:	call	
000563:0x001b2ae8:	icall	
000563:0x001b2af8:	movetm	#return, #return
000563:0x001b2b08:	rts
000563:0x001b2b10:	rts
array<Effect>::SwapItems()
000568:0x001b2b40:	icall	
000568:0x001b2b50:	movetm	item1, #return
000569:0x001b2b60:	icall	
000569:0x001b2b70:	icall	
000570:0x001b2b80:	movefm	@c00, item1
000570:0x001b2b90:	icall	
000570:0x001b2ba0:	release	item1
000570:0x001b2ba8:	rts
array<Effect>::InsertArray()
000575:0x001b2c00:	imove	i, 0x000000
000575:0x001b2c10:	jump	0x1b2c30
000575:0x001b2c18:	move	@m00, i
000575:0x001b2c28:	inc	i
000575:0x001b2c30:	ncalli	array<Effect>.Count()
000575:0x001b2c38:	cmpi	i, #return
000575:0x001b2c48:	bge	0x1b2ca0
000577:0x001b2c50:	icall	
000577:0x001b2c60:	movetm	item, #return
000578:0x001b2c70:	movefm	@c00, item
000578:0x001b2c80:	icall	
000578:0x001b2c90:	release	item
000578:0x001b2c98:	jump	0x1b2c18
000578:0x001b2ca0:	rts
array<Effect>::Invert()
000584:0x001b2d20:	imove	left, 0x000000
000585:0x001b2d30:	ncalli	array<Effect>.Count()
000585:0x001b2d38:	subi	right, #return, _i1
000586:0x001b2d48:	cmpi	right, _i0
000586:0x001b2d58:	ble	0x1b2e18
000588:0x001b2d60:	cmpi	left, right
000588:0x001b2d70:	bge	0x1b2e18
000590:0x001b2d78:	icall	
000590:0x001b2d88:	movetm	temp, #return
000591:0x001b2d98:	move	@m00, left
000591:0x001b2da8:	inc	left
000591:0x001b2db0:	icall	
000591:0x001b2dc0:	icall	
000592:0x001b2dd0:	move	@m00, right
000592:0x001b2de0:	dec	right
000592:0x001b2de8:	movefm	@c00, temp
000592:0x001b2df8:	icall	
000592:0x001b2e08:	release	temp
000592:0x001b2e10:	jump	0x1b2d60
000592:0x001b2e18:	rts
array<Effect>::MoveIndex()
000612:0x001b2e70:	ncalli	array<Effect>.Count()
000612:0x001b2e78:	move	count, #return
000613:0x001b2e88:	move	new_index, curr_index
000615:0x001b2e98:	cmpi	move_number, _i0
000615:0x001b2ea8:	ble	0x1b2ed0
000617:0x001b2eb0:	addi	@m00, curr_index, move_number
000617:0x001b2ec0:	move	new_index, @m00
000620:0x001b2ed0:	cmpi	move_number, _i0
000620:0x001b2ee0:	bge	0x1b2f88
000622:0x001b2ee8:	subi	@m00, curr_index, move_number
000622:0x001b2ef8:	move	new_index, @m00
000624:0x001b2f08:	cmpi	new_index, _i0
000624:0x001b2f18:	bge	0x1b2f88
000626:0x001b2f20:	subi	@m01, _i0, count
000626:0x001b2f30:	cmpi	new_index, @m01
000626:0x001b2f40:	bgt	0x1b2f68
000628:0x001b2f48:	modi	@m00, new_index, count
000628:0x001b2f58:	move	new_index, @m00
000631:0x001b2f68:	addi	@m00, new_index, count
000631:0x001b2f78:	move	new_index, @m00
000635:0x001b2f88:	cmpi	new_index, count
000635:0x001b2f98:	blt	0x1b2fc0
000637:0x001b2fa0:	modi	@m00, new_index, count
000637:0x001b2fb0:	move	new_index, @m00
000641:0x001b2fc0:	move	#return, new_index
000641:0x001b2fd0:	rts
000641:0x001b2fd8:	rts
array<Effect>::ShuffleArray()
000646:0x001b3008:	imove	i, 0x000000
000646:0x001b3018:	jump	0x1b3038
000646:0x001b3020:	move	@m00, i
000646:0x001b3030:	inc	i
000646:0x001b3038:	ncalli	array<Effect>.Count()
000646:0x001b3040:	cmpi	i, #return
000646:0x001b3050:	bge	0x1b3088
000648:0x001b3058:	call	
000648:0x001b3068:	call	
000648:0x001b3080:	jump	0x1b3020
000648:0x001b3088:	rts
array<Effect>::DifferentAtPosition()
000666:0x001b30b8:	ncalli	array<Effect>.Count()
000666:0x001b30c0:	move	@m00, #return
000666:0x001b30d0:	push	#return
000666:0x001b30d8:	ncalli	array<Effect>.Count()
000666:0x001b30e0:	move	@m02, #return
000666:0x001b30f0:	pop	#return
000666:0x001b30f8:	cmpi	@m00, @m02
000666:0x001b3108:	beq	0x1b3138
000668:0x001b3110:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001b3120:	imove	#return, 0xffffffff
000669:0x001b3130:	rts
000672:0x001b3138:	imove	i, 0x000000
000672:0x001b3148:	jump	0x1b3158
000672:0x001b3150:	inc	i
000672:0x001b3158:	ncalli	array<Effect>.Count()
000672:0x001b3160:	cmpi	i, #return
000672:0x001b3170:	bge	0x1b3200
000674:0x001b3178:	icall	
000674:0x001b3188:	movec	@c00, #return
000674:0x001b3198:	pushc	#return
000674:0x001b31a0:	icall	
000674:0x001b31b0:	movec	@c02, #return
000674:0x001b31c0:	popc	#return
000674:0x001b31c8:	cmpc	@c00, @c02
000674:0x001b31d8:	beq	0x1b31f8
000676:0x001b31e0:	move	#return, i
000676:0x001b31f0:	rts
000676:0x001b31f8:	jump	0x1b3150
000680:0x001b3200:	imove	#return, 0xffffffff
000680:0x001b3210:	rts
000680:0x001b3218:	rts
map<int,Effect>::GetKeyArray()
000885:0x001b3518:	new	keys, array<int>
000886:0x001b3538:	imove	i, 0x000000
000886:0x001b3548:	jump	0x1b3568
000886:0x001b3550:	move	@m00, i
000886:0x001b3560:	inc	i
000886:0x001b3568:	ncalli	map<int,Effect>.Count()
000886:0x001b3570:	cmpi	i, #return
000886:0x001b3580:	bge	0x1b35b0
000888:0x001b3588:	icall	
000888:0x001b3598:	icall	
000888:0x001b35a8:	jump	0x1b3550
000890:0x001b35b0:	movem	#return, keys
000890:0x001b35c0:	release	keys
000890:0x001b35c8:	rts
000890:0x001b35d0:	release	keys
000890:0x001b35d8:	rts
map<int,Effect>::GetValueArray()
000895:0x001b3630:	new	elements, array<Effect>
000896:0x001b3650:	imove	i, 0x000000
000896:0x001b3660:	jump	0x1b3680
000896:0x001b3668:	move	@m00, i
000896:0x001b3678:	inc	i
000896:0x001b3680:	ncalli	map<int,Effect>.Count()
000896:0x001b3688:	cmpi	i, #return
000896:0x001b3698:	bge	0x1b36c8
000898:0x001b36a0:	icall	
000898:0x001b36b0:	icall	
000898:0x001b36c0:	jump	0x1b3668
000900:0x001b36c8:	movem	#return, elements
000900:0x001b36d8:	release	elements
000900:0x001b36e0:	rts
000900:0x001b36e8:	release	elements
000900:0x001b36f0:	rts
map<int,Effect>::ReplaceKey()
000905:0x001b36f8:	icall	
000905:0x001b3708:	cmpi	#return, _i0
000905:0x001b3718:	beq	0x1b3768
000907:0x001b3720:	icall	
000907:0x001b3730:	icall	
000908:0x001b3740:	icall	
000909:0x001b3750:	imove	#return, 0x000001
000909:0x001b3760:	rts
000911:0x001b3768:	imove	#return, 0x000000
000911:0x001b3778:	rts
000911:0x001b3780:	rts
map<int,Effect>::GetKeyByValue()
000917:0x001b37d8:	imove	i, 0x000000
000917:0x001b37e8:	jump	0x1b3808
000917:0x001b37f0:	move	@m00, i
000917:0x001b3800:	inc	i
000917:0x001b3808:	ncalli	map<int,Effect>.Count()
000917:0x001b3810:	cmpi	i, #return
000917:0x001b3820:	bge	0x1b3890
000919:0x001b3828:	icall	
000919:0x001b3838:	movec	@c00, #return
000919:0x001b3848:	cmpmc	@c00, value
000919:0x001b3858:	bne	0x1b3888
000921:0x001b3860:	icall	
000921:0x001b3870:	move	ret, #return
000922:0x001b3880:	jump	0x1b3890
000922:0x001b3888:	jump	0x1b37f0
000926:0x001b3890:	move	#return, ret
000926:0x001b38a0:	rts
000926:0x001b38a8:	rts
map<int,Effect>::GetKeyByValueChecked()
000931:0x001b38d8:	imove	i, 0x000000
000931:0x001b38e8:	jump	0x1b3908
000931:0x001b38f0:	move	@m00, i
000931:0x001b3900:	inc	i
000931:0x001b3908:	ncalli	map<int,Effect>.Count()
000931:0x001b3910:	cmpi	i, #return
000931:0x001b3920:	bge	0x1b39b0
000933:0x001b3928:	icall	
000933:0x001b3938:	movec	@c00, #return
000933:0x001b3948:	cmpmc	@c00, value
000933:0x001b3958:	bne	0x1b39a8
000935:0x001b3960:	icall	
000935:0x001b3970:	move	key, #return
000936:0x001b3980:	imove	#return, 0x000001
000936:0x001b3990:	move	key, key
000936:0x001b39a0:	rts
000936:0x001b39a8:	jump	0x1b38f0
000939:0x001b39b0:	imove	#return, 0x000000
000939:0x001b39c0:	move	key, key
000939:0x001b39d0:	rts
000939:0x001b39d8:	move	key, key
000939:0x001b39e8:	rts
map<int,@Effect>::GetKeyArray()
000885:0x001b3d38:	new	keys, array<int>
000886:0x001b3d58:	imove	i, 0x000000
000886:0x001b3d68:	jump	0x1b3d88
000886:0x001b3d70:	move	@m00, i
000886:0x001b3d80:	inc	i
000886:0x001b3d88:	ncalli	map<int,@Effect>.Count()
000886:0x001b3d90:	cmpi	i, #return
000886:0x001b3da0:	bge	0x1b3dd0
000888:0x001b3da8:	icall	
000888:0x001b3db8:	icall	
000888:0x001b3dc8:	jump	0x1b3d70
000890:0x001b3dd0:	movem	#return, keys
000890:0x001b3de0:	release	keys
000890:0x001b3de8:	rts
000890:0x001b3df0:	release	keys
000890:0x001b3df8:	rts
map<int,@Effect>::GetValueArray()
000895:0x001b3e50:	new	elements, array<Effect>
000896:0x001b3e70:	imove	i, 0x000000
000896:0x001b3e80:	jump	0x1b3ea0
000896:0x001b3e88:	move	@m00, i
000896:0x001b3e98:	inc	i
000896:0x001b3ea0:	ncalli	map<int,@Effect>.Count()
000896:0x001b3ea8:	cmpi	i, #return
000896:0x001b3eb8:	bge	0x1b3ee8
000898:0x001b3ec0:	icall	
000898:0x001b3ed0:	icall	
000898:0x001b3ee0:	jump	0x1b3e88
000900:0x001b3ee8:	movem	#return, elements
000900:0x001b3ef8:	release	elements
000900:0x001b3f00:	rts
000900:0x001b3f08:	release	elements
000900:0x001b3f10:	rts
map<int,@Effect>::ReplaceKey()
000905:0x001b3f18:	icall	
000905:0x001b3f28:	cmpi	#return, _i0
000905:0x001b3f38:	beq	0x1b3f88
000907:0x001b3f40:	icall	
000907:0x001b3f50:	icall	
000908:0x001b3f60:	icall	
000909:0x001b3f70:	imove	#return, 0x000001
000909:0x001b3f80:	rts
000911:0x001b3f88:	imove	#return, 0x000000
000911:0x001b3f98:	rts
000911:0x001b3fa0:	rts
map<int,@Effect>::GetKeyByValue()
000917:0x001b3ff8:	imove	i, 0x000000
000917:0x001b4008:	jump	0x1b4028
000917:0x001b4010:	move	@m00, i
000917:0x001b4020:	inc	i
000917:0x001b4028:	ncalli	map<int,@Effect>.Count()
000917:0x001b4030:	cmpi	i, #return
000917:0x001b4040:	bge	0x1b40b0
000919:0x001b4048:	icall	
000919:0x001b4058:	movec	@c00, #return
000919:0x001b4068:	cmpmc	@c00, value
000919:0x001b4078:	bne	0x1b40a8
000921:0x001b4080:	icall	
000921:0x001b4090:	move	ret, #return
000922:0x001b40a0:	jump	0x1b40b0
000922:0x001b40a8:	jump	0x1b4010
000926:0x001b40b0:	move	#return, ret
000926:0x001b40c0:	rts
000926:0x001b40c8:	rts
map<int,@Effect>::GetKeyByValueChecked()
000931:0x001b40f8:	imove	i, 0x000000
000931:0x001b4108:	jump	0x1b4128
000931:0x001b4110:	move	@m00, i
000931:0x001b4120:	inc	i
000931:0x001b4128:	ncalli	map<int,@Effect>.Count()
000931:0x001b4130:	cmpi	i, #return
000931:0x001b4140:	bge	0x1b41d0
000933:0x001b4148:	icall	
000933:0x001b4158:	movec	@c00, #return
000933:0x001b4168:	cmpmc	@c00, value
000933:0x001b4178:	bne	0x1b41c8
000935:0x001b4180:	icall	
000935:0x001b4190:	move	key, #return
000936:0x001b41a0:	imove	#return, 0x000001
000936:0x001b41b0:	move	key, key
000936:0x001b41c0:	rts
000936:0x001b41c8:	jump	0x1b4110
000939:0x001b41d0:	imove	#return, 0x000000
000939:0x001b41e0:	move	key, key
000939:0x001b41f0:	rts
000939:0x001b41f8:	move	key, key
000939:0x001b4208:	rts
array<SoundParams>::InsertAll()
000427:0x001b4f50:	imove	i, 0x000000
000427:0x001b4f60:	jump	0x1b4f80
000427:0x001b4f68:	move	@m00, i
000427:0x001b4f78:	inc	i
000427:0x001b4f80:	ncalli	array<SoundParams>.Count()
000427:0x001b4f88:	cmpi	i, #return
000427:0x001b4f98:	bge	0x1b4fc8
000429:0x001b4fa0:	icall	
000429:0x001b4fb0:	icall	
000429:0x001b4fc0:	jump	0x1b4f68
000429:0x001b4fc8:	rts
array<SoundParams>::RemoveItem()
000479:0x001b4ff8:	movefm	@c00, value
000479:0x001b5008:	icall	
000479:0x001b5018:	move	remove_index, #return
000481:0x001b5028:	cmpi	remove_index, _i0
000481:0x001b5038:	blt	0x1b5050
000483:0x001b5040:	ncalli	array<SoundParams>.RemoveOrdered(remove_index)
000483:0x001b5050:	rts
array<SoundParams>::RemoveItemUnOrdered()
000489:0x001b5080:	movefm	@c00, value
000489:0x001b5090:	icall	
000489:0x001b50a0:	move	remove_index, #return
000491:0x001b50b0:	cmpi	remove_index, _i0
000491:0x001b50c0:	blt	0x1b50d8
000493:0x001b50c8:	ncalli	array<SoundParams>.Remove(remove_index)
000493:0x001b50d8:	rts
array<SoundParams>::IsValidIndex()
000499:0x001b50e0:	cmpi	index, _i-1
000499:0x001b50f0:	ble	0x1b5130
000499:0x001b50f8:	ncalli	array<SoundParams>.Count()
000499:0x001b5100:	cmpi	index, #return
000499:0x001b5110:	bge	0x1b5130
000499:0x001b5118:	imove	#return, 0x000001
000499:0x001b5128:	jump	0x1b5140
000499:0x001b5130:	imove	#return, 0x000000
000499:0x001b5140:	rts
000499:0x001b5148:	rts
array<SoundParams>::Debug()
000525:0x001b51a0:	ncalli	array<SoundParams>.Count()
000525:0x001b51a8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001b51d8:	icall	Print(#return)
000526:0x001b51e8:	imove	i, 0x000000
000526:0x001b51f8:	jump	0x1b5218
000526:0x001b5200:	move	@m00, i
000526:0x001b5210:	inc	i
000526:0x001b5218:	ncalli	array<SoundParams>.Count()
000526:0x001b5220:	cmpi	i, #return
000526:0x001b5230:	bge	0x1b52a8
000528:0x001b5238:	icall	
000528:0x001b5248:	movetm	item, #return
000529:0x001b5258:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001b5288:	icall	Print(#return)
000529:0x001b5298:	release	item
000529:0x001b52a0:	jump	0x1b5200
000529:0x001b52a8:	rts
array<SoundParams>::GetRandomIndex()
000544:0x001b52b0:	ncalli	array<SoundParams>.Count()
000544:0x001b52b8:	move	@m00, #return
000544:0x001b52c8:	cmpi	@m00, _i0
000544:0x001b52d8:	ble	0x1b5310
000546:0x001b52e0:	ncalli	array<SoundParams>.Count()
000546:0x001b52e8:	icall	RandomInt(_i0, #return)
000546:0x001b52f8:	move	#return, #return
000546:0x001b5308:	rts
000549:0x001b5310:	imove	#return, 0xffffffff
000549:0x001b5320:	rts
000549:0x001b5328:	rts
array<SoundParams>::GetRandomElement()
000563:0x001b5330:	call	
000563:0x001b5340:	icall	
000563:0x001b5350:	movetm	#return, #return
000563:0x001b5360:	rts
000563:0x001b5368:	rts
array<SoundParams>::SwapItems()
000568:0x001b5398:	icall	
000568:0x001b53a8:	movetm	item1, #return
000569:0x001b53b8:	icall	
000569:0x001b53c8:	icall	
000570:0x001b53d8:	movefm	@c00, item1
000570:0x001b53e8:	icall	
000570:0x001b53f8:	release	item1
000570:0x001b5400:	rts
array<SoundParams>::InsertArray()
000575:0x001b5458:	imove	i, 0x000000
000575:0x001b5468:	jump	0x1b5488
000575:0x001b5470:	move	@m00, i
000575:0x001b5480:	inc	i
000575:0x001b5488:	ncalli	array<SoundParams>.Count()
000575:0x001b5490:	cmpi	i, #return
000575:0x001b54a0:	bge	0x1b54f8
000577:0x001b54a8:	icall	
000577:0x001b54b8:	movetm	item, #return
000578:0x001b54c8:	movefm	@c00, item
000578:0x001b54d8:	icall	
000578:0x001b54e8:	release	item
000578:0x001b54f0:	jump	0x1b5470
000578:0x001b54f8:	rts
array<SoundParams>::Invert()
000584:0x001b5578:	imove	left, 0x000000
000585:0x001b5588:	ncalli	array<SoundParams>.Count()
000585:0x001b5590:	subi	right, #return, _i1
000586:0x001b55a0:	cmpi	right, _i0
000586:0x001b55b0:	ble	0x1b5670
000588:0x001b55b8:	cmpi	left, right
000588:0x001b55c8:	bge	0x1b5670
000590:0x001b55d0:	icall	
000590:0x001b55e0:	movetm	temp, #return
000591:0x001b55f0:	move	@m00, left
000591:0x001b5600:	inc	left
000591:0x001b5608:	icall	
000591:0x001b5618:	icall	
000592:0x001b5628:	move	@m00, right
000592:0x001b5638:	dec	right
000592:0x001b5640:	movefm	@c00, temp
000592:0x001b5650:	icall	
000592:0x001b5660:	release	temp
000592:0x001b5668:	jump	0x1b55b8
000592:0x001b5670:	rts
array<SoundParams>::MoveIndex()
000612:0x001b56c8:	ncalli	array<SoundParams>.Count()
000612:0x001b56d0:	move	count, #return
000613:0x001b56e0:	move	new_index, curr_index
000615:0x001b56f0:	cmpi	move_number, _i0
000615:0x001b5700:	ble	0x1b5728
000617:0x001b5708:	addi	@m00, curr_index, move_number
000617:0x001b5718:	move	new_index, @m00
000620:0x001b5728:	cmpi	move_number, _i0
000620:0x001b5738:	bge	0x1b57e0
000622:0x001b5740:	subi	@m00, curr_index, move_number
000622:0x001b5750:	move	new_index, @m00
000624:0x001b5760:	cmpi	new_index, _i0
000624:0x001b5770:	bge	0x1b57e0
000626:0x001b5778:	subi	@m01, _i0, count
000626:0x001b5788:	cmpi	new_index, @m01
000626:0x001b5798:	bgt	0x1b57c0
000628:0x001b57a0:	modi	@m00, new_index, count
000628:0x001b57b0:	move	new_index, @m00
000631:0x001b57c0:	addi	@m00, new_index, count
000631:0x001b57d0:	move	new_index, @m00
000635:0x001b57e0:	cmpi	new_index, count
000635:0x001b57f0:	blt	0x1b5818
000637:0x001b57f8:	modi	@m00, new_index, count
000637:0x001b5808:	move	new_index, @m00
000641:0x001b5818:	move	#return, new_index
000641:0x001b5828:	rts
000641:0x001b5830:	rts
array<SoundParams>::ShuffleArray()
000646:0x001b5860:	imove	i, 0x000000
000646:0x001b5870:	jump	0x1b5890
000646:0x001b5878:	move	@m00, i
000646:0x001b5888:	inc	i
000646:0x001b5890:	ncalli	array<SoundParams>.Count()
000646:0x001b5898:	cmpi	i, #return
000646:0x001b58a8:	bge	0x1b58e0
000648:0x001b58b0:	call	
000648:0x001b58c0:	call	
000648:0x001b58d8:	jump	0x1b5878
000648:0x001b58e0:	rts
array<SoundParams>::DifferentAtPosition()
000666:0x001b5910:	ncalli	array<SoundParams>.Count()
000666:0x001b5918:	move	@m00, #return
000666:0x001b5928:	push	#return
000666:0x001b5930:	ncalli	array<SoundParams>.Count()
000666:0x001b5938:	move	@m02, #return
000666:0x001b5948:	pop	#return
000666:0x001b5950:	cmpi	@m00, @m02
000666:0x001b5960:	beq	0x1b5990
000668:0x001b5968:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001b5978:	imove	#return, 0xffffffff
000669:0x001b5988:	rts
000672:0x001b5990:	imove	i, 0x000000
000672:0x001b59a0:	jump	0x1b59b0
000672:0x001b59a8:	inc	i
000672:0x001b59b0:	ncalli	array<SoundParams>.Count()
000672:0x001b59b8:	cmpi	i, #return
000672:0x001b59c8:	bge	0x1b5a58
000674:0x001b59d0:	icall	
000674:0x001b59e0:	movec	@c00, #return
000674:0x001b59f0:	pushc	#return
000674:0x001b59f8:	icall	
000674:0x001b5a08:	movec	@c02, #return
000674:0x001b5a18:	popc	#return
000674:0x001b5a20:	cmpc	@c00, @c02
000674:0x001b5a30:	beq	0x1b5a50
000676:0x001b5a38:	move	#return, i
000676:0x001b5a48:	rts
000676:0x001b5a50:	jump	0x1b59a8
000680:0x001b5a58:	imove	#return, 0xffffffff
000680:0x001b5a68:	rts
000680:0x001b5a70:	rts
map<string,SoundParams>::GetKeyArray()
000885:0x001b5d70:	new	keys, array<string>
000886:0x001b5d90:	imove	i, 0x000000
000886:0x001b5da0:	jump	0x1b5dc0
000886:0x001b5da8:	move	@m00, i
000886:0x001b5db8:	inc	i
000886:0x001b5dc0:	ncalli	map<string,SoundParams>.Count()
000886:0x001b5dc8:	cmpi	i, #return
000886:0x001b5dd8:	bge	0x1b5e08
000888:0x001b5de0:	icall	
000888:0x001b5df0:	icall	
000888:0x001b5e00:	jump	0x1b5da8
000890:0x001b5e08:	movem	#return, keys
000890:0x001b5e18:	release	keys
000890:0x001b5e20:	rts
000890:0x001b5e28:	release	keys
000890:0x001b5e30:	rts
map<string,SoundParams>::GetValueArray()
000895:0x001b5e88:	new	elements, array<SoundParams>
000896:0x001b5ea8:	imove	i, 0x000000
000896:0x001b5eb8:	jump	0x1b5ed8
000896:0x001b5ec0:	move	@m00, i
000896:0x001b5ed0:	inc	i
000896:0x001b5ed8:	ncalli	map<string,SoundParams>.Count()
000896:0x001b5ee0:	cmpi	i, #return
000896:0x001b5ef0:	bge	0x1b5f20
000898:0x001b5ef8:	icall	
000898:0x001b5f08:	icall	
000898:0x001b5f18:	jump	0x1b5ec0
000900:0x001b5f20:	movem	#return, elements
000900:0x001b5f30:	release	elements
000900:0x001b5f38:	rts
000900:0x001b5f40:	release	elements
000900:0x001b5f48:	rts
map<string,SoundParams>::ReplaceKey()
000905:0x001b5f50:	icall	
000905:0x001b5f60:	cmpi	#return, _i0
000905:0x001b5f70:	beq	0x1b5fc0
000907:0x001b5f78:	icall	
000907:0x001b5f88:	icall	
000908:0x001b5f98:	icall	
000909:0x001b5fa8:	imove	#return, 0x000001
000909:0x001b5fb8:	rts
000911:0x001b5fc0:	imove	#return, 0x000000
000911:0x001b5fd0:	rts
000911:0x001b5fd8:	rts
map<string,SoundParams>::GetKeyByValue()
000917:0x001b6030:	imove	i, 0x000000
000917:0x001b6040:	jump	0x1b6060
000917:0x001b6048:	move	@m00, i
000917:0x001b6058:	inc	i
000917:0x001b6060:	ncalli	map<string,SoundParams>.Count()
000917:0x001b6068:	cmpi	i, #return
000917:0x001b6078:	bge	0x1b60e8
000919:0x001b6080:	icall	
000919:0x001b6090:	movec	@c00, #return
000919:0x001b60a0:	cmpmc	@c00, value
000919:0x001b60b0:	bne	0x1b60e0
000921:0x001b60b8:	icall	
000921:0x001b60c8:	moves	ret, #return
000922:0x001b60d8:	jump	0x1b60e8
000922:0x001b60e0:	jump	0x1b6048
000926:0x001b60e8:	moves	#return, ret
000926:0x001b60f8:	rts
000926:0x001b6100:	rts
map<string,SoundParams>::GetKeyByValueChecked()
000931:0x001b6130:	imove	i, 0x000000
000931:0x001b6140:	jump	0x1b6160
000931:0x001b6148:	move	@m00, i
000931:0x001b6158:	inc	i
000931:0x001b6160:	ncalli	map<string,SoundParams>.Count()
000931:0x001b6168:	cmpi	i, #return
000931:0x001b6178:	bge	0x1b6208
000933:0x001b6180:	icall	
000933:0x001b6190:	movec	@c00, #return
000933:0x001b61a0:	cmpmc	@c00, value
000933:0x001b61b0:	bne	0x1b6200
000935:0x001b61b8:	icall	
000935:0x001b61c8:	moves	key, #return
000936:0x001b61d8:	imove	#return, 0x000001
000936:0x001b61e8:	moves	key, key
000936:0x001b61f8:	rts
000936:0x001b6200:	jump	0x1b6148
000939:0x001b6208:	imove	#return, 0x000000
000939:0x001b6218:	moves	key, key
000939:0x001b6228:	rts
000939:0x001b6230:	moves	key, key
000939:0x001b6240:	rts
map<string,@SoundParams>::GetKeyArray()
000885:0x001b6590:	new	keys, array<string>
000886:0x001b65b0:	imove	i, 0x000000
000886:0x001b65c0:	jump	0x1b65e0
000886:0x001b65c8:	move	@m00, i
000886:0x001b65d8:	inc	i
000886:0x001b65e0:	ncalli	map<string,@SoundParams>.Count()
000886:0x001b65e8:	cmpi	i, #return
000886:0x001b65f8:	bge	0x1b6628
000888:0x001b6600:	icall	
000888:0x001b6610:	icall	
000888:0x001b6620:	jump	0x1b65c8
000890:0x001b6628:	movem	#return, keys
000890:0x001b6638:	release	keys
000890:0x001b6640:	rts
000890:0x001b6648:	release	keys
000890:0x001b6650:	rts
map<string,@SoundParams>::GetValueArray()
000895:0x001b66a8:	new	elements, array<SoundParams>
000896:0x001b66c8:	imove	i, 0x000000
000896:0x001b66d8:	jump	0x1b66f8
000896:0x001b66e0:	move	@m00, i
000896:0x001b66f0:	inc	i
000896:0x001b66f8:	ncalli	map<string,@SoundParams>.Count()
000896:0x001b6700:	cmpi	i, #return
000896:0x001b6710:	bge	0x1b6740
000898:0x001b6718:	icall	
000898:0x001b6728:	icall	
000898:0x001b6738:	jump	0x1b66e0
000900:0x001b6740:	movem	#return, elements
000900:0x001b6750:	release	elements
000900:0x001b6758:	rts
000900:0x001b6760:	release	elements
000900:0x001b6768:	rts
map<string,@SoundParams>::ReplaceKey()
000905:0x001b6770:	icall	
000905:0x001b6780:	cmpi	#return, _i0
000905:0x001b6790:	beq	0x1b67e0
000907:0x001b6798:	icall	
000907:0x001b67a8:	icall	
000908:0x001b67b8:	icall	
000909:0x001b67c8:	imove	#return, 0x000001
000909:0x001b67d8:	rts
000911:0x001b67e0:	imove	#return, 0x000000
000911:0x001b67f0:	rts
000911:0x001b67f8:	rts
map<string,@SoundParams>::GetKeyByValue()
000917:0x001b6850:	imove	i, 0x000000
000917:0x001b6860:	jump	0x1b6880
000917:0x001b6868:	move	@m00, i
000917:0x001b6878:	inc	i
000917:0x001b6880:	ncalli	map<string,@SoundParams>.Count()
000917:0x001b6888:	cmpi	i, #return
000917:0x001b6898:	bge	0x1b6908
000919:0x001b68a0:	icall	
000919:0x001b68b0:	movec	@c00, #return
000919:0x001b68c0:	cmpmc	@c00, value
000919:0x001b68d0:	bne	0x1b6900
000921:0x001b68d8:	icall	
000921:0x001b68e8:	moves	ret, #return
000922:0x001b68f8:	jump	0x1b6908
000922:0x001b6900:	jump	0x1b6868
000926:0x001b6908:	moves	#return, ret
000926:0x001b6918:	rts
000926:0x001b6920:	rts
map<string,@SoundParams>::GetKeyByValueChecked()
000931:0x001b6950:	imove	i, 0x000000
000931:0x001b6960:	jump	0x1b6980
000931:0x001b6968:	move	@m00, i
000931:0x001b6978:	inc	i
000931:0x001b6980:	ncalli	map<string,@SoundParams>.Count()
000931:0x001b6988:	cmpi	i, #return
000931:0x001b6998:	bge	0x1b6a28
000933:0x001b69a0:	icall	
000933:0x001b69b0:	movec	@c00, #return
000933:0x001b69c0:	cmpmc	@c00, value
000933:0x001b69d0:	bne	0x1b6a20
000935:0x001b69d8:	icall	
000935:0x001b69e8:	moves	key, #return
000936:0x001b69f8:	imove	#return, 0x000001
000936:0x001b6a08:	moves	key, key
000936:0x001b6a18:	rts
000936:0x001b6a20:	jump	0x1b6968
000939:0x001b6a28:	imove	#return, 0x000000
000939:0x001b6a38:	moves	key, key
000939:0x001b6a48:	rts
000939:0x001b6a50:	moves	key, key
000939:0x001b6a60:	rts
array<Shape>::InsertAll()
000427:0x001b7058:	imove	i, 0x000000
000427:0x001b7068:	jump	0x1b7088
000427:0x001b7070:	move	@m00, i
000427:0x001b7080:	inc	i
000427:0x001b7088:	ncalli	array<Shape>.Count()
000427:0x001b7090:	cmpi	i, #return
000427:0x001b70a0:	bge	0x1b70d0
000429:0x001b70a8:	icall	
000429:0x001b70b8:	icall	
000429:0x001b70c8:	jump	0x1b7070
000429:0x001b70d0:	rts
array<Shape>::RemoveItem()
000479:0x001b7100:	icall	
000479:0x001b7110:	move	remove_index, #return
000481:0x001b7120:	cmpi	remove_index, _i0
000481:0x001b7130:	blt	0x1b7148
000483:0x001b7138:	ncalli	array<Shape>.RemoveOrdered(remove_index)
000483:0x001b7148:	rts
array<Shape>::RemoveItemUnOrdered()
000489:0x001b7178:	icall	
000489:0x001b7188:	move	remove_index, #return
000491:0x001b7198:	cmpi	remove_index, _i0
000491:0x001b71a8:	blt	0x1b71c0
000493:0x001b71b0:	ncalli	array<Shape>.Remove(remove_index)
000493:0x001b71c0:	rts
array<Shape>::IsValidIndex()
000499:0x001b71c8:	cmpi	index, _i-1
000499:0x001b71d8:	ble	0x1b7218
000499:0x001b71e0:	ncalli	array<Shape>.Count()
000499:0x001b71e8:	cmpi	index, #return
000499:0x001b71f8:	bge	0x1b7218
000499:0x001b7200:	imove	#return, 0x000001
000499:0x001b7210:	jump	0x1b7228
000499:0x001b7218:	imove	#return, 0x000000
000499:0x001b7228:	rts
000499:0x001b7230:	rts
array<Shape>::Debug()
000525:0x001b7288:	ncalli	array<Shape>.Count()
000525:0x001b7290:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001b72c0:	icall	Print(#return)
000526:0x001b72d0:	imove	i, 0x000000
000526:0x001b72e0:	jump	0x1b7300
000526:0x001b72e8:	move	@m00, i
000526:0x001b72f8:	inc	i
000526:0x001b7300:	ncalli	array<Shape>.Count()
000526:0x001b7308:	cmpi	i, #return
000526:0x001b7318:	bge	0x1b7388
000528:0x001b7320:	icall	
000528:0x001b7330:	movec	item, #return
000529:0x001b7340:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001b7370:	icall	Print(#return)
000529:0x001b7380:	jump	0x1b72e8
000529:0x001b7388:	rts
array<Shape>::GetRandomIndex()
000544:0x001b7390:	ncalli	array<Shape>.Count()
000544:0x001b7398:	move	@m00, #return
000544:0x001b73a8:	cmpi	@m00, _i0
000544:0x001b73b8:	ble	0x1b73f0
000546:0x001b73c0:	ncalli	array<Shape>.Count()
000546:0x001b73c8:	icall	RandomInt(_i0, #return)
000546:0x001b73d8:	move	#return, #return
000546:0x001b73e8:	rts
000549:0x001b73f0:	imove	#return, 0xffffffff
000549:0x001b7400:	rts
000549:0x001b7408:	rts
array<Shape>::GetRandomElement()
000563:0x001b7410:	call	
000563:0x001b7420:	icall	
000563:0x001b7430:	movec	#return, #return
000563:0x001b7440:	rts
000563:0x001b7448:	rts
array<Shape>::SwapItems()
000568:0x001b7478:	icall	
000568:0x001b7488:	movec	item1, #return
000569:0x001b7498:	icall	
000569:0x001b74a8:	icall	
000570:0x001b74b8:	icall	
000570:0x001b74c8:	rts
array<Shape>::InsertArray()
000575:0x001b7520:	imove	i, 0x000000
000575:0x001b7530:	jump	0x1b7550
000575:0x001b7538:	move	@m00, i
000575:0x001b7548:	inc	i
000575:0x001b7550:	ncalli	array<Shape>.Count()
000575:0x001b7558:	cmpi	i, #return
000575:0x001b7568:	bge	0x1b75a8
000577:0x001b7570:	icall	
000577:0x001b7580:	movec	item, #return
000578:0x001b7590:	icall	
000578:0x001b75a0:	jump	0x1b7538
000578:0x001b75a8:	rts
array<Shape>::Invert()
000584:0x001b7628:	imove	left, 0x000000
000585:0x001b7638:	ncalli	array<Shape>.Count()
000585:0x001b7640:	subi	right, #return, _i1
000586:0x001b7650:	cmpi	right, _i0
000586:0x001b7660:	ble	0x1b7708
000588:0x001b7668:	cmpi	left, right
000588:0x001b7678:	bge	0x1b7708
000590:0x001b7680:	icall	
000590:0x001b7690:	movec	temp, #return
000591:0x001b76a0:	move	@m00, left
000591:0x001b76b0:	inc	left
000591:0x001b76b8:	icall	
000591:0x001b76c8:	icall	
000592:0x001b76d8:	move	@m00, right
000592:0x001b76e8:	dec	right
000592:0x001b76f0:	icall	
000592:0x001b7700:	jump	0x1b7668
000592:0x001b7708:	rts
array<Shape>::MoveIndex()
000612:0x001b7760:	ncalli	array<Shape>.Count()
000612:0x001b7768:	move	count, #return
000613:0x001b7778:	move	new_index, curr_index
000615:0x001b7788:	cmpi	move_number, _i0
000615:0x001b7798:	ble	0x1b77c0
000617:0x001b77a0:	addi	@m00, curr_index, move_number
000617:0x001b77b0:	move	new_index, @m00
000620:0x001b77c0:	cmpi	move_number, _i0
000620:0x001b77d0:	bge	0x1b7878
000622:0x001b77d8:	subi	@m00, curr_index, move_number
000622:0x001b77e8:	move	new_index, @m00
000624:0x001b77f8:	cmpi	new_index, _i0
000624:0x001b7808:	bge	0x1b7878
000626:0x001b7810:	subi	@m01, _i0, count
000626:0x001b7820:	cmpi	new_index, @m01
000626:0x001b7830:	bgt	0x1b7858
000628:0x001b7838:	modi	@m00, new_index, count
000628:0x001b7848:	move	new_index, @m00
000631:0x001b7858:	addi	@m00, new_index, count
000631:0x001b7868:	move	new_index, @m00
000635:0x001b7878:	cmpi	new_index, count
000635:0x001b7888:	blt	0x1b78b0
000637:0x001b7890:	modi	@m00, new_index, count
000637:0x001b78a0:	move	new_index, @m00
000641:0x001b78b0:	move	#return, new_index
000641:0x001b78c0:	rts
000641:0x001b78c8:	rts
array<Shape>::ShuffleArray()
000646:0x001b78f8:	imove	i, 0x000000
000646:0x001b7908:	jump	0x1b7928
000646:0x001b7910:	move	@m00, i
000646:0x001b7920:	inc	i
000646:0x001b7928:	ncalli	array<Shape>.Count()
000646:0x001b7930:	cmpi	i, #return
000646:0x001b7940:	bge	0x1b7978
000648:0x001b7948:	call	
000648:0x001b7958:	call	
000648:0x001b7970:	jump	0x1b7910
000648:0x001b7978:	rts
array<Shape>::DifferentAtPosition()
000666:0x001b79a8:	ncalli	array<Shape>.Count()
000666:0x001b79b0:	move	@m00, #return
000666:0x001b79c0:	push	#return
000666:0x001b79c8:	ncalli	array<Shape>.Count()
000666:0x001b79d0:	move	@m02, #return
000666:0x001b79e0:	pop	#return
000666:0x001b79e8:	cmpi	@m00, @m02
000666:0x001b79f8:	beq	0x1b7a28
000668:0x001b7a00:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001b7a10:	imove	#return, 0xffffffff
000669:0x001b7a20:	rts
000672:0x001b7a28:	imove	i, 0x000000
000672:0x001b7a38:	jump	0x1b7a48
000672:0x001b7a40:	inc	i
000672:0x001b7a48:	ncalli	array<Shape>.Count()
000672:0x001b7a50:	cmpi	i, #return
000672:0x001b7a60:	bge	0x1b7af0
000674:0x001b7a68:	icall	
000674:0x001b7a78:	movec	@c00, #return
000674:0x001b7a88:	pushc	#return
000674:0x001b7a90:	icall	
000674:0x001b7aa0:	movec	@c02, #return
000674:0x001b7ab0:	popc	#return
000674:0x001b7ab8:	cmpc	@c00, @c02
000674:0x001b7ac8:	beq	0x1b7ae8
000676:0x001b7ad0:	move	#return, i
000676:0x001b7ae0:	rts
000676:0x001b7ae8:	jump	0x1b7a40
000680:0x001b7af0:	imove	#return, 0xffffffff
000680:0x001b7b00:	rts
000680:0x001b7b08:	rts
array<ModInfo>::InsertAll()
000427:0x001b8338:	imove	i, 0x000000
000427:0x001b8348:	jump	0x1b8368
000427:0x001b8350:	move	@m00, i
000427:0x001b8360:	inc	i
000427:0x001b8368:	ncalli	array<ModInfo>.Count()
000427:0x001b8370:	cmpi	i, #return
000427:0x001b8380:	bge	0x1b83b0
000429:0x001b8388:	icall	
000429:0x001b8398:	icall	
000429:0x001b83a8:	jump	0x1b8350
000429:0x001b83b0:	rts
array<ModInfo>::RemoveItem()
000479:0x001b83e0:	movefm	@c00, value
000479:0x001b83f0:	icall	
000479:0x001b8400:	move	remove_index, #return
000481:0x001b8410:	cmpi	remove_index, _i0
000481:0x001b8420:	blt	0x1b8438
000483:0x001b8428:	ncalli	array<ModInfo>.RemoveOrdered(remove_index)
000483:0x001b8438:	rts
array<ModInfo>::RemoveItemUnOrdered()
000489:0x001b8468:	movefm	@c00, value
000489:0x001b8478:	icall	
000489:0x001b8488:	move	remove_index, #return
000491:0x001b8498:	cmpi	remove_index, _i0
000491:0x001b84a8:	blt	0x1b84c0
000493:0x001b84b0:	ncalli	array<ModInfo>.Remove(remove_index)
000493:0x001b84c0:	rts
array<ModInfo>::IsValidIndex()
000499:0x001b84c8:	cmpi	index, _i-1
000499:0x001b84d8:	ble	0x1b8518
000499:0x001b84e0:	ncalli	array<ModInfo>.Count()
000499:0x001b84e8:	cmpi	index, #return
000499:0x001b84f8:	bge	0x1b8518
000499:0x001b8500:	imove	#return, 0x000001
000499:0x001b8510:	jump	0x1b8528
000499:0x001b8518:	imove	#return, 0x000000
000499:0x001b8528:	rts
000499:0x001b8530:	rts
array<ModInfo>::Debug()
000525:0x001b8588:	ncalli	array<ModInfo>.Count()
000525:0x001b8590:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001b85c0:	icall	Print(#return)
000526:0x001b85d0:	imove	i, 0x000000
000526:0x001b85e0:	jump	0x1b8600
000526:0x001b85e8:	move	@m00, i
000526:0x001b85f8:	inc	i
000526:0x001b8600:	ncalli	array<ModInfo>.Count()
000526:0x001b8608:	cmpi	i, #return
000526:0x001b8618:	bge	0x1b8690
000528:0x001b8620:	icall	
000528:0x001b8630:	movetm	item, #return
000529:0x001b8640:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001b8670:	icall	Print(#return)
000529:0x001b8680:	release	item
000529:0x001b8688:	jump	0x1b85e8
000529:0x001b8690:	rts
array<ModInfo>::GetRandomIndex()
000544:0x001b8698:	ncalli	array<ModInfo>.Count()
000544:0x001b86a0:	move	@m00, #return
000544:0x001b86b0:	cmpi	@m00, _i0
000544:0x001b86c0:	ble	0x1b86f8
000546:0x001b86c8:	ncalli	array<ModInfo>.Count()
000546:0x001b86d0:	icall	RandomInt(_i0, #return)
000546:0x001b86e0:	move	#return, #return
000546:0x001b86f0:	rts
000549:0x001b86f8:	imove	#return, 0xffffffff
000549:0x001b8708:	rts
000549:0x001b8710:	rts
array<ModInfo>::GetRandomElement()
000563:0x001b8718:	call	
000563:0x001b8728:	icall	
000563:0x001b8738:	movetm	#return, #return
000563:0x001b8748:	rts
000563:0x001b8750:	rts
array<ModInfo>::SwapItems()
000568:0x001b8780:	icall	
000568:0x001b8790:	movetm	item1, #return
000569:0x001b87a0:	icall	
000569:0x001b87b0:	icall	
000570:0x001b87c0:	movefm	@c00, item1
000570:0x001b87d0:	icall	
000570:0x001b87e0:	release	item1
000570:0x001b87e8:	rts
array<ModInfo>::InsertArray()
000575:0x001b8840:	imove	i, 0x000000
000575:0x001b8850:	jump	0x1b8870
000575:0x001b8858:	move	@m00, i
000575:0x001b8868:	inc	i
000575:0x001b8870:	ncalli	array<ModInfo>.Count()
000575:0x001b8878:	cmpi	i, #return
000575:0x001b8888:	bge	0x1b88e0
000577:0x001b8890:	icall	
000577:0x001b88a0:	movetm	item, #return
000578:0x001b88b0:	movefm	@c00, item
000578:0x001b88c0:	icall	
000578:0x001b88d0:	release	item
000578:0x001b88d8:	jump	0x1b8858
000578:0x001b88e0:	rts
array<ModInfo>::Invert()
000584:0x001b8960:	imove	left, 0x000000
000585:0x001b8970:	ncalli	array<ModInfo>.Count()
000585:0x001b8978:	subi	right, #return, _i1
000586:0x001b8988:	cmpi	right, _i0
000586:0x001b8998:	ble	0x1b8a58
000588:0x001b89a0:	cmpi	left, right
000588:0x001b89b0:	bge	0x1b8a58
000590:0x001b89b8:	icall	
000590:0x001b89c8:	movetm	temp, #return
000591:0x001b89d8:	move	@m00, left
000591:0x001b89e8:	inc	left
000591:0x001b89f0:	icall	
000591:0x001b8a00:	icall	
000592:0x001b8a10:	move	@m00, right
000592:0x001b8a20:	dec	right
000592:0x001b8a28:	movefm	@c00, temp
000592:0x001b8a38:	icall	
000592:0x001b8a48:	release	temp
000592:0x001b8a50:	jump	0x1b89a0
000592:0x001b8a58:	rts
array<ModInfo>::MoveIndex()
000612:0x001b8ab0:	ncalli	array<ModInfo>.Count()
000612:0x001b8ab8:	move	count, #return
000613:0x001b8ac8:	move	new_index, curr_index
000615:0x001b8ad8:	cmpi	move_number, _i0
000615:0x001b8ae8:	ble	0x1b8b10
000617:0x001b8af0:	addi	@m00, curr_index, move_number
000617:0x001b8b00:	move	new_index, @m00
000620:0x001b8b10:	cmpi	move_number, _i0
000620:0x001b8b20:	bge	0x1b8bc8
000622:0x001b8b28:	subi	@m00, curr_index, move_number
000622:0x001b8b38:	move	new_index, @m00
000624:0x001b8b48:	cmpi	new_index, _i0
000624:0x001b8b58:	bge	0x1b8bc8
000626:0x001b8b60:	subi	@m01, _i0, count
000626:0x001b8b70:	cmpi	new_index, @m01
000626:0x001b8b80:	bgt	0x1b8ba8
000628:0x001b8b88:	modi	@m00, new_index, count
000628:0x001b8b98:	move	new_index, @m00
000631:0x001b8ba8:	addi	@m00, new_index, count
000631:0x001b8bb8:	move	new_index, @m00
000635:0x001b8bc8:	cmpi	new_index, count
000635:0x001b8bd8:	blt	0x1b8c00
000637:0x001b8be0:	modi	@m00, new_index, count
000637:0x001b8bf0:	move	new_index, @m00
000641:0x001b8c00:	move	#return, new_index
000641:0x001b8c10:	rts
000641:0x001b8c18:	rts
array<ModInfo>::ShuffleArray()
000646:0x001b8c48:	imove	i, 0x000000
000646:0x001b8c58:	jump	0x1b8c78
000646:0x001b8c60:	move	@m00, i
000646:0x001b8c70:	inc	i
000646:0x001b8c78:	ncalli	array<ModInfo>.Count()
000646:0x001b8c80:	cmpi	i, #return
000646:0x001b8c90:	bge	0x1b8cc8
000648:0x001b8c98:	call	
000648:0x001b8ca8:	call	
000648:0x001b8cc0:	jump	0x1b8c60
000648:0x001b8cc8:	rts
array<ModInfo>::DifferentAtPosition()
000666:0x001b8cf8:	ncalli	array<ModInfo>.Count()
000666:0x001b8d00:	move	@m00, #return
000666:0x001b8d10:	push	#return
000666:0x001b8d18:	ncalli	array<ModInfo>.Count()
000666:0x001b8d20:	move	@m02, #return
000666:0x001b8d30:	pop	#return
000666:0x001b8d38:	cmpi	@m00, @m02
000666:0x001b8d48:	beq	0x1b8d78
000668:0x001b8d50:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001b8d60:	imove	#return, 0xffffffff
000669:0x001b8d70:	rts
000672:0x001b8d78:	imove	i, 0x000000
000672:0x001b8d88:	jump	0x1b8d98
000672:0x001b8d90:	inc	i
000672:0x001b8d98:	ncalli	array<ModInfo>.Count()
000672:0x001b8da0:	cmpi	i, #return
000672:0x001b8db0:	bge	0x1b8e40
000674:0x001b8db8:	icall	
000674:0x001b8dc8:	movec	@c00, #return
000674:0x001b8dd8:	pushc	#return
000674:0x001b8de0:	icall	
000674:0x001b8df0:	movec	@c02, #return
000674:0x001b8e00:	popc	#return
000674:0x001b8e08:	cmpc	@c00, @c02
000674:0x001b8e18:	beq	0x1b8e38
000676:0x001b8e20:	move	#return, i
000676:0x001b8e30:	rts
000676:0x001b8e38:	jump	0x1b8d90
000680:0x001b8e40:	imove	#return, 0xffffffff
000680:0x001b8e50:	rts
000680:0x001b8e58:	rts
array<@ModInfo>::InsertAll()
000427:0x001b9270:	imove	i, 0x000000
000427:0x001b9280:	jump	0x1b92a0
000427:0x001b9288:	move	@m00, i
000427:0x001b9298:	inc	i
000427:0x001b92a0:	ncalli	array<ModInfo>.Count()
000427:0x001b92a8:	cmpi	i, #return
000427:0x001b92b8:	bge	0x1b92e8
000429:0x001b92c0:	icall	
000429:0x001b92d0:	icall	
000429:0x001b92e0:	jump	0x1b9288
000429:0x001b92e8:	rts
array<@ModInfo>::RemoveItem()
000479:0x001b9318:	movefm	@c00, value
000479:0x001b9328:	icall	
000479:0x001b9338:	move	remove_index, #return
000481:0x001b9348:	cmpi	remove_index, _i0
000481:0x001b9358:	blt	0x1b9370
000483:0x001b9360:	ncalli	array<@ModInfo>.RemoveOrdered(remove_index)
000483:0x001b9370:	rts
array<@ModInfo>::RemoveItemUnOrdered()
000489:0x001b93a0:	movefm	@c00, value
000489:0x001b93b0:	icall	
000489:0x001b93c0:	move	remove_index, #return
000491:0x001b93d0:	cmpi	remove_index, _i0
000491:0x001b93e0:	blt	0x1b93f8
000493:0x001b93e8:	ncalli	array<@ModInfo>.Remove(remove_index)
000493:0x001b93f8:	rts
array<@ModInfo>::IsValidIndex()
000499:0x001b9400:	cmpi	index, _i-1
000499:0x001b9410:	ble	0x1b9450
000499:0x001b9418:	ncalli	array<@ModInfo>.Count()
000499:0x001b9420:	cmpi	index, #return
000499:0x001b9430:	bge	0x1b9450
000499:0x001b9438:	imove	#return, 0x000001
000499:0x001b9448:	jump	0x1b9460
000499:0x001b9450:	imove	#return, 0x000000
000499:0x001b9460:	rts
000499:0x001b9468:	rts
array<@ModInfo>::Debug()
000525:0x001b94c0:	ncalli	array<@ModInfo>.Count()
000525:0x001b94c8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001b94f8:	icall	Print(#return)
000526:0x001b9508:	imove	i, 0x000000
000526:0x001b9518:	jump	0x1b9538
000526:0x001b9520:	move	@m00, i
000526:0x001b9530:	inc	i
000526:0x001b9538:	ncalli	array<@ModInfo>.Count()
000526:0x001b9540:	cmpi	i, #return
000526:0x001b9550:	bge	0x1b95c8
000528:0x001b9558:	icall	
000528:0x001b9568:	movetm	item, #return
000529:0x001b9578:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001b95a8:	icall	Print(#return)
000529:0x001b95b8:	release	item
000529:0x001b95c0:	jump	0x1b9520
000529:0x001b95c8:	rts
array<@ModInfo>::GetRandomIndex()
000544:0x001b95d0:	ncalli	array<@ModInfo>.Count()
000544:0x001b95d8:	move	@m00, #return
000544:0x001b95e8:	cmpi	@m00, _i0
000544:0x001b95f8:	ble	0x1b9630
000546:0x001b9600:	ncalli	array<@ModInfo>.Count()
000546:0x001b9608:	icall	RandomInt(_i0, #return)
000546:0x001b9618:	move	#return, #return
000546:0x001b9628:	rts
000549:0x001b9630:	imove	#return, 0xffffffff
000549:0x001b9640:	rts
000549:0x001b9648:	rts
array<@ModInfo>::GetRandomElement()
000563:0x001b9650:	call	
000563:0x001b9660:	icall	
000563:0x001b9670:	movetm	#return, #return
000563:0x001b9680:	rts
000563:0x001b9688:	rts
array<@ModInfo>::SwapItems()
000568:0x001b96b8:	icall	
000568:0x001b96c8:	movetm	item1, #return
000569:0x001b96d8:	icall	
000569:0x001b96e8:	icall	
000570:0x001b96f8:	movefm	@c00, item1
000570:0x001b9708:	icall	
000570:0x001b9718:	release	item1
000570:0x001b9720:	rts
array<@ModInfo>::InsertArray()
000575:0x001b9778:	imove	i, 0x000000
000575:0x001b9788:	jump	0x1b97a8
000575:0x001b9790:	move	@m00, i
000575:0x001b97a0:	inc	i
000575:0x001b97a8:	ncalli	array<ModInfo>.Count()
000575:0x001b97b0:	cmpi	i, #return
000575:0x001b97c0:	bge	0x1b9818
000577:0x001b97c8:	icall	
000577:0x001b97d8:	movetm	item, #return
000578:0x001b97e8:	movefm	@c00, item
000578:0x001b97f8:	icall	
000578:0x001b9808:	release	item
000578:0x001b9810:	jump	0x1b9790
000578:0x001b9818:	rts
array<@ModInfo>::Invert()
000584:0x001b9898:	imove	left, 0x000000
000585:0x001b98a8:	ncalli	array<@ModInfo>.Count()
000585:0x001b98b0:	subi	right, #return, _i1
000586:0x001b98c0:	cmpi	right, _i0
000586:0x001b98d0:	ble	0x1b9990
000588:0x001b98d8:	cmpi	left, right
000588:0x001b98e8:	bge	0x1b9990
000590:0x001b98f0:	icall	
000590:0x001b9900:	movetm	temp, #return
000591:0x001b9910:	move	@m00, left
000591:0x001b9920:	inc	left
000591:0x001b9928:	icall	
000591:0x001b9938:	icall	
000592:0x001b9948:	move	@m00, right
000592:0x001b9958:	dec	right
000592:0x001b9960:	movefm	@c00, temp
000592:0x001b9970:	icall	
000592:0x001b9980:	release	temp
000592:0x001b9988:	jump	0x1b98d8
000592:0x001b9990:	rts
array<@ModInfo>::MoveIndex()
000612:0x001b99e8:	ncalli	array<@ModInfo>.Count()
000612:0x001b99f0:	move	count, #return
000613:0x001b9a00:	move	new_index, curr_index
000615:0x001b9a10:	cmpi	move_number, _i0
000615:0x001b9a20:	ble	0x1b9a48
000617:0x001b9a28:	addi	@m00, curr_index, move_number
000617:0x001b9a38:	move	new_index, @m00
000620:0x001b9a48:	cmpi	move_number, _i0
000620:0x001b9a58:	bge	0x1b9b00
000622:0x001b9a60:	subi	@m00, curr_index, move_number
000622:0x001b9a70:	move	new_index, @m00
000624:0x001b9a80:	cmpi	new_index, _i0
000624:0x001b9a90:	bge	0x1b9b00
000626:0x001b9a98:	subi	@m01, _i0, count
000626:0x001b9aa8:	cmpi	new_index, @m01
000626:0x001b9ab8:	bgt	0x1b9ae0
000628:0x001b9ac0:	modi	@m00, new_index, count
000628:0x001b9ad0:	move	new_index, @m00
000631:0x001b9ae0:	addi	@m00, new_index, count
000631:0x001b9af0:	move	new_index, @m00
000635:0x001b9b00:	cmpi	new_index, count
000635:0x001b9b10:	blt	0x1b9b38
000637:0x001b9b18:	modi	@m00, new_index, count
000637:0x001b9b28:	move	new_index, @m00
000641:0x001b9b38:	move	#return, new_index
000641:0x001b9b48:	rts
000641:0x001b9b50:	rts
array<@ModInfo>::ShuffleArray()
000646:0x001b9b80:	imove	i, 0x000000
000646:0x001b9b90:	jump	0x1b9bb0
000646:0x001b9b98:	move	@m00, i
000646:0x001b9ba8:	inc	i
000646:0x001b9bb0:	ncalli	array<@ModInfo>.Count()
000646:0x001b9bb8:	cmpi	i, #return
000646:0x001b9bc8:	bge	0x1b9c00
000648:0x001b9bd0:	call	
000648:0x001b9be0:	call	
000648:0x001b9bf8:	jump	0x1b9b98
000648:0x001b9c00:	rts
array<@ModInfo>::DifferentAtPosition()
000666:0x001b9c30:	ncalli	array<@ModInfo>.Count()
000666:0x001b9c38:	move	@m00, #return
000666:0x001b9c48:	ncalli	array<ModInfo>.Count()
000666:0x001b9c50:	cmpi	@m00, #return
000666:0x001b9c60:	beq	0x1b9c90
000668:0x001b9c68:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001b9c78:	imove	#return, 0xffffffff
000669:0x001b9c88:	rts
000672:0x001b9c90:	imove	i, 0x000000
000672:0x001b9ca0:	jump	0x1b9cb0
000672:0x001b9ca8:	inc	i
000672:0x001b9cb0:	ncalli	array<ModInfo>.Count()
000672:0x001b9cb8:	cmpi	i, #return
000672:0x001b9cc8:	bge	0x1b9d38
000674:0x001b9cd0:	icall	
000674:0x001b9ce0:	movec	@c00, #return
000674:0x001b9cf0:	icall	
000674:0x001b9d00:	cmpc	@c00, #return
000674:0x001b9d10:	beq	0x1b9d30
000676:0x001b9d18:	move	#return, i
000676:0x001b9d28:	rts
000676:0x001b9d30:	jump	0x1b9ca8
000680:0x001b9d38:	imove	#return, 0xffffffff
000680:0x001b9d48:	rts
000680:0x001b9d50:	rts
array<Object>::InsertAll()
000427:0x001ba348:	imove	i, 0x000000
000427:0x001ba358:	jump	0x1ba378
000427:0x001ba360:	move	@m00, i
000427:0x001ba370:	inc	i
000427:0x001ba378:	ncalli	array<Object>.Count()
000427:0x001ba380:	cmpi	i, #return
000427:0x001ba390:	bge	0x1ba3c0
000429:0x001ba398:	icall	
000429:0x001ba3a8:	icall	
000429:0x001ba3b8:	jump	0x1ba360
000429:0x001ba3c0:	rts
array<Object>::RemoveItem()
000479:0x001ba3f0:	movefm	@c00, value
000479:0x001ba400:	icall	
000479:0x001ba410:	move	remove_index, #return
000481:0x001ba420:	cmpi	remove_index, _i0
000481:0x001ba430:	blt	0x1ba448
000483:0x001ba438:	ncalli	array<Object>.RemoveOrdered(remove_index)
000483:0x001ba448:	rts
array<Object>::RemoveItemUnOrdered()
000489:0x001ba478:	movefm	@c00, value
000489:0x001ba488:	icall	
000489:0x001ba498:	move	remove_index, #return
000491:0x001ba4a8:	cmpi	remove_index, _i0
000491:0x001ba4b8:	blt	0x1ba4d0
000493:0x001ba4c0:	ncalli	array<Object>.Remove(remove_index)
000493:0x001ba4d0:	rts
array<Object>::IsValidIndex()
000499:0x001ba4d8:	cmpi	index, _i-1
000499:0x001ba4e8:	ble	0x1ba528
000499:0x001ba4f0:	ncalli	array<Object>.Count()
000499:0x001ba4f8:	cmpi	index, #return
000499:0x001ba508:	bge	0x1ba528
000499:0x001ba510:	imove	#return, 0x000001
000499:0x001ba520:	jump	0x1ba538
000499:0x001ba528:	imove	#return, 0x000000
000499:0x001ba538:	rts
000499:0x001ba540:	rts
array<Object>::Debug()
000525:0x001ba598:	ncalli	array<Object>.Count()
000525:0x001ba5a0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001ba5d0:	icall	Print(#return)
000526:0x001ba5e0:	imove	i, 0x000000
000526:0x001ba5f0:	jump	0x1ba610
000526:0x001ba5f8:	move	@m00, i
000526:0x001ba608:	inc	i
000526:0x001ba610:	ncalli	array<Object>.Count()
000526:0x001ba618:	cmpi	i, #return
000526:0x001ba628:	bge	0x1ba6a0
000528:0x001ba630:	icall	
000528:0x001ba640:	movetm	item, #return
000529:0x001ba650:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001ba680:	icall	Print(#return)
000529:0x001ba690:	release	item
000529:0x001ba698:	jump	0x1ba5f8
000529:0x001ba6a0:	rts
array<Object>::GetRandomIndex()
000544:0x001ba6a8:	ncalli	array<Object>.Count()
000544:0x001ba6b0:	move	@m00, #return
000544:0x001ba6c0:	cmpi	@m00, _i0
000544:0x001ba6d0:	ble	0x1ba708
000546:0x001ba6d8:	ncalli	array<Object>.Count()
000546:0x001ba6e0:	icall	RandomInt(_i0, #return)
000546:0x001ba6f0:	move	#return, #return
000546:0x001ba700:	rts
000549:0x001ba708:	imove	#return, 0xffffffff
000549:0x001ba718:	rts
000549:0x001ba720:	rts
array<Object>::GetRandomElement()
000563:0x001ba728:	call	
000563:0x001ba738:	icall	
000563:0x001ba748:	movetm	#return, #return
000563:0x001ba758:	rts
000563:0x001ba760:	rts
array<Object>::SwapItems()
000568:0x001ba790:	icall	
000568:0x001ba7a0:	movetm	item1, #return
000569:0x001ba7b0:	icall	
000569:0x001ba7c0:	icall	
000570:0x001ba7d0:	movefm	@c00, item1
000570:0x001ba7e0:	icall	
000570:0x001ba7f0:	release	item1
000570:0x001ba7f8:	rts
array<Object>::InsertArray()
000575:0x001ba850:	imove	i, 0x000000
000575:0x001ba860:	jump	0x1ba880
000575:0x001ba868:	move	@m00, i
000575:0x001ba878:	inc	i
000575:0x001ba880:	ncalli	array<Object>.Count()
000575:0x001ba888:	cmpi	i, #return
000575:0x001ba898:	bge	0x1ba8f0
000577:0x001ba8a0:	icall	
000577:0x001ba8b0:	movetm	item, #return
000578:0x001ba8c0:	movefm	@c00, item
000578:0x001ba8d0:	icall	
000578:0x001ba8e0:	release	item
000578:0x001ba8e8:	jump	0x1ba868
000578:0x001ba8f0:	rts
array<Object>::Invert()
000584:0x001ba970:	imove	left, 0x000000
000585:0x001ba980:	ncalli	array<Object>.Count()
000585:0x001ba988:	subi	right, #return, _i1
000586:0x001ba998:	cmpi	right, _i0
000586:0x001ba9a8:	ble	0x1baa68
000588:0x001ba9b0:	cmpi	left, right
000588:0x001ba9c0:	bge	0x1baa68
000590:0x001ba9c8:	icall	
000590:0x001ba9d8:	movetm	temp, #return
000591:0x001ba9e8:	move	@m00, left
000591:0x001ba9f8:	inc	left
000591:0x001baa00:	icall	
000591:0x001baa10:	icall	
000592:0x001baa20:	move	@m00, right
000592:0x001baa30:	dec	right
000592:0x001baa38:	movefm	@c00, temp
000592:0x001baa48:	icall	
000592:0x001baa58:	release	temp
000592:0x001baa60:	jump	0x1ba9b0
000592:0x001baa68:	rts
array<Object>::MoveIndex()
000612:0x001baac0:	ncalli	array<Object>.Count()
000612:0x001baac8:	move	count, #return
000613:0x001baad8:	move	new_index, curr_index
000615:0x001baae8:	cmpi	move_number, _i0
000615:0x001baaf8:	ble	0x1bab20
000617:0x001bab00:	addi	@m00, curr_index, move_number
000617:0x001bab10:	move	new_index, @m00
000620:0x001bab20:	cmpi	move_number, _i0
000620:0x001bab30:	bge	0x1babd8
000622:0x001bab38:	subi	@m00, curr_index, move_number
000622:0x001bab48:	move	new_index, @m00
000624:0x001bab58:	cmpi	new_index, _i0
000624:0x001bab68:	bge	0x1babd8
000626:0x001bab70:	subi	@m01, _i0, count
000626:0x001bab80:	cmpi	new_index, @m01
000626:0x001bab90:	bgt	0x1babb8
000628:0x001bab98:	modi	@m00, new_index, count
000628:0x001baba8:	move	new_index, @m00
000631:0x001babb8:	addi	@m00, new_index, count
000631:0x001babc8:	move	new_index, @m00
000635:0x001babd8:	cmpi	new_index, count
000635:0x001babe8:	blt	0x1bac10
000637:0x001babf0:	modi	@m00, new_index, count
000637:0x001bac00:	move	new_index, @m00
000641:0x001bac10:	move	#return, new_index
000641:0x001bac20:	rts
000641:0x001bac28:	rts
array<Object>::ShuffleArray()
000646:0x001bac58:	imove	i, 0x000000
000646:0x001bac68:	jump	0x1bac88
000646:0x001bac70:	move	@m00, i
000646:0x001bac80:	inc	i
000646:0x001bac88:	ncalli	array<Object>.Count()
000646:0x001bac90:	cmpi	i, #return
000646:0x001baca0:	bge	0x1bacd8
000648:0x001baca8:	call	
000648:0x001bacb8:	call	
000648:0x001bacd0:	jump	0x1bac70
000648:0x001bacd8:	rts
array<Object>::DifferentAtPosition()
000666:0x001bad08:	ncalli	array<Object>.Count()
000666:0x001bad10:	move	@m00, #return
000666:0x001bad20:	push	#return
000666:0x001bad28:	ncalli	array<Object>.Count()
000666:0x001bad30:	move	@m02, #return
000666:0x001bad40:	pop	#return
000666:0x001bad48:	cmpi	@m00, @m02
000666:0x001bad58:	beq	0x1bad88
000668:0x001bad60:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001bad70:	imove	#return, 0xffffffff
000669:0x001bad80:	rts
000672:0x001bad88:	imove	i, 0x000000
000672:0x001bad98:	jump	0x1bada8
000672:0x001bada0:	inc	i
000672:0x001bada8:	ncalli	array<Object>.Count()
000672:0x001badb0:	cmpi	i, #return
000672:0x001badc0:	bge	0x1bae50
000674:0x001badc8:	icall	
000674:0x001badd8:	movec	@c00, #return
000674:0x001bade8:	pushc	#return
000674:0x001badf0:	icall	
000674:0x001bae00:	movec	@c02, #return
000674:0x001bae10:	popc	#return
000674:0x001bae18:	cmpc	@c00, @c02
000674:0x001bae28:	beq	0x1bae48
000676:0x001bae30:	move	#return, i
000676:0x001bae40:	rts
000676:0x001bae48:	jump	0x1bada0
000680:0x001bae50:	imove	#return, 0xffffffff
000680:0x001bae60:	rts
000680:0x001bae68:	rts
array<CargoBase>::InsertAll()
000427:0x001bb460:	imove	i, 0x000000
000427:0x001bb470:	jump	0x1bb490
000427:0x001bb478:	move	@m00, i
000427:0x001bb488:	inc	i
000427:0x001bb490:	ncalli	array<CargoBase>.Count()
000427:0x001bb498:	cmpi	i, #return
000427:0x001bb4a8:	bge	0x1bb4d8
000429:0x001bb4b0:	icall	
000429:0x001bb4c0:	icall	
000429:0x001bb4d0:	jump	0x1bb478
000429:0x001bb4d8:	rts
array<CargoBase>::RemoveItem()
000479:0x001bb508:	movefm	@c00, value
000479:0x001bb518:	icall	
000479:0x001bb528:	move	remove_index, #return
000481:0x001bb538:	cmpi	remove_index, _i0
000481:0x001bb548:	blt	0x1bb560
000483:0x001bb550:	ncalli	array<CargoBase>.RemoveOrdered(remove_index)
000483:0x001bb560:	rts
array<CargoBase>::RemoveItemUnOrdered()
000489:0x001bb590:	movefm	@c00, value
000489:0x001bb5a0:	icall	
000489:0x001bb5b0:	move	remove_index, #return
000491:0x001bb5c0:	cmpi	remove_index, _i0
000491:0x001bb5d0:	blt	0x1bb5e8
000493:0x001bb5d8:	ncalli	array<CargoBase>.Remove(remove_index)
000493:0x001bb5e8:	rts
array<CargoBase>::IsValidIndex()
000499:0x001bb5f0:	cmpi	index, _i-1
000499:0x001bb600:	ble	0x1bb640
000499:0x001bb608:	ncalli	array<CargoBase>.Count()
000499:0x001bb610:	cmpi	index, #return
000499:0x001bb620:	bge	0x1bb640
000499:0x001bb628:	imove	#return, 0x000001
000499:0x001bb638:	jump	0x1bb650
000499:0x001bb640:	imove	#return, 0x000000
000499:0x001bb650:	rts
000499:0x001bb658:	rts
array<CargoBase>::Debug()
000525:0x001bb6b0:	ncalli	array<CargoBase>.Count()
000525:0x001bb6b8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001bb6e8:	icall	Print(#return)
000526:0x001bb6f8:	imove	i, 0x000000
000526:0x001bb708:	jump	0x1bb728
000526:0x001bb710:	move	@m00, i
000526:0x001bb720:	inc	i
000526:0x001bb728:	ncalli	array<CargoBase>.Count()
000526:0x001bb730:	cmpi	i, #return
000526:0x001bb740:	bge	0x1bb7b8
000528:0x001bb748:	icall	
000528:0x001bb758:	movetm	item, #return
000529:0x001bb768:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001bb798:	icall	Print(#return)
000529:0x001bb7a8:	release	item
000529:0x001bb7b0:	jump	0x1bb710
000529:0x001bb7b8:	rts
array<CargoBase>::GetRandomIndex()
000544:0x001bb7c0:	ncalli	array<CargoBase>.Count()
000544:0x001bb7c8:	move	@m00, #return
000544:0x001bb7d8:	cmpi	@m00, _i0
000544:0x001bb7e8:	ble	0x1bb820
000546:0x001bb7f0:	ncalli	array<CargoBase>.Count()
000546:0x001bb7f8:	icall	RandomInt(_i0, #return)
000546:0x001bb808:	move	#return, #return
000546:0x001bb818:	rts
000549:0x001bb820:	imove	#return, 0xffffffff
000549:0x001bb830:	rts
000549:0x001bb838:	rts
array<CargoBase>::GetRandomElement()
000563:0x001bb840:	call	
000563:0x001bb850:	icall	
000563:0x001bb860:	movetm	#return, #return
000563:0x001bb870:	rts
000563:0x001bb878:	rts
array<CargoBase>::SwapItems()
000568:0x001bb8a8:	icall	
000568:0x001bb8b8:	movetm	item1, #return
000569:0x001bb8c8:	icall	
000569:0x001bb8d8:	icall	
000570:0x001bb8e8:	movefm	@c00, item1
000570:0x001bb8f8:	icall	
000570:0x001bb908:	release	item1
000570:0x001bb910:	rts
array<CargoBase>::InsertArray()
000575:0x001bb968:	imove	i, 0x000000
000575:0x001bb978:	jump	0x1bb998
000575:0x001bb980:	move	@m00, i
000575:0x001bb990:	inc	i
000575:0x001bb998:	ncalli	array<CargoBase>.Count()
000575:0x001bb9a0:	cmpi	i, #return
000575:0x001bb9b0:	bge	0x1bba08
000577:0x001bb9b8:	icall	
000577:0x001bb9c8:	movetm	item, #return
000578:0x001bb9d8:	movefm	@c00, item
000578:0x001bb9e8:	icall	
000578:0x001bb9f8:	release	item
000578:0x001bba00:	jump	0x1bb980
000578:0x001bba08:	rts
array<CargoBase>::Invert()
000584:0x001bba88:	imove	left, 0x000000
000585:0x001bba98:	ncalli	array<CargoBase>.Count()
000585:0x001bbaa0:	subi	right, #return, _i1
000586:0x001bbab0:	cmpi	right, _i0
000586:0x001bbac0:	ble	0x1bbb80
000588:0x001bbac8:	cmpi	left, right
000588:0x001bbad8:	bge	0x1bbb80
000590:0x001bbae0:	icall	
000590:0x001bbaf0:	movetm	temp, #return
000591:0x001bbb00:	move	@m00, left
000591:0x001bbb10:	inc	left
000591:0x001bbb18:	icall	
000591:0x001bbb28:	icall	
000592:0x001bbb38:	move	@m00, right
000592:0x001bbb48:	dec	right
000592:0x001bbb50:	movefm	@c00, temp
000592:0x001bbb60:	icall	
000592:0x001bbb70:	release	temp
000592:0x001bbb78:	jump	0x1bbac8
000592:0x001bbb80:	rts
array<CargoBase>::MoveIndex()
000612:0x001bbbd8:	ncalli	array<CargoBase>.Count()
000612:0x001bbbe0:	move	count, #return
000613:0x001bbbf0:	move	new_index, curr_index
000615:0x001bbc00:	cmpi	move_number, _i0
000615:0x001bbc10:	ble	0x1bbc38
000617:0x001bbc18:	addi	@m00, curr_index, move_number
000617:0x001bbc28:	move	new_index, @m00
000620:0x001bbc38:	cmpi	move_number, _i0
000620:0x001bbc48:	bge	0x1bbcf0
000622:0x001bbc50:	subi	@m00, curr_index, move_number
000622:0x001bbc60:	move	new_index, @m00
000624:0x001bbc70:	cmpi	new_index, _i0
000624:0x001bbc80:	bge	0x1bbcf0
000626:0x001bbc88:	subi	@m01, _i0, count
000626:0x001bbc98:	cmpi	new_index, @m01
000626:0x001bbca8:	bgt	0x1bbcd0
000628:0x001bbcb0:	modi	@m00, new_index, count
000628:0x001bbcc0:	move	new_index, @m00
000631:0x001bbcd0:	addi	@m00, new_index, count
000631:0x001bbce0:	move	new_index, @m00
000635:0x001bbcf0:	cmpi	new_index, count
000635:0x001bbd00:	blt	0x1bbd28
000637:0x001bbd08:	modi	@m00, new_index, count
000637:0x001bbd18:	move	new_index, @m00
000641:0x001bbd28:	move	#return, new_index
000641:0x001bbd38:	rts
000641:0x001bbd40:	rts
array<CargoBase>::ShuffleArray()
000646:0x001bbd70:	imove	i, 0x000000
000646:0x001bbd80:	jump	0x1bbda0
000646:0x001bbd88:	move	@m00, i
000646:0x001bbd98:	inc	i
000646:0x001bbda0:	ncalli	array<CargoBase>.Count()
000646:0x001bbda8:	cmpi	i, #return
000646:0x001bbdb8:	bge	0x1bbdf0
000648:0x001bbdc0:	call	
000648:0x001bbdd0:	call	
000648:0x001bbde8:	jump	0x1bbd88
000648:0x001bbdf0:	rts
array<CargoBase>::DifferentAtPosition()
000666:0x001bbe20:	ncalli	array<CargoBase>.Count()
000666:0x001bbe28:	move	@m00, #return
000666:0x001bbe38:	push	#return
000666:0x001bbe40:	ncalli	array<CargoBase>.Count()
000666:0x001bbe48:	move	@m02, #return
000666:0x001bbe58:	pop	#return
000666:0x001bbe60:	cmpi	@m00, @m02
000666:0x001bbe70:	beq	0x1bbea0
000668:0x001bbe78:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001bbe88:	imove	#return, 0xffffffff
000669:0x001bbe98:	rts
000672:0x001bbea0:	imove	i, 0x000000
000672:0x001bbeb0:	jump	0x1bbec0
000672:0x001bbeb8:	inc	i
000672:0x001bbec0:	ncalli	array<CargoBase>.Count()
000672:0x001bbec8:	cmpi	i, #return
000672:0x001bbed8:	bge	0x1bbf68
000674:0x001bbee0:	icall	
000674:0x001bbef0:	movec	@c00, #return
000674:0x001bbf00:	pushc	#return
000674:0x001bbf08:	icall	
000674:0x001bbf18:	movec	@c02, #return
000674:0x001bbf28:	popc	#return
000674:0x001bbf30:	cmpc	@c00, @c02
000674:0x001bbf40:	beq	0x1bbf60
000676:0x001bbf48:	move	#return, i
000676:0x001bbf58:	rts
000676:0x001bbf60:	jump	0x1bbeb8
000680:0x001bbf68:	imove	#return, 0xffffffff
000680:0x001bbf78:	rts
000680:0x001bbf80:	rts
array<PlayerIdentity>::InsertAll()
000427:0x001bc578:	imove	i, 0x000000
000427:0x001bc588:	jump	0x1bc5a8
000427:0x001bc590:	move	@m00, i
000427:0x001bc5a0:	inc	i
000427:0x001bc5a8:	ncalli	array<PlayerIdentity>.Count()
000427:0x001bc5b0:	cmpi	i, #return
000427:0x001bc5c0:	bge	0x1bc5f0
000429:0x001bc5c8:	icall	
000429:0x001bc5d8:	icall	
000429:0x001bc5e8:	jump	0x1bc590
000429:0x001bc5f0:	rts
array<PlayerIdentity>::RemoveItem()
000479:0x001bc620:	movefm	@c00, value
000479:0x001bc630:	icall	
000479:0x001bc640:	move	remove_index, #return
000481:0x001bc650:	cmpi	remove_index, _i0
000481:0x001bc660:	blt	0x1bc678
000483:0x001bc668:	ncalli	array<PlayerIdentity>.RemoveOrdered(remove_index)
000483:0x001bc678:	rts
array<PlayerIdentity>::RemoveItemUnOrdered()
000489:0x001bc6a8:	movefm	@c00, value
000489:0x001bc6b8:	icall	
000489:0x001bc6c8:	move	remove_index, #return
000491:0x001bc6d8:	cmpi	remove_index, _i0
000491:0x001bc6e8:	blt	0x1bc700
000493:0x001bc6f0:	ncalli	array<PlayerIdentity>.Remove(remove_index)
000493:0x001bc700:	rts
array<PlayerIdentity>::IsValidIndex()
000499:0x001bc708:	cmpi	index, _i-1
000499:0x001bc718:	ble	0x1bc758
000499:0x001bc720:	ncalli	array<PlayerIdentity>.Count()
000499:0x001bc728:	cmpi	index, #return
000499:0x001bc738:	bge	0x1bc758
000499:0x001bc740:	imove	#return, 0x000001
000499:0x001bc750:	jump	0x1bc768
000499:0x001bc758:	imove	#return, 0x000000
000499:0x001bc768:	rts
000499:0x001bc770:	rts
array<PlayerIdentity>::Debug()
000525:0x001bc7c8:	ncalli	array<PlayerIdentity>.Count()
000525:0x001bc7d0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001bc800:	icall	Print(#return)
000526:0x001bc810:	imove	i, 0x000000
000526:0x001bc820:	jump	0x1bc840
000526:0x001bc828:	move	@m00, i
000526:0x001bc838:	inc	i
000526:0x001bc840:	ncalli	array<PlayerIdentity>.Count()
000526:0x001bc848:	cmpi	i, #return
000526:0x001bc858:	bge	0x1bc8d0
000528:0x001bc860:	icall	
000528:0x001bc870:	movetm	item, #return
000529:0x001bc880:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001bc8b0:	icall	Print(#return)
000529:0x001bc8c0:	release	item
000529:0x001bc8c8:	jump	0x1bc828
000529:0x001bc8d0:	rts
array<PlayerIdentity>::GetRandomIndex()
000544:0x001bc8d8:	ncalli	array<PlayerIdentity>.Count()
000544:0x001bc8e0:	move	@m00, #return
000544:0x001bc8f0:	cmpi	@m00, _i0
000544:0x001bc900:	ble	0x1bc938
000546:0x001bc908:	ncalli	array<PlayerIdentity>.Count()
000546:0x001bc910:	icall	RandomInt(_i0, #return)
000546:0x001bc920:	move	#return, #return
000546:0x001bc930:	rts
000549:0x001bc938:	imove	#return, 0xffffffff
000549:0x001bc948:	rts
000549:0x001bc950:	rts
array<PlayerIdentity>::GetRandomElement()
000563:0x001bc958:	call	
000563:0x001bc968:	icall	
000563:0x001bc978:	movetm	#return, #return
000563:0x001bc988:	rts
000563:0x001bc990:	rts
array<PlayerIdentity>::SwapItems()
000568:0x001bc9c0:	icall	
000568:0x001bc9d0:	movetm	item1, #return
000569:0x001bc9e0:	icall	
000569:0x001bc9f0:	icall	
000570:0x001bca00:	movefm	@c00, item1
000570:0x001bca10:	icall	
000570:0x001bca20:	release	item1
000570:0x001bca28:	rts
array<PlayerIdentity>::InsertArray()
000575:0x001bca80:	imove	i, 0x000000
000575:0x001bca90:	jump	0x1bcab0
000575:0x001bca98:	move	@m00, i
000575:0x001bcaa8:	inc	i
000575:0x001bcab0:	ncalli	array<PlayerIdentity>.Count()
000575:0x001bcab8:	cmpi	i, #return
000575:0x001bcac8:	bge	0x1bcb20
000577:0x001bcad0:	icall	
000577:0x001bcae0:	movetm	item, #return
000578:0x001bcaf0:	movefm	@c00, item
000578:0x001bcb00:	icall	
000578:0x001bcb10:	release	item
000578:0x001bcb18:	jump	0x1bca98
000578:0x001bcb20:	rts
array<PlayerIdentity>::Invert()
000584:0x001bcba0:	imove	left, 0x000000
000585:0x001bcbb0:	ncalli	array<PlayerIdentity>.Count()
000585:0x001bcbb8:	subi	right, #return, _i1
000586:0x001bcbc8:	cmpi	right, _i0
000586:0x001bcbd8:	ble	0x1bcc98
000588:0x001bcbe0:	cmpi	left, right
000588:0x001bcbf0:	bge	0x1bcc98
000590:0x001bcbf8:	icall	
000590:0x001bcc08:	movetm	temp, #return
000591:0x001bcc18:	move	@m00, left
000591:0x001bcc28:	inc	left
000591:0x001bcc30:	icall	
000591:0x001bcc40:	icall	
000592:0x001bcc50:	move	@m00, right
000592:0x001bcc60:	dec	right
000592:0x001bcc68:	movefm	@c00, temp
000592:0x001bcc78:	icall	
000592:0x001bcc88:	release	temp
000592:0x001bcc90:	jump	0x1bcbe0
000592:0x001bcc98:	rts
array<PlayerIdentity>::MoveIndex()
000612:0x001bccf0:	ncalli	array<PlayerIdentity>.Count()
000612:0x001bccf8:	move	count, #return
000613:0x001bcd08:	move	new_index, curr_index
000615:0x001bcd18:	cmpi	move_number, _i0
000615:0x001bcd28:	ble	0x1bcd50
000617:0x001bcd30:	addi	@m00, curr_index, move_number
000617:0x001bcd40:	move	new_index, @m00
000620:0x001bcd50:	cmpi	move_number, _i0
000620:0x001bcd60:	bge	0x1bce08
000622:0x001bcd68:	subi	@m00, curr_index, move_number
000622:0x001bcd78:	move	new_index, @m00
000624:0x001bcd88:	cmpi	new_index, _i0
000624:0x001bcd98:	bge	0x1bce08
000626:0x001bcda0:	subi	@m01, _i0, count
000626:0x001bcdb0:	cmpi	new_index, @m01
000626:0x001bcdc0:	bgt	0x1bcde8
000628:0x001bcdc8:	modi	@m00, new_index, count
000628:0x001bcdd8:	move	new_index, @m00
000631:0x001bcde8:	addi	@m00, new_index, count
000631:0x001bcdf8:	move	new_index, @m00
000635:0x001bce08:	cmpi	new_index, count
000635:0x001bce18:	blt	0x1bce40
000637:0x001bce20:	modi	@m00, new_index, count
000637:0x001bce30:	move	new_index, @m00
000641:0x001bce40:	move	#return, new_index
000641:0x001bce50:	rts
000641:0x001bce58:	rts
array<PlayerIdentity>::ShuffleArray()
000646:0x001bce88:	imove	i, 0x000000
000646:0x001bce98:	jump	0x1bceb8
000646:0x001bcea0:	move	@m00, i
000646:0x001bceb0:	inc	i
000646:0x001bceb8:	ncalli	array<PlayerIdentity>.Count()
000646:0x001bcec0:	cmpi	i, #return
000646:0x001bced0:	bge	0x1bcf08
000648:0x001bced8:	call	
000648:0x001bcee8:	call	
000648:0x001bcf00:	jump	0x1bcea0
000648:0x001bcf08:	rts
array<PlayerIdentity>::DifferentAtPosition()
000666:0x001bcf38:	ncalli	array<PlayerIdentity>.Count()
000666:0x001bcf40:	move	@m00, #return
000666:0x001bcf50:	push	#return
000666:0x001bcf58:	ncalli	array<PlayerIdentity>.Count()
000666:0x001bcf60:	move	@m02, #return
000666:0x001bcf70:	pop	#return
000666:0x001bcf78:	cmpi	@m00, @m02
000666:0x001bcf88:	beq	0x1bcfb8
000668:0x001bcf90:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001bcfa0:	imove	#return, 0xffffffff
000669:0x001bcfb0:	rts
000672:0x001bcfb8:	imove	i, 0x000000
000672:0x001bcfc8:	jump	0x1bcfd8
000672:0x001bcfd0:	inc	i
000672:0x001bcfd8:	ncalli	array<PlayerIdentity>.Count()
000672:0x001bcfe0:	cmpi	i, #return
000672:0x001bcff0:	bge	0x1bd080
000674:0x001bcff8:	icall	
000674:0x001bd008:	movec	@c00, #return
000674:0x001bd018:	pushc	#return
000674:0x001bd020:	icall	
000674:0x001bd030:	movec	@c02, #return
000674:0x001bd040:	popc	#return
000674:0x001bd048:	cmpc	@c00, @c02
000674:0x001bd058:	beq	0x1bd078
000676:0x001bd060:	move	#return, i
000676:0x001bd070:	rts
000676:0x001bd078:	jump	0x1bcfd0
000680:0x001bd080:	imove	#return, 0xffffffff
000680:0x001bd090:	rts
000680:0x001bd098:	rts
array<Param3<string,bool,bool>>::InsertAll()
000427:0x001bddf8:	imove	i, 0x000000
000427:0x001bde08:	jump	0x1bde28
000427:0x001bde10:	move	@m00, i
000427:0x001bde20:	inc	i
000427:0x001bde28:	ncalli	array<Param3<string,bool,bool>>.Count()
000427:0x001bde30:	cmpi	i, #return
000427:0x001bde40:	bge	0x1bde70
000429:0x001bde48:	icall	
000429:0x001bde58:	icall	
000429:0x001bde68:	jump	0x1bde10
000429:0x001bde70:	rts
array<Param3<string,bool,bool>>::RemoveItem()
000479:0x001bdea0:	movefm	@c00, value
000479:0x001bdeb0:	icall	
000479:0x001bdec0:	move	remove_index, #return
000481:0x001bded0:	cmpi	remove_index, _i0
000481:0x001bdee0:	blt	0x1bdef8
000483:0x001bdee8:	ncalli	array<Param3<string,bool,bool>>.RemoveOrdered(remove_index)
000483:0x001bdef8:	rts
array<Param3<string,bool,bool>>::RemoveItemUnOrdered()
000489:0x001bdf28:	movefm	@c00, value
000489:0x001bdf38:	icall	
000489:0x001bdf48:	move	remove_index, #return
000491:0x001bdf58:	cmpi	remove_index, _i0
000491:0x001bdf68:	blt	0x1bdf80
000493:0x001bdf70:	ncalli	array<Param3<string,bool,bool>>.Remove(remove_index)
000493:0x001bdf80:	rts
array<Param3<string,bool,bool>>::IsValidIndex()
000499:0x001bdf88:	cmpi	index, _i-1
000499:0x001bdf98:	ble	0x1bdfd8
000499:0x001bdfa0:	ncalli	array<Param3<string,bool,bool>>.Count()
000499:0x001bdfa8:	cmpi	index, #return
000499:0x001bdfb8:	bge	0x1bdfd8
000499:0x001bdfc0:	imove	#return, 0x000001
000499:0x001bdfd0:	jump	0x1bdfe8
000499:0x001bdfd8:	imove	#return, 0x000000
000499:0x001bdfe8:	rts
000499:0x001bdff0:	rts
array<Param3<string,bool,bool>>::Debug()
000525:0x001be048:	ncalli	array<Param3<string,bool,bool>>.Count()
000525:0x001be050:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001be080:	icall	Print(#return)
000526:0x001be090:	imove	i, 0x000000
000526:0x001be0a0:	jump	0x1be0c0
000526:0x001be0a8:	move	@m00, i
000526:0x001be0b8:	inc	i
000526:0x001be0c0:	ncalli	array<Param3<string,bool,bool>>.Count()
000526:0x001be0c8:	cmpi	i, #return
000526:0x001be0d8:	bge	0x1be150
000528:0x001be0e0:	icall	
000528:0x001be0f0:	movetm	item, #return
000529:0x001be100:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001be130:	icall	Print(#return)
000529:0x001be140:	release	item
000529:0x001be148:	jump	0x1be0a8
000529:0x001be150:	rts
array<Param3<string,bool,bool>>::GetRandomIndex()
000544:0x001be158:	ncalli	array<Param3<string,bool,bool>>.Count()
000544:0x001be160:	move	@m00, #return
000544:0x001be170:	cmpi	@m00, _i0
000544:0x001be180:	ble	0x1be1b8
000546:0x001be188:	ncalli	array<Param3<string,bool,bool>>.Count()
000546:0x001be190:	icall	RandomInt(_i0, #return)
000546:0x001be1a0:	move	#return, #return
000546:0x001be1b0:	rts
000549:0x001be1b8:	imove	#return, 0xffffffff
000549:0x001be1c8:	rts
000549:0x001be1d0:	rts
array<Param3<string,bool,bool>>::GetRandomElement()
000563:0x001be1d8:	call	
000563:0x001be1e8:	icall	
000563:0x001be1f8:	movetm	#return, #return
000563:0x001be208:	rts
000563:0x001be210:	rts
array<Param3<string,bool,bool>>::SwapItems()
000568:0x001be240:	icall	
000568:0x001be250:	movetm	item1, #return
000569:0x001be260:	icall	
000569:0x001be270:	icall	
000570:0x001be280:	movefm	@c00, item1
000570:0x001be290:	icall	
000570:0x001be2a0:	release	item1
000570:0x001be2a8:	rts
array<Param3<string,bool,bool>>::InsertArray()
000575:0x001be300:	imove	i, 0x000000
000575:0x001be310:	jump	0x1be330
000575:0x001be318:	move	@m00, i
000575:0x001be328:	inc	i
000575:0x001be330:	ncalli	array<Param3<string,bool,bool>>.Count()
000575:0x001be338:	cmpi	i, #return
000575:0x001be348:	bge	0x1be3a0
000577:0x001be350:	icall	
000577:0x001be360:	movetm	item, #return
000578:0x001be370:	movefm	@c00, item
000578:0x001be380:	icall	
000578:0x001be390:	release	item
000578:0x001be398:	jump	0x1be318
000578:0x001be3a0:	rts
array<Param3<string,bool,bool>>::Invert()
000584:0x001be420:	imove	left, 0x000000
000585:0x001be430:	ncalli	array<Param3<string,bool,bool>>.Count()
000585:0x001be438:	subi	right, #return, _i1
000586:0x001be448:	cmpi	right, _i0
000586:0x001be458:	ble	0x1be518
000588:0x001be460:	cmpi	left, right
000588:0x001be470:	bge	0x1be518
000590:0x001be478:	icall	
000590:0x001be488:	movetm	temp, #return
000591:0x001be498:	move	@m00, left
000591:0x001be4a8:	inc	left
000591:0x001be4b0:	icall	
000591:0x001be4c0:	icall	
000592:0x001be4d0:	move	@m00, right
000592:0x001be4e0:	dec	right
000592:0x001be4e8:	movefm	@c00, temp
000592:0x001be4f8:	icall	
000592:0x001be508:	release	temp
000592:0x001be510:	jump	0x1be460
000592:0x001be518:	rts
array<Param3<string,bool,bool>>::MoveIndex()
000612:0x001be570:	ncalli	array<Param3<string,bool,bool>>.Count()
000612:0x001be578:	move	count, #return
000613:0x001be588:	move	new_index, curr_index
000615:0x001be598:	cmpi	move_number, _i0
000615:0x001be5a8:	ble	0x1be5d0
000617:0x001be5b0:	addi	@m00, curr_index, move_number
000617:0x001be5c0:	move	new_index, @m00
000620:0x001be5d0:	cmpi	move_number, _i0
000620:0x001be5e0:	bge	0x1be688
000622:0x001be5e8:	subi	@m00, curr_index, move_number
000622:0x001be5f8:	move	new_index, @m00
000624:0x001be608:	cmpi	new_index, _i0
000624:0x001be618:	bge	0x1be688
000626:0x001be620:	subi	@m01, _i0, count
000626:0x001be630:	cmpi	new_index, @m01
000626:0x001be640:	bgt	0x1be668
000628:0x001be648:	modi	@m00, new_index, count
000628:0x001be658:	move	new_index, @m00
000631:0x001be668:	addi	@m00, new_index, count
000631:0x001be678:	move	new_index, @m00
000635:0x001be688:	cmpi	new_index, count
000635:0x001be698:	blt	0x1be6c0
000637:0x001be6a0:	modi	@m00, new_index, count
000637:0x001be6b0:	move	new_index, @m00
000641:0x001be6c0:	move	#return, new_index
000641:0x001be6d0:	rts
000641:0x001be6d8:	rts
array<Param3<string,bool,bool>>::ShuffleArray()
000646:0x001be708:	imove	i, 0x000000
000646:0x001be718:	jump	0x1be738
000646:0x001be720:	move	@m00, i
000646:0x001be730:	inc	i
000646:0x001be738:	ncalli	array<Param3<string,bool,bool>>.Count()
000646:0x001be740:	cmpi	i, #return
000646:0x001be750:	bge	0x1be788
000648:0x001be758:	call	
000648:0x001be768:	call	
000648:0x001be780:	jump	0x1be720
000648:0x001be788:	rts
array<Param3<string,bool,bool>>::DifferentAtPosition()
000666:0x001be7b8:	ncalli	array<Param3<string,bool,bool>>.Count()
000666:0x001be7c0:	move	@m00, #return
000666:0x001be7d0:	push	#return
000666:0x001be7d8:	ncalli	array<Param3<string,bool,bool>>.Count()
000666:0x001be7e0:	move	@m02, #return
000666:0x001be7f0:	pop	#return
000666:0x001be7f8:	cmpi	@m00, @m02
000666:0x001be808:	beq	0x1be838
000668:0x001be810:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001be820:	imove	#return, 0xffffffff
000669:0x001be830:	rts
000672:0x001be838:	imove	i, 0x000000
000672:0x001be848:	jump	0x1be858
000672:0x001be850:	inc	i
000672:0x001be858:	ncalli	array<Param3<string,bool,bool>>.Count()
000672:0x001be860:	cmpi	i, #return
000672:0x001be870:	bge	0x1be900
000674:0x001be878:	icall	
000674:0x001be888:	movec	@c00, #return
000674:0x001be898:	pushc	#return
000674:0x001be8a0:	icall	
000674:0x001be8b0:	movec	@c02, #return
000674:0x001be8c0:	popc	#return
000674:0x001be8c8:	cmpc	@c00, @c02
000674:0x001be8d8:	beq	0x1be8f8
000676:0x001be8e0:	move	#return, i
000676:0x001be8f0:	rts
000676:0x001be8f8:	jump	0x1be850
000680:0x001be900:	imove	#return, 0xffffffff
000680:0x001be910:	rts
000680:0x001be918:	rts
map<int,Param3<string,bool,bool>>::GetKeyArray()
000885:0x001bec18:	new	keys, array<int>
000886:0x001bec38:	imove	i, 0x000000
000886:0x001bec48:	jump	0x1bec68
000886:0x001bec50:	move	@m00, i
000886:0x001bec60:	inc	i
000886:0x001bec68:	ncalli	map<int,Param3<string,bool,bool>>.Count()
000886:0x001bec70:	cmpi	i, #return
000886:0x001bec80:	bge	0x1becb0
000888:0x001bec88:	icall	
000888:0x001bec98:	icall	
000888:0x001beca8:	jump	0x1bec50
000890:0x001becb0:	movem	#return, keys
000890:0x001becc0:	release	keys
000890:0x001becc8:	rts
000890:0x001becd0:	release	keys
000890:0x001becd8:	rts
map<int,Param3<string,bool,bool>>::GetValueArray()
000895:0x001bed30:	new	elements, array<Param3<string,bool,bool>>
000896:0x001bed50:	imove	i, 0x000000
000896:0x001bed60:	jump	0x1bed80
000896:0x001bed68:	move	@m00, i
000896:0x001bed78:	inc	i
000896:0x001bed80:	ncalli	map<int,Param3<string,bool,bool>>.Count()
000896:0x001bed88:	cmpi	i, #return
000896:0x001bed98:	bge	0x1bedc8
000898:0x001beda0:	icall	
000898:0x001bedb0:	icall	
000898:0x001bedc0:	jump	0x1bed68
000900:0x001bedc8:	movem	#return, elements
000900:0x001bedd8:	release	elements
000900:0x001bede0:	rts
000900:0x001bede8:	release	elements
000900:0x001bedf0:	rts
map<int,Param3<string,bool,bool>>::ReplaceKey()
000905:0x001bedf8:	icall	
000905:0x001bee08:	cmpi	#return, _i0
000905:0x001bee18:	beq	0x1bee68
000907:0x001bee20:	icall	
000907:0x001bee30:	icall	
000908:0x001bee40:	icall	
000909:0x001bee50:	imove	#return, 0x000001
000909:0x001bee60:	rts
000911:0x001bee68:	imove	#return, 0x000000
000911:0x001bee78:	rts
000911:0x001bee80:	rts
map<int,Param3<string,bool,bool>>::GetKeyByValue()
000917:0x001beed8:	imove	i, 0x000000
000917:0x001beee8:	jump	0x1bef08
000917:0x001beef0:	move	@m00, i
000917:0x001bef00:	inc	i
000917:0x001bef08:	ncalli	map<int,Param3<string,bool,bool>>.Count()
000917:0x001bef10:	cmpi	i, #return
000917:0x001bef20:	bge	0x1bef90
000919:0x001bef28:	icall	
000919:0x001bef38:	movec	@c00, #return
000919:0x001bef48:	cmpmc	@c00, value
000919:0x001bef58:	bne	0x1bef88
000921:0x001bef60:	icall	
000921:0x001bef70:	move	ret, #return
000922:0x001bef80:	jump	0x1bef90
000922:0x001bef88:	jump	0x1beef0
000926:0x001bef90:	move	#return, ret
000926:0x001befa0:	rts
000926:0x001befa8:	rts
map<int,Param3<string,bool,bool>>::GetKeyByValueChecked()
000931:0x001befd8:	imove	i, 0x000000
000931:0x001befe8:	jump	0x1bf008
000931:0x001beff0:	move	@m00, i
000931:0x001bf000:	inc	i
000931:0x001bf008:	ncalli	map<int,Param3<string,bool,bool>>.Count()
000931:0x001bf010:	cmpi	i, #return
000931:0x001bf020:	bge	0x1bf0b0
000933:0x001bf028:	icall	
000933:0x001bf038:	movec	@c00, #return
000933:0x001bf048:	cmpmc	@c00, value
000933:0x001bf058:	bne	0x1bf0a8
000935:0x001bf060:	icall	
000935:0x001bf070:	move	key, #return
000936:0x001bf080:	imove	#return, 0x000001
000936:0x001bf090:	move	key, key
000936:0x001bf0a0:	rts
000936:0x001bf0a8:	jump	0x1beff0
000939:0x001bf0b0:	imove	#return, 0x000000
000939:0x001bf0c0:	move	key, key
000939:0x001bf0d0:	rts
000939:0x001bf0d8:	move	key, key
000939:0x001bf0e8:	rts
map<int,@Param3<string,bool,bool>>::GetKeyArray()
000885:0x001bf438:	new	keys, array<int>
000886:0x001bf458:	imove	i, 0x000000
000886:0x001bf468:	jump	0x1bf488
000886:0x001bf470:	move	@m00, i
000886:0x001bf480:	inc	i
000886:0x001bf488:	ncalli	map<int,@Param3<string,bool,bool>>.Count()
000886:0x001bf490:	cmpi	i, #return
000886:0x001bf4a0:	bge	0x1bf4d0
000888:0x001bf4a8:	icall	
000888:0x001bf4b8:	icall	
000888:0x001bf4c8:	jump	0x1bf470
000890:0x001bf4d0:	movem	#return, keys
000890:0x001bf4e0:	release	keys
000890:0x001bf4e8:	rts
000890:0x001bf4f0:	release	keys
000890:0x001bf4f8:	rts
map<int,@Param3<string,bool,bool>>::GetValueArray()
000895:0x001bf550:	new	elements, array<Param3<string,bool,bool>>
000896:0x001bf570:	imove	i, 0x000000
000896:0x001bf580:	jump	0x1bf5a0
000896:0x001bf588:	move	@m00, i
000896:0x001bf598:	inc	i
000896:0x001bf5a0:	ncalli	map<int,@Param3<string,bool,bool>>.Count()
000896:0x001bf5a8:	cmpi	i, #return
000896:0x001bf5b8:	bge	0x1bf5e8
000898:0x001bf5c0:	icall	
000898:0x001bf5d0:	icall	
000898:0x001bf5e0:	jump	0x1bf588
000900:0x001bf5e8:	movem	#return, elements
000900:0x001bf5f8:	release	elements
000900:0x001bf600:	rts
000900:0x001bf608:	release	elements
000900:0x001bf610:	rts
map<int,@Param3<string,bool,bool>>::ReplaceKey()
000905:0x001bf618:	icall	
000905:0x001bf628:	cmpi	#return, _i0
000905:0x001bf638:	beq	0x1bf688
000907:0x001bf640:	icall	
000907:0x001bf650:	icall	
000908:0x001bf660:	icall	
000909:0x001bf670:	imove	#return, 0x000001
000909:0x001bf680:	rts
000911:0x001bf688:	imove	#return, 0x000000
000911:0x001bf698:	rts
000911:0x001bf6a0:	rts
map<int,@Param3<string,bool,bool>>::GetKeyByValue()
000917:0x001bf6f8:	imove	i, 0x000000
000917:0x001bf708:	jump	0x1bf728
000917:0x001bf710:	move	@m00, i
000917:0x001bf720:	inc	i
000917:0x001bf728:	ncalli	map<int,@Param3<string,bool,bool>>.Count()
000917:0x001bf730:	cmpi	i, #return
000917:0x001bf740:	bge	0x1bf7b0
000919:0x001bf748:	icall	
000919:0x001bf758:	movec	@c00, #return
000919:0x001bf768:	cmpmc	@c00, value
000919:0x001bf778:	bne	0x1bf7a8
000921:0x001bf780:	icall	
000921:0x001bf790:	move	ret, #return
000922:0x001bf7a0:	jump	0x1bf7b0
000922:0x001bf7a8:	jump	0x1bf710
000926:0x001bf7b0:	move	#return, ret
000926:0x001bf7c0:	rts
000926:0x001bf7c8:	rts
map<int,@Param3<string,bool,bool>>::GetKeyByValueChecked()
000931:0x001bf7f8:	imove	i, 0x000000
000931:0x001bf808:	jump	0x1bf828
000931:0x001bf810:	move	@m00, i
000931:0x001bf820:	inc	i
000931:0x001bf828:	ncalli	map<int,@Param3<string,bool,bool>>.Count()
000931:0x001bf830:	cmpi	i, #return
000931:0x001bf840:	bge	0x1bf8d0
000933:0x001bf848:	icall	
000933:0x001bf858:	movec	@c00, #return
000933:0x001bf868:	cmpmc	@c00, value
000933:0x001bf878:	bne	0x1bf8c8
000935:0x001bf880:	icall	
000935:0x001bf890:	move	key, #return
000936:0x001bf8a0:	imove	#return, 0x000001
000936:0x001bf8b0:	move	key, key
000936:0x001bf8c0:	rts
000936:0x001bf8c8:	jump	0x1bf810
000939:0x001bf8d0:	imove	#return, 0x000000
000939:0x001bf8e0:	move	key, key
000939:0x001bf8f0:	rts
000939:0x001bf8f8:	move	key, key
000939:0x001bf908:	rts
map<NotificationRuntimeData,Widget>::GetKeyArray()
000885:0x001bff78:	new	keys, array<NotificationRuntimeData>
000886:0x001bff98:	imove	i, 0x000000
000886:0x001bffa8:	jump	0x1bffc8
000886:0x001bffb0:	move	@m00, i
000886:0x001bffc0:	inc	i
000886:0x001bffc8:	ncalli	map<NotificationRuntimeData,Widget>.Count()
000886:0x001bffd0:	cmpi	i, #return
000886:0x001bffe0:	bge	0x1c0010
000888:0x001bffe8:	icall	
000888:0x001bfff8:	icall	
000888:0x001c0008:	jump	0x1bffb0
000890:0x001c0010:	movem	#return, keys
000890:0x001c0020:	release	keys
000890:0x001c0028:	rts
000890:0x001c0030:	release	keys
000890:0x001c0038:	rts
map<NotificationRuntimeData,Widget>::GetValueArray()
000895:0x001c0090:	new	elements, array<Widget>
000896:0x001c00b0:	imove	i, 0x000000
000896:0x001c00c0:	jump	0x1c00e0
000896:0x001c00c8:	move	@m00, i
000896:0x001c00d8:	inc	i
000896:0x001c00e0:	ncalli	map<NotificationRuntimeData,Widget>.Count()
000896:0x001c00e8:	cmpi	i, #return
000896:0x001c00f8:	bge	0x1c0128
000898:0x001c0100:	icall	
000898:0x001c0110:	icall	
000898:0x001c0120:	jump	0x1c00c8
000900:0x001c0128:	movem	#return, elements
000900:0x001c0138:	release	elements
000900:0x001c0140:	rts
000900:0x001c0148:	release	elements
000900:0x001c0150:	rts
map<NotificationRuntimeData,Widget>::ReplaceKey()
000905:0x001c0158:	movefm	@c00, old_key
000905:0x001c0168:	icall	
000905:0x001c0178:	cmpi	#return, _i0
000905:0x001c0188:	beq	0x1c0208
000907:0x001c0190:	movefm	@c00, new_key
000907:0x001c01a0:	movefm	@c01, old_key
000907:0x001c01b0:	icall	
000907:0x001c01c0:	icall	
000908:0x001c01d0:	movefm	@c00, old_key
000908:0x001c01e0:	icall	
000909:0x001c01f0:	imove	#return, 0x000001
000909:0x001c0200:	rts
000911:0x001c0208:	imove	#return, 0x000000
000911:0x001c0218:	rts
000911:0x001c0220:	rts
map<NotificationRuntimeData,Widget>::GetKeyByValue()
000917:0x001c0278:	imove	i, 0x000000
000917:0x001c0288:	jump	0x1c02a8
000917:0x001c0290:	move	@m00, i
000917:0x001c02a0:	inc	i
000917:0x001c02a8:	ncalli	map<NotificationRuntimeData,Widget>.Count()
000917:0x001c02b0:	cmpi	i, #return
000917:0x001c02c0:	bge	0x1c0330
000919:0x001c02c8:	icall	
000919:0x001c02d8:	movec	@c00, #return
000919:0x001c02e8:	cmpmc	@c00, value
000919:0x001c02f8:	bne	0x1c0328
000921:0x001c0300:	icall	
000921:0x001c0310:	movetm	ret, #return
000922:0x001c0320:	jump	0x1c0330
000922:0x001c0328:	jump	0x1c0290
000926:0x001c0330:	movem	#return, ret
000926:0x001c0340:	release	ret
000926:0x001c0348:	rts
000926:0x001c0350:	release	ret
000926:0x001c0358:	rts
map<NotificationRuntimeData,Widget>::GetKeyByValueChecked()
000931:0x001c0388:	imove	i, 0x000000
000931:0x001c0398:	jump	0x1c03b8
000931:0x001c03a0:	move	@m00, i
000931:0x001c03b0:	inc	i
000931:0x001c03b8:	ncalli	map<NotificationRuntimeData,Widget>.Count()
000931:0x001c03c0:	cmpi	i, #return
000931:0x001c03d0:	bge	0x1c0460
000933:0x001c03d8:	icall	
000933:0x001c03e8:	movec	@c00, #return
000933:0x001c03f8:	cmpmc	@c00, value
000933:0x001c0408:	bne	0x1c0458
000935:0x001c0410:	icall	
000935:0x001c0420:	movetm	key, #return
000936:0x001c0430:	imove	#return, 0x000001
000936:0x001c0440:	movem	key, key
000936:0x001c0450:	rts
000936:0x001c0458:	jump	0x1c03a0
000939:0x001c0460:	imove	#return, 0x000000
000939:0x001c0470:	movem	key, key
000939:0x001c0480:	rts
000939:0x001c0488:	movem	key, key
000939:0x001c0498:	rts
map<string,Widget>::GetKeyArray()
000885:0x001c0b08:	new	keys, array<string>
000886:0x001c0b28:	imove	i, 0x000000
000886:0x001c0b38:	jump	0x1c0b58
000886:0x001c0b40:	move	@m00, i
000886:0x001c0b50:	inc	i
000886:0x001c0b58:	ncalli	map<string,Widget>.Count()
000886:0x001c0b60:	cmpi	i, #return
000886:0x001c0b70:	bge	0x1c0ba0
000888:0x001c0b78:	icall	
000888:0x001c0b88:	icall	
000888:0x001c0b98:	jump	0x1c0b40
000890:0x001c0ba0:	movem	#return, keys
000890:0x001c0bb0:	release	keys
000890:0x001c0bb8:	rts
000890:0x001c0bc0:	release	keys
000890:0x001c0bc8:	rts
map<string,Widget>::GetValueArray()
000895:0x001c0c20:	new	elements, array<Widget>
000896:0x001c0c40:	imove	i, 0x000000
000896:0x001c0c50:	jump	0x1c0c70
000896:0x001c0c58:	move	@m00, i
000896:0x001c0c68:	inc	i
000896:0x001c0c70:	ncalli	map<string,Widget>.Count()
000896:0x001c0c78:	cmpi	i, #return
000896:0x001c0c88:	bge	0x1c0cb8
000898:0x001c0c90:	icall	
000898:0x001c0ca0:	icall	
000898:0x001c0cb0:	jump	0x1c0c58
000900:0x001c0cb8:	movem	#return, elements
000900:0x001c0cc8:	release	elements
000900:0x001c0cd0:	rts
000900:0x001c0cd8:	release	elements
000900:0x001c0ce0:	rts
map<string,Widget>::ReplaceKey()
000905:0x001c0ce8:	icall	
000905:0x001c0cf8:	cmpi	#return, _i0
000905:0x001c0d08:	beq	0x1c0d58
000907:0x001c0d10:	icall	
000907:0x001c0d20:	icall	
000908:0x001c0d30:	icall	
000909:0x001c0d40:	imove	#return, 0x000001
000909:0x001c0d50:	rts
000911:0x001c0d58:	imove	#return, 0x000000
000911:0x001c0d68:	rts
000911:0x001c0d70:	rts
map<string,Widget>::GetKeyByValue()
000917:0x001c0dc8:	imove	i, 0x000000
000917:0x001c0dd8:	jump	0x1c0df8
000917:0x001c0de0:	move	@m00, i
000917:0x001c0df0:	inc	i
000917:0x001c0df8:	ncalli	map<string,Widget>.Count()
000917:0x001c0e00:	cmpi	i, #return
000917:0x001c0e10:	bge	0x1c0e80
000919:0x001c0e18:	icall	
000919:0x001c0e28:	movec	@c00, #return
000919:0x001c0e38:	cmpmc	@c00, value
000919:0x001c0e48:	bne	0x1c0e78
000921:0x001c0e50:	icall	
000921:0x001c0e60:	moves	ret, #return
000922:0x001c0e70:	jump	0x1c0e80
000922:0x001c0e78:	jump	0x1c0de0
000926:0x001c0e80:	moves	#return, ret
000926:0x001c0e90:	rts
000926:0x001c0e98:	rts
map<string,Widget>::GetKeyByValueChecked()
000931:0x001c0ec8:	imove	i, 0x000000
000931:0x001c0ed8:	jump	0x1c0ef8
000931:0x001c0ee0:	move	@m00, i
000931:0x001c0ef0:	inc	i
000931:0x001c0ef8:	ncalli	map<string,Widget>.Count()
000931:0x001c0f00:	cmpi	i, #return
000931:0x001c0f10:	bge	0x1c0fa0
000933:0x001c0f18:	icall	
000933:0x001c0f28:	movec	@c00, #return
000933:0x001c0f38:	cmpmc	@c00, value
000933:0x001c0f48:	bne	0x1c0f98
000935:0x001c0f50:	icall	
000935:0x001c0f60:	moves	key, #return
000936:0x001c0f70:	imove	#return, 0x000001
000936:0x001c0f80:	moves	key, key
000936:0x001c0f90:	rts
000936:0x001c0f98:	jump	0x1c0ee0
000939:0x001c0fa0:	imove	#return, 0x000000
000939:0x001c0fb0:	moves	key, key
000939:0x001c0fc0:	rts
000939:0x001c0fc8:	moves	key, key
000939:0x001c0fd8:	rts
array<UIScriptedWindow>::InsertAll()
000427:0x001c19a0:	imove	i, 0x000000
000427:0x001c19b0:	jump	0x1c19d0
000427:0x001c19b8:	move	@m00, i
000427:0x001c19c8:	inc	i
000427:0x001c19d0:	ncalli	array<UIScriptedWindow>.Count()
000427:0x001c19d8:	cmpi	i, #return
000427:0x001c19e8:	bge	0x1c1a18
000429:0x001c19f0:	icall	
000429:0x001c1a00:	icall	
000429:0x001c1a10:	jump	0x1c19b8
000429:0x001c1a18:	rts
array<UIScriptedWindow>::RemoveItem()
000479:0x001c1a48:	movefm	@c00, value
000479:0x001c1a58:	icall	
000479:0x001c1a68:	move	remove_index, #return
000481:0x001c1a78:	cmpi	remove_index, _i0
000481:0x001c1a88:	blt	0x1c1aa0
000483:0x001c1a90:	ncalli	array<UIScriptedWindow>.RemoveOrdered(remove_index)
000483:0x001c1aa0:	rts
array<UIScriptedWindow>::RemoveItemUnOrdered()
000489:0x001c1ad0:	movefm	@c00, value
000489:0x001c1ae0:	icall	
000489:0x001c1af0:	move	remove_index, #return
000491:0x001c1b00:	cmpi	remove_index, _i0
000491:0x001c1b10:	blt	0x1c1b28
000493:0x001c1b18:	ncalli	array<UIScriptedWindow>.Remove(remove_index)
000493:0x001c1b28:	rts
array<UIScriptedWindow>::IsValidIndex()
000499:0x001c1b30:	cmpi	index, _i-1
000499:0x001c1b40:	ble	0x1c1b80
000499:0x001c1b48:	ncalli	array<UIScriptedWindow>.Count()
000499:0x001c1b50:	cmpi	index, #return
000499:0x001c1b60:	bge	0x1c1b80
000499:0x001c1b68:	imove	#return, 0x000001
000499:0x001c1b78:	jump	0x1c1b90
000499:0x001c1b80:	imove	#return, 0x000000
000499:0x001c1b90:	rts
000499:0x001c1b98:	rts
array<UIScriptedWindow>::Debug()
000525:0x001c1bf0:	ncalli	array<UIScriptedWindow>.Count()
000525:0x001c1bf8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001c1c28:	icall	Print(#return)
000526:0x001c1c38:	imove	i, 0x000000
000526:0x001c1c48:	jump	0x1c1c68
000526:0x001c1c50:	move	@m00, i
000526:0x001c1c60:	inc	i
000526:0x001c1c68:	ncalli	array<UIScriptedWindow>.Count()
000526:0x001c1c70:	cmpi	i, #return
000526:0x001c1c80:	bge	0x1c1cf8
000528:0x001c1c88:	icall	
000528:0x001c1c98:	movetm	item, #return
000529:0x001c1ca8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001c1cd8:	icall	Print(#return)
000529:0x001c1ce8:	release	item
000529:0x001c1cf0:	jump	0x1c1c50
000529:0x001c1cf8:	rts
array<UIScriptedWindow>::GetRandomIndex()
000544:0x001c1d00:	ncalli	array<UIScriptedWindow>.Count()
000544:0x001c1d08:	move	@m00, #return
000544:0x001c1d18:	cmpi	@m00, _i0
000544:0x001c1d28:	ble	0x1c1d60
000546:0x001c1d30:	ncalli	array<UIScriptedWindow>.Count()
000546:0x001c1d38:	icall	RandomInt(_i0, #return)
000546:0x001c1d48:	move	#return, #return
000546:0x001c1d58:	rts
000549:0x001c1d60:	imove	#return, 0xffffffff
000549:0x001c1d70:	rts
000549:0x001c1d78:	rts
array<UIScriptedWindow>::GetRandomElement()
000563:0x001c1d80:	call	
000563:0x001c1d90:	icall	
000563:0x001c1da0:	movetm	#return, #return
000563:0x001c1db0:	rts
000563:0x001c1db8:	rts
array<UIScriptedWindow>::SwapItems()
000568:0x001c1de8:	icall	
000568:0x001c1df8:	movetm	item1, #return
000569:0x001c1e08:	icall	
000569:0x001c1e18:	icall	
000570:0x001c1e28:	movefm	@c00, item1
000570:0x001c1e38:	icall	
000570:0x001c1e48:	release	item1
000570:0x001c1e50:	rts
array<UIScriptedWindow>::InsertArray()
000575:0x001c1ea8:	imove	i, 0x000000
000575:0x001c1eb8:	jump	0x1c1ed8
000575:0x001c1ec0:	move	@m00, i
000575:0x001c1ed0:	inc	i
000575:0x001c1ed8:	ncalli	array<UIScriptedWindow>.Count()
000575:0x001c1ee0:	cmpi	i, #return
000575:0x001c1ef0:	bge	0x1c1f48
000577:0x001c1ef8:	icall	
000577:0x001c1f08:	movetm	item, #return
000578:0x001c1f18:	movefm	@c00, item
000578:0x001c1f28:	icall	
000578:0x001c1f38:	release	item
000578:0x001c1f40:	jump	0x1c1ec0
000578:0x001c1f48:	rts
array<UIScriptedWindow>::Invert()
000584:0x001c1fc8:	imove	left, 0x000000
000585:0x001c1fd8:	ncalli	array<UIScriptedWindow>.Count()
000585:0x001c1fe0:	subi	right, #return, _i1
000586:0x001c1ff0:	cmpi	right, _i0
000586:0x001c2000:	ble	0x1c20c0
000588:0x001c2008:	cmpi	left, right
000588:0x001c2018:	bge	0x1c20c0
000590:0x001c2020:	icall	
000590:0x001c2030:	movetm	temp, #return
000591:0x001c2040:	move	@m00, left
000591:0x001c2050:	inc	left
000591:0x001c2058:	icall	
000591:0x001c2068:	icall	
000592:0x001c2078:	move	@m00, right
000592:0x001c2088:	dec	right
000592:0x001c2090:	movefm	@c00, temp
000592:0x001c20a0:	icall	
000592:0x001c20b0:	release	temp
000592:0x001c20b8:	jump	0x1c2008
000592:0x001c20c0:	rts
array<UIScriptedWindow>::MoveIndex()
000612:0x001c2118:	ncalli	array<UIScriptedWindow>.Count()
000612:0x001c2120:	move	count, #return
000613:0x001c2130:	move	new_index, curr_index
000615:0x001c2140:	cmpi	move_number, _i0
000615:0x001c2150:	ble	0x1c2178
000617:0x001c2158:	addi	@m00, curr_index, move_number
000617:0x001c2168:	move	new_index, @m00
000620:0x001c2178:	cmpi	move_number, _i0
000620:0x001c2188:	bge	0x1c2230
000622:0x001c2190:	subi	@m00, curr_index, move_number
000622:0x001c21a0:	move	new_index, @m00
000624:0x001c21b0:	cmpi	new_index, _i0
000624:0x001c21c0:	bge	0x1c2230
000626:0x001c21c8:	subi	@m01, _i0, count
000626:0x001c21d8:	cmpi	new_index, @m01
000626:0x001c21e8:	bgt	0x1c2210
000628:0x001c21f0:	modi	@m00, new_index, count
000628:0x001c2200:	move	new_index, @m00
000631:0x001c2210:	addi	@m00, new_index, count
000631:0x001c2220:	move	new_index, @m00
000635:0x001c2230:	cmpi	new_index, count
000635:0x001c2240:	blt	0x1c2268
000637:0x001c2248:	modi	@m00, new_index, count
000637:0x001c2258:	move	new_index, @m00
000641:0x001c2268:	move	#return, new_index
000641:0x001c2278:	rts
000641:0x001c2280:	rts
array<UIScriptedWindow>::ShuffleArray()
000646:0x001c22b0:	imove	i, 0x000000
000646:0x001c22c0:	jump	0x1c22e0
000646:0x001c22c8:	move	@m00, i
000646:0x001c22d8:	inc	i
000646:0x001c22e0:	ncalli	array<UIScriptedWindow>.Count()
000646:0x001c22e8:	cmpi	i, #return
000646:0x001c22f8:	bge	0x1c2330
000648:0x001c2300:	call	
000648:0x001c2310:	call	
000648:0x001c2328:	jump	0x1c22c8
000648:0x001c2330:	rts
array<UIScriptedWindow>::DifferentAtPosition()
000666:0x001c2360:	ncalli	array<UIScriptedWindow>.Count()
000666:0x001c2368:	move	@m00, #return
000666:0x001c2378:	push	#return
000666:0x001c2380:	ncalli	array<UIScriptedWindow>.Count()
000666:0x001c2388:	move	@m02, #return
000666:0x001c2398:	pop	#return
000666:0x001c23a0:	cmpi	@m00, @m02
000666:0x001c23b0:	beq	0x1c23e0
000668:0x001c23b8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001c23c8:	imove	#return, 0xffffffff
000669:0x001c23d8:	rts
000672:0x001c23e0:	imove	i, 0x000000
000672:0x001c23f0:	jump	0x1c2400
000672:0x001c23f8:	inc	i
000672:0x001c2400:	ncalli	array<UIScriptedWindow>.Count()
000672:0x001c2408:	cmpi	i, #return
000672:0x001c2418:	bge	0x1c24a8
000674:0x001c2420:	icall	
000674:0x001c2430:	movec	@c00, #return
000674:0x001c2440:	pushc	#return
000674:0x001c2448:	icall	
000674:0x001c2458:	movec	@c02, #return
000674:0x001c2468:	popc	#return
000674:0x001c2470:	cmpc	@c00, @c02
000674:0x001c2480:	beq	0x1c24a0
000676:0x001c2488:	move	#return, i
000676:0x001c2498:	rts
000676:0x001c24a0:	jump	0x1c23f8
000680:0x001c24a8:	imove	#return, 0xffffffff
000680:0x001c24b8:	rts
000680:0x001c24c0:	rts
map<int,UIScriptedWindow>::GetKeyArray()
000885:0x001c27c0:	new	keys, array<int>
000886:0x001c27e0:	imove	i, 0x000000
000886:0x001c27f0:	jump	0x1c2810
000886:0x001c27f8:	move	@m00, i
000886:0x001c2808:	inc	i
000886:0x001c2810:	ncalli	map<int,UIScriptedWindow>.Count()
000886:0x001c2818:	cmpi	i, #return
000886:0x001c2828:	bge	0x1c2858
000888:0x001c2830:	icall	
000888:0x001c2840:	icall	
000888:0x001c2850:	jump	0x1c27f8
000890:0x001c2858:	movem	#return, keys
000890:0x001c2868:	release	keys
000890:0x001c2870:	rts
000890:0x001c2878:	release	keys
000890:0x001c2880:	rts
map<int,UIScriptedWindow>::GetValueArray()
000895:0x001c28d8:	new	elements, array<UIScriptedWindow>
000896:0x001c28f8:	imove	i, 0x000000
000896:0x001c2908:	jump	0x1c2928
000896:0x001c2910:	move	@m00, i
000896:0x001c2920:	inc	i
000896:0x001c2928:	ncalli	map<int,UIScriptedWindow>.Count()
000896:0x001c2930:	cmpi	i, #return
000896:0x001c2940:	bge	0x1c2970
000898:0x001c2948:	icall	
000898:0x001c2958:	icall	
000898:0x001c2968:	jump	0x1c2910
000900:0x001c2970:	movem	#return, elements
000900:0x001c2980:	release	elements
000900:0x001c2988:	rts
000900:0x001c2990:	release	elements
000900:0x001c2998:	rts
map<int,UIScriptedWindow>::ReplaceKey()
000905:0x001c29a0:	icall	
000905:0x001c29b0:	cmpi	#return, _i0
000905:0x001c29c0:	beq	0x1c2a10
000907:0x001c29c8:	icall	
000907:0x001c29d8:	icall	
000908:0x001c29e8:	icall	
000909:0x001c29f8:	imove	#return, 0x000001
000909:0x001c2a08:	rts
000911:0x001c2a10:	imove	#return, 0x000000
000911:0x001c2a20:	rts
000911:0x001c2a28:	rts
map<int,UIScriptedWindow>::GetKeyByValue()
000917:0x001c2a80:	imove	i, 0x000000
000917:0x001c2a90:	jump	0x1c2ab0
000917:0x001c2a98:	move	@m00, i
000917:0x001c2aa8:	inc	i
000917:0x001c2ab0:	ncalli	map<int,UIScriptedWindow>.Count()
000917:0x001c2ab8:	cmpi	i, #return
000917:0x001c2ac8:	bge	0x1c2b38
000919:0x001c2ad0:	icall	
000919:0x001c2ae0:	movec	@c00, #return
000919:0x001c2af0:	cmpmc	@c00, value
000919:0x001c2b00:	bne	0x1c2b30
000921:0x001c2b08:	icall	
000921:0x001c2b18:	move	ret, #return
000922:0x001c2b28:	jump	0x1c2b38
000922:0x001c2b30:	jump	0x1c2a98
000926:0x001c2b38:	move	#return, ret
000926:0x001c2b48:	rts
000926:0x001c2b50:	rts
map<int,UIScriptedWindow>::GetKeyByValueChecked()
000931:0x001c2b80:	imove	i, 0x000000
000931:0x001c2b90:	jump	0x1c2bb0
000931:0x001c2b98:	move	@m00, i
000931:0x001c2ba8:	inc	i
000931:0x001c2bb0:	ncalli	map<int,UIScriptedWindow>.Count()
000931:0x001c2bb8:	cmpi	i, #return
000931:0x001c2bc8:	bge	0x1c2c58
000933:0x001c2bd0:	icall	
000933:0x001c2be0:	movec	@c00, #return
000933:0x001c2bf0:	cmpmc	@c00, value
000933:0x001c2c00:	bne	0x1c2c50
000935:0x001c2c08:	icall	
000935:0x001c2c18:	move	key, #return
000936:0x001c2c28:	imove	#return, 0x000001
000936:0x001c2c38:	move	key, key
000936:0x001c2c48:	rts
000936:0x001c2c50:	jump	0x1c2b98
000939:0x001c2c58:	imove	#return, 0x000000
000939:0x001c2c68:	move	key, key
000939:0x001c2c78:	rts
000939:0x001c2c80:	move	key, key
000939:0x001c2c90:	rts
array<BehaviourGroupInfectedPackWaypointParams>::InsertAll()
000427:0x001c34e0:	imove	i, 0x000000
000427:0x001c34f0:	jump	0x1c3510
000427:0x001c34f8:	move	@m00, i
000427:0x001c3508:	inc	i
000427:0x001c3510:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000427:0x001c3518:	cmpi	i, #return
000427:0x001c3528:	bge	0x1c3558
000429:0x001c3530:	icall	
000429:0x001c3540:	icall	
000429:0x001c3550:	jump	0x1c34f8
000429:0x001c3558:	rts
array<BehaviourGroupInfectedPackWaypointParams>::RemoveItem()
000479:0x001c3588:	movefm	@c00, value
000479:0x001c3598:	icall	
000479:0x001c35a8:	move	remove_index, #return
000481:0x001c35b8:	cmpi	remove_index, _i0
000481:0x001c35c8:	blt	0x1c35e0
000483:0x001c35d0:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.RemoveOrdered(remove_index)
000483:0x001c35e0:	rts
array<BehaviourGroupInfectedPackWaypointParams>::RemoveItemUnOrdered()
000489:0x001c3610:	movefm	@c00, value
000489:0x001c3620:	icall	
000489:0x001c3630:	move	remove_index, #return
000491:0x001c3640:	cmpi	remove_index, _i0
000491:0x001c3650:	blt	0x1c3668
000493:0x001c3658:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Remove(remove_index)
000493:0x001c3668:	rts
array<BehaviourGroupInfectedPackWaypointParams>::IsValidIndex()
000499:0x001c3670:	cmpi	index, _i-1
000499:0x001c3680:	ble	0x1c36c0
000499:0x001c3688:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000499:0x001c3690:	cmpi	index, #return
000499:0x001c36a0:	bge	0x1c36c0
000499:0x001c36a8:	imove	#return, 0x000001
000499:0x001c36b8:	jump	0x1c36d0
000499:0x001c36c0:	imove	#return, 0x000000
000499:0x001c36d0:	rts
000499:0x001c36d8:	rts
array<BehaviourGroupInfectedPackWaypointParams>::Debug()
000525:0x001c3730:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000525:0x001c3738:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001c3768:	icall	Print(#return)
000526:0x001c3778:	imove	i, 0x000000
000526:0x001c3788:	jump	0x1c37a8
000526:0x001c3790:	move	@m00, i
000526:0x001c37a0:	inc	i
000526:0x001c37a8:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000526:0x001c37b0:	cmpi	i, #return
000526:0x001c37c0:	bge	0x1c3838
000528:0x001c37c8:	icall	
000528:0x001c37d8:	movetm	item, #return
000529:0x001c37e8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001c3818:	icall	Print(#return)
000529:0x001c3828:	release	item
000529:0x001c3830:	jump	0x1c3790
000529:0x001c3838:	rts
array<BehaviourGroupInfectedPackWaypointParams>::GetRandomIndex()
000544:0x001c3840:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000544:0x001c3848:	move	@m00, #return
000544:0x001c3858:	cmpi	@m00, _i0
000544:0x001c3868:	ble	0x1c38a0
000546:0x001c3870:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000546:0x001c3878:	icall	RandomInt(_i0, #return)
000546:0x001c3888:	move	#return, #return
000546:0x001c3898:	rts
000549:0x001c38a0:	imove	#return, 0xffffffff
000549:0x001c38b0:	rts
000549:0x001c38b8:	rts
array<BehaviourGroupInfectedPackWaypointParams>::GetRandomElement()
000563:0x001c38c0:	call	
000563:0x001c38d0:	icall	
000563:0x001c38e0:	movetm	#return, #return
000563:0x001c38f0:	rts
000563:0x001c38f8:	rts
array<BehaviourGroupInfectedPackWaypointParams>::SwapItems()
000568:0x001c3928:	icall	
000568:0x001c3938:	movetm	item1, #return
000569:0x001c3948:	icall	
000569:0x001c3958:	icall	
000570:0x001c3968:	movefm	@c00, item1
000570:0x001c3978:	icall	
000570:0x001c3988:	release	item1
000570:0x001c3990:	rts
array<BehaviourGroupInfectedPackWaypointParams>::InsertArray()
000575:0x001c39e8:	imove	i, 0x000000
000575:0x001c39f8:	jump	0x1c3a18
000575:0x001c3a00:	move	@m00, i
000575:0x001c3a10:	inc	i
000575:0x001c3a18:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000575:0x001c3a20:	cmpi	i, #return
000575:0x001c3a30:	bge	0x1c3a88
000577:0x001c3a38:	icall	
000577:0x001c3a48:	movetm	item, #return
000578:0x001c3a58:	movefm	@c00, item
000578:0x001c3a68:	icall	
000578:0x001c3a78:	release	item
000578:0x001c3a80:	jump	0x1c3a00
000578:0x001c3a88:	rts
array<BehaviourGroupInfectedPackWaypointParams>::Invert()
000584:0x001c3b08:	imove	left, 0x000000
000585:0x001c3b18:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000585:0x001c3b20:	subi	right, #return, _i1
000586:0x001c3b30:	cmpi	right, _i0
000586:0x001c3b40:	ble	0x1c3c00
000588:0x001c3b48:	cmpi	left, right
000588:0x001c3b58:	bge	0x1c3c00
000590:0x001c3b60:	icall	
000590:0x001c3b70:	movetm	temp, #return
000591:0x001c3b80:	move	@m00, left
000591:0x001c3b90:	inc	left
000591:0x001c3b98:	icall	
000591:0x001c3ba8:	icall	
000592:0x001c3bb8:	move	@m00, right
000592:0x001c3bc8:	dec	right
000592:0x001c3bd0:	movefm	@c00, temp
000592:0x001c3be0:	icall	
000592:0x001c3bf0:	release	temp
000592:0x001c3bf8:	jump	0x1c3b48
000592:0x001c3c00:	rts
array<BehaviourGroupInfectedPackWaypointParams>::MoveIndex()
000612:0x001c3c58:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000612:0x001c3c60:	move	count, #return
000613:0x001c3c70:	move	new_index, curr_index
000615:0x001c3c80:	cmpi	move_number, _i0
000615:0x001c3c90:	ble	0x1c3cb8
000617:0x001c3c98:	addi	@m00, curr_index, move_number
000617:0x001c3ca8:	move	new_index, @m00
000620:0x001c3cb8:	cmpi	move_number, _i0
000620:0x001c3cc8:	bge	0x1c3d70
000622:0x001c3cd0:	subi	@m00, curr_index, move_number
000622:0x001c3ce0:	move	new_index, @m00
000624:0x001c3cf0:	cmpi	new_index, _i0
000624:0x001c3d00:	bge	0x1c3d70
000626:0x001c3d08:	subi	@m01, _i0, count
000626:0x001c3d18:	cmpi	new_index, @m01
000626:0x001c3d28:	bgt	0x1c3d50
000628:0x001c3d30:	modi	@m00, new_index, count
000628:0x001c3d40:	move	new_index, @m00
000631:0x001c3d50:	addi	@m00, new_index, count
000631:0x001c3d60:	move	new_index, @m00
000635:0x001c3d70:	cmpi	new_index, count
000635:0x001c3d80:	blt	0x1c3da8
000637:0x001c3d88:	modi	@m00, new_index, count
000637:0x001c3d98:	move	new_index, @m00
000641:0x001c3da8:	move	#return, new_index
000641:0x001c3db8:	rts
000641:0x001c3dc0:	rts
array<BehaviourGroupInfectedPackWaypointParams>::ShuffleArray()
000646:0x001c3df0:	imove	i, 0x000000
000646:0x001c3e00:	jump	0x1c3e20
000646:0x001c3e08:	move	@m00, i
000646:0x001c3e18:	inc	i
000646:0x001c3e20:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000646:0x001c3e28:	cmpi	i, #return
000646:0x001c3e38:	bge	0x1c3e70
000648:0x001c3e40:	call	
000648:0x001c3e50:	call	
000648:0x001c3e68:	jump	0x1c3e08
000648:0x001c3e70:	rts
array<BehaviourGroupInfectedPackWaypointParams>::DifferentAtPosition()
000666:0x001c3ea0:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000666:0x001c3ea8:	move	@m00, #return
000666:0x001c3eb8:	push	#return
000666:0x001c3ec0:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000666:0x001c3ec8:	move	@m02, #return
000666:0x001c3ed8:	pop	#return
000666:0x001c3ee0:	cmpi	@m00, @m02
000666:0x001c3ef0:	beq	0x1c3f20
000668:0x001c3ef8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001c3f08:	imove	#return, 0xffffffff
000669:0x001c3f18:	rts
000672:0x001c3f20:	imove	i, 0x000000
000672:0x001c3f30:	jump	0x1c3f40
000672:0x001c3f38:	inc	i
000672:0x001c3f40:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000672:0x001c3f48:	cmpi	i, #return
000672:0x001c3f58:	bge	0x1c3fe8
000674:0x001c3f60:	icall	
000674:0x001c3f70:	movec	@c00, #return
000674:0x001c3f80:	pushc	#return
000674:0x001c3f88:	icall	
000674:0x001c3f98:	movec	@c02, #return
000674:0x001c3fa8:	popc	#return
000674:0x001c3fb0:	cmpc	@c00, @c02
000674:0x001c3fc0:	beq	0x1c3fe0
000676:0x001c3fc8:	move	#return, i
000676:0x001c3fd8:	rts
000676:0x001c3fe0:	jump	0x1c3f38
000680:0x001c3fe8:	imove	#return, 0xffffffff
000680:0x001c3ff8:	rts
000680:0x001c4000:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::InsertAll()
000427:0x001c4418:	imove	i, 0x000000
000427:0x001c4428:	jump	0x1c4448
000427:0x001c4430:	move	@m00, i
000427:0x001c4440:	inc	i
000427:0x001c4448:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000427:0x001c4450:	cmpi	i, #return
000427:0x001c4460:	bge	0x1c4490
000429:0x001c4468:	icall	
000429:0x001c4478:	icall	
000429:0x001c4488:	jump	0x1c4430
000429:0x001c4490:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::RemoveItem()
000479:0x001c44c0:	movefm	@c00, value
000479:0x001c44d0:	icall	
000479:0x001c44e0:	move	remove_index, #return
000481:0x001c44f0:	cmpi	remove_index, _i0
000481:0x001c4500:	blt	0x1c4518
000483:0x001c4508:	ncalli	array<@BehaviourGroupInfectedPackWaypointParams>.RemoveOrdered(remove_index)
000483:0x001c4518:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::RemoveItemUnOrdered()
000489:0x001c4548:	movefm	@c00, value
000489:0x001c4558:	icall	
000489:0x001c4568:	move	remove_index, #return
000491:0x001c4578:	cmpi	remove_index, _i0
000491:0x001c4588:	blt	0x1c45a0
000493:0x001c4590:	ncalli	array<@BehaviourGroupInfectedPackWaypointParams>.Remove(remove_index)
000493:0x001c45a0:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::IsValidIndex()
000499:0x001c45a8:	cmpi	index, _i-1
000499:0x001c45b8:	ble	0x1c45f8
000499:0x001c45c0:	ncalli	array<@BehaviourGroupInfectedPackWaypointParams>.Count()
000499:0x001c45c8:	cmpi	index, #return
000499:0x001c45d8:	bge	0x1c45f8
000499:0x001c45e0:	imove	#return, 0x000001
000499:0x001c45f0:	jump	0x1c4608
000499:0x001c45f8:	imove	#return, 0x000000
000499:0x001c4608:	rts
000499:0x001c4610:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::Debug()
000525:0x001c4668:	ncalli	array<@BehaviourGroupInfectedPackWaypointParams>.Count()
000525:0x001c4670:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001c46a0:	icall	Print(#return)
000526:0x001c46b0:	imove	i, 0x000000
000526:0x001c46c0:	jump	0x1c46e0
000526:0x001c46c8:	move	@m00, i
000526:0x001c46d8:	inc	i
000526:0x001c46e0:	ncalli	array<@BehaviourGroupInfectedPackWaypointParams>.Count()
000526:0x001c46e8:	cmpi	i, #return
000526:0x001c46f8:	bge	0x1c4770
000528:0x001c4700:	icall	
000528:0x001c4710:	movetm	item, #return
000529:0x001c4720:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001c4750:	icall	Print(#return)
000529:0x001c4760:	release	item
000529:0x001c4768:	jump	0x1c46c8
000529:0x001c4770:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::GetRandomIndex()
000544:0x001c4778:	ncalli	array<@BehaviourGroupInfectedPackWaypointParams>.Count()
000544:0x001c4780:	move	@m00, #return
000544:0x001c4790:	cmpi	@m00, _i0
000544:0x001c47a0:	ble	0x1c47d8
000546:0x001c47a8:	ncalli	array<@BehaviourGroupInfectedPackWaypointParams>.Count()
000546:0x001c47b0:	icall	RandomInt(_i0, #return)
000546:0x001c47c0:	move	#return, #return
000546:0x001c47d0:	rts
000549:0x001c47d8:	imove	#return, 0xffffffff
000549:0x001c47e8:	rts
000549:0x001c47f0:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::GetRandomElement()
000563:0x001c47f8:	call	
000563:0x001c4808:	icall	
000563:0x001c4818:	movetm	#return, #return
000563:0x001c4828:	rts
000563:0x001c4830:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::SwapItems()
000568:0x001c4860:	icall	
000568:0x001c4870:	movetm	item1, #return
000569:0x001c4880:	icall	
000569:0x001c4890:	icall	
000570:0x001c48a0:	movefm	@c00, item1
000570:0x001c48b0:	icall	
000570:0x001c48c0:	release	item1
000570:0x001c48c8:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::InsertArray()
000575:0x001c4920:	imove	i, 0x000000
000575:0x001c4930:	jump	0x1c4950
000575:0x001c4938:	move	@m00, i
000575:0x001c4948:	inc	i
000575:0x001c4950:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000575:0x001c4958:	cmpi	i, #return
000575:0x001c4968:	bge	0x1c49c0
000577:0x001c4970:	icall	
000577:0x001c4980:	movetm	item, #return
000578:0x001c4990:	movefm	@c00, item
000578:0x001c49a0:	icall	
000578:0x001c49b0:	release	item
000578:0x001c49b8:	jump	0x1c4938
000578:0x001c49c0:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::Invert()
000584:0x001c4a40:	imove	left, 0x000000
000585:0x001c4a50:	ncalli	array<@BehaviourGroupInfectedPackWaypointParams>.Count()
000585:0x001c4a58:	subi	right, #return, _i1
000586:0x001c4a68:	cmpi	right, _i0
000586:0x001c4a78:	ble	0x1c4b38
000588:0x001c4a80:	cmpi	left, right
000588:0x001c4a90:	bge	0x1c4b38
000590:0x001c4a98:	icall	
000590:0x001c4aa8:	movetm	temp, #return
000591:0x001c4ab8:	move	@m00, left
000591:0x001c4ac8:	inc	left
000591:0x001c4ad0:	icall	
000591:0x001c4ae0:	icall	
000592:0x001c4af0:	move	@m00, right
000592:0x001c4b00:	dec	right
000592:0x001c4b08:	movefm	@c00, temp
000592:0x001c4b18:	icall	
000592:0x001c4b28:	release	temp
000592:0x001c4b30:	jump	0x1c4a80
000592:0x001c4b38:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::MoveIndex()
000612:0x001c4b90:	ncalli	array<@BehaviourGroupInfectedPackWaypointParams>.Count()
000612:0x001c4b98:	move	count, #return
000613:0x001c4ba8:	move	new_index, curr_index
000615:0x001c4bb8:	cmpi	move_number, _i0
000615:0x001c4bc8:	ble	0x1c4bf0
000617:0x001c4bd0:	addi	@m00, curr_index, move_number
000617:0x001c4be0:	move	new_index, @m00
000620:0x001c4bf0:	cmpi	move_number, _i0
000620:0x001c4c00:	bge	0x1c4ca8
000622:0x001c4c08:	subi	@m00, curr_index, move_number
000622:0x001c4c18:	move	new_index, @m00
000624:0x001c4c28:	cmpi	new_index, _i0
000624:0x001c4c38:	bge	0x1c4ca8
000626:0x001c4c40:	subi	@m01, _i0, count
000626:0x001c4c50:	cmpi	new_index, @m01
000626:0x001c4c60:	bgt	0x1c4c88
000628:0x001c4c68:	modi	@m00, new_index, count
000628:0x001c4c78:	move	new_index, @m00
000631:0x001c4c88:	addi	@m00, new_index, count
000631:0x001c4c98:	move	new_index, @m00
000635:0x001c4ca8:	cmpi	new_index, count
000635:0x001c4cb8:	blt	0x1c4ce0
000637:0x001c4cc0:	modi	@m00, new_index, count
000637:0x001c4cd0:	move	new_index, @m00
000641:0x001c4ce0:	move	#return, new_index
000641:0x001c4cf0:	rts
000641:0x001c4cf8:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::ShuffleArray()
000646:0x001c4d28:	imove	i, 0x000000
000646:0x001c4d38:	jump	0x1c4d58
000646:0x001c4d40:	move	@m00, i
000646:0x001c4d50:	inc	i
000646:0x001c4d58:	ncalli	array<@BehaviourGroupInfectedPackWaypointParams>.Count()
000646:0x001c4d60:	cmpi	i, #return
000646:0x001c4d70:	bge	0x1c4da8
000648:0x001c4d78:	call	
000648:0x001c4d88:	call	
000648:0x001c4da0:	jump	0x1c4d40
000648:0x001c4da8:	rts
array<@BehaviourGroupInfectedPackWaypointParams>::DifferentAtPosition()
000666:0x001c4dd8:	ncalli	array<@BehaviourGroupInfectedPackWaypointParams>.Count()
000666:0x001c4de0:	move	@m00, #return
000666:0x001c4df0:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000666:0x001c4df8:	cmpi	@m00, #return
000666:0x001c4e08:	beq	0x1c4e38
000668:0x001c4e10:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001c4e20:	imove	#return, 0xffffffff
000669:0x001c4e30:	rts
000672:0x001c4e38:	imove	i, 0x000000
000672:0x001c4e48:	jump	0x1c4e58
000672:0x001c4e50:	inc	i
000672:0x001c4e58:	ncalli	array<BehaviourGroupInfectedPackWaypointParams>.Count()
000672:0x001c4e60:	cmpi	i, #return
000672:0x001c4e70:	bge	0x1c4ee0
000674:0x001c4e78:	icall	
000674:0x001c4e88:	movec	@c00, #return
000674:0x001c4e98:	icall	
000674:0x001c4ea8:	cmpc	@c00, #return
000674:0x001c4eb8:	beq	0x1c4ed8
000676:0x001c4ec0:	move	#return, i
000676:0x001c4ed0:	rts
000676:0x001c4ed8:	jump	0x1c4e50
000680:0x001c4ee0:	imove	#return, 0xffffffff
000680:0x001c4ef0:	rts
000680:0x001c4ef8:	rts
array<array<SoundObjectBuilder>>::InsertAll()
000427:0x001c5c60:	imove	i, 0x000000
000427:0x001c5c70:	jump	0x1c5c90
000427:0x001c5c78:	move	@m00, i
000427:0x001c5c88:	inc	i
000427:0x001c5c90:	ncalli	array<array<SoundObjectBuilder>>.Count()
000427:0x001c5c98:	cmpi	i, #return
000427:0x001c5ca8:	bge	0x1c5cd8
000429:0x001c5cb0:	icall	
000429:0x001c5cc0:	icall	
000429:0x001c5cd0:	jump	0x1c5c78
000429:0x001c5cd8:	rts
array<array<SoundObjectBuilder>>::RemoveItem()
000479:0x001c5d08:	movefm	@c00, value
000479:0x001c5d18:	icall	
000479:0x001c5d28:	move	remove_index, #return
000481:0x001c5d38:	cmpi	remove_index, _i0
000481:0x001c5d48:	blt	0x1c5d60
000483:0x001c5d50:	ncalli	array<array<SoundObjectBuilder>>.RemoveOrdered(remove_index)
000483:0x001c5d60:	rts
array<array<SoundObjectBuilder>>::RemoveItemUnOrdered()
000489:0x001c5d90:	movefm	@c00, value
000489:0x001c5da0:	icall	
000489:0x001c5db0:	move	remove_index, #return
000491:0x001c5dc0:	cmpi	remove_index, _i0
000491:0x001c5dd0:	blt	0x1c5de8
000493:0x001c5dd8:	ncalli	array<array<SoundObjectBuilder>>.Remove(remove_index)
000493:0x001c5de8:	rts
array<array<SoundObjectBuilder>>::IsValidIndex()
000499:0x001c5df0:	cmpi	index, _i-1
000499:0x001c5e00:	ble	0x1c5e40
000499:0x001c5e08:	ncalli	array<array<SoundObjectBuilder>>.Count()
000499:0x001c5e10:	cmpi	index, #return
000499:0x001c5e20:	bge	0x1c5e40
000499:0x001c5e28:	imove	#return, 0x000001
000499:0x001c5e38:	jump	0x1c5e50
000499:0x001c5e40:	imove	#return, 0x000000
000499:0x001c5e50:	rts
000499:0x001c5e58:	rts
array<array<SoundObjectBuilder>>::Debug()
000525:0x001c5eb0:	ncalli	array<array<SoundObjectBuilder>>.Count()
000525:0x001c5eb8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001c5ee8:	icall	Print(#return)
000526:0x001c5ef8:	imove	i, 0x000000
000526:0x001c5f08:	jump	0x1c5f28
000526:0x001c5f10:	move	@m00, i
000526:0x001c5f20:	inc	i
000526:0x001c5f28:	ncalli	array<array<SoundObjectBuilder>>.Count()
000526:0x001c5f30:	cmpi	i, #return
000526:0x001c5f40:	bge	0x1c5fb8
000528:0x001c5f48:	icall	
000528:0x001c5f58:	movetm	item, #return
000529:0x001c5f68:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001c5f98:	icall	Print(#return)
000529:0x001c5fa8:	release	item
000529:0x001c5fb0:	jump	0x1c5f10
000529:0x001c5fb8:	rts
array<array<SoundObjectBuilder>>::GetRandomIndex()
000544:0x001c5fc0:	ncalli	array<array<SoundObjectBuilder>>.Count()
000544:0x001c5fc8:	move	@m00, #return
000544:0x001c5fd8:	cmpi	@m00, _i0
000544:0x001c5fe8:	ble	0x1c6020
000546:0x001c5ff0:	ncalli	array<array<SoundObjectBuilder>>.Count()
000546:0x001c5ff8:	icall	RandomInt(_i0, #return)
000546:0x001c6008:	move	#return, #return
000546:0x001c6018:	rts
000549:0x001c6020:	imove	#return, 0xffffffff
000549:0x001c6030:	rts
000549:0x001c6038:	rts
array<array<SoundObjectBuilder>>::GetRandomElement()
000563:0x001c6040:	call	
000563:0x001c6050:	icall	
000563:0x001c6060:	movetm	#return, #return
000563:0x001c6070:	rts
000563:0x001c6078:	rts
array<array<SoundObjectBuilder>>::SwapItems()
000568:0x001c60a8:	icall	
000568:0x001c60b8:	movetm	item1, #return
000569:0x001c60c8:	icall	
000569:0x001c60d8:	icall	
000570:0x001c60e8:	movefm	@c00, item1
000570:0x001c60f8:	icall	
000570:0x001c6108:	release	item1
000570:0x001c6110:	rts
array<array<SoundObjectBuilder>>::InsertArray()
000575:0x001c6168:	imove	i, 0x000000
000575:0x001c6178:	jump	0x1c6198
000575:0x001c6180:	move	@m00, i
000575:0x001c6190:	inc	i
000575:0x001c6198:	ncalli	array<array<SoundObjectBuilder>>.Count()
000575:0x001c61a0:	cmpi	i, #return
000575:0x001c61b0:	bge	0x1c6208
000577:0x001c61b8:	icall	
000577:0x001c61c8:	movetm	item, #return
000578:0x001c61d8:	movefm	@c00, item
000578:0x001c61e8:	icall	
000578:0x001c61f8:	release	item
000578:0x001c6200:	jump	0x1c6180
000578:0x001c6208:	rts
array<array<SoundObjectBuilder>>::Invert()
000584:0x001c6288:	imove	left, 0x000000
000585:0x001c6298:	ncalli	array<array<SoundObjectBuilder>>.Count()
000585:0x001c62a0:	subi	right, #return, _i1
000586:0x001c62b0:	cmpi	right, _i0
000586:0x001c62c0:	ble	0x1c6380
000588:0x001c62c8:	cmpi	left, right
000588:0x001c62d8:	bge	0x1c6380
000590:0x001c62e0:	icall	
000590:0x001c62f0:	movetm	temp, #return
000591:0x001c6300:	move	@m00, left
000591:0x001c6310:	inc	left
000591:0x001c6318:	icall	
000591:0x001c6328:	icall	
000592:0x001c6338:	move	@m00, right
000592:0x001c6348:	dec	right
000592:0x001c6350:	movefm	@c00, temp
000592:0x001c6360:	icall	
000592:0x001c6370:	release	temp
000592:0x001c6378:	jump	0x1c62c8
000592:0x001c6380:	rts
array<array<SoundObjectBuilder>>::MoveIndex()
000612:0x001c63d8:	ncalli	array<array<SoundObjectBuilder>>.Count()
000612:0x001c63e0:	move	count, #return
000613:0x001c63f0:	move	new_index, curr_index
000615:0x001c6400:	cmpi	move_number, _i0
000615:0x001c6410:	ble	0x1c6438
000617:0x001c6418:	addi	@m00, curr_index, move_number
000617:0x001c6428:	move	new_index, @m00
000620:0x001c6438:	cmpi	move_number, _i0
000620:0x001c6448:	bge	0x1c64f0
000622:0x001c6450:	subi	@m00, curr_index, move_number
000622:0x001c6460:	move	new_index, @m00
000624:0x001c6470:	cmpi	new_index, _i0
000624:0x001c6480:	bge	0x1c64f0
000626:0x001c6488:	subi	@m01, _i0, count
000626:0x001c6498:	cmpi	new_index, @m01
000626:0x001c64a8:	bgt	0x1c64d0
000628:0x001c64b0:	modi	@m00, new_index, count
000628:0x001c64c0:	move	new_index, @m00
000631:0x001c64d0:	addi	@m00, new_index, count
000631:0x001c64e0:	move	new_index, @m00
000635:0x001c64f0:	cmpi	new_index, count
000635:0x001c6500:	blt	0x1c6528
000637:0x001c6508:	modi	@m00, new_index, count
000637:0x001c6518:	move	new_index, @m00
000641:0x001c6528:	move	#return, new_index
000641:0x001c6538:	rts
000641:0x001c6540:	rts
array<array<SoundObjectBuilder>>::ShuffleArray()
000646:0x001c6570:	imove	i, 0x000000
000646:0x001c6580:	jump	0x1c65a0
000646:0x001c6588:	move	@m00, i
000646:0x001c6598:	inc	i
000646:0x001c65a0:	ncalli	array<array<SoundObjectBuilder>>.Count()
000646:0x001c65a8:	cmpi	i, #return
000646:0x001c65b8:	bge	0x1c65f0
000648:0x001c65c0:	call	
000648:0x001c65d0:	call	
000648:0x001c65e8:	jump	0x1c6588
000648:0x001c65f0:	rts
array<array<SoundObjectBuilder>>::DifferentAtPosition()
000666:0x001c6620:	ncalli	array<array<SoundObjectBuilder>>.Count()
000666:0x001c6628:	move	@m00, #return
000666:0x001c6638:	push	#return
000666:0x001c6640:	ncalli	array<array<SoundObjectBuilder>>.Count()
000666:0x001c6648:	move	@m02, #return
000666:0x001c6658:	pop	#return
000666:0x001c6660:	cmpi	@m00, @m02
000666:0x001c6670:	beq	0x1c66a0
000668:0x001c6678:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001c6688:	imove	#return, 0xffffffff
000669:0x001c6698:	rts
000672:0x001c66a0:	imove	i, 0x000000
000672:0x001c66b0:	jump	0x1c66c0
000672:0x001c66b8:	inc	i
000672:0x001c66c0:	ncalli	array<array<SoundObjectBuilder>>.Count()
000672:0x001c66c8:	cmpi	i, #return
000672:0x001c66d8:	bge	0x1c6768
000674:0x001c66e0:	icall	
000674:0x001c66f0:	movec	@c00, #return
000674:0x001c6700:	pushc	#return
000674:0x001c6708:	icall	
000674:0x001c6718:	movec	@c02, #return
000674:0x001c6728:	popc	#return
000674:0x001c6730:	cmpc	@c00, @c02
000674:0x001c6740:	beq	0x1c6760
000676:0x001c6748:	move	#return, i
000676:0x001c6758:	rts
000676:0x001c6760:	jump	0x1c66b8
000680:0x001c6768:	imove	#return, 0xffffffff
000680:0x001c6778:	rts
000680:0x001c6780:	rts
map<int,array<SoundObjectBuilder>>::GetKeyArray()
000885:0x001c6a80:	new	keys, array<int>
000886:0x001c6aa0:	imove	i, 0x000000
000886:0x001c6ab0:	jump	0x1c6ad0
000886:0x001c6ab8:	move	@m00, i
000886:0x001c6ac8:	inc	i
000886:0x001c6ad0:	ncalli	map<int,array<SoundObjectBuilder>>.Count()
000886:0x001c6ad8:	cmpi	i, #return
000886:0x001c6ae8:	bge	0x1c6b18
000888:0x001c6af0:	icall	
000888:0x001c6b00:	icall	
000888:0x001c6b10:	jump	0x1c6ab8
000890:0x001c6b18:	movem	#return, keys
000890:0x001c6b28:	release	keys
000890:0x001c6b30:	rts
000890:0x001c6b38:	release	keys
000890:0x001c6b40:	rts
map<int,array<SoundObjectBuilder>>::GetValueArray()
000895:0x001c6b98:	new	elements, array<array<SoundObjectBuilder>>
000896:0x001c6bb8:	imove	i, 0x000000
000896:0x001c6bc8:	jump	0x1c6be8
000896:0x001c6bd0:	move	@m00, i
000896:0x001c6be0:	inc	i
000896:0x001c6be8:	ncalli	map<int,array<SoundObjectBuilder>>.Count()
000896:0x001c6bf0:	cmpi	i, #return
000896:0x001c6c00:	bge	0x1c6c30
000898:0x001c6c08:	icall	
000898:0x001c6c18:	icall	
000898:0x001c6c28:	jump	0x1c6bd0
000900:0x001c6c30:	movem	#return, elements
000900:0x001c6c40:	release	elements
000900:0x001c6c48:	rts
000900:0x001c6c50:	release	elements
000900:0x001c6c58:	rts
map<int,array<SoundObjectBuilder>>::ReplaceKey()
000905:0x001c6c60:	icall	
000905:0x001c6c70:	cmpi	#return, _i0
000905:0x001c6c80:	beq	0x1c6cd0
000907:0x001c6c88:	icall	
000907:0x001c6c98:	icall	
000908:0x001c6ca8:	icall	
000909:0x001c6cb8:	imove	#return, 0x000001
000909:0x001c6cc8:	rts
000911:0x001c6cd0:	imove	#return, 0x000000
000911:0x001c6ce0:	rts
000911:0x001c6ce8:	rts
map<int,array<SoundObjectBuilder>>::GetKeyByValue()
000917:0x001c6d40:	imove	i, 0x000000
000917:0x001c6d50:	jump	0x1c6d70
000917:0x001c6d58:	move	@m00, i
000917:0x001c6d68:	inc	i
000917:0x001c6d70:	ncalli	map<int,array<SoundObjectBuilder>>.Count()
000917:0x001c6d78:	cmpi	i, #return
000917:0x001c6d88:	bge	0x1c6df8
000919:0x001c6d90:	icall	
000919:0x001c6da0:	movec	@c00, #return
000919:0x001c6db0:	cmpmc	@c00, value
000919:0x001c6dc0:	bne	0x1c6df0
000921:0x001c6dc8:	icall	
000921:0x001c6dd8:	move	ret, #return
000922:0x001c6de8:	jump	0x1c6df8
000922:0x001c6df0:	jump	0x1c6d58
000926:0x001c6df8:	move	#return, ret
000926:0x001c6e08:	rts
000926:0x001c6e10:	rts
map<int,array<SoundObjectBuilder>>::GetKeyByValueChecked()
000931:0x001c6e40:	imove	i, 0x000000
000931:0x001c6e50:	jump	0x1c6e70
000931:0x001c6e58:	move	@m00, i
000931:0x001c6e68:	inc	i
000931:0x001c6e70:	ncalli	map<int,array<SoundObjectBuilder>>.Count()
000931:0x001c6e78:	cmpi	i, #return
000931:0x001c6e88:	bge	0x1c6f18
000933:0x001c6e90:	icall	
000933:0x001c6ea0:	movec	@c00, #return
000933:0x001c6eb0:	cmpmc	@c00, value
000933:0x001c6ec0:	bne	0x1c6f10
000935:0x001c6ec8:	icall	
000935:0x001c6ed8:	move	key, #return
000936:0x001c6ee8:	imove	#return, 0x000001
000936:0x001c6ef8:	move	key, key
000936:0x001c6f08:	rts
000936:0x001c6f10:	jump	0x1c6e58
000939:0x001c6f18:	imove	#return, 0x000000
000939:0x001c6f28:	move	key, key
000939:0x001c6f38:	rts
000939:0x001c6f40:	move	key, key
000939:0x001c6f50:	rts
map<int,@array<SoundObjectBuilder>>::GetKeyArray()
000885:0x001c72a0:	new	keys, array<int>
000886:0x001c72c0:	imove	i, 0x000000
000886:0x001c72d0:	jump	0x1c72f0
000886:0x001c72d8:	move	@m00, i
000886:0x001c72e8:	inc	i
000886:0x001c72f0:	ncalli	map<int,@array<SoundObjectBuilder>>.Count()
000886:0x001c72f8:	cmpi	i, #return
000886:0x001c7308:	bge	0x1c7338
000888:0x001c7310:	icall	
000888:0x001c7320:	icall	
000888:0x001c7330:	jump	0x1c72d8
000890:0x001c7338:	movem	#return, keys
000890:0x001c7348:	release	keys
000890:0x001c7350:	rts
000890:0x001c7358:	release	keys
000890:0x001c7360:	rts
map<int,@array<SoundObjectBuilder>>::GetValueArray()
000895:0x001c73b8:	new	elements, array<array<SoundObjectBuilder>>
000896:0x001c73d8:	imove	i, 0x000000
000896:0x001c73e8:	jump	0x1c7408
000896:0x001c73f0:	move	@m00, i
000896:0x001c7400:	inc	i
000896:0x001c7408:	ncalli	map<int,@array<SoundObjectBuilder>>.Count()
000896:0x001c7410:	cmpi	i, #return
000896:0x001c7420:	bge	0x1c7450
000898:0x001c7428:	icall	
000898:0x001c7438:	icall	
000898:0x001c7448:	jump	0x1c73f0
000900:0x001c7450:	movem	#return, elements
000900:0x001c7460:	release	elements
000900:0x001c7468:	rts
000900:0x001c7470:	release	elements
000900:0x001c7478:	rts
map<int,@array<SoundObjectBuilder>>::ReplaceKey()
000905:0x001c7480:	icall	
000905:0x001c7490:	cmpi	#return, _i0
000905:0x001c74a0:	beq	0x1c74f0
000907:0x001c74a8:	icall	
000907:0x001c74b8:	icall	
000908:0x001c74c8:	icall	
000909:0x001c74d8:	imove	#return, 0x000001
000909:0x001c74e8:	rts
000911:0x001c74f0:	imove	#return, 0x000000
000911:0x001c7500:	rts
000911:0x001c7508:	rts
map<int,@array<SoundObjectBuilder>>::GetKeyByValue()
000917:0x001c7560:	imove	i, 0x000000
000917:0x001c7570:	jump	0x1c7590
000917:0x001c7578:	move	@m00, i
000917:0x001c7588:	inc	i
000917:0x001c7590:	ncalli	map<int,@array<SoundObjectBuilder>>.Count()
000917:0x001c7598:	cmpi	i, #return
000917:0x001c75a8:	bge	0x1c7618
000919:0x001c75b0:	icall	
000919:0x001c75c0:	movec	@c00, #return
000919:0x001c75d0:	cmpmc	@c00, value
000919:0x001c75e0:	bne	0x1c7610
000921:0x001c75e8:	icall	
000921:0x001c75f8:	move	ret, #return
000922:0x001c7608:	jump	0x1c7618
000922:0x001c7610:	jump	0x1c7578
000926:0x001c7618:	move	#return, ret
000926:0x001c7628:	rts
000926:0x001c7630:	rts
map<int,@array<SoundObjectBuilder>>::GetKeyByValueChecked()
000931:0x001c7660:	imove	i, 0x000000
000931:0x001c7670:	jump	0x1c7690
000931:0x001c7678:	move	@m00, i
000931:0x001c7688:	inc	i
000931:0x001c7690:	ncalli	map<int,@array<SoundObjectBuilder>>.Count()
000931:0x001c7698:	cmpi	i, #return
000931:0x001c76a8:	bge	0x1c7738
000933:0x001c76b0:	icall	
000933:0x001c76c0:	movec	@c00, #return
000933:0x001c76d0:	cmpmc	@c00, value
000933:0x001c76e0:	bne	0x1c7730
000935:0x001c76e8:	icall	
000935:0x001c76f8:	move	key, #return
000936:0x001c7708:	imove	#return, 0x000001
000936:0x001c7718:	move	key, key
000936:0x001c7728:	rts
000936:0x001c7730:	jump	0x1c7678
000939:0x001c7738:	imove	#return, 0x000000
000939:0x001c7748:	move	key, key
000939:0x001c7758:	rts
000939:0x001c7760:	move	key, key
000939:0x001c7770:	rts
array<ModStructure>::InsertAll()
000427:0x001c7fa8:	imove	i, 0x000000
000427:0x001c7fb8:	jump	0x1c7fd8
000427:0x001c7fc0:	move	@m00, i
000427:0x001c7fd0:	inc	i
000427:0x001c7fd8:	ncalli	array<ModStructure>.Count()
000427:0x001c7fe0:	cmpi	i, #return
000427:0x001c7ff0:	bge	0x1c8020
000429:0x001c7ff8:	icall	
000429:0x001c8008:	icall	
000429:0x001c8018:	jump	0x1c7fc0
000429:0x001c8020:	rts
array<ModStructure>::RemoveItem()
000479:0x001c8050:	movefm	@c00, value
000479:0x001c8060:	icall	
000479:0x001c8070:	move	remove_index, #return
000481:0x001c8080:	cmpi	remove_index, _i0
000481:0x001c8090:	blt	0x1c80a8
000483:0x001c8098:	ncalli	array<ModStructure>.RemoveOrdered(remove_index)
000483:0x001c80a8:	rts
array<ModStructure>::RemoveItemUnOrdered()
000489:0x001c80d8:	movefm	@c00, value
000489:0x001c80e8:	icall	
000489:0x001c80f8:	move	remove_index, #return
000491:0x001c8108:	cmpi	remove_index, _i0
000491:0x001c8118:	blt	0x1c8130
000493:0x001c8120:	ncalli	array<ModStructure>.Remove(remove_index)
000493:0x001c8130:	rts
array<ModStructure>::IsValidIndex()
000499:0x001c8138:	cmpi	index, _i-1
000499:0x001c8148:	ble	0x1c8188
000499:0x001c8150:	ncalli	array<ModStructure>.Count()
000499:0x001c8158:	cmpi	index, #return
000499:0x001c8168:	bge	0x1c8188
000499:0x001c8170:	imove	#return, 0x000001
000499:0x001c8180:	jump	0x1c8198
000499:0x001c8188:	imove	#return, 0x000000
000499:0x001c8198:	rts
000499:0x001c81a0:	rts
array<ModStructure>::Debug()
000525:0x001c81f8:	ncalli	array<ModStructure>.Count()
000525:0x001c8200:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001c8230:	icall	Print(#return)
000526:0x001c8240:	imove	i, 0x000000
000526:0x001c8250:	jump	0x1c8270
000526:0x001c8258:	move	@m00, i
000526:0x001c8268:	inc	i
000526:0x001c8270:	ncalli	array<ModStructure>.Count()
000526:0x001c8278:	cmpi	i, #return
000526:0x001c8288:	bge	0x1c8300
000528:0x001c8290:	icall	
000528:0x001c82a0:	movetm	item, #return
000529:0x001c82b0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001c82e0:	icall	Print(#return)
000529:0x001c82f0:	release	item
000529:0x001c82f8:	jump	0x1c8258
000529:0x001c8300:	rts
array<ModStructure>::GetRandomIndex()
000544:0x001c8308:	ncalli	array<ModStructure>.Count()
000544:0x001c8310:	move	@m00, #return
000544:0x001c8320:	cmpi	@m00, _i0
000544:0x001c8330:	ble	0x1c8368
000546:0x001c8338:	ncalli	array<ModStructure>.Count()
000546:0x001c8340:	icall	RandomInt(_i0, #return)
000546:0x001c8350:	move	#return, #return
000546:0x001c8360:	rts
000549:0x001c8368:	imove	#return, 0xffffffff
000549:0x001c8378:	rts
000549:0x001c8380:	rts
array<ModStructure>::GetRandomElement()
000563:0x001c8388:	call	
000563:0x001c8398:	icall	
000563:0x001c83a8:	movetm	#return, #return
000563:0x001c83b8:	rts
000563:0x001c83c0:	rts
array<ModStructure>::SwapItems()
000568:0x001c83f0:	icall	
000568:0x001c8400:	movetm	item1, #return
000569:0x001c8410:	icall	
000569:0x001c8420:	icall	
000570:0x001c8430:	movefm	@c00, item1
000570:0x001c8440:	icall	
000570:0x001c8450:	release	item1
000570:0x001c8458:	rts
array<ModStructure>::InsertArray()
000575:0x001c84b0:	imove	i, 0x000000
000575:0x001c84c0:	jump	0x1c84e0
000575:0x001c84c8:	move	@m00, i
000575:0x001c84d8:	inc	i
000575:0x001c84e0:	ncalli	array<ModStructure>.Count()
000575:0x001c84e8:	cmpi	i, #return
000575:0x001c84f8:	bge	0x1c8550
000577:0x001c8500:	icall	
000577:0x001c8510:	movetm	item, #return
000578:0x001c8520:	movefm	@c00, item
000578:0x001c8530:	icall	
000578:0x001c8540:	release	item
000578:0x001c8548:	jump	0x1c84c8
000578:0x001c8550:	rts
array<ModStructure>::Invert()
000584:0x001c85d0:	imove	left, 0x000000
000585:0x001c85e0:	ncalli	array<ModStructure>.Count()
000585:0x001c85e8:	subi	right, #return, _i1
000586:0x001c85f8:	cmpi	right, _i0
000586:0x001c8608:	ble	0x1c86c8
000588:0x001c8610:	cmpi	left, right
000588:0x001c8620:	bge	0x1c86c8
000590:0x001c8628:	icall	
000590:0x001c8638:	movetm	temp, #return
000591:0x001c8648:	move	@m00, left
000591:0x001c8658:	inc	left
000591:0x001c8660:	icall	
000591:0x001c8670:	icall	
000592:0x001c8680:	move	@m00, right
000592:0x001c8690:	dec	right
000592:0x001c8698:	movefm	@c00, temp
000592:0x001c86a8:	icall	
000592:0x001c86b8:	release	temp
000592:0x001c86c0:	jump	0x1c8610
000592:0x001c86c8:	rts
array<ModStructure>::MoveIndex()
000612:0x001c8720:	ncalli	array<ModStructure>.Count()
000612:0x001c8728:	move	count, #return
000613:0x001c8738:	move	new_index, curr_index
000615:0x001c8748:	cmpi	move_number, _i0
000615:0x001c8758:	ble	0x1c8780
000617:0x001c8760:	addi	@m00, curr_index, move_number
000617:0x001c8770:	move	new_index, @m00
000620:0x001c8780:	cmpi	move_number, _i0
000620:0x001c8790:	bge	0x1c8838
000622:0x001c8798:	subi	@m00, curr_index, move_number
000622:0x001c87a8:	move	new_index, @m00
000624:0x001c87b8:	cmpi	new_index, _i0
000624:0x001c87c8:	bge	0x1c8838
000626:0x001c87d0:	subi	@m01, _i0, count
000626:0x001c87e0:	cmpi	new_index, @m01
000626:0x001c87f0:	bgt	0x1c8818
000628:0x001c87f8:	modi	@m00, new_index, count
000628:0x001c8808:	move	new_index, @m00
000631:0x001c8818:	addi	@m00, new_index, count
000631:0x001c8828:	move	new_index, @m00
000635:0x001c8838:	cmpi	new_index, count
000635:0x001c8848:	blt	0x1c8870
000637:0x001c8850:	modi	@m00, new_index, count
000637:0x001c8860:	move	new_index, @m00
000641:0x001c8870:	move	#return, new_index
000641:0x001c8880:	rts
000641:0x001c8888:	rts
array<ModStructure>::ShuffleArray()
000646:0x001c88b8:	imove	i, 0x000000
000646:0x001c88c8:	jump	0x1c88e8
000646:0x001c88d0:	move	@m00, i
000646:0x001c88e0:	inc	i
000646:0x001c88e8:	ncalli	array<ModStructure>.Count()
000646:0x001c88f0:	cmpi	i, #return
000646:0x001c8900:	bge	0x1c8938
000648:0x001c8908:	call	
000648:0x001c8918:	call	
000648:0x001c8930:	jump	0x1c88d0
000648:0x001c8938:	rts
array<ModStructure>::DifferentAtPosition()
000666:0x001c8968:	ncalli	array<ModStructure>.Count()
000666:0x001c8970:	move	@m00, #return
000666:0x001c8980:	push	#return
000666:0x001c8988:	ncalli	array<ModStructure>.Count()
000666:0x001c8990:	move	@m02, #return
000666:0x001c89a0:	pop	#return
000666:0x001c89a8:	cmpi	@m00, @m02
000666:0x001c89b8:	beq	0x1c89e8
000668:0x001c89c0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001c89d0:	imove	#return, 0xffffffff
000669:0x001c89e0:	rts
000672:0x001c89e8:	imove	i, 0x000000
000672:0x001c89f8:	jump	0x1c8a08
000672:0x001c8a00:	inc	i
000672:0x001c8a08:	ncalli	array<ModStructure>.Count()
000672:0x001c8a10:	cmpi	i, #return
000672:0x001c8a20:	bge	0x1c8ab0
000674:0x001c8a28:	icall	
000674:0x001c8a38:	movec	@c00, #return
000674:0x001c8a48:	pushc	#return
000674:0x001c8a50:	icall	
000674:0x001c8a60:	movec	@c02, #return
000674:0x001c8a70:	popc	#return
000674:0x001c8a78:	cmpc	@c00, @c02
000674:0x001c8a88:	beq	0x1c8aa8
000676:0x001c8a90:	move	#return, i
000676:0x001c8aa0:	rts
000676:0x001c8aa8:	jump	0x1c8a00
000680:0x001c8ab0:	imove	#return, 0xffffffff
000680:0x001c8ac0:	rts
000680:0x001c8ac8:	rts
array<@ModStructure>::InsertAll()
000427:0x001c8ee0:	imove	i, 0x000000
000427:0x001c8ef0:	jump	0x1c8f10
000427:0x001c8ef8:	move	@m00, i
000427:0x001c8f08:	inc	i
000427:0x001c8f10:	ncalli	array<ModStructure>.Count()
000427:0x001c8f18:	cmpi	i, #return
000427:0x001c8f28:	bge	0x1c8f58
000429:0x001c8f30:	icall	
000429:0x001c8f40:	icall	
000429:0x001c8f50:	jump	0x1c8ef8
000429:0x001c8f58:	rts
array<@ModStructure>::RemoveItem()
000479:0x001c8f88:	movefm	@c00, value
000479:0x001c8f98:	icall	
000479:0x001c8fa8:	move	remove_index, #return
000481:0x001c8fb8:	cmpi	remove_index, _i0
000481:0x001c8fc8:	blt	0x1c8fe0
000483:0x001c8fd0:	ncalli	array<@ModStructure>.RemoveOrdered(remove_index)
000483:0x001c8fe0:	rts
array<@ModStructure>::RemoveItemUnOrdered()
000489:0x001c9010:	movefm	@c00, value
000489:0x001c9020:	icall	
000489:0x001c9030:	move	remove_index, #return
000491:0x001c9040:	cmpi	remove_index, _i0
000491:0x001c9050:	blt	0x1c9068
000493:0x001c9058:	ncalli	array<@ModStructure>.Remove(remove_index)
000493:0x001c9068:	rts
array<@ModStructure>::IsValidIndex()
000499:0x001c9070:	cmpi	index, _i-1
000499:0x001c9080:	ble	0x1c90c0
000499:0x001c9088:	ncalli	array<@ModStructure>.Count()
000499:0x001c9090:	cmpi	index, #return
000499:0x001c90a0:	bge	0x1c90c0
000499:0x001c90a8:	imove	#return, 0x000001
000499:0x001c90b8:	jump	0x1c90d0
000499:0x001c90c0:	imove	#return, 0x000000
000499:0x001c90d0:	rts
000499:0x001c90d8:	rts
array<@ModStructure>::Debug()
000525:0x001c9130:	ncalli	array<@ModStructure>.Count()
000525:0x001c9138:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001c9168:	icall	Print(#return)
000526:0x001c9178:	imove	i, 0x000000
000526:0x001c9188:	jump	0x1c91a8
000526:0x001c9190:	move	@m00, i
000526:0x001c91a0:	inc	i
000526:0x001c91a8:	ncalli	array<@ModStructure>.Count()
000526:0x001c91b0:	cmpi	i, #return
000526:0x001c91c0:	bge	0x1c9238
000528:0x001c91c8:	icall	
000528:0x001c91d8:	movetm	item, #return
000529:0x001c91e8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001c9218:	icall	Print(#return)
000529:0x001c9228:	release	item
000529:0x001c9230:	jump	0x1c9190
000529:0x001c9238:	rts
array<@ModStructure>::GetRandomIndex()
000544:0x001c9240:	ncalli	array<@ModStructure>.Count()
000544:0x001c9248:	move	@m00, #return
000544:0x001c9258:	cmpi	@m00, _i0
000544:0x001c9268:	ble	0x1c92a0
000546:0x001c9270:	ncalli	array<@ModStructure>.Count()
000546:0x001c9278:	icall	RandomInt(_i0, #return)
000546:0x001c9288:	move	#return, #return
000546:0x001c9298:	rts
000549:0x001c92a0:	imove	#return, 0xffffffff
000549:0x001c92b0:	rts
000549:0x001c92b8:	rts
array<@ModStructure>::GetRandomElement()
000563:0x001c92c0:	call	
000563:0x001c92d0:	icall	
000563:0x001c92e0:	movetm	#return, #return
000563:0x001c92f0:	rts
000563:0x001c92f8:	rts
array<@ModStructure>::SwapItems()
000568:0x001c9328:	icall	
000568:0x001c9338:	movetm	item1, #return
000569:0x001c9348:	icall	
000569:0x001c9358:	icall	
000570:0x001c9368:	movefm	@c00, item1
000570:0x001c9378:	icall	
000570:0x001c9388:	release	item1
000570:0x001c9390:	rts
array<@ModStructure>::InsertArray()
000575:0x001c93e8:	imove	i, 0x000000
000575:0x001c93f8:	jump	0x1c9418
000575:0x001c9400:	move	@m00, i
000575:0x001c9410:	inc	i
000575:0x001c9418:	ncalli	array<ModStructure>.Count()
000575:0x001c9420:	cmpi	i, #return
000575:0x001c9430:	bge	0x1c9488
000577:0x001c9438:	icall	
000577:0x001c9448:	movetm	item, #return
000578:0x001c9458:	movefm	@c00, item
000578:0x001c9468:	icall	
000578:0x001c9478:	release	item
000578:0x001c9480:	jump	0x1c9400
000578:0x001c9488:	rts
array<@ModStructure>::Invert()
000584:0x001c9508:	imove	left, 0x000000
000585:0x001c9518:	ncalli	array<@ModStructure>.Count()
000585:0x001c9520:	subi	right, #return, _i1
000586:0x001c9530:	cmpi	right, _i0
000586:0x001c9540:	ble	0x1c9600
000588:0x001c9548:	cmpi	left, right
000588:0x001c9558:	bge	0x1c9600
000590:0x001c9560:	icall	
000590:0x001c9570:	movetm	temp, #return
000591:0x001c9580:	move	@m00, left
000591:0x001c9590:	inc	left
000591:0x001c9598:	icall	
000591:0x001c95a8:	icall	
000592:0x001c95b8:	move	@m00, right
000592:0x001c95c8:	dec	right
000592:0x001c95d0:	movefm	@c00, temp
000592:0x001c95e0:	icall	
000592:0x001c95f0:	release	temp
000592:0x001c95f8:	jump	0x1c9548
000592:0x001c9600:	rts
array<@ModStructure>::MoveIndex()
000612:0x001c9658:	ncalli	array<@ModStructure>.Count()
000612:0x001c9660:	move	count, #return
000613:0x001c9670:	move	new_index, curr_index
000615:0x001c9680:	cmpi	move_number, _i0
000615:0x001c9690:	ble	0x1c96b8
000617:0x001c9698:	addi	@m00, curr_index, move_number
000617:0x001c96a8:	move	new_index, @m00
000620:0x001c96b8:	cmpi	move_number, _i0
000620:0x001c96c8:	bge	0x1c9770
000622:0x001c96d0:	subi	@m00, curr_index, move_number
000622:0x001c96e0:	move	new_index, @m00
000624:0x001c96f0:	cmpi	new_index, _i0
000624:0x001c9700:	bge	0x1c9770
000626:0x001c9708:	subi	@m01, _i0, count
000626:0x001c9718:	cmpi	new_index, @m01
000626:0x001c9728:	bgt	0x1c9750
000628:0x001c9730:	modi	@m00, new_index, count
000628:0x001c9740:	move	new_index, @m00
000631:0x001c9750:	addi	@m00, new_index, count
000631:0x001c9760:	move	new_index, @m00
000635:0x001c9770:	cmpi	new_index, count
000635:0x001c9780:	blt	0x1c97a8
000637:0x001c9788:	modi	@m00, new_index, count
000637:0x001c9798:	move	new_index, @m00
000641:0x001c97a8:	move	#return, new_index
000641:0x001c97b8:	rts
000641:0x001c97c0:	rts
array<@ModStructure>::ShuffleArray()
000646:0x001c97f0:	imove	i, 0x000000
000646:0x001c9800:	jump	0x1c9820
000646:0x001c9808:	move	@m00, i
000646:0x001c9818:	inc	i
000646:0x001c9820:	ncalli	array<@ModStructure>.Count()
000646:0x001c9828:	cmpi	i, #return
000646:0x001c9838:	bge	0x1c9870
000648:0x001c9840:	call	
000648:0x001c9850:	call	
000648:0x001c9868:	jump	0x1c9808
000648:0x001c9870:	rts
array<@ModStructure>::DifferentAtPosition()
000666:0x001c98a0:	ncalli	array<@ModStructure>.Count()
000666:0x001c98a8:	move	@m00, #return
000666:0x001c98b8:	ncalli	array<ModStructure>.Count()
000666:0x001c98c0:	cmpi	@m00, #return
000666:0x001c98d0:	beq	0x1c9900
000668:0x001c98d8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001c98e8:	imove	#return, 0xffffffff
000669:0x001c98f8:	rts
000672:0x001c9900:	imove	i, 0x000000
000672:0x001c9910:	jump	0x1c9920
000672:0x001c9918:	inc	i
000672:0x001c9920:	ncalli	array<ModStructure>.Count()
000672:0x001c9928:	cmpi	i, #return
000672:0x001c9938:	bge	0x1c99a8
000674:0x001c9940:	icall	
000674:0x001c9950:	movec	@c00, #return
000674:0x001c9960:	icall	
000674:0x001c9970:	cmpc	@c00, #return
000674:0x001c9980:	beq	0x1c99a0
000676:0x001c9988:	move	#return, i
000676:0x001c9998:	rts
000676:0x001c99a0:	jump	0x1c9918
000680:0x001c99a8:	imove	#return, 0xffffffff
000680:0x001c99b8:	rts
000680:0x001c99c0:	rts
array<ErrorProperties>::InsertAll()
000427:0x001ca710:	imove	i, 0x000000
000427:0x001ca720:	jump	0x1ca740
000427:0x001ca728:	move	@m00, i
000427:0x001ca738:	inc	i
000427:0x001ca740:	ncalli	array<ErrorProperties>.Count()
000427:0x001ca748:	cmpi	i, #return
000427:0x001ca758:	bge	0x1ca788
000429:0x001ca760:	icall	
000429:0x001ca770:	icall	
000429:0x001ca780:	jump	0x1ca728
000429:0x001ca788:	rts
array<ErrorProperties>::RemoveItem()
000479:0x001ca7b8:	movefm	@c00, value
000479:0x001ca7c8:	icall	
000479:0x001ca7d8:	move	remove_index, #return
000481:0x001ca7e8:	cmpi	remove_index, _i0
000481:0x001ca7f8:	blt	0x1ca810
000483:0x001ca800:	ncalli	array<ErrorProperties>.RemoveOrdered(remove_index)
000483:0x001ca810:	rts
array<ErrorProperties>::RemoveItemUnOrdered()
000489:0x001ca840:	movefm	@c00, value
000489:0x001ca850:	icall	
000489:0x001ca860:	move	remove_index, #return
000491:0x001ca870:	cmpi	remove_index, _i0
000491:0x001ca880:	blt	0x1ca898
000493:0x001ca888:	ncalli	array<ErrorProperties>.Remove(remove_index)
000493:0x001ca898:	rts
array<ErrorProperties>::IsValidIndex()
000499:0x001ca8a0:	cmpi	index, _i-1
000499:0x001ca8b0:	ble	0x1ca8f0
000499:0x001ca8b8:	ncalli	array<ErrorProperties>.Count()
000499:0x001ca8c0:	cmpi	index, #return
000499:0x001ca8d0:	bge	0x1ca8f0
000499:0x001ca8d8:	imove	#return, 0x000001
000499:0x001ca8e8:	jump	0x1ca900
000499:0x001ca8f0:	imove	#return, 0x000000
000499:0x001ca900:	rts
000499:0x001ca908:	rts
array<ErrorProperties>::Debug()
000525:0x001ca960:	ncalli	array<ErrorProperties>.Count()
000525:0x001ca968:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001ca998:	icall	Print(#return)
000526:0x001ca9a8:	imove	i, 0x000000
000526:0x001ca9b8:	jump	0x1ca9d8
000526:0x001ca9c0:	move	@m00, i
000526:0x001ca9d0:	inc	i
000526:0x001ca9d8:	ncalli	array<ErrorProperties>.Count()
000526:0x001ca9e0:	cmpi	i, #return
000526:0x001ca9f0:	bge	0x1caa68
000528:0x001ca9f8:	icall	
000528:0x001caa08:	movetm	item, #return
000529:0x001caa18:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001caa48:	icall	Print(#return)
000529:0x001caa58:	release	item
000529:0x001caa60:	jump	0x1ca9c0
000529:0x001caa68:	rts
array<ErrorProperties>::GetRandomIndex()
000544:0x001caa70:	ncalli	array<ErrorProperties>.Count()
000544:0x001caa78:	move	@m00, #return
000544:0x001caa88:	cmpi	@m00, _i0
000544:0x001caa98:	ble	0x1caad0
000546:0x001caaa0:	ncalli	array<ErrorProperties>.Count()
000546:0x001caaa8:	icall	RandomInt(_i0, #return)
000546:0x001caab8:	move	#return, #return
000546:0x001caac8:	rts
000549:0x001caad0:	imove	#return, 0xffffffff
000549:0x001caae0:	rts
000549:0x001caae8:	rts
array<ErrorProperties>::GetRandomElement()
000563:0x001caaf0:	call	
000563:0x001cab00:	icall	
000563:0x001cab10:	movetm	#return, #return
000563:0x001cab20:	rts
000563:0x001cab28:	rts
array<ErrorProperties>::SwapItems()
000568:0x001cab58:	icall	
000568:0x001cab68:	movetm	item1, #return
000569:0x001cab78:	icall	
000569:0x001cab88:	icall	
000570:0x001cab98:	movefm	@c00, item1
000570:0x001caba8:	icall	
000570:0x001cabb8:	release	item1
000570:0x001cabc0:	rts
array<ErrorProperties>::InsertArray()
000575:0x001cac18:	imove	i, 0x000000
000575:0x001cac28:	jump	0x1cac48
000575:0x001cac30:	move	@m00, i
000575:0x001cac40:	inc	i
000575:0x001cac48:	ncalli	array<ErrorProperties>.Count()
000575:0x001cac50:	cmpi	i, #return
000575:0x001cac60:	bge	0x1cacb8
000577:0x001cac68:	icall	
000577:0x001cac78:	movetm	item, #return
000578:0x001cac88:	movefm	@c00, item
000578:0x001cac98:	icall	
000578:0x001caca8:	release	item
000578:0x001cacb0:	jump	0x1cac30
000578:0x001cacb8:	rts
array<ErrorProperties>::Invert()
000584:0x001cad38:	imove	left, 0x000000
000585:0x001cad48:	ncalli	array<ErrorProperties>.Count()
000585:0x001cad50:	subi	right, #return, _i1
000586:0x001cad60:	cmpi	right, _i0
000586:0x001cad70:	ble	0x1cae30
000588:0x001cad78:	cmpi	left, right
000588:0x001cad88:	bge	0x1cae30
000590:0x001cad90:	icall	
000590:0x001cada0:	movetm	temp, #return
000591:0x001cadb0:	move	@m00, left
000591:0x001cadc0:	inc	left
000591:0x001cadc8:	icall	
000591:0x001cadd8:	icall	
000592:0x001cade8:	move	@m00, right
000592:0x001cadf8:	dec	right
000592:0x001cae00:	movefm	@c00, temp
000592:0x001cae10:	icall	
000592:0x001cae20:	release	temp
000592:0x001cae28:	jump	0x1cad78
000592:0x001cae30:	rts
array<ErrorProperties>::MoveIndex()
000612:0x001cae88:	ncalli	array<ErrorProperties>.Count()
000612:0x001cae90:	move	count, #return
000613:0x001caea0:	move	new_index, curr_index
000615:0x001caeb0:	cmpi	move_number, _i0
000615:0x001caec0:	ble	0x1caee8
000617:0x001caec8:	addi	@m00, curr_index, move_number
000617:0x001caed8:	move	new_index, @m00
000620:0x001caee8:	cmpi	move_number, _i0
000620:0x001caef8:	bge	0x1cafa0
000622:0x001caf00:	subi	@m00, curr_index, move_number
000622:0x001caf10:	move	new_index, @m00
000624:0x001caf20:	cmpi	new_index, _i0
000624:0x001caf30:	bge	0x1cafa0
000626:0x001caf38:	subi	@m01, _i0, count
000626:0x001caf48:	cmpi	new_index, @m01
000626:0x001caf58:	bgt	0x1caf80
000628:0x001caf60:	modi	@m00, new_index, count
000628:0x001caf70:	move	new_index, @m00
000631:0x001caf80:	addi	@m00, new_index, count
000631:0x001caf90:	move	new_index, @m00
000635:0x001cafa0:	cmpi	new_index, count
000635:0x001cafb0:	blt	0x1cafd8
000637:0x001cafb8:	modi	@m00, new_index, count
000637:0x001cafc8:	move	new_index, @m00
000641:0x001cafd8:	move	#return, new_index
000641:0x001cafe8:	rts
000641:0x001caff0:	rts
array<ErrorProperties>::ShuffleArray()
000646:0x001cb020:	imove	i, 0x000000
000646:0x001cb030:	jump	0x1cb050
000646:0x001cb038:	move	@m00, i
000646:0x001cb048:	inc	i
000646:0x001cb050:	ncalli	array<ErrorProperties>.Count()
000646:0x001cb058:	cmpi	i, #return
000646:0x001cb068:	bge	0x1cb0a0
000648:0x001cb070:	call	
000648:0x001cb080:	call	
000648:0x001cb098:	jump	0x1cb038
000648:0x001cb0a0:	rts
array<ErrorProperties>::DifferentAtPosition()
000666:0x001cb0d0:	ncalli	array<ErrorProperties>.Count()
000666:0x001cb0d8:	move	@m00, #return
000666:0x001cb0e8:	push	#return
000666:0x001cb0f0:	ncalli	array<ErrorProperties>.Count()
000666:0x001cb0f8:	move	@m02, #return
000666:0x001cb108:	pop	#return
000666:0x001cb110:	cmpi	@m00, @m02
000666:0x001cb120:	beq	0x1cb150
000668:0x001cb128:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001cb138:	imove	#return, 0xffffffff
000669:0x001cb148:	rts
000672:0x001cb150:	imove	i, 0x000000
000672:0x001cb160:	jump	0x1cb170
000672:0x001cb168:	inc	i
000672:0x001cb170:	ncalli	array<ErrorProperties>.Count()
000672:0x001cb178:	cmpi	i, #return
000672:0x001cb188:	bge	0x1cb218
000674:0x001cb190:	icall	
000674:0x001cb1a0:	movec	@c00, #return
000674:0x001cb1b0:	pushc	#return
000674:0x001cb1b8:	icall	
000674:0x001cb1c8:	movec	@c02, #return
000674:0x001cb1d8:	popc	#return
000674:0x001cb1e0:	cmpc	@c00, @c02
000674:0x001cb1f0:	beq	0x1cb210
000676:0x001cb1f8:	move	#return, i
000676:0x001cb208:	rts
000676:0x001cb210:	jump	0x1cb168
000680:0x001cb218:	imove	#return, 0xffffffff
000680:0x001cb228:	rts
000680:0x001cb230:	rts
map<int,ErrorProperties>::GetKeyArray()
000885:0x001cb530:	new	keys, array<int>
000886:0x001cb550:	imove	i, 0x000000
000886:0x001cb560:	jump	0x1cb580
000886:0x001cb568:	move	@m00, i
000886:0x001cb578:	inc	i
000886:0x001cb580:	ncalli	map<int,ErrorProperties>.Count()
000886:0x001cb588:	cmpi	i, #return
000886:0x001cb598:	bge	0x1cb5c8
000888:0x001cb5a0:	icall	
000888:0x001cb5b0:	icall	
000888:0x001cb5c0:	jump	0x1cb568
000890:0x001cb5c8:	movem	#return, keys
000890:0x001cb5d8:	release	keys
000890:0x001cb5e0:	rts
000890:0x001cb5e8:	release	keys
000890:0x001cb5f0:	rts
map<int,ErrorProperties>::GetValueArray()
000895:0x001cb648:	new	elements, array<ErrorProperties>
000896:0x001cb668:	imove	i, 0x000000
000896:0x001cb678:	jump	0x1cb698
000896:0x001cb680:	move	@m00, i
000896:0x001cb690:	inc	i
000896:0x001cb698:	ncalli	map<int,ErrorProperties>.Count()
000896:0x001cb6a0:	cmpi	i, #return
000896:0x001cb6b0:	bge	0x1cb6e0
000898:0x001cb6b8:	icall	
000898:0x001cb6c8:	icall	
000898:0x001cb6d8:	jump	0x1cb680
000900:0x001cb6e0:	movem	#return, elements
000900:0x001cb6f0:	release	elements
000900:0x001cb6f8:	rts
000900:0x001cb700:	release	elements
000900:0x001cb708:	rts
map<int,ErrorProperties>::ReplaceKey()
000905:0x001cb710:	icall	
000905:0x001cb720:	cmpi	#return, _i0
000905:0x001cb730:	beq	0x1cb780
000907:0x001cb738:	icall	
000907:0x001cb748:	icall	
000908:0x001cb758:	icall	
000909:0x001cb768:	imove	#return, 0x000001
000909:0x001cb778:	rts
000911:0x001cb780:	imove	#return, 0x000000
000911:0x001cb790:	rts
000911:0x001cb798:	rts
map<int,ErrorProperties>::GetKeyByValue()
000917:0x001cb7f0:	imove	i, 0x000000
000917:0x001cb800:	jump	0x1cb820
000917:0x001cb808:	move	@m00, i
000917:0x001cb818:	inc	i
000917:0x001cb820:	ncalli	map<int,ErrorProperties>.Count()
000917:0x001cb828:	cmpi	i, #return
000917:0x001cb838:	bge	0x1cb8a8
000919:0x001cb840:	icall	
000919:0x001cb850:	movec	@c00, #return
000919:0x001cb860:	cmpmc	@c00, value
000919:0x001cb870:	bne	0x1cb8a0
000921:0x001cb878:	icall	
000921:0x001cb888:	move	ret, #return
000922:0x001cb898:	jump	0x1cb8a8
000922:0x001cb8a0:	jump	0x1cb808
000926:0x001cb8a8:	move	#return, ret
000926:0x001cb8b8:	rts
000926:0x001cb8c0:	rts
map<int,ErrorProperties>::GetKeyByValueChecked()
000931:0x001cb8f0:	imove	i, 0x000000
000931:0x001cb900:	jump	0x1cb920
000931:0x001cb908:	move	@m00, i
000931:0x001cb918:	inc	i
000931:0x001cb920:	ncalli	map<int,ErrorProperties>.Count()
000931:0x001cb928:	cmpi	i, #return
000931:0x001cb938:	bge	0x1cb9c8
000933:0x001cb940:	icall	
000933:0x001cb950:	movec	@c00, #return
000933:0x001cb960:	cmpmc	@c00, value
000933:0x001cb970:	bne	0x1cb9c0
000935:0x001cb978:	icall	
000935:0x001cb988:	move	key, #return
000936:0x001cb998:	imove	#return, 0x000001
000936:0x001cb9a8:	move	key, key
000936:0x001cb9b8:	rts
000936:0x001cb9c0:	jump	0x1cb908
000939:0x001cb9c8:	imove	#return, 0x000000
000939:0x001cb9d8:	move	key, key
000939:0x001cb9e8:	rts
000939:0x001cb9f0:	move	key, key
000939:0x001cba00:	rts
map<int,@ErrorProperties>::GetKeyArray()
000885:0x001cbd50:	new	keys, array<int>
000886:0x001cbd70:	imove	i, 0x000000
000886:0x001cbd80:	jump	0x1cbda0
000886:0x001cbd88:	move	@m00, i
000886:0x001cbd98:	inc	i
000886:0x001cbda0:	ncalli	map<int,@ErrorProperties>.Count()
000886:0x001cbda8:	cmpi	i, #return
000886:0x001cbdb8:	bge	0x1cbde8
000888:0x001cbdc0:	icall	
000888:0x001cbdd0:	icall	
000888:0x001cbde0:	jump	0x1cbd88
000890:0x001cbde8:	movem	#return, keys
000890:0x001cbdf8:	release	keys
000890:0x001cbe00:	rts
000890:0x001cbe08:	release	keys
000890:0x001cbe10:	rts
map<int,@ErrorProperties>::GetValueArray()
000895:0x001cbe68:	new	elements, array<ErrorProperties>
000896:0x001cbe88:	imove	i, 0x000000
000896:0x001cbe98:	jump	0x1cbeb8
000896:0x001cbea0:	move	@m00, i
000896:0x001cbeb0:	inc	i
000896:0x001cbeb8:	ncalli	map<int,@ErrorProperties>.Count()
000896:0x001cbec0:	cmpi	i, #return
000896:0x001cbed0:	bge	0x1cbf00
000898:0x001cbed8:	icall	
000898:0x001cbee8:	icall	
000898:0x001cbef8:	jump	0x1cbea0
000900:0x001cbf00:	movem	#return, elements
000900:0x001cbf10:	release	elements
000900:0x001cbf18:	rts
000900:0x001cbf20:	release	elements
000900:0x001cbf28:	rts
map<int,@ErrorProperties>::ReplaceKey()
000905:0x001cbf30:	icall	
000905:0x001cbf40:	cmpi	#return, _i0
000905:0x001cbf50:	beq	0x1cbfa0
000907:0x001cbf58:	icall	
000907:0x001cbf68:	icall	
000908:0x001cbf78:	icall	
000909:0x001cbf88:	imove	#return, 0x000001
000909:0x001cbf98:	rts
000911:0x001cbfa0:	imove	#return, 0x000000
000911:0x001cbfb0:	rts
000911:0x001cbfb8:	rts
map<int,@ErrorProperties>::GetKeyByValue()
000917:0x001cc010:	imove	i, 0x000000
000917:0x001cc020:	jump	0x1cc040
000917:0x001cc028:	move	@m00, i
000917:0x001cc038:	inc	i
000917:0x001cc040:	ncalli	map<int,@ErrorProperties>.Count()
000917:0x001cc048:	cmpi	i, #return
000917:0x001cc058:	bge	0x1cc0c8
000919:0x001cc060:	icall	
000919:0x001cc070:	movec	@c00, #return
000919:0x001cc080:	cmpmc	@c00, value
000919:0x001cc090:	bne	0x1cc0c0
000921:0x001cc098:	icall	
000921:0x001cc0a8:	move	ret, #return
000922:0x001cc0b8:	jump	0x1cc0c8
000922:0x001cc0c0:	jump	0x1cc028
000926:0x001cc0c8:	move	#return, ret
000926:0x001cc0d8:	rts
000926:0x001cc0e0:	rts
map<int,@ErrorProperties>::GetKeyByValueChecked()
000931:0x001cc110:	imove	i, 0x000000
000931:0x001cc120:	jump	0x1cc140
000931:0x001cc128:	move	@m00, i
000931:0x001cc138:	inc	i
000931:0x001cc140:	ncalli	map<int,@ErrorProperties>.Count()
000931:0x001cc148:	cmpi	i, #return
000931:0x001cc158:	bge	0x1cc1e8
000933:0x001cc160:	icall	
000933:0x001cc170:	movec	@c00, #return
000933:0x001cc180:	cmpmc	@c00, value
000933:0x001cc190:	bne	0x1cc1e0
000935:0x001cc198:	icall	
000935:0x001cc1a8:	move	key, #return
000936:0x001cc1b8:	imove	#return, 0x000001
000936:0x001cc1c8:	move	key, key
000936:0x001cc1d8:	rts
000936:0x001cc1e0:	jump	0x1cc128
000939:0x001cc1e8:	imove	#return, 0x000000
000939:0x001cc1f8:	move	key, key
000939:0x001cc208:	rts
000939:0x001cc210:	move	key, key
000939:0x001cc220:	rts
Param1<bool>::Param1()
//scripts/1_Core/param.c
000038:0x001cc2e0:	move	param1, p1
000038:0x001cc2f0:	rts
Param1<bool>::Serialize()
000043:0x001cc2f8:	icall	
000043:0x001cc308:	move	#return, #return
000043:0x001cc318:	rts
000043:0x001cc320:	rts
Param1<bool>::Deserializer()
000048:0x001cc328:	icall	
000048:0x001cc338:	move	#return, #return
000048:0x001cc348:	rts
000048:0x001cc350:	rts
Param2<int,int>::Param2()
000066:0x001cc478:	move	param1, p1
000067:0x001cc488:	move	param2, p2
000067:0x001cc498:	rts
Param2<int,int>::Serialize()
000072:0x001cc4a0:	icall	
000072:0x001cc4b0:	cmpi	#return, _i0
000072:0x001cc4c0:	beq	0x1cc508
000072:0x001cc4c8:	icall	
000072:0x001cc4d8:	cmpi	#return, _i0
000072:0x001cc4e8:	beq	0x1cc508
000072:0x001cc4f0:	imove	#return, 0x000001
000072:0x001cc500:	jump	0x1cc518
000072:0x001cc508:	imove	#return, 0x000000
000072:0x001cc518:	rts
000072:0x001cc520:	rts
Param2<int,int>::Deserializer()
000077:0x001cc528:	icall	
000077:0x001cc538:	cmpi	#return, _i0
000077:0x001cc548:	beq	0x1cc590
000077:0x001cc550:	icall	
000077:0x001cc560:	cmpi	#return, _i0
000077:0x001cc570:	beq	0x1cc590
000077:0x001cc578:	imove	#return, 0x000001
000077:0x001cc588:	jump	0x1cc5a0
000077:0x001cc590:	imove	#return, 0x000000
000077:0x001cc5a0:	rts
000077:0x001cc5a8:	rts
Param2<int,float>::Param2()
000066:0x001cc6d0:	move	param1, p1
000067:0x001cc6e0:	move	param2, p2
000067:0x001cc6f0:	rts
Param2<int,float>::Serialize()
000072:0x001cc6f8:	icall	
000072:0x001cc708:	cmpi	#return, _i0
000072:0x001cc718:	beq	0x1cc760
000072:0x001cc720:	icall	
000072:0x001cc730:	cmpi	#return, _i0
000072:0x001cc740:	beq	0x1cc760
000072:0x001cc748:	imove	#return, 0x000001
000072:0x001cc758:	jump	0x1cc770
000072:0x001cc760:	imove	#return, 0x000000
000072:0x001cc770:	rts
000072:0x001cc778:	rts
Param2<int,float>::Deserializer()
000077:0x001cc780:	icall	
000077:0x001cc790:	cmpi	#return, _i0
000077:0x001cc7a0:	beq	0x1cc7e8
000077:0x001cc7a8:	icall	
000077:0x001cc7b8:	cmpi	#return, _i0
000077:0x001cc7c8:	beq	0x1cc7e8
000077:0x001cc7d0:	imove	#return, 0x000001
000077:0x001cc7e0:	jump	0x1cc7f8
000077:0x001cc7e8:	imove	#return, 0x000000
000077:0x001cc7f8:	rts
000077:0x001cc800:	rts
Param2<string,float>::Param2()
000066:0x001cc928:	moves	param1, p1
000067:0x001cc938:	move	param2, p2
000067:0x001cc948:	rts
Param2<string,float>::Serialize()
000072:0x001cc950:	icall	
000072:0x001cc960:	cmpi	#return, _i0
000072:0x001cc970:	beq	0x1cc9b8
000072:0x001cc978:	icall	
000072:0x001cc988:	cmpi	#return, _i0
000072:0x001cc998:	beq	0x1cc9b8
000072:0x001cc9a0:	imove	#return, 0x000001
000072:0x001cc9b0:	jump	0x1cc9c8
000072:0x001cc9b8:	imove	#return, 0x000000
000072:0x001cc9c8:	rts
000072:0x001cc9d0:	rts
Param2<string,float>::Deserializer()
000077:0x001cc9d8:	icall	
000077:0x001cc9e8:	cmpi	#return, _i0
000077:0x001cc9f8:	beq	0x1cca40
000077:0x001cca00:	icall	
000077:0x001cca10:	cmpi	#return, _i0
000077:0x001cca20:	beq	0x1cca40
000077:0x001cca28:	imove	#return, 0x000001
000077:0x001cca38:	jump	0x1cca50
000077:0x001cca40:	imove	#return, 0x000000
000077:0x001cca50:	rts
000077:0x001cca58:	rts
Param2<float,float>::Param2()
000066:0x001ccb80:	move	param1, p1
000067:0x001ccb90:	move	param2, p2
000067:0x001ccba0:	rts
Param2<float,float>::Serialize()
000072:0x001ccba8:	icall	
000072:0x001ccbb8:	cmpi	#return, _i0
000072:0x001ccbc8:	beq	0x1ccc10
000072:0x001ccbd0:	icall	
000072:0x001ccbe0:	cmpi	#return, _i0
000072:0x001ccbf0:	beq	0x1ccc10
000072:0x001ccbf8:	imove	#return, 0x000001
000072:0x001ccc08:	jump	0x1ccc20
000072:0x001ccc10:	imove	#return, 0x000000
000072:0x001ccc20:	rts
000072:0x001ccc28:	rts
Param2<float,float>::Deserializer()
000077:0x001ccc30:	icall	
000077:0x001ccc40:	cmpi	#return, _i0
000077:0x001ccc50:	beq	0x1ccc98
000077:0x001ccc58:	icall	
000077:0x001ccc68:	cmpi	#return, _i0
000077:0x001ccc78:	beq	0x1ccc98
000077:0x001ccc80:	imove	#return, 0x000001
000077:0x001ccc90:	jump	0x1ccca8
000077:0x001ccc98:	imove	#return, 0x000000
000077:0x001ccca8:	rts
000077:0x001cccb0:	rts
array<Param3<string,int,int>>::InsertAll()
//scripts/1_Core/proto\enscript.c
000427:0x001cda08:	imove	i, 0x000000
000427:0x001cda18:	jump	0x1cda38
000427:0x001cda20:	move	@m00, i
000427:0x001cda30:	inc	i
000427:0x001cda38:	ncalli	array<Param3<string,int,int>>.Count()
000427:0x001cda40:	cmpi	i, #return
000427:0x001cda50:	bge	0x1cda80
000429:0x001cda58:	icall	
000429:0x001cda68:	icall	
000429:0x001cda78:	jump	0x1cda20
000429:0x001cda80:	rts
array<Param3<string,int,int>>::RemoveItem()
000479:0x001cdab0:	movefm	@c00, value
000479:0x001cdac0:	icall	
000479:0x001cdad0:	move	remove_index, #return
000481:0x001cdae0:	cmpi	remove_index, _i0
000481:0x001cdaf0:	blt	0x1cdb08
000483:0x001cdaf8:	ncalli	array<Param3<string,int,int>>.RemoveOrdered(remove_index)
000483:0x001cdb08:	rts
array<Param3<string,int,int>>::RemoveItemUnOrdered()
000489:0x001cdb38:	movefm	@c00, value
000489:0x001cdb48:	icall	
000489:0x001cdb58:	move	remove_index, #return
000491:0x001cdb68:	cmpi	remove_index, _i0
000491:0x001cdb78:	blt	0x1cdb90
000493:0x001cdb80:	ncalli	array<Param3<string,int,int>>.Remove(remove_index)
000493:0x001cdb90:	rts
array<Param3<string,int,int>>::IsValidIndex()
000499:0x001cdb98:	cmpi	index, _i-1
000499:0x001cdba8:	ble	0x1cdbe8
000499:0x001cdbb0:	ncalli	array<Param3<string,int,int>>.Count()
000499:0x001cdbb8:	cmpi	index, #return
000499:0x001cdbc8:	bge	0x1cdbe8
000499:0x001cdbd0:	imove	#return, 0x000001
000499:0x001cdbe0:	jump	0x1cdbf8
000499:0x001cdbe8:	imove	#return, 0x000000
000499:0x001cdbf8:	rts
000499:0x001cdc00:	rts
array<Param3<string,int,int>>::Debug()
000525:0x001cdc58:	ncalli	array<Param3<string,int,int>>.Count()
000525:0x001cdc60:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001cdc90:	icall	Print(#return)
000526:0x001cdca0:	imove	i, 0x000000
000526:0x001cdcb0:	jump	0x1cdcd0
000526:0x001cdcb8:	move	@m00, i
000526:0x001cdcc8:	inc	i
000526:0x001cdcd0:	ncalli	array<Param3<string,int,int>>.Count()
000526:0x001cdcd8:	cmpi	i, #return
000526:0x001cdce8:	bge	0x1cdd60
000528:0x001cdcf0:	icall	
000528:0x001cdd00:	movetm	item, #return
000529:0x001cdd10:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001cdd40:	icall	Print(#return)
000529:0x001cdd50:	release	item
000529:0x001cdd58:	jump	0x1cdcb8
000529:0x001cdd60:	rts
array<Param3<string,int,int>>::GetRandomIndex()
000544:0x001cdd68:	ncalli	array<Param3<string,int,int>>.Count()
000544:0x001cdd70:	move	@m00, #return
000544:0x001cdd80:	cmpi	@m00, _i0
000544:0x001cdd90:	ble	0x1cddc8
000546:0x001cdd98:	ncalli	array<Param3<string,int,int>>.Count()
000546:0x001cdda0:	icall	RandomInt(_i0, #return)
000546:0x001cddb0:	move	#return, #return
000546:0x001cddc0:	rts
000549:0x001cddc8:	imove	#return, 0xffffffff
000549:0x001cddd8:	rts
000549:0x001cdde0:	rts
array<Param3<string,int,int>>::GetRandomElement()
000563:0x001cdde8:	call	
000563:0x001cddf8:	icall	
000563:0x001cde08:	movetm	#return, #return
000563:0x001cde18:	rts
000563:0x001cde20:	rts
array<Param3<string,int,int>>::SwapItems()
000568:0x001cde50:	icall	
000568:0x001cde60:	movetm	item1, #return
000569:0x001cde70:	icall	
000569:0x001cde80:	icall	
000570:0x001cde90:	movefm	@c00, item1
000570:0x001cdea0:	icall	
000570:0x001cdeb0:	release	item1
000570:0x001cdeb8:	rts
array<Param3<string,int,int>>::InsertArray()
000575:0x001cdf10:	imove	i, 0x000000
000575:0x001cdf20:	jump	0x1cdf40
000575:0x001cdf28:	move	@m00, i
000575:0x001cdf38:	inc	i
000575:0x001cdf40:	ncalli	array<Param3<string,int,int>>.Count()
000575:0x001cdf48:	cmpi	i, #return
000575:0x001cdf58:	bge	0x1cdfb0
000577:0x001cdf60:	icall	
000577:0x001cdf70:	movetm	item, #return
000578:0x001cdf80:	movefm	@c00, item
000578:0x001cdf90:	icall	
000578:0x001cdfa0:	release	item
000578:0x001cdfa8:	jump	0x1cdf28
000578:0x001cdfb0:	rts
array<Param3<string,int,int>>::Invert()
000584:0x001ce030:	imove	left, 0x000000
000585:0x001ce040:	ncalli	array<Param3<string,int,int>>.Count()
000585:0x001ce048:	subi	right, #return, _i1
000586:0x001ce058:	cmpi	right, _i0
000586:0x001ce068:	ble	0x1ce128
000588:0x001ce070:	cmpi	left, right
000588:0x001ce080:	bge	0x1ce128
000590:0x001ce088:	icall	
000590:0x001ce098:	movetm	temp, #return
000591:0x001ce0a8:	move	@m00, left
000591:0x001ce0b8:	inc	left
000591:0x001ce0c0:	icall	
000591:0x001ce0d0:	icall	
000592:0x001ce0e0:	move	@m00, right
000592:0x001ce0f0:	dec	right
000592:0x001ce0f8:	movefm	@c00, temp
000592:0x001ce108:	icall	
000592:0x001ce118:	release	temp
000592:0x001ce120:	jump	0x1ce070
000592:0x001ce128:	rts
array<Param3<string,int,int>>::MoveIndex()
000612:0x001ce180:	ncalli	array<Param3<string,int,int>>.Count()
000612:0x001ce188:	move	count, #return
000613:0x001ce198:	move	new_index, curr_index
000615:0x001ce1a8:	cmpi	move_number, _i0
000615:0x001ce1b8:	ble	0x1ce1e0
000617:0x001ce1c0:	addi	@m00, curr_index, move_number
000617:0x001ce1d0:	move	new_index, @m00
000620:0x001ce1e0:	cmpi	move_number, _i0
000620:0x001ce1f0:	bge	0x1ce298
000622:0x001ce1f8:	subi	@m00, curr_index, move_number
000622:0x001ce208:	move	new_index, @m00
000624:0x001ce218:	cmpi	new_index, _i0
000624:0x001ce228:	bge	0x1ce298
000626:0x001ce230:	subi	@m01, _i0, count
000626:0x001ce240:	cmpi	new_index, @m01
000626:0x001ce250:	bgt	0x1ce278
000628:0x001ce258:	modi	@m00, new_index, count
000628:0x001ce268:	move	new_index, @m00
000631:0x001ce278:	addi	@m00, new_index, count
000631:0x001ce288:	move	new_index, @m00
000635:0x001ce298:	cmpi	new_index, count
000635:0x001ce2a8:	blt	0x1ce2d0
000637:0x001ce2b0:	modi	@m00, new_index, count
000637:0x001ce2c0:	move	new_index, @m00
000641:0x001ce2d0:	move	#return, new_index
000641:0x001ce2e0:	rts
000641:0x001ce2e8:	rts
array<Param3<string,int,int>>::ShuffleArray()
000646:0x001ce318:	imove	i, 0x000000
000646:0x001ce328:	jump	0x1ce348
000646:0x001ce330:	move	@m00, i
000646:0x001ce340:	inc	i
000646:0x001ce348:	ncalli	array<Param3<string,int,int>>.Count()
000646:0x001ce350:	cmpi	i, #return
000646:0x001ce360:	bge	0x1ce398
000648:0x001ce368:	call	
000648:0x001ce378:	call	
000648:0x001ce390:	jump	0x1ce330
000648:0x001ce398:	rts
array<Param3<string,int,int>>::DifferentAtPosition()
000666:0x001ce3c8:	ncalli	array<Param3<string,int,int>>.Count()
000666:0x001ce3d0:	move	@m00, #return
000666:0x001ce3e0:	push	#return
000666:0x001ce3e8:	ncalli	array<Param3<string,int,int>>.Count()
000666:0x001ce3f0:	move	@m02, #return
000666:0x001ce400:	pop	#return
000666:0x001ce408:	cmpi	@m00, @m02
000666:0x001ce418:	beq	0x1ce448
000668:0x001ce420:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001ce430:	imove	#return, 0xffffffff
000669:0x001ce440:	rts
000672:0x001ce448:	imove	i, 0x000000
000672:0x001ce458:	jump	0x1ce468
000672:0x001ce460:	inc	i
000672:0x001ce468:	ncalli	array<Param3<string,int,int>>.Count()
000672:0x001ce470:	cmpi	i, #return
000672:0x001ce480:	bge	0x1ce510
000674:0x001ce488:	icall	
000674:0x001ce498:	movec	@c00, #return
000674:0x001ce4a8:	pushc	#return
000674:0x001ce4b0:	icall	
000674:0x001ce4c0:	movec	@c02, #return
000674:0x001ce4d0:	popc	#return
000674:0x001ce4d8:	cmpc	@c00, @c02
000674:0x001ce4e8:	beq	0x1ce508
000676:0x001ce4f0:	move	#return, i
000676:0x001ce500:	rts
000676:0x001ce508:	jump	0x1ce460
000680:0x001ce510:	imove	#return, 0xffffffff
000680:0x001ce520:	rts
000680:0x001ce528:	rts
map<int,Param3<string,int,int>>::GetKeyArray()
000885:0x001ce828:	new	keys, array<int>
000886:0x001ce848:	imove	i, 0x000000
000886:0x001ce858:	jump	0x1ce878
000886:0x001ce860:	move	@m00, i
000886:0x001ce870:	inc	i
000886:0x001ce878:	ncalli	map<int,Param3<string,int,int>>.Count()
000886:0x001ce880:	cmpi	i, #return
000886:0x001ce890:	bge	0x1ce8c0
000888:0x001ce898:	icall	
000888:0x001ce8a8:	icall	
000888:0x001ce8b8:	jump	0x1ce860
000890:0x001ce8c0:	movem	#return, keys
000890:0x001ce8d0:	release	keys
000890:0x001ce8d8:	rts
000890:0x001ce8e0:	release	keys
000890:0x001ce8e8:	rts
map<int,Param3<string,int,int>>::GetValueArray()
000895:0x001ce940:	new	elements, array<Param3<string,int,int>>
000896:0x001ce960:	imove	i, 0x000000
000896:0x001ce970:	jump	0x1ce990
000896:0x001ce978:	move	@m00, i
000896:0x001ce988:	inc	i
000896:0x001ce990:	ncalli	map<int,Param3<string,int,int>>.Count()
000896:0x001ce998:	cmpi	i, #return
000896:0x001ce9a8:	bge	0x1ce9d8
000898:0x001ce9b0:	icall	
000898:0x001ce9c0:	icall	
000898:0x001ce9d0:	jump	0x1ce978
000900:0x001ce9d8:	movem	#return, elements
000900:0x001ce9e8:	release	elements
000900:0x001ce9f0:	rts
000900:0x001ce9f8:	release	elements
000900:0x001cea00:	rts
map<int,Param3<string,int,int>>::ReplaceKey()
000905:0x001cea08:	icall	
000905:0x001cea18:	cmpi	#return, _i0
000905:0x001cea28:	beq	0x1cea78
000907:0x001cea30:	icall	
000907:0x001cea40:	icall	
000908:0x001cea50:	icall	
000909:0x001cea60:	imove	#return, 0x000001
000909:0x001cea70:	rts
000911:0x001cea78:	imove	#return, 0x000000
000911:0x001cea88:	rts
000911:0x001cea90:	rts
map<int,Param3<string,int,int>>::GetKeyByValue()
000917:0x001ceae8:	imove	i, 0x000000
000917:0x001ceaf8:	jump	0x1ceb18
000917:0x001ceb00:	move	@m00, i
000917:0x001ceb10:	inc	i
000917:0x001ceb18:	ncalli	map<int,Param3<string,int,int>>.Count()
000917:0x001ceb20:	cmpi	i, #return
000917:0x001ceb30:	bge	0x1ceba0
000919:0x001ceb38:	icall	
000919:0x001ceb48:	movec	@c00, #return
000919:0x001ceb58:	cmpmc	@c00, value
000919:0x001ceb68:	bne	0x1ceb98
000921:0x001ceb70:	icall	
000921:0x001ceb80:	move	ret, #return
000922:0x001ceb90:	jump	0x1ceba0
000922:0x001ceb98:	jump	0x1ceb00
000926:0x001ceba0:	move	#return, ret
000926:0x001cebb0:	rts
000926:0x001cebb8:	rts
map<int,Param3<string,int,int>>::GetKeyByValueChecked()
000931:0x001cebe8:	imove	i, 0x000000
000931:0x001cebf8:	jump	0x1cec18
000931:0x001cec00:	move	@m00, i
000931:0x001cec10:	inc	i
000931:0x001cec18:	ncalli	map<int,Param3<string,int,int>>.Count()
000931:0x001cec20:	cmpi	i, #return
000931:0x001cec30:	bge	0x1cecc0
000933:0x001cec38:	icall	
000933:0x001cec48:	movec	@c00, #return
000933:0x001cec58:	cmpmc	@c00, value
000933:0x001cec68:	bne	0x1cecb8
000935:0x001cec70:	icall	
000935:0x001cec80:	move	key, #return
000936:0x001cec90:	imove	#return, 0x000001
000936:0x001ceca0:	move	key, key
000936:0x001cecb0:	rts
000936:0x001cecb8:	jump	0x1cec00
000939:0x001cecc0:	imove	#return, 0x000000
000939:0x001cecd0:	move	key, key
000939:0x001cece0:	rts
000939:0x001cece8:	move	key, key
000939:0x001cecf8:	rts
map<int,@Param3<string,int,int>>::GetKeyArray()
000885:0x001cf048:	new	keys, array<int>
000886:0x001cf068:	imove	i, 0x000000
000886:0x001cf078:	jump	0x1cf098
000886:0x001cf080:	move	@m00, i
000886:0x001cf090:	inc	i
000886:0x001cf098:	ncalli	map<int,@Param3<string,int,int>>.Count()
000886:0x001cf0a0:	cmpi	i, #return
000886:0x001cf0b0:	bge	0x1cf0e0
000888:0x001cf0b8:	icall	
000888:0x001cf0c8:	icall	
000888:0x001cf0d8:	jump	0x1cf080
000890:0x001cf0e0:	movem	#return, keys
000890:0x001cf0f0:	release	keys
000890:0x001cf0f8:	rts
000890:0x001cf100:	release	keys
000890:0x001cf108:	rts
map<int,@Param3<string,int,int>>::GetValueArray()
000895:0x001cf160:	new	elements, array<Param3<string,int,int>>
000896:0x001cf180:	imove	i, 0x000000
000896:0x001cf190:	jump	0x1cf1b0
000896:0x001cf198:	move	@m00, i
000896:0x001cf1a8:	inc	i
000896:0x001cf1b0:	ncalli	map<int,@Param3<string,int,int>>.Count()
000896:0x001cf1b8:	cmpi	i, #return
000896:0x001cf1c8:	bge	0x1cf1f8
000898:0x001cf1d0:	icall	
000898:0x001cf1e0:	icall	
000898:0x001cf1f0:	jump	0x1cf198
000900:0x001cf1f8:	movem	#return, elements
000900:0x001cf208:	release	elements
000900:0x001cf210:	rts
000900:0x001cf218:	release	elements
000900:0x001cf220:	rts
map<int,@Param3<string,int,int>>::ReplaceKey()
000905:0x001cf228:	icall	
000905:0x001cf238:	cmpi	#return, _i0
000905:0x001cf248:	beq	0x1cf298
000907:0x001cf250:	icall	
000907:0x001cf260:	icall	
000908:0x001cf270:	icall	
000909:0x001cf280:	imove	#return, 0x000001
000909:0x001cf290:	rts
000911:0x001cf298:	imove	#return, 0x000000
000911:0x001cf2a8:	rts
000911:0x001cf2b0:	rts
map<int,@Param3<string,int,int>>::GetKeyByValue()
000917:0x001cf308:	imove	i, 0x000000
000917:0x001cf318:	jump	0x1cf338
000917:0x001cf320:	move	@m00, i
000917:0x001cf330:	inc	i
000917:0x001cf338:	ncalli	map<int,@Param3<string,int,int>>.Count()
000917:0x001cf340:	cmpi	i, #return
000917:0x001cf350:	bge	0x1cf3c0
000919:0x001cf358:	icall	
000919:0x001cf368:	movec	@c00, #return
000919:0x001cf378:	cmpmc	@c00, value
000919:0x001cf388:	bne	0x1cf3b8
000921:0x001cf390:	icall	
000921:0x001cf3a0:	move	ret, #return
000922:0x001cf3b0:	jump	0x1cf3c0
000922:0x001cf3b8:	jump	0x1cf320
000926:0x001cf3c0:	move	#return, ret
000926:0x001cf3d0:	rts
000926:0x001cf3d8:	rts
map<int,@Param3<string,int,int>>::GetKeyByValueChecked()
000931:0x001cf408:	imove	i, 0x000000
000931:0x001cf418:	jump	0x1cf438
000931:0x001cf420:	move	@m00, i
000931:0x001cf430:	inc	i
000931:0x001cf438:	ncalli	map<int,@Param3<string,int,int>>.Count()
000931:0x001cf440:	cmpi	i, #return
000931:0x001cf450:	bge	0x1cf4e0
000933:0x001cf458:	icall	
000933:0x001cf468:	movec	@c00, #return
000933:0x001cf478:	cmpmc	@c00, value
000933:0x001cf488:	bne	0x1cf4d8
000935:0x001cf490:	icall	
000935:0x001cf4a0:	move	key, #return
000936:0x001cf4b0:	imove	#return, 0x000001
000936:0x001cf4c0:	move	key, key
000936:0x001cf4d0:	rts
000936:0x001cf4d8:	jump	0x1cf420
000939:0x001cf4e0:	imove	#return, 0x000000
000939:0x001cf4f0:	move	key, key
000939:0x001cf500:	rts
000939:0x001cf508:	move	key, key
000939:0x001cf518:	rts
array<Param3<string,float,float>>::InsertAll()
000427:0x001d0280:	imove	i, 0x000000
000427:0x001d0290:	jump	0x1d02b0
000427:0x001d0298:	move	@m00, i
000427:0x001d02a8:	inc	i
000427:0x001d02b0:	ncalli	array<Param3<string,float,float>>.Count()
000427:0x001d02b8:	cmpi	i, #return
000427:0x001d02c8:	bge	0x1d02f8
000429:0x001d02d0:	icall	
000429:0x001d02e0:	icall	
000429:0x001d02f0:	jump	0x1d0298
000429:0x001d02f8:	rts
array<Param3<string,float,float>>::RemoveItem()
000479:0x001d0328:	movefm	@c00, value
000479:0x001d0338:	icall	
000479:0x001d0348:	move	remove_index, #return
000481:0x001d0358:	cmpi	remove_index, _i0
000481:0x001d0368:	blt	0x1d0380
000483:0x001d0370:	ncalli	array<Param3<string,float,float>>.RemoveOrdered(remove_index)
000483:0x001d0380:	rts
array<Param3<string,float,float>>::RemoveItemUnOrdered()
000489:0x001d03b0:	movefm	@c00, value
000489:0x001d03c0:	icall	
000489:0x001d03d0:	move	remove_index, #return
000491:0x001d03e0:	cmpi	remove_index, _i0
000491:0x001d03f0:	blt	0x1d0408
000493:0x001d03f8:	ncalli	array<Param3<string,float,float>>.Remove(remove_index)
000493:0x001d0408:	rts
array<Param3<string,float,float>>::IsValidIndex()
000499:0x001d0410:	cmpi	index, _i-1
000499:0x001d0420:	ble	0x1d0460
000499:0x001d0428:	ncalli	array<Param3<string,float,float>>.Count()
000499:0x001d0430:	cmpi	index, #return
000499:0x001d0440:	bge	0x1d0460
000499:0x001d0448:	imove	#return, 0x000001
000499:0x001d0458:	jump	0x1d0470
000499:0x001d0460:	imove	#return, 0x000000
000499:0x001d0470:	rts
000499:0x001d0478:	rts
array<Param3<string,float,float>>::Debug()
000525:0x001d04d0:	ncalli	array<Param3<string,float,float>>.Count()
000525:0x001d04d8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001d0508:	icall	Print(#return)
000526:0x001d0518:	imove	i, 0x000000
000526:0x001d0528:	jump	0x1d0548
000526:0x001d0530:	move	@m00, i
000526:0x001d0540:	inc	i
000526:0x001d0548:	ncalli	array<Param3<string,float,float>>.Count()
000526:0x001d0550:	cmpi	i, #return
000526:0x001d0560:	bge	0x1d05d8
000528:0x001d0568:	icall	
000528:0x001d0578:	movetm	item, #return
000529:0x001d0588:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001d05b8:	icall	Print(#return)
000529:0x001d05c8:	release	item
000529:0x001d05d0:	jump	0x1d0530
000529:0x001d05d8:	rts
array<Param3<string,float,float>>::GetRandomIndex()
000544:0x001d05e0:	ncalli	array<Param3<string,float,float>>.Count()
000544:0x001d05e8:	move	@m00, #return
000544:0x001d05f8:	cmpi	@m00, _i0
000544:0x001d0608:	ble	0x1d0640
000546:0x001d0610:	ncalli	array<Param3<string,float,float>>.Count()
000546:0x001d0618:	icall	RandomInt(_i0, #return)
000546:0x001d0628:	move	#return, #return
000546:0x001d0638:	rts
000549:0x001d0640:	imove	#return, 0xffffffff
000549:0x001d0650:	rts
000549:0x001d0658:	rts
array<Param3<string,float,float>>::GetRandomElement()
000563:0x001d0660:	call	
000563:0x001d0670:	icall	
000563:0x001d0680:	movetm	#return, #return
000563:0x001d0690:	rts
000563:0x001d0698:	rts
array<Param3<string,float,float>>::SwapItems()
000568:0x001d06c8:	icall	
000568:0x001d06d8:	movetm	item1, #return
000569:0x001d06e8:	icall	
000569:0x001d06f8:	icall	
000570:0x001d0708:	movefm	@c00, item1
000570:0x001d0718:	icall	
000570:0x001d0728:	release	item1
000570:0x001d0730:	rts
array<Param3<string,float,float>>::InsertArray()
000575:0x001d0788:	imove	i, 0x000000
000575:0x001d0798:	jump	0x1d07b8
000575:0x001d07a0:	move	@m00, i
000575:0x001d07b0:	inc	i
000575:0x001d07b8:	ncalli	array<Param3<string,float,float>>.Count()
000575:0x001d07c0:	cmpi	i, #return
000575:0x001d07d0:	bge	0x1d0828
000577:0x001d07d8:	icall	
000577:0x001d07e8:	movetm	item, #return
000578:0x001d07f8:	movefm	@c00, item
000578:0x001d0808:	icall	
000578:0x001d0818:	release	item
000578:0x001d0820:	jump	0x1d07a0
000578:0x001d0828:	rts
array<Param3<string,float,float>>::Invert()
000584:0x001d08a8:	imove	left, 0x000000
000585:0x001d08b8:	ncalli	array<Param3<string,float,float>>.Count()
000585:0x001d08c0:	subi	right, #return, _i1
000586:0x001d08d0:	cmpi	right, _i0
000586:0x001d08e0:	ble	0x1d09a0
000588:0x001d08e8:	cmpi	left, right
000588:0x001d08f8:	bge	0x1d09a0
000590:0x001d0900:	icall	
000590:0x001d0910:	movetm	temp, #return
000591:0x001d0920:	move	@m00, left
000591:0x001d0930:	inc	left
000591:0x001d0938:	icall	
000591:0x001d0948:	icall	
000592:0x001d0958:	move	@m00, right
000592:0x001d0968:	dec	right
000592:0x001d0970:	movefm	@c00, temp
000592:0x001d0980:	icall	
000592:0x001d0990:	release	temp
000592:0x001d0998:	jump	0x1d08e8
000592:0x001d09a0:	rts
array<Param3<string,float,float>>::MoveIndex()
000612:0x001d09f8:	ncalli	array<Param3<string,float,float>>.Count()
000612:0x001d0a00:	move	count, #return
000613:0x001d0a10:	move	new_index, curr_index
000615:0x001d0a20:	cmpi	move_number, _i0
000615:0x001d0a30:	ble	0x1d0a58
000617:0x001d0a38:	addi	@m00, curr_index, move_number
000617:0x001d0a48:	move	new_index, @m00
000620:0x001d0a58:	cmpi	move_number, _i0
000620:0x001d0a68:	bge	0x1d0b10
000622:0x001d0a70:	subi	@m00, curr_index, move_number
000622:0x001d0a80:	move	new_index, @m00
000624:0x001d0a90:	cmpi	new_index, _i0
000624:0x001d0aa0:	bge	0x1d0b10
000626:0x001d0aa8:	subi	@m01, _i0, count
000626:0x001d0ab8:	cmpi	new_index, @m01
000626:0x001d0ac8:	bgt	0x1d0af0
000628:0x001d0ad0:	modi	@m00, new_index, count
000628:0x001d0ae0:	move	new_index, @m00
000631:0x001d0af0:	addi	@m00, new_index, count
000631:0x001d0b00:	move	new_index, @m00
000635:0x001d0b10:	cmpi	new_index, count
000635:0x001d0b20:	blt	0x1d0b48
000637:0x001d0b28:	modi	@m00, new_index, count
000637:0x001d0b38:	move	new_index, @m00
000641:0x001d0b48:	move	#return, new_index
000641:0x001d0b58:	rts
000641:0x001d0b60:	rts
array<Param3<string,float,float>>::ShuffleArray()
000646:0x001d0b90:	imove	i, 0x000000
000646:0x001d0ba0:	jump	0x1d0bc0
000646:0x001d0ba8:	move	@m00, i
000646:0x001d0bb8:	inc	i
000646:0x001d0bc0:	ncalli	array<Param3<string,float,float>>.Count()
000646:0x001d0bc8:	cmpi	i, #return
000646:0x001d0bd8:	bge	0x1d0c10
000648:0x001d0be0:	call	
000648:0x001d0bf0:	call	
000648:0x001d0c08:	jump	0x1d0ba8
000648:0x001d0c10:	rts
array<Param3<string,float,float>>::DifferentAtPosition()
000666:0x001d0c40:	ncalli	array<Param3<string,float,float>>.Count()
000666:0x001d0c48:	move	@m00, #return
000666:0x001d0c58:	push	#return
000666:0x001d0c60:	ncalli	array<Param3<string,float,float>>.Count()
000666:0x001d0c68:	move	@m02, #return
000666:0x001d0c78:	pop	#return
000666:0x001d0c80:	cmpi	@m00, @m02
000666:0x001d0c90:	beq	0x1d0cc0
000668:0x001d0c98:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001d0ca8:	imove	#return, 0xffffffff
000669:0x001d0cb8:	rts
000672:0x001d0cc0:	imove	i, 0x000000
000672:0x001d0cd0:	jump	0x1d0ce0
000672:0x001d0cd8:	inc	i
000672:0x001d0ce0:	ncalli	array<Param3<string,float,float>>.Count()
000672:0x001d0ce8:	cmpi	i, #return
000672:0x001d0cf8:	bge	0x1d0d88
000674:0x001d0d00:	icall	
000674:0x001d0d10:	movec	@c00, #return
000674:0x001d0d20:	pushc	#return
000674:0x001d0d28:	icall	
000674:0x001d0d38:	movec	@c02, #return
000674:0x001d0d48:	popc	#return
000674:0x001d0d50:	cmpc	@c00, @c02
000674:0x001d0d60:	beq	0x1d0d80
000676:0x001d0d68:	move	#return, i
000676:0x001d0d78:	rts
000676:0x001d0d80:	jump	0x1d0cd8
000680:0x001d0d88:	imove	#return, 0xffffffff
000680:0x001d0d98:	rts
000680:0x001d0da0:	rts
map<int,Param3<string,float,float>>::GetKeyArray()
000885:0x001d10a0:	new	keys, array<int>
000886:0x001d10c0:	imove	i, 0x000000
000886:0x001d10d0:	jump	0x1d10f0
000886:0x001d10d8:	move	@m00, i
000886:0x001d10e8:	inc	i
000886:0x001d10f0:	ncalli	map<int,Param3<string,float,float>>.Count()
000886:0x001d10f8:	cmpi	i, #return
000886:0x001d1108:	bge	0x1d1138
000888:0x001d1110:	icall	
000888:0x001d1120:	icall	
000888:0x001d1130:	jump	0x1d10d8
000890:0x001d1138:	movem	#return, keys
000890:0x001d1148:	release	keys
000890:0x001d1150:	rts
000890:0x001d1158:	release	keys
000890:0x001d1160:	rts
map<int,Param3<string,float,float>>::GetValueArray()
000895:0x001d11b8:	new	elements, array<Param3<string,float,float>>
000896:0x001d11d8:	imove	i, 0x000000
000896:0x001d11e8:	jump	0x1d1208
000896:0x001d11f0:	move	@m00, i
000896:0x001d1200:	inc	i
000896:0x001d1208:	ncalli	map<int,Param3<string,float,float>>.Count()
000896:0x001d1210:	cmpi	i, #return
000896:0x001d1220:	bge	0x1d1250
000898:0x001d1228:	icall	
000898:0x001d1238:	icall	
000898:0x001d1248:	jump	0x1d11f0
000900:0x001d1250:	movem	#return, elements
000900:0x001d1260:	release	elements
000900:0x001d1268:	rts
000900:0x001d1270:	release	elements
000900:0x001d1278:	rts
map<int,Param3<string,float,float>>::ReplaceKey()
000905:0x001d1280:	icall	
000905:0x001d1290:	cmpi	#return, _i0
000905:0x001d12a0:	beq	0x1d12f0
000907:0x001d12a8:	icall	
000907:0x001d12b8:	icall	
000908:0x001d12c8:	icall	
000909:0x001d12d8:	imove	#return, 0x000001
000909:0x001d12e8:	rts
000911:0x001d12f0:	imove	#return, 0x000000
000911:0x001d1300:	rts
000911:0x001d1308:	rts
map<int,Param3<string,float,float>>::GetKeyByValue()
000917:0x001d1360:	imove	i, 0x000000
000917:0x001d1370:	jump	0x1d1390
000917:0x001d1378:	move	@m00, i
000917:0x001d1388:	inc	i
000917:0x001d1390:	ncalli	map<int,Param3<string,float,float>>.Count()
000917:0x001d1398:	cmpi	i, #return
000917:0x001d13a8:	bge	0x1d1418
000919:0x001d13b0:	icall	
000919:0x001d13c0:	movec	@c00, #return
000919:0x001d13d0:	cmpmc	@c00, value
000919:0x001d13e0:	bne	0x1d1410
000921:0x001d13e8:	icall	
000921:0x001d13f8:	move	ret, #return
000922:0x001d1408:	jump	0x1d1418
000922:0x001d1410:	jump	0x1d1378
000926:0x001d1418:	move	#return, ret
000926:0x001d1428:	rts
000926:0x001d1430:	rts
map<int,Param3<string,float,float>>::GetKeyByValueChecked()
000931:0x001d1460:	imove	i, 0x000000
000931:0x001d1470:	jump	0x1d1490
000931:0x001d1478:	move	@m00, i
000931:0x001d1488:	inc	i
000931:0x001d1490:	ncalli	map<int,Param3<string,float,float>>.Count()
000931:0x001d1498:	cmpi	i, #return
000931:0x001d14a8:	bge	0x1d1538
000933:0x001d14b0:	icall	
000933:0x001d14c0:	movec	@c00, #return
000933:0x001d14d0:	cmpmc	@c00, value
000933:0x001d14e0:	bne	0x1d1530
000935:0x001d14e8:	icall	
000935:0x001d14f8:	move	key, #return
000936:0x001d1508:	imove	#return, 0x000001
000936:0x001d1518:	move	key, key
000936:0x001d1528:	rts
000936:0x001d1530:	jump	0x1d1478
000939:0x001d1538:	imove	#return, 0x000000
000939:0x001d1548:	move	key, key
000939:0x001d1558:	rts
000939:0x001d1560:	move	key, key
000939:0x001d1570:	rts
map<int,@Param3<string,float,float>>::GetKeyArray()
000885:0x001d18c0:	new	keys, array<int>
000886:0x001d18e0:	imove	i, 0x000000
000886:0x001d18f0:	jump	0x1d1910
000886:0x001d18f8:	move	@m00, i
000886:0x001d1908:	inc	i
000886:0x001d1910:	ncalli	map<int,@Param3<string,float,float>>.Count()
000886:0x001d1918:	cmpi	i, #return
000886:0x001d1928:	bge	0x1d1958
000888:0x001d1930:	icall	
000888:0x001d1940:	icall	
000888:0x001d1950:	jump	0x1d18f8
000890:0x001d1958:	movem	#return, keys
000890:0x001d1968:	release	keys
000890:0x001d1970:	rts
000890:0x001d1978:	release	keys
000890:0x001d1980:	rts
map<int,@Param3<string,float,float>>::GetValueArray()
000895:0x001d19d8:	new	elements, array<Param3<string,float,float>>
000896:0x001d19f8:	imove	i, 0x000000
000896:0x001d1a08:	jump	0x1d1a28
000896:0x001d1a10:	move	@m00, i
000896:0x001d1a20:	inc	i
000896:0x001d1a28:	ncalli	map<int,@Param3<string,float,float>>.Count()
000896:0x001d1a30:	cmpi	i, #return
000896:0x001d1a40:	bge	0x1d1a70
000898:0x001d1a48:	icall	
000898:0x001d1a58:	icall	
000898:0x001d1a68:	jump	0x1d1a10
000900:0x001d1a70:	movem	#return, elements
000900:0x001d1a80:	release	elements
000900:0x001d1a88:	rts
000900:0x001d1a90:	release	elements
000900:0x001d1a98:	rts
map<int,@Param3<string,float,float>>::ReplaceKey()
000905:0x001d1aa0:	icall	
000905:0x001d1ab0:	cmpi	#return, _i0
000905:0x001d1ac0:	beq	0x1d1b10
000907:0x001d1ac8:	icall	
000907:0x001d1ad8:	icall	
000908:0x001d1ae8:	icall	
000909:0x001d1af8:	imove	#return, 0x000001
000909:0x001d1b08:	rts
000911:0x001d1b10:	imove	#return, 0x000000
000911:0x001d1b20:	rts
000911:0x001d1b28:	rts
map<int,@Param3<string,float,float>>::GetKeyByValue()
000917:0x001d1b80:	imove	i, 0x000000
000917:0x001d1b90:	jump	0x1d1bb0
000917:0x001d1b98:	move	@m00, i
000917:0x001d1ba8:	inc	i
000917:0x001d1bb0:	ncalli	map<int,@Param3<string,float,float>>.Count()
000917:0x001d1bb8:	cmpi	i, #return
000917:0x001d1bc8:	bge	0x1d1c38
000919:0x001d1bd0:	icall	
000919:0x001d1be0:	movec	@c00, #return
000919:0x001d1bf0:	cmpmc	@c00, value
000919:0x001d1c00:	bne	0x1d1c30
000921:0x001d1c08:	icall	
000921:0x001d1c18:	move	ret, #return
000922:0x001d1c28:	jump	0x1d1c38
000922:0x001d1c30:	jump	0x1d1b98
000926:0x001d1c38:	move	#return, ret
000926:0x001d1c48:	rts
000926:0x001d1c50:	rts
map<int,@Param3<string,float,float>>::GetKeyByValueChecked()
000931:0x001d1c80:	imove	i, 0x000000
000931:0x001d1c90:	jump	0x1d1cb0
000931:0x001d1c98:	move	@m00, i
000931:0x001d1ca8:	inc	i
000931:0x001d1cb0:	ncalli	map<int,@Param3<string,float,float>>.Count()
000931:0x001d1cb8:	cmpi	i, #return
000931:0x001d1cc8:	bge	0x1d1d58
000933:0x001d1cd0:	icall	
000933:0x001d1ce0:	movec	@c00, #return
000933:0x001d1cf0:	cmpmc	@c00, value
000933:0x001d1d00:	bne	0x1d1d50
000935:0x001d1d08:	icall	
000935:0x001d1d18:	move	key, #return
000936:0x001d1d28:	imove	#return, 0x000001
000936:0x001d1d38:	move	key, key
000936:0x001d1d48:	rts
000936:0x001d1d50:	jump	0x1d1c98
000939:0x001d1d58:	imove	#return, 0x000000
000939:0x001d1d68:	move	key, key
000939:0x001d1d78:	rts
000939:0x001d1d80:	move	key, key
000939:0x001d1d90:	rts
array<WeightDebugData>::InsertAll()
000427:0x001d2ae0:	imove	i, 0x000000
000427:0x001d2af0:	jump	0x1d2b10
000427:0x001d2af8:	move	@m00, i
000427:0x001d2b08:	inc	i
000427:0x001d2b10:	ncalli	array<WeightDebugData>.Count()
000427:0x001d2b18:	cmpi	i, #return
000427:0x001d2b28:	bge	0x1d2b58
000429:0x001d2b30:	icall	
000429:0x001d2b40:	icall	
000429:0x001d2b50:	jump	0x1d2af8
000429:0x001d2b58:	rts
array<WeightDebugData>::RemoveItem()
000479:0x001d2b88:	movefm	@c00, value
000479:0x001d2b98:	icall	
000479:0x001d2ba8:	move	remove_index, #return
000481:0x001d2bb8:	cmpi	remove_index, _i0
000481:0x001d2bc8:	blt	0x1d2be0
000483:0x001d2bd0:	ncalli	array<WeightDebugData>.RemoveOrdered(remove_index)
000483:0x001d2be0:	rts
array<WeightDebugData>::RemoveItemUnOrdered()
000489:0x001d2c10:	movefm	@c00, value
000489:0x001d2c20:	icall	
000489:0x001d2c30:	move	remove_index, #return
000491:0x001d2c40:	cmpi	remove_index, _i0
000491:0x001d2c50:	blt	0x1d2c68
000493:0x001d2c58:	ncalli	array<WeightDebugData>.Remove(remove_index)
000493:0x001d2c68:	rts
array<WeightDebugData>::IsValidIndex()
000499:0x001d2c70:	cmpi	index, _i-1
000499:0x001d2c80:	ble	0x1d2cc0
000499:0x001d2c88:	ncalli	array<WeightDebugData>.Count()
000499:0x001d2c90:	cmpi	index, #return
000499:0x001d2ca0:	bge	0x1d2cc0
000499:0x001d2ca8:	imove	#return, 0x000001
000499:0x001d2cb8:	jump	0x1d2cd0
000499:0x001d2cc0:	imove	#return, 0x000000
000499:0x001d2cd0:	rts
000499:0x001d2cd8:	rts
array<WeightDebugData>::Debug()
000525:0x001d2d30:	ncalli	array<WeightDebugData>.Count()
000525:0x001d2d38:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001d2d68:	icall	Print(#return)
000526:0x001d2d78:	imove	i, 0x000000
000526:0x001d2d88:	jump	0x1d2da8
000526:0x001d2d90:	move	@m00, i
000526:0x001d2da0:	inc	i
000526:0x001d2da8:	ncalli	array<WeightDebugData>.Count()
000526:0x001d2db0:	cmpi	i, #return
000526:0x001d2dc0:	bge	0x1d2e38
000528:0x001d2dc8:	icall	
000528:0x001d2dd8:	movetm	item, #return
000529:0x001d2de8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001d2e18:	icall	Print(#return)
000529:0x001d2e28:	release	item
000529:0x001d2e30:	jump	0x1d2d90
000529:0x001d2e38:	rts
array<WeightDebugData>::GetRandomIndex()
000544:0x001d2e40:	ncalli	array<WeightDebugData>.Count()
000544:0x001d2e48:	move	@m00, #return
000544:0x001d2e58:	cmpi	@m00, _i0
000544:0x001d2e68:	ble	0x1d2ea0
000546:0x001d2e70:	ncalli	array<WeightDebugData>.Count()
000546:0x001d2e78:	icall	RandomInt(_i0, #return)
000546:0x001d2e88:	move	#return, #return
000546:0x001d2e98:	rts
000549:0x001d2ea0:	imove	#return, 0xffffffff
000549:0x001d2eb0:	rts
000549:0x001d2eb8:	rts
array<WeightDebugData>::GetRandomElement()
000563:0x001d2ec0:	call	
000563:0x001d2ed0:	icall	
000563:0x001d2ee0:	movetm	#return, #return
000563:0x001d2ef0:	rts
000563:0x001d2ef8:	rts
array<WeightDebugData>::SwapItems()
000568:0x001d2f28:	icall	
000568:0x001d2f38:	movetm	item1, #return
000569:0x001d2f48:	icall	
000569:0x001d2f58:	icall	
000570:0x001d2f68:	movefm	@c00, item1
000570:0x001d2f78:	icall	
000570:0x001d2f88:	release	item1
000570:0x001d2f90:	rts
array<WeightDebugData>::InsertArray()
000575:0x001d2fe8:	imove	i, 0x000000
000575:0x001d2ff8:	jump	0x1d3018
000575:0x001d3000:	move	@m00, i
000575:0x001d3010:	inc	i
000575:0x001d3018:	ncalli	array<WeightDebugData>.Count()
000575:0x001d3020:	cmpi	i, #return
000575:0x001d3030:	bge	0x1d3088
000577:0x001d3038:	icall	
000577:0x001d3048:	movetm	item, #return
000578:0x001d3058:	movefm	@c00, item
000578:0x001d3068:	icall	
000578:0x001d3078:	release	item
000578:0x001d3080:	jump	0x1d3000
000578:0x001d3088:	rts
array<WeightDebugData>::Invert()
000584:0x001d3108:	imove	left, 0x000000
000585:0x001d3118:	ncalli	array<WeightDebugData>.Count()
000585:0x001d3120:	subi	right, #return, _i1
000586:0x001d3130:	cmpi	right, _i0
000586:0x001d3140:	ble	0x1d3200
000588:0x001d3148:	cmpi	left, right
000588:0x001d3158:	bge	0x1d3200
000590:0x001d3160:	icall	
000590:0x001d3170:	movetm	temp, #return
000591:0x001d3180:	move	@m00, left
000591:0x001d3190:	inc	left
000591:0x001d3198:	icall	
000591:0x001d31a8:	icall	
000592:0x001d31b8:	move	@m00, right
000592:0x001d31c8:	dec	right
000592:0x001d31d0:	movefm	@c00, temp
000592:0x001d31e0:	icall	
000592:0x001d31f0:	release	temp
000592:0x001d31f8:	jump	0x1d3148
000592:0x001d3200:	rts
array<WeightDebugData>::MoveIndex()
000612:0x001d3258:	ncalli	array<WeightDebugData>.Count()
000612:0x001d3260:	move	count, #return
000613:0x001d3270:	move	new_index, curr_index
000615:0x001d3280:	cmpi	move_number, _i0
000615:0x001d3290:	ble	0x1d32b8
000617:0x001d3298:	addi	@m00, curr_index, move_number
000617:0x001d32a8:	move	new_index, @m00
000620:0x001d32b8:	cmpi	move_number, _i0
000620:0x001d32c8:	bge	0x1d3370
000622:0x001d32d0:	subi	@m00, curr_index, move_number
000622:0x001d32e0:	move	new_index, @m00
000624:0x001d32f0:	cmpi	new_index, _i0
000624:0x001d3300:	bge	0x1d3370
000626:0x001d3308:	subi	@m01, _i0, count
000626:0x001d3318:	cmpi	new_index, @m01
000626:0x001d3328:	bgt	0x1d3350
000628:0x001d3330:	modi	@m00, new_index, count
000628:0x001d3340:	move	new_index, @m00
000631:0x001d3350:	addi	@m00, new_index, count
000631:0x001d3360:	move	new_index, @m00
000635:0x001d3370:	cmpi	new_index, count
000635:0x001d3380:	blt	0x1d33a8
000637:0x001d3388:	modi	@m00, new_index, count
000637:0x001d3398:	move	new_index, @m00
000641:0x001d33a8:	move	#return, new_index
000641:0x001d33b8:	rts
000641:0x001d33c0:	rts
array<WeightDebugData>::ShuffleArray()
000646:0x001d33f0:	imove	i, 0x000000
000646:0x001d3400:	jump	0x1d3420
000646:0x001d3408:	move	@m00, i
000646:0x001d3418:	inc	i
000646:0x001d3420:	ncalli	array<WeightDebugData>.Count()
000646:0x001d3428:	cmpi	i, #return
000646:0x001d3438:	bge	0x1d3470
000648:0x001d3440:	call	
000648:0x001d3450:	call	
000648:0x001d3468:	jump	0x1d3408
000648:0x001d3470:	rts
array<WeightDebugData>::DifferentAtPosition()
000666:0x001d34a0:	ncalli	array<WeightDebugData>.Count()
000666:0x001d34a8:	move	@m00, #return
000666:0x001d34b8:	push	#return
000666:0x001d34c0:	ncalli	array<WeightDebugData>.Count()
000666:0x001d34c8:	move	@m02, #return
000666:0x001d34d8:	pop	#return
000666:0x001d34e0:	cmpi	@m00, @m02
000666:0x001d34f0:	beq	0x1d3520
000668:0x001d34f8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001d3508:	imove	#return, 0xffffffff
000669:0x001d3518:	rts
000672:0x001d3520:	imove	i, 0x000000
000672:0x001d3530:	jump	0x1d3540
000672:0x001d3538:	inc	i
000672:0x001d3540:	ncalli	array<WeightDebugData>.Count()
000672:0x001d3548:	cmpi	i, #return
000672:0x001d3558:	bge	0x1d35e8
000674:0x001d3560:	icall	
000674:0x001d3570:	movec	@c00, #return
000674:0x001d3580:	pushc	#return
000674:0x001d3588:	icall	
000674:0x001d3598:	movec	@c02, #return
000674:0x001d35a8:	popc	#return
000674:0x001d35b0:	cmpc	@c00, @c02
000674:0x001d35c0:	beq	0x1d35e0
000676:0x001d35c8:	move	#return, i
000676:0x001d35d8:	rts
000676:0x001d35e0:	jump	0x1d3538
000680:0x001d35e8:	imove	#return, 0xffffffff
000680:0x001d35f8:	rts
000680:0x001d3600:	rts
map<EntityAI,WeightDebugData>::GetKeyArray()
000885:0x001d3900:	new	keys, array<EntityAI>
000886:0x001d3920:	imove	i, 0x000000
000886:0x001d3930:	jump	0x1d3950
000886:0x001d3938:	move	@m00, i
000886:0x001d3948:	inc	i
000886:0x001d3950:	ncalli	map<EntityAI,WeightDebugData>.Count()
000886:0x001d3958:	cmpi	i, #return
000886:0x001d3968:	bge	0x1d3998
000888:0x001d3970:	icall	
000888:0x001d3980:	icall	
000888:0x001d3990:	jump	0x1d3938
000890:0x001d3998:	movem	#return, keys
000890:0x001d39a8:	release	keys
000890:0x001d39b0:	rts
000890:0x001d39b8:	release	keys
000890:0x001d39c0:	rts
map<EntityAI,WeightDebugData>::GetValueArray()
000895:0x001d3a18:	new	elements, array<WeightDebugData>
000896:0x001d3a38:	imove	i, 0x000000
000896:0x001d3a48:	jump	0x1d3a68
000896:0x001d3a50:	move	@m00, i
000896:0x001d3a60:	inc	i
000896:0x001d3a68:	ncalli	map<EntityAI,WeightDebugData>.Count()
000896:0x001d3a70:	cmpi	i, #return
000896:0x001d3a80:	bge	0x1d3ab0
000898:0x001d3a88:	icall	
000898:0x001d3a98:	icall	
000898:0x001d3aa8:	jump	0x1d3a50
000900:0x001d3ab0:	movem	#return, elements
000900:0x001d3ac0:	release	elements
000900:0x001d3ac8:	rts
000900:0x001d3ad0:	release	elements
000900:0x001d3ad8:	rts
map<EntityAI,WeightDebugData>::ReplaceKey()
000905:0x001d3ae0:	movefm	@c00, old_key
000905:0x001d3af0:	icall	
000905:0x001d3b00:	cmpi	#return, _i0
000905:0x001d3b10:	beq	0x1d3b90
000907:0x001d3b18:	movefm	@c00, new_key
000907:0x001d3b28:	movefm	@c01, old_key
000907:0x001d3b38:	icall	
000907:0x001d3b48:	icall	
000908:0x001d3b58:	movefm	@c00, old_key
000908:0x001d3b68:	icall	
000909:0x001d3b78:	imove	#return, 0x000001
000909:0x001d3b88:	rts
000911:0x001d3b90:	imove	#return, 0x000000
000911:0x001d3ba0:	rts
000911:0x001d3ba8:	rts
map<EntityAI,WeightDebugData>::GetKeyByValue()
000917:0x001d3c00:	imove	i, 0x000000
000917:0x001d3c10:	jump	0x1d3c30
000917:0x001d3c18:	move	@m00, i
000917:0x001d3c28:	inc	i
000917:0x001d3c30:	ncalli	map<EntityAI,WeightDebugData>.Count()
000917:0x001d3c38:	cmpi	i, #return
000917:0x001d3c48:	bge	0x1d3cb8
000919:0x001d3c50:	icall	
000919:0x001d3c60:	movec	@c00, #return
000919:0x001d3c70:	cmpmc	@c00, value
000919:0x001d3c80:	bne	0x1d3cb0
000921:0x001d3c88:	icall	
000921:0x001d3c98:	movetm	ret, #return
000922:0x001d3ca8:	jump	0x1d3cb8
000922:0x001d3cb0:	jump	0x1d3c18
000926:0x001d3cb8:	movem	#return, ret
000926:0x001d3cc8:	release	ret
000926:0x001d3cd0:	rts
000926:0x001d3cd8:	release	ret
000926:0x001d3ce0:	rts
map<EntityAI,WeightDebugData>::GetKeyByValueChecked()
000931:0x001d3d10:	imove	i, 0x000000
000931:0x001d3d20:	jump	0x1d3d40
000931:0x001d3d28:	move	@m00, i
000931:0x001d3d38:	inc	i
000931:0x001d3d40:	ncalli	map<EntityAI,WeightDebugData>.Count()
000931:0x001d3d48:	cmpi	i, #return
000931:0x001d3d58:	bge	0x1d3de8
000933:0x001d3d60:	icall	
000933:0x001d3d70:	movec	@c00, #return
000933:0x001d3d80:	cmpmc	@c00, value
000933:0x001d3d90:	bne	0x1d3de0
000935:0x001d3d98:	icall	
000935:0x001d3da8:	movetm	key, #return
000936:0x001d3db8:	imove	#return, 0x000001
000936:0x001d3dc8:	movem	key, key
000936:0x001d3dd8:	rts
000936:0x001d3de0:	jump	0x1d3d28
000939:0x001d3de8:	imove	#return, 0x000000
000939:0x001d3df8:	movem	key, key
000939:0x001d3e08:	rts
000939:0x001d3e10:	movem	key, key
000939:0x001d3e20:	rts
map<EntityAI,@WeightDebugData>::GetKeyArray()
000885:0x001d4170:	new	keys, array<EntityAI>
000886:0x001d4190:	imove	i, 0x000000
000886:0x001d41a0:	jump	0x1d41c0
000886:0x001d41a8:	move	@m00, i
000886:0x001d41b8:	inc	i
000886:0x001d41c0:	ncalli	map<EntityAI,@WeightDebugData>.Count()
000886:0x001d41c8:	cmpi	i, #return
000886:0x001d41d8:	bge	0x1d4208
000888:0x001d41e0:	icall	
000888:0x001d41f0:	icall	
000888:0x001d4200:	jump	0x1d41a8
000890:0x001d4208:	movem	#return, keys
000890:0x001d4218:	release	keys
000890:0x001d4220:	rts
000890:0x001d4228:	release	keys
000890:0x001d4230:	rts
map<EntityAI,@WeightDebugData>::GetValueArray()
000895:0x001d4288:	new	elements, array<WeightDebugData>
000896:0x001d42a8:	imove	i, 0x000000
000896:0x001d42b8:	jump	0x1d42d8
000896:0x001d42c0:	move	@m00, i
000896:0x001d42d0:	inc	i
000896:0x001d42d8:	ncalli	map<EntityAI,@WeightDebugData>.Count()
000896:0x001d42e0:	cmpi	i, #return
000896:0x001d42f0:	bge	0x1d4320
000898:0x001d42f8:	icall	
000898:0x001d4308:	icall	
000898:0x001d4318:	jump	0x1d42c0
000900:0x001d4320:	movem	#return, elements
000900:0x001d4330:	release	elements
000900:0x001d4338:	rts
000900:0x001d4340:	release	elements
000900:0x001d4348:	rts
map<EntityAI,@WeightDebugData>::ReplaceKey()
000905:0x001d4350:	movefm	@c00, old_key
000905:0x001d4360:	icall	
000905:0x001d4370:	cmpi	#return, _i0
000905:0x001d4380:	beq	0x1d4400
000907:0x001d4388:	movefm	@c00, new_key
000907:0x001d4398:	movefm	@c01, old_key
000907:0x001d43a8:	icall	
000907:0x001d43b8:	icall	
000908:0x001d43c8:	movefm	@c00, old_key
000908:0x001d43d8:	icall	
000909:0x001d43e8:	imove	#return, 0x000001
000909:0x001d43f8:	rts
000911:0x001d4400:	imove	#return, 0x000000
000911:0x001d4410:	rts
000911:0x001d4418:	rts
map<EntityAI,@WeightDebugData>::GetKeyByValue()
000917:0x001d4470:	imove	i, 0x000000
000917:0x001d4480:	jump	0x1d44a0
000917:0x001d4488:	move	@m00, i
000917:0x001d4498:	inc	i
000917:0x001d44a0:	ncalli	map<EntityAI,@WeightDebugData>.Count()
000917:0x001d44a8:	cmpi	i, #return
000917:0x001d44b8:	bge	0x1d4528
000919:0x001d44c0:	icall	
000919:0x001d44d0:	movec	@c00, #return
000919:0x001d44e0:	cmpmc	@c00, value
000919:0x001d44f0:	bne	0x1d4520
000921:0x001d44f8:	icall	
000921:0x001d4508:	movetm	ret, #return
000922:0x001d4518:	jump	0x1d4528
000922:0x001d4520:	jump	0x1d4488
000926:0x001d4528:	movem	#return, ret
000926:0x001d4538:	release	ret
000926:0x001d4540:	rts
000926:0x001d4548:	release	ret
000926:0x001d4550:	rts
map<EntityAI,@WeightDebugData>::GetKeyByValueChecked()
000931:0x001d4580:	imove	i, 0x000000
000931:0x001d4590:	jump	0x1d45b0
000931:0x001d4598:	move	@m00, i
000931:0x001d45a8:	inc	i
000931:0x001d45b0:	ncalli	map<EntityAI,@WeightDebugData>.Count()
000931:0x001d45b8:	cmpi	i, #return
000931:0x001d45c8:	bge	0x1d4658
000933:0x001d45d0:	icall	
000933:0x001d45e0:	movec	@c00, #return
000933:0x001d45f0:	cmpmc	@c00, value
000933:0x001d4600:	bne	0x1d4650
000935:0x001d4608:	icall	
000935:0x001d4618:	movetm	key, #return
000936:0x001d4628:	imove	#return, 0x000001
000936:0x001d4638:	movem	key, key
000936:0x001d4648:	rts
000936:0x001d4650:	jump	0x1d4598
000939:0x001d4658:	imove	#return, 0x000000
000939:0x001d4668:	movem	key, key
000939:0x001d4678:	rts
000939:0x001d4680:	movem	key, key
000939:0x001d4690:	rts
set<Object>::InsertSet()
000736:0x001d4a08:	ncalli	set<Object>.Count()
000736:0x001d4a10:	move	count, #return
000737:0x001d4a20:	imove	i, 0x000000
000737:0x001d4a30:	jump	0x1d4a50
000737:0x001d4a38:	move	@m00, i
000737:0x001d4a48:	inc	i
000737:0x001d4a50:	cmpi	i, count
000737:0x001d4a60:	bge	0x1d4ab8
000739:0x001d4a68:	icall	
000739:0x001d4a78:	movetm	item, #return
000740:0x001d4a88:	movefm	@c00, item
000740:0x001d4a98:	icall	
000740:0x001d4aa8:	release	item
000740:0x001d4ab0:	jump	0x1d4a38
000740:0x001d4ab8:	rts
set<Object>::RemoveItem()
000746:0x001d4ae8:	movefm	@c00, value
000746:0x001d4af8:	icall	
000746:0x001d4b08:	move	remove_index, #return
000747:0x001d4b18:	cmpi	remove_index, _i0
000747:0x001d4b28:	blt	0x1d4b40
000749:0x001d4b30:	ncalli	set<Object>.Remove(remove_index)
000749:0x001d4b40:	rts
set<Object>::RemoveItems()
000755:0x001d4bc0:	ncalli	set<Object>.Count()
000755:0x001d4bc8:	move	count, #return
000756:0x001d4bd8:	imove	i, 0x000000
000756:0x001d4be8:	jump	0x1d4c08
000756:0x001d4bf0:	move	@m00, i
000756:0x001d4c00:	inc	i
000756:0x001d4c08:	cmpi	i, count
000756:0x001d4c18:	bge	0x1d4c60
000758:0x001d4c20:	icall	
000758:0x001d4c30:	movetm	item, #return
000759:0x001d4c40:	call	
000759:0x001d4c50:	release	item
000759:0x001d4c58:	jump	0x1d4bf0
000759:0x001d4c60:	rts
set<Object>::Debug()
000765:0x001d4ce0:	ncalli	set<Object>.Count()
000765:0x001d4ce8:	icall	Format(_s'Set count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000765:0x001d4d18:	icall	Print(#return)
000766:0x001d4d28:	imove	i, 0x000000
000766:0x001d4d38:	jump	0x1d4d58
000766:0x001d4d40:	move	@m00, i
000766:0x001d4d50:	inc	i
000766:0x001d4d58:	ncalli	set<Object>.Count()
000766:0x001d4d60:	cmpi	i, #return
000766:0x001d4d70:	bge	0x1d4de8
000768:0x001d4d78:	icall	
000768:0x001d4d88:	movetm	item, #return
000769:0x001d4d98:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000769:0x001d4dc8:	icall	Print(#return)
000769:0x001d4dd8:	release	item
000769:0x001d4de0:	jump	0x1d4d40
000769:0x001d4de8:	rts
array<RaycastRVResult>::InsertAll()
000427:0x001d5620:	imove	i, 0x000000
000427:0x001d5630:	jump	0x1d5650
000427:0x001d5638:	move	@m00, i
000427:0x001d5648:	inc	i
000427:0x001d5650:	ncalli	array<RaycastRVResult>.Count()
000427:0x001d5658:	cmpi	i, #return
000427:0x001d5668:	bge	0x1d5698
000429:0x001d5670:	icall	
000429:0x001d5680:	icall	
000429:0x001d5690:	jump	0x1d5638
000429:0x001d5698:	rts
array<RaycastRVResult>::RemoveItem()
000479:0x001d56c8:	movefm	@c00, value
000479:0x001d56d8:	icall	
000479:0x001d56e8:	move	remove_index, #return
000481:0x001d56f8:	cmpi	remove_index, _i0
000481:0x001d5708:	blt	0x1d5720
000483:0x001d5710:	ncalli	array<RaycastRVResult>.RemoveOrdered(remove_index)
000483:0x001d5720:	rts
array<RaycastRVResult>::RemoveItemUnOrdered()
000489:0x001d5750:	movefm	@c00, value
000489:0x001d5760:	icall	
000489:0x001d5770:	move	remove_index, #return
000491:0x001d5780:	cmpi	remove_index, _i0
000491:0x001d5790:	blt	0x1d57a8
000493:0x001d5798:	ncalli	array<RaycastRVResult>.Remove(remove_index)
000493:0x001d57a8:	rts
array<RaycastRVResult>::IsValidIndex()
000499:0x001d57b0:	cmpi	index, _i-1
000499:0x001d57c0:	ble	0x1d5800
000499:0x001d57c8:	ncalli	array<RaycastRVResult>.Count()
000499:0x001d57d0:	cmpi	index, #return
000499:0x001d57e0:	bge	0x1d5800
000499:0x001d57e8:	imove	#return, 0x000001
000499:0x001d57f8:	jump	0x1d5810
000499:0x001d5800:	imove	#return, 0x000000
000499:0x001d5810:	rts
000499:0x001d5818:	rts
array<RaycastRVResult>::Debug()
000525:0x001d5870:	ncalli	array<RaycastRVResult>.Count()
000525:0x001d5878:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001d58a8:	icall	Print(#return)
000526:0x001d58b8:	imove	i, 0x000000
000526:0x001d58c8:	jump	0x1d58e8
000526:0x001d58d0:	move	@m00, i
000526:0x001d58e0:	inc	i
000526:0x001d58e8:	ncalli	array<RaycastRVResult>.Count()
000526:0x001d58f0:	cmpi	i, #return
000526:0x001d5900:	bge	0x1d5978
000528:0x001d5908:	icall	
000528:0x001d5918:	movetm	item, #return
000529:0x001d5928:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001d5958:	icall	Print(#return)
000529:0x001d5968:	release	item
000529:0x001d5970:	jump	0x1d58d0
000529:0x001d5978:	rts
array<RaycastRVResult>::GetRandomIndex()
000544:0x001d5980:	ncalli	array<RaycastRVResult>.Count()
000544:0x001d5988:	move	@m00, #return
000544:0x001d5998:	cmpi	@m00, _i0
000544:0x001d59a8:	ble	0x1d59e0
000546:0x001d59b0:	ncalli	array<RaycastRVResult>.Count()
000546:0x001d59b8:	icall	RandomInt(_i0, #return)
000546:0x001d59c8:	move	#return, #return
000546:0x001d59d8:	rts
000549:0x001d59e0:	imove	#return, 0xffffffff
000549:0x001d59f0:	rts
000549:0x001d59f8:	rts
array<RaycastRVResult>::GetRandomElement()
000563:0x001d5a00:	call	
000563:0x001d5a10:	icall	
000563:0x001d5a20:	movetm	#return, #return
000563:0x001d5a30:	rts
000563:0x001d5a38:	rts
array<RaycastRVResult>::SwapItems()
000568:0x001d5a68:	icall	
000568:0x001d5a78:	movetm	item1, #return
000569:0x001d5a88:	icall	
000569:0x001d5a98:	icall	
000570:0x001d5aa8:	movefm	@c00, item1
000570:0x001d5ab8:	icall	
000570:0x001d5ac8:	release	item1
000570:0x001d5ad0:	rts
array<RaycastRVResult>::InsertArray()
000575:0x001d5b28:	imove	i, 0x000000
000575:0x001d5b38:	jump	0x1d5b58
000575:0x001d5b40:	move	@m00, i
000575:0x001d5b50:	inc	i
000575:0x001d5b58:	ncalli	array<RaycastRVResult>.Count()
000575:0x001d5b60:	cmpi	i, #return
000575:0x001d5b70:	bge	0x1d5bc8
000577:0x001d5b78:	icall	
000577:0x001d5b88:	movetm	item, #return
000578:0x001d5b98:	movefm	@c00, item
000578:0x001d5ba8:	icall	
000578:0x001d5bb8:	release	item
000578:0x001d5bc0:	jump	0x1d5b40
000578:0x001d5bc8:	rts
array<RaycastRVResult>::Invert()
000584:0x001d5c48:	imove	left, 0x000000
000585:0x001d5c58:	ncalli	array<RaycastRVResult>.Count()
000585:0x001d5c60:	subi	right, #return, _i1
000586:0x001d5c70:	cmpi	right, _i0
000586:0x001d5c80:	ble	0x1d5d40
000588:0x001d5c88:	cmpi	left, right
000588:0x001d5c98:	bge	0x1d5d40
000590:0x001d5ca0:	icall	
000590:0x001d5cb0:	movetm	temp, #return
000591:0x001d5cc0:	move	@m00, left
000591:0x001d5cd0:	inc	left
000591:0x001d5cd8:	icall	
000591:0x001d5ce8:	icall	
000592:0x001d5cf8:	move	@m00, right
000592:0x001d5d08:	dec	right
000592:0x001d5d10:	movefm	@c00, temp
000592:0x001d5d20:	icall	
000592:0x001d5d30:	release	temp
000592:0x001d5d38:	jump	0x1d5c88
000592:0x001d5d40:	rts
array<RaycastRVResult>::MoveIndex()
000612:0x001d5d98:	ncalli	array<RaycastRVResult>.Count()
000612:0x001d5da0:	move	count, #return
000613:0x001d5db0:	move	new_index, curr_index
000615:0x001d5dc0:	cmpi	move_number, _i0
000615:0x001d5dd0:	ble	0x1d5df8
000617:0x001d5dd8:	addi	@m00, curr_index, move_number
000617:0x001d5de8:	move	new_index, @m00
000620:0x001d5df8:	cmpi	move_number, _i0
000620:0x001d5e08:	bge	0x1d5eb0
000622:0x001d5e10:	subi	@m00, curr_index, move_number
000622:0x001d5e20:	move	new_index, @m00
000624:0x001d5e30:	cmpi	new_index, _i0
000624:0x001d5e40:	bge	0x1d5eb0
000626:0x001d5e48:	subi	@m01, _i0, count
000626:0x001d5e58:	cmpi	new_index, @m01
000626:0x001d5e68:	bgt	0x1d5e90
000628:0x001d5e70:	modi	@m00, new_index, count
000628:0x001d5e80:	move	new_index, @m00
000631:0x001d5e90:	addi	@m00, new_index, count
000631:0x001d5ea0:	move	new_index, @m00
000635:0x001d5eb0:	cmpi	new_index, count
000635:0x001d5ec0:	blt	0x1d5ee8
000637:0x001d5ec8:	modi	@m00, new_index, count
000637:0x001d5ed8:	move	new_index, @m00
000641:0x001d5ee8:	move	#return, new_index
000641:0x001d5ef8:	rts
000641:0x001d5f00:	rts
array<RaycastRVResult>::ShuffleArray()
000646:0x001d5f30:	imove	i, 0x000000
000646:0x001d5f40:	jump	0x1d5f60
000646:0x001d5f48:	move	@m00, i
000646:0x001d5f58:	inc	i
000646:0x001d5f60:	ncalli	array<RaycastRVResult>.Count()
000646:0x001d5f68:	cmpi	i, #return
000646:0x001d5f78:	bge	0x1d5fb0
000648:0x001d5f80:	call	
000648:0x001d5f90:	call	
000648:0x001d5fa8:	jump	0x1d5f48
000648:0x001d5fb0:	rts
array<RaycastRVResult>::DifferentAtPosition()
000666:0x001d5fe0:	ncalli	array<RaycastRVResult>.Count()
000666:0x001d5fe8:	move	@m00, #return
000666:0x001d5ff8:	push	#return
000666:0x001d6000:	ncalli	array<RaycastRVResult>.Count()
000666:0x001d6008:	move	@m02, #return
000666:0x001d6018:	pop	#return
000666:0x001d6020:	cmpi	@m00, @m02
000666:0x001d6030:	beq	0x1d6060
000668:0x001d6038:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001d6048:	imove	#return, 0xffffffff
000669:0x001d6058:	rts
000672:0x001d6060:	imove	i, 0x000000
000672:0x001d6070:	jump	0x1d6080
000672:0x001d6078:	inc	i
000672:0x001d6080:	ncalli	array<RaycastRVResult>.Count()
000672:0x001d6088:	cmpi	i, #return
000672:0x001d6098:	bge	0x1d6128
000674:0x001d60a0:	icall	
000674:0x001d60b0:	movec	@c00, #return
000674:0x001d60c0:	pushc	#return
000674:0x001d60c8:	icall	
000674:0x001d60d8:	movec	@c02, #return
000674:0x001d60e8:	popc	#return
000674:0x001d60f0:	cmpc	@c00, @c02
000674:0x001d6100:	beq	0x1d6120
000676:0x001d6108:	move	#return, i
000676:0x001d6118:	rts
000676:0x001d6120:	jump	0x1d6078
000680:0x001d6128:	imove	#return, 0xffffffff
000680:0x001d6138:	rts
000680:0x001d6140:	rts
array<@RaycastRVResult>::InsertAll()
000427:0x001d6558:	imove	i, 0x000000
000427:0x001d6568:	jump	0x1d6588
000427:0x001d6570:	move	@m00, i
000427:0x001d6580:	inc	i
000427:0x001d6588:	ncalli	array<RaycastRVResult>.Count()
000427:0x001d6590:	cmpi	i, #return
000427:0x001d65a0:	bge	0x1d65d0
000429:0x001d65a8:	icall	
000429:0x001d65b8:	icall	
000429:0x001d65c8:	jump	0x1d6570
000429:0x001d65d0:	rts
array<@RaycastRVResult>::RemoveItem()
000479:0x001d6600:	movefm	@c00, value
000479:0x001d6610:	icall	
000479:0x001d6620:	move	remove_index, #return
000481:0x001d6630:	cmpi	remove_index, _i0
000481:0x001d6640:	blt	0x1d6658
000483:0x001d6648:	ncalli	array<@RaycastRVResult>.RemoveOrdered(remove_index)
000483:0x001d6658:	rts
array<@RaycastRVResult>::RemoveItemUnOrdered()
000489:0x001d6688:	movefm	@c00, value
000489:0x001d6698:	icall	
000489:0x001d66a8:	move	remove_index, #return
000491:0x001d66b8:	cmpi	remove_index, _i0
000491:0x001d66c8:	blt	0x1d66e0
000493:0x001d66d0:	ncalli	array<@RaycastRVResult>.Remove(remove_index)
000493:0x001d66e0:	rts
array<@RaycastRVResult>::IsValidIndex()
000499:0x001d66e8:	cmpi	index, _i-1
000499:0x001d66f8:	ble	0x1d6738
000499:0x001d6700:	ncalli	array<@RaycastRVResult>.Count()
000499:0x001d6708:	cmpi	index, #return
000499:0x001d6718:	bge	0x1d6738
000499:0x001d6720:	imove	#return, 0x000001
000499:0x001d6730:	jump	0x1d6748
000499:0x001d6738:	imove	#return, 0x000000
000499:0x001d6748:	rts
000499:0x001d6750:	rts
array<@RaycastRVResult>::Debug()
000525:0x001d67a8:	ncalli	array<@RaycastRVResult>.Count()
000525:0x001d67b0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001d67e0:	icall	Print(#return)
000526:0x001d67f0:	imove	i, 0x000000
000526:0x001d6800:	jump	0x1d6820
000526:0x001d6808:	move	@m00, i
000526:0x001d6818:	inc	i
000526:0x001d6820:	ncalli	array<@RaycastRVResult>.Count()
000526:0x001d6828:	cmpi	i, #return
000526:0x001d6838:	bge	0x1d68b0
000528:0x001d6840:	icall	
000528:0x001d6850:	movetm	item, #return
000529:0x001d6860:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001d6890:	icall	Print(#return)
000529:0x001d68a0:	release	item
000529:0x001d68a8:	jump	0x1d6808
000529:0x001d68b0:	rts
array<@RaycastRVResult>::GetRandomIndex()
000544:0x001d68b8:	ncalli	array<@RaycastRVResult>.Count()
000544:0x001d68c0:	move	@m00, #return
000544:0x001d68d0:	cmpi	@m00, _i0
000544:0x001d68e0:	ble	0x1d6918
000546:0x001d68e8:	ncalli	array<@RaycastRVResult>.Count()
000546:0x001d68f0:	icall	RandomInt(_i0, #return)
000546:0x001d6900:	move	#return, #return
000546:0x001d6910:	rts
000549:0x001d6918:	imove	#return, 0xffffffff
000549:0x001d6928:	rts
000549:0x001d6930:	rts
array<@RaycastRVResult>::GetRandomElement()
000563:0x001d6938:	call	
000563:0x001d6948:	icall	
000563:0x001d6958:	movetm	#return, #return
000563:0x001d6968:	rts
000563:0x001d6970:	rts
array<@RaycastRVResult>::SwapItems()
000568:0x001d69a0:	icall	
000568:0x001d69b0:	movetm	item1, #return
000569:0x001d69c0:	icall	
000569:0x001d69d0:	icall	
000570:0x001d69e0:	movefm	@c00, item1
000570:0x001d69f0:	icall	
000570:0x001d6a00:	release	item1
000570:0x001d6a08:	rts
array<@RaycastRVResult>::InsertArray()
000575:0x001d6a60:	imove	i, 0x000000
000575:0x001d6a70:	jump	0x1d6a90
000575:0x001d6a78:	move	@m00, i
000575:0x001d6a88:	inc	i
000575:0x001d6a90:	ncalli	array<RaycastRVResult>.Count()
000575:0x001d6a98:	cmpi	i, #return
000575:0x001d6aa8:	bge	0x1d6b00
000577:0x001d6ab0:	icall	
000577:0x001d6ac0:	movetm	item, #return
000578:0x001d6ad0:	movefm	@c00, item
000578:0x001d6ae0:	icall	
000578:0x001d6af0:	release	item
000578:0x001d6af8:	jump	0x1d6a78
000578:0x001d6b00:	rts
array<@RaycastRVResult>::Invert()
000584:0x001d6b80:	imove	left, 0x000000
000585:0x001d6b90:	ncalli	array<@RaycastRVResult>.Count()
000585:0x001d6b98:	subi	right, #return, _i1
000586:0x001d6ba8:	cmpi	right, _i0
000586:0x001d6bb8:	ble	0x1d6c78
000588:0x001d6bc0:	cmpi	left, right
000588:0x001d6bd0:	bge	0x1d6c78
000590:0x001d6bd8:	icall	
000590:0x001d6be8:	movetm	temp, #return
000591:0x001d6bf8:	move	@m00, left
000591:0x001d6c08:	inc	left
000591:0x001d6c10:	icall	
000591:0x001d6c20:	icall	
000592:0x001d6c30:	move	@m00, right
000592:0x001d6c40:	dec	right
000592:0x001d6c48:	movefm	@c00, temp
000592:0x001d6c58:	icall	
000592:0x001d6c68:	release	temp
000592:0x001d6c70:	jump	0x1d6bc0
000592:0x001d6c78:	rts
array<@RaycastRVResult>::MoveIndex()
000612:0x001d6cd0:	ncalli	array<@RaycastRVResult>.Count()
000612:0x001d6cd8:	move	count, #return
000613:0x001d6ce8:	move	new_index, curr_index
000615:0x001d6cf8:	cmpi	move_number, _i0
000615:0x001d6d08:	ble	0x1d6d30
000617:0x001d6d10:	addi	@m00, curr_index, move_number
000617:0x001d6d20:	move	new_index, @m00
000620:0x001d6d30:	cmpi	move_number, _i0
000620:0x001d6d40:	bge	0x1d6de8
000622:0x001d6d48:	subi	@m00, curr_index, move_number
000622:0x001d6d58:	move	new_index, @m00
000624:0x001d6d68:	cmpi	new_index, _i0
000624:0x001d6d78:	bge	0x1d6de8
000626:0x001d6d80:	subi	@m01, _i0, count
000626:0x001d6d90:	cmpi	new_index, @m01
000626:0x001d6da0:	bgt	0x1d6dc8
000628:0x001d6da8:	modi	@m00, new_index, count
000628:0x001d6db8:	move	new_index, @m00
000631:0x001d6dc8:	addi	@m00, new_index, count
000631:0x001d6dd8:	move	new_index, @m00
000635:0x001d6de8:	cmpi	new_index, count
000635:0x001d6df8:	blt	0x1d6e20
000637:0x001d6e00:	modi	@m00, new_index, count
000637:0x001d6e10:	move	new_index, @m00
000641:0x001d6e20:	move	#return, new_index
000641:0x001d6e30:	rts
000641:0x001d6e38:	rts
array<@RaycastRVResult>::ShuffleArray()
000646:0x001d6e68:	imove	i, 0x000000
000646:0x001d6e78:	jump	0x1d6e98
000646:0x001d6e80:	move	@m00, i
000646:0x001d6e90:	inc	i
000646:0x001d6e98:	ncalli	array<@RaycastRVResult>.Count()
000646:0x001d6ea0:	cmpi	i, #return
000646:0x001d6eb0:	bge	0x1d6ee8
000648:0x001d6eb8:	call	
000648:0x001d6ec8:	call	
000648:0x001d6ee0:	jump	0x1d6e80
000648:0x001d6ee8:	rts
array<@RaycastRVResult>::DifferentAtPosition()
000666:0x001d6f18:	ncalli	array<@RaycastRVResult>.Count()
000666:0x001d6f20:	move	@m00, #return
000666:0x001d6f30:	ncalli	array<RaycastRVResult>.Count()
000666:0x001d6f38:	cmpi	@m00, #return
000666:0x001d6f48:	beq	0x1d6f78
000668:0x001d6f50:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001d6f60:	imove	#return, 0xffffffff
000669:0x001d6f70:	rts
000672:0x001d6f78:	imove	i, 0x000000
000672:0x001d6f88:	jump	0x1d6f98
000672:0x001d6f90:	inc	i
000672:0x001d6f98:	ncalli	array<RaycastRVResult>.Count()
000672:0x001d6fa0:	cmpi	i, #return
000672:0x001d6fb0:	bge	0x1d7020
000674:0x001d6fb8:	icall	
000674:0x001d6fc8:	movec	@c00, #return
000674:0x001d6fd8:	icall	
000674:0x001d6fe8:	cmpc	@c00, #return
000674:0x001d6ff8:	beq	0x1d7018
000676:0x001d7000:	move	#return, i
000676:0x001d7010:	rts
000676:0x001d7018:	jump	0x1d6f90
000680:0x001d7020:	imove	#return, 0xffffffff
000680:0x001d7030:	rts
000680:0x001d7038:	rts
array<VegetationSound>::InsertAll()
000427:0x001d7870:	imove	i, 0x000000
000427:0x001d7880:	jump	0x1d78a0
000427:0x001d7888:	move	@m00, i
000427:0x001d7898:	inc	i
000427:0x001d78a0:	ncalli	array<VegetationSound>.Count()
000427:0x001d78a8:	cmpi	i, #return
000427:0x001d78b8:	bge	0x1d78e8
000429:0x001d78c0:	icall	
000429:0x001d78d0:	icall	
000429:0x001d78e0:	jump	0x1d7888
000429:0x001d78e8:	rts
array<VegetationSound>::RemoveItem()
000479:0x001d7918:	movefm	@c00, value
000479:0x001d7928:	icall	
000479:0x001d7938:	move	remove_index, #return
000481:0x001d7948:	cmpi	remove_index, _i0
000481:0x001d7958:	blt	0x1d7970
000483:0x001d7960:	ncalli	array<VegetationSound>.RemoveOrdered(remove_index)
000483:0x001d7970:	rts
array<VegetationSound>::RemoveItemUnOrdered()
000489:0x001d79a0:	movefm	@c00, value
000489:0x001d79b0:	icall	
000489:0x001d79c0:	move	remove_index, #return
000491:0x001d79d0:	cmpi	remove_index, _i0
000491:0x001d79e0:	blt	0x1d79f8
000493:0x001d79e8:	ncalli	array<VegetationSound>.Remove(remove_index)
000493:0x001d79f8:	rts
array<VegetationSound>::IsValidIndex()
000499:0x001d7a00:	cmpi	index, _i-1
000499:0x001d7a10:	ble	0x1d7a50
000499:0x001d7a18:	ncalli	array<VegetationSound>.Count()
000499:0x001d7a20:	cmpi	index, #return
000499:0x001d7a30:	bge	0x1d7a50
000499:0x001d7a38:	imove	#return, 0x000001
000499:0x001d7a48:	jump	0x1d7a60
000499:0x001d7a50:	imove	#return, 0x000000
000499:0x001d7a60:	rts
000499:0x001d7a68:	rts
array<VegetationSound>::Debug()
000525:0x001d7ac0:	ncalli	array<VegetationSound>.Count()
000525:0x001d7ac8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001d7af8:	icall	Print(#return)
000526:0x001d7b08:	imove	i, 0x000000
000526:0x001d7b18:	jump	0x1d7b38
000526:0x001d7b20:	move	@m00, i
000526:0x001d7b30:	inc	i
000526:0x001d7b38:	ncalli	array<VegetationSound>.Count()
000526:0x001d7b40:	cmpi	i, #return
000526:0x001d7b50:	bge	0x1d7bc8
000528:0x001d7b58:	icall	
000528:0x001d7b68:	movetm	item, #return
000529:0x001d7b78:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001d7ba8:	icall	Print(#return)
000529:0x001d7bb8:	release	item
000529:0x001d7bc0:	jump	0x1d7b20
000529:0x001d7bc8:	rts
array<VegetationSound>::GetRandomIndex()
000544:0x001d7bd0:	ncalli	array<VegetationSound>.Count()
000544:0x001d7bd8:	move	@m00, #return
000544:0x001d7be8:	cmpi	@m00, _i0
000544:0x001d7bf8:	ble	0x1d7c30
000546:0x001d7c00:	ncalli	array<VegetationSound>.Count()
000546:0x001d7c08:	icall	RandomInt(_i0, #return)
000546:0x001d7c18:	move	#return, #return
000546:0x001d7c28:	rts
000549:0x001d7c30:	imove	#return, 0xffffffff
000549:0x001d7c40:	rts
000549:0x001d7c48:	rts
array<VegetationSound>::GetRandomElement()
000563:0x001d7c50:	call	
000563:0x001d7c60:	icall	
000563:0x001d7c70:	movetm	#return, #return
000563:0x001d7c80:	rts
000563:0x001d7c88:	rts
array<VegetationSound>::SwapItems()
000568:0x001d7cb8:	icall	
000568:0x001d7cc8:	movetm	item1, #return
000569:0x001d7cd8:	icall	
000569:0x001d7ce8:	icall	
000570:0x001d7cf8:	movefm	@c00, item1
000570:0x001d7d08:	icall	
000570:0x001d7d18:	release	item1
000570:0x001d7d20:	rts
array<VegetationSound>::InsertArray()
000575:0x001d7d78:	imove	i, 0x000000
000575:0x001d7d88:	jump	0x1d7da8
000575:0x001d7d90:	move	@m00, i
000575:0x001d7da0:	inc	i
000575:0x001d7da8:	ncalli	array<VegetationSound>.Count()
000575:0x001d7db0:	cmpi	i, #return
000575:0x001d7dc0:	bge	0x1d7e18
000577:0x001d7dc8:	icall	
000577:0x001d7dd8:	movetm	item, #return
000578:0x001d7de8:	movefm	@c00, item
000578:0x001d7df8:	icall	
000578:0x001d7e08:	release	item
000578:0x001d7e10:	jump	0x1d7d90
000578:0x001d7e18:	rts
array<VegetationSound>::Invert()
000584:0x001d7e98:	imove	left, 0x000000
000585:0x001d7ea8:	ncalli	array<VegetationSound>.Count()
000585:0x001d7eb0:	subi	right, #return, _i1
000586:0x001d7ec0:	cmpi	right, _i0
000586:0x001d7ed0:	ble	0x1d7f90
000588:0x001d7ed8:	cmpi	left, right
000588:0x001d7ee8:	bge	0x1d7f90
000590:0x001d7ef0:	icall	
000590:0x001d7f00:	movetm	temp, #return
000591:0x001d7f10:	move	@m00, left
000591:0x001d7f20:	inc	left
000591:0x001d7f28:	icall	
000591:0x001d7f38:	icall	
000592:0x001d7f48:	move	@m00, right
000592:0x001d7f58:	dec	right
000592:0x001d7f60:	movefm	@c00, temp
000592:0x001d7f70:	icall	
000592:0x001d7f80:	release	temp
000592:0x001d7f88:	jump	0x1d7ed8
000592:0x001d7f90:	rts
array<VegetationSound>::MoveIndex()
000612:0x001d7fe8:	ncalli	array<VegetationSound>.Count()
000612:0x001d7ff0:	move	count, #return
000613:0x001d8000:	move	new_index, curr_index
000615:0x001d8010:	cmpi	move_number, _i0
000615:0x001d8020:	ble	0x1d8048
000617:0x001d8028:	addi	@m00, curr_index, move_number
000617:0x001d8038:	move	new_index, @m00
000620:0x001d8048:	cmpi	move_number, _i0
000620:0x001d8058:	bge	0x1d8100
000622:0x001d8060:	subi	@m00, curr_index, move_number
000622:0x001d8070:	move	new_index, @m00
000624:0x001d8080:	cmpi	new_index, _i0
000624:0x001d8090:	bge	0x1d8100
000626:0x001d8098:	subi	@m01, _i0, count
000626:0x001d80a8:	cmpi	new_index, @m01
000626:0x001d80b8:	bgt	0x1d80e0
000628:0x001d80c0:	modi	@m00, new_index, count
000628:0x001d80d0:	move	new_index, @m00
000631:0x001d80e0:	addi	@m00, new_index, count
000631:0x001d80f0:	move	new_index, @m00
000635:0x001d8100:	cmpi	new_index, count
000635:0x001d8110:	blt	0x1d8138
000637:0x001d8118:	modi	@m00, new_index, count
000637:0x001d8128:	move	new_index, @m00
000641:0x001d8138:	move	#return, new_index
000641:0x001d8148:	rts
000641:0x001d8150:	rts
array<VegetationSound>::ShuffleArray()
000646:0x001d8180:	imove	i, 0x000000
000646:0x001d8190:	jump	0x1d81b0
000646:0x001d8198:	move	@m00, i
000646:0x001d81a8:	inc	i
000646:0x001d81b0:	ncalli	array<VegetationSound>.Count()
000646:0x001d81b8:	cmpi	i, #return
000646:0x001d81c8:	bge	0x1d8200
000648:0x001d81d0:	call	
000648:0x001d81e0:	call	
000648:0x001d81f8:	jump	0x1d8198
000648:0x001d8200:	rts
array<VegetationSound>::DifferentAtPosition()
000666:0x001d8230:	ncalli	array<VegetationSound>.Count()
000666:0x001d8238:	move	@m00, #return
000666:0x001d8248:	push	#return
000666:0x001d8250:	ncalli	array<VegetationSound>.Count()
000666:0x001d8258:	move	@m02, #return
000666:0x001d8268:	pop	#return
000666:0x001d8270:	cmpi	@m00, @m02
000666:0x001d8280:	beq	0x1d82b0
000668:0x001d8288:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001d8298:	imove	#return, 0xffffffff
000669:0x001d82a8:	rts
000672:0x001d82b0:	imove	i, 0x000000
000672:0x001d82c0:	jump	0x1d82d0
000672:0x001d82c8:	inc	i
000672:0x001d82d0:	ncalli	array<VegetationSound>.Count()
000672:0x001d82d8:	cmpi	i, #return
000672:0x001d82e8:	bge	0x1d8378
000674:0x001d82f0:	icall	
000674:0x001d8300:	movec	@c00, #return
000674:0x001d8310:	pushc	#return
000674:0x001d8318:	icall	
000674:0x001d8328:	movec	@c02, #return
000674:0x001d8338:	popc	#return
000674:0x001d8340:	cmpc	@c00, @c02
000674:0x001d8350:	beq	0x1d8370
000676:0x001d8358:	move	#return, i
000676:0x001d8368:	rts
000676:0x001d8370:	jump	0x1d82c8
000680:0x001d8378:	imove	#return, 0xffffffff
000680:0x001d8388:	rts
000680:0x001d8390:	rts
array<@VegetationSound>::InsertAll()
000427:0x001d87a8:	imove	i, 0x000000
000427:0x001d87b8:	jump	0x1d87d8
000427:0x001d87c0:	move	@m00, i
000427:0x001d87d0:	inc	i
000427:0x001d87d8:	ncalli	array<VegetationSound>.Count()
000427:0x001d87e0:	cmpi	i, #return
000427:0x001d87f0:	bge	0x1d8820
000429:0x001d87f8:	icall	
000429:0x001d8808:	icall	
000429:0x001d8818:	jump	0x1d87c0
000429:0x001d8820:	rts
array<@VegetationSound>::RemoveItem()
000479:0x001d8850:	movefm	@c00, value
000479:0x001d8860:	icall	
000479:0x001d8870:	move	remove_index, #return
000481:0x001d8880:	cmpi	remove_index, _i0
000481:0x001d8890:	blt	0x1d88a8
000483:0x001d8898:	ncalli	array<@VegetationSound>.RemoveOrdered(remove_index)
000483:0x001d88a8:	rts
array<@VegetationSound>::RemoveItemUnOrdered()
000489:0x001d88d8:	movefm	@c00, value
000489:0x001d88e8:	icall	
000489:0x001d88f8:	move	remove_index, #return
000491:0x001d8908:	cmpi	remove_index, _i0
000491:0x001d8918:	blt	0x1d8930
000493:0x001d8920:	ncalli	array<@VegetationSound>.Remove(remove_index)
000493:0x001d8930:	rts
array<@VegetationSound>::IsValidIndex()
000499:0x001d8938:	cmpi	index, _i-1
000499:0x001d8948:	ble	0x1d8988
000499:0x001d8950:	ncalli	array<@VegetationSound>.Count()
000499:0x001d8958:	cmpi	index, #return
000499:0x001d8968:	bge	0x1d8988
000499:0x001d8970:	imove	#return, 0x000001
000499:0x001d8980:	jump	0x1d8998
000499:0x001d8988:	imove	#return, 0x000000
000499:0x001d8998:	rts
000499:0x001d89a0:	rts
array<@VegetationSound>::Debug()
000525:0x001d89f8:	ncalli	array<@VegetationSound>.Count()
000525:0x001d8a00:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001d8a30:	icall	Print(#return)
000526:0x001d8a40:	imove	i, 0x000000
000526:0x001d8a50:	jump	0x1d8a70
000526:0x001d8a58:	move	@m00, i
000526:0x001d8a68:	inc	i
000526:0x001d8a70:	ncalli	array<@VegetationSound>.Count()
000526:0x001d8a78:	cmpi	i, #return
000526:0x001d8a88:	bge	0x1d8b00
000528:0x001d8a90:	icall	
000528:0x001d8aa0:	movetm	item, #return
000529:0x001d8ab0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001d8ae0:	icall	Print(#return)
000529:0x001d8af0:	release	item
000529:0x001d8af8:	jump	0x1d8a58
000529:0x001d8b00:	rts
array<@VegetationSound>::GetRandomIndex()
000544:0x001d8b08:	ncalli	array<@VegetationSound>.Count()
000544:0x001d8b10:	move	@m00, #return
000544:0x001d8b20:	cmpi	@m00, _i0
000544:0x001d8b30:	ble	0x1d8b68
000546:0x001d8b38:	ncalli	array<@VegetationSound>.Count()
000546:0x001d8b40:	icall	RandomInt(_i0, #return)
000546:0x001d8b50:	move	#return, #return
000546:0x001d8b60:	rts
000549:0x001d8b68:	imove	#return, 0xffffffff
000549:0x001d8b78:	rts
000549:0x001d8b80:	rts
array<@VegetationSound>::GetRandomElement()
000563:0x001d8b88:	call	
000563:0x001d8b98:	icall	
000563:0x001d8ba8:	movetm	#return, #return
000563:0x001d8bb8:	rts
000563:0x001d8bc0:	rts
array<@VegetationSound>::SwapItems()
000568:0x001d8bf0:	icall	
000568:0x001d8c00:	movetm	item1, #return
000569:0x001d8c10:	icall	
000569:0x001d8c20:	icall	
000570:0x001d8c30:	movefm	@c00, item1
000570:0x001d8c40:	icall	
000570:0x001d8c50:	release	item1
000570:0x001d8c58:	rts
array<@VegetationSound>::InsertArray()
000575:0x001d8cb0:	imove	i, 0x000000
000575:0x001d8cc0:	jump	0x1d8ce0
000575:0x001d8cc8:	move	@m00, i
000575:0x001d8cd8:	inc	i
000575:0x001d8ce0:	ncalli	array<VegetationSound>.Count()
000575:0x001d8ce8:	cmpi	i, #return
000575:0x001d8cf8:	bge	0x1d8d50
000577:0x001d8d00:	icall	
000577:0x001d8d10:	movetm	item, #return
000578:0x001d8d20:	movefm	@c00, item
000578:0x001d8d30:	icall	
000578:0x001d8d40:	release	item
000578:0x001d8d48:	jump	0x1d8cc8
000578:0x001d8d50:	rts
array<@VegetationSound>::Invert()
000584:0x001d8dd0:	imove	left, 0x000000
000585:0x001d8de0:	ncalli	array<@VegetationSound>.Count()
000585:0x001d8de8:	subi	right, #return, _i1
000586:0x001d8df8:	cmpi	right, _i0
000586:0x001d8e08:	ble	0x1d8ec8
000588:0x001d8e10:	cmpi	left, right
000588:0x001d8e20:	bge	0x1d8ec8
000590:0x001d8e28:	icall	
000590:0x001d8e38:	movetm	temp, #return
000591:0x001d8e48:	move	@m00, left
000591:0x001d8e58:	inc	left
000591:0x001d8e60:	icall	
000591:0x001d8e70:	icall	
000592:0x001d8e80:	move	@m00, right
000592:0x001d8e90:	dec	right
000592:0x001d8e98:	movefm	@c00, temp
000592:0x001d8ea8:	icall	
000592:0x001d8eb8:	release	temp
000592:0x001d8ec0:	jump	0x1d8e10
000592:0x001d8ec8:	rts
array<@VegetationSound>::MoveIndex()
000612:0x001d8f20:	ncalli	array<@VegetationSound>.Count()
000612:0x001d8f28:	move	count, #return
000613:0x001d8f38:	move	new_index, curr_index
000615:0x001d8f48:	cmpi	move_number, _i0
000615:0x001d8f58:	ble	0x1d8f80
000617:0x001d8f60:	addi	@m00, curr_index, move_number
000617:0x001d8f70:	move	new_index, @m00
000620:0x001d8f80:	cmpi	move_number, _i0
000620:0x001d8f90:	bge	0x1d9038
000622:0x001d8f98:	subi	@m00, curr_index, move_number
000622:0x001d8fa8:	move	new_index, @m00
000624:0x001d8fb8:	cmpi	new_index, _i0
000624:0x001d8fc8:	bge	0x1d9038
000626:0x001d8fd0:	subi	@m01, _i0, count
000626:0x001d8fe0:	cmpi	new_index, @m01
000626:0x001d8ff0:	bgt	0x1d9018
000628:0x001d8ff8:	modi	@m00, new_index, count
000628:0x001d9008:	move	new_index, @m00
000631:0x001d9018:	addi	@m00, new_index, count
000631:0x001d9028:	move	new_index, @m00
000635:0x001d9038:	cmpi	new_index, count
000635:0x001d9048:	blt	0x1d9070
000637:0x001d9050:	modi	@m00, new_index, count
000637:0x001d9060:	move	new_index, @m00
000641:0x001d9070:	move	#return, new_index
000641:0x001d9080:	rts
000641:0x001d9088:	rts
array<@VegetationSound>::ShuffleArray()
000646:0x001d90b8:	imove	i, 0x000000
000646:0x001d90c8:	jump	0x1d90e8
000646:0x001d90d0:	move	@m00, i
000646:0x001d90e0:	inc	i
000646:0x001d90e8:	ncalli	array<@VegetationSound>.Count()
000646:0x001d90f0:	cmpi	i, #return
000646:0x001d9100:	bge	0x1d9138
000648:0x001d9108:	call	
000648:0x001d9118:	call	
000648:0x001d9130:	jump	0x1d90d0
000648:0x001d9138:	rts
array<@VegetationSound>::DifferentAtPosition()
000666:0x001d9168:	ncalli	array<@VegetationSound>.Count()
000666:0x001d9170:	move	@m00, #return
000666:0x001d9180:	ncalli	array<VegetationSound>.Count()
000666:0x001d9188:	cmpi	@m00, #return
000666:0x001d9198:	beq	0x1d91c8
000668:0x001d91a0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001d91b0:	imove	#return, 0xffffffff
000669:0x001d91c0:	rts
000672:0x001d91c8:	imove	i, 0x000000
000672:0x001d91d8:	jump	0x1d91e8
000672:0x001d91e0:	inc	i
000672:0x001d91e8:	ncalli	array<VegetationSound>.Count()
000672:0x001d91f0:	cmpi	i, #return
000672:0x001d9200:	bge	0x1d9270
000674:0x001d9208:	icall	
000674:0x001d9218:	movec	@c00, #return
000674:0x001d9228:	icall	
000674:0x001d9238:	cmpc	@c00, #return
000674:0x001d9248:	beq	0x1d9268
000676:0x001d9250:	move	#return, i
000676:0x001d9260:	rts
000676:0x001d9268:	jump	0x1d91e0
000680:0x001d9270:	imove	#return, 0xffffffff
000680:0x001d9280:	rts
000680:0x001d9288:	rts
array<Param2<string,bool>>::InsertAll()
000427:0x001d9fe0:	imove	i, 0x000000
000427:0x001d9ff0:	jump	0x1da010
000427:0x001d9ff8:	move	@m00, i
000427:0x001da008:	inc	i
000427:0x001da010:	ncalli	array<Param2<string,bool>>.Count()
000427:0x001da018:	cmpi	i, #return
000427:0x001da028:	bge	0x1da058
000429:0x001da030:	icall	
000429:0x001da040:	icall	
000429:0x001da050:	jump	0x1d9ff8
000429:0x001da058:	rts
array<Param2<string,bool>>::RemoveItem()
000479:0x001da088:	movefm	@c00, value
000479:0x001da098:	icall	
000479:0x001da0a8:	move	remove_index, #return
000481:0x001da0b8:	cmpi	remove_index, _i0
000481:0x001da0c8:	blt	0x1da0e0
000483:0x001da0d0:	ncalli	array<Param2<string,bool>>.RemoveOrdered(remove_index)
000483:0x001da0e0:	rts
array<Param2<string,bool>>::RemoveItemUnOrdered()
000489:0x001da110:	movefm	@c00, value
000489:0x001da120:	icall	
000489:0x001da130:	move	remove_index, #return
000491:0x001da140:	cmpi	remove_index, _i0
000491:0x001da150:	blt	0x1da168
000493:0x001da158:	ncalli	array<Param2<string,bool>>.Remove(remove_index)
000493:0x001da168:	rts
array<Param2<string,bool>>::IsValidIndex()
000499:0x001da170:	cmpi	index, _i-1
000499:0x001da180:	ble	0x1da1c0
000499:0x001da188:	ncalli	array<Param2<string,bool>>.Count()
000499:0x001da190:	cmpi	index, #return
000499:0x001da1a0:	bge	0x1da1c0
000499:0x001da1a8:	imove	#return, 0x000001
000499:0x001da1b8:	jump	0x1da1d0
000499:0x001da1c0:	imove	#return, 0x000000
000499:0x001da1d0:	rts
000499:0x001da1d8:	rts
array<Param2<string,bool>>::Debug()
000525:0x001da230:	ncalli	array<Param2<string,bool>>.Count()
000525:0x001da238:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001da268:	icall	Print(#return)
000526:0x001da278:	imove	i, 0x000000
000526:0x001da288:	jump	0x1da2a8
000526:0x001da290:	move	@m00, i
000526:0x001da2a0:	inc	i
000526:0x001da2a8:	ncalli	array<Param2<string,bool>>.Count()
000526:0x001da2b0:	cmpi	i, #return
000526:0x001da2c0:	bge	0x1da338
000528:0x001da2c8:	icall	
000528:0x001da2d8:	movetm	item, #return
000529:0x001da2e8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001da318:	icall	Print(#return)
000529:0x001da328:	release	item
000529:0x001da330:	jump	0x1da290
000529:0x001da338:	rts
array<Param2<string,bool>>::GetRandomIndex()
000544:0x001da340:	ncalli	array<Param2<string,bool>>.Count()
000544:0x001da348:	move	@m00, #return
000544:0x001da358:	cmpi	@m00, _i0
000544:0x001da368:	ble	0x1da3a0
000546:0x001da370:	ncalli	array<Param2<string,bool>>.Count()
000546:0x001da378:	icall	RandomInt(_i0, #return)
000546:0x001da388:	move	#return, #return
000546:0x001da398:	rts
000549:0x001da3a0:	imove	#return, 0xffffffff
000549:0x001da3b0:	rts
000549:0x001da3b8:	rts
array<Param2<string,bool>>::GetRandomElement()
000563:0x001da3c0:	call	
000563:0x001da3d0:	icall	
000563:0x001da3e0:	movetm	#return, #return
000563:0x001da3f0:	rts
000563:0x001da3f8:	rts
array<Param2<string,bool>>::SwapItems()
000568:0x001da428:	icall	
000568:0x001da438:	movetm	item1, #return
000569:0x001da448:	icall	
000569:0x001da458:	icall	
000570:0x001da468:	movefm	@c00, item1
000570:0x001da478:	icall	
000570:0x001da488:	release	item1
000570:0x001da490:	rts
array<Param2<string,bool>>::InsertArray()
000575:0x001da4e8:	imove	i, 0x000000
000575:0x001da4f8:	jump	0x1da518
000575:0x001da500:	move	@m00, i
000575:0x001da510:	inc	i
000575:0x001da518:	ncalli	array<Param2<string,bool>>.Count()
000575:0x001da520:	cmpi	i, #return
000575:0x001da530:	bge	0x1da588
000577:0x001da538:	icall	
000577:0x001da548:	movetm	item, #return
000578:0x001da558:	movefm	@c00, item
000578:0x001da568:	icall	
000578:0x001da578:	release	item
000578:0x001da580:	jump	0x1da500
000578:0x001da588:	rts
array<Param2<string,bool>>::Invert()
000584:0x001da608:	imove	left, 0x000000
000585:0x001da618:	ncalli	array<Param2<string,bool>>.Count()
000585:0x001da620:	subi	right, #return, _i1
000586:0x001da630:	cmpi	right, _i0
000586:0x001da640:	ble	0x1da700
000588:0x001da648:	cmpi	left, right
000588:0x001da658:	bge	0x1da700
000590:0x001da660:	icall	
000590:0x001da670:	movetm	temp, #return
000591:0x001da680:	move	@m00, left
000591:0x001da690:	inc	left
000591:0x001da698:	icall	
000591:0x001da6a8:	icall	
000592:0x001da6b8:	move	@m00, right
000592:0x001da6c8:	dec	right
000592:0x001da6d0:	movefm	@c00, temp
000592:0x001da6e0:	icall	
000592:0x001da6f0:	release	temp
000592:0x001da6f8:	jump	0x1da648
000592:0x001da700:	rts
array<Param2<string,bool>>::MoveIndex()
000612:0x001da758:	ncalli	array<Param2<string,bool>>.Count()
000612:0x001da760:	move	count, #return
000613:0x001da770:	move	new_index, curr_index
000615:0x001da780:	cmpi	move_number, _i0
000615:0x001da790:	ble	0x1da7b8
000617:0x001da798:	addi	@m00, curr_index, move_number
000617:0x001da7a8:	move	new_index, @m00
000620:0x001da7b8:	cmpi	move_number, _i0
000620:0x001da7c8:	bge	0x1da870
000622:0x001da7d0:	subi	@m00, curr_index, move_number
000622:0x001da7e0:	move	new_index, @m00
000624:0x001da7f0:	cmpi	new_index, _i0
000624:0x001da800:	bge	0x1da870
000626:0x001da808:	subi	@m01, _i0, count
000626:0x001da818:	cmpi	new_index, @m01
000626:0x001da828:	bgt	0x1da850
000628:0x001da830:	modi	@m00, new_index, count
000628:0x001da840:	move	new_index, @m00
000631:0x001da850:	addi	@m00, new_index, count
000631:0x001da860:	move	new_index, @m00
000635:0x001da870:	cmpi	new_index, count
000635:0x001da880:	blt	0x1da8a8
000637:0x001da888:	modi	@m00, new_index, count
000637:0x001da898:	move	new_index, @m00
000641:0x001da8a8:	move	#return, new_index
000641:0x001da8b8:	rts
000641:0x001da8c0:	rts
array<Param2<string,bool>>::ShuffleArray()
000646:0x001da8f0:	imove	i, 0x000000
000646:0x001da900:	jump	0x1da920
000646:0x001da908:	move	@m00, i
000646:0x001da918:	inc	i
000646:0x001da920:	ncalli	array<Param2<string,bool>>.Count()
000646:0x001da928:	cmpi	i, #return
000646:0x001da938:	bge	0x1da970
000648:0x001da940:	call	
000648:0x001da950:	call	
000648:0x001da968:	jump	0x1da908
000648:0x001da970:	rts
array<Param2<string,bool>>::DifferentAtPosition()
000666:0x001da9a0:	ncalli	array<Param2<string,bool>>.Count()
000666:0x001da9a8:	move	@m00, #return
000666:0x001da9b8:	push	#return
000666:0x001da9c0:	ncalli	array<Param2<string,bool>>.Count()
000666:0x001da9c8:	move	@m02, #return
000666:0x001da9d8:	pop	#return
000666:0x001da9e0:	cmpi	@m00, @m02
000666:0x001da9f0:	beq	0x1daa20
000668:0x001da9f8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001daa08:	imove	#return, 0xffffffff
000669:0x001daa18:	rts
000672:0x001daa20:	imove	i, 0x000000
000672:0x001daa30:	jump	0x1daa40
000672:0x001daa38:	inc	i
000672:0x001daa40:	ncalli	array<Param2<string,bool>>.Count()
000672:0x001daa48:	cmpi	i, #return
000672:0x001daa58:	bge	0x1daae8
000674:0x001daa60:	icall	
000674:0x001daa70:	movec	@c00, #return
000674:0x001daa80:	pushc	#return
000674:0x001daa88:	icall	
000674:0x001daa98:	movec	@c02, #return
000674:0x001daaa8:	popc	#return
000674:0x001daab0:	cmpc	@c00, @c02
000674:0x001daac0:	beq	0x1daae0
000676:0x001daac8:	move	#return, i
000676:0x001daad8:	rts
000676:0x001daae0:	jump	0x1daa38
000680:0x001daae8:	imove	#return, 0xffffffff
000680:0x001daaf8:	rts
000680:0x001dab00:	rts
map<int,Param2<string,bool>>::GetKeyArray()
000885:0x001dae00:	new	keys, array<int>
000886:0x001dae20:	imove	i, 0x000000
000886:0x001dae30:	jump	0x1dae50
000886:0x001dae38:	move	@m00, i
000886:0x001dae48:	inc	i
000886:0x001dae50:	ncalli	map<int,Param2<string,bool>>.Count()
000886:0x001dae58:	cmpi	i, #return
000886:0x001dae68:	bge	0x1dae98
000888:0x001dae70:	icall	
000888:0x001dae80:	icall	
000888:0x001dae90:	jump	0x1dae38
000890:0x001dae98:	movem	#return, keys
000890:0x001daea8:	release	keys
000890:0x001daeb0:	rts
000890:0x001daeb8:	release	keys
000890:0x001daec0:	rts
map<int,Param2<string,bool>>::GetValueArray()
000895:0x001daf18:	new	elements, array<Param2<string,bool>>
000896:0x001daf38:	imove	i, 0x000000
000896:0x001daf48:	jump	0x1daf68
000896:0x001daf50:	move	@m00, i
000896:0x001daf60:	inc	i
000896:0x001daf68:	ncalli	map<int,Param2<string,bool>>.Count()
000896:0x001daf70:	cmpi	i, #return
000896:0x001daf80:	bge	0x1dafb0
000898:0x001daf88:	icall	
000898:0x001daf98:	icall	
000898:0x001dafa8:	jump	0x1daf50
000900:0x001dafb0:	movem	#return, elements
000900:0x001dafc0:	release	elements
000900:0x001dafc8:	rts
000900:0x001dafd0:	release	elements
000900:0x001dafd8:	rts
map<int,Param2<string,bool>>::ReplaceKey()
000905:0x001dafe0:	icall	
000905:0x001daff0:	cmpi	#return, _i0
000905:0x001db000:	beq	0x1db050
000907:0x001db008:	icall	
000907:0x001db018:	icall	
000908:0x001db028:	icall	
000909:0x001db038:	imove	#return, 0x000001
000909:0x001db048:	rts
000911:0x001db050:	imove	#return, 0x000000
000911:0x001db060:	rts
000911:0x001db068:	rts
map<int,Param2<string,bool>>::GetKeyByValue()
000917:0x001db0c0:	imove	i, 0x000000
000917:0x001db0d0:	jump	0x1db0f0
000917:0x001db0d8:	move	@m00, i
000917:0x001db0e8:	inc	i
000917:0x001db0f0:	ncalli	map<int,Param2<string,bool>>.Count()
000917:0x001db0f8:	cmpi	i, #return
000917:0x001db108:	bge	0x1db178
000919:0x001db110:	icall	
000919:0x001db120:	movec	@c00, #return
000919:0x001db130:	cmpmc	@c00, value
000919:0x001db140:	bne	0x1db170
000921:0x001db148:	icall	
000921:0x001db158:	move	ret, #return
000922:0x001db168:	jump	0x1db178
000922:0x001db170:	jump	0x1db0d8
000926:0x001db178:	move	#return, ret
000926:0x001db188:	rts
000926:0x001db190:	rts
map<int,Param2<string,bool>>::GetKeyByValueChecked()
000931:0x001db1c0:	imove	i, 0x000000
000931:0x001db1d0:	jump	0x1db1f0
000931:0x001db1d8:	move	@m00, i
000931:0x001db1e8:	inc	i
000931:0x001db1f0:	ncalli	map<int,Param2<string,bool>>.Count()
000931:0x001db1f8:	cmpi	i, #return
000931:0x001db208:	bge	0x1db298
000933:0x001db210:	icall	
000933:0x001db220:	movec	@c00, #return
000933:0x001db230:	cmpmc	@c00, value
000933:0x001db240:	bne	0x1db290
000935:0x001db248:	icall	
000935:0x001db258:	move	key, #return
000936:0x001db268:	imove	#return, 0x000001
000936:0x001db278:	move	key, key
000936:0x001db288:	rts
000936:0x001db290:	jump	0x1db1d8
000939:0x001db298:	imove	#return, 0x000000
000939:0x001db2a8:	move	key, key
000939:0x001db2b8:	rts
000939:0x001db2c0:	move	key, key
000939:0x001db2d0:	rts
map<int,@Param2<string,bool>>::GetKeyArray()
000885:0x001db620:	new	keys, array<int>
000886:0x001db640:	imove	i, 0x000000
000886:0x001db650:	jump	0x1db670
000886:0x001db658:	move	@m00, i
000886:0x001db668:	inc	i
000886:0x001db670:	ncalli	map<int,@Param2<string,bool>>.Count()
000886:0x001db678:	cmpi	i, #return
000886:0x001db688:	bge	0x1db6b8
000888:0x001db690:	icall	
000888:0x001db6a0:	icall	
000888:0x001db6b0:	jump	0x1db658
000890:0x001db6b8:	movem	#return, keys
000890:0x001db6c8:	release	keys
000890:0x001db6d0:	rts
000890:0x001db6d8:	release	keys
000890:0x001db6e0:	rts
map<int,@Param2<string,bool>>::GetValueArray()
000895:0x001db738:	new	elements, array<Param2<string,bool>>
000896:0x001db758:	imove	i, 0x000000
000896:0x001db768:	jump	0x1db788
000896:0x001db770:	move	@m00, i
000896:0x001db780:	inc	i
000896:0x001db788:	ncalli	map<int,@Param2<string,bool>>.Count()
000896:0x001db790:	cmpi	i, #return
000896:0x001db7a0:	bge	0x1db7d0
000898:0x001db7a8:	icall	
000898:0x001db7b8:	icall	
000898:0x001db7c8:	jump	0x1db770
000900:0x001db7d0:	movem	#return, elements
000900:0x001db7e0:	release	elements
000900:0x001db7e8:	rts
000900:0x001db7f0:	release	elements
000900:0x001db7f8:	rts
map<int,@Param2<string,bool>>::ReplaceKey()
000905:0x001db800:	icall	
000905:0x001db810:	cmpi	#return, _i0
000905:0x001db820:	beq	0x1db870
000907:0x001db828:	icall	
000907:0x001db838:	icall	
000908:0x001db848:	icall	
000909:0x001db858:	imove	#return, 0x000001
000909:0x001db868:	rts
000911:0x001db870:	imove	#return, 0x000000
000911:0x001db880:	rts
000911:0x001db888:	rts
map<int,@Param2<string,bool>>::GetKeyByValue()
000917:0x001db8e0:	imove	i, 0x000000
000917:0x001db8f0:	jump	0x1db910
000917:0x001db8f8:	move	@m00, i
000917:0x001db908:	inc	i
000917:0x001db910:	ncalli	map<int,@Param2<string,bool>>.Count()
000917:0x001db918:	cmpi	i, #return
000917:0x001db928:	bge	0x1db998
000919:0x001db930:	icall	
000919:0x001db940:	movec	@c00, #return
000919:0x001db950:	cmpmc	@c00, value
000919:0x001db960:	bne	0x1db990
000921:0x001db968:	icall	
000921:0x001db978:	move	ret, #return
000922:0x001db988:	jump	0x1db998
000922:0x001db990:	jump	0x1db8f8
000926:0x001db998:	move	#return, ret
000926:0x001db9a8:	rts
000926:0x001db9b0:	rts
map<int,@Param2<string,bool>>::GetKeyByValueChecked()
000931:0x001db9e0:	imove	i, 0x000000
000931:0x001db9f0:	jump	0x1dba10
000931:0x001db9f8:	move	@m00, i
000931:0x001dba08:	inc	i
000931:0x001dba10:	ncalli	map<int,@Param2<string,bool>>.Count()
000931:0x001dba18:	cmpi	i, #return
000931:0x001dba28:	bge	0x1dbab8
000933:0x001dba30:	icall	
000933:0x001dba40:	movec	@c00, #return
000933:0x001dba50:	cmpmc	@c00, value
000933:0x001dba60:	bne	0x1dbab0
000935:0x001dba68:	icall	
000935:0x001dba78:	move	key, #return
000936:0x001dba88:	imove	#return, 0x000001
000936:0x001dba98:	move	key, key
000936:0x001dbaa8:	rts
000936:0x001dbab0:	jump	0x1db9f8
000939:0x001dbab8:	imove	#return, 0x000000
000939:0x001dbac8:	move	key, key
000939:0x001dbad8:	rts
000939:0x001dbae0:	move	key, key
000939:0x001dbaf0:	rts
array<array<bool>>::InsertAll()
000427:0x001dc838:	imove	i, 0x000000
000427:0x001dc848:	jump	0x1dc868
000427:0x001dc850:	move	@m00, i
000427:0x001dc860:	inc	i
000427:0x001dc868:	ncalli	array<array<bool>>.Count()
000427:0x001dc870:	cmpi	i, #return
000427:0x001dc880:	bge	0x1dc8b0
000429:0x001dc888:	icall	
000429:0x001dc898:	icall	
000429:0x001dc8a8:	jump	0x1dc850
000429:0x001dc8b0:	rts
array<array<bool>>::RemoveItem()
000479:0x001dc8e0:	movefm	@c00, value
000479:0x001dc8f0:	icall	
000479:0x001dc900:	move	remove_index, #return
000481:0x001dc910:	cmpi	remove_index, _i0
000481:0x001dc920:	blt	0x1dc938
000483:0x001dc928:	ncalli	array<array<bool>>.RemoveOrdered(remove_index)
000483:0x001dc938:	rts
array<array<bool>>::RemoveItemUnOrdered()
000489:0x001dc968:	movefm	@c00, value
000489:0x001dc978:	icall	
000489:0x001dc988:	move	remove_index, #return
000491:0x001dc998:	cmpi	remove_index, _i0
000491:0x001dc9a8:	blt	0x1dc9c0
000493:0x001dc9b0:	ncalli	array<array<bool>>.Remove(remove_index)
000493:0x001dc9c0:	rts
array<array<bool>>::IsValidIndex()
000499:0x001dc9c8:	cmpi	index, _i-1
000499:0x001dc9d8:	ble	0x1dca18
000499:0x001dc9e0:	ncalli	array<array<bool>>.Count()
000499:0x001dc9e8:	cmpi	index, #return
000499:0x001dc9f8:	bge	0x1dca18
000499:0x001dca00:	imove	#return, 0x000001
000499:0x001dca10:	jump	0x1dca28
000499:0x001dca18:	imove	#return, 0x000000
000499:0x001dca28:	rts
000499:0x001dca30:	rts
array<array<bool>>::Debug()
000525:0x001dca88:	ncalli	array<array<bool>>.Count()
000525:0x001dca90:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001dcac0:	icall	Print(#return)
000526:0x001dcad0:	imove	i, 0x000000
000526:0x001dcae0:	jump	0x1dcb00
000526:0x001dcae8:	move	@m00, i
000526:0x001dcaf8:	inc	i
000526:0x001dcb00:	ncalli	array<array<bool>>.Count()
000526:0x001dcb08:	cmpi	i, #return
000526:0x001dcb18:	bge	0x1dcb90
000528:0x001dcb20:	icall	
000528:0x001dcb30:	movetm	item, #return
000529:0x001dcb40:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001dcb70:	icall	Print(#return)
000529:0x001dcb80:	release	item
000529:0x001dcb88:	jump	0x1dcae8
000529:0x001dcb90:	rts
array<array<bool>>::GetRandomIndex()
000544:0x001dcb98:	ncalli	array<array<bool>>.Count()
000544:0x001dcba0:	move	@m00, #return
000544:0x001dcbb0:	cmpi	@m00, _i0
000544:0x001dcbc0:	ble	0x1dcbf8
000546:0x001dcbc8:	ncalli	array<array<bool>>.Count()
000546:0x001dcbd0:	icall	RandomInt(_i0, #return)
000546:0x001dcbe0:	move	#return, #return
000546:0x001dcbf0:	rts
000549:0x001dcbf8:	imove	#return, 0xffffffff
000549:0x001dcc08:	rts
000549:0x001dcc10:	rts
array<array<bool>>::GetRandomElement()
000563:0x001dcc18:	call	
000563:0x001dcc28:	icall	
000563:0x001dcc38:	movetm	#return, #return
000563:0x001dcc48:	rts
000563:0x001dcc50:	rts
array<array<bool>>::SwapItems()
000568:0x001dcc80:	icall	
000568:0x001dcc90:	movetm	item1, #return
000569:0x001dcca0:	icall	
000569:0x001dccb0:	icall	
000570:0x001dccc0:	movefm	@c00, item1
000570:0x001dccd0:	icall	
000570:0x001dcce0:	release	item1
000570:0x001dcce8:	rts
array<array<bool>>::InsertArray()
000575:0x001dcd40:	imove	i, 0x000000
000575:0x001dcd50:	jump	0x1dcd70
000575:0x001dcd58:	move	@m00, i
000575:0x001dcd68:	inc	i
000575:0x001dcd70:	ncalli	array<array<bool>>.Count()
000575:0x001dcd78:	cmpi	i, #return
000575:0x001dcd88:	bge	0x1dcde0
000577:0x001dcd90:	icall	
000577:0x001dcda0:	movetm	item, #return
000578:0x001dcdb0:	movefm	@c00, item
000578:0x001dcdc0:	icall	
000578:0x001dcdd0:	release	item
000578:0x001dcdd8:	jump	0x1dcd58
000578:0x001dcde0:	rts
array<array<bool>>::Invert()
000584:0x001dce60:	imove	left, 0x000000
000585:0x001dce70:	ncalli	array<array<bool>>.Count()
000585:0x001dce78:	subi	right, #return, _i1
000586:0x001dce88:	cmpi	right, _i0
000586:0x001dce98:	ble	0x1dcf58
000588:0x001dcea0:	cmpi	left, right
000588:0x001dceb0:	bge	0x1dcf58
000590:0x001dceb8:	icall	
000590:0x001dcec8:	movetm	temp, #return
000591:0x001dced8:	move	@m00, left
000591:0x001dcee8:	inc	left
000591:0x001dcef0:	icall	
000591:0x001dcf00:	icall	
000592:0x001dcf10:	move	@m00, right
000592:0x001dcf20:	dec	right
000592:0x001dcf28:	movefm	@c00, temp
000592:0x001dcf38:	icall	
000592:0x001dcf48:	release	temp
000592:0x001dcf50:	jump	0x1dcea0
000592:0x001dcf58:	rts
array<array<bool>>::MoveIndex()
000612:0x001dcfb0:	ncalli	array<array<bool>>.Count()
000612:0x001dcfb8:	move	count, #return
000613:0x001dcfc8:	move	new_index, curr_index
000615:0x001dcfd8:	cmpi	move_number, _i0
000615:0x001dcfe8:	ble	0x1dd010
000617:0x001dcff0:	addi	@m00, curr_index, move_number
000617:0x001dd000:	move	new_index, @m00
000620:0x001dd010:	cmpi	move_number, _i0
000620:0x001dd020:	bge	0x1dd0c8
000622:0x001dd028:	subi	@m00, curr_index, move_number
000622:0x001dd038:	move	new_index, @m00
000624:0x001dd048:	cmpi	new_index, _i0
000624:0x001dd058:	bge	0x1dd0c8
000626:0x001dd060:	subi	@m01, _i0, count
000626:0x001dd070:	cmpi	new_index, @m01
000626:0x001dd080:	bgt	0x1dd0a8
000628:0x001dd088:	modi	@m00, new_index, count
000628:0x001dd098:	move	new_index, @m00
000631:0x001dd0a8:	addi	@m00, new_index, count
000631:0x001dd0b8:	move	new_index, @m00
000635:0x001dd0c8:	cmpi	new_index, count
000635:0x001dd0d8:	blt	0x1dd100
000637:0x001dd0e0:	modi	@m00, new_index, count
000637:0x001dd0f0:	move	new_index, @m00
000641:0x001dd100:	move	#return, new_index
000641:0x001dd110:	rts
000641:0x001dd118:	rts
array<array<bool>>::ShuffleArray()
000646:0x001dd148:	imove	i, 0x000000
000646:0x001dd158:	jump	0x1dd178
000646:0x001dd160:	move	@m00, i
000646:0x001dd170:	inc	i
000646:0x001dd178:	ncalli	array<array<bool>>.Count()
000646:0x001dd180:	cmpi	i, #return
000646:0x001dd190:	bge	0x1dd1c8
000648:0x001dd198:	call	
000648:0x001dd1a8:	call	
000648:0x001dd1c0:	jump	0x1dd160
000648:0x001dd1c8:	rts
array<array<bool>>::DifferentAtPosition()
000666:0x001dd1f8:	ncalli	array<array<bool>>.Count()
000666:0x001dd200:	move	@m00, #return
000666:0x001dd210:	push	#return
000666:0x001dd218:	ncalli	array<array<bool>>.Count()
000666:0x001dd220:	move	@m02, #return
000666:0x001dd230:	pop	#return
000666:0x001dd238:	cmpi	@m00, @m02
000666:0x001dd248:	beq	0x1dd278
000668:0x001dd250:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001dd260:	imove	#return, 0xffffffff
000669:0x001dd270:	rts
000672:0x001dd278:	imove	i, 0x000000
000672:0x001dd288:	jump	0x1dd298
000672:0x001dd290:	inc	i
000672:0x001dd298:	ncalli	array<array<bool>>.Count()
000672:0x001dd2a0:	cmpi	i, #return
000672:0x001dd2b0:	bge	0x1dd340
000674:0x001dd2b8:	icall	
000674:0x001dd2c8:	movec	@c00, #return
000674:0x001dd2d8:	pushc	#return
000674:0x001dd2e0:	icall	
000674:0x001dd2f0:	movec	@c02, #return
000674:0x001dd300:	popc	#return
000674:0x001dd308:	cmpc	@c00, @c02
000674:0x001dd318:	beq	0x1dd338
000676:0x001dd320:	move	#return, i
000676:0x001dd330:	rts
000676:0x001dd338:	jump	0x1dd290
000680:0x001dd340:	imove	#return, 0xffffffff
000680:0x001dd350:	rts
000680:0x001dd358:	rts
map<int,array<bool>>::GetKeyArray()
000885:0x001dd658:	new	keys, array<int>
000886:0x001dd678:	imove	i, 0x000000
000886:0x001dd688:	jump	0x1dd6a8
000886:0x001dd690:	move	@m00, i
000886:0x001dd6a0:	inc	i
000886:0x001dd6a8:	ncalli	map<int,array<bool>>.Count()
000886:0x001dd6b0:	cmpi	i, #return
000886:0x001dd6c0:	bge	0x1dd6f0
000888:0x001dd6c8:	icall	
000888:0x001dd6d8:	icall	
000888:0x001dd6e8:	jump	0x1dd690
000890:0x001dd6f0:	movem	#return, keys
000890:0x001dd700:	release	keys
000890:0x001dd708:	rts
000890:0x001dd710:	release	keys
000890:0x001dd718:	rts
map<int,array<bool>>::GetValueArray()
000895:0x001dd770:	new	elements, array<array<bool>>
000896:0x001dd790:	imove	i, 0x000000
000896:0x001dd7a0:	jump	0x1dd7c0
000896:0x001dd7a8:	move	@m00, i
000896:0x001dd7b8:	inc	i
000896:0x001dd7c0:	ncalli	map<int,array<bool>>.Count()
000896:0x001dd7c8:	cmpi	i, #return
000896:0x001dd7d8:	bge	0x1dd808
000898:0x001dd7e0:	icall	
000898:0x001dd7f0:	icall	
000898:0x001dd800:	jump	0x1dd7a8
000900:0x001dd808:	movem	#return, elements
000900:0x001dd818:	release	elements
000900:0x001dd820:	rts
000900:0x001dd828:	release	elements
000900:0x001dd830:	rts
map<int,array<bool>>::ReplaceKey()
000905:0x001dd838:	icall	
000905:0x001dd848:	cmpi	#return, _i0
000905:0x001dd858:	beq	0x1dd8a8
000907:0x001dd860:	icall	
000907:0x001dd870:	icall	
000908:0x001dd880:	icall	
000909:0x001dd890:	imove	#return, 0x000001
000909:0x001dd8a0:	rts
000911:0x001dd8a8:	imove	#return, 0x000000
000911:0x001dd8b8:	rts
000911:0x001dd8c0:	rts
map<int,array<bool>>::GetKeyByValue()
000917:0x001dd918:	imove	i, 0x000000
000917:0x001dd928:	jump	0x1dd948
000917:0x001dd930:	move	@m00, i
000917:0x001dd940:	inc	i
000917:0x001dd948:	ncalli	map<int,array<bool>>.Count()
000917:0x001dd950:	cmpi	i, #return
000917:0x001dd960:	bge	0x1dd9d0
000919:0x001dd968:	icall	
000919:0x001dd978:	movec	@c00, #return
000919:0x001dd988:	cmpmc	@c00, value
000919:0x001dd998:	bne	0x1dd9c8
000921:0x001dd9a0:	icall	
000921:0x001dd9b0:	move	ret, #return
000922:0x001dd9c0:	jump	0x1dd9d0
000922:0x001dd9c8:	jump	0x1dd930
000926:0x001dd9d0:	move	#return, ret
000926:0x001dd9e0:	rts
000926:0x001dd9e8:	rts
map<int,array<bool>>::GetKeyByValueChecked()
000931:0x001dda18:	imove	i, 0x000000
000931:0x001dda28:	jump	0x1dda48
000931:0x001dda30:	move	@m00, i
000931:0x001dda40:	inc	i
000931:0x001dda48:	ncalli	map<int,array<bool>>.Count()
000931:0x001dda50:	cmpi	i, #return
000931:0x001dda60:	bge	0x1ddaf0
000933:0x001dda68:	icall	
000933:0x001dda78:	movec	@c00, #return
000933:0x001dda88:	cmpmc	@c00, value
000933:0x001dda98:	bne	0x1ddae8
000935:0x001ddaa0:	icall	
000935:0x001ddab0:	move	key, #return
000936:0x001ddac0:	imove	#return, 0x000001
000936:0x001ddad0:	move	key, key
000936:0x001ddae0:	rts
000936:0x001ddae8:	jump	0x1dda30
000939:0x001ddaf0:	imove	#return, 0x000000
000939:0x001ddb00:	move	key, key
000939:0x001ddb10:	rts
000939:0x001ddb18:	move	key, key
000939:0x001ddb28:	rts
map<int,@array<bool>>::GetKeyArray()
000885:0x001dde78:	new	keys, array<int>
000886:0x001dde98:	imove	i, 0x000000
000886:0x001ddea8:	jump	0x1ddec8
000886:0x001ddeb0:	move	@m00, i
000886:0x001ddec0:	inc	i
000886:0x001ddec8:	ncalli	map<int,@array<bool>>.Count()
000886:0x001dded0:	cmpi	i, #return
000886:0x001ddee0:	bge	0x1ddf10
000888:0x001ddee8:	icall	
000888:0x001ddef8:	icall	
000888:0x001ddf08:	jump	0x1ddeb0
000890:0x001ddf10:	movem	#return, keys
000890:0x001ddf20:	release	keys
000890:0x001ddf28:	rts
000890:0x001ddf30:	release	keys
000890:0x001ddf38:	rts
map<int,@array<bool>>::GetValueArray()
000895:0x001ddf90:	new	elements, array<array<bool>>
000896:0x001ddfb0:	imove	i, 0x000000
000896:0x001ddfc0:	jump	0x1ddfe0
000896:0x001ddfc8:	move	@m00, i
000896:0x001ddfd8:	inc	i
000896:0x001ddfe0:	ncalli	map<int,@array<bool>>.Count()
000896:0x001ddfe8:	cmpi	i, #return
000896:0x001ddff8:	bge	0x1de028
000898:0x001de000:	icall	
000898:0x001de010:	icall	
000898:0x001de020:	jump	0x1ddfc8
000900:0x001de028:	movem	#return, elements
000900:0x001de038:	release	elements
000900:0x001de040:	rts
000900:0x001de048:	release	elements
000900:0x001de050:	rts
map<int,@array<bool>>::ReplaceKey()
000905:0x001de058:	icall	
000905:0x001de068:	cmpi	#return, _i0
000905:0x001de078:	beq	0x1de0c8
000907:0x001de080:	icall	
000907:0x001de090:	icall	
000908:0x001de0a0:	icall	
000909:0x001de0b0:	imove	#return, 0x000001
000909:0x001de0c0:	rts
000911:0x001de0c8:	imove	#return, 0x000000
000911:0x001de0d8:	rts
000911:0x001de0e0:	rts
map<int,@array<bool>>::GetKeyByValue()
000917:0x001de138:	imove	i, 0x000000
000917:0x001de148:	jump	0x1de168
000917:0x001de150:	move	@m00, i
000917:0x001de160:	inc	i
000917:0x001de168:	ncalli	map<int,@array<bool>>.Count()
000917:0x001de170:	cmpi	i, #return
000917:0x001de180:	bge	0x1de1f0
000919:0x001de188:	icall	
000919:0x001de198:	movec	@c00, #return
000919:0x001de1a8:	cmpmc	@c00, value
000919:0x001de1b8:	bne	0x1de1e8
000921:0x001de1c0:	icall	
000921:0x001de1d0:	move	ret, #return
000922:0x001de1e0:	jump	0x1de1f0
000922:0x001de1e8:	jump	0x1de150
000926:0x001de1f0:	move	#return, ret
000926:0x001de200:	rts
000926:0x001de208:	rts
map<int,@array<bool>>::GetKeyByValueChecked()
000931:0x001de238:	imove	i, 0x000000
000931:0x001de248:	jump	0x1de268
000931:0x001de250:	move	@m00, i
000931:0x001de260:	inc	i
000931:0x001de268:	ncalli	map<int,@array<bool>>.Count()
000931:0x001de270:	cmpi	i, #return
000931:0x001de280:	bge	0x1de310
000933:0x001de288:	icall	
000933:0x001de298:	movec	@c00, #return
000933:0x001de2a8:	cmpmc	@c00, value
000933:0x001de2b8:	bne	0x1de308
000935:0x001de2c0:	icall	
000935:0x001de2d0:	move	key, #return
000936:0x001de2e0:	imove	#return, 0x000001
000936:0x001de2f0:	move	key, key
000936:0x001de300:	rts
000936:0x001de308:	jump	0x1de250
000939:0x001de310:	imove	#return, 0x000000
000939:0x001de320:	move	key, key
000939:0x001de330:	rts
000939:0x001de338:	move	key, key
000939:0x001de348:	rts
array<ImageWidget>::InsertAll()
000427:0x001ded10:	imove	i, 0x000000
000427:0x001ded20:	jump	0x1ded40
000427:0x001ded28:	move	@m00, i
000427:0x001ded38:	inc	i
000427:0x001ded40:	ncalli	array<ImageWidget>.Count()
000427:0x001ded48:	cmpi	i, #return
000427:0x001ded58:	bge	0x1ded88
000429:0x001ded60:	icall	
000429:0x001ded70:	icall	
000429:0x001ded80:	jump	0x1ded28
000429:0x001ded88:	rts
array<ImageWidget>::RemoveItem()
000479:0x001dedb8:	movefm	@c00, value
000479:0x001dedc8:	icall	
000479:0x001dedd8:	move	remove_index, #return
000481:0x001dede8:	cmpi	remove_index, _i0
000481:0x001dedf8:	blt	0x1dee10
000483:0x001dee00:	ncalli	array<ImageWidget>.RemoveOrdered(remove_index)
000483:0x001dee10:	rts
array<ImageWidget>::RemoveItemUnOrdered()
000489:0x001dee40:	movefm	@c00, value
000489:0x001dee50:	icall	
000489:0x001dee60:	move	remove_index, #return
000491:0x001dee70:	cmpi	remove_index, _i0
000491:0x001dee80:	blt	0x1dee98
000493:0x001dee88:	ncalli	array<ImageWidget>.Remove(remove_index)
000493:0x001dee98:	rts
array<ImageWidget>::IsValidIndex()
000499:0x001deea0:	cmpi	index, _i-1
000499:0x001deeb0:	ble	0x1deef0
000499:0x001deeb8:	ncalli	array<ImageWidget>.Count()
000499:0x001deec0:	cmpi	index, #return
000499:0x001deed0:	bge	0x1deef0
000499:0x001deed8:	imove	#return, 0x000001
000499:0x001deee8:	jump	0x1def00
000499:0x001deef0:	imove	#return, 0x000000
000499:0x001def00:	rts
000499:0x001def08:	rts
array<ImageWidget>::Debug()
000525:0x001def60:	ncalli	array<ImageWidget>.Count()
000525:0x001def68:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001def98:	icall	Print(#return)
000526:0x001defa8:	imove	i, 0x000000
000526:0x001defb8:	jump	0x1defd8
000526:0x001defc0:	move	@m00, i
000526:0x001defd0:	inc	i
000526:0x001defd8:	ncalli	array<ImageWidget>.Count()
000526:0x001defe0:	cmpi	i, #return
000526:0x001deff0:	bge	0x1df068
000528:0x001deff8:	icall	
000528:0x001df008:	movetm	item, #return
000529:0x001df018:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001df048:	icall	Print(#return)
000529:0x001df058:	release	item
000529:0x001df060:	jump	0x1defc0
000529:0x001df068:	rts
array<ImageWidget>::GetRandomIndex()
000544:0x001df070:	ncalli	array<ImageWidget>.Count()
000544:0x001df078:	move	@m00, #return
000544:0x001df088:	cmpi	@m00, _i0
000544:0x001df098:	ble	0x1df0d0
000546:0x001df0a0:	ncalli	array<ImageWidget>.Count()
000546:0x001df0a8:	icall	RandomInt(_i0, #return)
000546:0x001df0b8:	move	#return, #return
000546:0x001df0c8:	rts
000549:0x001df0d0:	imove	#return, 0xffffffff
000549:0x001df0e0:	rts
000549:0x001df0e8:	rts
array<ImageWidget>::GetRandomElement()
000563:0x001df0f0:	call	
000563:0x001df100:	icall	
000563:0x001df110:	movetm	#return, #return
000563:0x001df120:	rts
000563:0x001df128:	rts
array<ImageWidget>::SwapItems()
000568:0x001df158:	icall	
000568:0x001df168:	movetm	item1, #return
000569:0x001df178:	icall	
000569:0x001df188:	icall	
000570:0x001df198:	movefm	@c00, item1
000570:0x001df1a8:	icall	
000570:0x001df1b8:	release	item1
000570:0x001df1c0:	rts
array<ImageWidget>::InsertArray()
000575:0x001df218:	imove	i, 0x000000
000575:0x001df228:	jump	0x1df248
000575:0x001df230:	move	@m00, i
000575:0x001df240:	inc	i
000575:0x001df248:	ncalli	array<ImageWidget>.Count()
000575:0x001df250:	cmpi	i, #return
000575:0x001df260:	bge	0x1df2b8
000577:0x001df268:	icall	
000577:0x001df278:	movetm	item, #return
000578:0x001df288:	movefm	@c00, item
000578:0x001df298:	icall	
000578:0x001df2a8:	release	item
000578:0x001df2b0:	jump	0x1df230
000578:0x001df2b8:	rts
array<ImageWidget>::Invert()
000584:0x001df338:	imove	left, 0x000000
000585:0x001df348:	ncalli	array<ImageWidget>.Count()
000585:0x001df350:	subi	right, #return, _i1
000586:0x001df360:	cmpi	right, _i0
000586:0x001df370:	ble	0x1df430
000588:0x001df378:	cmpi	left, right
000588:0x001df388:	bge	0x1df430
000590:0x001df390:	icall	
000590:0x001df3a0:	movetm	temp, #return
000591:0x001df3b0:	move	@m00, left
000591:0x001df3c0:	inc	left
000591:0x001df3c8:	icall	
000591:0x001df3d8:	icall	
000592:0x001df3e8:	move	@m00, right
000592:0x001df3f8:	dec	right
000592:0x001df400:	movefm	@c00, temp
000592:0x001df410:	icall	
000592:0x001df420:	release	temp
000592:0x001df428:	jump	0x1df378
000592:0x001df430:	rts
array<ImageWidget>::MoveIndex()
000612:0x001df488:	ncalli	array<ImageWidget>.Count()
000612:0x001df490:	move	count, #return
000613:0x001df4a0:	move	new_index, curr_index
000615:0x001df4b0:	cmpi	move_number, _i0
000615:0x001df4c0:	ble	0x1df4e8
000617:0x001df4c8:	addi	@m00, curr_index, move_number
000617:0x001df4d8:	move	new_index, @m00
000620:0x001df4e8:	cmpi	move_number, _i0
000620:0x001df4f8:	bge	0x1df5a0
000622:0x001df500:	subi	@m00, curr_index, move_number
000622:0x001df510:	move	new_index, @m00
000624:0x001df520:	cmpi	new_index, _i0
000624:0x001df530:	bge	0x1df5a0
000626:0x001df538:	subi	@m01, _i0, count
000626:0x001df548:	cmpi	new_index, @m01
000626:0x001df558:	bgt	0x1df580
000628:0x001df560:	modi	@m00, new_index, count
000628:0x001df570:	move	new_index, @m00
000631:0x001df580:	addi	@m00, new_index, count
000631:0x001df590:	move	new_index, @m00
000635:0x001df5a0:	cmpi	new_index, count
000635:0x001df5b0:	blt	0x1df5d8
000637:0x001df5b8:	modi	@m00, new_index, count
000637:0x001df5c8:	move	new_index, @m00
000641:0x001df5d8:	move	#return, new_index
000641:0x001df5e8:	rts
000641:0x001df5f0:	rts
array<ImageWidget>::ShuffleArray()
000646:0x001df620:	imove	i, 0x000000
000646:0x001df630:	jump	0x1df650
000646:0x001df638:	move	@m00, i
000646:0x001df648:	inc	i
000646:0x001df650:	ncalli	array<ImageWidget>.Count()
000646:0x001df658:	cmpi	i, #return
000646:0x001df668:	bge	0x1df6a0
000648:0x001df670:	call	
000648:0x001df680:	call	
000648:0x001df698:	jump	0x1df638
000648:0x001df6a0:	rts
array<ImageWidget>::DifferentAtPosition()
000666:0x001df6d0:	ncalli	array<ImageWidget>.Count()
000666:0x001df6d8:	move	@m00, #return
000666:0x001df6e8:	push	#return
000666:0x001df6f0:	ncalli	array<ImageWidget>.Count()
000666:0x001df6f8:	move	@m02, #return
000666:0x001df708:	pop	#return
000666:0x001df710:	cmpi	@m00, @m02
000666:0x001df720:	beq	0x1df750
000668:0x001df728:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001df738:	imove	#return, 0xffffffff
000669:0x001df748:	rts
000672:0x001df750:	imove	i, 0x000000
000672:0x001df760:	jump	0x1df770
000672:0x001df768:	inc	i
000672:0x001df770:	ncalli	array<ImageWidget>.Count()
000672:0x001df778:	cmpi	i, #return
000672:0x001df788:	bge	0x1df818
000674:0x001df790:	icall	
000674:0x001df7a0:	movec	@c00, #return
000674:0x001df7b0:	pushc	#return
000674:0x001df7b8:	icall	
000674:0x001df7c8:	movec	@c02, #return
000674:0x001df7d8:	popc	#return
000674:0x001df7e0:	cmpc	@c00, @c02
000674:0x001df7f0:	beq	0x1df810
000676:0x001df7f8:	move	#return, i
000676:0x001df808:	rts
000676:0x001df810:	jump	0x1df768
000680:0x001df818:	imove	#return, 0xffffffff
000680:0x001df828:	rts
000680:0x001df830:	rts
map<int,ImageWidget>::GetKeyArray()
000885:0x001dfb30:	new	keys, array<int>
000886:0x001dfb50:	imove	i, 0x000000
000886:0x001dfb60:	jump	0x1dfb80
000886:0x001dfb68:	move	@m00, i
000886:0x001dfb78:	inc	i
000886:0x001dfb80:	ncalli	map<int,ImageWidget>.Count()
000886:0x001dfb88:	cmpi	i, #return
000886:0x001dfb98:	bge	0x1dfbc8
000888:0x001dfba0:	icall	
000888:0x001dfbb0:	icall	
000888:0x001dfbc0:	jump	0x1dfb68
000890:0x001dfbc8:	movem	#return, keys
000890:0x001dfbd8:	release	keys
000890:0x001dfbe0:	rts
000890:0x001dfbe8:	release	keys
000890:0x001dfbf0:	rts
map<int,ImageWidget>::GetValueArray()
000895:0x001dfc48:	new	elements, array<ImageWidget>
000896:0x001dfc68:	imove	i, 0x000000
000896:0x001dfc78:	jump	0x1dfc98
000896:0x001dfc80:	move	@m00, i
000896:0x001dfc90:	inc	i
000896:0x001dfc98:	ncalli	map<int,ImageWidget>.Count()
000896:0x001dfca0:	cmpi	i, #return
000896:0x001dfcb0:	bge	0x1dfce0
000898:0x001dfcb8:	icall	
000898:0x001dfcc8:	icall	
000898:0x001dfcd8:	jump	0x1dfc80
000900:0x001dfce0:	movem	#return, elements
000900:0x001dfcf0:	release	elements
000900:0x001dfcf8:	rts
000900:0x001dfd00:	release	elements
000900:0x001dfd08:	rts
map<int,ImageWidget>::ReplaceKey()
000905:0x001dfd10:	icall	
000905:0x001dfd20:	cmpi	#return, _i0
000905:0x001dfd30:	beq	0x1dfd80
000907:0x001dfd38:	icall	
000907:0x001dfd48:	icall	
000908:0x001dfd58:	icall	
000909:0x001dfd68:	imove	#return, 0x000001
000909:0x001dfd78:	rts
000911:0x001dfd80:	imove	#return, 0x000000
000911:0x001dfd90:	rts
000911:0x001dfd98:	rts
map<int,ImageWidget>::GetKeyByValue()
000917:0x001dfdf0:	imove	i, 0x000000
000917:0x001dfe00:	jump	0x1dfe20
000917:0x001dfe08:	move	@m00, i
000917:0x001dfe18:	inc	i
000917:0x001dfe20:	ncalli	map<int,ImageWidget>.Count()
000917:0x001dfe28:	cmpi	i, #return
000917:0x001dfe38:	bge	0x1dfea8
000919:0x001dfe40:	icall	
000919:0x001dfe50:	movec	@c00, #return
000919:0x001dfe60:	cmpmc	@c00, value
000919:0x001dfe70:	bne	0x1dfea0
000921:0x001dfe78:	icall	
000921:0x001dfe88:	move	ret, #return
000922:0x001dfe98:	jump	0x1dfea8
000922:0x001dfea0:	jump	0x1dfe08
000926:0x001dfea8:	move	#return, ret
000926:0x001dfeb8:	rts
000926:0x001dfec0:	rts
map<int,ImageWidget>::GetKeyByValueChecked()
000931:0x001dfef0:	imove	i, 0x000000
000931:0x001dff00:	jump	0x1dff20
000931:0x001dff08:	move	@m00, i
000931:0x001dff18:	inc	i
000931:0x001dff20:	ncalli	map<int,ImageWidget>.Count()
000931:0x001dff28:	cmpi	i, #return
000931:0x001dff38:	bge	0x1dffc8
000933:0x001dff40:	icall	
000933:0x001dff50:	movec	@c00, #return
000933:0x001dff60:	cmpmc	@c00, value
000933:0x001dff70:	bne	0x1dffc0
000935:0x001dff78:	icall	
000935:0x001dff88:	move	key, #return
000936:0x001dff98:	imove	#return, 0x000001
000936:0x001dffa8:	move	key, key
000936:0x001dffb8:	rts
000936:0x001dffc0:	jump	0x1dff08
000939:0x001dffc8:	imove	#return, 0x000000
000939:0x001dffd8:	move	key, key
000939:0x001dffe8:	rts
000939:0x001dfff0:	move	key, key
000939:0x001e0000:	rts
array<WidgetFadeTimer>::InsertAll()
000427:0x001e0d50:	imove	i, 0x000000
000427:0x001e0d60:	jump	0x1e0d80
000427:0x001e0d68:	move	@m00, i
000427:0x001e0d78:	inc	i
000427:0x001e0d80:	ncalli	array<WidgetFadeTimer>.Count()
000427:0x001e0d88:	cmpi	i, #return
000427:0x001e0d98:	bge	0x1e0dc8
000429:0x001e0da0:	icall	
000429:0x001e0db0:	icall	
000429:0x001e0dc0:	jump	0x1e0d68
000429:0x001e0dc8:	rts
array<WidgetFadeTimer>::RemoveItem()
000479:0x001e0df8:	movefm	@c00, value
000479:0x001e0e08:	icall	
000479:0x001e0e18:	move	remove_index, #return
000481:0x001e0e28:	cmpi	remove_index, _i0
000481:0x001e0e38:	blt	0x1e0e50
000483:0x001e0e40:	ncalli	array<WidgetFadeTimer>.RemoveOrdered(remove_index)
000483:0x001e0e50:	rts
array<WidgetFadeTimer>::RemoveItemUnOrdered()
000489:0x001e0e80:	movefm	@c00, value
000489:0x001e0e90:	icall	
000489:0x001e0ea0:	move	remove_index, #return
000491:0x001e0eb0:	cmpi	remove_index, _i0
000491:0x001e0ec0:	blt	0x1e0ed8
000493:0x001e0ec8:	ncalli	array<WidgetFadeTimer>.Remove(remove_index)
000493:0x001e0ed8:	rts
array<WidgetFadeTimer>::IsValidIndex()
000499:0x001e0ee0:	cmpi	index, _i-1
000499:0x001e0ef0:	ble	0x1e0f30
000499:0x001e0ef8:	ncalli	array<WidgetFadeTimer>.Count()
000499:0x001e0f00:	cmpi	index, #return
000499:0x001e0f10:	bge	0x1e0f30
000499:0x001e0f18:	imove	#return, 0x000001
000499:0x001e0f28:	jump	0x1e0f40
000499:0x001e0f30:	imove	#return, 0x000000
000499:0x001e0f40:	rts
000499:0x001e0f48:	rts
array<WidgetFadeTimer>::Debug()
000525:0x001e0fa0:	ncalli	array<WidgetFadeTimer>.Count()
000525:0x001e0fa8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001e0fd8:	icall	Print(#return)
000526:0x001e0fe8:	imove	i, 0x000000
000526:0x001e0ff8:	jump	0x1e1018
000526:0x001e1000:	move	@m00, i
000526:0x001e1010:	inc	i
000526:0x001e1018:	ncalli	array<WidgetFadeTimer>.Count()
000526:0x001e1020:	cmpi	i, #return
000526:0x001e1030:	bge	0x1e10a8
000528:0x001e1038:	icall	
000528:0x001e1048:	movetm	item, #return
000529:0x001e1058:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001e1088:	icall	Print(#return)
000529:0x001e1098:	release	item
000529:0x001e10a0:	jump	0x1e1000
000529:0x001e10a8:	rts
array<WidgetFadeTimer>::GetRandomIndex()
000544:0x001e10b0:	ncalli	array<WidgetFadeTimer>.Count()
000544:0x001e10b8:	move	@m00, #return
000544:0x001e10c8:	cmpi	@m00, _i0
000544:0x001e10d8:	ble	0x1e1110
000546:0x001e10e0:	ncalli	array<WidgetFadeTimer>.Count()
000546:0x001e10e8:	icall	RandomInt(_i0, #return)
000546:0x001e10f8:	move	#return, #return
000546:0x001e1108:	rts
000549:0x001e1110:	imove	#return, 0xffffffff
000549:0x001e1120:	rts
000549:0x001e1128:	rts
array<WidgetFadeTimer>::GetRandomElement()
000563:0x001e1130:	call	
000563:0x001e1140:	icall	
000563:0x001e1150:	movetm	#return, #return
000563:0x001e1160:	rts
000563:0x001e1168:	rts
array<WidgetFadeTimer>::SwapItems()
000568:0x001e1198:	icall	
000568:0x001e11a8:	movetm	item1, #return
000569:0x001e11b8:	icall	
000569:0x001e11c8:	icall	
000570:0x001e11d8:	movefm	@c00, item1
000570:0x001e11e8:	icall	
000570:0x001e11f8:	release	item1
000570:0x001e1200:	rts
array<WidgetFadeTimer>::InsertArray()
000575:0x001e1258:	imove	i, 0x000000
000575:0x001e1268:	jump	0x1e1288
000575:0x001e1270:	move	@m00, i
000575:0x001e1280:	inc	i
000575:0x001e1288:	ncalli	array<WidgetFadeTimer>.Count()
000575:0x001e1290:	cmpi	i, #return
000575:0x001e12a0:	bge	0x1e12f8
000577:0x001e12a8:	icall	
000577:0x001e12b8:	movetm	item, #return
000578:0x001e12c8:	movefm	@c00, item
000578:0x001e12d8:	icall	
000578:0x001e12e8:	release	item
000578:0x001e12f0:	jump	0x1e1270
000578:0x001e12f8:	rts
array<WidgetFadeTimer>::Invert()
000584:0x001e1378:	imove	left, 0x000000
000585:0x001e1388:	ncalli	array<WidgetFadeTimer>.Count()
000585:0x001e1390:	subi	right, #return, _i1
000586:0x001e13a0:	cmpi	right, _i0
000586:0x001e13b0:	ble	0x1e1470
000588:0x001e13b8:	cmpi	left, right
000588:0x001e13c8:	bge	0x1e1470
000590:0x001e13d0:	icall	
000590:0x001e13e0:	movetm	temp, #return
000591:0x001e13f0:	move	@m00, left
000591:0x001e1400:	inc	left
000591:0x001e1408:	icall	
000591:0x001e1418:	icall	
000592:0x001e1428:	move	@m00, right
000592:0x001e1438:	dec	right
000592:0x001e1440:	movefm	@c00, temp
000592:0x001e1450:	icall	
000592:0x001e1460:	release	temp
000592:0x001e1468:	jump	0x1e13b8
000592:0x001e1470:	rts
array<WidgetFadeTimer>::MoveIndex()
000612:0x001e14c8:	ncalli	array<WidgetFadeTimer>.Count()
000612:0x001e14d0:	move	count, #return
000613:0x001e14e0:	move	new_index, curr_index
000615:0x001e14f0:	cmpi	move_number, _i0
000615:0x001e1500:	ble	0x1e1528
000617:0x001e1508:	addi	@m00, curr_index, move_number
000617:0x001e1518:	move	new_index, @m00
000620:0x001e1528:	cmpi	move_number, _i0
000620:0x001e1538:	bge	0x1e15e0
000622:0x001e1540:	subi	@m00, curr_index, move_number
000622:0x001e1550:	move	new_index, @m00
000624:0x001e1560:	cmpi	new_index, _i0
000624:0x001e1570:	bge	0x1e15e0
000626:0x001e1578:	subi	@m01, _i0, count
000626:0x001e1588:	cmpi	new_index, @m01
000626:0x001e1598:	bgt	0x1e15c0
000628:0x001e15a0:	modi	@m00, new_index, count
000628:0x001e15b0:	move	new_index, @m00
000631:0x001e15c0:	addi	@m00, new_index, count
000631:0x001e15d0:	move	new_index, @m00
000635:0x001e15e0:	cmpi	new_index, count
000635:0x001e15f0:	blt	0x1e1618
000637:0x001e15f8:	modi	@m00, new_index, count
000637:0x001e1608:	move	new_index, @m00
000641:0x001e1618:	move	#return, new_index
000641:0x001e1628:	rts
000641:0x001e1630:	rts
array<WidgetFadeTimer>::ShuffleArray()
000646:0x001e1660:	imove	i, 0x000000
000646:0x001e1670:	jump	0x1e1690
000646:0x001e1678:	move	@m00, i
000646:0x001e1688:	inc	i
000646:0x001e1690:	ncalli	array<WidgetFadeTimer>.Count()
000646:0x001e1698:	cmpi	i, #return
000646:0x001e16a8:	bge	0x1e16e0
000648:0x001e16b0:	call	
000648:0x001e16c0:	call	
000648:0x001e16d8:	jump	0x1e1678
000648:0x001e16e0:	rts
array<WidgetFadeTimer>::DifferentAtPosition()
000666:0x001e1710:	ncalli	array<WidgetFadeTimer>.Count()
000666:0x001e1718:	move	@m00, #return
000666:0x001e1728:	push	#return
000666:0x001e1730:	ncalli	array<WidgetFadeTimer>.Count()
000666:0x001e1738:	move	@m02, #return
000666:0x001e1748:	pop	#return
000666:0x001e1750:	cmpi	@m00, @m02
000666:0x001e1760:	beq	0x1e1790
000668:0x001e1768:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001e1778:	imove	#return, 0xffffffff
000669:0x001e1788:	rts
000672:0x001e1790:	imove	i, 0x000000
000672:0x001e17a0:	jump	0x1e17b0
000672:0x001e17a8:	inc	i
000672:0x001e17b0:	ncalli	array<WidgetFadeTimer>.Count()
000672:0x001e17b8:	cmpi	i, #return
000672:0x001e17c8:	bge	0x1e1858
000674:0x001e17d0:	icall	
000674:0x001e17e0:	movec	@c00, #return
000674:0x001e17f0:	pushc	#return
000674:0x001e17f8:	icall	
000674:0x001e1808:	movec	@c02, #return
000674:0x001e1818:	popc	#return
000674:0x001e1820:	cmpc	@c00, @c02
000674:0x001e1830:	beq	0x1e1850
000676:0x001e1838:	move	#return, i
000676:0x001e1848:	rts
000676:0x001e1850:	jump	0x1e17a8
000680:0x001e1858:	imove	#return, 0xffffffff
000680:0x001e1868:	rts
000680:0x001e1870:	rts
map<int,WidgetFadeTimer>::GetKeyArray()
000885:0x001e1b70:	new	keys, array<int>
000886:0x001e1b90:	imove	i, 0x000000
000886:0x001e1ba0:	jump	0x1e1bc0
000886:0x001e1ba8:	move	@m00, i
000886:0x001e1bb8:	inc	i
000886:0x001e1bc0:	ncalli	map<int,WidgetFadeTimer>.Count()
000886:0x001e1bc8:	cmpi	i, #return
000886:0x001e1bd8:	bge	0x1e1c08
000888:0x001e1be0:	icall	
000888:0x001e1bf0:	icall	
000888:0x001e1c00:	jump	0x1e1ba8
000890:0x001e1c08:	movem	#return, keys
000890:0x001e1c18:	release	keys
000890:0x001e1c20:	rts
000890:0x001e1c28:	release	keys
000890:0x001e1c30:	rts
map<int,WidgetFadeTimer>::GetValueArray()
000895:0x001e1c88:	new	elements, array<WidgetFadeTimer>
000896:0x001e1ca8:	imove	i, 0x000000
000896:0x001e1cb8:	jump	0x1e1cd8
000896:0x001e1cc0:	move	@m00, i
000896:0x001e1cd0:	inc	i
000896:0x001e1cd8:	ncalli	map<int,WidgetFadeTimer>.Count()
000896:0x001e1ce0:	cmpi	i, #return
000896:0x001e1cf0:	bge	0x1e1d20
000898:0x001e1cf8:	icall	
000898:0x001e1d08:	icall	
000898:0x001e1d18:	jump	0x1e1cc0
000900:0x001e1d20:	movem	#return, elements
000900:0x001e1d30:	release	elements
000900:0x001e1d38:	rts
000900:0x001e1d40:	release	elements
000900:0x001e1d48:	rts
map<int,WidgetFadeTimer>::ReplaceKey()
000905:0x001e1d50:	icall	
000905:0x001e1d60:	cmpi	#return, _i0
000905:0x001e1d70:	beq	0x1e1dc0
000907:0x001e1d78:	icall	
000907:0x001e1d88:	icall	
000908:0x001e1d98:	icall	
000909:0x001e1da8:	imove	#return, 0x000001
000909:0x001e1db8:	rts
000911:0x001e1dc0:	imove	#return, 0x000000
000911:0x001e1dd0:	rts
000911:0x001e1dd8:	rts
map<int,WidgetFadeTimer>::GetKeyByValue()
000917:0x001e1e30:	imove	i, 0x000000
000917:0x001e1e40:	jump	0x1e1e60
000917:0x001e1e48:	move	@m00, i
000917:0x001e1e58:	inc	i
000917:0x001e1e60:	ncalli	map<int,WidgetFadeTimer>.Count()
000917:0x001e1e68:	cmpi	i, #return
000917:0x001e1e78:	bge	0x1e1ee8
000919:0x001e1e80:	icall	
000919:0x001e1e90:	movec	@c00, #return
000919:0x001e1ea0:	cmpmc	@c00, value
000919:0x001e1eb0:	bne	0x1e1ee0
000921:0x001e1eb8:	icall	
000921:0x001e1ec8:	move	ret, #return
000922:0x001e1ed8:	jump	0x1e1ee8
000922:0x001e1ee0:	jump	0x1e1e48
000926:0x001e1ee8:	move	#return, ret
000926:0x001e1ef8:	rts
000926:0x001e1f00:	rts
map<int,WidgetFadeTimer>::GetKeyByValueChecked()
000931:0x001e1f30:	imove	i, 0x000000
000931:0x001e1f40:	jump	0x1e1f60
000931:0x001e1f48:	move	@m00, i
000931:0x001e1f58:	inc	i
000931:0x001e1f60:	ncalli	map<int,WidgetFadeTimer>.Count()
000931:0x001e1f68:	cmpi	i, #return
000931:0x001e1f78:	bge	0x1e2008
000933:0x001e1f80:	icall	
000933:0x001e1f90:	movec	@c00, #return
000933:0x001e1fa0:	cmpmc	@c00, value
000933:0x001e1fb0:	bne	0x1e2000
000935:0x001e1fb8:	icall	
000935:0x001e1fc8:	move	key, #return
000936:0x001e1fd8:	imove	#return, 0x000001
000936:0x001e1fe8:	move	key, key
000936:0x001e1ff8:	rts
000936:0x001e2000:	jump	0x1e1f48
000939:0x001e2008:	imove	#return, 0x000000
000939:0x001e2018:	move	key, key
000939:0x001e2028:	rts
000939:0x001e2030:	move	key, key
000939:0x001e2040:	rts
map<int,@WidgetFadeTimer>::GetKeyArray()
000885:0x001e2390:	new	keys, array<int>
000886:0x001e23b0:	imove	i, 0x000000
000886:0x001e23c0:	jump	0x1e23e0
000886:0x001e23c8:	move	@m00, i
000886:0x001e23d8:	inc	i
000886:0x001e23e0:	ncalli	map<int,@WidgetFadeTimer>.Count()
000886:0x001e23e8:	cmpi	i, #return
000886:0x001e23f8:	bge	0x1e2428
000888:0x001e2400:	icall	
000888:0x001e2410:	icall	
000888:0x001e2420:	jump	0x1e23c8
000890:0x001e2428:	movem	#return, keys
000890:0x001e2438:	release	keys
000890:0x001e2440:	rts
000890:0x001e2448:	release	keys
000890:0x001e2450:	rts
map<int,@WidgetFadeTimer>::GetValueArray()
000895:0x001e24a8:	new	elements, array<WidgetFadeTimer>
000896:0x001e24c8:	imove	i, 0x000000
000896:0x001e24d8:	jump	0x1e24f8
000896:0x001e24e0:	move	@m00, i
000896:0x001e24f0:	inc	i
000896:0x001e24f8:	ncalli	map<int,@WidgetFadeTimer>.Count()
000896:0x001e2500:	cmpi	i, #return
000896:0x001e2510:	bge	0x1e2540
000898:0x001e2518:	icall	
000898:0x001e2528:	icall	
000898:0x001e2538:	jump	0x1e24e0
000900:0x001e2540:	movem	#return, elements
000900:0x001e2550:	release	elements
000900:0x001e2558:	rts
000900:0x001e2560:	release	elements
000900:0x001e2568:	rts
map<int,@WidgetFadeTimer>::ReplaceKey()
000905:0x001e2570:	icall	
000905:0x001e2580:	cmpi	#return, _i0
000905:0x001e2590:	beq	0x1e25e0
000907:0x001e2598:	icall	
000907:0x001e25a8:	icall	
000908:0x001e25b8:	icall	
000909:0x001e25c8:	imove	#return, 0x000001
000909:0x001e25d8:	rts
000911:0x001e25e0:	imove	#return, 0x000000
000911:0x001e25f0:	rts
000911:0x001e25f8:	rts
map<int,@WidgetFadeTimer>::GetKeyByValue()
000917:0x001e2650:	imove	i, 0x000000
000917:0x001e2660:	jump	0x1e2680
000917:0x001e2668:	move	@m00, i
000917:0x001e2678:	inc	i
000917:0x001e2680:	ncalli	map<int,@WidgetFadeTimer>.Count()
000917:0x001e2688:	cmpi	i, #return
000917:0x001e2698:	bge	0x1e2708
000919:0x001e26a0:	icall	
000919:0x001e26b0:	movec	@c00, #return
000919:0x001e26c0:	cmpmc	@c00, value
000919:0x001e26d0:	bne	0x1e2700
000921:0x001e26d8:	icall	
000921:0x001e26e8:	move	ret, #return
000922:0x001e26f8:	jump	0x1e2708
000922:0x001e2700:	jump	0x1e2668
000926:0x001e2708:	move	#return, ret
000926:0x001e2718:	rts
000926:0x001e2720:	rts
map<int,@WidgetFadeTimer>::GetKeyByValueChecked()
000931:0x001e2750:	imove	i, 0x000000
000931:0x001e2760:	jump	0x1e2780
000931:0x001e2768:	move	@m00, i
000931:0x001e2778:	inc	i
000931:0x001e2780:	ncalli	map<int,@WidgetFadeTimer>.Count()
000931:0x001e2788:	cmpi	i, #return
000931:0x001e2798:	bge	0x1e2828
000933:0x001e27a0:	icall	
000933:0x001e27b0:	movec	@c00, #return
000933:0x001e27c0:	cmpmc	@c00, value
000933:0x001e27d0:	bne	0x1e2820
000935:0x001e27d8:	icall	
000935:0x001e27e8:	move	key, #return
000936:0x001e27f8:	imove	#return, 0x000001
000936:0x001e2808:	move	key, key
000936:0x001e2818:	rts
000936:0x001e2820:	jump	0x1e2768
000939:0x001e2828:	imove	#return, 0x000000
000939:0x001e2838:	move	key, key
000939:0x001e2848:	rts
000939:0x001e2850:	move	key, key
000939:0x001e2860:	rts
map<int,array<string>>::GetKeyArray()
000885:0x001e3250:	new	keys, array<int>
000886:0x001e3270:	imove	i, 0x000000
000886:0x001e3280:	jump	0x1e32a0
000886:0x001e3288:	move	@m00, i
000886:0x001e3298:	inc	i
000886:0x001e32a0:	ncalli	map<int,array<string>>.Count()
000886:0x001e32a8:	cmpi	i, #return
000886:0x001e32b8:	bge	0x1e32e8
000888:0x001e32c0:	icall	
000888:0x001e32d0:	icall	
000888:0x001e32e0:	jump	0x1e3288
000890:0x001e32e8:	movem	#return, keys
000890:0x001e32f8:	release	keys
000890:0x001e3300:	rts
000890:0x001e3308:	release	keys
000890:0x001e3310:	rts
map<int,array<string>>::GetValueArray()
000895:0x001e3368:	new	elements, array<array<string>>
000896:0x001e3388:	imove	i, 0x000000
000896:0x001e3398:	jump	0x1e33b8
000896:0x001e33a0:	move	@m00, i
000896:0x001e33b0:	inc	i
000896:0x001e33b8:	ncalli	map<int,array<string>>.Count()
000896:0x001e33c0:	cmpi	i, #return
000896:0x001e33d0:	bge	0x1e3400
000898:0x001e33d8:	icall	
000898:0x001e33e8:	icall	
000898:0x001e33f8:	jump	0x1e33a0
000900:0x001e3400:	movem	#return, elements
000900:0x001e3410:	release	elements
000900:0x001e3418:	rts
000900:0x001e3420:	release	elements
000900:0x001e3428:	rts
map<int,array<string>>::ReplaceKey()
000905:0x001e3430:	icall	
000905:0x001e3440:	cmpi	#return, _i0
000905:0x001e3450:	beq	0x1e34a0
000907:0x001e3458:	icall	
000907:0x001e3468:	icall	
000908:0x001e3478:	icall	
000909:0x001e3488:	imove	#return, 0x000001
000909:0x001e3498:	rts
000911:0x001e34a0:	imove	#return, 0x000000
000911:0x001e34b0:	rts
000911:0x001e34b8:	rts
map<int,array<string>>::GetKeyByValue()
000917:0x001e3510:	imove	i, 0x000000
000917:0x001e3520:	jump	0x1e3540
000917:0x001e3528:	move	@m00, i
000917:0x001e3538:	inc	i
000917:0x001e3540:	ncalli	map<int,array<string>>.Count()
000917:0x001e3548:	cmpi	i, #return
000917:0x001e3558:	bge	0x1e35c8
000919:0x001e3560:	icall	
000919:0x001e3570:	movec	@c00, #return
000919:0x001e3580:	cmpmc	@c00, value
000919:0x001e3590:	bne	0x1e35c0
000921:0x001e3598:	icall	
000921:0x001e35a8:	move	ret, #return
000922:0x001e35b8:	jump	0x1e35c8
000922:0x001e35c0:	jump	0x1e3528
000926:0x001e35c8:	move	#return, ret
000926:0x001e35d8:	rts
000926:0x001e35e0:	rts
map<int,array<string>>::GetKeyByValueChecked()
000931:0x001e3610:	imove	i, 0x000000
000931:0x001e3620:	jump	0x1e3640
000931:0x001e3628:	move	@m00, i
000931:0x001e3638:	inc	i
000931:0x001e3640:	ncalli	map<int,array<string>>.Count()
000931:0x001e3648:	cmpi	i, #return
000931:0x001e3658:	bge	0x1e36e8
000933:0x001e3660:	icall	
000933:0x001e3670:	movec	@c00, #return
000933:0x001e3680:	cmpmc	@c00, value
000933:0x001e3690:	bne	0x1e36e0
000935:0x001e3698:	icall	
000935:0x001e36a8:	move	key, #return
000936:0x001e36b8:	imove	#return, 0x000001
000936:0x001e36c8:	move	key, key
000936:0x001e36d8:	rts
000936:0x001e36e0:	jump	0x1e3628
000939:0x001e36e8:	imove	#return, 0x000000
000939:0x001e36f8:	move	key, key
000939:0x001e3708:	rts
000939:0x001e3710:	move	key, key
000939:0x001e3720:	rts
map<int,@array<string>>::GetKeyArray()
000885:0x001e3a70:	new	keys, array<int>
000886:0x001e3a90:	imove	i, 0x000000
000886:0x001e3aa0:	jump	0x1e3ac0
000886:0x001e3aa8:	move	@m00, i
000886:0x001e3ab8:	inc	i
000886:0x001e3ac0:	ncalli	map<int,@array<string>>.Count()
000886:0x001e3ac8:	cmpi	i, #return
000886:0x001e3ad8:	bge	0x1e3b08
000888:0x001e3ae0:	icall	
000888:0x001e3af0:	icall	
000888:0x001e3b00:	jump	0x1e3aa8
000890:0x001e3b08:	movem	#return, keys
000890:0x001e3b18:	release	keys
000890:0x001e3b20:	rts
000890:0x001e3b28:	release	keys
000890:0x001e3b30:	rts
map<int,@array<string>>::GetValueArray()
000895:0x001e3b88:	new	elements, array<array<string>>
000896:0x001e3ba8:	imove	i, 0x000000
000896:0x001e3bb8:	jump	0x1e3bd8
000896:0x001e3bc0:	move	@m00, i
000896:0x001e3bd0:	inc	i
000896:0x001e3bd8:	ncalli	map<int,@array<string>>.Count()
000896:0x001e3be0:	cmpi	i, #return
000896:0x001e3bf0:	bge	0x1e3c20
000898:0x001e3bf8:	icall	
000898:0x001e3c08:	icall	
000898:0x001e3c18:	jump	0x1e3bc0
000900:0x001e3c20:	movem	#return, elements
000900:0x001e3c30:	release	elements
000900:0x001e3c38:	rts
000900:0x001e3c40:	release	elements
000900:0x001e3c48:	rts
map<int,@array<string>>::ReplaceKey()
000905:0x001e3c50:	icall	
000905:0x001e3c60:	cmpi	#return, _i0
000905:0x001e3c70:	beq	0x1e3cc0
000907:0x001e3c78:	icall	
000907:0x001e3c88:	icall	
000908:0x001e3c98:	icall	
000909:0x001e3ca8:	imove	#return, 0x000001
000909:0x001e3cb8:	rts
000911:0x001e3cc0:	imove	#return, 0x000000
000911:0x001e3cd0:	rts
000911:0x001e3cd8:	rts
map<int,@array<string>>::GetKeyByValue()
000917:0x001e3d30:	imove	i, 0x000000
000917:0x001e3d40:	jump	0x1e3d60
000917:0x001e3d48:	move	@m00, i
000917:0x001e3d58:	inc	i
000917:0x001e3d60:	ncalli	map<int,@array<string>>.Count()
000917:0x001e3d68:	cmpi	i, #return
000917:0x001e3d78:	bge	0x1e3de8
000919:0x001e3d80:	icall	
000919:0x001e3d90:	movec	@c00, #return
000919:0x001e3da0:	cmpmc	@c00, value
000919:0x001e3db0:	bne	0x1e3de0
000921:0x001e3db8:	icall	
000921:0x001e3dc8:	move	ret, #return
000922:0x001e3dd8:	jump	0x1e3de8
000922:0x001e3de0:	jump	0x1e3d48
000926:0x001e3de8:	move	#return, ret
000926:0x001e3df8:	rts
000926:0x001e3e00:	rts
map<int,@array<string>>::GetKeyByValueChecked()
000931:0x001e3e30:	imove	i, 0x000000
000931:0x001e3e40:	jump	0x1e3e60
000931:0x001e3e48:	move	@m00, i
000931:0x001e3e58:	inc	i
000931:0x001e3e60:	ncalli	map<int,@array<string>>.Count()
000931:0x001e3e68:	cmpi	i, #return
000931:0x001e3e78:	bge	0x1e3f08
000933:0x001e3e80:	icall	
000933:0x001e3e90:	movec	@c00, #return
000933:0x001e3ea0:	cmpmc	@c00, value
000933:0x001e3eb0:	bne	0x1e3f00
000935:0x001e3eb8:	icall	
000935:0x001e3ec8:	move	key, #return
000936:0x001e3ed8:	imove	#return, 0x000001
000936:0x001e3ee8:	move	key, key
000936:0x001e3ef8:	rts
000936:0x001e3f00:	jump	0x1e3e48
000939:0x001e3f08:	imove	#return, 0x000000
000939:0x001e3f18:	move	key, key
000939:0x001e3f28:	rts
000939:0x001e3f30:	move	key, key
000939:0x001e3f40:	rts
array<Selection>::InsertAll()
000427:0x001e4538:	imove	i, 0x000000
000427:0x001e4548:	jump	0x1e4568
000427:0x001e4550:	move	@m00, i
000427:0x001e4560:	inc	i
000427:0x001e4568:	ncalli	array<Selection>.Count()
000427:0x001e4570:	cmpi	i, #return
000427:0x001e4580:	bge	0x1e45b0
000429:0x001e4588:	icall	
000429:0x001e4598:	icall	
000429:0x001e45a8:	jump	0x1e4550
000429:0x001e45b0:	rts
array<Selection>::RemoveItem()
000479:0x001e45e0:	icall	
000479:0x001e45f0:	move	remove_index, #return
000481:0x001e4600:	cmpi	remove_index, _i0
000481:0x001e4610:	blt	0x1e4628
000483:0x001e4618:	ncalli	array<Selection>.RemoveOrdered(remove_index)
000483:0x001e4628:	rts
array<Selection>::RemoveItemUnOrdered()
000489:0x001e4658:	icall	
000489:0x001e4668:	move	remove_index, #return
000491:0x001e4678:	cmpi	remove_index, _i0
000491:0x001e4688:	blt	0x1e46a0
000493:0x001e4690:	ncalli	array<Selection>.Remove(remove_index)
000493:0x001e46a0:	rts
array<Selection>::IsValidIndex()
000499:0x001e46a8:	cmpi	index, _i-1
000499:0x001e46b8:	ble	0x1e46f8
000499:0x001e46c0:	ncalli	array<Selection>.Count()
000499:0x001e46c8:	cmpi	index, #return
000499:0x001e46d8:	bge	0x1e46f8
000499:0x001e46e0:	imove	#return, 0x000001
000499:0x001e46f0:	jump	0x1e4708
000499:0x001e46f8:	imove	#return, 0x000000
000499:0x001e4708:	rts
000499:0x001e4710:	rts
array<Selection>::Debug()
000525:0x001e4768:	ncalli	array<Selection>.Count()
000525:0x001e4770:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001e47a0:	icall	Print(#return)
000526:0x001e47b0:	imove	i, 0x000000
000526:0x001e47c0:	jump	0x1e47e0
000526:0x001e47c8:	move	@m00, i
000526:0x001e47d8:	inc	i
000526:0x001e47e0:	ncalli	array<Selection>.Count()
000526:0x001e47e8:	cmpi	i, #return
000526:0x001e47f8:	bge	0x1e4868
000528:0x001e4800:	icall	
000528:0x001e4810:	movec	item, #return
000529:0x001e4820:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001e4850:	icall	Print(#return)
000529:0x001e4860:	jump	0x1e47c8
000529:0x001e4868:	rts
array<Selection>::GetRandomIndex()
000544:0x001e4870:	ncalli	array<Selection>.Count()
000544:0x001e4878:	move	@m00, #return
000544:0x001e4888:	cmpi	@m00, _i0
000544:0x001e4898:	ble	0x1e48d0
000546:0x001e48a0:	ncalli	array<Selection>.Count()
000546:0x001e48a8:	icall	RandomInt(_i0, #return)
000546:0x001e48b8:	move	#return, #return
000546:0x001e48c8:	rts
000549:0x001e48d0:	imove	#return, 0xffffffff
000549:0x001e48e0:	rts
000549:0x001e48e8:	rts
array<Selection>::GetRandomElement()
000563:0x001e48f0:	call	
000563:0x001e4900:	icall	
000563:0x001e4910:	movec	#return, #return
000563:0x001e4920:	rts
000563:0x001e4928:	rts
array<Selection>::SwapItems()
000568:0x001e4958:	icall	
000568:0x001e4968:	movec	item1, #return
000569:0x001e4978:	icall	
000569:0x001e4988:	icall	
000570:0x001e4998:	icall	
000570:0x001e49a8:	rts
array<Selection>::InsertArray()
000575:0x001e4a00:	imove	i, 0x000000
000575:0x001e4a10:	jump	0x1e4a30
000575:0x001e4a18:	move	@m00, i
000575:0x001e4a28:	inc	i
000575:0x001e4a30:	ncalli	array<Selection>.Count()
000575:0x001e4a38:	cmpi	i, #return
000575:0x001e4a48:	bge	0x1e4a88
000577:0x001e4a50:	icall	
000577:0x001e4a60:	movec	item, #return
000578:0x001e4a70:	icall	
000578:0x001e4a80:	jump	0x1e4a18
000578:0x001e4a88:	rts
array<Selection>::Invert()
000584:0x001e4b08:	imove	left, 0x000000
000585:0x001e4b18:	ncalli	array<Selection>.Count()
000585:0x001e4b20:	subi	right, #return, _i1
000586:0x001e4b30:	cmpi	right, _i0
000586:0x001e4b40:	ble	0x1e4be8
000588:0x001e4b48:	cmpi	left, right
000588:0x001e4b58:	bge	0x1e4be8
000590:0x001e4b60:	icall	
000590:0x001e4b70:	movec	temp, #return
000591:0x001e4b80:	move	@m00, left
000591:0x001e4b90:	inc	left
000591:0x001e4b98:	icall	
000591:0x001e4ba8:	icall	
000592:0x001e4bb8:	move	@m00, right
000592:0x001e4bc8:	dec	right
000592:0x001e4bd0:	icall	
000592:0x001e4be0:	jump	0x1e4b48
000592:0x001e4be8:	rts
array<Selection>::MoveIndex()
000612:0x001e4c40:	ncalli	array<Selection>.Count()
000612:0x001e4c48:	move	count, #return
000613:0x001e4c58:	move	new_index, curr_index
000615:0x001e4c68:	cmpi	move_number, _i0
000615:0x001e4c78:	ble	0x1e4ca0
000617:0x001e4c80:	addi	@m00, curr_index, move_number
000617:0x001e4c90:	move	new_index, @m00
000620:0x001e4ca0:	cmpi	move_number, _i0
000620:0x001e4cb0:	bge	0x1e4d58
000622:0x001e4cb8:	subi	@m00, curr_index, move_number
000622:0x001e4cc8:	move	new_index, @m00
000624:0x001e4cd8:	cmpi	new_index, _i0
000624:0x001e4ce8:	bge	0x1e4d58
000626:0x001e4cf0:	subi	@m01, _i0, count
000626:0x001e4d00:	cmpi	new_index, @m01
000626:0x001e4d10:	bgt	0x1e4d38
000628:0x001e4d18:	modi	@m00, new_index, count
000628:0x001e4d28:	move	new_index, @m00
000631:0x001e4d38:	addi	@m00, new_index, count
000631:0x001e4d48:	move	new_index, @m00
000635:0x001e4d58:	cmpi	new_index, count
000635:0x001e4d68:	blt	0x1e4d90
000637:0x001e4d70:	modi	@m00, new_index, count
000637:0x001e4d80:	move	new_index, @m00
000641:0x001e4d90:	move	#return, new_index
000641:0x001e4da0:	rts
000641:0x001e4da8:	rts
array<Selection>::ShuffleArray()
000646:0x001e4dd8:	imove	i, 0x000000
000646:0x001e4de8:	jump	0x1e4e08
000646:0x001e4df0:	move	@m00, i
000646:0x001e4e00:	inc	i
000646:0x001e4e08:	ncalli	array<Selection>.Count()
000646:0x001e4e10:	cmpi	i, #return
000646:0x001e4e20:	bge	0x1e4e58
000648:0x001e4e28:	call	
000648:0x001e4e38:	call	
000648:0x001e4e50:	jump	0x1e4df0
000648:0x001e4e58:	rts
array<Selection>::DifferentAtPosition()
000666:0x001e4e88:	ncalli	array<Selection>.Count()
000666:0x001e4e90:	move	@m00, #return
000666:0x001e4ea0:	push	#return
000666:0x001e4ea8:	ncalli	array<Selection>.Count()
000666:0x001e4eb0:	move	@m02, #return
000666:0x001e4ec0:	pop	#return
000666:0x001e4ec8:	cmpi	@m00, @m02
000666:0x001e4ed8:	beq	0x1e4f08
000668:0x001e4ee0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001e4ef0:	imove	#return, 0xffffffff
000669:0x001e4f00:	rts
000672:0x001e4f08:	imove	i, 0x000000
000672:0x001e4f18:	jump	0x1e4f28
000672:0x001e4f20:	inc	i
000672:0x001e4f28:	ncalli	array<Selection>.Count()
000672:0x001e4f30:	cmpi	i, #return
000672:0x001e4f40:	bge	0x1e4fd0
000674:0x001e4f48:	icall	
000674:0x001e4f58:	movec	@c00, #return
000674:0x001e4f68:	pushc	#return
000674:0x001e4f70:	icall	
000674:0x001e4f80:	movec	@c02, #return
000674:0x001e4f90:	popc	#return
000674:0x001e4f98:	cmpc	@c00, @c02
000674:0x001e4fa8:	beq	0x1e4fc8
000676:0x001e4fb0:	move	#return, i
000676:0x001e4fc0:	rts
000676:0x001e4fc8:	jump	0x1e4f20
000680:0x001e4fd0:	imove	#return, 0xffffffff
000680:0x001e4fe0:	rts
000680:0x001e4fe8:	rts
array<JsonDataCreditsSection>::InsertAll()
000427:0x001e5828:	imove	i, 0x000000
000427:0x001e5838:	jump	0x1e5858
000427:0x001e5840:	move	@m00, i
000427:0x001e5850:	inc	i
000427:0x001e5858:	ncalli	array<JsonDataCreditsSection>.Count()
000427:0x001e5860:	cmpi	i, #return
000427:0x001e5870:	bge	0x1e58a0
000429:0x001e5878:	icall	
000429:0x001e5888:	icall	
000429:0x001e5898:	jump	0x1e5840
000429:0x001e58a0:	rts
array<JsonDataCreditsSection>::RemoveItem()
000479:0x001e58d0:	movefm	@c00, value
000479:0x001e58e0:	icall	
000479:0x001e58f0:	move	remove_index, #return
000481:0x001e5900:	cmpi	remove_index, _i0
000481:0x001e5910:	blt	0x1e5928
000483:0x001e5918:	ncalli	array<JsonDataCreditsSection>.RemoveOrdered(remove_index)
000483:0x001e5928:	rts
array<JsonDataCreditsSection>::RemoveItemUnOrdered()
000489:0x001e5958:	movefm	@c00, value
000489:0x001e5968:	icall	
000489:0x001e5978:	move	remove_index, #return
000491:0x001e5988:	cmpi	remove_index, _i0
000491:0x001e5998:	blt	0x1e59b0
000493:0x001e59a0:	ncalli	array<JsonDataCreditsSection>.Remove(remove_index)
000493:0x001e59b0:	rts
array<JsonDataCreditsSection>::IsValidIndex()
000499:0x001e59b8:	cmpi	index, _i-1
000499:0x001e59c8:	ble	0x1e5a08
000499:0x001e59d0:	ncalli	array<JsonDataCreditsSection>.Count()
000499:0x001e59d8:	cmpi	index, #return
000499:0x001e59e8:	bge	0x1e5a08
000499:0x001e59f0:	imove	#return, 0x000001
000499:0x001e5a00:	jump	0x1e5a18
000499:0x001e5a08:	imove	#return, 0x000000
000499:0x001e5a18:	rts
000499:0x001e5a20:	rts
array<JsonDataCreditsSection>::Debug()
000525:0x001e5a78:	ncalli	array<JsonDataCreditsSection>.Count()
000525:0x001e5a80:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001e5ab0:	icall	Print(#return)
000526:0x001e5ac0:	imove	i, 0x000000
000526:0x001e5ad0:	jump	0x1e5af0
000526:0x001e5ad8:	move	@m00, i
000526:0x001e5ae8:	inc	i
000526:0x001e5af0:	ncalli	array<JsonDataCreditsSection>.Count()
000526:0x001e5af8:	cmpi	i, #return
000526:0x001e5b08:	bge	0x1e5b80
000528:0x001e5b10:	icall	
000528:0x001e5b20:	movetm	item, #return
000529:0x001e5b30:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001e5b60:	icall	Print(#return)
000529:0x001e5b70:	release	item
000529:0x001e5b78:	jump	0x1e5ad8
000529:0x001e5b80:	rts
array<JsonDataCreditsSection>::GetRandomIndex()
000544:0x001e5b88:	ncalli	array<JsonDataCreditsSection>.Count()
000544:0x001e5b90:	move	@m00, #return
000544:0x001e5ba0:	cmpi	@m00, _i0
000544:0x001e5bb0:	ble	0x1e5be8
000546:0x001e5bb8:	ncalli	array<JsonDataCreditsSection>.Count()
000546:0x001e5bc0:	icall	RandomInt(_i0, #return)
000546:0x001e5bd0:	move	#return, #return
000546:0x001e5be0:	rts
000549:0x001e5be8:	imove	#return, 0xffffffff
000549:0x001e5bf8:	rts
000549:0x001e5c00:	rts
array<JsonDataCreditsSection>::GetRandomElement()
000563:0x001e5c08:	call	
000563:0x001e5c18:	icall	
000563:0x001e5c28:	movetm	#return, #return
000563:0x001e5c38:	rts
000563:0x001e5c40:	rts
array<JsonDataCreditsSection>::SwapItems()
000568:0x001e5c70:	icall	
000568:0x001e5c80:	movetm	item1, #return
000569:0x001e5c90:	icall	
000569:0x001e5ca0:	icall	
000570:0x001e5cb0:	movefm	@c00, item1
000570:0x001e5cc0:	icall	
000570:0x001e5cd0:	release	item1
000570:0x001e5cd8:	rts
array<JsonDataCreditsSection>::InsertArray()
000575:0x001e5d30:	imove	i, 0x000000
000575:0x001e5d40:	jump	0x1e5d60
000575:0x001e5d48:	move	@m00, i
000575:0x001e5d58:	inc	i
000575:0x001e5d60:	ncalli	array<JsonDataCreditsSection>.Count()
000575:0x001e5d68:	cmpi	i, #return
000575:0x001e5d78:	bge	0x1e5dd0
000577:0x001e5d80:	icall	
000577:0x001e5d90:	movetm	item, #return
000578:0x001e5da0:	movefm	@c00, item
000578:0x001e5db0:	icall	
000578:0x001e5dc0:	release	item
000578:0x001e5dc8:	jump	0x1e5d48
000578:0x001e5dd0:	rts
array<JsonDataCreditsSection>::Invert()
000584:0x001e5e50:	imove	left, 0x000000
000585:0x001e5e60:	ncalli	array<JsonDataCreditsSection>.Count()
000585:0x001e5e68:	subi	right, #return, _i1
000586:0x001e5e78:	cmpi	right, _i0
000586:0x001e5e88:	ble	0x1e5f48
000588:0x001e5e90:	cmpi	left, right
000588:0x001e5ea0:	bge	0x1e5f48
000590:0x001e5ea8:	icall	
000590:0x001e5eb8:	movetm	temp, #return
000591:0x001e5ec8:	move	@m00, left
000591:0x001e5ed8:	inc	left
000591:0x001e5ee0:	icall	
000591:0x001e5ef0:	icall	
000592:0x001e5f00:	move	@m00, right
000592:0x001e5f10:	dec	right
000592:0x001e5f18:	movefm	@c00, temp
000592:0x001e5f28:	icall	
000592:0x001e5f38:	release	temp
000592:0x001e5f40:	jump	0x1e5e90
000592:0x001e5f48:	rts
array<JsonDataCreditsSection>::MoveIndex()
000612:0x001e5fa0:	ncalli	array<JsonDataCreditsSection>.Count()
000612:0x001e5fa8:	move	count, #return
000613:0x001e5fb8:	move	new_index, curr_index
000615:0x001e5fc8:	cmpi	move_number, _i0
000615:0x001e5fd8:	ble	0x1e6000
000617:0x001e5fe0:	addi	@m00, curr_index, move_number
000617:0x001e5ff0:	move	new_index, @m00
000620:0x001e6000:	cmpi	move_number, _i0
000620:0x001e6010:	bge	0x1e60b8
000622:0x001e6018:	subi	@m00, curr_index, move_number
000622:0x001e6028:	move	new_index, @m00
000624:0x001e6038:	cmpi	new_index, _i0
000624:0x001e6048:	bge	0x1e60b8
000626:0x001e6050:	subi	@m01, _i0, count
000626:0x001e6060:	cmpi	new_index, @m01
000626:0x001e6070:	bgt	0x1e6098
000628:0x001e6078:	modi	@m00, new_index, count
000628:0x001e6088:	move	new_index, @m00
000631:0x001e6098:	addi	@m00, new_index, count
000631:0x001e60a8:	move	new_index, @m00
000635:0x001e60b8:	cmpi	new_index, count
000635:0x001e60c8:	blt	0x1e60f0
000637:0x001e60d0:	modi	@m00, new_index, count
000637:0x001e60e0:	move	new_index, @m00
000641:0x001e60f0:	move	#return, new_index
000641:0x001e6100:	rts
000641:0x001e6108:	rts
array<JsonDataCreditsSection>::ShuffleArray()
000646:0x001e6138:	imove	i, 0x000000
000646:0x001e6148:	jump	0x1e6168
000646:0x001e6150:	move	@m00, i
000646:0x001e6160:	inc	i
000646:0x001e6168:	ncalli	array<JsonDataCreditsSection>.Count()
000646:0x001e6170:	cmpi	i, #return
000646:0x001e6180:	bge	0x1e61b8
000648:0x001e6188:	call	
000648:0x001e6198:	call	
000648:0x001e61b0:	jump	0x1e6150
000648:0x001e61b8:	rts
array<JsonDataCreditsSection>::DifferentAtPosition()
000666:0x001e61e8:	ncalli	array<JsonDataCreditsSection>.Count()
000666:0x001e61f0:	move	@m00, #return
000666:0x001e6200:	push	#return
000666:0x001e6208:	ncalli	array<JsonDataCreditsSection>.Count()
000666:0x001e6210:	move	@m02, #return
000666:0x001e6220:	pop	#return
000666:0x001e6228:	cmpi	@m00, @m02
000666:0x001e6238:	beq	0x1e6268
000668:0x001e6240:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001e6250:	imove	#return, 0xffffffff
000669:0x001e6260:	rts
000672:0x001e6268:	imove	i, 0x000000
000672:0x001e6278:	jump	0x1e6288
000672:0x001e6280:	inc	i
000672:0x001e6288:	ncalli	array<JsonDataCreditsSection>.Count()
000672:0x001e6290:	cmpi	i, #return
000672:0x001e62a0:	bge	0x1e6330
000674:0x001e62a8:	icall	
000674:0x001e62b8:	movec	@c00, #return
000674:0x001e62c8:	pushc	#return
000674:0x001e62d0:	icall	
000674:0x001e62e0:	movec	@c02, #return
000674:0x001e62f0:	popc	#return
000674:0x001e62f8:	cmpc	@c00, @c02
000674:0x001e6308:	beq	0x1e6328
000676:0x001e6310:	move	#return, i
000676:0x001e6320:	rts
000676:0x001e6328:	jump	0x1e6280
000680:0x001e6330:	imove	#return, 0xffffffff
000680:0x001e6340:	rts
000680:0x001e6348:	rts
array<@JsonDataCreditsSection>::InsertAll()
000427:0x001e6760:	imove	i, 0x000000
000427:0x001e6770:	jump	0x1e6790
000427:0x001e6778:	move	@m00, i
000427:0x001e6788:	inc	i
000427:0x001e6790:	ncalli	array<JsonDataCreditsSection>.Count()
000427:0x001e6798:	cmpi	i, #return
000427:0x001e67a8:	bge	0x1e67d8
000429:0x001e67b0:	icall	
000429:0x001e67c0:	icall	
000429:0x001e67d0:	jump	0x1e6778
000429:0x001e67d8:	rts
array<@JsonDataCreditsSection>::RemoveItem()
000479:0x001e6808:	movefm	@c00, value
000479:0x001e6818:	icall	
000479:0x001e6828:	move	remove_index, #return
000481:0x001e6838:	cmpi	remove_index, _i0
000481:0x001e6848:	blt	0x1e6860
000483:0x001e6850:	ncalli	array<@JsonDataCreditsSection>.RemoveOrdered(remove_index)
000483:0x001e6860:	rts
array<@JsonDataCreditsSection>::RemoveItemUnOrdered()
000489:0x001e6890:	movefm	@c00, value
000489:0x001e68a0:	icall	
000489:0x001e68b0:	move	remove_index, #return
000491:0x001e68c0:	cmpi	remove_index, _i0
000491:0x001e68d0:	blt	0x1e68e8
000493:0x001e68d8:	ncalli	array<@JsonDataCreditsSection>.Remove(remove_index)
000493:0x001e68e8:	rts
array<@JsonDataCreditsSection>::IsValidIndex()
000499:0x001e68f0:	cmpi	index, _i-1
000499:0x001e6900:	ble	0x1e6940
000499:0x001e6908:	ncalli	array<@JsonDataCreditsSection>.Count()
000499:0x001e6910:	cmpi	index, #return
000499:0x001e6920:	bge	0x1e6940
000499:0x001e6928:	imove	#return, 0x000001
000499:0x001e6938:	jump	0x1e6950
000499:0x001e6940:	imove	#return, 0x000000
000499:0x001e6950:	rts
000499:0x001e6958:	rts
array<@JsonDataCreditsSection>::Debug()
000525:0x001e69b0:	ncalli	array<@JsonDataCreditsSection>.Count()
000525:0x001e69b8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001e69e8:	icall	Print(#return)
000526:0x001e69f8:	imove	i, 0x000000
000526:0x001e6a08:	jump	0x1e6a28
000526:0x001e6a10:	move	@m00, i
000526:0x001e6a20:	inc	i
000526:0x001e6a28:	ncalli	array<@JsonDataCreditsSection>.Count()
000526:0x001e6a30:	cmpi	i, #return
000526:0x001e6a40:	bge	0x1e6ab8
000528:0x001e6a48:	icall	
000528:0x001e6a58:	movetm	item, #return
000529:0x001e6a68:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001e6a98:	icall	Print(#return)
000529:0x001e6aa8:	release	item
000529:0x001e6ab0:	jump	0x1e6a10
000529:0x001e6ab8:	rts
array<@JsonDataCreditsSection>::GetRandomIndex()
000544:0x001e6ac0:	ncalli	array<@JsonDataCreditsSection>.Count()
000544:0x001e6ac8:	move	@m00, #return
000544:0x001e6ad8:	cmpi	@m00, _i0
000544:0x001e6ae8:	ble	0x1e6b20
000546:0x001e6af0:	ncalli	array<@JsonDataCreditsSection>.Count()
000546:0x001e6af8:	icall	RandomInt(_i0, #return)
000546:0x001e6b08:	move	#return, #return
000546:0x001e6b18:	rts
000549:0x001e6b20:	imove	#return, 0xffffffff
000549:0x001e6b30:	rts
000549:0x001e6b38:	rts
array<@JsonDataCreditsSection>::GetRandomElement()
000563:0x001e6b40:	call	
000563:0x001e6b50:	icall	
000563:0x001e6b60:	movetm	#return, #return
000563:0x001e6b70:	rts
000563:0x001e6b78:	rts
array<@JsonDataCreditsSection>::SwapItems()
000568:0x001e6ba8:	icall	
000568:0x001e6bb8:	movetm	item1, #return
000569:0x001e6bc8:	icall	
000569:0x001e6bd8:	icall	
000570:0x001e6be8:	movefm	@c00, item1
000570:0x001e6bf8:	icall	
000570:0x001e6c08:	release	item1
000570:0x001e6c10:	rts
array<@JsonDataCreditsSection>::InsertArray()
000575:0x001e6c68:	imove	i, 0x000000
000575:0x001e6c78:	jump	0x1e6c98
000575:0x001e6c80:	move	@m00, i
000575:0x001e6c90:	inc	i
000575:0x001e6c98:	ncalli	array<JsonDataCreditsSection>.Count()
000575:0x001e6ca0:	cmpi	i, #return
000575:0x001e6cb0:	bge	0x1e6d08
000577:0x001e6cb8:	icall	
000577:0x001e6cc8:	movetm	item, #return
000578:0x001e6cd8:	movefm	@c00, item
000578:0x001e6ce8:	icall	
000578:0x001e6cf8:	release	item
000578:0x001e6d00:	jump	0x1e6c80
000578:0x001e6d08:	rts
array<@JsonDataCreditsSection>::Invert()
000584:0x001e6d88:	imove	left, 0x000000
000585:0x001e6d98:	ncalli	array<@JsonDataCreditsSection>.Count()
000585:0x001e6da0:	subi	right, #return, _i1
000586:0x001e6db0:	cmpi	right, _i0
000586:0x001e6dc0:	ble	0x1e6e80
000588:0x001e6dc8:	cmpi	left, right
000588:0x001e6dd8:	bge	0x1e6e80
000590:0x001e6de0:	icall	
000590:0x001e6df0:	movetm	temp, #return
000591:0x001e6e00:	move	@m00, left
000591:0x001e6e10:	inc	left
000591:0x001e6e18:	icall	
000591:0x001e6e28:	icall	
000592:0x001e6e38:	move	@m00, right
000592:0x001e6e48:	dec	right
000592:0x001e6e50:	movefm	@c00, temp
000592:0x001e6e60:	icall	
000592:0x001e6e70:	release	temp
000592:0x001e6e78:	jump	0x1e6dc8
000592:0x001e6e80:	rts
array<@JsonDataCreditsSection>::MoveIndex()
000612:0x001e6ed8:	ncalli	array<@JsonDataCreditsSection>.Count()
000612:0x001e6ee0:	move	count, #return
000613:0x001e6ef0:	move	new_index, curr_index
000615:0x001e6f00:	cmpi	move_number, _i0
000615:0x001e6f10:	ble	0x1e6f38
000617:0x001e6f18:	addi	@m00, curr_index, move_number
000617:0x001e6f28:	move	new_index, @m00
000620:0x001e6f38:	cmpi	move_number, _i0
000620:0x001e6f48:	bge	0x1e6ff0
000622:0x001e6f50:	subi	@m00, curr_index, move_number
000622:0x001e6f60:	move	new_index, @m00
000624:0x001e6f70:	cmpi	new_index, _i0
000624:0x001e6f80:	bge	0x1e6ff0
000626:0x001e6f88:	subi	@m01, _i0, count
000626:0x001e6f98:	cmpi	new_index, @m01
000626:0x001e6fa8:	bgt	0x1e6fd0
000628:0x001e6fb0:	modi	@m00, new_index, count
000628:0x001e6fc0:	move	new_index, @m00
000631:0x001e6fd0:	addi	@m00, new_index, count
000631:0x001e6fe0:	move	new_index, @m00
000635:0x001e6ff0:	cmpi	new_index, count
000635:0x001e7000:	blt	0x1e7028
000637:0x001e7008:	modi	@m00, new_index, count
000637:0x001e7018:	move	new_index, @m00
000641:0x001e7028:	move	#return, new_index
000641:0x001e7038:	rts
000641:0x001e7040:	rts
array<@JsonDataCreditsSection>::ShuffleArray()
000646:0x001e7070:	imove	i, 0x000000
000646:0x001e7080:	jump	0x1e70a0
000646:0x001e7088:	move	@m00, i
000646:0x001e7098:	inc	i
000646:0x001e70a0:	ncalli	array<@JsonDataCreditsSection>.Count()
000646:0x001e70a8:	cmpi	i, #return
000646:0x001e70b8:	bge	0x1e70f0
000648:0x001e70c0:	call	
000648:0x001e70d0:	call	
000648:0x001e70e8:	jump	0x1e7088
000648:0x001e70f0:	rts
array<@JsonDataCreditsSection>::DifferentAtPosition()
000666:0x001e7120:	ncalli	array<@JsonDataCreditsSection>.Count()
000666:0x001e7128:	move	@m00, #return
000666:0x001e7138:	ncalli	array<JsonDataCreditsSection>.Count()
000666:0x001e7140:	cmpi	@m00, #return
000666:0x001e7150:	beq	0x1e7180
000668:0x001e7158:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001e7168:	imove	#return, 0xffffffff
000669:0x001e7178:	rts
000672:0x001e7180:	imove	i, 0x000000
000672:0x001e7190:	jump	0x1e71a0
000672:0x001e7198:	inc	i
000672:0x001e71a0:	ncalli	array<JsonDataCreditsSection>.Count()
000672:0x001e71a8:	cmpi	i, #return
000672:0x001e71b8:	bge	0x1e7228
000674:0x001e71c0:	icall	
000674:0x001e71d0:	movec	@c00, #return
000674:0x001e71e0:	icall	
000674:0x001e71f0:	cmpc	@c00, #return
000674:0x001e7200:	beq	0x1e7220
000676:0x001e7208:	move	#return, i
000676:0x001e7218:	rts
000676:0x001e7220:	jump	0x1e7198
000680:0x001e7228:	imove	#return, 0xffffffff
000680:0x001e7238:	rts
000680:0x001e7240:	rts
array<JsonDataCreditsDepartment>::InsertAll()
000427:0x001e7a88:	imove	i, 0x000000
000427:0x001e7a98:	jump	0x1e7ab8
000427:0x001e7aa0:	move	@m00, i
000427:0x001e7ab0:	inc	i
000427:0x001e7ab8:	ncalli	array<JsonDataCreditsDepartment>.Count()
000427:0x001e7ac0:	cmpi	i, #return
000427:0x001e7ad0:	bge	0x1e7b00
000429:0x001e7ad8:	icall	
000429:0x001e7ae8:	icall	
000429:0x001e7af8:	jump	0x1e7aa0
000429:0x001e7b00:	rts
array<JsonDataCreditsDepartment>::RemoveItem()
000479:0x001e7b30:	movefm	@c00, value
000479:0x001e7b40:	icall	
000479:0x001e7b50:	move	remove_index, #return
000481:0x001e7b60:	cmpi	remove_index, _i0
000481:0x001e7b70:	blt	0x1e7b88
000483:0x001e7b78:	ncalli	array<JsonDataCreditsDepartment>.RemoveOrdered(remove_index)
000483:0x001e7b88:	rts
array<JsonDataCreditsDepartment>::RemoveItemUnOrdered()
000489:0x001e7bb8:	movefm	@c00, value
000489:0x001e7bc8:	icall	
000489:0x001e7bd8:	move	remove_index, #return
000491:0x001e7be8:	cmpi	remove_index, _i0
000491:0x001e7bf8:	blt	0x1e7c10
000493:0x001e7c00:	ncalli	array<JsonDataCreditsDepartment>.Remove(remove_index)
000493:0x001e7c10:	rts
array<JsonDataCreditsDepartment>::IsValidIndex()
000499:0x001e7c18:	cmpi	index, _i-1
000499:0x001e7c28:	ble	0x1e7c68
000499:0x001e7c30:	ncalli	array<JsonDataCreditsDepartment>.Count()
000499:0x001e7c38:	cmpi	index, #return
000499:0x001e7c48:	bge	0x1e7c68
000499:0x001e7c50:	imove	#return, 0x000001
000499:0x001e7c60:	jump	0x1e7c78
000499:0x001e7c68:	imove	#return, 0x000000
000499:0x001e7c78:	rts
000499:0x001e7c80:	rts
array<JsonDataCreditsDepartment>::Debug()
000525:0x001e7cd8:	ncalli	array<JsonDataCreditsDepartment>.Count()
000525:0x001e7ce0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001e7d10:	icall	Print(#return)
000526:0x001e7d20:	imove	i, 0x000000
000526:0x001e7d30:	jump	0x1e7d50
000526:0x001e7d38:	move	@m00, i
000526:0x001e7d48:	inc	i
000526:0x001e7d50:	ncalli	array<JsonDataCreditsDepartment>.Count()
000526:0x001e7d58:	cmpi	i, #return
000526:0x001e7d68:	bge	0x1e7de0
000528:0x001e7d70:	icall	
000528:0x001e7d80:	movetm	item, #return
000529:0x001e7d90:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001e7dc0:	icall	Print(#return)
000529:0x001e7dd0:	release	item
000529:0x001e7dd8:	jump	0x1e7d38
000529:0x001e7de0:	rts
array<JsonDataCreditsDepartment>::GetRandomIndex()
000544:0x001e7de8:	ncalli	array<JsonDataCreditsDepartment>.Count()
000544:0x001e7df0:	move	@m00, #return
000544:0x001e7e00:	cmpi	@m00, _i0
000544:0x001e7e10:	ble	0x1e7e48
000546:0x001e7e18:	ncalli	array<JsonDataCreditsDepartment>.Count()
000546:0x001e7e20:	icall	RandomInt(_i0, #return)
000546:0x001e7e30:	move	#return, #return
000546:0x001e7e40:	rts
000549:0x001e7e48:	imove	#return, 0xffffffff
000549:0x001e7e58:	rts
000549:0x001e7e60:	rts
array<JsonDataCreditsDepartment>::GetRandomElement()
000563:0x001e7e68:	call	
000563:0x001e7e78:	icall	
000563:0x001e7e88:	movetm	#return, #return
000563:0x001e7e98:	rts
000563:0x001e7ea0:	rts
array<JsonDataCreditsDepartment>::SwapItems()
000568:0x001e7ed0:	icall	
000568:0x001e7ee0:	movetm	item1, #return
000569:0x001e7ef0:	icall	
000569:0x001e7f00:	icall	
000570:0x001e7f10:	movefm	@c00, item1
000570:0x001e7f20:	icall	
000570:0x001e7f30:	release	item1
000570:0x001e7f38:	rts
array<JsonDataCreditsDepartment>::InsertArray()
000575:0x001e7f90:	imove	i, 0x000000
000575:0x001e7fa0:	jump	0x1e7fc0
000575:0x001e7fa8:	move	@m00, i
000575:0x001e7fb8:	inc	i
000575:0x001e7fc0:	ncalli	array<JsonDataCreditsDepartment>.Count()
000575:0x001e7fc8:	cmpi	i, #return
000575:0x001e7fd8:	bge	0x1e8030
000577:0x001e7fe0:	icall	
000577:0x001e7ff0:	movetm	item, #return
000578:0x001e8000:	movefm	@c00, item
000578:0x001e8010:	icall	
000578:0x001e8020:	release	item
000578:0x001e8028:	jump	0x1e7fa8
000578:0x001e8030:	rts
array<JsonDataCreditsDepartment>::Invert()
000584:0x001e80b0:	imove	left, 0x000000
000585:0x001e80c0:	ncalli	array<JsonDataCreditsDepartment>.Count()
000585:0x001e80c8:	subi	right, #return, _i1
000586:0x001e80d8:	cmpi	right, _i0
000586:0x001e80e8:	ble	0x1e81a8
000588:0x001e80f0:	cmpi	left, right
000588:0x001e8100:	bge	0x1e81a8
000590:0x001e8108:	icall	
000590:0x001e8118:	movetm	temp, #return
000591:0x001e8128:	move	@m00, left
000591:0x001e8138:	inc	left
000591:0x001e8140:	icall	
000591:0x001e8150:	icall	
000592:0x001e8160:	move	@m00, right
000592:0x001e8170:	dec	right
000592:0x001e8178:	movefm	@c00, temp
000592:0x001e8188:	icall	
000592:0x001e8198:	release	temp
000592:0x001e81a0:	jump	0x1e80f0
000592:0x001e81a8:	rts
array<JsonDataCreditsDepartment>::MoveIndex()
000612:0x001e8200:	ncalli	array<JsonDataCreditsDepartment>.Count()
000612:0x001e8208:	move	count, #return
000613:0x001e8218:	move	new_index, curr_index
000615:0x001e8228:	cmpi	move_number, _i0
000615:0x001e8238:	ble	0x1e8260
000617:0x001e8240:	addi	@m00, curr_index, move_number
000617:0x001e8250:	move	new_index, @m00
000620:0x001e8260:	cmpi	move_number, _i0
000620:0x001e8270:	bge	0x1e8318
000622:0x001e8278:	subi	@m00, curr_index, move_number
000622:0x001e8288:	move	new_index, @m00
000624:0x001e8298:	cmpi	new_index, _i0
000624:0x001e82a8:	bge	0x1e8318
000626:0x001e82b0:	subi	@m01, _i0, count
000626:0x001e82c0:	cmpi	new_index, @m01
000626:0x001e82d0:	bgt	0x1e82f8
000628:0x001e82d8:	modi	@m00, new_index, count
000628:0x001e82e8:	move	new_index, @m00
000631:0x001e82f8:	addi	@m00, new_index, count
000631:0x001e8308:	move	new_index, @m00
000635:0x001e8318:	cmpi	new_index, count
000635:0x001e8328:	blt	0x1e8350
000637:0x001e8330:	modi	@m00, new_index, count
000637:0x001e8340:	move	new_index, @m00
000641:0x001e8350:	move	#return, new_index
000641:0x001e8360:	rts
000641:0x001e8368:	rts
array<JsonDataCreditsDepartment>::ShuffleArray()
000646:0x001e8398:	imove	i, 0x000000
000646:0x001e83a8:	jump	0x1e83c8
000646:0x001e83b0:	move	@m00, i
000646:0x001e83c0:	inc	i
000646:0x001e83c8:	ncalli	array<JsonDataCreditsDepartment>.Count()
000646:0x001e83d0:	cmpi	i, #return
000646:0x001e83e0:	bge	0x1e8418
000648:0x001e83e8:	call	
000648:0x001e83f8:	call	
000648:0x001e8410:	jump	0x1e83b0
000648:0x001e8418:	rts
array<JsonDataCreditsDepartment>::DifferentAtPosition()
000666:0x001e8448:	ncalli	array<JsonDataCreditsDepartment>.Count()
000666:0x001e8450:	move	@m00, #return
000666:0x001e8460:	push	#return
000666:0x001e8468:	ncalli	array<JsonDataCreditsDepartment>.Count()
000666:0x001e8470:	move	@m02, #return
000666:0x001e8480:	pop	#return
000666:0x001e8488:	cmpi	@m00, @m02
000666:0x001e8498:	beq	0x1e84c8
000668:0x001e84a0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001e84b0:	imove	#return, 0xffffffff
000669:0x001e84c0:	rts
000672:0x001e84c8:	imove	i, 0x000000
000672:0x001e84d8:	jump	0x1e84e8
000672:0x001e84e0:	inc	i
000672:0x001e84e8:	ncalli	array<JsonDataCreditsDepartment>.Count()
000672:0x001e84f0:	cmpi	i, #return
000672:0x001e8500:	bge	0x1e8590
000674:0x001e8508:	icall	
000674:0x001e8518:	movec	@c00, #return
000674:0x001e8528:	pushc	#return
000674:0x001e8530:	icall	
000674:0x001e8540:	movec	@c02, #return
000674:0x001e8550:	popc	#return
000674:0x001e8558:	cmpc	@c00, @c02
000674:0x001e8568:	beq	0x1e8588
000676:0x001e8570:	move	#return, i
000676:0x001e8580:	rts
000676:0x001e8588:	jump	0x1e84e0
000680:0x001e8590:	imove	#return, 0xffffffff
000680:0x001e85a0:	rts
000680:0x001e85a8:	rts
array<@JsonDataCreditsDepartment>::InsertAll()
000427:0x001e89c0:	imove	i, 0x000000
000427:0x001e89d0:	jump	0x1e89f0
000427:0x001e89d8:	move	@m00, i
000427:0x001e89e8:	inc	i
000427:0x001e89f0:	ncalli	array<JsonDataCreditsDepartment>.Count()
000427:0x001e89f8:	cmpi	i, #return
000427:0x001e8a08:	bge	0x1e8a38
000429:0x001e8a10:	icall	
000429:0x001e8a20:	icall	
000429:0x001e8a30:	jump	0x1e89d8
000429:0x001e8a38:	rts
array<@JsonDataCreditsDepartment>::RemoveItem()
000479:0x001e8a68:	movefm	@c00, value
000479:0x001e8a78:	icall	
000479:0x001e8a88:	move	remove_index, #return
000481:0x001e8a98:	cmpi	remove_index, _i0
000481:0x001e8aa8:	blt	0x1e8ac0
000483:0x001e8ab0:	ncalli	array<@JsonDataCreditsDepartment>.RemoveOrdered(remove_index)
000483:0x001e8ac0:	rts
array<@JsonDataCreditsDepartment>::RemoveItemUnOrdered()
000489:0x001e8af0:	movefm	@c00, value
000489:0x001e8b00:	icall	
000489:0x001e8b10:	move	remove_index, #return
000491:0x001e8b20:	cmpi	remove_index, _i0
000491:0x001e8b30:	blt	0x1e8b48
000493:0x001e8b38:	ncalli	array<@JsonDataCreditsDepartment>.Remove(remove_index)
000493:0x001e8b48:	rts
array<@JsonDataCreditsDepartment>::IsValidIndex()
000499:0x001e8b50:	cmpi	index, _i-1
000499:0x001e8b60:	ble	0x1e8ba0
000499:0x001e8b68:	ncalli	array<@JsonDataCreditsDepartment>.Count()
000499:0x001e8b70:	cmpi	index, #return
000499:0x001e8b80:	bge	0x1e8ba0
000499:0x001e8b88:	imove	#return, 0x000001
000499:0x001e8b98:	jump	0x1e8bb0
000499:0x001e8ba0:	imove	#return, 0x000000
000499:0x001e8bb0:	rts
000499:0x001e8bb8:	rts
array<@JsonDataCreditsDepartment>::Debug()
000525:0x001e8c10:	ncalli	array<@JsonDataCreditsDepartment>.Count()
000525:0x001e8c18:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001e8c48:	icall	Print(#return)
000526:0x001e8c58:	imove	i, 0x000000
000526:0x001e8c68:	jump	0x1e8c88
000526:0x001e8c70:	move	@m00, i
000526:0x001e8c80:	inc	i
000526:0x001e8c88:	ncalli	array<@JsonDataCreditsDepartment>.Count()
000526:0x001e8c90:	cmpi	i, #return
000526:0x001e8ca0:	bge	0x1e8d18
000528:0x001e8ca8:	icall	
000528:0x001e8cb8:	movetm	item, #return
000529:0x001e8cc8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001e8cf8:	icall	Print(#return)
000529:0x001e8d08:	release	item
000529:0x001e8d10:	jump	0x1e8c70
000529:0x001e8d18:	rts
array<@JsonDataCreditsDepartment>::GetRandomIndex()
000544:0x001e8d20:	ncalli	array<@JsonDataCreditsDepartment>.Count()
000544:0x001e8d28:	move	@m00, #return
000544:0x001e8d38:	cmpi	@m00, _i0
000544:0x001e8d48:	ble	0x1e8d80
000546:0x001e8d50:	ncalli	array<@JsonDataCreditsDepartment>.Count()
000546:0x001e8d58:	icall	RandomInt(_i0, #return)
000546:0x001e8d68:	move	#return, #return
000546:0x001e8d78:	rts
000549:0x001e8d80:	imove	#return, 0xffffffff
000549:0x001e8d90:	rts
000549:0x001e8d98:	rts
array<@JsonDataCreditsDepartment>::GetRandomElement()
000563:0x001e8da0:	call	
000563:0x001e8db0:	icall	
000563:0x001e8dc0:	movetm	#return, #return
000563:0x001e8dd0:	rts
000563:0x001e8dd8:	rts
array<@JsonDataCreditsDepartment>::SwapItems()
000568:0x001e8e08:	icall	
000568:0x001e8e18:	movetm	item1, #return
000569:0x001e8e28:	icall	
000569:0x001e8e38:	icall	
000570:0x001e8e48:	movefm	@c00, item1
000570:0x001e8e58:	icall	
000570:0x001e8e68:	release	item1
000570:0x001e8e70:	rts
array<@JsonDataCreditsDepartment>::InsertArray()
000575:0x001e8ec8:	imove	i, 0x000000
000575:0x001e8ed8:	jump	0x1e8ef8
000575:0x001e8ee0:	move	@m00, i
000575:0x001e8ef0:	inc	i
000575:0x001e8ef8:	ncalli	array<JsonDataCreditsDepartment>.Count()
000575:0x001e8f00:	cmpi	i, #return
000575:0x001e8f10:	bge	0x1e8f68
000577:0x001e8f18:	icall	
000577:0x001e8f28:	movetm	item, #return
000578:0x001e8f38:	movefm	@c00, item
000578:0x001e8f48:	icall	
000578:0x001e8f58:	release	item
000578:0x001e8f60:	jump	0x1e8ee0
000578:0x001e8f68:	rts
array<@JsonDataCreditsDepartment>::Invert()
000584:0x001e8fe8:	imove	left, 0x000000
000585:0x001e8ff8:	ncalli	array<@JsonDataCreditsDepartment>.Count()
000585:0x001e9000:	subi	right, #return, _i1
000586:0x001e9010:	cmpi	right, _i0
000586:0x001e9020:	ble	0x1e90e0
000588:0x001e9028:	cmpi	left, right
000588:0x001e9038:	bge	0x1e90e0
000590:0x001e9040:	icall	
000590:0x001e9050:	movetm	temp, #return
000591:0x001e9060:	move	@m00, left
000591:0x001e9070:	inc	left
000591:0x001e9078:	icall	
000591:0x001e9088:	icall	
000592:0x001e9098:	move	@m00, right
000592:0x001e90a8:	dec	right
000592:0x001e90b0:	movefm	@c00, temp
000592:0x001e90c0:	icall	
000592:0x001e90d0:	release	temp
000592:0x001e90d8:	jump	0x1e9028
000592:0x001e90e0:	rts
array<@JsonDataCreditsDepartment>::MoveIndex()
000612:0x001e9138:	ncalli	array<@JsonDataCreditsDepartment>.Count()
000612:0x001e9140:	move	count, #return
000613:0x001e9150:	move	new_index, curr_index
000615:0x001e9160:	cmpi	move_number, _i0
000615:0x001e9170:	ble	0x1e9198
000617:0x001e9178:	addi	@m00, curr_index, move_number
000617:0x001e9188:	move	new_index, @m00
000620:0x001e9198:	cmpi	move_number, _i0
000620:0x001e91a8:	bge	0x1e9250
000622:0x001e91b0:	subi	@m00, curr_index, move_number
000622:0x001e91c0:	move	new_index, @m00
000624:0x001e91d0:	cmpi	new_index, _i0
000624:0x001e91e0:	bge	0x1e9250
000626:0x001e91e8:	subi	@m01, _i0, count
000626:0x001e91f8:	cmpi	new_index, @m01
000626:0x001e9208:	bgt	0x1e9230
000628:0x001e9210:	modi	@m00, new_index, count
000628:0x001e9220:	move	new_index, @m00
000631:0x001e9230:	addi	@m00, new_index, count
000631:0x001e9240:	move	new_index, @m00
000635:0x001e9250:	cmpi	new_index, count
000635:0x001e9260:	blt	0x1e9288
000637:0x001e9268:	modi	@m00, new_index, count
000637:0x001e9278:	move	new_index, @m00
000641:0x001e9288:	move	#return, new_index
000641:0x001e9298:	rts
000641:0x001e92a0:	rts
array<@JsonDataCreditsDepartment>::ShuffleArray()
000646:0x001e92d0:	imove	i, 0x000000
000646:0x001e92e0:	jump	0x1e9300
000646:0x001e92e8:	move	@m00, i
000646:0x001e92f8:	inc	i
000646:0x001e9300:	ncalli	array<@JsonDataCreditsDepartment>.Count()
000646:0x001e9308:	cmpi	i, #return
000646:0x001e9318:	bge	0x1e9350
000648:0x001e9320:	call	
000648:0x001e9330:	call	
000648:0x001e9348:	jump	0x1e92e8
000648:0x001e9350:	rts
array<@JsonDataCreditsDepartment>::DifferentAtPosition()
000666:0x001e9380:	ncalli	array<@JsonDataCreditsDepartment>.Count()
000666:0x001e9388:	move	@m00, #return
000666:0x001e9398:	ncalli	array<JsonDataCreditsDepartment>.Count()
000666:0x001e93a0:	cmpi	@m00, #return
000666:0x001e93b0:	beq	0x1e93e0
000668:0x001e93b8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001e93c8:	imove	#return, 0xffffffff
000669:0x001e93d8:	rts
000672:0x001e93e0:	imove	i, 0x000000
000672:0x001e93f0:	jump	0x1e9400
000672:0x001e93f8:	inc	i
000672:0x001e9400:	ncalli	array<JsonDataCreditsDepartment>.Count()
000672:0x001e9408:	cmpi	i, #return
000672:0x001e9418:	bge	0x1e9488
000674:0x001e9420:	icall	
000674:0x001e9430:	movec	@c00, #return
000674:0x001e9440:	icall	
000674:0x001e9450:	cmpc	@c00, #return
000674:0x001e9460:	beq	0x1e9480
000676:0x001e9468:	move	#return, i
000676:0x001e9478:	rts
000676:0x001e9480:	jump	0x1e93f8
000680:0x001e9488:	imove	#return, 0xffffffff
000680:0x001e9498:	rts
000680:0x001e94a0:	rts
array<DayZInfectedAttackType>::InsertAll()
000427:0x001e9ce0:	imove	i, 0x000000
000427:0x001e9cf0:	jump	0x1e9d10
000427:0x001e9cf8:	move	@m00, i
000427:0x001e9d08:	inc	i
000427:0x001e9d10:	ncalli	array<DayZInfectedAttackType>.Count()
000427:0x001e9d18:	cmpi	i, #return
000427:0x001e9d28:	bge	0x1e9d58
000429:0x001e9d30:	icall	
000429:0x001e9d40:	icall	
000429:0x001e9d50:	jump	0x1e9cf8
000429:0x001e9d58:	rts
array<DayZInfectedAttackType>::RemoveItem()
000479:0x001e9d88:	movefm	@c00, value
000479:0x001e9d98:	icall	
000479:0x001e9da8:	move	remove_index, #return
000481:0x001e9db8:	cmpi	remove_index, _i0
000481:0x001e9dc8:	blt	0x1e9de0
000483:0x001e9dd0:	ncalli	array<DayZInfectedAttackType>.RemoveOrdered(remove_index)
000483:0x001e9de0:	rts
array<DayZInfectedAttackType>::RemoveItemUnOrdered()
000489:0x001e9e10:	movefm	@c00, value
000489:0x001e9e20:	icall	
000489:0x001e9e30:	move	remove_index, #return
000491:0x001e9e40:	cmpi	remove_index, _i0
000491:0x001e9e50:	blt	0x1e9e68
000493:0x001e9e58:	ncalli	array<DayZInfectedAttackType>.Remove(remove_index)
000493:0x001e9e68:	rts
array<DayZInfectedAttackType>::IsValidIndex()
000499:0x001e9e70:	cmpi	index, _i-1
000499:0x001e9e80:	ble	0x1e9ec0
000499:0x001e9e88:	ncalli	array<DayZInfectedAttackType>.Count()
000499:0x001e9e90:	cmpi	index, #return
000499:0x001e9ea0:	bge	0x1e9ec0
000499:0x001e9ea8:	imove	#return, 0x000001
000499:0x001e9eb8:	jump	0x1e9ed0
000499:0x001e9ec0:	imove	#return, 0x000000
000499:0x001e9ed0:	rts
000499:0x001e9ed8:	rts
array<DayZInfectedAttackType>::Debug()
000525:0x001e9f30:	ncalli	array<DayZInfectedAttackType>.Count()
000525:0x001e9f38:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001e9f68:	icall	Print(#return)
000526:0x001e9f78:	imove	i, 0x000000
000526:0x001e9f88:	jump	0x1e9fa8
000526:0x001e9f90:	move	@m00, i
000526:0x001e9fa0:	inc	i
000526:0x001e9fa8:	ncalli	array<DayZInfectedAttackType>.Count()
000526:0x001e9fb0:	cmpi	i, #return
000526:0x001e9fc0:	bge	0x1ea038
000528:0x001e9fc8:	icall	
000528:0x001e9fd8:	movetm	item, #return
000529:0x001e9fe8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001ea018:	icall	Print(#return)
000529:0x001ea028:	release	item
000529:0x001ea030:	jump	0x1e9f90
000529:0x001ea038:	rts
array<DayZInfectedAttackType>::GetRandomIndex()
000544:0x001ea040:	ncalli	array<DayZInfectedAttackType>.Count()
000544:0x001ea048:	move	@m00, #return
000544:0x001ea058:	cmpi	@m00, _i0
000544:0x001ea068:	ble	0x1ea0a0
000546:0x001ea070:	ncalli	array<DayZInfectedAttackType>.Count()
000546:0x001ea078:	icall	RandomInt(_i0, #return)
000546:0x001ea088:	move	#return, #return
000546:0x001ea098:	rts
000549:0x001ea0a0:	imove	#return, 0xffffffff
000549:0x001ea0b0:	rts
000549:0x001ea0b8:	rts
array<DayZInfectedAttackType>::GetRandomElement()
000563:0x001ea0c0:	call	
000563:0x001ea0d0:	icall	
000563:0x001ea0e0:	movetm	#return, #return
000563:0x001ea0f0:	rts
000563:0x001ea0f8:	rts
array<DayZInfectedAttackType>::SwapItems()
000568:0x001ea128:	icall	
000568:0x001ea138:	movetm	item1, #return
000569:0x001ea148:	icall	
000569:0x001ea158:	icall	
000570:0x001ea168:	movefm	@c00, item1
000570:0x001ea178:	icall	
000570:0x001ea188:	release	item1
000570:0x001ea190:	rts
array<DayZInfectedAttackType>::InsertArray()
000575:0x001ea1e8:	imove	i, 0x000000
000575:0x001ea1f8:	jump	0x1ea218
000575:0x001ea200:	move	@m00, i
000575:0x001ea210:	inc	i
000575:0x001ea218:	ncalli	array<DayZInfectedAttackType>.Count()
000575:0x001ea220:	cmpi	i, #return
000575:0x001ea230:	bge	0x1ea288
000577:0x001ea238:	icall	
000577:0x001ea248:	movetm	item, #return
000578:0x001ea258:	movefm	@c00, item
000578:0x001ea268:	icall	
000578:0x001ea278:	release	item
000578:0x001ea280:	jump	0x1ea200
000578:0x001ea288:	rts
array<DayZInfectedAttackType>::Invert()
000584:0x001ea308:	imove	left, 0x000000
000585:0x001ea318:	ncalli	array<DayZInfectedAttackType>.Count()
000585:0x001ea320:	subi	right, #return, _i1
000586:0x001ea330:	cmpi	right, _i0
000586:0x001ea340:	ble	0x1ea400
000588:0x001ea348:	cmpi	left, right
000588:0x001ea358:	bge	0x1ea400
000590:0x001ea360:	icall	
000590:0x001ea370:	movetm	temp, #return
000591:0x001ea380:	move	@m00, left
000591:0x001ea390:	inc	left
000591:0x001ea398:	icall	
000591:0x001ea3a8:	icall	
000592:0x001ea3b8:	move	@m00, right
000592:0x001ea3c8:	dec	right
000592:0x001ea3d0:	movefm	@c00, temp
000592:0x001ea3e0:	icall	
000592:0x001ea3f0:	release	temp
000592:0x001ea3f8:	jump	0x1ea348
000592:0x001ea400:	rts
array<DayZInfectedAttackType>::MoveIndex()
000612:0x001ea458:	ncalli	array<DayZInfectedAttackType>.Count()
000612:0x001ea460:	move	count, #return
000613:0x001ea470:	move	new_index, curr_index
000615:0x001ea480:	cmpi	move_number, _i0
000615:0x001ea490:	ble	0x1ea4b8
000617:0x001ea498:	addi	@m00, curr_index, move_number
000617:0x001ea4a8:	move	new_index, @m00
000620:0x001ea4b8:	cmpi	move_number, _i0
000620:0x001ea4c8:	bge	0x1ea570
000622:0x001ea4d0:	subi	@m00, curr_index, move_number
000622:0x001ea4e0:	move	new_index, @m00
000624:0x001ea4f0:	cmpi	new_index, _i0
000624:0x001ea500:	bge	0x1ea570
000626:0x001ea508:	subi	@m01, _i0, count
000626:0x001ea518:	cmpi	new_index, @m01
000626:0x001ea528:	bgt	0x1ea550
000628:0x001ea530:	modi	@m00, new_index, count
000628:0x001ea540:	move	new_index, @m00
000631:0x001ea550:	addi	@m00, new_index, count
000631:0x001ea560:	move	new_index, @m00
000635:0x001ea570:	cmpi	new_index, count
000635:0x001ea580:	blt	0x1ea5a8
000637:0x001ea588:	modi	@m00, new_index, count
000637:0x001ea598:	move	new_index, @m00
000641:0x001ea5a8:	move	#return, new_index
000641:0x001ea5b8:	rts
000641:0x001ea5c0:	rts
array<DayZInfectedAttackType>::ShuffleArray()
000646:0x001ea5f0:	imove	i, 0x000000
000646:0x001ea600:	jump	0x1ea620
000646:0x001ea608:	move	@m00, i
000646:0x001ea618:	inc	i
000646:0x001ea620:	ncalli	array<DayZInfectedAttackType>.Count()
000646:0x001ea628:	cmpi	i, #return
000646:0x001ea638:	bge	0x1ea670
000648:0x001ea640:	call	
000648:0x001ea650:	call	
000648:0x001ea668:	jump	0x1ea608
000648:0x001ea670:	rts
array<DayZInfectedAttackType>::DifferentAtPosition()
000666:0x001ea6a0:	ncalli	array<DayZInfectedAttackType>.Count()
000666:0x001ea6a8:	move	@m00, #return
000666:0x001ea6b8:	push	#return
000666:0x001ea6c0:	ncalli	array<DayZInfectedAttackType>.Count()
000666:0x001ea6c8:	move	@m02, #return
000666:0x001ea6d8:	pop	#return
000666:0x001ea6e0:	cmpi	@m00, @m02
000666:0x001ea6f0:	beq	0x1ea720
000668:0x001ea6f8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001ea708:	imove	#return, 0xffffffff
000669:0x001ea718:	rts
000672:0x001ea720:	imove	i, 0x000000
000672:0x001ea730:	jump	0x1ea740
000672:0x001ea738:	inc	i
000672:0x001ea740:	ncalli	array<DayZInfectedAttackType>.Count()
000672:0x001ea748:	cmpi	i, #return
000672:0x001ea758:	bge	0x1ea7e8
000674:0x001ea760:	icall	
000674:0x001ea770:	movec	@c00, #return
000674:0x001ea780:	pushc	#return
000674:0x001ea788:	icall	
000674:0x001ea798:	movec	@c02, #return
000674:0x001ea7a8:	popc	#return
000674:0x001ea7b0:	cmpc	@c00, @c02
000674:0x001ea7c0:	beq	0x1ea7e0
000676:0x001ea7c8:	move	#return, i
000676:0x001ea7d8:	rts
000676:0x001ea7e0:	jump	0x1ea738
000680:0x001ea7e8:	imove	#return, 0xffffffff
000680:0x001ea7f8:	rts
000680:0x001ea800:	rts
array<@DayZInfectedAttackType>::InsertAll()
000427:0x001eac18:	imove	i, 0x000000
000427:0x001eac28:	jump	0x1eac48
000427:0x001eac30:	move	@m00, i
000427:0x001eac40:	inc	i
000427:0x001eac48:	ncalli	array<DayZInfectedAttackType>.Count()
000427:0x001eac50:	cmpi	i, #return
000427:0x001eac60:	bge	0x1eac90
000429:0x001eac68:	icall	
000429:0x001eac78:	icall	
000429:0x001eac88:	jump	0x1eac30
000429:0x001eac90:	rts
array<@DayZInfectedAttackType>::RemoveItem()
000479:0x001eacc0:	movefm	@c00, value
000479:0x001eacd0:	icall	
000479:0x001eace0:	move	remove_index, #return
000481:0x001eacf0:	cmpi	remove_index, _i0
000481:0x001ead00:	blt	0x1ead18
000483:0x001ead08:	ncalli	array<@DayZInfectedAttackType>.RemoveOrdered(remove_index)
000483:0x001ead18:	rts
array<@DayZInfectedAttackType>::RemoveItemUnOrdered()
000489:0x001ead48:	movefm	@c00, value
000489:0x001ead58:	icall	
000489:0x001ead68:	move	remove_index, #return
000491:0x001ead78:	cmpi	remove_index, _i0
000491:0x001ead88:	blt	0x1eada0
000493:0x001ead90:	ncalli	array<@DayZInfectedAttackType>.Remove(remove_index)
000493:0x001eada0:	rts
array<@DayZInfectedAttackType>::IsValidIndex()
000499:0x001eada8:	cmpi	index, _i-1
000499:0x001eadb8:	ble	0x1eadf8
000499:0x001eadc0:	ncalli	array<@DayZInfectedAttackType>.Count()
000499:0x001eadc8:	cmpi	index, #return
000499:0x001eadd8:	bge	0x1eadf8
000499:0x001eade0:	imove	#return, 0x000001
000499:0x001eadf0:	jump	0x1eae08
000499:0x001eadf8:	imove	#return, 0x000000
000499:0x001eae08:	rts
000499:0x001eae10:	rts
array<@DayZInfectedAttackType>::Debug()
000525:0x001eae68:	ncalli	array<@DayZInfectedAttackType>.Count()
000525:0x001eae70:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001eaea0:	icall	Print(#return)
000526:0x001eaeb0:	imove	i, 0x000000
000526:0x001eaec0:	jump	0x1eaee0
000526:0x001eaec8:	move	@m00, i
000526:0x001eaed8:	inc	i
000526:0x001eaee0:	ncalli	array<@DayZInfectedAttackType>.Count()
000526:0x001eaee8:	cmpi	i, #return
000526:0x001eaef8:	bge	0x1eaf70
000528:0x001eaf00:	icall	
000528:0x001eaf10:	movetm	item, #return
000529:0x001eaf20:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001eaf50:	icall	Print(#return)
000529:0x001eaf60:	release	item
000529:0x001eaf68:	jump	0x1eaec8
000529:0x001eaf70:	rts
array<@DayZInfectedAttackType>::GetRandomIndex()
000544:0x001eaf78:	ncalli	array<@DayZInfectedAttackType>.Count()
000544:0x001eaf80:	move	@m00, #return
000544:0x001eaf90:	cmpi	@m00, _i0
000544:0x001eafa0:	ble	0x1eafd8
000546:0x001eafa8:	ncalli	array<@DayZInfectedAttackType>.Count()
000546:0x001eafb0:	icall	RandomInt(_i0, #return)
000546:0x001eafc0:	move	#return, #return
000546:0x001eafd0:	rts
000549:0x001eafd8:	imove	#return, 0xffffffff
000549:0x001eafe8:	rts
000549:0x001eaff0:	rts
array<@DayZInfectedAttackType>::GetRandomElement()
000563:0x001eaff8:	call	
000563:0x001eb008:	icall	
000563:0x001eb018:	movetm	#return, #return
000563:0x001eb028:	rts
000563:0x001eb030:	rts
array<@DayZInfectedAttackType>::SwapItems()
000568:0x001eb060:	icall	
000568:0x001eb070:	movetm	item1, #return
000569:0x001eb080:	icall	
000569:0x001eb090:	icall	
000570:0x001eb0a0:	movefm	@c00, item1
000570:0x001eb0b0:	icall	
000570:0x001eb0c0:	release	item1
000570:0x001eb0c8:	rts
array<@DayZInfectedAttackType>::InsertArray()
000575:0x001eb120:	imove	i, 0x000000
000575:0x001eb130:	jump	0x1eb150
000575:0x001eb138:	move	@m00, i
000575:0x001eb148:	inc	i
000575:0x001eb150:	ncalli	array<DayZInfectedAttackType>.Count()
000575:0x001eb158:	cmpi	i, #return
000575:0x001eb168:	bge	0x1eb1c0
000577:0x001eb170:	icall	
000577:0x001eb180:	movetm	item, #return
000578:0x001eb190:	movefm	@c00, item
000578:0x001eb1a0:	icall	
000578:0x001eb1b0:	release	item
000578:0x001eb1b8:	jump	0x1eb138
000578:0x001eb1c0:	rts
array<@DayZInfectedAttackType>::Invert()
000584:0x001eb240:	imove	left, 0x000000
000585:0x001eb250:	ncalli	array<@DayZInfectedAttackType>.Count()
000585:0x001eb258:	subi	right, #return, _i1
000586:0x001eb268:	cmpi	right, _i0
000586:0x001eb278:	ble	0x1eb338
000588:0x001eb280:	cmpi	left, right
000588:0x001eb290:	bge	0x1eb338
000590:0x001eb298:	icall	
000590:0x001eb2a8:	movetm	temp, #return
000591:0x001eb2b8:	move	@m00, left
000591:0x001eb2c8:	inc	left
000591:0x001eb2d0:	icall	
000591:0x001eb2e0:	icall	
000592:0x001eb2f0:	move	@m00, right
000592:0x001eb300:	dec	right
000592:0x001eb308:	movefm	@c00, temp
000592:0x001eb318:	icall	
000592:0x001eb328:	release	temp
000592:0x001eb330:	jump	0x1eb280
000592:0x001eb338:	rts
array<@DayZInfectedAttackType>::MoveIndex()
000612:0x001eb390:	ncalli	array<@DayZInfectedAttackType>.Count()
000612:0x001eb398:	move	count, #return
000613:0x001eb3a8:	move	new_index, curr_index
000615:0x001eb3b8:	cmpi	move_number, _i0
000615:0x001eb3c8:	ble	0x1eb3f0
000617:0x001eb3d0:	addi	@m00, curr_index, move_number
000617:0x001eb3e0:	move	new_index, @m00
000620:0x001eb3f0:	cmpi	move_number, _i0
000620:0x001eb400:	bge	0x1eb4a8
000622:0x001eb408:	subi	@m00, curr_index, move_number
000622:0x001eb418:	move	new_index, @m00
000624:0x001eb428:	cmpi	new_index, _i0
000624:0x001eb438:	bge	0x1eb4a8
000626:0x001eb440:	subi	@m01, _i0, count
000626:0x001eb450:	cmpi	new_index, @m01
000626:0x001eb460:	bgt	0x1eb488
000628:0x001eb468:	modi	@m00, new_index, count
000628:0x001eb478:	move	new_index, @m00
000631:0x001eb488:	addi	@m00, new_index, count
000631:0x001eb498:	move	new_index, @m00
000635:0x001eb4a8:	cmpi	new_index, count
000635:0x001eb4b8:	blt	0x1eb4e0
000637:0x001eb4c0:	modi	@m00, new_index, count
000637:0x001eb4d0:	move	new_index, @m00
000641:0x001eb4e0:	move	#return, new_index
000641:0x001eb4f0:	rts
000641:0x001eb4f8:	rts
array<@DayZInfectedAttackType>::ShuffleArray()
000646:0x001eb528:	imove	i, 0x000000
000646:0x001eb538:	jump	0x1eb558
000646:0x001eb540:	move	@m00, i
000646:0x001eb550:	inc	i
000646:0x001eb558:	ncalli	array<@DayZInfectedAttackType>.Count()
000646:0x001eb560:	cmpi	i, #return
000646:0x001eb570:	bge	0x1eb5a8
000648:0x001eb578:	call	
000648:0x001eb588:	call	
000648:0x001eb5a0:	jump	0x1eb540
000648:0x001eb5a8:	rts
array<@DayZInfectedAttackType>::DifferentAtPosition()
000666:0x001eb5d8:	ncalli	array<@DayZInfectedAttackType>.Count()
000666:0x001eb5e0:	move	@m00, #return
000666:0x001eb5f0:	ncalli	array<DayZInfectedAttackType>.Count()
000666:0x001eb5f8:	cmpi	@m00, #return
000666:0x001eb608:	beq	0x1eb638
000668:0x001eb610:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001eb620:	imove	#return, 0xffffffff
000669:0x001eb630:	rts
000672:0x001eb638:	imove	i, 0x000000
000672:0x001eb648:	jump	0x1eb658
000672:0x001eb650:	inc	i
000672:0x001eb658:	ncalli	array<DayZInfectedAttackType>.Count()
000672:0x001eb660:	cmpi	i, #return
000672:0x001eb670:	bge	0x1eb6e0
000674:0x001eb678:	icall	
000674:0x001eb688:	movec	@c00, #return
000674:0x001eb698:	icall	
000674:0x001eb6a8:	cmpc	@c00, #return
000674:0x001eb6b8:	beq	0x1eb6d8
000676:0x001eb6c0:	move	#return, i
000676:0x001eb6d0:	rts
000676:0x001eb6d8:	jump	0x1eb650
000680:0x001eb6e0:	imove	#return, 0xffffffff
000680:0x001eb6f0:	rts
000680:0x001eb6f8:	rts
map<int,Widget>::GetKeyArray()
000885:0x001ebd68:	new	keys, array<int>
000886:0x001ebd88:	imove	i, 0x000000
000886:0x001ebd98:	jump	0x1ebdb8
000886:0x001ebda0:	move	@m00, i
000886:0x001ebdb0:	inc	i
000886:0x001ebdb8:	ncalli	map<int,Widget>.Count()
000886:0x001ebdc0:	cmpi	i, #return
000886:0x001ebdd0:	bge	0x1ebe00
000888:0x001ebdd8:	icall	
000888:0x001ebde8:	icall	
000888:0x001ebdf8:	jump	0x1ebda0
000890:0x001ebe00:	movem	#return, keys
000890:0x001ebe10:	release	keys
000890:0x001ebe18:	rts
000890:0x001ebe20:	release	keys
000890:0x001ebe28:	rts
map<int,Widget>::GetValueArray()
000895:0x001ebe80:	new	elements, array<Widget>
000896:0x001ebea0:	imove	i, 0x000000
000896:0x001ebeb0:	jump	0x1ebed0
000896:0x001ebeb8:	move	@m00, i
000896:0x001ebec8:	inc	i
000896:0x001ebed0:	ncalli	map<int,Widget>.Count()
000896:0x001ebed8:	cmpi	i, #return
000896:0x001ebee8:	bge	0x1ebf18
000898:0x001ebef0:	icall	
000898:0x001ebf00:	icall	
000898:0x001ebf10:	jump	0x1ebeb8
000900:0x001ebf18:	movem	#return, elements
000900:0x001ebf28:	release	elements
000900:0x001ebf30:	rts
000900:0x001ebf38:	release	elements
000900:0x001ebf40:	rts
map<int,Widget>::ReplaceKey()
000905:0x001ebf48:	icall	
000905:0x001ebf58:	cmpi	#return, _i0
000905:0x001ebf68:	beq	0x1ebfb8
000907:0x001ebf70:	icall	
000907:0x001ebf80:	icall	
000908:0x001ebf90:	icall	
000909:0x001ebfa0:	imove	#return, 0x000001
000909:0x001ebfb0:	rts
000911:0x001ebfb8:	imove	#return, 0x000000
000911:0x001ebfc8:	rts
000911:0x001ebfd0:	rts
map<int,Widget>::GetKeyByValue()
000917:0x001ec028:	imove	i, 0x000000
000917:0x001ec038:	jump	0x1ec058
000917:0x001ec040:	move	@m00, i
000917:0x001ec050:	inc	i
000917:0x001ec058:	ncalli	map<int,Widget>.Count()
000917:0x001ec060:	cmpi	i, #return
000917:0x001ec070:	bge	0x1ec0e0
000919:0x001ec078:	icall	
000919:0x001ec088:	movec	@c00, #return
000919:0x001ec098:	cmpmc	@c00, value
000919:0x001ec0a8:	bne	0x1ec0d8
000921:0x001ec0b0:	icall	
000921:0x001ec0c0:	move	ret, #return
000922:0x001ec0d0:	jump	0x1ec0e0
000922:0x001ec0d8:	jump	0x1ec040
000926:0x001ec0e0:	move	#return, ret
000926:0x001ec0f0:	rts
000926:0x001ec0f8:	rts
map<int,Widget>::GetKeyByValueChecked()
000931:0x001ec128:	imove	i, 0x000000
000931:0x001ec138:	jump	0x1ec158
000931:0x001ec140:	move	@m00, i
000931:0x001ec150:	inc	i
000931:0x001ec158:	ncalli	map<int,Widget>.Count()
000931:0x001ec160:	cmpi	i, #return
000931:0x001ec170:	bge	0x1ec200
000933:0x001ec178:	icall	
000933:0x001ec188:	movec	@c00, #return
000933:0x001ec198:	cmpmc	@c00, value
000933:0x001ec1a8:	bne	0x1ec1f8
000935:0x001ec1b0:	icall	
000935:0x001ec1c0:	move	key, #return
000936:0x001ec1d0:	imove	#return, 0x000001
000936:0x001ec1e0:	move	key, key
000936:0x001ec1f0:	rts
000936:0x001ec1f8:	jump	0x1ec140
000939:0x001ec200:	imove	#return, 0x000000
000939:0x001ec210:	move	key, key
000939:0x001ec220:	rts
000939:0x001ec228:	move	key, key
000939:0x001ec238:	rts
array<SyncPlayer>::InsertAll()
000427:0x001eca70:	imove	i, 0x000000
000427:0x001eca80:	jump	0x1ecaa0
000427:0x001eca88:	move	@m00, i
000427:0x001eca98:	inc	i
000427:0x001ecaa0:	ncalli	array<SyncPlayer>.Count()
000427:0x001ecaa8:	cmpi	i, #return
000427:0x001ecab8:	bge	0x1ecae8
000429:0x001ecac0:	icall	
000429:0x001ecad0:	icall	
000429:0x001ecae0:	jump	0x1eca88
000429:0x001ecae8:	rts
array<SyncPlayer>::RemoveItem()
000479:0x001ecb18:	movefm	@c00, value
000479:0x001ecb28:	icall	
000479:0x001ecb38:	move	remove_index, #return
000481:0x001ecb48:	cmpi	remove_index, _i0
000481:0x001ecb58:	blt	0x1ecb70
000483:0x001ecb60:	ncalli	array<SyncPlayer>.RemoveOrdered(remove_index)
000483:0x001ecb70:	rts
array<SyncPlayer>::RemoveItemUnOrdered()
000489:0x001ecba0:	movefm	@c00, value
000489:0x001ecbb0:	icall	
000489:0x001ecbc0:	move	remove_index, #return
000491:0x001ecbd0:	cmpi	remove_index, _i0
000491:0x001ecbe0:	blt	0x1ecbf8
000493:0x001ecbe8:	ncalli	array<SyncPlayer>.Remove(remove_index)
000493:0x001ecbf8:	rts
array<SyncPlayer>::IsValidIndex()
000499:0x001ecc00:	cmpi	index, _i-1
000499:0x001ecc10:	ble	0x1ecc50
000499:0x001ecc18:	ncalli	array<SyncPlayer>.Count()
000499:0x001ecc20:	cmpi	index, #return
000499:0x001ecc30:	bge	0x1ecc50
000499:0x001ecc38:	imove	#return, 0x000001
000499:0x001ecc48:	jump	0x1ecc60
000499:0x001ecc50:	imove	#return, 0x000000
000499:0x001ecc60:	rts
000499:0x001ecc68:	rts
array<SyncPlayer>::Debug()
000525:0x001eccc0:	ncalli	array<SyncPlayer>.Count()
000525:0x001eccc8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001eccf8:	icall	Print(#return)
000526:0x001ecd08:	imove	i, 0x000000
000526:0x001ecd18:	jump	0x1ecd38
000526:0x001ecd20:	move	@m00, i
000526:0x001ecd30:	inc	i
000526:0x001ecd38:	ncalli	array<SyncPlayer>.Count()
000526:0x001ecd40:	cmpi	i, #return
000526:0x001ecd50:	bge	0x1ecdc8
000528:0x001ecd58:	icall	
000528:0x001ecd68:	movetm	item, #return
000529:0x001ecd78:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001ecda8:	icall	Print(#return)
000529:0x001ecdb8:	release	item
000529:0x001ecdc0:	jump	0x1ecd20
000529:0x001ecdc8:	rts
array<SyncPlayer>::GetRandomIndex()
000544:0x001ecdd0:	ncalli	array<SyncPlayer>.Count()
000544:0x001ecdd8:	move	@m00, #return
000544:0x001ecde8:	cmpi	@m00, _i0
000544:0x001ecdf8:	ble	0x1ece30
000546:0x001ece00:	ncalli	array<SyncPlayer>.Count()
000546:0x001ece08:	icall	RandomInt(_i0, #return)
000546:0x001ece18:	move	#return, #return
000546:0x001ece28:	rts
000549:0x001ece30:	imove	#return, 0xffffffff
000549:0x001ece40:	rts
000549:0x001ece48:	rts
array<SyncPlayer>::GetRandomElement()
000563:0x001ece50:	call	
000563:0x001ece60:	icall	
000563:0x001ece70:	movetm	#return, #return
000563:0x001ece80:	rts
000563:0x001ece88:	rts
array<SyncPlayer>::SwapItems()
000568:0x001eceb8:	icall	
000568:0x001ecec8:	movetm	item1, #return
000569:0x001eced8:	icall	
000569:0x001ecee8:	icall	
000570:0x001ecef8:	movefm	@c00, item1
000570:0x001ecf08:	icall	
000570:0x001ecf18:	release	item1
000570:0x001ecf20:	rts
array<SyncPlayer>::InsertArray()
000575:0x001ecf78:	imove	i, 0x000000
000575:0x001ecf88:	jump	0x1ecfa8
000575:0x001ecf90:	move	@m00, i
000575:0x001ecfa0:	inc	i
000575:0x001ecfa8:	ncalli	array<SyncPlayer>.Count()
000575:0x001ecfb0:	cmpi	i, #return
000575:0x001ecfc0:	bge	0x1ed018
000577:0x001ecfc8:	icall	
000577:0x001ecfd8:	movetm	item, #return
000578:0x001ecfe8:	movefm	@c00, item
000578:0x001ecff8:	icall	
000578:0x001ed008:	release	item
000578:0x001ed010:	jump	0x1ecf90
000578:0x001ed018:	rts
array<SyncPlayer>::Invert()
000584:0x001ed098:	imove	left, 0x000000
000585:0x001ed0a8:	ncalli	array<SyncPlayer>.Count()
000585:0x001ed0b0:	subi	right, #return, _i1
000586:0x001ed0c0:	cmpi	right, _i0
000586:0x001ed0d0:	ble	0x1ed190
000588:0x001ed0d8:	cmpi	left, right
000588:0x001ed0e8:	bge	0x1ed190
000590:0x001ed0f0:	icall	
000590:0x001ed100:	movetm	temp, #return
000591:0x001ed110:	move	@m00, left
000591:0x001ed120:	inc	left
000591:0x001ed128:	icall	
000591:0x001ed138:	icall	
000592:0x001ed148:	move	@m00, right
000592:0x001ed158:	dec	right
000592:0x001ed160:	movefm	@c00, temp
000592:0x001ed170:	icall	
000592:0x001ed180:	release	temp
000592:0x001ed188:	jump	0x1ed0d8
000592:0x001ed190:	rts
array<SyncPlayer>::MoveIndex()
000612:0x001ed1e8:	ncalli	array<SyncPlayer>.Count()
000612:0x001ed1f0:	move	count, #return
000613:0x001ed200:	move	new_index, curr_index
000615:0x001ed210:	cmpi	move_number, _i0
000615:0x001ed220:	ble	0x1ed248
000617:0x001ed228:	addi	@m00, curr_index, move_number
000617:0x001ed238:	move	new_index, @m00
000620:0x001ed248:	cmpi	move_number, _i0
000620:0x001ed258:	bge	0x1ed300
000622:0x001ed260:	subi	@m00, curr_index, move_number
000622:0x001ed270:	move	new_index, @m00
000624:0x001ed280:	cmpi	new_index, _i0
000624:0x001ed290:	bge	0x1ed300
000626:0x001ed298:	subi	@m01, _i0, count
000626:0x001ed2a8:	cmpi	new_index, @m01
000626:0x001ed2b8:	bgt	0x1ed2e0
000628:0x001ed2c0:	modi	@m00, new_index, count
000628:0x001ed2d0:	move	new_index, @m00
000631:0x001ed2e0:	addi	@m00, new_index, count
000631:0x001ed2f0:	move	new_index, @m00
000635:0x001ed300:	cmpi	new_index, count
000635:0x001ed310:	blt	0x1ed338
000637:0x001ed318:	modi	@m00, new_index, count
000637:0x001ed328:	move	new_index, @m00
000641:0x001ed338:	move	#return, new_index
000641:0x001ed348:	rts
000641:0x001ed350:	rts
array<SyncPlayer>::ShuffleArray()
000646:0x001ed380:	imove	i, 0x000000
000646:0x001ed390:	jump	0x1ed3b0
000646:0x001ed398:	move	@m00, i
000646:0x001ed3a8:	inc	i
000646:0x001ed3b0:	ncalli	array<SyncPlayer>.Count()
000646:0x001ed3b8:	cmpi	i, #return
000646:0x001ed3c8:	bge	0x1ed400
000648:0x001ed3d0:	call	
000648:0x001ed3e0:	call	
000648:0x001ed3f8:	jump	0x1ed398
000648:0x001ed400:	rts
array<SyncPlayer>::DifferentAtPosition()
000666:0x001ed430:	ncalli	array<SyncPlayer>.Count()
000666:0x001ed438:	move	@m00, #return
000666:0x001ed448:	push	#return
000666:0x001ed450:	ncalli	array<SyncPlayer>.Count()
000666:0x001ed458:	move	@m02, #return
000666:0x001ed468:	pop	#return
000666:0x001ed470:	cmpi	@m00, @m02
000666:0x001ed480:	beq	0x1ed4b0
000668:0x001ed488:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001ed498:	imove	#return, 0xffffffff
000669:0x001ed4a8:	rts
000672:0x001ed4b0:	imove	i, 0x000000
000672:0x001ed4c0:	jump	0x1ed4d0
000672:0x001ed4c8:	inc	i
000672:0x001ed4d0:	ncalli	array<SyncPlayer>.Count()
000672:0x001ed4d8:	cmpi	i, #return
000672:0x001ed4e8:	bge	0x1ed578
000674:0x001ed4f0:	icall	
000674:0x001ed500:	movec	@c00, #return
000674:0x001ed510:	pushc	#return
000674:0x001ed518:	icall	
000674:0x001ed528:	movec	@c02, #return
000674:0x001ed538:	popc	#return
000674:0x001ed540:	cmpc	@c00, @c02
000674:0x001ed550:	beq	0x1ed570
000676:0x001ed558:	move	#return, i
000676:0x001ed568:	rts
000676:0x001ed570:	jump	0x1ed4c8
000680:0x001ed578:	imove	#return, 0xffffffff
000680:0x001ed588:	rts
000680:0x001ed590:	rts
array<@SyncPlayer>::InsertAll()
000427:0x001ed9a8:	imove	i, 0x000000
000427:0x001ed9b8:	jump	0x1ed9d8
000427:0x001ed9c0:	move	@m00, i
000427:0x001ed9d0:	inc	i
000427:0x001ed9d8:	ncalli	array<SyncPlayer>.Count()
000427:0x001ed9e0:	cmpi	i, #return
000427:0x001ed9f0:	bge	0x1eda20
000429:0x001ed9f8:	icall	
000429:0x001eda08:	icall	
000429:0x001eda18:	jump	0x1ed9c0
000429:0x001eda20:	rts
array<@SyncPlayer>::RemoveItem()
000479:0x001eda50:	movefm	@c00, value
000479:0x001eda60:	icall	
000479:0x001eda70:	move	remove_index, #return
000481:0x001eda80:	cmpi	remove_index, _i0
000481:0x001eda90:	blt	0x1edaa8
000483:0x001eda98:	ncalli	array<@SyncPlayer>.RemoveOrdered(remove_index)
000483:0x001edaa8:	rts
array<@SyncPlayer>::RemoveItemUnOrdered()
000489:0x001edad8:	movefm	@c00, value
000489:0x001edae8:	icall	
000489:0x001edaf8:	move	remove_index, #return
000491:0x001edb08:	cmpi	remove_index, _i0
000491:0x001edb18:	blt	0x1edb30
000493:0x001edb20:	ncalli	array<@SyncPlayer>.Remove(remove_index)
000493:0x001edb30:	rts
array<@SyncPlayer>::IsValidIndex()
000499:0x001edb38:	cmpi	index, _i-1
000499:0x001edb48:	ble	0x1edb88
000499:0x001edb50:	ncalli	array<@SyncPlayer>.Count()
000499:0x001edb58:	cmpi	index, #return
000499:0x001edb68:	bge	0x1edb88
000499:0x001edb70:	imove	#return, 0x000001
000499:0x001edb80:	jump	0x1edb98
000499:0x001edb88:	imove	#return, 0x000000
000499:0x001edb98:	rts
000499:0x001edba0:	rts
array<@SyncPlayer>::Debug()
000525:0x001edbf8:	ncalli	array<@SyncPlayer>.Count()
000525:0x001edc00:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001edc30:	icall	Print(#return)
000526:0x001edc40:	imove	i, 0x000000
000526:0x001edc50:	jump	0x1edc70
000526:0x001edc58:	move	@m00, i
000526:0x001edc68:	inc	i
000526:0x001edc70:	ncalli	array<@SyncPlayer>.Count()
000526:0x001edc78:	cmpi	i, #return
000526:0x001edc88:	bge	0x1edd00
000528:0x001edc90:	icall	
000528:0x001edca0:	movetm	item, #return
000529:0x001edcb0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001edce0:	icall	Print(#return)
000529:0x001edcf0:	release	item
000529:0x001edcf8:	jump	0x1edc58
000529:0x001edd00:	rts
array<@SyncPlayer>::GetRandomIndex()
000544:0x001edd08:	ncalli	array<@SyncPlayer>.Count()
000544:0x001edd10:	move	@m00, #return
000544:0x001edd20:	cmpi	@m00, _i0
000544:0x001edd30:	ble	0x1edd68
000546:0x001edd38:	ncalli	array<@SyncPlayer>.Count()
000546:0x001edd40:	icall	RandomInt(_i0, #return)
000546:0x001edd50:	move	#return, #return
000546:0x001edd60:	rts
000549:0x001edd68:	imove	#return, 0xffffffff
000549:0x001edd78:	rts
000549:0x001edd80:	rts
array<@SyncPlayer>::GetRandomElement()
000563:0x001edd88:	call	
000563:0x001edd98:	icall	
000563:0x001edda8:	movetm	#return, #return
000563:0x001eddb8:	rts
000563:0x001eddc0:	rts
array<@SyncPlayer>::SwapItems()
000568:0x001eddf0:	icall	
000568:0x001ede00:	movetm	item1, #return
000569:0x001ede10:	icall	
000569:0x001ede20:	icall	
000570:0x001ede30:	movefm	@c00, item1
000570:0x001ede40:	icall	
000570:0x001ede50:	release	item1
000570:0x001ede58:	rts
array<@SyncPlayer>::InsertArray()
000575:0x001edeb0:	imove	i, 0x000000
000575:0x001edec0:	jump	0x1edee0
000575:0x001edec8:	move	@m00, i
000575:0x001eded8:	inc	i
000575:0x001edee0:	ncalli	array<SyncPlayer>.Count()
000575:0x001edee8:	cmpi	i, #return
000575:0x001edef8:	bge	0x1edf50
000577:0x001edf00:	icall	
000577:0x001edf10:	movetm	item, #return
000578:0x001edf20:	movefm	@c00, item
000578:0x001edf30:	icall	
000578:0x001edf40:	release	item
000578:0x001edf48:	jump	0x1edec8
000578:0x001edf50:	rts
array<@SyncPlayer>::Invert()
000584:0x001edfd0:	imove	left, 0x000000
000585:0x001edfe0:	ncalli	array<@SyncPlayer>.Count()
000585:0x001edfe8:	subi	right, #return, _i1
000586:0x001edff8:	cmpi	right, _i0
000586:0x001ee008:	ble	0x1ee0c8
000588:0x001ee010:	cmpi	left, right
000588:0x001ee020:	bge	0x1ee0c8
000590:0x001ee028:	icall	
000590:0x001ee038:	movetm	temp, #return
000591:0x001ee048:	move	@m00, left
000591:0x001ee058:	inc	left
000591:0x001ee060:	icall	
000591:0x001ee070:	icall	
000592:0x001ee080:	move	@m00, right
000592:0x001ee090:	dec	right
000592:0x001ee098:	movefm	@c00, temp
000592:0x001ee0a8:	icall	
000592:0x001ee0b8:	release	temp
000592:0x001ee0c0:	jump	0x1ee010
000592:0x001ee0c8:	rts
array<@SyncPlayer>::MoveIndex()
000612:0x001ee120:	ncalli	array<@SyncPlayer>.Count()
000612:0x001ee128:	move	count, #return
000613:0x001ee138:	move	new_index, curr_index
000615:0x001ee148:	cmpi	move_number, _i0
000615:0x001ee158:	ble	0x1ee180
000617:0x001ee160:	addi	@m00, curr_index, move_number
000617:0x001ee170:	move	new_index, @m00
000620:0x001ee180:	cmpi	move_number, _i0
000620:0x001ee190:	bge	0x1ee238
000622:0x001ee198:	subi	@m00, curr_index, move_number
000622:0x001ee1a8:	move	new_index, @m00
000624:0x001ee1b8:	cmpi	new_index, _i0
000624:0x001ee1c8:	bge	0x1ee238
000626:0x001ee1d0:	subi	@m01, _i0, count
000626:0x001ee1e0:	cmpi	new_index, @m01
000626:0x001ee1f0:	bgt	0x1ee218
000628:0x001ee1f8:	modi	@m00, new_index, count
000628:0x001ee208:	move	new_index, @m00
000631:0x001ee218:	addi	@m00, new_index, count
000631:0x001ee228:	move	new_index, @m00
000635:0x001ee238:	cmpi	new_index, count
000635:0x001ee248:	blt	0x1ee270
000637:0x001ee250:	modi	@m00, new_index, count
000637:0x001ee260:	move	new_index, @m00
000641:0x001ee270:	move	#return, new_index
000641:0x001ee280:	rts
000641:0x001ee288:	rts
array<@SyncPlayer>::ShuffleArray()
000646:0x001ee2b8:	imove	i, 0x000000
000646:0x001ee2c8:	jump	0x1ee2e8
000646:0x001ee2d0:	move	@m00, i
000646:0x001ee2e0:	inc	i
000646:0x001ee2e8:	ncalli	array<@SyncPlayer>.Count()
000646:0x001ee2f0:	cmpi	i, #return
000646:0x001ee300:	bge	0x1ee338
000648:0x001ee308:	call	
000648:0x001ee318:	call	
000648:0x001ee330:	jump	0x1ee2d0
000648:0x001ee338:	rts
array<@SyncPlayer>::DifferentAtPosition()
000666:0x001ee368:	ncalli	array<@SyncPlayer>.Count()
000666:0x001ee370:	move	@m00, #return
000666:0x001ee380:	ncalli	array<SyncPlayer>.Count()
000666:0x001ee388:	cmpi	@m00, #return
000666:0x001ee398:	beq	0x1ee3c8
000668:0x001ee3a0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001ee3b0:	imove	#return, 0xffffffff
000669:0x001ee3c0:	rts
000672:0x001ee3c8:	imove	i, 0x000000
000672:0x001ee3d8:	jump	0x1ee3e8
000672:0x001ee3e0:	inc	i
000672:0x001ee3e8:	ncalli	array<SyncPlayer>.Count()
000672:0x001ee3f0:	cmpi	i, #return
000672:0x001ee400:	bge	0x1ee470
000674:0x001ee408:	icall	
000674:0x001ee418:	movec	@c00, #return
000674:0x001ee428:	icall	
000674:0x001ee438:	cmpc	@c00, #return
000674:0x001ee448:	beq	0x1ee468
000676:0x001ee450:	move	#return, i
000676:0x001ee460:	rts
000676:0x001ee468:	jump	0x1ee3e0
000680:0x001ee470:	imove	#return, 0xffffffff
000680:0x001ee480:	rts
000680:0x001ee488:	rts
array<LogTemplateID>::InsertAll()
000427:0x001ef1c0:	imove	i, 0x000000
000427:0x001ef1d0:	jump	0x1ef1f0
000427:0x001ef1d8:	move	@m00, i
000427:0x001ef1e8:	inc	i
000427:0x001ef1f0:	ncalli	array<LogTemplateID>.Count()
000427:0x001ef1f8:	cmpi	i, #return
000427:0x001ef208:	bge	0x1ef238
000429:0x001ef210:	icall	
000429:0x001ef220:	icall	
000429:0x001ef230:	jump	0x1ef1d8
000429:0x001ef238:	rts
array<LogTemplateID>::RemoveItem()
000479:0x001ef268:	icall	
000479:0x001ef278:	move	remove_index, #return
000481:0x001ef288:	cmpi	remove_index, _i0
000481:0x001ef298:	blt	0x1ef2b0
000483:0x001ef2a0:	ncalli	array<LogTemplateID>.RemoveOrdered(remove_index)
000483:0x001ef2b0:	rts
array<LogTemplateID>::RemoveItemUnOrdered()
000489:0x001ef2e0:	icall	
000489:0x001ef2f0:	move	remove_index, #return
000491:0x001ef300:	cmpi	remove_index, _i0
000491:0x001ef310:	blt	0x1ef328
000493:0x001ef318:	ncalli	array<LogTemplateID>.Remove(remove_index)
000493:0x001ef328:	rts
array<LogTemplateID>::IsValidIndex()
000499:0x001ef330:	cmpi	index, _i-1
000499:0x001ef340:	ble	0x1ef380
000499:0x001ef348:	ncalli	array<LogTemplateID>.Count()
000499:0x001ef350:	cmpi	index, #return
000499:0x001ef360:	bge	0x1ef380
000499:0x001ef368:	imove	#return, 0x000001
000499:0x001ef378:	jump	0x1ef390
000499:0x001ef380:	imove	#return, 0x000000
000499:0x001ef390:	rts
000499:0x001ef398:	rts
array<LogTemplateID>::Debug()
000525:0x001ef3f0:	ncalli	array<LogTemplateID>.Count()
000525:0x001ef3f8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001ef428:	icall	Print(#return)
000526:0x001ef438:	imove	i, 0x000000
000526:0x001ef448:	jump	0x1ef468
000526:0x001ef450:	move	@m00, i
000526:0x001ef460:	inc	i
000526:0x001ef468:	ncalli	array<LogTemplateID>.Count()
000526:0x001ef470:	cmpi	i, #return
000526:0x001ef480:	bge	0x1ef4f0
000528:0x001ef488:	icall	
000528:0x001ef498:	move	item, #return
000529:0x001ef4a8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001ef4d8:	icall	Print(#return)
000529:0x001ef4e8:	jump	0x1ef450
000529:0x001ef4f0:	rts
array<LogTemplateID>::GetRandomIndex()
000544:0x001ef4f8:	ncalli	array<LogTemplateID>.Count()
000544:0x001ef500:	move	@m00, #return
000544:0x001ef510:	cmpi	@m00, _i0
000544:0x001ef520:	ble	0x1ef558
000546:0x001ef528:	ncalli	array<LogTemplateID>.Count()
000546:0x001ef530:	icall	RandomInt(_i0, #return)
000546:0x001ef540:	move	#return, #return
000546:0x001ef550:	rts
000549:0x001ef558:	imove	#return, 0xffffffff
000549:0x001ef568:	rts
000549:0x001ef570:	rts
array<LogTemplateID>::GetRandomElement()
000563:0x001ef578:	call	
000563:0x001ef588:	icall	
000563:0x001ef598:	move	#return, #return
000563:0x001ef5a8:	rts
000563:0x001ef5b0:	rts
array<LogTemplateID>::SwapItems()
000568:0x001ef5e0:	icall	
000568:0x001ef5f0:	move	item1, #return
000569:0x001ef600:	icall	
000569:0x001ef610:	icall	
000570:0x001ef620:	icall	
000570:0x001ef630:	rts
array<LogTemplateID>::InsertArray()
000575:0x001ef688:	imove	i, 0x000000
000575:0x001ef698:	jump	0x1ef6b8
000575:0x001ef6a0:	move	@m00, i
000575:0x001ef6b0:	inc	i
000575:0x001ef6b8:	ncalli	array<LogTemplateID>.Count()
000575:0x001ef6c0:	cmpi	i, #return
000575:0x001ef6d0:	bge	0x1ef710
000577:0x001ef6d8:	icall	
000577:0x001ef6e8:	move	item, #return
000578:0x001ef6f8:	icall	
000578:0x001ef708:	jump	0x1ef6a0
000578:0x001ef710:	rts
array<LogTemplateID>::Invert()
000584:0x001ef790:	imove	left, 0x000000
000585:0x001ef7a0:	ncalli	array<LogTemplateID>.Count()
000585:0x001ef7a8:	subi	right, #return, _i1
000586:0x001ef7b8:	cmpi	right, _i0
000586:0x001ef7c8:	ble	0x1ef870
000588:0x001ef7d0:	cmpi	left, right
000588:0x001ef7e0:	bge	0x1ef870
000590:0x001ef7e8:	icall	
000590:0x001ef7f8:	move	temp, #return
000591:0x001ef808:	move	@m00, left
000591:0x001ef818:	inc	left
000591:0x001ef820:	icall	
000591:0x001ef830:	icall	
000592:0x001ef840:	move	@m00, right
000592:0x001ef850:	dec	right
000592:0x001ef858:	icall	
000592:0x001ef868:	jump	0x1ef7d0
000592:0x001ef870:	rts
array<LogTemplateID>::MoveIndex()
000612:0x001ef8c8:	ncalli	array<LogTemplateID>.Count()
000612:0x001ef8d0:	move	count, #return
000613:0x001ef8e0:	move	new_index, curr_index
000615:0x001ef8f0:	cmpi	move_number, _i0
000615:0x001ef900:	ble	0x1ef928
000617:0x001ef908:	addi	@m00, curr_index, move_number
000617:0x001ef918:	move	new_index, @m00
000620:0x001ef928:	cmpi	move_number, _i0
000620:0x001ef938:	bge	0x1ef9e0
000622:0x001ef940:	subi	@m00, curr_index, move_number
000622:0x001ef950:	move	new_index, @m00
000624:0x001ef960:	cmpi	new_index, _i0
000624:0x001ef970:	bge	0x1ef9e0
000626:0x001ef978:	subi	@m01, _i0, count
000626:0x001ef988:	cmpi	new_index, @m01
000626:0x001ef998:	bgt	0x1ef9c0
000628:0x001ef9a0:	modi	@m00, new_index, count
000628:0x001ef9b0:	move	new_index, @m00
000631:0x001ef9c0:	addi	@m00, new_index, count
000631:0x001ef9d0:	move	new_index, @m00
000635:0x001ef9e0:	cmpi	new_index, count
000635:0x001ef9f0:	blt	0x1efa18
000637:0x001ef9f8:	modi	@m00, new_index, count
000637:0x001efa08:	move	new_index, @m00
000641:0x001efa18:	move	#return, new_index
000641:0x001efa28:	rts
000641:0x001efa30:	rts
array<LogTemplateID>::ShuffleArray()
000646:0x001efa60:	imove	i, 0x000000
000646:0x001efa70:	jump	0x1efa90
000646:0x001efa78:	move	@m00, i
000646:0x001efa88:	inc	i
000646:0x001efa90:	ncalli	array<LogTemplateID>.Count()
000646:0x001efa98:	cmpi	i, #return
000646:0x001efaa8:	bge	0x1efae0
000648:0x001efab0:	call	
000648:0x001efac0:	call	
000648:0x001efad8:	jump	0x1efa78
000648:0x001efae0:	rts
array<LogTemplateID>::DifferentAtPosition()
000666:0x001efb10:	ncalli	array<LogTemplateID>.Count()
000666:0x001efb18:	move	@m00, #return
000666:0x001efb28:	push	#return
000666:0x001efb30:	ncalli	array<LogTemplateID>.Count()
000666:0x001efb38:	move	@m02, #return
000666:0x001efb48:	pop	#return
000666:0x001efb50:	cmpi	@m00, @m02
000666:0x001efb60:	beq	0x1efb90
000668:0x001efb68:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001efb78:	imove	#return, 0xffffffff
000669:0x001efb88:	rts
000672:0x001efb90:	imove	i, 0x000000
000672:0x001efba0:	jump	0x1efbb0
000672:0x001efba8:	inc	i
000672:0x001efbb0:	ncalli	array<LogTemplateID>.Count()
000672:0x001efbb8:	cmpi	i, #return
000672:0x001efbc8:	bge	0x1efc58
000674:0x001efbd0:	icall	
000674:0x001efbe0:	move	@m00, #return
000674:0x001efbf0:	push	#return
000674:0x001efbf8:	icall	
000674:0x001efc08:	move	@m02, #return
000674:0x001efc18:	pop	#return
000674:0x001efc20:	cmpi	@m00, @m02
000674:0x001efc30:	beq	0x1efc50
000676:0x001efc38:	move	#return, i
000676:0x001efc48:	rts
000676:0x001efc50:	jump	0x1efba8
000680:0x001efc58:	imove	#return, 0xffffffff
000680:0x001efc68:	rts
000680:0x001efc70:	rts
array<Param3<string,string,string>>::InsertAll()
000427:0x001f0300:	imove	i, 0x000000
000427:0x001f0310:	jump	0x1f0330
000427:0x001f0318:	move	@m00, i
000427:0x001f0328:	inc	i
000427:0x001f0330:	ncalli	array<Param3<string,string,string>>.Count()
000427:0x001f0338:	cmpi	i, #return
000427:0x001f0348:	bge	0x1f0378
000429:0x001f0350:	icall	
000429:0x001f0360:	icall	
000429:0x001f0370:	jump	0x1f0318
000429:0x001f0378:	rts
array<Param3<string,string,string>>::RemoveItem()
000479:0x001f03a8:	movefm	@c00, value
000479:0x001f03b8:	icall	
000479:0x001f03c8:	move	remove_index, #return
000481:0x001f03d8:	cmpi	remove_index, _i0
000481:0x001f03e8:	blt	0x1f0400
000483:0x001f03f0:	ncalli	array<Param3<string,string,string>>.RemoveOrdered(remove_index)
000483:0x001f0400:	rts
array<Param3<string,string,string>>::RemoveItemUnOrdered()
000489:0x001f0430:	movefm	@c00, value
000489:0x001f0440:	icall	
000489:0x001f0450:	move	remove_index, #return
000491:0x001f0460:	cmpi	remove_index, _i0
000491:0x001f0470:	blt	0x1f0488
000493:0x001f0478:	ncalli	array<Param3<string,string,string>>.Remove(remove_index)
000493:0x001f0488:	rts
array<Param3<string,string,string>>::IsValidIndex()
000499:0x001f0490:	cmpi	index, _i-1
000499:0x001f04a0:	ble	0x1f04e0
000499:0x001f04a8:	ncalli	array<Param3<string,string,string>>.Count()
000499:0x001f04b0:	cmpi	index, #return
000499:0x001f04c0:	bge	0x1f04e0
000499:0x001f04c8:	imove	#return, 0x000001
000499:0x001f04d8:	jump	0x1f04f0
000499:0x001f04e0:	imove	#return, 0x000000
000499:0x001f04f0:	rts
000499:0x001f04f8:	rts
array<Param3<string,string,string>>::Debug()
000525:0x001f0550:	ncalli	array<Param3<string,string,string>>.Count()
000525:0x001f0558:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001f0588:	icall	Print(#return)
000526:0x001f0598:	imove	i, 0x000000
000526:0x001f05a8:	jump	0x1f05c8
000526:0x001f05b0:	move	@m00, i
000526:0x001f05c0:	inc	i
000526:0x001f05c8:	ncalli	array<Param3<string,string,string>>.Count()
000526:0x001f05d0:	cmpi	i, #return
000526:0x001f05e0:	bge	0x1f0658
000528:0x001f05e8:	icall	
000528:0x001f05f8:	movetm	item, #return
000529:0x001f0608:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001f0638:	icall	Print(#return)
000529:0x001f0648:	release	item
000529:0x001f0650:	jump	0x1f05b0
000529:0x001f0658:	rts
array<Param3<string,string,string>>::GetRandomIndex()
000544:0x001f0660:	ncalli	array<Param3<string,string,string>>.Count()
000544:0x001f0668:	move	@m00, #return
000544:0x001f0678:	cmpi	@m00, _i0
000544:0x001f0688:	ble	0x1f06c0
000546:0x001f0690:	ncalli	array<Param3<string,string,string>>.Count()
000546:0x001f0698:	icall	RandomInt(_i0, #return)
000546:0x001f06a8:	move	#return, #return
000546:0x001f06b8:	rts
000549:0x001f06c0:	imove	#return, 0xffffffff
000549:0x001f06d0:	rts
000549:0x001f06d8:	rts
array<Param3<string,string,string>>::GetRandomElement()
000563:0x001f06e0:	call	
000563:0x001f06f0:	icall	
000563:0x001f0700:	movetm	#return, #return
000563:0x001f0710:	rts
000563:0x001f0718:	rts
array<Param3<string,string,string>>::SwapItems()
000568:0x001f0748:	icall	
000568:0x001f0758:	movetm	item1, #return
000569:0x001f0768:	icall	
000569:0x001f0778:	icall	
000570:0x001f0788:	movefm	@c00, item1
000570:0x001f0798:	icall	
000570:0x001f07a8:	release	item1
000570:0x001f07b0:	rts
array<Param3<string,string,string>>::InsertArray()
000575:0x001f0808:	imove	i, 0x000000
000575:0x001f0818:	jump	0x1f0838
000575:0x001f0820:	move	@m00, i
000575:0x001f0830:	inc	i
000575:0x001f0838:	ncalli	array<Param3<string,string,string>>.Count()
000575:0x001f0840:	cmpi	i, #return
000575:0x001f0850:	bge	0x1f08a8
000577:0x001f0858:	icall	
000577:0x001f0868:	movetm	item, #return
000578:0x001f0878:	movefm	@c00, item
000578:0x001f0888:	icall	
000578:0x001f0898:	release	item
000578:0x001f08a0:	jump	0x1f0820
000578:0x001f08a8:	rts
array<Param3<string,string,string>>::Invert()
000584:0x001f0928:	imove	left, 0x000000
000585:0x001f0938:	ncalli	array<Param3<string,string,string>>.Count()
000585:0x001f0940:	subi	right, #return, _i1
000586:0x001f0950:	cmpi	right, _i0
000586:0x001f0960:	ble	0x1f0a20
000588:0x001f0968:	cmpi	left, right
000588:0x001f0978:	bge	0x1f0a20
000590:0x001f0980:	icall	
000590:0x001f0990:	movetm	temp, #return
000591:0x001f09a0:	move	@m00, left
000591:0x001f09b0:	inc	left
000591:0x001f09b8:	icall	
000591:0x001f09c8:	icall	
000592:0x001f09d8:	move	@m00, right
000592:0x001f09e8:	dec	right
000592:0x001f09f0:	movefm	@c00, temp
000592:0x001f0a00:	icall	
000592:0x001f0a10:	release	temp
000592:0x001f0a18:	jump	0x1f0968
000592:0x001f0a20:	rts
array<Param3<string,string,string>>::MoveIndex()
000612:0x001f0a78:	ncalli	array<Param3<string,string,string>>.Count()
000612:0x001f0a80:	move	count, #return
000613:0x001f0a90:	move	new_index, curr_index
000615:0x001f0aa0:	cmpi	move_number, _i0
000615:0x001f0ab0:	ble	0x1f0ad8
000617:0x001f0ab8:	addi	@m00, curr_index, move_number
000617:0x001f0ac8:	move	new_index, @m00
000620:0x001f0ad8:	cmpi	move_number, _i0
000620:0x001f0ae8:	bge	0x1f0b90
000622:0x001f0af0:	subi	@m00, curr_index, move_number
000622:0x001f0b00:	move	new_index, @m00
000624:0x001f0b10:	cmpi	new_index, _i0
000624:0x001f0b20:	bge	0x1f0b90
000626:0x001f0b28:	subi	@m01, _i0, count
000626:0x001f0b38:	cmpi	new_index, @m01
000626:0x001f0b48:	bgt	0x1f0b70
000628:0x001f0b50:	modi	@m00, new_index, count
000628:0x001f0b60:	move	new_index, @m00
000631:0x001f0b70:	addi	@m00, new_index, count
000631:0x001f0b80:	move	new_index, @m00
000635:0x001f0b90:	cmpi	new_index, count
000635:0x001f0ba0:	blt	0x1f0bc8
000637:0x001f0ba8:	modi	@m00, new_index, count
000637:0x001f0bb8:	move	new_index, @m00
000641:0x001f0bc8:	move	#return, new_index
000641:0x001f0bd8:	rts
000641:0x001f0be0:	rts
array<Param3<string,string,string>>::ShuffleArray()
000646:0x001f0c10:	imove	i, 0x000000
000646:0x001f0c20:	jump	0x1f0c40
000646:0x001f0c28:	move	@m00, i
000646:0x001f0c38:	inc	i
000646:0x001f0c40:	ncalli	array<Param3<string,string,string>>.Count()
000646:0x001f0c48:	cmpi	i, #return
000646:0x001f0c58:	bge	0x1f0c90
000648:0x001f0c60:	call	
000648:0x001f0c70:	call	
000648:0x001f0c88:	jump	0x1f0c28
000648:0x001f0c90:	rts
array<Param3<string,string,string>>::DifferentAtPosition()
000666:0x001f0cc0:	ncalli	array<Param3<string,string,string>>.Count()
000666:0x001f0cc8:	move	@m00, #return
000666:0x001f0cd8:	push	#return
000666:0x001f0ce0:	ncalli	array<Param3<string,string,string>>.Count()
000666:0x001f0ce8:	move	@m02, #return
000666:0x001f0cf8:	pop	#return
000666:0x001f0d00:	cmpi	@m00, @m02
000666:0x001f0d10:	beq	0x1f0d40
000668:0x001f0d18:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001f0d28:	imove	#return, 0xffffffff
000669:0x001f0d38:	rts
000672:0x001f0d40:	imove	i, 0x000000
000672:0x001f0d50:	jump	0x1f0d60
000672:0x001f0d58:	inc	i
000672:0x001f0d60:	ncalli	array<Param3<string,string,string>>.Count()
000672:0x001f0d68:	cmpi	i, #return
000672:0x001f0d78:	bge	0x1f0e08
000674:0x001f0d80:	icall	
000674:0x001f0d90:	movec	@c00, #return
000674:0x001f0da0:	pushc	#return
000674:0x001f0da8:	icall	
000674:0x001f0db8:	movec	@c02, #return
000674:0x001f0dc8:	popc	#return
000674:0x001f0dd0:	cmpc	@c00, @c02
000674:0x001f0de0:	beq	0x1f0e00
000676:0x001f0de8:	move	#return, i
000676:0x001f0df8:	rts
000676:0x001f0e00:	jump	0x1f0d58
000680:0x001f0e08:	imove	#return, 0xffffffff
000680:0x001f0e18:	rts
000680:0x001f0e20:	rts
map<LogTemplateID,Param3<string,string,string>>::GetKeyArray()
000885:0x001f1120:	new	keys, array<LogTemplateID>
000886:0x001f1140:	imove	i, 0x000000
000886:0x001f1150:	jump	0x1f1170
000886:0x001f1158:	move	@m00, i
000886:0x001f1168:	inc	i
000886:0x001f1170:	ncalli	map<LogTemplateID,Param3<string,string,string>>.Count()
000886:0x001f1178:	cmpi	i, #return
000886:0x001f1188:	bge	0x1f11b8
000888:0x001f1190:	icall	
000888:0x001f11a0:	icall	
000888:0x001f11b0:	jump	0x1f1158
000890:0x001f11b8:	movem	#return, keys
000890:0x001f11c8:	release	keys
000890:0x001f11d0:	rts
000890:0x001f11d8:	release	keys
000890:0x001f11e0:	rts
map<LogTemplateID,Param3<string,string,string>>::GetValueArray()
000895:0x001f1238:	new	elements, array<Param3<string,string,string>>
000896:0x001f1258:	imove	i, 0x000000
000896:0x001f1268:	jump	0x1f1288
000896:0x001f1270:	move	@m00, i
000896:0x001f1280:	inc	i
000896:0x001f1288:	ncalli	map<LogTemplateID,Param3<string,string,string>>.Count()
000896:0x001f1290:	cmpi	i, #return
000896:0x001f12a0:	bge	0x1f12d0
000898:0x001f12a8:	icall	
000898:0x001f12b8:	icall	
000898:0x001f12c8:	jump	0x1f1270
000900:0x001f12d0:	movem	#return, elements
000900:0x001f12e0:	release	elements
000900:0x001f12e8:	rts
000900:0x001f12f0:	release	elements
000900:0x001f12f8:	rts
map<LogTemplateID,Param3<string,string,string>>::ReplaceKey()
000905:0x001f1300:	icall	
000905:0x001f1310:	cmpi	#return, _i0
000905:0x001f1320:	beq	0x1f1370
000907:0x001f1328:	icall	
000907:0x001f1338:	icall	
000908:0x001f1348:	icall	
000909:0x001f1358:	imove	#return, 0x000001
000909:0x001f1368:	rts
000911:0x001f1370:	imove	#return, 0x000000
000911:0x001f1380:	rts
000911:0x001f1388:	rts
map<LogTemplateID,Param3<string,string,string>>::GetKeyByValue()
000917:0x001f13e0:	imove	i, 0x000000
000917:0x001f13f0:	jump	0x1f1410
000917:0x001f13f8:	move	@m00, i
000917:0x001f1408:	inc	i
000917:0x001f1410:	ncalli	map<LogTemplateID,Param3<string,string,string>>.Count()
000917:0x001f1418:	cmpi	i, #return
000917:0x001f1428:	bge	0x1f1498
000919:0x001f1430:	icall	
000919:0x001f1440:	movec	@c00, #return
000919:0x001f1450:	cmpmc	@c00, value
000919:0x001f1460:	bne	0x1f1490
000921:0x001f1468:	icall	
000921:0x001f1478:	move	ret, #return
000922:0x001f1488:	jump	0x1f1498
000922:0x001f1490:	jump	0x1f13f8
000926:0x001f1498:	move	#return, ret
000926:0x001f14a8:	rts
000926:0x001f14b0:	rts
map<LogTemplateID,Param3<string,string,string>>::GetKeyByValueChecked()
000931:0x001f14e0:	imove	i, 0x000000
000931:0x001f14f0:	jump	0x1f1510
000931:0x001f14f8:	move	@m00, i
000931:0x001f1508:	inc	i
000931:0x001f1510:	ncalli	map<LogTemplateID,Param3<string,string,string>>.Count()
000931:0x001f1518:	cmpi	i, #return
000931:0x001f1528:	bge	0x1f15b8
000933:0x001f1530:	icall	
000933:0x001f1540:	movec	@c00, #return
000933:0x001f1550:	cmpmc	@c00, value
000933:0x001f1560:	bne	0x1f15b0
000935:0x001f1568:	icall	
000935:0x001f1578:	move	key, #return
000936:0x001f1588:	imove	#return, 0x000001
000936:0x001f1598:	move	key, key
000936:0x001f15a8:	rts
000936:0x001f15b0:	jump	0x1f14f8
000939:0x001f15b8:	imove	#return, 0x000000
000939:0x001f15c8:	move	key, key
000939:0x001f15d8:	rts
000939:0x001f15e0:	move	key, key
000939:0x001f15f0:	rts
map<LogTemplateID,@Param3<string,string,string>>::GetKeyArray()
000885:0x001f1940:	new	keys, array<LogTemplateID>
000886:0x001f1960:	imove	i, 0x000000
000886:0x001f1970:	jump	0x1f1990
000886:0x001f1978:	move	@m00, i
000886:0x001f1988:	inc	i
000886:0x001f1990:	ncalli	map<LogTemplateID,@Param3<string,string,string>>.Count()
000886:0x001f1998:	cmpi	i, #return
000886:0x001f19a8:	bge	0x1f19d8
000888:0x001f19b0:	icall	
000888:0x001f19c0:	icall	
000888:0x001f19d0:	jump	0x1f1978
000890:0x001f19d8:	movem	#return, keys
000890:0x001f19e8:	release	keys
000890:0x001f19f0:	rts
000890:0x001f19f8:	release	keys
000890:0x001f1a00:	rts
map<LogTemplateID,@Param3<string,string,string>>::GetValueArray()
000895:0x001f1a58:	new	elements, array<Param3<string,string,string>>
000896:0x001f1a78:	imove	i, 0x000000
000896:0x001f1a88:	jump	0x1f1aa8
000896:0x001f1a90:	move	@m00, i
000896:0x001f1aa0:	inc	i
000896:0x001f1aa8:	ncalli	map<LogTemplateID,@Param3<string,string,string>>.Count()
000896:0x001f1ab0:	cmpi	i, #return
000896:0x001f1ac0:	bge	0x1f1af0
000898:0x001f1ac8:	icall	
000898:0x001f1ad8:	icall	
000898:0x001f1ae8:	jump	0x1f1a90
000900:0x001f1af0:	movem	#return, elements
000900:0x001f1b00:	release	elements
000900:0x001f1b08:	rts
000900:0x001f1b10:	release	elements
000900:0x001f1b18:	rts
map<LogTemplateID,@Param3<string,string,string>>::ReplaceKey()
000905:0x001f1b20:	icall	
000905:0x001f1b30:	cmpi	#return, _i0
000905:0x001f1b40:	beq	0x1f1b90
000907:0x001f1b48:	icall	
000907:0x001f1b58:	icall	
000908:0x001f1b68:	icall	
000909:0x001f1b78:	imove	#return, 0x000001
000909:0x001f1b88:	rts
000911:0x001f1b90:	imove	#return, 0x000000
000911:0x001f1ba0:	rts
000911:0x001f1ba8:	rts
map<LogTemplateID,@Param3<string,string,string>>::GetKeyByValue()
000917:0x001f1c00:	imove	i, 0x000000
000917:0x001f1c10:	jump	0x1f1c30
000917:0x001f1c18:	move	@m00, i
000917:0x001f1c28:	inc	i
000917:0x001f1c30:	ncalli	map<LogTemplateID,@Param3<string,string,string>>.Count()
000917:0x001f1c38:	cmpi	i, #return
000917:0x001f1c48:	bge	0x1f1cb8
000919:0x001f1c50:	icall	
000919:0x001f1c60:	movec	@c00, #return
000919:0x001f1c70:	cmpmc	@c00, value
000919:0x001f1c80:	bne	0x1f1cb0
000921:0x001f1c88:	icall	
000921:0x001f1c98:	move	ret, #return
000922:0x001f1ca8:	jump	0x1f1cb8
000922:0x001f1cb0:	jump	0x1f1c18
000926:0x001f1cb8:	move	#return, ret
000926:0x001f1cc8:	rts
000926:0x001f1cd0:	rts
map<LogTemplateID,@Param3<string,string,string>>::GetKeyByValueChecked()
000931:0x001f1d00:	imove	i, 0x000000
000931:0x001f1d10:	jump	0x1f1d30
000931:0x001f1d18:	move	@m00, i
000931:0x001f1d28:	inc	i
000931:0x001f1d30:	ncalli	map<LogTemplateID,@Param3<string,string,string>>.Count()
000931:0x001f1d38:	cmpi	i, #return
000931:0x001f1d48:	bge	0x1f1dd8
000933:0x001f1d50:	icall	
000933:0x001f1d60:	movec	@c00, #return
000933:0x001f1d70:	cmpmc	@c00, value
000933:0x001f1d80:	bne	0x1f1dd0
000935:0x001f1d88:	icall	
000935:0x001f1d98:	move	key, #return
000936:0x001f1da8:	imove	#return, 0x000001
000936:0x001f1db8:	move	key, key
000936:0x001f1dc8:	rts
000936:0x001f1dd0:	jump	0x1f1d18
000939:0x001f1dd8:	imove	#return, 0x000000
000939:0x001f1de8:	move	key, key
000939:0x001f1df8:	rts
000939:0x001f1e00:	move	key, key
000939:0x001f1e10:	rts
array<JsonUndergroundAreaBreadcrumb>::InsertAll()
000427:0x001f2658:	imove	i, 0x000000
000427:0x001f2668:	jump	0x1f2688
000427:0x001f2670:	move	@m00, i
000427:0x001f2680:	inc	i
000427:0x001f2688:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000427:0x001f2690:	cmpi	i, #return
000427:0x001f26a0:	bge	0x1f26d0
000429:0x001f26a8:	icall	
000429:0x001f26b8:	icall	
000429:0x001f26c8:	jump	0x1f2670
000429:0x001f26d0:	rts
array<JsonUndergroundAreaBreadcrumb>::RemoveItem()
000479:0x001f2700:	movefm	@c00, value
000479:0x001f2710:	icall	
000479:0x001f2720:	move	remove_index, #return
000481:0x001f2730:	cmpi	remove_index, _i0
000481:0x001f2740:	blt	0x1f2758
000483:0x001f2748:	ncalli	array<JsonUndergroundAreaBreadcrumb>.RemoveOrdered(remove_index)
000483:0x001f2758:	rts
array<JsonUndergroundAreaBreadcrumb>::RemoveItemUnOrdered()
000489:0x001f2788:	movefm	@c00, value
000489:0x001f2798:	icall	
000489:0x001f27a8:	move	remove_index, #return
000491:0x001f27b8:	cmpi	remove_index, _i0
000491:0x001f27c8:	blt	0x1f27e0
000493:0x001f27d0:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Remove(remove_index)
000493:0x001f27e0:	rts
array<JsonUndergroundAreaBreadcrumb>::IsValidIndex()
000499:0x001f27e8:	cmpi	index, _i-1
000499:0x001f27f8:	ble	0x1f2838
000499:0x001f2800:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000499:0x001f2808:	cmpi	index, #return
000499:0x001f2818:	bge	0x1f2838
000499:0x001f2820:	imove	#return, 0x000001
000499:0x001f2830:	jump	0x1f2848
000499:0x001f2838:	imove	#return, 0x000000
000499:0x001f2848:	rts
000499:0x001f2850:	rts
array<JsonUndergroundAreaBreadcrumb>::Debug()
000525:0x001f28a8:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000525:0x001f28b0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001f28e0:	icall	Print(#return)
000526:0x001f28f0:	imove	i, 0x000000
000526:0x001f2900:	jump	0x1f2920
000526:0x001f2908:	move	@m00, i
000526:0x001f2918:	inc	i
000526:0x001f2920:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000526:0x001f2928:	cmpi	i, #return
000526:0x001f2938:	bge	0x1f29b0
000528:0x001f2940:	icall	
000528:0x001f2950:	movetm	item, #return
000529:0x001f2960:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001f2990:	icall	Print(#return)
000529:0x001f29a0:	release	item
000529:0x001f29a8:	jump	0x1f2908
000529:0x001f29b0:	rts
array<JsonUndergroundAreaBreadcrumb>::GetRandomIndex()
000544:0x001f29b8:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000544:0x001f29c0:	move	@m00, #return
000544:0x001f29d0:	cmpi	@m00, _i0
000544:0x001f29e0:	ble	0x1f2a18
000546:0x001f29e8:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000546:0x001f29f0:	icall	RandomInt(_i0, #return)
000546:0x001f2a00:	move	#return, #return
000546:0x001f2a10:	rts
000549:0x001f2a18:	imove	#return, 0xffffffff
000549:0x001f2a28:	rts
000549:0x001f2a30:	rts
array<JsonUndergroundAreaBreadcrumb>::GetRandomElement()
000563:0x001f2a38:	call	
000563:0x001f2a48:	icall	
000563:0x001f2a58:	movetm	#return, #return
000563:0x001f2a68:	rts
000563:0x001f2a70:	rts
array<JsonUndergroundAreaBreadcrumb>::SwapItems()
000568:0x001f2aa0:	icall	
000568:0x001f2ab0:	movetm	item1, #return
000569:0x001f2ac0:	icall	
000569:0x001f2ad0:	icall	
000570:0x001f2ae0:	movefm	@c00, item1
000570:0x001f2af0:	icall	
000570:0x001f2b00:	release	item1
000570:0x001f2b08:	rts
array<JsonUndergroundAreaBreadcrumb>::InsertArray()
000575:0x001f2b60:	imove	i, 0x000000
000575:0x001f2b70:	jump	0x1f2b90
000575:0x001f2b78:	move	@m00, i
000575:0x001f2b88:	inc	i
000575:0x001f2b90:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000575:0x001f2b98:	cmpi	i, #return
000575:0x001f2ba8:	bge	0x1f2c00
000577:0x001f2bb0:	icall	
000577:0x001f2bc0:	movetm	item, #return
000578:0x001f2bd0:	movefm	@c00, item
000578:0x001f2be0:	icall	
000578:0x001f2bf0:	release	item
000578:0x001f2bf8:	jump	0x1f2b78
000578:0x001f2c00:	rts
array<JsonUndergroundAreaBreadcrumb>::Invert()
000584:0x001f2c80:	imove	left, 0x000000
000585:0x001f2c90:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000585:0x001f2c98:	subi	right, #return, _i1
000586:0x001f2ca8:	cmpi	right, _i0
000586:0x001f2cb8:	ble	0x1f2d78
000588:0x001f2cc0:	cmpi	left, right
000588:0x001f2cd0:	bge	0x1f2d78
000590:0x001f2cd8:	icall	
000590:0x001f2ce8:	movetm	temp, #return
000591:0x001f2cf8:	move	@m00, left
000591:0x001f2d08:	inc	left
000591:0x001f2d10:	icall	
000591:0x001f2d20:	icall	
000592:0x001f2d30:	move	@m00, right
000592:0x001f2d40:	dec	right
000592:0x001f2d48:	movefm	@c00, temp
000592:0x001f2d58:	icall	
000592:0x001f2d68:	release	temp
000592:0x001f2d70:	jump	0x1f2cc0
000592:0x001f2d78:	rts
array<JsonUndergroundAreaBreadcrumb>::MoveIndex()
000612:0x001f2dd0:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000612:0x001f2dd8:	move	count, #return
000613:0x001f2de8:	move	new_index, curr_index
000615:0x001f2df8:	cmpi	move_number, _i0
000615:0x001f2e08:	ble	0x1f2e30
000617:0x001f2e10:	addi	@m00, curr_index, move_number
000617:0x001f2e20:	move	new_index, @m00
000620:0x001f2e30:	cmpi	move_number, _i0
000620:0x001f2e40:	bge	0x1f2ee8
000622:0x001f2e48:	subi	@m00, curr_index, move_number
000622:0x001f2e58:	move	new_index, @m00
000624:0x001f2e68:	cmpi	new_index, _i0
000624:0x001f2e78:	bge	0x1f2ee8
000626:0x001f2e80:	subi	@m01, _i0, count
000626:0x001f2e90:	cmpi	new_index, @m01
000626:0x001f2ea0:	bgt	0x1f2ec8
000628:0x001f2ea8:	modi	@m00, new_index, count
000628:0x001f2eb8:	move	new_index, @m00
000631:0x001f2ec8:	addi	@m00, new_index, count
000631:0x001f2ed8:	move	new_index, @m00
000635:0x001f2ee8:	cmpi	new_index, count
000635:0x001f2ef8:	blt	0x1f2f20
000637:0x001f2f00:	modi	@m00, new_index, count
000637:0x001f2f10:	move	new_index, @m00
000641:0x001f2f20:	move	#return, new_index
000641:0x001f2f30:	rts
000641:0x001f2f38:	rts
array<JsonUndergroundAreaBreadcrumb>::ShuffleArray()
000646:0x001f2f68:	imove	i, 0x000000
000646:0x001f2f78:	jump	0x1f2f98
000646:0x001f2f80:	move	@m00, i
000646:0x001f2f90:	inc	i
000646:0x001f2f98:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000646:0x001f2fa0:	cmpi	i, #return
000646:0x001f2fb0:	bge	0x1f2fe8
000648:0x001f2fb8:	call	
000648:0x001f2fc8:	call	
000648:0x001f2fe0:	jump	0x1f2f80
000648:0x001f2fe8:	rts
array<JsonUndergroundAreaBreadcrumb>::DifferentAtPosition()
000666:0x001f3018:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000666:0x001f3020:	move	@m00, #return
000666:0x001f3030:	push	#return
000666:0x001f3038:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000666:0x001f3040:	move	@m02, #return
000666:0x001f3050:	pop	#return
000666:0x001f3058:	cmpi	@m00, @m02
000666:0x001f3068:	beq	0x1f3098
000668:0x001f3070:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001f3080:	imove	#return, 0xffffffff
000669:0x001f3090:	rts
000672:0x001f3098:	imove	i, 0x000000
000672:0x001f30a8:	jump	0x1f30b8
000672:0x001f30b0:	inc	i
000672:0x001f30b8:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000672:0x001f30c0:	cmpi	i, #return
000672:0x001f30d0:	bge	0x1f3160
000674:0x001f30d8:	icall	
000674:0x001f30e8:	movec	@c00, #return
000674:0x001f30f8:	pushc	#return
000674:0x001f3100:	icall	
000674:0x001f3110:	movec	@c02, #return
000674:0x001f3120:	popc	#return
000674:0x001f3128:	cmpc	@c00, @c02
000674:0x001f3138:	beq	0x1f3158
000676:0x001f3140:	move	#return, i
000676:0x001f3150:	rts
000676:0x001f3158:	jump	0x1f30b0
000680:0x001f3160:	imove	#return, 0xffffffff
000680:0x001f3170:	rts
000680:0x001f3178:	rts
array<@JsonUndergroundAreaBreadcrumb>::InsertAll()
000427:0x001f3590:	imove	i, 0x000000
000427:0x001f35a0:	jump	0x1f35c0
000427:0x001f35a8:	move	@m00, i
000427:0x001f35b8:	inc	i
000427:0x001f35c0:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000427:0x001f35c8:	cmpi	i, #return
000427:0x001f35d8:	bge	0x1f3608
000429:0x001f35e0:	icall	
000429:0x001f35f0:	icall	
000429:0x001f3600:	jump	0x1f35a8
000429:0x001f3608:	rts
array<@JsonUndergroundAreaBreadcrumb>::RemoveItem()
000479:0x001f3638:	movefm	@c00, value
000479:0x001f3648:	icall	
000479:0x001f3658:	move	remove_index, #return
000481:0x001f3668:	cmpi	remove_index, _i0
000481:0x001f3678:	blt	0x1f3690
000483:0x001f3680:	ncalli	array<@JsonUndergroundAreaBreadcrumb>.RemoveOrdered(remove_index)
000483:0x001f3690:	rts
array<@JsonUndergroundAreaBreadcrumb>::RemoveItemUnOrdered()
000489:0x001f36c0:	movefm	@c00, value
000489:0x001f36d0:	icall	
000489:0x001f36e0:	move	remove_index, #return
000491:0x001f36f0:	cmpi	remove_index, _i0
000491:0x001f3700:	blt	0x1f3718
000493:0x001f3708:	ncalli	array<@JsonUndergroundAreaBreadcrumb>.Remove(remove_index)
000493:0x001f3718:	rts
array<@JsonUndergroundAreaBreadcrumb>::IsValidIndex()
000499:0x001f3720:	cmpi	index, _i-1
000499:0x001f3730:	ble	0x1f3770
000499:0x001f3738:	ncalli	array<@JsonUndergroundAreaBreadcrumb>.Count()
000499:0x001f3740:	cmpi	index, #return
000499:0x001f3750:	bge	0x1f3770
000499:0x001f3758:	imove	#return, 0x000001
000499:0x001f3768:	jump	0x1f3780
000499:0x001f3770:	imove	#return, 0x000000
000499:0x001f3780:	rts
000499:0x001f3788:	rts
array<@JsonUndergroundAreaBreadcrumb>::Debug()
000525:0x001f37e0:	ncalli	array<@JsonUndergroundAreaBreadcrumb>.Count()
000525:0x001f37e8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x001f3818:	icall	Print(#return)
000526:0x001f3828:	imove	i, 0x000000
000526:0x001f3838:	jump	0x1f3858
000526:0x001f3840:	move	@m00, i
000526:0x001f3850:	inc	i
000526:0x001f3858:	ncalli	array<@JsonUndergroundAreaBreadcrumb>.Count()
000526:0x001f3860:	cmpi	i, #return
000526:0x001f3870:	bge	0x1f38e8
000528:0x001f3878:	icall	
000528:0x001f3888:	movetm	item, #return
000529:0x001f3898:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x001f38c8:	icall	Print(#return)
000529:0x001f38d8:	release	item
000529:0x001f38e0:	jump	0x1f3840
000529:0x001f38e8:	rts
array<@JsonUndergroundAreaBreadcrumb>::GetRandomIndex()
000544:0x001f38f0:	ncalli	array<@JsonUndergroundAreaBreadcrumb>.Count()
000544:0x001f38f8:	move	@m00, #return
000544:0x001f3908:	cmpi	@m00, _i0
000544:0x001f3918:	ble	0x1f3950
000546:0x001f3920:	ncalli	array<@JsonUndergroundAreaBreadcrumb>.Count()
000546:0x001f3928:	icall	RandomInt(_i0, #return)
000546:0x001f3938:	move	#return, #return
000546:0x001f3948:	rts
000549:0x001f3950:	imove	#return, 0xffffffff
000549:0x001f3960:	rts
000549:0x001f3968:	rts
array<@JsonUndergroundAreaBreadcrumb>::GetRandomElement()
000563:0x001f3970:	call	
000563:0x001f3980:	icall	
000563:0x001f3990:	movetm	#return, #return
000563:0x001f39a0:	rts
000563:0x001f39a8:	rts
array<@JsonUndergroundAreaBreadcrumb>::SwapItems()
000568:0x001f39d8:	icall	
000568:0x001f39e8:	movetm	item1, #return
000569:0x001f39f8:	icall	
000569:0x001f3a08:	icall	
000570:0x001f3a18:	movefm	@c00, item1
000570:0x001f3a28:	icall	
000570:0x001f3a38:	release	item1
000570:0x001f3a40:	rts
array<@JsonUndergroundAreaBreadcrumb>::InsertArray()
000575:0x001f3a98:	imove	i, 0x000000
000575:0x001f3aa8:	jump	0x1f3ac8
000575:0x001f3ab0:	move	@m00, i
000575:0x001f3ac0:	inc	i
000575:0x001f3ac8:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000575:0x001f3ad0:	cmpi	i, #return
000575:0x001f3ae0:	bge	0x1f3b38
000577:0x001f3ae8:	icall	
000577:0x001f3af8:	movetm	item, #return
000578:0x001f3b08:	movefm	@c00, item
000578:0x001f3b18:	icall	
000578:0x001f3b28:	release	item
000578:0x001f3b30:	jump	0x1f3ab0
000578:0x001f3b38:	rts
array<@JsonUndergroundAreaBreadcrumb>::Invert()
000584:0x001f3bb8:	imove	left, 0x000000
000585:0x001f3bc8:	ncalli	array<@JsonUndergroundAreaBreadcrumb>.Count()
000585:0x001f3bd0:	subi	right, #return, _i1
000586:0x001f3be0:	cmpi	right, _i0
000586:0x001f3bf0:	ble	0x1f3cb0
000588:0x001f3bf8:	cmpi	left, right
000588:0x001f3c08:	bge	0x1f3cb0
000590:0x001f3c10:	icall	
000590:0x001f3c20:	movetm	temp, #return
000591:0x001f3c30:	move	@m00, left
000591:0x001f3c40:	inc	left
000591:0x001f3c48:	icall	
000591:0x001f3c58:	icall	
000592:0x001f3c68:	move	@m00, right
000592:0x001f3c78:	dec	right
000592:0x001f3c80:	movefm	@c00, temp
000592:0x001f3c90:	icall	
000592:0x001f3ca0:	release	temp
000592:0x001f3ca8:	jump	0x1f3bf8
000592:0x001f3cb0:	rts
array<@JsonUndergroundAreaBreadcrumb>::MoveIndex()
000612:0x001f3d08:	ncalli	array<@JsonUndergroundAreaBreadcrumb>.Count()
000612:0x001f3d10:	move	count, #return
000613:0x001f3d20:	move	new_index, curr_index
000615:0x001f3d30:	cmpi	move_number, _i0
000615:0x001f3d40:	ble	0x1f3d68
000617:0x001f3d48:	addi	@m00, curr_index, move_number
000617:0x001f3d58:	move	new_index, @m00
000620:0x001f3d68:	cmpi	move_number, _i0
000620:0x001f3d78:	bge	0x1f3e20
000622:0x001f3d80:	subi	@m00, curr_index, move_number
000622:0x001f3d90:	move	new_index, @m00
000624:0x001f3da0:	cmpi	new_index, _i0
000624:0x001f3db0:	bge	0x1f3e20
000626:0x001f3db8:	subi	@m01, _i0, count
000626:0x001f3dc8:	cmpi	new_index, @m01
000626:0x001f3dd8:	bgt	0x1f3e00
000628:0x001f3de0:	modi	@m00, new_index, count
000628:0x001f3df0:	move	new_index, @m00
000631:0x001f3e00:	addi	@m00, new_index, count
000631:0x001f3e10:	move	new_index, @m00
000635:0x001f3e20:	cmpi	new_index, count
000635:0x001f3e30:	blt	0x1f3e58
000637:0x001f3e38:	modi	@m00, new_index, count
000637:0x001f3e48:	move	new_index, @m00
000641:0x001f3e58:	move	#return, new_index
000641:0x001f3e68:	rts
000641:0x001f3e70:	rts
array<@JsonUndergroundAreaBreadcrumb>::ShuffleArray()
000646:0x001f3ea0:	imove	i, 0x000000
000646:0x001f3eb0:	jump	0x1f3ed0
000646:0x001f3eb8:	move	@m00, i
000646:0x001f3ec8:	inc	i
000646:0x001f3ed0:	ncalli	array<@JsonUndergroundAreaBreadcrumb>.Count()
000646:0x001f3ed8:	cmpi	i, #return
000646:0x001f3ee8:	bge	0x1f3f20
000648:0x001f3ef0:	call	
000648:0x001f3f00:	call	
000648:0x001f3f18:	jump	0x1f3eb8
000648:0x001f3f20:	rts
array<@JsonUndergroundAreaBreadcrumb>::DifferentAtPosition()
000666:0x001f3f50:	ncalli	array<@JsonUndergroundAreaBreadcrumb>.Count()
000666:0x001f3f58:	move	@m00, #return
000666:0x001f3f68:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000666:0x001f3f70:	cmpi	@m00, #return
000666:0x001f3f80:	beq	0x1f3fb0
000668:0x001f3f88:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x001f3f98:	imove	#return, 0xffffffff
000669:0x001f3fa8:	rts
000672:0x001f3fb0:	imove	i, 0x000000
000672:0x001f3fc0:	jump	0x1f3fd0
000672:0x001f3fc8:	inc	i
000672:0x001f3fd0:	ncalli	array<JsonUndergroundAreaBreadcrumb>.Count()
000672:0x001f3fd8:	cmpi	i, #return
000672:0x001f3fe8:	bge	0x1f4058
000674:0x001f3ff0:	icall	
000674:0x001f4000:	movec	@c00, #return
000674:0x001f4010:	icall	
000674:0x001f4020:	cmpc	@c00, #return
000674:0x001f4030:	beq	0x1f4050
000676:0x001f4038:	move	#return, i
000676:0x001f4048:	rts
000676:0x001f4050:	jump	0x1f3fc8
000680:0x001f4058:	imove	#return, 0xffffffff
000680:0x001f4068:	rts
000680:0x001f4070:	rts
AutoHeightSpacer::Update()
//scripts/3_Game/gui\spacers\autoheightspacer.c
000013:0x001f4750:	imove	x, 0.00000
000014:0x001f4760:	imove	y, 0.00000
000015:0x001f4770:	imove	width, 0.00000
000016:0x001f4780:	imove	height, 0.00000
000017:0x001f4790:	imove	heightOld, 0.00000
000018:0x001f47a0:	move	top, Top
000022:0x001f47b0:	movefm	[0xd31345a8], m_root
000022:0x001f47c0:	ncalli	Widget.GetChildren()
000022:0x001f47c8:	movetm	child, #return
000026:0x001f47d8:	cmpi	AlignChilds, _i0
000026:0x001f47e8:	bne	0x1f4800
000026:0x001f47f0:	imove	top, -100000.00000
000028:0x001f4800:	cmpcm	child, NULL
000028:0x001f4810:	beq	0x1f4b88
000031:0x001f4818:	movefm	[0xd31345a8], m_root
000031:0x001f4828:	icall	
000032:0x001f4838:	imove	rowHeight, 0.00000
000033:0x001f4848:	move	rowRight, rowWidth
000035:0x001f4858:	cmpcm	child, null
000035:0x001f4868:	beq	0x1f4af8
000037:0x001f4870:	ncalli	Widget.IsVisible()
000037:0x001f4878:	move	@m00, #return
000037:0x001f4888:	cmpi	@m00, false
000037:0x001f4898:	beq	0x1f4900
000037:0x001f48a0:	ncalli	Widget.GetName()
000037:0x001f48a8:	moves	@s00, #return
000037:0x001f48b8:	cmps	@s00, _s'SelectedContainer'
000037:0x001f48c8:	beq	0x1f4900
000037:0x001f48d0:	ncalli	Widget.GetName()
000037:0x001f48d8:	moves	@s00, #return
000037:0x001f48e8:	cmps	@s00, _s'Icon'
000037:0x001f48f8:	bne	0x1f4920
000040:0x001f4900:	ncalli	Widget.GetSibling()
000040:0x001f4908:	movetm	child, #return
000041:0x001f4918:	jump	0x1f4858
000044:0x001f4920:	icall	
000046:0x001f4930:	cmpi	AlignChilds, _i0
000046:0x001f4940:	beq	0x1f4a80
000048:0x001f4948:	ncalli	Widget.SetFlags(_i12, false)
000051:0x001f4958:	cmpf	rowRight, width
000051:0x001f4968:	bge	0x1f49e8
000053:0x001f4970:	move	@f00, rowHeight
000053:0x001f4980:	addf	top, top, @f00
000054:0x001f4990:	cmpf	rowHeight, _f0.000000
000054:0x001f49a0:	ble	0x1f49c8
000054:0x001f49a8:	citf	@f00, Gap
000054:0x001f49b8:	addf	top, top, @f00
000055:0x001f49c8:	move	rowRight, rowWidth
000056:0x001f49d8:	imove	rowHeight, 0.00000
000060:0x001f49e8:	cmpf	height, rowHeight
000060:0x001f49f8:	ble	0x1f4a10
000060:0x001f4a00:	move	rowHeight, height
000062:0x001f4a10:	subf	@f01, rowWidth, rowRight
000062:0x001f4a20:	move	@f00, @f01
000062:0x001f4a30:	ncalli	Widget.SetPos(@f00, top, false)
000063:0x001f4a48:	citf	@f01, Gap
000063:0x001f4a58:	addf	@f00, width, @f01
000063:0x001f4a68:	subf	rowRight, rowRight, @f00
000063:0x001f4a78:	jump	0x1f4ad8
000067:0x001f4a80:	icall	
000068:0x001f4a90:	move	@f00, height
000068:0x001f4aa0:	addf	y, y, @f00
000069:0x001f4ab0:	cmpf	top, y
000069:0x001f4ac0:	bge	0x1f4ad8
000069:0x001f4ac8:	move	top, y
000072:0x001f4ad8:	ncalli	Widget.GetSibling()
000072:0x001f4ae0:	movetm	child, #return
000072:0x001f4af0:	jump	0x1f4858
000076:0x001f4af8:	move	@f00, rowHeight
000076:0x001f4b08:	addf	top, top, @f00
000078:0x001f4b18:	cmpi	AlignChilds, _i0
000078:0x001f4b28:	beq	0x1f4b48
000080:0x001f4b30:	move	height, top
000080:0x001f4b40:	jump	0x1f4b88
000084:0x001f4b48:	movefm	[0xd31345a8], m_root
000084:0x001f4b58:	icall	
000085:0x001f4b68:	subf	@f00, top, y
000085:0x001f4b78:	move	height, @f00
000089:0x001f4b88:	movefm	[0xd31345a8], m_root
000089:0x001f4b98:	icall	
000091:0x001f4ba8:	cmpi	MaxHeight, _i0
000091:0x001f4bb8:	ble	0x1f4bf8
000091:0x001f4bc0:	citf	@f00, MaxHeight
000091:0x001f4bd0:	cmpf	height, @f00
000091:0x001f4be0:	ble	0x1f4bf8
000093:0x001f4be8:	citf	height, MaxHeight
000096:0x001f4bf8:	cfti	@m00, height
000096:0x001f4c08:	cmpi	MinHeight, @m00
000096:0x001f4c18:	ble	0x1f4c30
000098:0x001f4c20:	citf	height, MinHeight
000101:0x001f4c30:	subf	@f00, heightOld, height
000101:0x001f4c40:	cfti	@m01, @f00
000101:0x001f4c50:	move	@m00, @m01
000101:0x001f4c60:	icall	AbsInt(@m00)
000101:0x001f4c70:	move	@m01, #return
000101:0x001f4c80:	cmpi	@m01, _i1
000101:0x001f4c90:	ble	0x1f4cc8
000103:0x001f4c98:	movefm	[0xd31345a8], m_root
000103:0x001f4ca8:	ncalli	Widget.SetSize(width, height, _i1)
000103:0x001f4cc0:	jump	0x1f4cf8
000105:0x001f4cc8:	cmpi	AlignChilds, _i0
000105:0x001f4cd8:	beq	0x1f4cf8
000107:0x001f4ce0:	movefm	[0xd31345a8], m_root
000107:0x001f4cf0:	ncalli	Widget.Update()
000110:0x001f4cf8:	release	child
000110:0x001f4d00:	rts
000110:0x001f4d08:	release	child
000110:0x001f4d10:	rts
AutoHeightSpacer::OnWidgetScriptInit()
000115:0x001f4d48:	movem	m_root, w
000116:0x001f4d58:	movefm	[0xd31345a8], m_root
000116:0x001f4d68:	ncalli	Widget.SetHandler(this)
000117:0x001f4d78:	movefm	[0xd31345a8], m_root
000117:0x001f4d88:	ncalli	Widget.SetFlags(_i8, _i1)
000118:0x001f4d98:	call	
000118:0x001f4da8:	rts
AutoHeightSpacer::OnChildRemove()
000122:0x001f4db0:	cmpm	w, m_root
000122:0x001f4dc0:	bne	0x1f4dd8
000124:0x001f4dc8:	call	
000127:0x001f4dd8:	imove	#return, 0x000000
000127:0x001f4de8:	rts
000127:0x001f4df0:	rts
SpacerBase::OnWidgetScriptInit()
//scripts/3_Game/gui\spacers\spacerbase.c
000010:0x001f4e50:	movem	m_root, w
000011:0x001f4e60:	imove	m_count, 0x000000
000013:0x001f4e70:	movefm	[0xd31345a8], m_root
000013:0x001f4e80:	ncalli	Widget.GetChildren()
000013:0x001f4e88:	movetm	child, #return
000014:0x001f4e98:	cmpcm	child, null
000014:0x001f4ea8:	beq	0x1f4f18
000016:0x001f4eb0:	move	@m00, m_count
000016:0x001f4ec0:	inc	m_count
000017:0x001f4ec8:	imove	@m01, 0x00003c
000017:0x001f4ed8:	move	@m00, @m01
000017:0x001f4ee8:	ncalli	Widget.SetFlags(@m00, false)
000018:0x001f4ef8:	ncalli	Widget.GetSibling()
000018:0x001f4f00:	movetm	child, #return
000018:0x001f4f10:	jump	0x1f4e98
000021:0x001f4f18:	movefm	[0xd31345a8], m_root
000021:0x001f4f28:	ncalli	Widget.SetHandler(this)
000021:0x001f4f38:	release	child
000021:0x001f4f40:	rts
SpacerBase::OnUpdate()
000027:0x001f4f48:	cmpm	w, m_root
000027:0x001f4f58:	bne	0x1f4f70
000027:0x001f4f60:	call	
000028:0x001f4f70:	imove	#return, 0x000000
000028:0x001f4f80:	rts
000028:0x001f4f88:	rts
SpacerBase::OnChildAdd()
000034:0x001f4f90:	move	@m00, m_count
000034:0x001f4fa0:	inc	m_count
000035:0x001f4fa8:	imove	@m01, 0x00003c
000035:0x001f4fb8:	move	@m00, @m01
000035:0x001f4fc8:	ncalli	Widget.SetFlags(@m00, false)
000036:0x001f4fd8:	imove	#return, 0x000000
000036:0x001f4fe8:	rts
000036:0x001f4ff0:	rts
SpacerBase::OnChildRemove()
000042:0x001f4ff8:	move	@m00, m_count
000042:0x001f5008:	dec	m_count
000043:0x001f5010:	imove	#return, 0x000000
000043:0x001f5020:	rts
000043:0x001f5028:	rts
SpacerBase::GetChildIndex()
000049:0x001f5080:	movefm	[0xd31345a8], m_root
000049:0x001f5090:	ncalli	Widget.GetChildren()
000049:0x001f5098:	movetm	child, #return
000051:0x001f50a8:	imove	index, 0x000000
000052:0x001f50b8:	cmpcm	child, null
000052:0x001f50c8:	beq	0x1f5140
000054:0x001f50d0:	cmpm	child, w
000054:0x001f50e0:	bne	0x1f5108
000054:0x001f50e8:	move	#return, index
000054:0x001f50f8:	release	child
000054:0x001f5100:	rts
000056:0x001f5108:	move	@m00, index
000056:0x001f5118:	inc	index
000057:0x001f5120:	ncalli	Widget.GetSibling()
000057:0x001f5128:	movetm	child, #return
000057:0x001f5138:	jump	0x1f50b8
000060:0x001f5140:	imove	#return, 0xffffffff
000060:0x001f5150:	release	child
000060:0x001f5158:	rts
000060:0x001f5160:	release	child
000060:0x001f5168:	rts
SpacerBase::UpdateLayout()
000066:0x001f5210:	cmpi	m_count, _i0
000066:0x001f5220:	bne	0x1f5230
000066:0x001f5228:	rts
000070:0x001f5230:	movefm	[0xd31345a8], m_root
000070:0x001f5240:	icall	
000072:0x001f5250:	movefm	[0xd31345a8], m_root
000072:0x001f5260:	ncalli	Widget.GetChildren()
000072:0x001f5268:	movetm	child, #return
000074:0x001f5278:	imove	index, 0x000000
000075:0x001f5288:	cmpcm	child, null
000075:0x001f5298:	beq	0x1f52f8
000077:0x001f52a0:	call	
000078:0x001f52c0:	move	@m00, index
000078:0x001f52d0:	inc	index
000079:0x001f52d8:	ncalli	Widget.GetSibling()
000079:0x001f52e0:	movetm	child, #return
000079:0x001f52f0:	jump	0x1f5288
000079:0x001f52f8:	release	child
000079:0x001f5300:	rts
PPERequestParamDataBase::PPERequestParamDataBase()
//scripts/3_Game/ppemanager\pperequestdata.c
000018:0x001f5308:	move	m_RequesterIDX, requester_idx
000019:0x001f5318:	move	m_MaterialID, mat_id
000020:0x001f5328:	move	m_ParameterID, param_id
000021:0x001f5338:	move	m_VariableType, data_type
000022:0x001f5348:	move	m_Priority, priority
000023:0x001f5358:	move	m_InteractionMask, mask
000024:0x001f5368:	imove	m_UpdatingDataValues, 0x000000
000025:0x001f5378:	imove	m_SettingDefaultValues, 0x000000
000026:0x001f5388:	imove	m_IsActive, 0x000000
000027:0x001f5398:	call	
000027:0x001f53a8:	rts
PPERequestParamDataBase::SetUpdatingDataValues()
000036:0x001f53b0:	move	m_UpdatingDataValues, state
000036:0x001f53c0:	rts
PPERequestParamDataBase::GetUpdatingDataValues()
000041:0x001f53c8:	move	#return, m_UpdatingDataValues
000041:0x001f53d8:	rts
000041:0x001f53e0:	rts
PPERequestParamDataBase::SetDataActive()
000046:0x001f53e8:	move	m_IsActive, state
000046:0x001f53f8:	rts
PPERequestParamDataBase::IsDataActive()
000051:0x001f5400:	move	#return, m_IsActive
000051:0x001f5410:	rts
000051:0x001f5418:	rts
PPERequestParamDataBase::SetSettingDefaultValues()
000056:0x001f5420:	move	m_SettingDefaultValues, state
000056:0x001f5430:	rts
PPERequestParamDataBase::IsSettingDefaultValues()
000061:0x001f5438:	move	#return, m_SettingDefaultValues
000061:0x001f5448:	rts
000061:0x001f5450:	rts
PPERequestParamDataBase::GetRequesterIDX()
000066:0x001f5458:	move	#return, m_RequesterIDX
000066:0x001f5468:	rts
000066:0x001f5470:	rts
PPERequestParamDataBase::GetMaterialID()
000071:0x001f5478:	move	#return, m_MaterialID
000071:0x001f5488:	rts
000071:0x001f5490:	rts
PPERequestParamDataBase::GetParameterID()
000076:0x001f5498:	move	#return, m_ParameterID
000076:0x001f54a8:	rts
000076:0x001f54b0:	rts
PPERequestParamDataBase::GetVarType()
000081:0x001f54b8:	move	#return, m_VariableType
000081:0x001f54c8:	rts
000081:0x001f54d0:	rts
PPERequestParamDataBase::SetInteractionMask()
000086:0x001f54d8:	move	m_InteractionMask, mask
000086:0x001f54e8:	rts
PPERequestParamDataBase::GetInteractionMask()
000091:0x001f54f0:	move	#return, m_InteractionMask
000091:0x001f5500:	rts
000091:0x001f5508:	rts
PPERequestParamDataBase::SetPriorityLayer()
000096:0x001f5510:	move	m_Priority, priority
000096:0x001f5520:	rts
PPERequestParamDataBase::GetPriorityLayer()
000101:0x001f5528:	move	#return, m_Priority
000101:0x001f5538:	rts
000101:0x001f5540:	rts
PPERequestParamDataBool::PPERequestParamDataBool()
000113:0x001f5548:	imove	m_BoolCurrent, 0x000000
000114:0x001f5558:	imove	m_BoolLast, 0x000000
000115:0x001f5568:	imove	m_VariableType, 0x000001
000115:0x001f5578:	rts
PPERequestParamDataInt::PPERequestParamDataInt()
000127:0x001f5580:	imove	m_IntCurrent, 0xffffffff
000128:0x001f5590:	imove	m_IntLast, 0xffffffff
000129:0x001f55a0:	imove	m_VariableType, 0x000002
000129:0x001f55b0:	rts
PPERequestParamDataFloat::PPERequestParamDataFloat()
000144:0x001f55b8:	imove	m_VariableType, 0x000004
000144:0x001f55c8:	rts
PPERequestParamDataFloat::InitValues()
000149:0x001f55d0:	imove	m_FloatTarget, -340282346638528859811704183484516925440.00000
000150:0x001f55e0:	imove	m_FloatCurrent, -340282346638528859811704183484516925440.00000
000151:0x001f55f0:	imove	m_FloatLast, -340282346638528859811704183484516925440.00000
000152:0x001f5600:	imove	m_FloatFormerTarget, -340282346638528859811704183484516925440.00000
000153:0x001f5610:	imove	m_FloatStart, -340282346638528859811704183484516925440.00000
000153:0x001f5620:	rts
PPERequestParamDataColor::PPERequestParamDataColor()
000168:0x001f5628:	imove	m_VariableType, 0x000008
000168:0x001f5638:	rts
PPERequestParamDataColor::InitValues()
000173:0x001f5668:	new	m_ColorTarget, array<float>
000173:0x001f5688:	movefm	[0xd3156238], m_ColorTarget
000173:0x001f5698:	icall	
000173:0x001f56a8:	movefm	[0xd3156238], m_ColorTarget
000173:0x001f56b8:	icall	
000173:0x001f56c8:	movefm	[0xd3156238], m_ColorTarget
000173:0x001f56d8:	icall	
000173:0x001f56e8:	movefm	[0xd3156238], m_ColorTarget
000173:0x001f56f8:	icall	
000174:0x001f5708:	new	m_ColorCurrent, array<float>
000174:0x001f5728:	movefm	[0xd3156238], m_ColorCurrent
000174:0x001f5738:	icall	
000174:0x001f5748:	movefm	[0xd3156238], m_ColorCurrent
000174:0x001f5758:	icall	
000174:0x001f5768:	movefm	[0xd3156238], m_ColorCurrent
000174:0x001f5778:	icall	
000174:0x001f5788:	movefm	[0xd3156238], m_ColorCurrent
000174:0x001f5798:	icall	
000175:0x001f57a8:	new	m_ColorLast, array<float>
000175:0x001f57c8:	movefm	[0xd3156238], m_ColorLast
000175:0x001f57d8:	icall	
000175:0x001f57e8:	movefm	[0xd3156238], m_ColorLast
000175:0x001f57f8:	icall	
000175:0x001f5808:	movefm	[0xd3156238], m_ColorLast
000175:0x001f5818:	icall	
000175:0x001f5828:	movefm	[0xd3156238], m_ColorLast
000175:0x001f5838:	icall	
000176:0x001f5848:	new	m_ColorFormerTarget, array<float>
000176:0x001f5868:	movefm	[0xd3156238], m_ColorFormerTarget
000176:0x001f5878:	icall	
000176:0x001f5888:	movefm	[0xd3156238], m_ColorFormerTarget
000176:0x001f5898:	icall	
000176:0x001f58a8:	movefm	[0xd3156238], m_ColorFormerTarget
000176:0x001f58b8:	icall	
000176:0x001f58c8:	movefm	[0xd3156238], m_ColorFormerTarget
000176:0x001f58d8:	icall	
000177:0x001f58e8:	new	m_ColorStart, array<float>
000177:0x001f5908:	movefm	[0xd3156238], m_ColorStart
000177:0x001f5918:	icall	
000177:0x001f5928:	movefm	[0xd3156238], m_ColorStart
000177:0x001f5938:	icall	
000177:0x001f5948:	movefm	[0xd3156238], m_ColorStart
000177:0x001f5958:	icall	
000177:0x001f5968:	movefm	[0xd3156238], m_ColorStart
000177:0x001f5978:	icall	
000177:0x001f5988:	rts
ComponentAnimalBleeding::InflictWoundDamage()
//scripts/3_Game/tools\component\componentanimalbleeding.c
000023:0x001f5aa0:	cmps	ammo, _s'MeleeWolf'
000023:0x001f5ab0:	bne	0x1f5af0
000025:0x001f5ab8:	citf	[0xb5b696d8], _i0
000025:0x001f5ac8:	movefm	[0xb5b25dc0], m_ThisEntityAI
000025:0x001f5ad8:	ncalli	EntityAI.SetHealth(_s'', _s'', [0xb5b696d8])
000028:0x001f5af0:	cmps	zone_name, _s''
000028:0x001f5b00:	bne	0x1f5b10
000029:0x001f5b08:	rts
000031:0x001f5b10:	ncalli	TotalDamageResult.GetDamage(zone_name, _s'Health')
000031:0x001f5b20:	move	health_damage_inflicted, #return
000033:0x001f5b30:	move	wound_healt_damage, health_damage_inflicted
000036:0x001f5b40:	movefm	[0xb5b25dc0], m_ThisEntityAI
000036:0x001f5b50:	ncalli	EntityAI.DecreaseHealth(_s'', _s'Health', wound_healt_damage)
000039:0x001f5b68:	cmps	zone_name, _s''
000039:0x001f5b78:	beq	0x1f5ba8
000041:0x001f5b80:	movefm	[0xb5b25dc0], m_ThisEntityAI
000041:0x001f5b90:	ncalli	EntityAI.DecreaseHealth(zone_name, _s'Health', wound_healt_damage)
000041:0x001f5ba8:	rts
ComponentAnimalBleeding::CreateWound()
000054:0x001f5d48:	call	
000057:0x001f5d60:	citf	can_bleed, false
000059:0x001f5d70:	imove	bleed_treshold, 0.00000
000061:0x001f5d80:	imove	chance, -1.00000
000068:0x001f5d90:	cmpf	can_bleed, _f0.000000
000068:0x001f5da0:	beq	0x1f5e78
000068:0x001f5da8:	cmpf	chance, bleed_treshold
000068:0x001f5db8:	bgt	0x1f5e78
000070:0x001f5dc0:	new	m_BleedTimer, Timer
000071:0x001f5de8:	call	
000071:0x001f5df8:	move	wound_intensity, #return
000073:0x001f5e08:	new	@c00, Param1<float>
000073:0x001f5e30:	pushc	@c00
000073:0x001f5e38:	movefm	[0xb5b3c700], m_BleedTimer
000073:0x001f5e48:	call	
000073:0x001f5e68:	popc	@c00
000073:0x001f5e70:	release	@c00
000073:0x001f5e78:	rts
ComponentAnimalBleeding::Bleed()
000085:0x001f5f68:	movefm	[0xb5b25dc0], m_ThisEntityAI
000085:0x001f5f78:	call	
000085:0x001f5f88:	cmpi	#return, _i0
000085:0x001f5f98:	beq	0x1f6060
000087:0x001f5fa0:	mulf	bleeding_intensity, BASE_BLEED_RATE, wound_intensity
000089:0x001f5fb0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000089:0x001f5fc0:	ncalli	EntityAI.GetHealth(_s'', _s'Blood')
000089:0x001f5fd0:	move	global_blood_lvl, #return
000091:0x001f5fe0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000091:0x001f5ff0:	ncalli	EntityAI.DecreaseHealth(_s'', _s'Blood', bleeding_intensity)
000093:0x001f6008:	cmpf	global_blood_lvl, PASS_OUT_AMOUT
000093:0x001f6018:	bge	0x1f6058
000095:0x001f6020:	citf	[0xb5b696d8], _i0
000095:0x001f6030:	movefm	[0xb5b25dc0], m_ThisEntityAI
000095:0x001f6040:	ncalli	EntityAI.SetHealth(_s'', _s'', [0xb5b696d8])
000095:0x001f6058:	jump	0x1f6080
000106:0x001f6060:	movefm	[0xb5b3c700], m_BleedTimer
000106:0x001f6070:	call	
000106:0x001f6080:	rts
ComponentAnimalBleeding::GetWoundIntensity()
000114:0x001f60b0:	mulf	#return, bleed_treshold, _f2.000000
000114:0x001f60c0:	rts
000114:0x001f60c8:	rts
PMTCreationAndCleanup::PMTCreationAndCleanup()
//scripts/3_Game/particles\tests\pmtcreationandcleanup.c
000016:0x001f6148:	imove	m_bTestEventsPassed, 0x000000
000019:0x001f6158:	call	
000020:0x001f6168:	call	
000021:0x001f6178:	call	
000021:0x001f6188:	rts
PMTCreationAndCleanup::TestInvalidSize()
000030:0x001f6258:	call	ParticleLog(_s'Expecting VME: Invalid size. (0)', this, _s'TestInvalidSize', _c0)
000031:0x001f6278:	call	
000031:0x001f6290:	release	#return
000033:0x001f6298:	call	ParticleLog(_s'Expecting VME: Invalid size. (-3)', this, _s'TestInvalidSize', _c0)
000034:0x001f62b8:	call	
000034:0x001f62d0:	release	#return
000036:0x001f62d8:	call	
000036:0x001f62e8:	movem	#return, #return
000036:0x001f62f8:	release	#return
000036:0x001f6300:	rts
000036:0x001f6308:	rts
PMTCreationAndCleanup::TestCCSB()
000043:0x001f6360:	call	
000043:0x001f6378:	movem	#return, #return
000043:0x001f6388:	release	#return
000043:0x001f6390:	rts
000043:0x001f6398:	rts
PMTCreationAndCleanup::TestEvents()
000050:0x001f64a8:	new	@c00, ParticleManagerSettings
000050:0x001f64d0:	pushc	@c00
000050:0x001f64d8:	new	pm, ParticleManager
000050:0x001f6500:	popc	@c00
000050:0x001f6508:	release	@c00
000051:0x001f6510:	ncalli	ParticleManager.IsFinishedAllocating()
000051:0x001f6518:	cmpi	#return, _i0
000051:0x001f6528:	beq	0x1f6548
000051:0x001f6530:	imove	@m00, 0x000000
000051:0x001f6540:	jump	0x1f6558
000051:0x001f6548:	imove	@m00, 0x000001
000051:0x001f6558:	move	success, @m00
000052:0x001f6568:	call	
000052:0x001f6578:	cmpi	#return, _i0
000052:0x001f6588:	beq	0x1f6650
000054:0x001f6590:	call	
000054:0x001f65a0:	movefm	@c00, #return
000054:0x001f65b0:	movefm	@c01, Event_OnAllocationEnd
000054:0x001f65c0:	icall	SetInstance([0xb5cf4458], this)
000054:0x001f65d0:	icall	
000054:0x001f65e0:	release	#return
000056:0x001f65e8:	call	
000056:0x001f65f8:	move	m_EventTestManagerID, #return
000057:0x001f6608:	call	
000059:0x001f6618:	call	
000059:0x001f6628:	movem	#return, #return
000059:0x001f6638:	release	pm
000059:0x001f6640:	release	#return
000059:0x001f6648:	rts
000062:0x001f6650:	call	
000062:0x001f6660:	movem	#return, #return
000062:0x001f6670:	release	pm
000062:0x001f6678:	release	#return
000062:0x001f6680:	rts
000062:0x001f6688:	release	pm
000062:0x001f6690:	rts
PMTCreationAndCleanup::TestOwnership()
000069:0x001f6830:	call	
000069:0x001f6840:	movem	pm, #return
000069:0x001f6850:	release	#return
000070:0x001f6858:	ncalli	ParticleManager.IsFinishedAllocating()
000070:0x001f6860:	move	success, #return
000071:0x001f6870:	call	
000071:0x001f6880:	cmpi	#return, _i0
000071:0x001f6890:	beq	0x1f6bb8
000073:0x001f6898:	call	
000073:0x001f68a8:	move	m_OwnershipTestManagerID, #return
000074:0x001f68b8:	new	dummy, OwnershipTestDummyClass
000076:0x001f68d8:	ncall	GetGame()
000076:0x001f68e0:	ncalli	CGame.GetPlayer()
000076:0x001f68e8:	ncalli	DayZPlayer.GetPosition()
000076:0x001f68f0:	movetm	parent, null
000076:0x001f6900:	movefm	owner, dummy
000076:0x001f6910:	new	pp, ParticleProperties
000077:0x001f6948:	call	GetParticleFullPath(EXPLOSION_LANDMINE)
000077:0x001f6958:	moves	particlePath, #return
000079:0x001f6968:	call	
000079:0x001f6980:	movefm	@c00, #return
000079:0x001f6990:	cmpc	@c00, null
000079:0x001f69a0:	beq	0x1f69c0
000079:0x001f69a8:	imove	@m00, 0x000001
000079:0x001f69b8:	jump	0x1f69d0
000079:0x001f69c0:	imove	@m00, 0x000000
000079:0x001f69d0:	call	
000079:0x001f69e0:	move	result, #return
000079:0x001f69f0:	release	#return
000080:0x001f69f8:	call	ParticleLog(_s'Expecting VME: All particles in pool are already used.', this, _s'TestOwnership', _c0)
000081:0x001f6a18:	call	
000081:0x001f6a30:	movefm	@c00, #return
000081:0x001f6a40:	cmpc	@c00, null
000081:0x001f6a50:	bne	0x1f6a70
000081:0x001f6a58:	imove	@m01, 0x000001
000081:0x001f6a68:	jump	0x1f6a80
000081:0x001f6a70:	imove	@m01, 0x000000
000081:0x001f6a80:	call	
000081:0x001f6a90:	move	@m00, #return
000081:0x001f6aa0:	andi	result, result, @m00
000081:0x001f6ab0:	release	#return
000082:0x001f6ab8:	delete	dummy
000083:0x001f6ac0:	call	
000083:0x001f6ad8:	movefm	@c00, #return
000083:0x001f6ae8:	cmpc	@c00, null
000083:0x001f6af8:	beq	0x1f6b18
000083:0x001f6b00:	imove	@m01, 0x000001
000083:0x001f6b10:	jump	0x1f6b28
000083:0x001f6b18:	imove	@m01, 0x000000
000083:0x001f6b28:	call	
000083:0x001f6b38:	move	@m00, #return
000083:0x001f6b48:	andi	result, result, @m00
000083:0x001f6b58:	release	#return
000085:0x001f6b60:	call	
000085:0x001f6b70:	movem	#return, #return
000085:0x001f6b80:	release	dummy
000085:0x001f6b88:	release	pp
000085:0x001f6b90:	release	pm
000085:0x001f6b98:	release	#return
000085:0x001f6ba0:	rts
000085:0x001f6ba8:	release	dummy
000085:0x001f6bb0:	release	pp
000088:0x001f6bb8:	call	
000088:0x001f6bc8:	movem	#return, #return
000088:0x001f6bd8:	release	pm
000088:0x001f6be0:	release	#return
000088:0x001f6be8:	rts
000088:0x001f6bf0:	release	pm
000088:0x001f6bf8:	rts
PMTCreationAndCleanup::CheckTestEvents()
000097:0x001f6c28:	move	id, m_EventTestManagerID
000097:0x001f6c38:	call	
000097:0x001f6c50:	movem	pm, pm
000097:0x001f6c60:	release	pm
000097:0x001f6c68:	cmpi	#return, _i0
000097:0x001f6c78:	beq	0x1f6d68
000099:0x001f6c80:	cmpcm	pm, null
000099:0x001f6c90:	beq	0x1f6d18
000101:0x001f6c98:	ncalli	ParticleManager.IsFinishedAllocating()
000101:0x001f6ca0:	cmpi	#return, _i0
000101:0x001f6cb0:	beq	0x1f6d10
000103:0x001f6cb8:	move	condition, m_bTestEventsPassed
000103:0x001f6cc8:	call	
000103:0x001f6cd8:	call	
000103:0x001f6ce8:	movem	#return, #return
000103:0x001f6cf8:	release	pm
000103:0x001f6d00:	release	#return
000103:0x001f6d08:	rts
000103:0x001f6d10:	jump	0x1f6d60
000108:0x001f6d18:	call	
000108:0x001f6d28:	call	
000108:0x001f6d38:	movem	#return, #return
000108:0x001f6d48:	release	pm
000108:0x001f6d50:	release	#return
000108:0x001f6d58:	rts
000108:0x001f6d60:	jump	0x1f6db0
000113:0x001f6d68:	call	
000113:0x001f6d78:	call	
000113:0x001f6d88:	movem	#return, #return
000113:0x001f6d98:	release	pm
000113:0x001f6da0:	release	#return
000113:0x001f6da8:	rts
000116:0x001f6db0:	call	
000116:0x001f6dc0:	movem	#return, #return
000116:0x001f6dd0:	release	pm
000116:0x001f6dd8:	release	#return
000116:0x001f6de0:	rts
000116:0x001f6de8:	release	pm
000116:0x001f6df0:	rts
PMTCreationAndCleanup::PassCheckEvents()
000124:0x001f6df8:	ncalli	ParticleManager.IsFinishedAllocating()
000124:0x001f6e00:	call	
000125:0x001f6e10:	imove	m_bTestEventsPassed, 0x000001
000125:0x001f6e20:	rts
PMTCreationAndCleanup::TestCreationSmallBlocking()
000134:0x001f6e78:	call	
000134:0x001f6e88:	movem	pm, #return
000134:0x001f6e98:	release	#return
000135:0x001f6ea0:	call	
000137:0x001f6eb0:	imove	success, 0x000001
000139:0x001f6ec0:	cmpi	enableAsserts, _i0
000139:0x001f6ed0:	beq	0x1f7080
000141:0x001f6ed8:	ncalli	ParticleManager.GetPoolSize()
000141:0x001f6ee0:	move	@m02, #return
000141:0x001f6ef0:	cmpi	@m02, size
000141:0x001f6f00:	bne	0x1f6f20
000141:0x001f6f08:	imove	@m01, 0x000001
000141:0x001f6f18:	jump	0x1f6f30
000141:0x001f6f20:	imove	@m01, 0x000000
000141:0x001f6f30:	call	
000141:0x001f6f40:	move	@m00, #return
000141:0x001f6f50:	andi	success, success, @m00
000142:0x001f6f60:	ncalli	ParticleManager.GetAllocatedCount()
000142:0x001f6f68:	move	@m02, #return
000142:0x001f6f78:	cmpi	@m02, size
000142:0x001f6f88:	bne	0x1f6fa8
000142:0x001f6f90:	imove	@m01, 0x000001
000142:0x001f6fa0:	jump	0x1f6fb8
000142:0x001f6fa8:	imove	@m01, 0x000000
000142:0x001f6fb8:	call	
000142:0x001f6fc8:	move	@m00, #return
000142:0x001f6fd8:	andi	success, success, @m00
000143:0x001f6fe8:	call	
000143:0x001f6ff8:	movefm	@c00, #return
000143:0x001f7008:	cmpc	@c00, null
000143:0x001f7018:	beq	0x1f7038
000143:0x001f7020:	imove	@m01, 0x000001
000143:0x001f7030:	jump	0x1f7048
000143:0x001f7038:	imove	@m01, 0x000000
000143:0x001f7048:	call	
000143:0x001f7058:	move	@m00, #return
000143:0x001f7068:	andi	success, success, @m00
000143:0x001f7078:	release	#return
000146:0x001f7080:	call	
000146:0x001f7090:	movem	#return, #return
000146:0x001f70a0:	release	pm
000146:0x001f70a8:	release	#return
000146:0x001f70b0:	rts
000146:0x001f70b8:	release	pm
000146:0x001f70c0:	rts
PMTCreationAndCleanup::TestCleanup()
000151:0x001f7268:	ncall	GetStaticActiveCount()
000151:0x001f7270:	move	pmTotal, #return
000152:0x001f7280:	ncall	GetStaticActiveCount()
000152:0x001f7288:	move	psTotal, #return
000154:0x001f7298:	call	
000156:0x001f72a8:	call	
000156:0x001f72b8:	movem	res, #return
000156:0x001f72c8:	release	#return
000158:0x001f72d0:	ncall	GetGame()
000158:0x001f72d8:	movec	@c00, #return
000158:0x001f72e8:	movec	@c01, GameScript
000158:0x001f72f8:	icall	
000160:0x001f7310:	ncall	GetStaticActiveCount()
000160:0x001f7318:	move	pmTotalPost, #return
000161:0x001f7328:	ncall	GetStaticActiveCount()
000161:0x001f7330:	move	psTotalPost, #return
000163:0x001f7340:	call	
000165:0x001f7350:	cmpi	pmTotal, pmTotalPost
000165:0x001f7360:	bne	0x1f7380
000165:0x001f7368:	imove	@m00, 0x000001
000165:0x001f7378:	jump	0x1f7390
000165:0x001f7380:	imove	@m00, 0x000000
000165:0x001f7390:	call	
000165:0x001f73a0:	move	success, #return
000166:0x001f73b0:	cmpi	psTotal, psTotalPost
000166:0x001f73c0:	bne	0x1f73e0
000166:0x001f73c8:	imove	@m01, 0x000001
000166:0x001f73d8:	jump	0x1f73f0
000166:0x001f73e0:	imove	@m01, 0x000000
000166:0x001f73f0:	call	
000166:0x001f7400:	move	@m00, #return
000166:0x001f7410:	andi	success, success, @m00
000168:0x001f7420:	call	
000168:0x001f7430:	call	
000168:0x001f7440:	movem	#return, #return
000168:0x001f7450:	release	res
000168:0x001f7458:	release	#return
000168:0x001f7460:	release	#return
000168:0x001f7468:	rts
000168:0x001f7470:	release	res
000168:0x001f7478:	rts
PMTCreationAndCleanup::TestMultiCreation()
000173:0x001f74d0:	call	
000173:0x001f74e0:	movem	res, #return
000173:0x001f74f0:	release	#return
000174:0x001f74f8:	imove	i, 0x000000
000174:0x001f7508:	jump	0x1f7518
000174:0x001f7510:	inc	i
000174:0x001f7518:	cmpi	i, instances
000174:0x001f7528:	bge	0x1f7570
000176:0x001f7530:	call	
000176:0x001f7548:	call	
000176:0x001f7558:	release	#return
000176:0x001f7560:	release	#return
000176:0x001f7568:	jump	0x1f7510
000178:0x001f7570:	movem	#return, res
000178:0x001f7580:	release	res
000178:0x001f7588:	rts
000178:0x001f7590:	release	res
000178:0x001f7598:	rts
PPEFilmGrain::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppefilmgrain.c
000026:0x001f75a0:	imove	#return, 0x000008
000026:0x001f75b0:	rts
000026:0x001f75b8:	rts
PPEFilmGrain::GetDefaultMaterialPath()
000031:0x001f75e8:	moves	#return, _s'Graphics/Materials/postprocess/filmgrainNV'
000031:0x001f75f8:	rts
000031:0x001f7600:	rts
PPEFilmGrain::RegisterMaterialParameters()
000036:0x001f7838:	call	
000037:0x001f7858:	call	
000038:0x001f7878:	call	
000039:0x001f7898:	call	
000040:0x001f78b8:	call	
000041:0x001f78d8:	call	
000042:0x001f78f0:	call	
000043:0x001f7908:	call	
000044:0x001f7920:	call	
000044:0x001f7940:	rts
ConnectErrorScriptModule::ConnectErrorScriptModule()
//scripts/3_Game/global\errormodulehandler\connecterrorscriptmodule.c
000014:0x001f7980:	ncalli	ConnectErrorScriptModule.SetCategory(_i3)
000014:0x001f7990:	rts
ConnectErrorScriptModule::InitOptionalVariables()
000019:0x001f79c0:	call	
000021:0x001f79d0:	moves	m_Header, _s'#server_browser_connecting_failed'
000023:0x001f79e0:	new	m_UIHandler, ConnectErrorScriptModuleUI
000023:0x001f7a00:	rts
ConnectErrorScriptModule::FillErrorDataMap()
000029:0x001f7a80:	call	
000031:0x001f7a90:	call	
000032:0x001f7ab8:	call	
000032:0x001f7ae0:	rts
ConnectErrorScriptModule::OnEvent()
000037:0x001f7b10:	movea	#switch, eventTypeId
000037:0x001f7b20:	movea	@m00, MPSessionPlayerReadyEventTypeID
000037:0x001f7b30:	cmpc	@m00, #switch
000037:0x001f7b40:	bne	0x1f7b78
000041:0x001f7b48:	ncalli	DayZGame.GetUIManager()
000041:0x001f7b50:	move	[0xb5c1ac28], m_LastErrorThrown
000041:0x001f7b60:	ncalli	UIManager.CloseSpecificDialog([0xb5c1ac28])
000043:0x001f7b70:	jump	0x1f7b80
000046:0x001f7b78:	jump	0x1f7b80
000046:0x001f7b80:	rts
ConnectErrorScriptModuleUI::OnModalResult()
000055:0x001f7c28:	call	
000057:0x001f7c48:	icall	GetCodeFromError(code)
000057:0x001f7c58:	move	error, #return
000058:0x001f7c68:	move	#switch, error
000058:0x001f7c78:	imove	@m00, 0x000001
000058:0x001f7c88:	cmpi	@m00, #switch
000058:0x001f7c98:	bne	0x1f7d68
000062:0x001f7ca0:	move	#switch, result
000062:0x001f7cb0:	imove	@m00, 0x000002
000062:0x001f7cc0:	cmpi	@m00, #switch
000062:0x001f7cd0:	bne	0x1f7d10
000065:0x001f7cd8:	ncalli	DayZGame.DisconnectSessionForce()
000066:0x001f7ce0:	call	
000067:0x001f7cf0:	call	LoadMPPrivilege()
000068:0x001f7d00:	jump	0x1f7d60
000068:0x001f7d08:	jump	0x1f7d38
000068:0x001f7d10:	imove	@m00, 0x000004
000068:0x001f7d20:	cmpi	@m00, #switch
000068:0x001f7d30:	bne	0x1f7d58
000070:0x001f7d38:	ncalli	DayZGame.DisconnectSessionForce()
000071:0x001f7d40:	call	
000072:0x001f7d50:	jump	0x1f7d60
000075:0x001f7d58:	jump	0x1f7d60
000077:0x001f7d60:	jump	0x1f7d70
000081:0x001f7d68:	jump	0x1f7d70
000084:0x001f7d70:	imove	#return, 0x000001
000084:0x001f7d80:	rts
000084:0x001f7d88:	rts
Hit_Grass::Hit_Grass()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_grass.c
000005:0x001f7db8:	call	
000006:0x001f7dc8:	call	
000007:0x001f7dd8:	call	
000009:0x001f7de8:	imove	m_AngledEnter, 0.60000
000009:0x001f7df8:	rts
OnlineServices::Init()
//scripts/3_Game/client\onlineservices.c
000049:0x001f7e00:	call	GetClientServices()
000049:0x001f7e10:	rts
OnlineServices::IsInitialized()
000054:0x001f7e18:	cmpcm	m_ClientServices, null
000054:0x001f7e28:	beq	0x1f7e48
000054:0x001f7e30:	imove	#return, 0x000001
000054:0x001f7e40:	jump	0x1f7e58
000054:0x001f7e48:	imove	#return, 0x000000
000054:0x001f7e58:	rts
000054:0x001f7e60:	rts
OnlineServices::GetClientServices()
000059:0x001f7f98:	ncall	GetGame()
000059:0x001f7fa0:	ncalli	CGame.GetUserManager()
000059:0x001f7fa8:	movetm	user_manager, #return
000060:0x001f7fb8:	cmpcm	user_manager, null
000060:0x001f7fc8:	beq	0x1f80c8
000062:0x001f7fd0:	ncalli	BiosUserManager.GetSelectedUser()
000062:0x001f7fd8:	movetm	selected_user, #return
000063:0x001f7fe8:	cmpcm	selected_user, null
000063:0x001f7ff8:	beq	0x1f8018
000065:0x001f8000:	ncalli	BiosUser.GetClientServices()
000065:0x001f8008:	movetm	m_ClientServices, #return
000068:0x001f8018:	new	user_list, array<@BiosUser>
000069:0x001f8038:	movefm	[0xb5bba868], user_list
000069:0x001f8048:	ncalli	BiosUserManager.GetUserList([0xb5bba868])
000070:0x001f8058:	ncalli	array<@BiosUser>.Count()
000070:0x001f8060:	move	@m00, #return
000070:0x001f8070:	cmpi	@m00, _i0
000070:0x001f8080:	ble	0x1f80b0
000072:0x001f8088:	icall	
000072:0x001f8098:	ncalli	BiosUser.GetClientServices()
000072:0x001f80a0:	movetm	m_ClientServices, #return
000072:0x001f80b0:	release	selected_user
000072:0x001f80b8:	release	user_list
000072:0x001f80c0:	jump	0x1f80d8
000078:0x001f80c8:	call	Error(_s'BiosClientServices Error: Usermanager does not exist.')
000078:0x001f80d8:	release	user_manager
000078:0x001f80e0:	rts
OnlineServices::ErrorCaught()
000084:0x001f8190:	move	#switch, error
000084:0x001f81a0:	imove	@m00, 0x000000
000084:0x001f81b0:	cmpi	@m00, #switch
000084:0x001f81c0:	bne	0x1f81e0
000088:0x001f81c8:	imove	#return, 0x000000
000088:0x001f81d8:	rts
000092:0x001f81e0:	icall	GetClientMessage(_i5, error, _s'')
000092:0x001f81f8:	icall	Format(_s'BiosClientServices Error: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000092:0x001f8228:	call	LogErrorAndTrace(#return)
000093:0x001f8238:	imove	#return, 0x000001
000093:0x001f8248:	rts
000093:0x001f8250:	rts
OnlineServices::LoadServers()
000098:0x001f8280:	call	GetClientServices()
000099:0x001f8290:	cmpcm	m_ClientServices, null
000099:0x001f82a0:	beq	0x1f82d8
000101:0x001f82a8:	ncalli	BiosClientServices.GetLobbyService()
000101:0x001f82b0:	movefm	[0xb5c14008], inputValues
000101:0x001f82c0:	ncalli	BiosLobbyService.GetServers([0xb5c14008])
000101:0x001f82d0:	jump	0x1f82e8
000105:0x001f82d8:	call	LogErrorAndTrace(_s'BiosClientServices Error: Service reference does not exist.')
000105:0x001f82e8:	rts
OnlineServices::GetFavoriteServers()
000111:0x001f82f0:	ncalli	BiosClientServices.GetLobbyService()
000111:0x001f82f8:	movefm	[0xb5c14170], favServers
000111:0x001f8308:	ncalli	BiosLobbyService.GetFavoriteServers([0xb5c14170])
000111:0x001f8318:	rts
OnlineServices::GetCachedFavServerInfo()
000116:0x001f8320:	ncalli	BiosClientServices.GetLobbyService()
000116:0x001f8328:	movefm	[0xb5c14198], favServersInfoCache
000116:0x001f8338:	ncalli	BiosLobbyService.GetCachedFavoriteServerInfo([0xb5c14198])
000116:0x001f8348:	rts
OnlineServices::SetServerFavorited()
000121:0x001f8350:	call	GetClientServices()
000122:0x001f8360:	cmpcm	m_ClientServices, null
000122:0x001f8370:	beq	0x1f83e0
000124:0x001f8378:	cmpi	is_favorited, _i0
000124:0x001f8388:	beq	0x1f83b8
000126:0x001f8390:	ncalli	BiosClientServices.GetLobbyService()
000126:0x001f8398:	ncalli	BiosLobbyService.AddServerFavorite(ipAddress, port, steamQueryPort)
000126:0x001f83b0:	jump	0x1f83d8
000130:0x001f83b8:	ncalli	BiosClientServices.GetLobbyService()
000130:0x001f83c0:	ncalli	BiosLobbyService.RemoveServerFavorite(ipAddress, port, steamQueryPort)
000130:0x001f83d8:	jump	0x1f83f0
000135:0x001f83e0:	call	LogErrorAndTrace(_s'BiosClientServices Error: Service reference does not exist.')
000135:0x001f83f0:	rts
OnlineServices::GetCurrentServerInfo()
000141:0x001f8448:	call	GetClientServices()
000143:0x001f8458:	moves	m_CurrentServerIP, ip
000144:0x001f8468:	move	m_CurrentServerPort, port
000146:0x001f8478:	new	inputValues, GetServersInput
000148:0x001f8498:	call	
000149:0x001f84a8:	call	
000150:0x001f84b8:	movefm	@c00, inputValues
000150:0x001f84c8:	imove	m_Page, 0x000000
000151:0x001f84d8:	movefm	@c00, inputValues
000151:0x001f84e8:	imove	m_RowsPerPage, 0x00000a
000152:0x001f84f8:	movefm	@c00, inputValues
000152:0x001f8508:	imove	m_Platform, 0x000001
000161:0x001f8518:	cmpcm	m_ClientServices, null
000161:0x001f8528:	beq	0x1f8558
000163:0x001f8530:	ncalli	BiosClientServices.GetLobbyService()
000163:0x001f8538:	movefm	[0xb5c14008], inputValues
000163:0x001f8548:	ncalli	BiosLobbyService.GetServers([0xb5c14008])
000163:0x001f8558:	release	inputValues
000163:0x001f8560:	rts
OnlineServices::GetCurrentServerInfo#3542()
000169:0x001f8568:	cmpcm	m_CurrentServerInfo, null
000169:0x001f8578:	beq	0x1f85a0
000170:0x001f8580:	movem	#return, m_CurrentServerInfo
000170:0x001f8590:	rts
000170:0x001f8598:	jump	0x1f85c0
000172:0x001f85a0:	icall	
000172:0x001f85a8:	movetm	#return, #return
000172:0x001f85b8:	rts
000172:0x001f85c0:	rts
OnlineServices::ClearCurrentServerInfo()
000177:0x001f85c8:	movetm	m_CurrentServerInfo, null
000178:0x001f85d8:	moves	m_CurrentServerIP, _s''
000179:0x001f85e8:	imove	m_CurrentServerPort, 0x000000
000179:0x001f85f8:	rts
OnlineServices::SetInviteServerInfo()
000184:0x001f8600:	moves	m_InviteServerIP, ip
000185:0x001f8610:	move	m_InviteServerPort, port
000185:0x001f8620:	rts
OnlineServices::GetInviteServerInfo()
000190:0x001f8628:	moves	ip, m_InviteServerIP
000191:0x001f8638:	move	port, m_InviteServerPort
000191:0x001f8648:	moves	ip, ip
000191:0x001f8658:	move	port, port
000191:0x001f8668:	rts
OnlineServices::OnLoadServersAsync()
000196:0x001f8788:	call	ErrorCaught(error)
000196:0x001f8798:	cmpi	#return, _i0
000196:0x001f87a8:	bne	0x1f8940
000198:0x001f87b0:	cmps	m_CurrentServerIP, _s''
000198:0x001f87c0:	beq	0x1f8908
000198:0x001f87c8:	cmpi	m_CurrentServerPort, _i0
000198:0x001f87d8:	ble	0x1f8908
000200:0x001f87e0:	movefm	@c00, result_list
000200:0x001f87f0:	movem	#array, m_Results
000200:0x001f8800:	ncalli	array<@GetServersResultRow>.Count()
000200:0x001f8808:	move	#cnt, #return
000200:0x001f8818:	imove	#key, 0x000000
000200:0x001f8828:	jump	0x1f8838
000200:0x001f8830:	inc	#key
000200:0x001f8838:	cmpi	#key, #cnt
000200:0x001f8848:	bge	0x1f88f8
000200:0x001f8850:	icall	
000200:0x001f8860:	movetm	result, #return
000202:0x001f8870:	movefm	@c01, result
000202:0x001f8880:	cmps	m_HostIp, m_CurrentServerIP
000202:0x001f8890:	bne	0x1f88f0
000202:0x001f8898:	movefm	@c02, result
000202:0x001f88a8:	cmpi	m_HostPort, m_CurrentServerPort
000202:0x001f88b8:	bne	0x1f88f0
000204:0x001f88c0:	movem	m_CurrentServerInfo, result
000205:0x001f88d0:	moves	m_CurrentServerIP, _s''
000206:0x001f88e0:	imove	m_CurrentServerPort, 0x000000
000206:0x001f88f0:	jump	0x1f8830
000206:0x001f88f8:	release	#array
000206:0x001f8900:	release	result
000225:0x001f8908:	icall	
000225:0x001f8938:	jump	0x1f8970
000229:0x001f8940:	icall	
000229:0x001f8970:	rts
OnlineServices::LoadFriends()
000236:0x001f8978:	call	GetClientServices()
000237:0x001f8988:	cmpcm	m_ClientServices, null
000237:0x001f8998:	beq	0x1f89b8
000239:0x001f89a0:	ncalli	BiosClientServices.GetSocialService()
000239:0x001f89a8:	ncalli	BiosSocialService.GetFriendsAsync()
000239:0x001f89b0:	jump	0x1f89c8
000243:0x001f89b8:	call	LogErrorAndTrace(_s'BiosClientServices Error: Service reference does not exist.')
000243:0x001f89c8:	rts
OnlineServices::ShowUserProfile()
000249:0x001f89d0:	call	GetClientServices()
000250:0x001f89e0:	cmpcm	m_ClientServices, null
000250:0x001f89f0:	beq	0x1f8a18
000252:0x001f89f8:	ncalli	BiosClientServices.GetSocialService()
000252:0x001f8a00:	ncalli	BiosSocialService.ShowUserProfileAsync(uid)
000252:0x001f8a10:	jump	0x1f8a28
000256:0x001f8a18:	call	LogErrorAndTrace(_s'BiosClientServices Error: Service reference does not exist.')
000256:0x001f8a28:	rts
OnlineServices::OnUserProfileAsync()
000262:0x001f8a30:	call	ErrorCaught(error)
000262:0x001f8a40:	rts
OnlineServices::OnFriendsAsync()
000267:0x001f8cb0:	call	ErrorCaught(error)
000267:0x001f8cc0:	cmpi	#return, _i0
000267:0x001f8cd0:	bne	0x1f90c8
000269:0x001f8cd8:	icall	
000271:0x001f8d08:	new	friends_simple, array<string>
000272:0x001f8d28:	imove	i, 0x000000
000272:0x001f8d38:	jump	0x1f8d48
000272:0x001f8d40:	inc	i
000272:0x001f8d48:	ncalli	array<@BiosFriendInfo>.Count()
000272:0x001f8d50:	cmpi	i, #return
000272:0x001f8d60:	bge	0x1f8ec0
000274:0x001f8d68:	icall	
000274:0x001f8d78:	movec	@c00, #return
000274:0x001f8d88:	moves	uid, m_Uid
000275:0x001f8d98:	icall	
000275:0x001f8da8:	movetm	storedBfi, #return
000276:0x001f8db8:	icall	
000276:0x001f8dc8:	movetm	newBfi, #return
000278:0x001f8dd8:	cmpcm	storedBfi, null
000278:0x001f8de8:	beq	0x1f8e68
000280:0x001f8df0:	call	Compare(storedBfi, newBfi)
000280:0x001f8e08:	cmpi	#return, _i0
000280:0x001f8e18:	bne	0x1f8e40
000282:0x001f8e20:	movefm	@c00, newBfi
000282:0x001f8e30:	icall	
000284:0x001f8e40:	movefm	@c00, newBfi
000284:0x001f8e50:	icall	
000284:0x001f8e60:	jump	0x1f8ea8
000288:0x001f8e68:	movefm	@c00, newBfi
000288:0x001f8e78:	icall	
000289:0x001f8e88:	movefm	@c00, newBfi
000289:0x001f8e98:	icall	
000289:0x001f8ea8:	release	storedBfi
000289:0x001f8eb0:	release	newBfi
000289:0x001f8eb8:	jump	0x1f8d40
000293:0x001f8ec0:	cmpi	m_FirstFriendsLoad, _i0
000293:0x001f8ed0:	bne	0x1f90b0
000295:0x001f8ed8:	cmpcm	m_LastNewPlayers, null
000295:0x001f8ee8:	beq	0x1f90b0
000295:0x001f8ef0:	movefm	@c00, m_LastNewPlayers
000295:0x001f8f00:	movefm	[0xb5c2c6a8], m_PlayerList
000295:0x001f8f10:	ncalli	array<@SyncPlayer>.Count()
000295:0x001f8f18:	move	@m00, #return
000295:0x001f8f28:	cmpi	@m00, _i0
000295:0x001f8f38:	ble	0x1f90b0
000297:0x001f8f40:	movefm	@c01, m_LastNewPlayers
000297:0x001f8f50:	movem	#array, m_PlayerList
000297:0x001f8f60:	ncalli	array<@SyncPlayer>.Count()
000297:0x001f8f68:	move	#cnt, #return
000297:0x001f8f78:	imove	#key, 0x000000
000297:0x001f8f88:	jump	0x1f8f98
000297:0x001f8f90:	inc	#key
000297:0x001f8f98:	cmpi	#key, #cnt
000297:0x001f8fa8:	bge	0x1f9078
000297:0x001f8fb0:	icall	
000297:0x001f8fc0:	movetm	player, #return
000299:0x001f8fd0:	movefm	@c02, player
000299:0x001f8fe0:	icall	
000299:0x001f8ff0:	cmpi	#return, _i0
000299:0x001f9000:	beq	0x1f9070
000301:0x001f9008:	movefm	@c00, player
000301:0x001f9018:	adds	@s02, m_PlayerName, _s' '
000301:0x001f9028:	moves	@s01, @s02
000301:0x001f9038:	adds	@s01, @s01, _s'#ps4_invite_has_joined_your_session'
000301:0x001f9048:	moves	@s00, @s01
000301:0x001f9058:	call	AddNotification(FRIEND_CONNECTED, _f6.000000, @s00)
000301:0x001f9070:	jump	0x1f8f90
000301:0x001f9078:	release	#array
000301:0x001f9080:	release	player
000304:0x001f9088:	movefm	@c00, m_LastNewPlayers
000304:0x001f9098:	movefm	[0xb5c2c6a8], m_PlayerList
000304:0x001f90a8:	ncalli	array<@SyncPlayer>.Clear()
000307:0x001f90b0:	imove	m_FirstFriendsLoad, 0x000000
000307:0x001f90c0:	release	friends_simple
000307:0x001f90c8:	rts
OnlineServices::LoadPermissions()
000313:0x001f9158:	call	GetClientServices()
000314:0x001f9168:	cmpcm	m_ClientServices, null
000314:0x001f9178:	beq	0x1f9208
000316:0x001f9180:	new	perms, array<int>
000317:0x001f91a0:	icall	
000319:0x001f91b0:	ncalli	BiosClientServices.GetPrivacyService()
000319:0x001f91b8:	movefm	[0xb5bd2f18], player_list
000319:0x001f91c8:	movefm	[0xb5bd2f40], perms
000319:0x001f91d8:	ncalli	BiosPrivacyService.GetPermissionsAsync([0xb5bd2f18], [0xb5bd2f40])
000319:0x001f91e8:	call	ErrorCaught(#return)
000319:0x001f91f8:	release	perms
000319:0x001f9200:	jump	0x1f9218
000323:0x001f9208:	call	LogErrorAndTrace(_s'BiosClientServices Error: Service reference does not exist.')
000323:0x001f9218:	rts
OnlineServices::OnPermissionsAsync()
000329:0x001f93a0:	call	ErrorCaught(error)
000329:0x001f93b0:	cmpi	#return, _i0
000329:0x001f93c0:	bne	0x1f9638
000331:0x001f93c8:	new	new_list, array<@BiosPrivacyUidResult>
000333:0x001f93e8:	imove	i, 0x000000
000333:0x001f93f8:	jump	0x1f9418
000333:0x001f9400:	move	@m00, i
000333:0x001f9410:	inc	i
000333:0x001f9418:	ncalli	array<@BiosPrivacyUidResult>.Count()
000333:0x001f9420:	cmpi	i, #return
000333:0x001f9430:	bge	0x1f9600
000335:0x001f9438:	icall	
000335:0x001f9448:	movetm	result, #return
000336:0x001f9458:	movefm	@c00, result
000336:0x001f9468:	moves	uid, m_Uid
000337:0x001f9478:	icall	
000337:0x001f9488:	movetm	result_array, #return
000338:0x001f9498:	movefm	@c01, result
000338:0x001f94a8:	movem	result_array2, m_Results
000339:0x001f94b8:	cmpcm	result_array, null
000339:0x001f94c8:	beq	0x1f95a0
000339:0x001f94d0:	cmpcm	result_array2, null
000339:0x001f94e0:	beq	0x1f95a0
000341:0x001f94e8:	icall	
000341:0x001f94f8:	pushc	#return
000341:0x001f9500:	icall	
000341:0x001f9510:	movec	@c01, #return
000341:0x001f9520:	popc	#return
000341:0x001f9528:	call	Compare(#return, @c01)
000341:0x001f9540:	cmpi	#return, _i0
000341:0x001f9550:	bne	0x1f9598
000343:0x001f9558:	movefm	@c00, result
000343:0x001f9568:	icall	
000344:0x001f9578:	movefm	@c00, result_array2
000344:0x001f9588:	icall	
000344:0x001f9598:	jump	0x1f95e0
000349:0x001f95a0:	movefm	@c00, result_array2
000349:0x001f95b0:	icall	
000350:0x001f95c0:	movefm	@c00, result
000350:0x001f95d0:	icall	
000350:0x001f95e0:	release	result
000350:0x001f95e8:	release	result_array
000350:0x001f95f0:	release	result_array2
000350:0x001f95f8:	jump	0x1f9400
000353:0x001f9600:	icall	
000353:0x001f9630:	release	new_list
000353:0x001f9638:	rts
OnlineServices::IsPlayerMuted()
000359:0x001f9640:	icall	
000359:0x001f9650:	cmpi	#return, _i0
000359:0x001f9660:	beq	0x1f9690
000361:0x001f9668:	icall	
000361:0x001f9678:	move	#return, #return
000361:0x001f9688:	rts
000363:0x001f9690:	imove	#return, 0x000000
000363:0x001f96a0:	rts
000363:0x001f96a8:	rts
OnlineServices::MutePlayer()
000368:0x001f96d8:	icall	
000368:0x001f96e8:	cmpi	#return, _i0
000368:0x001f96f8:	beq	0x1f9718
000370:0x001f9700:	icall	
000370:0x001f9710:	jump	0x1f9728
000374:0x001f9718:	icall	
000378:0x001f9728:	new	ctx, ScriptInputUserData
000379:0x001f9748:	icall	
000380:0x001f9758:	icall	
000381:0x001f9768:	icall	
000382:0x001f9778:	ncalli	ScriptInputUserData.Send()
000384:0x001f9780:	imove	#return, 0x000001
000384:0x001f9790:	release	ctx
000384:0x001f9798:	rts
000384:0x001f97a0:	release	ctx
000384:0x001f97a8:	rts
OnlineServices::GetMuteList()
000389:0x001f97b0:	movem	#return, m_MuteList
000389:0x001f97c0:	rts
000389:0x001f97c8:	rts
OnlineServices::LoadMPPrivilege()
000425:0x001f97d0:	call	OnLoadMPPrivilege(_i0)
000425:0x001f97e0:	rts
OnlineServices::LoadVoicePrivilege()
000431:0x001f97e8:	call	GetClientServices()
000432:0x001f97f8:	cmpcm	m_ClientServices, null
000432:0x001f9808:	beq	0x1f9840
000434:0x001f9810:	ncalli	BiosClientServices.GetPrivacyService()
000434:0x001f9818:	ncalli	BiosPrivacyService.GetPrivilegeAsync(_i0, true)
000434:0x001f9828:	call	ErrorCaught(#return)
000434:0x001f9838:	jump	0x1f9850
000438:0x001f9840:	call	LogErrorAndTrace(_s'BiosClientServices Error: Service reference does not exist.')
000438:0x001f9850:	rts
OnlineServices::OnLoadMPPrivilege()
000444:0x001f9858:	call	ErrorCaught(err)
000444:0x001f9868:	cmpi	#return, _i0
000444:0x001f9878:	bne	0x1f9898
000446:0x001f9880:	call	
000446:0x001f9890:	jump	0x1f9908
000450:0x001f9898:	call	
000450:0x001f98a8:	move	@m00, #return
000450:0x001f98b8:	cmpi	@m00, MAIN_MENU
000450:0x001f98c8:	beq	0x1f98e8
000452:0x001f98d0:	call	
000452:0x001f98e0:	jump	0x1f9908
000456:0x001f98e8:	call	
000457:0x001f98f8:	call	
000457:0x001f9908:	rts
OnlineServices::OnLoadVoicePrivilege()
000464:0x001f9910:	call	
000464:0x001f9920:	move	@m00, #return
000464:0x001f9930:	cmpi	@m00, IN_GAME
000464:0x001f9940:	bne	0x1f9978
000469:0x001f9948:	ncall	GetGame()
000469:0x001f9950:	ncalli	CGame.GetWorld()
000469:0x001f9958:	call	ErrorCaught(err)
000469:0x001f9968:	ncalli	World.DisableTransmitVoN(#return)
000469:0x001f9978:	rts
OnlineServices::SetSessionHandle()
000475:0x001f9980:	call	GetClientServices()
000476:0x001f9990:	cmpcm	m_ClientServices, null
000476:0x001f99a0:	beq	0x1f99d0
000478:0x001f99a8:	ncalli	BiosClientServices.GetSessionService()
000478:0x001f99b0:	movec	@c00, #return
000478:0x001f99c0:	moves	m_CurrentHandle, handle
000478:0x001f99d0:	rts
OnlineServices::GetSessionHandle()
000484:0x001f99d8:	call	GetClientServices()
000485:0x001f99e8:	cmpcm	m_ClientServices, null
000485:0x001f99f8:	beq	0x1f9a30
000487:0x001f9a00:	ncalli	BiosClientServices.GetSessionService()
000487:0x001f9a08:	movec	@c00, #return
000487:0x001f9a18:	moves	#return, m_CurrentHandle
000487:0x001f9a28:	rts
000489:0x001f9a30:	moves	#return, _s''
000489:0x001f9a40:	rts
000489:0x001f9a48:	rts
OnlineServices::GetSession()
000494:0x001f9a50:	call	GetClientServices()
000495:0x001f9a60:	cmpcm	m_ClientServices, null
000495:0x001f9a70:	beq	0x1f9aa0
000497:0x001f9a78:	ncalli	BiosClientServices.GetSessionService()
000497:0x001f9a80:	call	GetSessionHandle()
000497:0x001f9a90:	call	
000497:0x001f9aa0:	rts
OnlineServices::GetBiosUser()
000503:0x001f9aa8:	movem	#return, m_BiosUser
000503:0x001f9ab8:	rts
000503:0x001f9ac0:	rts
OnlineServices::SetBiosUser()
000508:0x001f9ac8:	movem	m_BiosUser, user
000508:0x001f9ad8:	rts
OnlineServices::GetMultiplayState()
000514:0x001f9ae0:	move	#return, m_MultiplayState
000514:0x001f9af0:	rts
000514:0x001f9af8:	rts
OnlineServices::SetMultiplayState()
000519:0x001f9b58:	move	m_MultiplayState, state
000521:0x001f9b68:	call	GetSimplePlayerList()
000521:0x001f9b78:	cmpcm	#return, null
000521:0x001f9b88:	beq	0x1f9c18
000522:0x001f9b90:	cmpi	state, _i0
000522:0x001f9ba0:	beq	0x1f9c00
000522:0x001f9ba8:	call	GetSimplePlayerList()
000522:0x001f9bb8:	ncalli	array<string>.Count()
000522:0x001f9bc0:	move	@m00, #return
000522:0x001f9bd0:	cmpi	@m00, _i1
000522:0x001f9be0:	ble	0x1f9c00
000522:0x001f9be8:	imove	is_multiplay, 0x000001
000522:0x001f9bf8:	jump	0x1f9c10
000522:0x001f9c00:	imove	is_multiplay, 0x000000
000522:0x001f9c10:	release	#return
000522:0x001f9c18:	release	#return
000524:0x001f9c20:	cmpcm	m_ClientServices, null
000524:0x001f9c30:	beq	0x1f9c50
000525:0x001f9c38:	ncalli	BiosClientServices.GetSessionService()
000525:0x001f9c40:	ncalli	BiosSessionService.SetMultiplayState(is_multiplay)
000525:0x001f9c50:	rts
OnlineServices::EnterGameplaySession()
000532:0x001f9cd0:	ncall	GetGame()
000532:0x001f9cd8:	icall	
000532:0x001f9ce8:	cmpi	#return, _i0
000532:0x001f9cf8:	beq	0x1f9d50
000534:0x001f9d00:	call	GetClientServices()
000535:0x001f9d10:	cmpcm	m_ClientServices, null
000535:0x001f9d20:	beq	0x1f9d50
000537:0x001f9d28:	ncalli	BiosClientServices.GetSessionService()
000537:0x001f9d30:	ncalli	BiosSessionService.EnterGameplaySessionAsync(addr, port)
000538:0x001f9d40:	call	SetMultiplayState(true)
000538:0x001f9d50:	rts
OnlineServices::LeaveGameplaySession()
000545:0x001f9d58:	call	GetClientServices()
000546:0x001f9d68:	cmpcm	m_ClientServices, null
000546:0x001f9d78:	beq	0x1f9e68
000548:0x001f9d80:	cmpcm	m_CurrentServerInfo, null
000548:0x001f9d90:	beq	0x1f9df8
000549:0x001f9d98:	ncalli	BiosClientServices.GetSessionService()
000549:0x001f9da0:	movefm	@c00, m_CurrentServerInfo
000549:0x001f9db0:	moves	[0xb5c18a98], m_HostIp
000549:0x001f9dc0:	movefm	@c01, m_CurrentServerInfo
000549:0x001f9dd0:	move	[0xb5c18ac0], m_HostPort
000549:0x001f9de0:	ncalli	BiosSessionService.LeaveGameplaySessionAsync([0xb5c18a98], [0xb5c18ac0])
000549:0x001f9df0:	jump	0x1f9e28
000550:0x001f9df8:	cmps	m_CurrentServerIP, _s''
000550:0x001f9e08:	beq	0x1f9e28
000551:0x001f9e10:	ncalli	BiosClientServices.GetSessionService()
000551:0x001f9e18:	ncalli	BiosSessionService.LeaveGameplaySessionAsync(m_CurrentServerIP, m_CurrentServerPort)
000553:0x001f9e28:	call	SetMultiplayState(false)
000554:0x001f9e38:	imove	m_FirstFriendsLoad, 0x000001
000556:0x001f9e48:	cmpcm	m_FriendsList, null
000556:0x001f9e58:	beq	0x1f9e68
000557:0x001f9e60:	ncalli	map<string,@BiosFriendInfo>.Clear()
000557:0x001f9e68:	rts
OnlineServices::SetGameplayActivity()
000565:0x001f9ec0:	ncall	GetGame()
000565:0x001f9ec8:	icall	
000565:0x001f9ed8:	cmpi	#return, _i0
000565:0x001f9ee8:	beq	0x1f9f30
000567:0x001f9ef0:	call	GetClientServices()
000568:0x001f9f00:	cmpcm	m_ClientServices, null
000568:0x001f9f10:	beq	0x1f9f30
000570:0x001f9f18:	ncalli	BiosClientServices.GetSessionService()
000570:0x001f9f20:	ncalli	BiosSessionService.SetGameplayActivityAsync(addr, port)
000570:0x001f9f30:	rts
OnlineServices::SetPendingInviteList()
000579:0x001f9f88:	ncall	GetGame()
000579:0x001f9f90:	icall	
000579:0x001f9fa0:	cmpi	#return, _i0
000579:0x001f9fb0:	beq	0x1fa040
000581:0x001f9fb8:	call	GetClientServices()
000582:0x001f9fc8:	cmpcm	m_ClientServices, null
000582:0x001f9fd8:	beq	0x1fa038
000584:0x001f9fe0:	movem	m_PendingInvites, invitees
000585:0x001f9ff0:	ncalli	BiosClientServices.GetSessionService()
000585:0x001f9ff8:	call	GetPendingInviteList()
000585:0x001fa008:	movefm	[0xb5c18d78], #return
000585:0x001fa018:	ncalli	BiosSessionService.InviteToGameplaySessionAsync(addr, port, [0xb5c18d78])
000585:0x001fa030:	release	#return
000585:0x001fa038:	jump	0x1fa050
000590:0x001fa040:	movem	m_PendingInvites, invitees
000590:0x001fa050:	rts
OnlineServices::GetPendingInviteList()
000596:0x001fa1b0:	call	GetSimplePlayerList()
000596:0x001fa1c0:	movem	already_on_server, #return
000596:0x001fa1d0:	release	#return
000597:0x001fa1d8:	cmpcm	already_on_server, null
000597:0x001fa1e8:	beq	0x1fa320
000597:0x001fa1f0:	cmpcm	m_PendingInvites, null
000597:0x001fa200:	beq	0x1fa320
000599:0x001fa208:	new	new_to_server, array<string>
000600:0x001fa228:	ncalli	array<string>.Count()
000600:0x001fa230:	move	#cnt, #return
000600:0x001fa240:	imove	#key, 0x000000
000600:0x001fa250:	jump	0x1fa260
000600:0x001fa258:	inc	#key
000600:0x001fa260:	cmpi	#key, #cnt
000600:0x001fa270:	bge	0x1fa2e8
000600:0x001fa278:	icall	
000600:0x001fa288:	moves	invitee, #return
000602:0x001fa298:	icall	
000602:0x001fa2a8:	move	@m00, #return
000602:0x001fa2b8:	cmpi	@m00, _i-1
000602:0x001fa2c8:	bne	0x1fa2e0
000604:0x001fa2d0:	icall	
000604:0x001fa2e0:	jump	0x1fa258
000607:0x001fa2e8:	movem	#return, new_to_server
000607:0x001fa2f8:	release	new_to_server
000607:0x001fa300:	release	already_on_server
000607:0x001fa308:	rts
000607:0x001fa310:	release	new_to_server
000607:0x001fa318:	jump	0x1fa340
000611:0x001fa320:	movem	#return, m_PendingInvites
000611:0x001fa330:	release	already_on_server
000611:0x001fa338:	rts
000611:0x001fa340:	release	already_on_server
000611:0x001fa348:	rts
OnlineServices::ClearPendingInviteList()
000617:0x001fa350:	delete	m_PendingInvites
000617:0x001fa358:	rts
OnlineServices::AutoConnectToEmptyServer()
000623:0x001fa3b0:	call	GetClientServices()
000624:0x001fa3c0:	cmpcm	m_ClientServices, null
000624:0x001fa3d0:	beq	0x1fa460
000624:0x001fa3d8:	cmpi	m_AutoConnectTries, _i0
000624:0x001fa3e8:	bne	0x1fa460
000626:0x001fa3f0:	imove	m_AutoConnectTries, 0x000001
000627:0x001fa400:	new	input, GetFirstServerWithEmptySlotInput
000628:0x001fa420:	call	
000629:0x001fa430:	ncalli	BiosClientServices.GetLobbyService()
000629:0x001fa438:	movefm	[0xb5c14058], input
000629:0x001fa448:	ncalli	BiosLobbyService.GetFirstServerWithEmptySlot([0xb5c14058])
000629:0x001fa458:	release	input
000629:0x001fa460:	rts
OnlineServices::GetRandomFreeResult()
000636:0x001fa5b8:	new	results_free, array<@GetServersResultRow>
000638:0x001fa5d8:	cmpcm	results, null
000638:0x001fa5e8:	beq	0x1fa7e0
000638:0x001fa5f0:	movefm	@c00, results
000638:0x001fa600:	cmpcm	m_Result, null
000638:0x001fa610:	beq	0x1fa7e0
000638:0x001fa618:	movefm	@c00, results
000638:0x001fa628:	movefm	[0xb5b3cd08], m_Result
000638:0x001fa638:	movec	@c01, [0xb5b3cd08]
000638:0x001fa648:	cmpcm	m_Results, null
000638:0x001fa658:	beq	0x1fa7e0
000638:0x001fa660:	movefm	@c00, results
000638:0x001fa670:	movefm	[0xb5b3cd08], m_Result
000638:0x001fa680:	movec	@c01, [0xb5b3cd08]
000638:0x001fa690:	movefm	[0xb5b34e20], m_Results
000638:0x001fa6a0:	ncalli	array<@GetServersResultRow>.Count()
000638:0x001fa6a8:	move	@m00, #return
000638:0x001fa6b8:	cmpi	@m00, _i0
000638:0x001fa6c8:	ble	0x1fa7e0
000640:0x001fa6d0:	movefm	@c02, results
000640:0x001fa6e0:	movefm	[0xb5b3cd08], m_Result
000640:0x001fa6f0:	movec	@c03, [0xb5b3cd08]
000640:0x001fa700:	movem	#array, m_Results
000640:0x001fa710:	ncalli	array<@GetServersResultRow>.Count()
000640:0x001fa718:	move	#cnt, #return
000640:0x001fa728:	imove	#key, 0x000000
000640:0x001fa738:	jump	0x1fa748
000640:0x001fa740:	inc	#key
000640:0x001fa748:	cmpi	#key, #cnt
000640:0x001fa758:	bge	0x1fa7d0
000640:0x001fa760:	icall	
000640:0x001fa770:	movetm	result_temp, #return
000642:0x001fa780:	movefm	@c04, result_temp
000642:0x001fa790:	cmpi	m_FreeSlots, _i0
000642:0x001fa7a0:	ble	0x1fa7c8
000644:0x001fa7a8:	movefm	@c05, result_temp
000644:0x001fa7b8:	icall	
000644:0x001fa7c8:	jump	0x1fa740
000644:0x001fa7d0:	release	#array
000644:0x001fa7d8:	release	result_temp
000649:0x001fa7e0:	call	
000649:0x001fa7f0:	movem	#return, #return
000649:0x001fa800:	release	result
000649:0x001fa808:	release	results_free
000649:0x001fa810:	release	#return
000649:0x001fa818:	rts
000649:0x001fa820:	release	result
000649:0x001fa828:	release	results_free
000649:0x001fa830:	rts
OnlineServices::OnAutoConnectToEmptyServer()
000654:0x001fa928:	call	ErrorCaught(error)
000654:0x001fa938:	cmpi	#return, _i0
000654:0x001fa948:	bne	0x1faaa8
000656:0x001fa950:	call	GetRandomFreeResult(result_list)
000656:0x001fa960:	movem	result, #return
000656:0x001fa970:	release	#return
000657:0x001fa978:	cmpcm	result, null
000657:0x001fa988:	beq	0x1faa10
000659:0x001fa990:	movefm	@c00, result
000659:0x001fa9a0:	moves	ip, m_HostIp
000659:0x001fa9b0:	movefm	@c01, result
000659:0x001fa9c0:	move	port, m_HostPort
000659:0x001fa9d0:	call	
000660:0x001fa9e8:	imove	m_AutoConnectTries, 0x000000
000661:0x001fa9f8:	release	result
000661:0x001faa00:	rts
000661:0x001faa08:	jump	0x1faaa0
000665:0x001faa10:	ncall	GetGame()
000665:0x001faa18:	ncalli	CGame.GetUIManager()
000665:0x001faa20:	pushc	#return
000665:0x001faa28:	ncall	GetGame()
000665:0x001faa30:	movec	@c01, #return
000665:0x001faa40:	popc	#return
000665:0x001faa48:	pushc	#return
000665:0x001faa50:	ncalli	CGame.GetUIManager()
000665:0x001faa58:	movec	@c02, #return
000665:0x001faa68:	popc	#return
000665:0x001faa70:	ncalli	UIManager.GetMenu()
000665:0x001faa78:	ncalli	UIManager.ShowDialog(_s'#str_xbox_authentification_fail_title', _s'#str_xbox_authentification_fail', _i232, DBT_OK, DBB_NONE, DMT_INFO, #return)
000665:0x001faaa0:	release	result
000669:0x001faaa8:	cmpi	m_AutoConnectTries, _i3
000669:0x001faab8:	bge	0x1fab40
000671:0x001faac0:	move	@m00, m_AutoConnectTries
000671:0x001faad0:	inc	m_AutoConnectTries
000672:0x001faad8:	new	input, GetFirstServerWithEmptySlotInput
000673:0x001faaf8:	call	
000674:0x001fab08:	ncalli	BiosClientServices.GetLobbyService()
000674:0x001fab10:	movefm	[0xb5c14058], input
000674:0x001fab20:	ncalli	BiosLobbyService.GetFirstServerWithEmptySlot([0xb5c14058])
000674:0x001fab30:	release	input
000674:0x001fab38:	jump	0x1fabd0
000678:0x001fab40:	ncall	GetGame()
000678:0x001fab48:	ncalli	CGame.GetUIManager()
000678:0x001fab50:	pushc	#return
000678:0x001fab58:	ncall	GetGame()
000678:0x001fab60:	movec	@c01, #return
000678:0x001fab70:	popc	#return
000678:0x001fab78:	pushc	#return
000678:0x001fab80:	ncalli	CGame.GetUIManager()
000678:0x001fab88:	movec	@c02, #return
000678:0x001fab98:	popc	#return
000678:0x001faba0:	ncalli	UIManager.GetMenu()
000678:0x001faba8:	ncalli	UIManager.ShowDialog(_s'#str_xbox_authentification_fail_title', _s'#xbox_authentification_fail', _i232, DBT_OK, DBB_NONE, DMT_INFO, #return)
000678:0x001fabd0:	rts
OnlineServices::GetServerModList()
000684:0x001fabd8:	call	GetClientServices()
000685:0x001fabe8:	cmpcm	m_ClientServices, null
000685:0x001fabf8:	beq	0x1fac18
000687:0x001fac00:	ncalli	BiosClientServices.GetLobbyService()
000687:0x001fac08:	ncalli	BiosLobbyService.GetServerModList(server_id)
000687:0x001fac18:	rts
OnlineServices::OnGetServerModList()
000693:0x001fac20:	call	ErrorCaught(error)
000693:0x001fac30:	cmpi	#return, _i0
000693:0x001fac40:	bne	0x1fac78
000695:0x001fac48:	icall	
000695:0x001fac78:	rts
OnlineServices::IsGameTrial()
000707:0x001fac80:	imove	#return, 0x000000
000707:0x001fac90:	rts
000707:0x001fac98:	rts
OnlineServices::IsGameActive()
000718:0x001faca0:	imove	#return, 0x000000
000718:0x001facb0:	rts
000718:0x001facb8:	rts
OnlineServices::CheckUpdate()
000723:0x001face8:	call	GetClientServices()
000724:0x001facf8:	cmpcm	m_ClientServices, null
000724:0x001fad08:	beq	0x1fad60
000726:0x001fad10:	ncalli	BiosClientServices.GetPackageService()
000726:0x001fad18:	ncalli	BiosPackageService.CheckUpdateAsync()
000726:0x001fad20:	move	error, #return
000728:0x001fad30:	cmpi	error, _i0
000728:0x001fad40:	bne	0x1fad60
000730:0x001fad48:	imove	#return, 0x000001
000730:0x001fad58:	rts
000734:0x001fad60:	imove	#return, 0x000000
000734:0x001fad70:	rts
000734:0x001fad78:	rts
OnlineServices::PromptUpdate()
000739:0x001fad80:	call	GetClientServices()
000740:0x001fad90:	cmpcm	m_ClientServices, null
000740:0x001fada0:	beq	0x1fadb8
000742:0x001fada8:	ncalli	BiosClientServices.GetPackageService()
000742:0x001fadb0:	ncalli	BiosPackageService.PromptUpdateAsync()
000742:0x001fadb8:	rts
NotificationUI::NotificationUI()
//scripts/3_Game/client\notifications\notificationui.c
000022:0x001faf58:	ncall	GetGame()
000022:0x001faf60:	ncalli	CGame.GetWorkspace()
000022:0x001faf68:	ncall	CreateWidgets(#return, _s'gui/layouts/new_ui/notifications/notifications.layout', _c0, _i1)
000022:0x001faf80:	movetm	m_Root, #return
000023:0x001faf90:	movefm	[0xd31345a8], m_Root
000023:0x001fafa0:	ncalli	Widget.FindAnyWidget(_s'NotificationSpacer')
000023:0x001fafb0:	movetm	m_Spacer, #return
000024:0x001fafc0:	movefm	[0xd31345a8], m_Root
000024:0x001fafd0:	ncalli	Widget.FindAnyWidget(_s'VoiceContent')
000024:0x001fafe0:	movetm	m_VoiceContent, #return
000025:0x001faff0:	movefm	[0xd31345a8], m_Root
000025:0x001fb000:	ncalli	Widget.FindAnyWidget(_s'NotificationContent')
000025:0x001fb010:	movetm	m_NotificationContent, #return
000026:0x001fb020:	new	m_Notifications, map<NotificationRuntimeData,Widget>
000027:0x001fb040:	new	m_VoiceNotifications, map<string,Widget>
000028:0x001fb060:	new	m_WidgetTimers, map<string,Widget>
000030:0x001fb080:	call	GetInstance()
000030:0x001fb090:	movem	ntfSys, #return
000030:0x001fb0a0:	release	#return
000031:0x001fb0a8:	cmpcm	ntfSys, null
000031:0x001fb0b8:	beq	0x1fb140
000033:0x001fb0c0:	movefm	@c00, ntfSys
000033:0x001fb0d0:	movefm	@c01, m_OnNotificationAdded
000033:0x001fb0e0:	icall	SetInstance([0xb5cf8f18], this)
000033:0x001fb0f0:	icall	
000034:0x001fb100:	movefm	@c00, ntfSys
000034:0x001fb110:	movefm	@c01, m_OnNotificationRemoved
000034:0x001fb120:	icall	SetInstance([0xb5cf8f58], this)
000034:0x001fb130:	icall	
000034:0x001fb140:	release	ntfSys
000034:0x001fb148:	rts
NotificationUI::~NotificationUI()
000040:0x001fb1f8:	call	GetInstance()
000040:0x001fb208:	movem	ntfSys, #return
000040:0x001fb218:	release	#return
000041:0x001fb220:	cmpcm	ntfSys, null
000041:0x001fb230:	beq	0x1fb2b8
000043:0x001fb238:	movefm	@c00, ntfSys
000043:0x001fb248:	movefm	@c01, m_OnNotificationAdded
000043:0x001fb258:	icall	SetInstance([0xb5cf91b8], this)
000043:0x001fb268:	icall	
000044:0x001fb278:	movefm	@c00, ntfSys
000044:0x001fb288:	movefm	@c01, m_OnNotificationRemoved
000044:0x001fb298:	icall	SetInstance([0xb5cf91f8], this)
000044:0x001fb2a8:	icall	
000044:0x001fb2b8:	release	ntfSys
000044:0x001fb2c0:	rts
NotificationUI::AddNotification()
000050:0x001fb4e0:	ncall	GetGame()
000050:0x001fb4e8:	ncalli	CGame.GetWorkspace()
000050:0x001fb4f0:	movefm	[0xd316bcc0], m_NotificationContent
000050:0x001fb500:	ncall	CreateWidgets(#return, _s'gui/layouts/new_ui/notifications/notification_element.layout', [0xd316bcc0], _i1)
000050:0x001fb518:	movetm	notification, #return
000052:0x001fb528:	ncalli	Widget.FindAnyWidget(_s'Image')
000052:0x001fb538:	icall	SafeCastType([0xd3135420], @c01, #return)
000052:0x001fb550:	movetm	icon, @c01
000053:0x001fb560:	ncalli	Widget.FindAnyWidget(_s'Title')
000053:0x001fb570:	icall	SafeCastType([0xd3135258], @c01, #return)
000053:0x001fb588:	movetm	title, @c01
000055:0x001fb598:	call	
000055:0x001fb5a8:	moves	@s00, #return
000055:0x001fb5b8:	cmps	@s00, _s''
000055:0x001fb5c8:	beq	0x1fb5f8
000056:0x001fb5d0:	call	
000056:0x001fb5e0:	ncalli	ImageWidget.LoadImageFile(_i0, #return, _i0)
000057:0x001fb5f8:	call	
000057:0x001fb608:	ncalli	RichTextWidget.SetText(#return, _i1)
000059:0x001fb618:	call	
000059:0x001fb628:	moves	@s00, #return
000059:0x001fb638:	cmps	@s00, _s''
000059:0x001fb648:	beq	0x1fb700
000061:0x001fb650:	ncalli	Widget.FindAnyWidget(_s'BottomSpacer')
000061:0x001fb660:	movetm	bottom_spacer, #return
000062:0x001fb670:	ncalli	Widget.FindAnyWidget(_s'Detail')
000062:0x001fb680:	icall	SafeCastType([0xd3135258], @c01, #return)
000062:0x001fb698:	movetm	detail, @c01
000063:0x001fb6a8:	ncalli	Widget.Show(true, _i1)
000064:0x001fb6b8:	call	
000064:0x001fb6c8:	ncalli	RichTextWidget.SetText(#return, _i1)
000065:0x001fb6d8:	ncalli	RichTextWidget.Update()
000066:0x001fb6e0:	ncalli	Widget.Update()
000067:0x001fb6e8:	ncalli	Widget.Update()
000067:0x001fb6f0:	release	bottom_spacer
000067:0x001fb6f8:	release	detail
000070:0x001fb700:	movefm	@c00, data
000070:0x001fb710:	movefm	@c01, notification
000070:0x001fb720:	movefm	[0xb5be4248], m_Notifications
000070:0x001fb730:	icall	
000071:0x001fb740:	call	
000071:0x001fb750:	release	notification
000071:0x001fb758:	release	icon
000071:0x001fb760:	release	title
000071:0x001fb768:	rts
NotificationUI::RemoveNotification()
000076:0x001fb798:	movefm	@c00, data
000076:0x001fb7a8:	movefm	[0xb5be4248], m_Notifications
000076:0x001fb7b8:	icall	
000076:0x001fb7c8:	cmpi	#return, _i0
000076:0x001fb7d8:	beq	0x1fb900
000078:0x001fb7e0:	movefm	@c01, data
000078:0x001fb7f0:	movefm	[0xb5be4248], m_Notifications
000078:0x001fb800:	icall	
000078:0x001fb810:	movetm	notification, #return
000079:0x001fb820:	movefm	[0xb5be42e8], m_WidgetTimers
000079:0x001fb830:	ncalli	map<string,Widget>.Count()
000079:0x001fb838:	icall	ToString(#return)
000079:0x001fb848:	call	
000079:0x001fb858:	icall	ToString(#return)
000079:0x001fb868:	adds	@s01, #return, #return
000079:0x001fb878:	moves	@s00, @s01
000079:0x001fb888:	movefm	@c00, notification
000079:0x001fb898:	movefm	[0xb5be42e8], m_WidgetTimers
000079:0x001fb8a8:	icall	
000080:0x001fb8b8:	movefm	@c00, data
000080:0x001fb8c8:	movefm	[0xb5be4248], m_Notifications
000080:0x001fb8d8:	icall	
000081:0x001fb8e8:	call	
000081:0x001fb8f8:	release	notification
000081:0x001fb900:	rts
NotificationUI::AddVoiceNotification()
000087:0x001fba48:	movefm	[0xb5be42e8], m_VoiceNotifications
000087:0x001fba58:	icall	
000087:0x001fba68:	cmpi	#return, _i0
000087:0x001fba78:	bne	0x1fbc70
000090:0x001fba80:	movefm	[0xb5be42e8], m_WidgetTimers
000090:0x001fba90:	icall	
000090:0x001fbaa0:	cmpi	#return, _i0
000090:0x001fbab0:	bne	0x1fbb08
000092:0x001fbab8:	ncall	GetGame()
000092:0x001fbac0:	ncalli	CGame.GetWorkspace()
000092:0x001fbac8:	movefm	[0xd316bcc0], m_VoiceContent
000092:0x001fbad8:	ncall	CreateWidgets(#return, _s'gui/layouts/new_ui/notifications/notification_voice_element.layout', [0xd316bcc0], _i1)
000092:0x001fbaf0:	movetm	notification, #return
000092:0x001fbb00:	jump	0x1fbbd8
000096:0x001fbb08:	movefm	[0xb5be42e8], m_WidgetTimers
000096:0x001fbb18:	icall	
000096:0x001fbb28:	movetm	notification, #return
000097:0x001fbb38:	movefm	[0xb5be42e8], m_WidgetTimers
000097:0x001fbb48:	icall	
000098:0x001fbb58:	imove	@f01, 0.47059
000098:0x001fbb68:	move	@f00, @f01
000098:0x001fbb78:	ncalli	Widget.SetAlpha(@f00)
000099:0x001fbb88:	ncalli	Widget.FindAnyWidget(_s'Name')
000099:0x001fbb98:	movetm	w_c, #return
000100:0x001fbba8:	cmpcm	w_c, null
000100:0x001fbbb8:	beq	0x1fbbd0
000102:0x001fbbc0:	ncalli	Widget.SetAlpha(_f1.000000)
000102:0x001fbbd0:	release	w_c
000106:0x001fbbd8:	ncalli	Widget.FindAnyWidget(_s'Name')
000106:0x001fbbe8:	icall	SafeCastType([0xd3135258], @c01, #return)
000106:0x001fbc00:	movetm	title, @c01
000107:0x001fbc10:	movefm	@c00, notification
000107:0x001fbc20:	movefm	[0xb5be42e8], m_VoiceNotifications
000107:0x001fbc30:	icall	
000108:0x001fbc40:	ncalli	RichTextWidget.SetText(name, _i1)
000109:0x001fbc50:	call	
000109:0x001fbc60:	release	notification
000109:0x001fbc68:	release	title
000109:0x001fbc70:	rts
NotificationUI::RemoveVoiceNotification()
000115:0x001fbca0:	movefm	[0xb5be42e8], m_VoiceNotifications
000115:0x001fbcb0:	icall	
000115:0x001fbcc0:	cmpi	#return, _i0
000115:0x001fbcd0:	beq	0x1fbd70
000117:0x001fbcd8:	movefm	[0xb5be42e8], m_VoiceNotifications
000117:0x001fbce8:	icall	
000117:0x001fbcf8:	movetm	notification, #return
000118:0x001fbd08:	movefm	@c00, notification
000118:0x001fbd18:	movefm	[0xb5be42e8], m_WidgetTimers
000118:0x001fbd28:	icall	
000119:0x001fbd38:	movefm	[0xb5be42e8], m_VoiceNotifications
000119:0x001fbd48:	icall	
000120:0x001fbd58:	call	
000120:0x001fbd68:	release	notification
000120:0x001fbd70:	rts
NotificationUI::ClearVoiceNotifications()
000126:0x001fbdc8:	imove	i, 0x000000
000126:0x001fbdd8:	jump	0x1fbdf8
000126:0x001fbde0:	move	@m00, i
000126:0x001fbdf0:	inc	i
000126:0x001fbdf8:	movefm	[0xb5be42e8], m_VoiceNotifications
000126:0x001fbe08:	ncalli	map<string,Widget>.Count()
000126:0x001fbe10:	cmpi	i, #return
000126:0x001fbe20:	bge	0x1fbe70
000128:0x001fbe28:	movefm	[0xb5be42e8], m_VoiceNotifications
000128:0x001fbe38:	icall	
000128:0x001fbe48:	movetm	w, #return
000129:0x001fbe58:	delete	w
000129:0x001fbe60:	release	w
000129:0x001fbe68:	jump	0x1fbde0
000131:0x001fbe70:	movefm	[0xb5be42e8], m_VoiceNotifications
000131:0x001fbe80:	ncalli	map<string,Widget>.Clear()
000132:0x001fbe88:	call	
000132:0x001fbe98:	rts
NotificationUI::UpdateTargetHeight()
000137:0x001fbec8:	movefm	[0xd31345a8], m_VoiceContent
000137:0x001fbed8:	ncalli	Widget.Update()
000138:0x001fbee0:	movefm	[0xd31345a8], m_NotificationContent
000138:0x001fbef0:	ncalli	Widget.Update()
000139:0x001fbef8:	movefm	[0xd31345a8], m_Spacer
000139:0x001fbf08:	ncalli	Widget.Update()
000142:0x001fbf10:	movefm	[0xd31345a8], m_Spacer
000142:0x001fbf20:	icall	
000143:0x001fbf30:	movefm	[0xd31345a8], m_Root
000143:0x001fbf40:	icall	
000145:0x001fbf50:	call	
000145:0x001fbf60:	rts
NotificationUI::UpdateOffset()
000150:0x001fc0b0:	ncall	GetGame()
000150:0x001fc0b8:	ncalli	CGame.GetUIManager()
000150:0x001fc0c0:	ncalli	UIManager.GetMenu()
000150:0x001fc0c8:	icall	SafeCastType([0xb5b22a10], @c01, #return)
000150:0x001fc0e0:	movetm	menu, @c01
000151:0x001fc0f0:	cmpcm	menu, null
000151:0x001fc100:	beq	0x1fc298
000153:0x001fc108:	call	
000153:0x001fc118:	ncalli	Widget.FindAnyWidget(_s'notification_root')
000153:0x001fc128:	movetm	expNotification, #return
000153:0x001fc138:	release	#return
000154:0x001fc140:	cmpcm	expNotification, null
000154:0x001fc150:	beq	0x1fc220
000154:0x001fc158:	ncalli	Widget.IsVisible()
000154:0x001fc160:	cmpi	#return, _i0
000154:0x001fc170:	beq	0x1fc220
000156:0x001fc178:	cmpi	m_OffsetEnabled, _i0
000156:0x001fc188:	bne	0x1fc218
000158:0x001fc190:	movefm	[0xd31345a8], m_Root
000158:0x001fc1a0:	icall	
000161:0x001fc1b0:	movefm	[0xd31345a8], m_Root
000161:0x001fc1c0:	icall	
000162:0x001fc1d0:	icall	
000164:0x001fc1e0:	movefm	[0xd31345a8], m_Root
000164:0x001fc1f0:	ncalli	Widget.SetScreenPos(x, h, _i1)
000165:0x001fc208:	imove	m_OffsetEnabled, 0x000001
000165:0x001fc218:	jump	0x1fc290
000168:0x001fc220:	cmpi	m_OffsetEnabled, _i0
000168:0x001fc230:	beq	0x1fc290
000170:0x001fc238:	move	[0xd315fea8], m_BackupPosX
000170:0x001fc248:	move	[0xd315fed0], m_BackupPosY
000170:0x001fc258:	movefm	[0xd31345a8], m_Root
000170:0x001fc268:	ncalli	Widget.SetPos([0xd315fea8], [0xd315fed0], _i1)
000171:0x001fc280:	imove	m_OffsetEnabled, 0x000000
000171:0x001fc290:	release	expNotification
000171:0x001fc298:	release	menu
000171:0x001fc2a0:	rts
NotificationUI::Update()
000179:0x001fc680:	call	
000182:0x001fc690:	movefm	[0xd31345a8], m_Spacer
000182:0x001fc6a0:	icall	
000183:0x001fc6b0:	addf	@f01, m_CurrentHeight, _f0.010000
000183:0x001fc6c0:	move	@f00, @f01
000183:0x001fc6d0:	cmpf	@f00, m_TargetHeight
000183:0x001fc6e0:	blt	0x1fc720
000183:0x001fc6e8:	subf	@f01, m_CurrentHeight, _f0.010000
000183:0x001fc6f8:	move	@f00, @f01
000183:0x001fc708:	cmpf	@f00, m_TargetHeight
000183:0x001fc718:	ble	0x1fc738
000183:0x001fc720:	imove	is_near, 0x000001
000183:0x001fc730:	jump	0x1fc748
000183:0x001fc738:	imove	is_near, 0x000000
000184:0x001fc748:	cmpi	is_near, _i0
000184:0x001fc758:	beq	0x1fc7e0
000186:0x001fc760:	icall	SmoothCD(m_CurrentHeight, m_TargetHeight, m_VelArr, _f0.200000, _f10000.000000, timeslice)
000186:0x001fc780:	move	m_CurrentHeight, #return
000187:0x001fc790:	move	[0xd315ff20], m_Width
000187:0x001fc7a0:	move	[0xd315ff48], m_CurrentHeight
000187:0x001fc7b0:	movefm	[0xd31345a8], m_Root
000187:0x001fc7c0:	ncalli	Widget.SetSize([0xd315ff20], [0xd315ff48], _i1)
000187:0x001fc7d8:	jump	0x1fc860
000189:0x001fc7e0:	cmpf	m_TargetHeight, m_CurrentHeight
000189:0x001fc7f0:	beq	0x1fc860
000191:0x001fc7f8:	move	m_CurrentHeight, m_TargetHeight
000192:0x001fc808:	move	[0xd315ff20], m_Width
000192:0x001fc818:	move	[0xd315ff48], m_CurrentHeight
000192:0x001fc828:	movefm	[0xd31345a8], m_Root
000192:0x001fc838:	ncalli	Widget.SetSize([0xd315ff20], [0xd315ff48], _i1)
000193:0x001fc850:	itv	m_VelArr[0x000000], _f0.000000
000196:0x001fc860:	imove	i, 0x000000
000196:0x001fc870:	jump	0x1fc878
000196:0x001fc878:	movefm	[0xb5be42e8], m_WidgetTimers
000196:0x001fc888:	ncalli	map<string,Widget>.Count()
000196:0x001fc890:	cmpi	i, #return
000196:0x001fc8a0:	bge	0x1fcc18
000198:0x001fc8a8:	movefm	[0xb5be42e8], m_WidgetTimers
000198:0x001fc8b8:	icall	
000198:0x001fc8c8:	movetm	w, #return
000199:0x001fc8d8:	ncalli	Widget.GetAlpha()
000199:0x001fc8e0:	divf	@f03, timeslice, NOTIFICATION_FADE_TIME
000199:0x001fc8f0:	move	@f02, @f03
000199:0x001fc900:	subf	@f02, #return, @f02
000199:0x001fc910:	move	@f01, @f02
000199:0x001fc920:	icall	Clamp(@f01, _f0.000000, _f1.000000)
000199:0x001fc938:	move	new_alpha, #return
000200:0x001fc948:	cmpf	new_alpha, _f0.000000
000200:0x001fc958:	ble	0x1fcbd0
000202:0x001fc960:	ncalli	Widget.SetAlpha(new_alpha)
000203:0x001fc970:	ncalli	Widget.FindAnyWidget(_s'TopSpacer')
000203:0x001fc980:	movetm	w_c, #return
000204:0x001fc990:	ncalli	Widget.FindAnyWidget(_s'BottomSpacer')
000204:0x001fc9a0:	movetm	w_c2, #return
000205:0x001fc9b0:	ncalli	Widget.FindAnyWidget(_s'Title')
000205:0x001fc9c0:	movetm	w_c3, #return
000206:0x001fc9d0:	ncalli	Widget.FindAnyWidget(_s'Detail')
000206:0x001fc9e0:	movetm	w_c4, #return
000207:0x001fc9f0:	ncalli	Widget.FindAnyWidget(_s'Name')
000207:0x001fca00:	movetm	w_c5, #return
000208:0x001fca10:	cmpcm	w_c, null
000208:0x001fca20:	beq	0x1fcaf0
000208:0x001fca28:	cmpcm	w_c2, null
000208:0x001fca38:	beq	0x1fcaf0
000210:0x001fca40:	ncalli	Widget.GetAlpha()
000210:0x001fca48:	divf	@f03, timeslice, NOTIFICATION_FADE_TIME
000210:0x001fca58:	move	@f02, @f03
000210:0x001fca68:	subf	@f02, #return, @f02
000210:0x001fca78:	move	@f01, @f02
000210:0x001fca88:	icall	Clamp(@f01, _f0.000000, _f1.000000)
000210:0x001fcaa0:	move	new_alpha_cont, #return
000211:0x001fcab0:	ncalli	Widget.SetAlpha(new_alpha_cont)
000212:0x001fcac0:	ncalli	Widget.SetAlpha(new_alpha_cont)
000213:0x001fcad0:	ncalli	Widget.SetAlpha(new_alpha_cont)
000214:0x001fcae0:	ncalli	Widget.SetAlpha(new_alpha_cont)
000216:0x001fcaf0:	cmpcm	w_c5, null
000216:0x001fcb00:	beq	0x1fcb88
000218:0x001fcb08:	ncalli	Widget.GetAlpha()
000218:0x001fcb10:	divf	@f03, timeslice, NOTIFICATION_FADE_TIME
000218:0x001fcb20:	move	@f02, @f03
000218:0x001fcb30:	subf	@f02, #return, @f02
000218:0x001fcb40:	move	@f01, @f02
000218:0x001fcb50:	icall	Clamp(@f01, _f0.000000, _f1.000000)
000218:0x001fcb68:	move	new_alpha_voice, #return
000219:0x001fcb78:	ncalli	Widget.SetAlpha(new_alpha_voice)
000221:0x001fcb88:	move	@m00, i
000221:0x001fcb98:	inc	i
000221:0x001fcba0:	release	w_c
000221:0x001fcba8:	release	w_c2
000221:0x001fcbb0:	release	w_c3
000221:0x001fcbb8:	release	w_c4
000221:0x001fcbc0:	release	w_c5
000221:0x001fcbc8:	jump	0x1fcc08
000225:0x001fcbd0:	delete	w
000226:0x001fcbd8:	movefm	[0xb5be42e8], m_WidgetTimers
000226:0x001fcbe8:	icall	
000227:0x001fcbf8:	call	
000227:0x001fcc08:	release	w
000227:0x001fcc10:	jump	0x1fc878
000227:0x001fcc18:	rts
WeatherPhenomenon::OnBeforeChange()
//scripts/3_Game/weather.c
000121:0x001fcd20:	ncalli	DayZGame.GetWeather()
000121:0x001fcd28:	movec	weather, #return
000123:0x001fcd38:	call	
000123:0x001fcd48:	cmpi	#return, _i0
000123:0x001fcd58:	beq	0x1fcd78
000124:0x001fcd60:	imove	#return, 0x000000
000124:0x001fcd70:	rts
000127:0x001fcd78:	ncalli	DayZGame.GetMission()
000127:0x001fcd80:	movec	currentMission, #return
000129:0x001fcd90:	cmpc	currentMission, null
000129:0x001fcda0:	beq	0x1fce40
000131:0x001fcda8:	call	
000131:0x001fcdb8:	movem	worldData, #return
000131:0x001fcdc8:	release	#return
000132:0x001fcdd0:	cmpcm	worldData, null
000132:0x001fcde0:	beq	0x1fce38
000134:0x001fcde8:	ncalli	WeatherPhenomenon.GetType()
000134:0x001fcdf0:	ncalli	WeatherPhenomenon.GetActual()
000134:0x001fcdf8:	call	
000134:0x001fce18:	move	#return, #return
000134:0x001fce28:	release	worldData
000134:0x001fce30:	rts
000134:0x001fce38:	release	worldData
000138:0x001fce40:	imove	#return, 0x000000
000138:0x001fce50:	rts
000138:0x001fce58:	rts
Weather::Weather()
000160:0x001fce60:	imove	m_missionWeather, 0x000000
000160:0x001fce70:	rts
Weather::MissionWeather()
000246:0x001fce78:	move	m_missionWeather, use
000246:0x001fce88:	rts
Weather::GetMissionWeather()
000251:0x001fce90:	move	#return, m_missionWeather
000251:0x001fcea0:	rts
000251:0x001fcea8:	rts
PPEMatClassParameterFloat::PPEMatClassParameterFloat()
//scripts/3_Game/ppemanager\materials\matparameters\ppematclassparameterfloat.c
000012:0x001fceb0:	new	m_LayerInfo, map<int,@array<float>>
000012:0x001fced0:	rts
PPEMatClassParameterFloat::InitDefaults()
000017:0x001fced8:	movefm	@c00, m_Defaults
000017:0x001fcee8:	icall	CastTo(m_Float, @c00)
000019:0x001fcef8:	movefm	[0xb5b35538], m_Float
000019:0x001fcf08:	movec	@c00, [0xb5b35538]
000019:0x001fcf18:	move	m_ValueDefault, param2
000020:0x001fcf28:	movefm	[0xb5b35538], m_Float
000020:0x001fcf38:	movec	@c00, [0xb5b35538]
000020:0x001fcf48:	move	m_ValueMin, param3
000021:0x001fcf58:	movefm	[0xb5b35538], m_Float
000021:0x001fcf68:	movec	@c00, [0xb5b35538]
000021:0x001fcf78:	move	m_ValueMax, param4
000021:0x001fcf88:	rts
PPEMatClassParameterFloat::InitCuttent()
000026:0x001fcf90:	move	p1, m_ValueDefault
000026:0x001fcfa0:	new	m_CurrentValues, Param1<float>
000026:0x001fcfc8:	rts
PPEMatClassParameterFloat::GetParameterVarType()
000031:0x001fcfd0:	imove	#return, 0x000004
000031:0x001fcfe0:	rts
000031:0x001fcfe8:	rts
PPEMatClassParameterFloat::Update()
000036:0x001fd3c0:	call	
000036:0x001fd3e0:	movem	p_total, p_total
000036:0x001fd3f0:	move	setting_defaults, setting_defaults
000036:0x001fd400:	release	p_total
000038:0x001fd408:	imove	active_request_count, 0x000000
000042:0x001fd418:	imove	setting_value_zero, 0x000000
000044:0x001fd428:	imove	float_value_temp, 0.00000
000045:0x001fd438:	imove	float_value_default, 0.00000
000046:0x001fd448:	imove	float_value_total, 0.00000
000048:0x001fd458:	cmpcm	p_total, null
000048:0x001fd468:	bne	0x1fd498
000050:0x001fd470:	new	p_total, Param1<float>
000053:0x001fd498:	movefm	[0xb5b35828], m_RequestMap
000053:0x001fd4a8:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000053:0x001fd4b0:	move	@m00, #return
000053:0x001fd4c0:	cmpi	@m00, _i0
000053:0x001fd4d0:	ble	0x1fd4f8
000055:0x001fd4d8:	movefm	[0xb5bb7330], m_LayerInfo
000055:0x001fd4e8:	ncalli	map<int,@array<float>>.Clear()
000055:0x001fd4f0:	jump	0x1fd580
000060:0x001fd4f8:	call	
000060:0x001fd508:	movem	p_total, p_total
000060:0x001fd518:	release	p_total
000061:0x001fd520:	move	parameter_idx, m_ParameterIndex
000061:0x001fd530:	movefm	[0xb5b35de0], m_Parent
000061:0x001fd540:	call	
000062:0x001fd550:	release	req_data
000062:0x001fd558:	movem	p_total, p_total
000062:0x001fd568:	move	setting_defaults, setting_defaults
000062:0x001fd578:	rts
000065:0x001fd580:	imove	i, 0x000000
000065:0x001fd590:	jump	0x1fd5b0
000065:0x001fd598:	move	@m00, i
000065:0x001fd5a8:	inc	i
000065:0x001fd5b0:	movefm	[0xb5b35828], m_RequestMap
000065:0x001fd5c0:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000065:0x001fd5c8:	cmpi	i, #return
000065:0x001fd5d8:	bge	0x1fd9d0
000067:0x001fd5e0:	movefm	[0xb5b35828], m_RequestMap
000067:0x001fd5f0:	icall	
000067:0x001fd600:	icall	SafeCastType([0xb5b3aec8], @c01, #return)
000067:0x001fd618:	movetm	req_data, @c01
000069:0x001fd628:	cmpcm	req_data, null
000069:0x001fd638:	bne	0x1fd728
000071:0x001fd640:	icall	ToString(this)
000071:0x001fd650:	adds	@s05, _s'Debug | PPEMatClassParameterFloat | req_data not found! | ', #return
000071:0x001fd660:	moves	@s04, @s05
000071:0x001fd670:	adds	@s04, @s04, _s' | mat/par: '
000071:0x001fd680:	moves	@s03, @s04
000071:0x001fd690:	icall	ToString(m_MaterialIndex)
000071:0x001fd6a0:	adds	@s03, @s03, #return
000071:0x001fd6b0:	moves	@s02, @s03
000071:0x001fd6c0:	adds	@s02, @s02, _s'/'
000071:0x001fd6d0:	moves	@s01, @s02
000071:0x001fd6e0:	icall	ToString(m_ParameterIndex)
000071:0x001fd6f0:	adds	@s01, @s01, #return
000071:0x001fd700:	moves	@s00, @s01
000071:0x001fd710:	call	Error(@s00)
000072:0x001fd720:	jump	0x1fd598
000075:0x001fd728:	call	
000075:0x001fd738:	move	setting_value_zero, #return
000077:0x001fd748:	cmpi	setting_value_zero, _i0
000077:0x001fd758:	beq	0x1fd7b8
000077:0x001fd760:	call	
000077:0x001fd770:	cmpi	#return, _i0
000077:0x001fd780:	bne	0x1fd7b8
000077:0x001fd788:	call	
000077:0x001fd798:	cmpi	#return, _i0
000077:0x001fd7a8:	bne	0x1fd7b8
000080:0x001fd7b0:	jump	0x1fd598
000083:0x001fd7b8:	cmpi	setting_value_zero, _i0
000083:0x001fd7c8:	beq	0x1fd7f8
000085:0x001fd7d0:	movefm	@c00, req_data
000085:0x001fd7e0:	imove	m_FloatTarget, 0.00000
000085:0x001fd7f0:	jump	0x1fd810
000090:0x001fd7f8:	move	@m00, active_request_count
000090:0x001fd808:	inc	active_request_count
000095:0x001fd810:	movefm	@c00, req_data
000095:0x001fd820:	movefm	@c01, req_data
000095:0x001fd830:	move	m_FloatLast, m_FloatCurrent
000097:0x001fd840:	call	
000097:0x001fd850:	cmpi	#return, _i0
000097:0x001fd860:	bne	0x1fd8f0
000097:0x001fd868:	call	
000097:0x001fd878:	cmpi	#return, _i0
000097:0x001fd888:	beq	0x1fd8f0
000099:0x001fd890:	movefm	@c00, req_data
000099:0x001fd8a0:	move	float_value_temp, m_FloatCurrent
000100:0x001fd8b0:	call	
000100:0x001fd8c0:	call	
000100:0x001fd8d0:	call	
000102:0x001fd8e8:	jump	0x1fd598
000105:0x001fd8f0:	movefm	@c00, req_data
000105:0x001fd900:	move	float_value_temp, m_FloatTarget
000108:0x001fd910:	call	
000109:0x001fd920:	cmpi	setting_value_zero, _i0
000109:0x001fd930:	beq	0x1fd950
000111:0x001fd938:	call	
000111:0x001fd948:	jump	0x1fd9a8
000116:0x001fd950:	movefm	@c00, req_data
000116:0x001fd960:	move	float_value_temp, m_FloatTarget
000117:0x001fd970:	call	
000117:0x001fd980:	call	
000117:0x001fd990:	call	
000120:0x001fd9a8:	movefm	@c00, req_data
000120:0x001fd9b8:	move	m_FloatCurrent, float_value_temp
000120:0x001fd9c8:	jump	0x1fd598
000127:0x001fd9d0:	imove	override_active, 0x000000
000129:0x001fd9e0:	cmpf	m_ValueMax, _f0.000000
000129:0x001fd9f0:	bne	0x1fda10
000130:0x001fd9f8:	move	float_value_total, m_ValueDefault
000130:0x001fda08:	jump	0x1fda30
000132:0x001fda10:	divf	@f00, m_ValueDefault, m_ValueMax
000132:0x001fda20:	move	float_value_total, @f00
000135:0x001fda30:	move	float_value_default, float_value_total
000137:0x001fda40:	imove	i, 0x000000
000137:0x001fda50:	jump	0x1fda70
000137:0x001fda58:	move	@m00, i
000137:0x001fda68:	inc	i
000137:0x001fda70:	movefm	[0xb5bb7330], m_LayerInfo
000137:0x001fda80:	ncalli	map<int,@array<float>>.Count()
000137:0x001fda88:	cmpi	i, #return
000137:0x001fda98:	bge	0x1fe008
000139:0x001fdaa0:	cmpi	override_active, _i0
000139:0x001fdab0:	beq	0x1fdac0
000140:0x001fdab8:	jump	0x1fe008
000142:0x001fdac0:	movefm	[0xd31561b0], m_CommandLayersArray
000142:0x001fdad0:	icall	
000142:0x001fdae0:	movefm	[0xb5bb7330], m_LayerInfo
000142:0x001fdaf0:	icall	
000142:0x001fdb00:	icall	
000142:0x001fdb10:	move	value, #return
000143:0x001fdb20:	movefm	[0xd31561b0], m_CommandLayersArray
000143:0x001fdb30:	icall	
000143:0x001fdb40:	movefm	[0xb5bb7330], m_LayerInfo
000143:0x001fdb50:	icall	
000143:0x001fdb60:	icall	
000143:0x001fdb70:	cfti	operator, #return
000145:0x001fdb80:	move	#switch, operator
000145:0x001fdb90:	imove	@m00, 0x000000
000145:0x001fdba0:	cmpi	@m00, #switch
000145:0x001fdbb0:	bne	0x1fdbe8
000148:0x001fdbb8:	icall	Min(float_value_total, value)
000148:0x001fdbc8:	move	float_value_total, #return
000149:0x001fdbd8:	jump	0x1fdfb0
000149:0x001fdbe0:	jump	0x1fdc10
000149:0x001fdbe8:	imove	@m00, 0x000001
000149:0x001fdbf8:	cmpi	@m00, #switch
000149:0x001fdc08:	bne	0x1fdc40
000152:0x001fdc10:	icall	Max(float_value_total, value)
000152:0x001fdc20:	move	float_value_total, #return
000153:0x001fdc30:	jump	0x1fdfb0
000153:0x001fdc38:	jump	0x1fdc68
000153:0x001fdc40:	imove	@m00, 0x000002
000153:0x001fdc50:	cmpi	@m00, #switch
000153:0x001fdc60:	bne	0x1fdc98
000157:0x001fdc68:	addf	@f00, float_value_total, value
000157:0x001fdc78:	move	float_value_total, @f00
000158:0x001fdc88:	jump	0x1fdfb0
000158:0x001fdc90:	jump	0x1fdcc0
000158:0x001fdc98:	imove	@m00, 0x000003
000158:0x001fdca8:	cmpi	@m00, #switch
000158:0x001fdcb8:	bne	0x1fdd30
000161:0x001fdcc0:	subf	@f02, _f1.000000, float_value_total
000161:0x001fdcd0:	move	@f01, @f02
000161:0x001fdce0:	mulf	@f01, @f01, value
000161:0x001fdcf0:	move	@f00, @f01
000161:0x001fdd00:	addf	@f00, @f00, float_value_total
000161:0x001fdd10:	move	float_value_total, @f00
000162:0x001fdd20:	jump	0x1fdfb0
000162:0x001fdd28:	jump	0x1fdd58
000162:0x001fdd30:	imove	@m00, 0x000004
000162:0x001fdd40:	cmpi	@m00, #switch
000162:0x001fdd50:	bne	0x1fdd88
000166:0x001fdd58:	subf	@f00, float_value_total, value
000166:0x001fdd68:	move	float_value_total, @f00
000167:0x001fdd78:	jump	0x1fdfb0
000167:0x001fdd80:	jump	0x1fddb0
000167:0x001fdd88:	imove	@m00, 0x000005
000167:0x001fdd98:	cmpi	@m00, #switch
000167:0x001fdda8:	bne	0x1fde00
000170:0x001fddb0:	mulf	@f01, value, float_value_total
000170:0x001fddc0:	move	@f00, @f01
000170:0x001fddd0:	subf	@f00, float_value_total, @f00
000170:0x001fdde0:	move	float_value_total, @f00
000171:0x001fddf0:	jump	0x1fdfb0
000171:0x001fddf8:	jump	0x1fde28
000171:0x001fde00:	imove	@m00, 0x000006
000171:0x001fde10:	cmpi	@m00, #switch
000171:0x001fde20:	bne	0x1fde58
000175:0x001fde28:	subf	@f00, value, float_value_total
000175:0x001fde38:	move	float_value_total, @f00
000176:0x001fde48:	jump	0x1fdfb0
000176:0x001fde50:	jump	0x1fde80
000176:0x001fde58:	imove	@m00, 0x000007
000176:0x001fde68:	cmpi	@m00, #switch
000176:0x001fde78:	bne	0x1fded0
000179:0x001fde80:	mulf	@f01, value, float_value_total
000179:0x001fde90:	move	@f00, @f01
000179:0x001fdea0:	subf	@f00, @f00, float_value_total
000179:0x001fdeb0:	move	float_value_total, @f00
000180:0x001fdec0:	jump	0x1fdfb0
000180:0x001fdec8:	jump	0x1fdef8
000180:0x001fded0:	imove	@m00, 0x000008
000180:0x001fdee0:	cmpi	@m00, #switch
000180:0x001fdef0:	bne	0x1fdf28
000184:0x001fdef8:	mulf	@f00, float_value_total, value
000184:0x001fdf08:	move	float_value_total, @f00
000185:0x001fdf18:	jump	0x1fdfb0
000185:0x001fdf20:	jump	0x1fdf50
000185:0x001fdf28:	imove	@m00, 0x00000a
000185:0x001fdf38:	cmpi	@m00, #switch
000185:0x001fdf48:	bne	0x1fdf70
000188:0x001fdf50:	move	float_value_total, value
000189:0x001fdf60:	jump	0x1fdfb0
000189:0x001fdf68:	jump	0x1fdf98
000189:0x001fdf70:	imove	@m00, 0x000009
000189:0x001fdf80:	cmpi	@m00, #switch
000189:0x001fdf90:	bne	0x1fdfb0
000192:0x001fdf98:	move	float_value_total, value
000193:0x001fdfa8:	jump	0x1fdfb0
000197:0x001fdfb0:	icall	Clamp(float_value_total, _f0.000000, _f1.000000)
000197:0x001fdfc8:	move	float_value_total, #return
000199:0x001fdfd8:	cmpi	operator, OVERRIDE
000199:0x001fdfe8:	bne	0x1fe000
000202:0x001fdff0:	imove	override_active, 0x000001
000202:0x001fe000:	jump	0x1fda58
000208:0x001fe008:	movefm	[0xd31561b0], m_CommandLayersArray
000208:0x001fe018:	ncalli	array<int>.Clear()
000211:0x001fe020:	cmpi	active_request_count, _i0
000211:0x001fe030:	bne	0x1fe068
000213:0x001fe038:	call	
000213:0x001fe048:	movem	p_total, p_total
000213:0x001fe058:	release	p_total
000213:0x001fe060:	jump	0x1fe0d8
000217:0x001fe068:	icall	Lerp(m_ValueMin, m_ValueMax, float_value_total)
000217:0x001fe080:	move	res, #return
000218:0x001fe090:	movefm	@c01, p_total
000218:0x001fe0a0:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000218:0x001fe0b8:	movec	@c02, @c00
000218:0x001fe0c8:	move	param1, res
000222:0x001fe0d8:	move	parameter_idx, m_ParameterIndex
000222:0x001fe0e8:	movefm	[0xb5b35de0], m_Parent
000222:0x001fe0f8:	call	
000224:0x001fe108:	movem	m_CurrentValues, p_total
000224:0x001fe118:	release	req_data
000224:0x001fe120:	movem	p_total, p_total
000224:0x001fe130:	move	setting_defaults, setting_defaults
000224:0x001fe140:	rts
PPEMatClassParameterFloat::PrepareLayerInfo()
000229:0x001fe148:	new	@c01, array<float>
000229:0x001fe168:	pushc	@c01
000229:0x001fe170:	icall	
000229:0x001fe180:	citf	@f00, operator
000229:0x001fe190:	icall	
000229:0x001fe1a0:	movefm	[0xb5bb7330], m_LayerInfo
000229:0x001fe1b0:	icall	
000229:0x001fe1c0:	popc	@c01
000229:0x001fe1c8:	release	@c01
000230:0x001fe1d0:	call	
000230:0x001fe1e0:	rts
PPEMatClassParameterFloat::SetParameterValueDefault()
000236:0x001fe1e8:	movefm	@c01, m_Defaults
000236:0x001fe1f8:	icall	SafeCastType([0xb5b35538], @c00, @c01)
000236:0x001fe210:	movec	@c02, @c00
000236:0x001fe220:	move	p1, param2
000236:0x001fe230:	new	p_total, Param1<float>
000237:0x001fe258:	movem	m_CurrentValues, p_total
000237:0x001fe268:	movem	p_total, p_total
000237:0x001fe278:	rts
PPEMatClassParameterFloatSaturation::PPEMatClassParameterFloatSaturation()
000246:0x001fe280:	new	m_Dependencies, map<int,@array<int>>
000247:0x001fe2a0:	new	@c01, array<int>
000247:0x001fe2c0:	pushc	@c01
000247:0x001fe2c8:	icall	
000247:0x001fe2d8:	icall	
000247:0x001fe2e8:	movefm	[0xb5b90170], m_Dependencies
000247:0x001fe2f8:	icall	
000247:0x001fe308:	popc	@c01
000247:0x001fe310:	release	@c01
000247:0x001fe318:	rts
PPEColorGrading::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppecolorgrading.c
000009:0x001fe320:	imove	#return, 0x00000d
000009:0x001fe330:	rts
000009:0x001fe338:	rts
PPEColorGrading::GetDefaultMaterialPath()
000014:0x001fe368:	moves	#return, _s'Graphics/Materials/postprocess/colorgrading'
000014:0x001fe378:	rts
000014:0x001fe380:	rts
LogTemplates::RegisterLogTamplate()
//scripts/3_Game/tools\logtemplates.c
000013:0x001fe4a0:	cmpcm	m_LogTemplates, NULL
000013:0x001fe4b0:	bne	0x1fe4d8
000015:0x001fe4b8:	new	m_LogTemplates, map<LogTemplateID,@Param3<string,string,string>>
000018:0x001fe4d8:	icall	
000018:0x001fe4e8:	cmpi	#return, _i0
000018:0x001fe4f8:	beq	0x1fe580
000020:0x001fe500:	icall	ToString(template_id, _i0, _i0, _i1)
000020:0x001fe518:	adds	@s02, _s'Template ID: ', #return
000020:0x001fe528:	moves	@s01, @s02
000020:0x001fe538:	adds	@s01, @s01, _s' is alredy exist!'
000020:0x001fe548:	moves	@s00, @s01
000020:0x001fe558:	call	Log(@s00, _s'LogTemplate.h -> OnInit()', _s'System', _s'Template Registration', _s'None')
000020:0x001fe578:	jump	0x1fe5d8
000024:0x001fe580:	new	params, Param3<string,string,string>
000025:0x001fe5b0:	movefm	@c00, params
000025:0x001fe5c0:	icall	
000025:0x001fe5d0:	release	params
000025:0x001fe5d8:	rts
LogTemplates::Init()
000045:0x001fe6f8:	call	RegisterLogTamplate(TEMPLATE_UNKNOWN, _s'Unknown', _s'Unknown', _s'Unknown')
000046:0x001fe718:	call	RegisterLogTamplate(TEMPLATE_JANOSIK, _s'Janosik', _s'GUI', _s'None')
000047:0x001fe738:	call	RegisterLogTamplate(TEMPLATE_PLAYER_WEIGHT, _s'Unknown', _s'PlayerBase', _s'Weight')
000048:0x001fe758:	call	RegisterLogTamplate(TEMPLATE_BROADCAST, _s'Unknown', _s'PluginMessageManager', _s'Broadcast')
000048:0x001fe778:	rts
LogTemplates::GetTemplate()
000054:0x001fe7f8:	cmpcm	m_LogTemplates, null
000054:0x001fe808:	beq	0x1fe860
000054:0x001fe810:	icall	
000054:0x001fe820:	cmpi	#return, _i0
000054:0x001fe830:	beq	0x1fe860
000056:0x001fe838:	icall	
000056:0x001fe848:	movetm	#return, #return
000056:0x001fe858:	rts
000059:0x001fe860:	icall	ToString(template_id, _i0, _i0, _i1)
000059:0x001fe878:	adds	@s02, _s'Template ID: ', #return
000059:0x001fe888:	moves	@s01, @s02
000059:0x001fe898:	adds	@s01, @s01, _s' does not exist!'
000059:0x001fe8a8:	moves	@s00, @s01
000059:0x001fe8b8:	call	Log(@s00, _s'LogTemplate.h -> GetTemplate()', _s'System', _s'Get Log Template', _s'None')
000060:0x001fe8d8:	movetm	#return, NULL
000060:0x001fe8e8:	rts
000060:0x001fe8f0:	rts
Log()
000077:0x001fe978:	call	GetTemplate(template_id)
000077:0x001fe988:	movem	log_template, #return
000077:0x001fe998:	release	#return
000079:0x001fe9a0:	movefm	@c00, log_template
000079:0x001fe9b0:	moves	plugin, param2
000079:0x001fe9c0:	movefm	@c01, log_template
000079:0x001fe9d0:	moves	author, param1
000079:0x001fe9e0:	movefm	@c02, log_template
000079:0x001fe9f0:	moves	label, param3
000079:0x001fea00:	call	Log(message, plugin, author, label, _s'n/a')
000079:0x001fea20:	release	log_template
000079:0x001fea28:	rts
LogInfo()
000095:0x001fea58:	call	GetTemplate(template_id)
000095:0x001fea68:	movem	log_template, #return
000095:0x001fea78:	release	#return
000097:0x001fea80:	movefm	@c00, log_template
000097:0x001fea90:	moves	plugin, param2
000097:0x001feaa0:	movefm	@c01, log_template
000097:0x001feab0:	moves	author, param1
000097:0x001feac0:	movefm	@c02, log_template
000097:0x001fead0:	moves	label, param3
000097:0x001feae0:	call	LogInfo(message, plugin, author, label, _s'n/a')
000097:0x001feb00:	release	log_template
000097:0x001feb08:	rts
LogWarning()
000113:0x001feb38:	call	GetTemplate(template_id)
000113:0x001feb48:	movem	log_template, #return
000113:0x001feb58:	release	#return
000115:0x001feb60:	movefm	@c00, log_template
000115:0x001feb70:	moves	plugin, param2
000115:0x001feb80:	movefm	@c01, log_template
000115:0x001feb90:	moves	author, param1
000115:0x001feba0:	movefm	@c02, log_template
000115:0x001febb0:	moves	label, param3
000115:0x001febc0:	call	LogWarning(message, plugin, author, label, _s'n/a')
000115:0x001febe0:	release	log_template
000115:0x001febe8:	rts
LogError()
000131:0x001fec18:	call	GetTemplate(template_id)
000131:0x001fec28:	movem	log_template, #return
000131:0x001fec38:	release	#return
000133:0x001fec40:	movefm	@c00, log_template
000133:0x001fec50:	moves	plugin, param2
000133:0x001fec60:	movefm	@c01, log_template
000133:0x001fec70:	moves	author, param1
000133:0x001fec80:	movefm	@c02, log_template
000133:0x001fec90:	moves	label, param3
000133:0x001feca0:	call	LogError(message, plugin, author, label, _s'n/a')
000133:0x001fecc0:	release	log_template
000133:0x001fecc8:	rts
SQFPrint()
000138:0x001fecd0:	icall	Print(sqf_msg)
000138:0x001fece0:	rts
SQFLog()
000143:0x001fed10:	call	Log(sqf_msg, _i0)
000143:0x001fed28:	rts
PPEGaussFilter::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppegaussfilter.c
000019:0x001fed30:	imove	#return, 0x000014
000019:0x001fed40:	rts
000019:0x001fed48:	rts
PPEGaussFilter::GetDefaultMaterialPath()
000024:0x001fed78:	moves	#return, _s'Graphics/Materials/postprocess/gauss'
000024:0x001fed88:	rts
000024:0x001fed90:	rts
PPEGaussFilter::RegisterMaterialParameters()
000029:0x001fed98:	call	
000029:0x001fedb8:	rts
PPERotBlur::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\pperotblur.c
000012:0x001fedc0:	imove	#return, 0x000005
000012:0x001fedd0:	rts
000012:0x001fedd8:	rts
PPERotBlur::GetDefaultMaterialPath()
000017:0x001fee08:	moves	#return, _s'Graphics/Materials/postprocess/rotblur'
000017:0x001fee18:	rts
000017:0x001fee20:	rts
PPERotBlur::RegisterMaterialParameters()
000022:0x001ff030:	call	
000023:0x001ff050:	call	
000024:0x001ff070:	call	
000025:0x001ff090:	call	
000026:0x001ff0b0:	call	
000026:0x001ff0d0:	rts
PPERequester_ContaminatedAreaTint::OnStart()
//scripts/3_Game/ppemanager\requesters\ppercontaminated.c
000017:0x001ff0d8:	call	
000019:0x001ff0e8:	imove	m_AccumulatedTime, 0.00000
000021:0x001ff0f8:	imove	m_FadeIn, 0x000001
000022:0x001ff108:	imove	m_FadeOut, 0x000000
000024:0x001ff118:	call	
000025:0x001ff140:	call	
000025:0x001ff168:	rts
PPERequester_ContaminatedAreaTint::OnUpdate()
000030:0x001ff198:	call	
000032:0x001ff1a8:	cmpi	m_FadeIn, _i0
000032:0x001ff1b8:	beq	0x1ff428
000032:0x001ff1c0:	cmpf	m_AccumulatedTime, FADE_TIME
000032:0x001ff1d0:	bgt	0x1ff428
000034:0x001ff1d8:	move	@f00, delta
000034:0x001ff1e8:	addf	m_AccumulatedTime, m_AccumulatedTime, @f00
000036:0x001ff1f8:	divf	@f02, m_AccumulatedTime, FADE_TIME
000036:0x001ff208:	move	@f01, @f02
000036:0x001ff218:	call	
000036:0x001ff230:	mulf	@f02, #return, R_TARGET
000036:0x001ff240:	move	@f00, @f02
000036:0x001ff250:	subf	@f00, _f1.000000, @f00
000036:0x001ff260:	itv	m_StartRGB[0x000000], @f00
000037:0x001ff270:	divf	@f02, m_AccumulatedTime, FADE_TIME
000037:0x001ff280:	move	@f01, @f02
000037:0x001ff290:	call	
000037:0x001ff2a8:	mulf	@f02, #return, G_TARGET
000037:0x001ff2b8:	move	@f00, @f02
000037:0x001ff2c8:	subf	@f00, _f1.000000, @f00
000037:0x001ff2d8:	itv	m_StartRGB[0x000001], @f00
000038:0x001ff2e8:	divf	@f02, m_AccumulatedTime, FADE_TIME
000038:0x001ff2f8:	move	@f01, @f02
000038:0x001ff308:	call	
000038:0x001ff320:	mulf	@f02, #return, B_TARGET
000038:0x001ff330:	move	@f00, @f02
000038:0x001ff340:	subf	@f00, _f1.000000, @f00
000038:0x001ff350:	itv	m_StartRGB[0x000002], @f00
000040:0x001ff360:	new	@c01, array<float>
000040:0x001ff380:	pushc	@c01
000040:0x001ff388:	ifv	@f00, m_StartRGB[0x000000]
000040:0x001ff398:	icall	
000040:0x001ff3a8:	ifv	@f00, m_StartRGB[0x000001]
000040:0x001ff3b8:	icall	
000040:0x001ff3c8:	ifv	@f00, m_StartRGB[0x000002]
000040:0x001ff3d8:	icall	
000040:0x001ff3e8:	icall	
000040:0x001ff3f8:	call	
000040:0x001ff418:	popc	@c01
000040:0x001ff420:	release	@c01
000043:0x001ff428:	cmpi	m_FadeOut, _i0
000043:0x001ff438:	beq	0x1ff6c0
000045:0x001ff440:	cmpf	m_AccumulatedTime, FADE_TIME
000045:0x001ff450:	bgt	0x1ff6b0
000047:0x001ff458:	move	@f00, delta
000047:0x001ff468:	addf	m_AccumulatedTime, m_AccumulatedTime, @f00
000049:0x001ff478:	imove	@f01, 0.85800
000049:0x001ff488:	move	@f00, @f01
000049:0x001ff498:	divf	@f02, m_AccumulatedTime, FADE_TIME
000049:0x001ff4a8:	move	@f01, @f02
000049:0x001ff4b8:	call	
000049:0x001ff4d0:	addf	@f00, @f00, #return
000049:0x001ff4e0:	itv	m_StartRGB[0x000000], @f00
000050:0x001ff4f0:	imove	@f01, 0.85000
000050:0x001ff500:	move	@f00, @f01
000050:0x001ff510:	divf	@f02, m_AccumulatedTime, FADE_TIME
000050:0x001ff520:	move	@f01, @f02
000050:0x001ff530:	call	
000050:0x001ff548:	addf	@f00, @f00, #return
000050:0x001ff558:	itv	m_StartRGB[0x000001], @f00
000051:0x001ff568:	imove	@f01, 0.56000
000051:0x001ff578:	move	@f00, @f01
000051:0x001ff588:	divf	@f02, m_AccumulatedTime, FADE_TIME
000051:0x001ff598:	move	@f01, @f02
000051:0x001ff5a8:	call	
000051:0x001ff5c0:	addf	@f00, @f00, #return
000051:0x001ff5d0:	itv	m_StartRGB[0x000002], @f00
000053:0x001ff5e0:	new	@c01, array<float>
000053:0x001ff600:	pushc	@c01
000053:0x001ff608:	ifv	@f00, m_StartRGB[0x000000]
000053:0x001ff618:	icall	
000053:0x001ff628:	ifv	@f00, m_StartRGB[0x000001]
000053:0x001ff638:	icall	
000053:0x001ff648:	ifv	@f00, m_StartRGB[0x000002]
000053:0x001ff658:	icall	
000053:0x001ff668:	icall	
000053:0x001ff678:	call	
000053:0x001ff698:	popc	@c01
000053:0x001ff6a0:	release	@c01
000053:0x001ff6a8:	jump	0x1ff6c0
000057:0x001ff6b0:	call	
000057:0x001ff6c0:	rts
PPERequester_ContaminatedAreaTint::OnStop()
000064:0x001ff6f0:	imove	m_FadeIn, 0x000000
000065:0x001ff700:	imove	m_FadeOut, 0x000000
000068:0x001ff710:	cmpcm	par, null
000068:0x001ff720:	beq	0x1ff780
000068:0x001ff728:	movefm	@c00, par
000068:0x001ff738:	icall	CastTo(p, @c00)
000068:0x001ff748:	cmpi	#return, _i0
000068:0x001ff758:	beq	0x1ff780
000069:0x001ff760:	movefm	@c00, p
000069:0x001ff770:	move	m_FadeOut, param1
000071:0x001ff780:	imove	m_AccumulatedTime, 0.00000
000073:0x001ff790:	call	
000073:0x001ff7a0:	release	p
000073:0x001ff7a8:	rts
PPERequester_ContaminatedAreaTint::FadeColourMult()
000080:0x001ff7d8:	icall	Lerp(x, y, deltaT)
000080:0x001ff7f0:	move	output, #return
000081:0x001ff800:	call	EaseInOutSine(output)
000082:0x001ff810:	move	#return, output
000082:0x001ff820:	rts
000082:0x001ff828:	rts
PPERequester_ContaminatedAreaTint::PPERequester_ContaminatedAreaTint()
000002:0x001ff830:	movev	m_StartRGB, Zero
000002:0x001ff840:	imove	m_AccumulatedTime, 0.00000
000002:0x001ff850:	imove	m_FadeIn, 0x000000
000002:0x001ff860:	imove	m_FadeOut, 0x000000
000002:0x001ff870:	rts
PPERequester_PainBlur::SetRadialBlur()
//scripts/3_Game/ppemanager\requesters\pperpain.c
000005:0x001ff878:	call	
000006:0x001ff8a0:	call	
000007:0x001ff8c8:	call	
000008:0x001ff8f0:	call	
000009:0x001ff918:	call	
000009:0x001ff940:	rts
RestCallback::OnError()
//scripts/3_Game/http\restapi.c
000058:0x001ff970:	icall	Print(_s' !!! OnError() ')
000058:0x001ff980:	rts
RestCallback::OnTimeout()
000067:0x001ff9b0:	icall	Print(_s' !!! OnTimeout() ')
000067:0x001ff9c0:	rts
RestCallback::OnSuccess()
000076:0x001ff9f0:	icall	ToString(dataSize)
000076:0x001ffa00:	adds	@s01, _s' !!! OnSuccess() size=', #return
000076:0x001ffa10:	moves	@s00, @s01
000076:0x001ffa20:	icall	Print(@s00)
000077:0x001ffa30:	cmpi	dataSize, _i0
000077:0x001ffa40:	ble	0x1ffa58
000078:0x001ffa48:	icall	Print(data)
000078:0x001ffa58:	rts
RestCallback::OnFileCreated()
000087:0x001ffab0:	adds	@s01, _s' !!! OnFileCreated() file=', fileName
000087:0x001ffac0:	moves	@s00, @s01
000087:0x001ffad0:	adds	@s00, @s00, _s' size='
000087:0x001ffae0:	moves	@s01, @s00
000087:0x001ffaf0:	icall	ToString(dataSize)
000087:0x001ffb00:	adds	@s01, @s01, #return
000087:0x001ffb10:	moves	@s00, @s01
000087:0x001ffb20:	icall	Print(@s00)
000087:0x001ffb30:	rts
Hit_Undefined::Hit_Undefined()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_undefined.c
000005:0x001ffb38:	call	
000005:0x001ffb48:	rts
ScriptInvokerTests::ScriptInvokerTests()
//scripts/3_Game/systems\tftests\scriptinvokertests.c
000011:0x001ffb78:	new	m_Invoker, ScriptInvoker
000019:0x001ffb98:	call	
000019:0x001ffba8:	rts
ScriptInvokerTests::TestFirstUnique()
000036:0x001ffd48:	call	
000038:0x001ffd58:	icall	SetInstance([0xb5cfdc40], this)
000038:0x001ffd68:	movefm	[0xb425b340], m_Invoker
000038:0x001ffd78:	icall	
000038:0x001ffd88:	move	insert1, #return
000039:0x001ffd98:	call	
000040:0x001ffda8:	icall	SetInstance([0xb5cfdcf8], this)
000040:0x001ffdb8:	movefm	[0xb425b340], m_Invoker
000040:0x001ffdc8:	icall	
000040:0x001ffdd8:	move	insert2, #return
000041:0x001ffde8:	cmpi	insert2, _i0
000041:0x001ffdf8:	beq	0x1ffe18
000041:0x001ffe00:	imove	@m00, 0x000000
000041:0x001ffe10:	jump	0x1ffe28
000041:0x001ffe18:	imove	@m00, 0x000001
000041:0x001ffe28:	call	
000043:0x001ffe38:	movefm	[0xb425b340], m_Invoker
000043:0x001ffe48:	icall	
000044:0x001ffe78:	cmpi	m_InvokeCount, _i1
000044:0x001ffe88:	bne	0x1ffea8
000044:0x001ffe90:	imove	@m00, 0x000001
000044:0x001ffea0:	jump	0x1ffeb8
000044:0x001ffea8:	imove	@m00, 0x000000
000044:0x001ffeb8:	call	
000044:0x001ffec8:	move	count, #return
000046:0x001ffed8:	call	
000048:0x001ffee8:	cmpi	insert1, _i0
000048:0x001ffef8:	beq	0x1fff48
000048:0x001fff00:	cmpi	insert2, _i0
000048:0x001fff10:	bne	0x1fff48
000048:0x001fff18:	cmpi	count, _i0
000048:0x001fff28:	beq	0x1fff48
000048:0x001fff30:	imove	@m00, 0x000001
000048:0x001fff40:	jump	0x1fff58
000048:0x001fff48:	imove	@m00, 0x000000
000048:0x001fff58:	call	
000048:0x001fff68:	movem	#return, #return
000048:0x001fff78:	release	#return
000048:0x001fff80:	rts
000048:0x001fff88:	rts
ScriptInvokerTests::TestSecondUnique()
000055:0x002000b0:	call	
000057:0x002000c0:	icall	SetInstance([0xb5cfdff8], this)
000057:0x002000d0:	movefm	[0xb425b340], m_Invoker
000057:0x002000e0:	icall	
000057:0x002000f0:	move	insert1, #return
000058:0x00200100:	call	
000059:0x00200110:	icall	SetInstance([0xb5cfe060], this)
000059:0x00200120:	movefm	[0xb425b340], m_Invoker
000059:0x00200130:	icall	
000059:0x00200140:	move	insert2, #return
000060:0x00200150:	cmpi	insert2, _i0
000060:0x00200160:	beq	0x200180
000060:0x00200168:	imove	@m00, 0x000000
000060:0x00200178:	jump	0x200190
000060:0x00200180:	imove	@m00, 0x000001
000060:0x00200190:	call	
000062:0x002001a0:	movefm	[0xb425b340], m_Invoker
000062:0x002001b0:	icall	
000063:0x002001e0:	cmpi	m_InvokeCount, _i1
000063:0x002001f0:	bne	0x200210
000063:0x002001f8:	imove	@m00, 0x000001
000063:0x00200208:	jump	0x200220
000063:0x00200210:	imove	@m00, 0x000000
000063:0x00200220:	call	
000063:0x00200230:	move	count, #return
000065:0x00200240:	call	
000067:0x00200250:	cmpi	insert1, _i0
000067:0x00200260:	beq	0x2002b0
000067:0x00200268:	cmpi	insert2, _i0
000067:0x00200278:	bne	0x2002b0
000067:0x00200280:	cmpi	count, _i0
000067:0x00200290:	beq	0x2002b0
000067:0x00200298:	imove	@m00, 0x000001
000067:0x002002a8:	jump	0x2002c0
000067:0x002002b0:	imove	@m00, 0x000000
000067:0x002002c0:	call	
000067:0x002002d0:	movem	#return, #return
000067:0x002002e0:	release	#return
000067:0x002002e8:	rts
000067:0x002002f0:	rts
ScriptInvokerTests::TestInsertRemoveUnique()
000074:0x002004a8:	call	
000076:0x002004b8:	icall	SetInstance([0xb5cfe360], this)
000076:0x002004c8:	movefm	[0xb425b340], m_Invoker
000076:0x002004d8:	icall	
000076:0x002004e8:	move	insert1, #return
000077:0x002004f8:	call	
000078:0x00200508:	icall	SetInstance([0xb5cfe3f0], this)
000078:0x00200518:	movefm	[0xb425b340], m_Invoker
000078:0x00200528:	icall	
000078:0x00200538:	move	remove1, #return
000079:0x00200548:	call	
000080:0x00200558:	icall	SetInstance([0xb5cfe458], this)
000080:0x00200568:	movefm	[0xb425b340], m_Invoker
000080:0x00200578:	icall	
000080:0x00200588:	move	insert2, #return
000081:0x00200598:	call	
000083:0x002005a8:	movefm	[0xb425b340], m_Invoker
000083:0x002005b8:	icall	
000084:0x002005e8:	cmpi	m_InvokeCount, _i1
000084:0x002005f8:	bne	0x200618
000084:0x00200600:	imove	@m00, 0x000001
000084:0x00200610:	jump	0x200628
000084:0x00200618:	imove	@m00, 0x000000
000084:0x00200628:	call	
000084:0x00200638:	move	count, #return
000086:0x00200648:	call	
000088:0x00200658:	cmpi	insert1, _i0
000088:0x00200668:	beq	0x2006d0
000088:0x00200670:	cmpi	remove1, _i0
000088:0x00200680:	beq	0x2006d0
000088:0x00200688:	cmpi	insert2, _i0
000088:0x00200698:	beq	0x2006d0
000088:0x002006a0:	cmpi	count, _i0
000088:0x002006b0:	beq	0x2006d0
000088:0x002006b8:	imove	@m00, 0x000001
000088:0x002006c8:	jump	0x2006e0
000088:0x002006d0:	imove	@m00, 0x000000
000088:0x002006e0:	call	
000088:0x002006f0:	movem	#return, #return
000088:0x00200700:	release	#return
000088:0x00200708:	rts
000088:0x00200710:	rts
ScriptInvokerTests::TestInsertUniqueImmediate()
000095:0x00200868:	call	
000097:0x00200878:	icall	SetInstance([0xb5cfe780], this)
000097:0x00200888:	movefm	[0xb425b340], m_Invoker
000097:0x00200898:	icall	
000097:0x002008a8:	move	insert1, #return
000098:0x002008b8:	call	
000099:0x002008c8:	icall	SetInstance([0xb5cfe7e8], this)
000099:0x002008d8:	movefm	[0xb425b340], m_Invoker
000099:0x002008e8:	icall	
000099:0x002008f8:	move	insert2, #return
000100:0x00200908:	call	
000102:0x00200918:	movefm	[0xb425b340], m_Invoker
000102:0x00200928:	icall	
000103:0x00200958:	cmpi	m_InvokeCount, _i1
000103:0x00200968:	bne	0x200988
000103:0x00200970:	imove	@m00, 0x000001
000103:0x00200980:	jump	0x200998
000103:0x00200988:	imove	@m00, 0x000000
000103:0x00200998:	call	
000103:0x002009a8:	move	count, #return
000105:0x002009b8:	call	
000107:0x002009c8:	cmpi	insert1, _i0
000107:0x002009d8:	beq	0x200a28
000107:0x002009e0:	cmpi	insert2, _i0
000107:0x002009f0:	bne	0x200a28
000107:0x002009f8:	cmpi	count, _i0
000107:0x00200a08:	beq	0x200a28
000107:0x00200a10:	imove	@m00, 0x000001
000107:0x00200a20:	jump	0x200a38
000107:0x00200a28:	imove	@m00, 0x000000
000107:0x00200a38:	call	
000107:0x00200a48:	movem	#return, #return
000107:0x00200a58:	release	#return
000107:0x00200a60:	rts
000107:0x00200a68:	rts
ScriptInvokerTests::TestClearRunning()
000114:0x00200b40:	call	
000116:0x00200b50:	icall	SetInstance([0xb5cfeab0], this)
000116:0x00200b60:	movefm	[0xb425b340], m_Invoker
000116:0x00200b70:	icall	
000117:0x00200b80:	icall	SetInstance([0xb5cfeaf0], this)
000117:0x00200b90:	movefm	[0xb425b340], m_Invoker
000117:0x00200ba0:	icall	
000119:0x00200bb0:	movefm	[0xb425b340], m_Invoker
000119:0x00200bc0:	icall	
000120:0x00200bf0:	cmpi	m_InvokeCount, _i1
000120:0x00200c00:	bne	0x200c20
000120:0x00200c08:	imove	@m00, 0x000001
000120:0x00200c18:	jump	0x200c30
000120:0x00200c20:	imove	@m00, 0x000000
000120:0x00200c30:	call	
000120:0x00200c40:	move	count, #return
000122:0x00200c50:	call	
000124:0x00200c60:	call	
000124:0x00200c70:	movem	#return, #return
000124:0x00200c80:	release	#return
000124:0x00200c88:	rts
000124:0x00200c90:	rts
ScriptInvokerTests::TestInvokeRunning()
000131:0x00200d00:	call	
000133:0x00200d10:	icall	SetInstance([0xb5cfecd8], this)
000133:0x00200d20:	movefm	[0xb425b340], m_Invoker
000133:0x00200d30:	icall	
000135:0x00200d40:	movefm	[0xb425b340], m_Invoker
000135:0x00200d50:	icall	
000137:0x00200d80:	call	
000139:0x00200d90:	call	
000139:0x00200da0:	movem	#return, #return
000139:0x00200db0:	release	#return
000139:0x00200db8:	rts
000139:0x00200dc0:	rts
ScriptInvokerTests::TestInsertRunning()
000146:0x00200e58:	call	
000148:0x00200e68:	icall	SetInstance([0xb5cfee08], this)
000148:0x00200e78:	movefm	[0xb425b340], m_Invoker
000148:0x00200e88:	icall	
000150:0x00200e98:	movefm	[0xb425b340], m_Invoker
000150:0x00200ea8:	icall	
000151:0x00200ed8:	icall	Print(m_InvokeCount)
000152:0x00200ee8:	cmpi	m_InvokeCount, _i129
000152:0x00200ef8:	bne	0x200f18
000152:0x00200f00:	imove	@m00, 0x000001
000152:0x00200f10:	jump	0x200f28
000152:0x00200f18:	imove	@m00, 0x000000
000152:0x00200f28:	call	
000152:0x00200f38:	move	count, #return
000154:0x00200f48:	call	
000156:0x00200f58:	call	
000156:0x00200f68:	movem	#return, #return
000156:0x00200f78:	release	#return
000156:0x00200f80:	rts
000156:0x00200f88:	rts
ScriptInvokerTests::InvokeLog()
000166:0x00200f90:	inc	m_InvokeCount
000166:0x00200f98:	rts
ScriptInvokerTests::InvokeReset()
000171:0x00200fa0:	movefm	[0xb425b340], m_Invoker
000171:0x00200fb0:	ncalli	ScriptInvoker.Clear()
000172:0x00200fb8:	imove	m_InvokeCount, 0x000000
000172:0x00200fc8:	rts
ScriptInvokerTests::InvokeClear()
000177:0x00200fd0:	call	
000178:0x00200fe0:	movefm	[0xb425b340], m_Invoker
000178:0x00200ff0:	ncalli	ScriptInvoker.Clear()
000178:0x00200ff8:	rts
ScriptInvokerTests::InvokeInvoke()
000183:0x00201000:	call	
000184:0x00201010:	movefm	[0xb425b340], m_Invoker
000184:0x00201020:	icall	
000184:0x00201050:	rts
ScriptInvokerTests::InvokeInsert()
000189:0x00201098:	call	
000190:0x002010a8:	icall	SetInstance([0xb5cff098], this)
000190:0x002010b8:	movefm	[0xb425b340], m_Invoker
000190:0x002010c8:	icall	
000190:0x002010d8:	rts
NotificationData::NotificationData()
//scripts/3_Game/client\notifications\notificationdata.c
000009:0x002010e0:	moves	m_Icon, icon
000010:0x002010f0:	moves	m_TitleText, title_text
000011:0x00201100:	cmps	desc_text, _s''
000011:0x00201110:	beq	0x201128
000012:0x00201118:	moves	m_DescriptionText, desc_text
000012:0x00201128:	rts
PPEHBAO::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppehbao.c
000017:0x00201130:	imove	#return, 0x000004
000017:0x00201140:	rts
000017:0x00201148:	rts
PPEHBAO::GetDefaultMaterialPath()
000022:0x00201178:	moves	#return, _s'Graphics/Materials/postprocess/hbao'
000022:0x00201188:	rts
000022:0x00201190:	rts
PPEHBAO::RegisterMaterialParameters()
000027:0x00201378:	call	
000028:0x00201398:	call	
000029:0x002013b8:	call	
000030:0x002013d8:	call	
000031:0x002013f8:	call	
000032:0x00201418:	call	
000033:0x00201438:	call	
000034:0x00201458:	call	
000035:0x00201478:	call	
000035:0x00201490:	rts
PPERequester_ControlsBlur::OnStart()
//scripts/3_Game/ppemanager\requesters\ppercontrolsblur.c
000007:0x00201498:	call	
000009:0x002014a8:	movefm	@c01, par
000009:0x002014b8:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000009:0x002014d0:	movec	@c02, @c00
000009:0x002014e0:	move	m_Gauss, param1
000010:0x002014f0:	move	val, m_Gauss
000010:0x00201500:	call	
000010:0x00201528:	rts
ComponentEnergyManager::ComponentEnergyManager()
//scripts/3_Game/tools\component\componentenergymanager.c
000082:0x00201530:	imove	m_MySocketID, 0xffffffff
000082:0x00201540:	imove	m_EnergySourceNetworkIDLow, 0xffffffff
000082:0x00201550:	imove	m_EnergySourceNetworkIDHigh, 0xffffffff
000086:0x00201560:	imove	m_DebugPlugs, 0x000000
000086:0x00201570:	rts
ComponentEnergyManager::~ComponentEnergyManager()
000092:0x00201578:	cmpc	m_DebugPlugArrow, null
000092:0x00201588:	beq	0x2015b8
000094:0x00201590:	movec	[0xd3136b20], m_DebugPlugArrow
000094:0x002015a0:	ncalli	Shape.Destroy()
000095:0x002015a8:	movec	m_DebugPlugArrow, NULL
000095:0x002015b8:	rts
ComponentEnergyManager::Event_OnInit()
000102:0x002015e8:	movefm	[0xb5b25dc0], m_ThisEntityAI
000102:0x002015f8:	movec	@c00, [0xb5b25dc0]
000102:0x00201608:	movetm	m_EM, this
000103:0x00201618:	ncall	GetGame()
000103:0x00201620:	movec	@c00, #return
000103:0x00201630:	movec	@c01, GameScript
000103:0x00201640:	movefm	@c02, m_ThisEntityAI
000103:0x00201650:	icall	
000103:0x00201668:	rts
ComponentEnergyManager::DebugUpdate()
000109:0x00201828:	call	
000109:0x00201838:	cmpi	#return, _i0
000109:0x00201848:	beq	0x201b08
000111:0x00201850:	ncall	GetGame()
000111:0x00201858:	ncalli	CGame.IsMultiplayer()
000111:0x00201860:	cmpi	#return, _i0
000111:0x00201870:	beq	0x2018e0
000111:0x00201878:	ncall	GetGame()
000111:0x00201880:	ncalli	CGame.IsServer()
000111:0x00201888:	cmpi	#return, _i0
000111:0x00201898:	beq	0x2018e0
000113:0x002018a0:	cmpcm	m_DebugUpdate, null
000113:0x002018b0:	beq	0x2018d8
000114:0x002018b8:	movefm	[0xb5b3c700], m_DebugUpdate
000114:0x002018c8:	call	
000116:0x002018d8:	rts
000119:0x002018e0:	cmpc	m_DebugPlugArrow, null
000119:0x002018f0:	beq	0x201920
000121:0x002018f8:	movec	[0xd3136b20], m_DebugPlugArrow
000121:0x00201908:	ncalli	Shape.Destroy()
000122:0x00201910:	movec	m_DebugPlugArrow, NULL
000125:0x00201920:	call	
000125:0x00201930:	cmpcm	#return, null
000125:0x00201940:	beq	0x201b00
000127:0x00201948:	call	
000127:0x00201958:	ncalli	EntityAI.GetPosition()
000127:0x00201960:	addv	from, #return, _v<0.000000,0.100000,0.000000>
000127:0x00201970:	release	#return
000128:0x00201978:	movefm	[0xb5b25dc0], m_ThisEntityAI
000128:0x00201988:	ncalli	EntityAI.GetPosition()
000128:0x00201990:	addv	to, #return, _v<0.000000,0.100000,0.000000>
000131:0x002019a0:	ncall	DistanceSq(from, to)
000131:0x002019b0:	move	@f00, #return
000131:0x002019c0:	cmpf	@f00, _f0.000000
000131:0x002019d0:	bne	0x2019e8
000132:0x002019d8:	release	#return
000132:0x002019e0:	rts
000134:0x002019e8:	movefm	[0xb5b25dc0], m_ThisEntityAI
000134:0x002019f8:	call	
000134:0x00201a08:	moves	@s00, #return
000134:0x00201a18:	cmps	@s00, _s'BarbedWire'
000134:0x00201a28:	bne	0x201ad0
000136:0x00201a30:	movefm	[0xb5b25dc0], m_ThisEntityAI
000136:0x00201a40:	ncalli	EntityAI.GetHierarchyParent()
000136:0x00201a48:	movetm	BBB, #return
000138:0x00201a58:	cmpcm	BBB, null
000138:0x00201a68:	beq	0x201ac8
000138:0x00201a70:	call	
000138:0x00201a80:	moves	@s00, #return
000138:0x00201a90:	cmps	@s00, _s'Fence'
000138:0x00201aa0:	bne	0x201ac8
000140:0x00201aa8:	addv	@v00, to, _v<0.000000,-1.300000,0.000000>
000140:0x00201ab8:	movev	to, @v00
000140:0x00201ac8:	release	BBB
000144:0x00201ad0:	call	
000144:0x00201af0:	movec	m_DebugPlugArrow, #return
000144:0x00201b00:	release	#return
000144:0x00201b08:	rts
ComponentEnergyManager::DrawArrow()
000151:0x00201c20:	subv	dir, to, from
000152:0x00201c30:	icall	Normalize(dir)
000153:0x00201c40:	scalev	dir1, dir, size
000154:0x00201c50:	mulf	@f00, size, _f0.500000
000154:0x00201c60:	move	size, @f00
000156:0x00201c70:	call	Perpend(dir)
000156:0x00201c80:	movev	dir, value
000156:0x00201c90:	scalev	dir2, #return, size
000159:0x00201ca0:	ctv	pts[_i0], from
000160:0x00201cb0:	ctv	pts[_i1], to
000161:0x00201cc0:	subv	@v01, to, dir1
000161:0x00201cd0:	movev	@v00, @v01
000161:0x00201ce0:	subv	@v00, @v00, dir2
000161:0x00201cf0:	ctv	pts[_i2], @v00
000162:0x00201d00:	subv	@v01, to, dir1
000162:0x00201d10:	movev	@v00, @v01
000162:0x00201d20:	addv	@v00, @v00, dir2
000162:0x00201d30:	ctv	pts[_i3], @v00
000163:0x00201d40:	ctv	pts[_i4], to
000165:0x00201d50:	cfti	[0xd3162808], flags
000165:0x00201d60:	ncall	CreateLines(color, [0xd3162808], pts, _i5)
000165:0x00201d78:	movec	#return, #return
000165:0x00201d88:	rts
000165:0x00201d90:	rts
ComponentEnergyManager::GetThisEntityAI()
000170:0x00201d98:	movem	#return, m_ThisEntityAI
000170:0x00201da8:	rts
000170:0x00201db0:	rts
ComponentEnergyManager::Event_OnAwake()
000176:0x002027b8:	movefm	[0xb5b25dc0], m_ThisEntityAI
000176:0x002027c8:	call	
000176:0x002027d8:	adds	cfg_item, _s'CfgVehicles ', #return
000177:0x002027e8:	adds	cfg_energy_manager, cfg_item, _s' EnergyManager '
000180:0x002027f8:	ncall	GetGame()
000180:0x00202800:	adds	@s01, cfg_energy_manager, _s'energyUsagePerSecond'
000180:0x00202810:	moves	@s00, @s01
000180:0x00202820:	ncalli	CGame.ConfigGetFloat(@s00)
000180:0x00202830:	move	m_EnergyUsage, #return
000181:0x00202840:	ncall	GetGame()
000181:0x00202848:	adds	@s01, cfg_energy_manager, _s'switchOnAtSpawn'
000181:0x00202858:	moves	@s00, @s01
000181:0x00202868:	ncalli	CGame.ConfigGetFloat(@s00)
000181:0x00202878:	cfti	switch_on, #return
000182:0x00202888:	ncall	GetGame()
000182:0x00202890:	adds	@s01, cfg_energy_manager, _s'autoSwitchOff'
000182:0x002028a0:	moves	@s00, @s01
000182:0x002028b0:	ncalli	CGame.ConfigGetFloat(@s00)
000182:0x002028c0:	cfti	m_AutoSwitchOff, #return
000183:0x002028d0:	ncall	GetGame()
000183:0x002028d8:	adds	@s01, cfg_energy_manager, _s'hasIcon'
000183:0x002028e8:	moves	@s00, @s01
000183:0x002028f8:	ncalli	CGame.ConfigGetFloat(@s00)
000183:0x00202908:	cfti	m_HasElectricityIcon, #return
000184:0x00202918:	ncall	GetGame()
000184:0x00202920:	adds	@s01, cfg_energy_manager, _s'autoSwitchOffWhenInCargo'
000184:0x00202930:	moves	@s00, @s01
000184:0x00202940:	ncalli	CGame.ConfigGetFloat(@s00)
000184:0x00202950:	cfti	m_AutoSwitchOffWhenInCargo, #return
000186:0x00202960:	ncall	GetGame()
000186:0x00202968:	adds	@s01, cfg_energy_manager, _s'energyAtSpawn'
000186:0x00202978:	moves	@s00, @s01
000186:0x00202988:	ncalli	CGame.ConfigGetFloat(@s00)
000186:0x00202998:	move	m_Energy, #return
000187:0x002029a8:	ncall	GetGame()
000187:0x002029b0:	adds	@s01, cfg_energy_manager, _s'energyStorageMax'
000187:0x002029c0:	moves	@s00, @s01
000187:0x002029d0:	ncalli	CGame.ConfigGetFloat(@s00)
000187:0x002029e0:	move	m_EnergyStorageMax, #return
000188:0x002029f0:	ncall	GetGame()
000188:0x002029f8:	adds	@s01, cfg_energy_manager, _s'reduceMaxEnergyByDamageCoef'
000188:0x00202a08:	moves	@s00, @s01
000188:0x00202a18:	ncalli	CGame.ConfigGetFloat(@s00)
000188:0x00202a28:	move	m_ReduceMaxEnergyByDamageCoef, #return
000189:0x00202a38:	ncall	GetGame()
000189:0x00202a40:	adds	@s01, cfg_energy_manager, _s'powerSocketsCount'
000189:0x00202a50:	moves	@s00, @s01
000189:0x00202a60:	ncalli	CGame.ConfigGetFloat(@s00)
000189:0x00202a70:	move	m_SocketsCount, #return
000191:0x00202a80:	ncall	GetGame()
000191:0x00202a88:	adds	@s01, cfg_energy_manager, _s'isPassiveDevice'
000191:0x00202a98:	moves	@s00, @s01
000191:0x00202aa8:	ncalli	CGame.ConfigGetFloat(@s00)
000191:0x00202ab8:	cfti	m_IsPassiveDevice, #return
000192:0x00202ac8:	ncall	GetGame()
000192:0x00202ad0:	adds	@s01, cfg_energy_manager, _s'cordLength'
000192:0x00202ae0:	moves	@s00, @s01
000192:0x00202af0:	ncalli	CGame.ConfigGetFloat(@s00)
000192:0x00202b00:	move	m_CordLength, #return
000193:0x00202b10:	ncall	GetGame()
000193:0x00202b18:	adds	@s01, cfg_energy_manager, _s'plugType'
000193:0x00202b28:	moves	@s00, @s01
000193:0x00202b38:	ncalli	CGame.ConfigGetFloat(@s00)
000193:0x00202b48:	cfti	m_PlugType, #return
000195:0x00202b58:	ncall	GetGame()
000195:0x00202b60:	adds	@s01, cfg_energy_manager, _s'attachmentAction'
000195:0x00202b70:	moves	@s00, @s01
000195:0x00202b80:	ncalli	CGame.ConfigGetFloat(@s00)
000195:0x00202b90:	cfti	m_AttachmentActionType, #return
000196:0x00202ba0:	ncall	GetGame()
000196:0x00202ba8:	adds	@s01, cfg_energy_manager, _s'wetnessExposure'
000196:0x00202bb8:	moves	@s00, @s01
000196:0x00202bc8:	ncalli	CGame.ConfigGetFloat(@s00)
000196:0x00202bd8:	move	m_WetnessExposure, #return
000198:0x00202be8:	ncall	GetGame()
000198:0x00202bf0:	adds	@s01, cfg_energy_manager, _s'updateInterval'
000198:0x00202c00:	moves	@s00, @s01
000198:0x00202c10:	ncalli	CGame.ConfigGetFloat(@s00)
000198:0x00202c20:	move	update_interval, #return
000200:0x00202c30:	ncall	GetGame()
000200:0x00202c38:	adds	@s01, cfg_energy_manager, _s'convertEnergyToQuantity'
000200:0x00202c48:	moves	@s00, @s01
000200:0x00202c58:	ncalli	CGame.ConfigGetFloat(@s00)
000200:0x00202c68:	cfti	m_ConvertEnergyToQuantity, #return
000204:0x00202c78:	ncall	GetGame()
000204:0x00202c80:	adds	@s01, cfg_item, _s' varQuantityMax'
000204:0x00202c90:	moves	@s00, @s01
000204:0x00202ca0:	ncalli	CGame.ConfigGetFloat(@s00)
000204:0x00202cb0:	move	cfg_max_quantity, #return
000206:0x00202cc0:	cmpi	m_ConvertEnergyToQuantity, _i0
000206:0x00202cd0:	beq	0x202d68
000206:0x00202cd8:	cmpf	cfg_max_quantity, _f0.000000
000206:0x00202ce8:	bgt	0x202d68
000208:0x00202cf0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000208:0x00202d00:	call	
000208:0x00202d10:	adds	@s01, _s'Error! Item ', #return
000208:0x00202d20:	moves	@s00, @s01
000208:0x00202d30:	adds	error, @s00, _s' has invalid configuration of the energy->quantity conversion feature. To fix this, add 'varQuantityMax' parameter with value higher than 0 to the item's config. Then make sure to re-build the PBO containing this item!'
000209:0x00202d40:	call	Error(error)
000210:0x00202d50:	imove	m_ConvertEnergyToQuantity, 0x000000
000210:0x00202d60:	jump	0x202e00
000214:0x00202d68:	cmpi	m_ConvertEnergyToQuantity, _i0
000214:0x00202d78:	beq	0x202e00
000216:0x00202d80:	cmpcm	m_UpdateQuantityTimer, null
000216:0x00202d90:	bne	0x202dc0
000217:0x00202d98:	new	m_UpdateQuantityTimer, Timer
000219:0x00202dc0:	movetm	params, NULL
000219:0x00202dd0:	movefm	[0xb5b3c700], m_UpdateQuantityTimer
000219:0x00202de0:	call	
000224:0x00202e00:	cmpf	update_interval, _f0.000000
000224:0x00202e10:	bgt	0x202e28
000225:0x00202e18:	imove	update_interval, 15.00000
000227:0x00202e28:	call	
000230:0x00202e38:	adds	cfg_check_energy_limit, cfg_energy_manager, _s'energyStorageMax'
000232:0x00202e48:	ncall	GetGame()
000232:0x00202e50:	ncalli	CGame.ConfigIsExisting(cfg_check_energy_limit)
000232:0x00202e60:	cmpi	#return, _i0
000232:0x00202e70:	bne	0x202ea0
000232:0x00202e78:	cmpf	m_Energy, _f0.000000
000232:0x00202e88:	ble	0x202ea0
000234:0x00202e90:	move	m_EnergyStorageMax, m_Energy
000238:0x00202ea0:	adds	cfg_check_plug_types, cfg_energy_manager, _s'compatiblePlugTypes'
000240:0x00202eb0:	ncall	GetGame()
000240:0x00202eb8:	ncalli	CGame.ConfigIsExisting(cfg_check_plug_types)
000240:0x00202ec8:	cmpi	#return, _i0
000240:0x00202ed8:	beq	0x202f28
000242:0x00202ee0:	new	m_CompatiblePlugTypes, array<int>
000243:0x00202f00:	ncall	GetGame()
000243:0x00202f08:	movefm	[0xb5bda278], m_CompatiblePlugTypes
000243:0x00202f18:	ncalli	CGame.ConfigGetIntArray(cfg_check_plug_types, [0xb5bda278])
000246:0x00202f28:	call	
000246:0x00202f38:	move	@m00, #return
000246:0x00202f48:	cmpi	@m00, _i0
000246:0x00202f58:	ble	0x202f80
000247:0x00202f60:	new	m_PluggedDevices, array<EntityAI>
000249:0x00202f80:	cmpf	m_CordLength, _f0.000000
000249:0x00202f90:	bge	0x203008
000251:0x00202f98:	imove	m_CordLength, 0.00000
000252:0x00202fa8:	movefm	[0xb5b25dc0], m_ThisEntityAI
000252:0x00202fb8:	call	
000252:0x00202fc8:	adds	@s01, _s'Warning! ', #return
000252:0x00202fd8:	moves	@s00, @s01
000252:0x00202fe8:	adds	error_message_cord, @s00, _s': config parameter 'cordLength' is less than 0! Cord length should not be negative!'
000253:0x00202ff8:	icall	DPrint(error_message_cord)
000256:0x00203008:	call	
000256:0x00203018:	move	@m00, #return
000256:0x00203028:	cmpi	@m00, _i0
000256:0x00203038:	ble	0x203188
000258:0x00203040:	new	m_DeviceByPlugSelection, map<string,EntityAI>
000260:0x00203060:	movefm	[0xb5b25dc0], m_ThisEntityAI
000260:0x00203070:	call	
000260:0x00203080:	adds	@s02, _s'cfgVehicles ', #return
000260:0x00203090:	moves	@s01, @s02
000260:0x002030a0:	adds	@s01, @s01, _s' '
000260:0x002030b0:	moves	@s00, @s01
000260:0x002030c0:	adds	cfg_animation_sources, @s00, _s'AnimationSources '
000261:0x002030d0:	ncall	GetGame()
000261:0x002030d8:	ncalli	CGame.ConfigGetChildrenCount(cfg_animation_sources)
000261:0x002030e8:	move	animation_sources_count, #return
000263:0x002030f8:	imove	i_selection, 0x000000
000263:0x00203108:	jump	0x203128
000263:0x00203110:	move	@m00, i_selection
000263:0x00203120:	inc	i_selection
000263:0x00203128:	cmpi	i_selection, animation_sources_count
000263:0x00203138:	bge	0x203188
000267:0x00203140:	ncall	GetGame()
000267:0x00203148:	icall	
000268:0x00203160:	movefm	[0xb5b97830], m_DeviceByPlugSelection
000268:0x00203170:	icall	
000268:0x00203180:	jump	0x203110
000275:0x00203188:	citf	@f00, MAX_SOCKETS_COUNT
000275:0x00203198:	cmpf	m_SocketsCount, @f00
000275:0x002031a8:	ble	0x203270
000277:0x002031b0:	citf	m_SocketsCount, MAX_SOCKETS_COUNT
000278:0x002031c0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000278:0x002031d0:	call	
000278:0x002031e0:	adds	@s03, _s'Error! ', #return
000278:0x002031f0:	moves	@s02, @s03
000278:0x00203200:	adds	@s02, @s02, _s': config parameter 'powerSocketsCount' is higher than the current limit ('
000278:0x00203210:	moves	@s01, @s02
000278:0x00203220:	icall	ToString(MAX_SOCKETS_COUNT)
000278:0x00203230:	adds	@s01, @s01, #return
000278:0x00203240:	moves	@s00, @s01
000278:0x00203250:	adds	error_message_sockets, @s00, _s')! Raise the limit (constant MAX_SOCKETS_COUNT) or decrease the powerSocketsCount parameter for this device!'
000279:0x00203260:	icall	DPrint(error_message_sockets)
000284:0x00203270:	ncall	GetGame()
000284:0x00203278:	adds	@s01, cfg_energy_manager, _s'cordTextureFile'
000284:0x00203288:	moves	@s00, @s01
000284:0x00203298:	icall	
000286:0x002032a8:	cmpi	switch_on, _i0
000286:0x002032b8:	beq	0x2032d0
000288:0x002032c0:	call	
000291:0x002032d0:	imove	i, 0x000000
000291:0x002032e0:	jump	0x2032f0
000291:0x002032e8:	inc	i
000291:0x002032f0:	call	
000291:0x00203300:	cmpi	i, #return
000291:0x00203310:	bgt	0x203390
000293:0x00203318:	icall	ToString(i)
000293:0x00203328:	adds	@s02, SOCKET_, #return
000293:0x00203338:	moves	@s01, @s02
000293:0x00203348:	adds	@s01, @s01, _PLUGGED
000293:0x00203358:	moves	@s00, @s01
000293:0x00203368:	movefm	[0xb5b25dc0], m_ThisEntityAI
000293:0x00203378:	call	
000293:0x00203388:	jump	0x2032e8
000297:0x00203390:	imove	m_ShowSocketsInInventory, 0x000000
000298:0x002033a0:	call	
000298:0x002033b0:	move	@m00, #return
000298:0x002033c0:	cmpi	@m00, _i0
000298:0x002033d0:	ble	0x203458
000298:0x002033d8:	call	
000298:0x002033e8:	cmpi	#return, _i0
000298:0x002033f8:	beq	0x203458
000298:0x00203400:	movefm	[0xb5b25dc0], m_ThisEntityAI
000298:0x00203410:	call	
000298:0x00203420:	moves	@s00, #return
000298:0x00203430:	cmps	@s00, _s'MetalWire'
000298:0x00203440:	beq	0x203458
000300:0x00203448:	imove	m_ShowSocketsInInventory, 0x000001
000303:0x00203458:	call	
000303:0x00203468:	move	m_CanWork, #return
000305:0x00203478:	movefm	[0xb5b25dc0], m_ThisEntityAI
000305:0x00203488:	call	
000305:0x00203498:	rts
ComponentEnergyManager::GetCompType()
000316:0x002034a0:	imove	#return, 0x000001
000316:0x002034b0:	rts
000316:0x002034b8:	rts
ComponentEnergyManager::OnDeviceDestroyed()
000322:0x00203518:	movefm	[0xb5b25dc0], m_ThisEntityAI
000322:0x00203528:	call	
000322:0x00203538:	call	
000322:0x00203548:	move	was_working, #return
000322:0x00203558:	release	#return
000324:0x00203560:	call	
000325:0x00203570:	call	
000326:0x00203580:	call	
000327:0x00203590:	call	
000329:0x002035a0:	cmpi	was_working, _i0
000329:0x002035b0:	beq	0x2035d8
000330:0x002035b8:	movefm	[0xb5b25dc0], m_ThisEntityAI
000330:0x002035c8:	call	
000330:0x002035d8:	rts
ComponentEnergyManager::RefreshDebug()
000337:0x00203608:	cmpi	m_DebugPlugs, _i0
000337:0x00203618:	beq	0x2036e0
000339:0x00203620:	cmpcm	m_DebugUpdate, null
000339:0x00203630:	bne	0x203660
000340:0x00203638:	new	m_DebugUpdate, Timer
000342:0x00203660:	movefm	[0xb5b3c700], m_DebugUpdate
000342:0x00203670:	call	
000342:0x00203680:	cmpi	#return, _i0
000342:0x00203690:	bne	0x2036d8
000343:0x00203698:	movetm	params, NULL
000343:0x002036a8:	movefm	[0xb5b3c700], m_DebugUpdate
000343:0x002036b8:	call	
000343:0x002036d8:	jump	0x203720
000347:0x002036e0:	cmpc	m_DebugPlugArrow, null
000347:0x002036f0:	beq	0x203720
000349:0x002036f8:	movec	[0xd3136b20], m_DebugPlugArrow
000349:0x00203708:	ncalli	Shape.Destroy()
000350:0x00203710:	movec	m_DebugPlugArrow, NULL
000350:0x00203720:	rts
ComponentEnergyManager::GetDebugPlugs()
000357:0x00203728:	move	#return, m_DebugPlugs
000357:0x00203738:	rts
000357:0x00203740:	rts
ComponentEnergyManager::SetDebugPlugs()
000362:0x00203748:	move	m_DebugPlugs, newVal
000363:0x00203758:	call	
000363:0x00203768:	rts
ComponentEnergyManager::SwitchOn()
000375:0x00203798:	move	m_IsSwichedOnPreviousState, m_IsSwichedOn
000377:0x002037a8:	ncall	GetGame()
000377:0x002037b0:	ncalli	CGame.IsServer()
000377:0x002037b8:	cmpi	#return, _i0
000377:0x002037c8:	bne	0x2037f8
000377:0x002037d0:	ncall	GetGame()
000377:0x002037d8:	ncalli	CGame.IsMultiplayer()
000377:0x002037e0:	cmpi	#return, _i0
000377:0x002037f0:	bne	0x2038e0
000379:0x002037f8:	call	
000379:0x00203808:	cmpi	#return, _i0
000379:0x00203818:	beq	0x2038e0
000381:0x00203820:	imove	m_IsSwichedOn, 0x000001
000382:0x00203830:	call	
000384:0x00203840:	call	
000385:0x00203850:	call	
000388:0x00203860:	movem	original_caller, m_ThisEntityAI
000388:0x00203870:	call	
000390:0x00203880:	call	
000393:0x00203890:	ncall	GetGame()
000393:0x00203898:	movec	@c00, #return
000393:0x002038a8:	movec	@c01, GameScript
000393:0x002038b8:	movefm	@c02, m_ThisEntityAI
000393:0x002038c8:	icall	
000397:0x002038e0:	ncall	GetGame()
000397:0x002038e8:	ncalli	CGame.IsServer()
000397:0x002038f0:	cmpi	#return, _i0
000397:0x00203900:	bne	0x203980
000397:0x00203908:	ncall	GetGame()
000397:0x00203910:	ncalli	CGame.IsMultiplayer()
000397:0x00203918:	cmpi	#return, _i0
000397:0x00203928:	beq	0x203980
000399:0x00203930:	ncall	GetGame()
000399:0x00203938:	movec	@c00, #return
000399:0x00203948:	movec	@c01, GameScript
000399:0x00203958:	movefm	@c02, m_ThisEntityAI
000399:0x00203968:	icall	
000399:0x00203980:	rts
ComponentEnergyManager::SwitchOff()
000406:0x002039b0:	move	m_IsSwichedOnPreviousState, m_IsSwichedOn
000408:0x002039c0:	ncall	GetGame()
000408:0x002039c8:	ncalli	CGame.IsServer()
000408:0x002039d0:	cmpi	#return, _i0
000408:0x002039e0:	bne	0x203a10
000408:0x002039e8:	ncall	GetGame()
000408:0x002039f0:	ncalli	CGame.IsMultiplayer()
000408:0x002039f8:	cmpi	#return, _i0
000408:0x00203a08:	bne	0x203b20
000410:0x00203a10:	call	
000410:0x00203a20:	cmpi	#return, _i0
000410:0x00203a30:	beq	0x203b20
000412:0x00203a38:	imove	m_IsSwichedOn, 0x000000
000413:0x00203a48:	call	
000415:0x00203a58:	call	
000415:0x00203a68:	cmpi	#return, _i0
000415:0x00203a78:	beq	0x203aa0
000417:0x00203a80:	call	
000418:0x00203a90:	call	
000422:0x00203aa0:	movem	original_caller, m_ThisEntityAI
000422:0x00203ab0:	call	
000424:0x00203ac0:	call	
000427:0x00203ad0:	ncall	GetGame()
000427:0x00203ad8:	movec	@c00, #return
000427:0x00203ae8:	movec	@c01, GameScript
000427:0x00203af8:	movefm	@c02, m_ThisEntityAI
000427:0x00203b08:	icall	
000431:0x00203b20:	ncall	GetGame()
000431:0x00203b28:	ncalli	CGame.IsServer()
000431:0x00203b30:	cmpi	#return, _i0
000431:0x00203b40:	bne	0x203bd0
000431:0x00203b48:	ncall	GetGame()
000431:0x00203b50:	ncalli	CGame.IsMultiplayer()
000431:0x00203b58:	cmpi	#return, _i0
000431:0x00203b68:	beq	0x203bd0
000433:0x00203b70:	imove	m_IsSwichedOn, 0x000000
000434:0x00203b80:	ncall	GetGame()
000434:0x00203b88:	movec	@c00, #return
000434:0x00203b98:	movec	@c01, GameScript
000434:0x00203ba8:	movefm	@c02, m_ThisEntityAI
000434:0x00203bb8:	icall	
000434:0x00203bd0:	rts
ComponentEnergyManager::SetPassiveState()
000441:0x00203bd8:	move	m_IsPassiveDevice, state
000442:0x00203be8:	cmpi	m_IsPassiveDevice, _i0
000442:0x00203bf8:	bne	0x203c10
000444:0x00203c00:	call	
000444:0x00203c10:	rts
ComponentEnergyManager::UnplugDevice()
000451:0x00203d70:	ncall	GetGame()
000451:0x00203d78:	cmpc	#return, null
000451:0x00203d88:	beq	0x204078
000453:0x00203d90:	call	
000453:0x00203da0:	subi	index_start, #return, _i1
000454:0x00203db0:	imove	device_found, 0x000000
000456:0x00203dc0:	move	i, index_start
000456:0x00203dd0:	jump	0x203de0
000456:0x00203dd8:	dec	i
000456:0x00203de0:	cmpi	i, _i0
000456:0x00203df0:	blt	0x203e98
000458:0x00203df8:	call	
000458:0x00203e08:	icall	
000458:0x00203e18:	movetm	plugged_device, #return
000458:0x00203e28:	release	#return
000460:0x00203e30:	cmpm	plugged_device, device_to_unplug
000460:0x00203e40:	bne	0x203e88
000462:0x00203e48:	call	
000462:0x00203e58:	ncalli	array<EntityAI>.Remove(i)
000462:0x00203e68:	release	#return
000463:0x00203e70:	imove	device_found, 0x000001
000464:0x00203e80:	jump	0x203e98
000464:0x00203e88:	release	plugged_device
000464:0x00203e90:	jump	0x203dd8
000468:0x00203e98:	cmpi	device_found, _i0
000468:0x00203ea8:	beq	0x204078
000470:0x00203eb0:	call	
000470:0x00203ec0:	call	
000470:0x00203ed0:	move	socket_ID, #return
000470:0x00203ee0:	release	#return
000471:0x00203ee8:	call	
000472:0x00203ef8:	call	
000472:0x00203f08:	movetm	source, NULL
000472:0x00203f18:	call	
000472:0x00203f28:	release	#return
000473:0x00203f30:	call	
000473:0x00203f40:	call	
000473:0x00203f50:	release	#return
000474:0x00203f58:	call	
000474:0x00203f68:	call	
000474:0x00203f78:	release	#return
000475:0x00203f80:	call	
000475:0x00203f90:	movem	original_caller, m_ThisEntityAI
000475:0x00203fa0:	call	
000475:0x00203fb0:	release	#return
000477:0x00203fb8:	cmpi	m_DebugPlugs, _i0
000477:0x00203fc8:	beq	0x204010
000477:0x00203fd0:	cmpc	m_DebugPlugArrow, null
000477:0x00203fe0:	beq	0x204010
000479:0x00203fe8:	movec	[0xd3136b20], m_DebugPlugArrow
000479:0x00203ff8:	ncalli	Shape.Destroy()
000480:0x00204000:	movec	m_DebugPlugArrow, NULL
000483:0x00204010:	call	
000484:0x00204020:	call	
000484:0x00204030:	movem	last_energy_source, m_ThisEntityAI
000484:0x00204040:	call	
000484:0x00204050:	release	#return
000485:0x00204058:	call	
000486:0x00204068:	call	
000486:0x00204078:	rts
ComponentEnergyManager::UnplugThis()
000494:0x00204080:	ncall	GetGame()
000494:0x00204088:	cmpc	#return, null
000494:0x00204098:	beq	0x204120
000496:0x002040a0:	call	
000496:0x002040b0:	cmpcm	#return, null
000496:0x002040c0:	beq	0x204118
000498:0x002040c8:	call	
000498:0x002040d8:	call	
000498:0x002040e8:	movem	device_to_unplug, m_ThisEntityAI
000498:0x002040f8:	call	
000498:0x00204108:	release	#return
000498:0x00204110:	release	#return
000498:0x00204118:	release	#return
000498:0x00204120:	rts
ComponentEnergyManager::UnplugAllDevices()
000506:0x00204178:	call	
000506:0x00204188:	cmpcm	#return, null
000506:0x00204198:	beq	0x204238
000508:0x002041a0:	call	
000508:0x002041b0:	subi	index_start, #return, _i1
000509:0x002041c0:	move	i, index_start
000509:0x002041d0:	jump	0x2041e0
000509:0x002041d8:	dec	i
000509:0x002041e0:	cmpi	i, _i0
000509:0x002041f0:	blt	0x204238
000511:0x002041f8:	call	
000511:0x00204208:	icall	
000511:0x00204218:	call	
000511:0x00204228:	release	#return
000511:0x00204230:	jump	0x2041d8
000511:0x00204238:	release	#return
000511:0x00204240:	rts
ComponentEnergyManager::RestorePlugState()
000519:0x00204248:	move	m_RestorePlugState, state
000519:0x00204258:	rts
ComponentEnergyManager::SetEnergy()
000525:0x002042b8:	ncall	GetGame()
000525:0x002042c0:	ncalli	CGame.IsServer()
000525:0x002042c8:	cmpi	#return, _i0
000525:0x002042d8:	bne	0x204308
000525:0x002042e0:	ncall	GetGame()
000525:0x002042e8:	ncalli	CGame.IsMultiplayer()
000525:0x002042f0:	cmpi	#return, _i0
000525:0x00204300:	bne	0x2043f0
000527:0x00204308:	movefm	[0xb5b25dc0], m_ThisEntityAI
000527:0x00204318:	call	
000528:0x00204328:	move	old_energy, m_Energy
000529:0x00204338:	move	m_Energy, new_energy
000531:0x00204348:	call	
000531:0x00204358:	subf	@f01, old_energy, #return
000531:0x00204368:	move	@f00, @f01
000531:0x00204378:	cmpf	@f00, _f0.000000
000531:0x00204388:	ble	0x2043e0
000531:0x00204390:	cmpf	old_energy, new_energy
000531:0x002043a0:	beq	0x2043f0
000531:0x002043a8:	icall	Min(old_energy, new_energy)
000531:0x002043b8:	move	@f00, #return
000531:0x002043c8:	cmpf	@f00, _f0.000000
000531:0x002043d8:	bgt	0x2043f0
000533:0x002043e0:	call	
000533:0x002043f0:	rts
ComponentEnergyManager::SetEnergy0To1()
000541:0x002043f8:	ncall	GetGame()
000541:0x00204400:	ncalli	CGame.IsServer()
000541:0x00204408:	cmpi	#return, _i0
000541:0x00204418:	bne	0x204448
000541:0x00204420:	ncall	GetGame()
000541:0x00204428:	ncalli	CGame.IsMultiplayer()
000541:0x00204430:	cmpi	#return, _i0
000541:0x00204440:	bne	0x204480
000543:0x00204448:	call	
000543:0x00204458:	icall	Lerp(_f0.000000, #return, energy01)
000543:0x00204470:	call	
000543:0x00204480:	rts
ComponentEnergyManager::UpdateSelections()
000551:0x002046c8:	call	
000551:0x002046d8:	move	slots_c, #return
000553:0x002046e8:	imove	i, 0x000000
000553:0x002046f8:	jump	0x204708
000553:0x00204700:	inc	i
000553:0x00204708:	cmpi	i, slots_c
000553:0x00204718:	bge	0x204a20
000555:0x00204720:	call	
000555:0x00204730:	movem	plug_owner, #return
000555:0x00204740:	release	#return
000557:0x00204748:	cmpcm	plug_owner, null
000557:0x00204758:	beq	0x2048f0
000559:0x00204760:	addi	@m01, i, _i1
000559:0x00204770:	move	@m00, @m01
000559:0x00204780:	icall	ToString(@m00)
000559:0x00204790:	adds	@s01, SOCKET_, #return
000559:0x002047a0:	moves	@s00, @s01
000559:0x002047b0:	adds	plugged_selection, @s00, _PLUGGED
000560:0x002047c0:	addi	@m01, i, _i1
000560:0x002047d0:	move	@m00, @m01
000560:0x002047e0:	icall	ToString(@m00)
000560:0x002047f0:	adds	@s01, SOCKET_, #return
000560:0x00204800:	moves	@s00, @s01
000560:0x00204810:	adds	available_selection, @s00, _AVAILABLE
000561:0x00204820:	movefm	[0xb5b25dc0], m_ThisEntityAI
000561:0x00204830:	call	
000562:0x00204840:	movefm	[0xb5b25dc0], m_ThisEntityAI
000562:0x00204850:	call	
000563:0x00204860:	call	
000563:0x00204870:	call	
000563:0x00204880:	moves	texture_path, #return
000563:0x00204890:	release	#return
000564:0x00204898:	movefm	[0xb5b25dc0], m_ThisEntityAI
000564:0x002048a8:	call	
000564:0x002048b8:	move	selection_index, #return
000565:0x002048c8:	movefm	[0xb5b25dc0], m_ThisEntityAI
000565:0x002048d8:	ncalli	EntityAI.SetObjectTexture(selection_index, texture_path)
000565:0x002048e8:	jump	0x204a10
000569:0x002048f0:	addi	@m01, i, _i1
000569:0x00204900:	move	@m00, @m01
000569:0x00204910:	icall	ToString(@m00)
000569:0x00204920:	adds	@s02, SOCKET_, #return
000569:0x00204930:	moves	@s01, @s02
000569:0x00204940:	adds	@s01, @s01, _AVAILABLE
000569:0x00204950:	moves	@s00, @s01
000569:0x00204960:	movefm	[0xb5b25dc0], m_ThisEntityAI
000569:0x00204970:	call	
000570:0x00204980:	addi	@m01, i, _i1
000570:0x00204990:	move	@m00, @m01
000570:0x002049a0:	icall	ToString(@m00)
000570:0x002049b0:	adds	@s02, SOCKET_, #return
000570:0x002049c0:	moves	@s01, @s02
000570:0x002049d0:	adds	@s01, @s01, _PLUGGED
000570:0x002049e0:	moves	@s00, @s01
000570:0x002049f0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000570:0x00204a00:	call	
000570:0x00204a10:	release	plug_owner
000570:0x00204a18:	jump	0x204700
000575:0x00204a20:	call	
000575:0x00204a30:	cmpcm	#return, null
000575:0x00204a40:	beq	0x204a90
000577:0x00204a48:	movefm	[0xb5b25dc0], m_ThisEntityAI
000577:0x00204a58:	call	
000578:0x00204a68:	movefm	[0xb5b25dc0], m_ThisEntityAI
000578:0x00204a78:	call	
000578:0x00204a88:	jump	0x204ad0
000582:0x00204a90:	movefm	[0xb5b25dc0], m_ThisEntityAI
000582:0x00204aa0:	call	
000583:0x00204ab0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000583:0x00204ac0:	call	
000583:0x00204ad0:	release	#return
000583:0x00204ad8:	rts
ComponentEnergyManager::UpdatePlugState()
000591:0x00204c70:	movefm	[0xb5b25dc0], m_ThisEntityAI
000591:0x00204c80:	ncalli	EntityAI.GetHierarchyRootPlayer()
000591:0x00204c88:	cmpm	#return, null
000591:0x00204c98:	beq	0x204d70
000591:0x00204ca0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000591:0x00204cb0:	ncalli	EntityAI.GetHierarchyRootPlayer()
000591:0x00204cb8:	call	
000591:0x00204cc8:	cmpi	#return, _i0
000591:0x00204cd8:	beq	0x204d70
000594:0x00204ce0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000594:0x00204cf0:	ncalli	EntityAI.GetHierarchyRootPlayer()
000594:0x00204cf8:	movetm	player, #return
000597:0x00204d08:	ncalli	EntityAI.GetPosition()
000597:0x00204d10:	movev	pos_player, #return
000598:0x00204d20:	call	
000598:0x00204d38:	cmpi	#return, _i0
000598:0x00204d48:	bne	0x204d60
000600:0x00204d50:	call	
000600:0x00204d60:	release	player
000600:0x00204d68:	jump	0x204e38
000607:0x00204d70:	movefm	[0xb5b25dc0], m_ThisEntityAI
000607:0x00204d80:	ncalli	EntityAI.GetPosition()
000607:0x00204d88:	movev	pos_item, #return
000609:0x00204d98:	movefm	[0xb5b25dc0], m_ThisEntityAI
000609:0x00204da8:	ncalli	EntityAI.GetHierarchyParent()
000609:0x00204db0:	cmpm	#return, null
000609:0x00204dc0:	beq	0x204df8
000611:0x00204dc8:	movefm	[0xb5b25dc0], m_ThisEntityAI
000611:0x00204dd8:	ncalli	EntityAI.GetHierarchyParent()
000611:0x00204de0:	ncalli	EntityAI.GetPosition()
000611:0x00204de8:	movev	pos_item, #return
000614:0x00204df8:	call	
000614:0x00204e10:	cmpi	#return, _i0
000614:0x00204e20:	bne	0x204e38
000616:0x00204e28:	call	
000616:0x00204e38:	rts
ComponentEnergyManager::GetCompatiblePlugTypes()
000624:0x00204e40:	movem	IDs, m_CompatiblePlugTypes
000624:0x00204e50:	movem	IDs, IDs
000624:0x00204e60:	rts
ComponentEnergyManager::StoreEnergySourceIDs()
000630:0x00204e68:	move	m_EnergySourceStorageIDb1, b1
000631:0x00204e78:	move	m_EnergySourceStorageIDb2, b2
000632:0x00204e88:	move	m_EnergySourceStorageIDb3, b3
000633:0x00204e98:	move	m_EnergySourceStorageIDb4, b4
000633:0x00204ea8:	rts
ComponentEnergyManager::SetEnergyMaxPristine()
000639:0x00204eb0:	move	m_EnergyStorageMax, new_limit
000639:0x00204ec0:	rts
ComponentEnergyManager::SetCordLength()
000645:0x00204ec8:	move	m_CordLength, new_length
000645:0x00204ed8:	rts
ComponentEnergyManager::SetPlugType()
000651:0x00204ee0:	move	m_PlugType, new_type
000651:0x00204ef0:	rts
ComponentEnergyManager::SetAttachmentAction()
000657:0x00204ef8:	move	m_AttachmentActionType, new_action_type
000657:0x00204f08:	rts
ComponentEnergyManager::SetEnergyUsage()
000663:0x00204f10:	move	m_EnergyUsage, new_usage
000663:0x00204f20:	rts
ComponentEnergyManager::ResetEnergyUsage()
000669:0x00204f88:	movefm	[0xb5b25dc0], m_ThisEntityAI
000669:0x00204f98:	call	
000669:0x00204fa8:	adds	@s01, _s'CfgVehicles ', #return
000669:0x00204fb8:	moves	@s00, @s01
000669:0x00204fc8:	adds	cfg_energy_usage, @s00, _s' EnergyManager '
000670:0x00204fd8:	ncall	GetGame()
000670:0x00204fe0:	adds	@s01, cfg_energy_usage, _s'energyUsagePerSecond'
000670:0x00204ff0:	moves	@s00, @s01
000670:0x00205000:	ncalli	CGame.ConfigGetFloat(@s00)
000670:0x00205010:	move	m_EnergyUsage, #return
000670:0x00205020:	rts
ComponentEnergyManager::SetCordTextureFile()
000676:0x00205028:	moves	m_CordTextureFile, new_path
000676:0x00205038:	rts
ComponentEnergyManager::SetEnergySourceClient()
000682:0x00205040:	call	
000682:0x00205050:	rts
ComponentEnergyManager::SetDeviceBySocketID()
000688:0x00205058:	ctv	m_Sockets[id], plugged_device
000688:0x00205068:	rts
ComponentEnergyManager::SetElectricityIconVisibility()
000695:0x00205070:	move	m_HasElectricityIcon, make_visible
000695:0x00205080:	rts
ComponentEnergyManager::UpdateCanWork()
000701:0x002050e0:	ncall	GetGame()
000701:0x002050e8:	ncalli	CGame.IsServer()
000701:0x002050f0:	cmpi	#return, _i0
000701:0x00205100:	bne	0x205130
000701:0x00205108:	ncall	GetGame()
000701:0x00205110:	ncalli	CGame.IsMultiplayer()
000701:0x00205118:	cmpi	#return, _i0
000701:0x00205128:	bne	0x205258
000703:0x00205130:	call	
000703:0x00205140:	move	current_state, #return
000705:0x00205150:	cmpi	current_state, m_CanWork
000705:0x00205160:	beq	0x205258
000707:0x00205168:	move	m_CanWork, current_state
000708:0x00205178:	call	
000710:0x00205188:	cmpcm	m_ThisEntityAI, null
000710:0x00205198:	beq	0x205250
000710:0x002051a0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000710:0x002051b0:	ncalli	EntityAI.GetHierarchyParent()
000710:0x002051b8:	cmpm	#return, null
000710:0x002051c8:	beq	0x205250
000710:0x002051d0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000710:0x002051e0:	ncalli	EntityAI.GetHierarchyParent()
000710:0x002051e8:	call	
000710:0x002051f8:	cmpcm	#return, null
000710:0x00205208:	beq	0x205250
000712:0x00205210:	movefm	[0xb5b25dc0], m_ThisEntityAI
000712:0x00205220:	ncalli	EntityAI.GetHierarchyParent()
000712:0x00205228:	call	
000712:0x00205238:	call	
000712:0x00205248:	release	#return
000712:0x00205250:	release	#return
000712:0x00205258:	rts
ComponentEnergyManager::HandleMoveInsideCargo()
000720:0x00205260:	cmpi	m_AutoSwitchOffWhenInCargo, _i0
000720:0x00205270:	beq	0x2052b0
000722:0x00205278:	call	
000722:0x00205288:	cmpi	#return, _i0
000722:0x00205298:	beq	0x2052b0
000724:0x002052a0:	call	
000724:0x002052b0:	rts
ComponentEnergyManager::SetUpdateInterval()
000732:0x002052b8:	move	m_UpdateInterval, value
000732:0x002052c8:	rts
ComponentEnergyManager::GetRestorePlugState()
000738:0x002052d0:	move	#return, m_RestorePlugState
000738:0x002052e0:	rts
000738:0x002052e8:	rts
ComponentEnergyManager::PlugThisInto()
000744:0x002052f0:	call	
000744:0x00205300:	movem	device_to_plug, m_ThisEntityAI
000744:0x00205310:	call	
000744:0x00205328:	move	#return, #return
000744:0x00205338:	release	#return
000744:0x00205340:	rts
000744:0x00205348:	rts
ComponentEnergyManager::CanSwitchOn()
000750:0x00205350:	call	
000750:0x00205360:	cmpi	#return, _i0
000750:0x00205370:	bne	0x205390
000752:0x00205378:	imove	#return, 0x000001
000752:0x00205388:	rts
000755:0x00205390:	imove	#return, 0x000000
000755:0x002053a0:	rts
000755:0x002053a8:	rts
ComponentEnergyManager::CanWork()
000766:0x00205530:	ncall	GetGame()
000766:0x00205538:	ncalli	CGame.IsMultiplayer()
000766:0x00205540:	cmpi	#return, _i0
000766:0x00205550:	beq	0x205598
000766:0x00205558:	ncall	GetGame()
000766:0x00205560:	ncalli	CGame.IsClient()
000766:0x00205568:	cmpi	#return, _i0
000766:0x00205578:	beq	0x205598
000768:0x00205580:	move	#return, m_CanWork
000768:0x00205590:	rts
000771:0x00205598:	cmpcm	m_ThisEntityAI, null
000771:0x002055a8:	beq	0x205600
000771:0x002055b0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000771:0x002055c0:	call	
000771:0x002055d0:	cmpi	#return, _i0
000771:0x002055e0:	beq	0x205600
000773:0x002055e8:	imove	#return, 0x000000
000773:0x002055f8:	rts
000777:0x00205600:	move	energy_usage, test_energy
000778:0x00205610:	call	
000778:0x00205620:	move	gathered_energy, #return
000779:0x00205630:	call	
000779:0x00205640:	movem	energy_source, #return
000779:0x00205650:	release	#return
000781:0x00205658:	cmpf	energy_usage, _f-1.000000
000781:0x00205668:	bne	0x205690
000783:0x00205670:	call	
000783:0x00205680:	move	energy_usage, #return
000786:0x00205690:	call	
000786:0x002056a0:	cmpi	#return, _i0
000786:0x002056b0:	bne	0x2056d8
000788:0x002056b8:	imove	#return, 0x000000
000788:0x002056c8:	release	energy_source
000788:0x002056d0:	rts
000791:0x002056d8:	cmpf	gathered_energy, _f0.000000
000791:0x002056e8:	bgt	0x205728
000791:0x002056f0:	cmpf	energy_usage, _f0.000000
000791:0x00205700:	bgt	0x205728
000793:0x00205708:	imove	#return, 0x000000
000793:0x00205718:	release	energy_source
000793:0x00205720:	rts
000796:0x00205728:	imove	cycle_limit, 0x0001f4
000798:0x00205738:	cmpf	gathered_energy, energy_usage
000798:0x00205748:	bge	0x2059d8
000801:0x00205750:	cmpi	cycle_limit, _i0
000801:0x00205760:	ble	0x205788
000803:0x00205768:	move	@m00, cycle_limit
000803:0x00205778:	dec	cycle_limit
000803:0x00205780:	jump	0x205800
000807:0x00205788:	icall	DPrint(_s'Energy Manager ERROR: The 'cycle_limit' safety break had to be activated to prevent possible game freeze. Dumping debug information...')
000812:0x00205798:	call	
000812:0x002057a8:	cmpcm	#return, null
000812:0x002057b8:	beq	0x2057c0
000812:0x002057c0:	release	#return
000822:0x002057c8:	cmpcm	energy_source, null
000822:0x002057d8:	beq	0x2057e0
000829:0x002057e0:	imove	#return, 0x000000
000829:0x002057f0:	release	energy_source
000829:0x002057f8:	rts
000833:0x00205800:	cmpcm	energy_source, null
000833:0x00205810:	beq	0x205980
000833:0x00205818:	cmpm	energy_source, m_ThisEntityAI
000833:0x00205828:	beq	0x205980
000833:0x00205830:	call	
000833:0x00205840:	cmpi	#return, _i0
000833:0x00205850:	bne	0x205980
000833:0x00205858:	call	
000833:0x00205868:	cmpcm	#return, null
000833:0x00205878:	beq	0x205980
000833:0x00205880:	call	
000833:0x00205890:	call	
000833:0x002058a0:	cmpi	#return, _i0
000833:0x002058b0:	beq	0x205980
000833:0x002058b8:	call	
000833:0x002058c8:	call	
000833:0x002058d8:	cmpi	#return, _i0
000833:0x002058e8:	beq	0x205980
000835:0x002058f0:	call	
000835:0x00205900:	call	
000835:0x00205910:	addf	@f00, gathered_energy, #return
000835:0x00205920:	move	gathered_energy, @f00
000835:0x00205930:	release	#return
000836:0x00205938:	call	
000836:0x00205948:	call	
000836:0x00205958:	movem	energy_source, #return
000836:0x00205968:	release	#return
000836:0x00205970:	release	#return
000836:0x00205978:	jump	0x2059b8
000841:0x00205980:	imove	#return, 0x000000
000841:0x00205990:	release	#return
000841:0x00205998:	release	#return
000841:0x002059a0:	release	#return
000841:0x002059a8:	release	energy_source
000841:0x002059b0:	rts
000841:0x002059b8:	release	#return
000841:0x002059c0:	release	#return
000841:0x002059c8:	release	#return
000841:0x002059d0:	jump	0x205738
000846:0x002059d8:	imove	#return, 0x000001
000846:0x002059e8:	release	energy_source
000846:0x002059f0:	rts
000846:0x002059f8:	release	energy_source
000846:0x00205a00:	rts
ComponentEnergyManager::CheckWetness()
000852:0x00205a08:	movefm	[0xb5b25dc0], m_ThisEntityAI
000852:0x00205a18:	call	
000852:0x00205a28:	move	@f00, #return
000852:0x00205a38:	subf	@f02, _f1.000000, m_WetnessExposure
000852:0x00205a48:	move	@f01, @f02
000852:0x00205a58:	cmpf	@f00, @f01
000852:0x00205a68:	bgt	0x205a88
000852:0x00205a70:	imove	#return, 0x000001
000852:0x00205a80:	jump	0x205a98
000852:0x00205a88:	imove	#return, 0x000000
000852:0x00205a98:	rts
000852:0x00205aa0:	rts
ComponentEnergyManager::CanSwitchOff()
000858:0x00205aa8:	call	
000858:0x00205ab8:	cmpi	#return, _i0
000858:0x00205ac8:	beq	0x205ae8
000860:0x00205ad0:	imove	#return, 0x000000
000860:0x00205ae0:	rts
000863:0x00205ae8:	call	
000863:0x00205af8:	move	#return, #return
000863:0x00205b08:	rts
000863:0x00205b10:	rts
ComponentEnergyManager::GetPreviousSwitchState()
000869:0x00205b18:	move	#return, m_IsSwichedOnPreviousState
000869:0x00205b28:	rts
000869:0x00205b30:	rts
ComponentEnergyManager::IsSwitchedOn()
000875:0x00205b38:	move	#return, m_IsSwichedOn
000875:0x00205b48:	rts
000875:0x00205b50:	rts
ComponentEnergyManager::IsCordFolded()
000881:0x00205b58:	call	
000881:0x00205b68:	cmpi	#return, _i0
000881:0x00205b78:	beq	0x205b98
000882:0x00205b80:	imove	#return, 0x000000
000882:0x00205b90:	rts
000884:0x00205b98:	imove	#return, 0x000001
000884:0x00205ba8:	rts
000884:0x00205bb0:	rts
ComponentEnergyManager::IsPassive()
000890:0x00205bb8:	move	#return, m_IsPassiveDevice
000890:0x00205bc8:	rts
000890:0x00205bd0:	rts
ComponentEnergyManager::IsPlugged()
000896:0x00205bd8:	move	#return, m_IsPlugged
000896:0x00205be8:	rts
000896:0x00205bf0:	rts
ComponentEnergyManager::ConsumeEnergy()
000903:0x00205bf8:	movem	original_caller, m_ThisEntityAI
000903:0x00205c08:	call	
000903:0x00205c20:	move	#return, #return
000903:0x00205c30:	rts
000903:0x00205c38:	rts
ComponentEnergyManager::IsWorking()
000909:0x00205c40:	move	#return, m_IsWorking
000909:0x00205c50:	rts
000909:0x00205c58:	rts
ComponentEnergyManager::HasEnoughStoredEnergy()
000915:0x00205c60:	call	
000915:0x00205c70:	move	@f00, #return
000915:0x00205c80:	call	
000915:0x00205c90:	cmpf	@f00, #return
000915:0x00205ca0:	ble	0x205cc0
000917:0x00205ca8:	imove	#return, 0x000001
000917:0x00205cb8:	rts
000920:0x00205cc0:	imove	#return, 0x000000
000920:0x00205cd0:	rts
000920:0x00205cd8:	rts
ComponentEnergyManager::HasFreeSocket()
000926:0x00205dc0:	cmpi	socket_id, _i-1
000926:0x00205dd0:	bne	0x205e68
000928:0x00205dd8:	call	
000928:0x00205de8:	move	plugged_devices, #return
000929:0x00205df8:	call	
000929:0x00205e08:	move	plugged_devices_limit, #return
000931:0x00205e18:	cmpi	plugged_devices, plugged_devices_limit
000931:0x00205e28:	bge	0x205e48
000933:0x00205e30:	imove	#return, 0x000001
000933:0x00205e40:	rts
000936:0x00205e48:	imove	#return, 0x000000
000936:0x00205e58:	rts
000936:0x00205e60:	jump	0x205ef8
000940:0x00205e68:	call	
000940:0x00205e78:	movem	device, #return
000940:0x00205e88:	release	#return
000942:0x00205e90:	cmpcm	device, null
000942:0x00205ea0:	beq	0x205ed0
000944:0x00205ea8:	imove	#return, 0x000000
000944:0x00205eb8:	release	device
000944:0x00205ec0:	rts
000944:0x00205ec8:	jump	0x205ef0
000948:0x00205ed0:	imove	#return, 0x000001
000948:0x00205ee0:	release	device
000948:0x00205ee8:	rts
000948:0x00205ef0:	release	device
000948:0x00205ef8:	rts
ComponentEnergyManager::IsPlugCompatible()
000956:0x00205f88:	cmpi	plug_ID, PLUG_UNDEFINED
000956:0x00205f98:	bne	0x205fb8
000958:0x00205fa0:	imove	#return, 0x000001
000958:0x00205fb0:	rts
000961:0x00205fb8:	cmpcm	m_CompatiblePlugTypes, null
000961:0x00205fc8:	beq	0x2060a0
000963:0x00205fd0:	imove	i, 0x000000
000963:0x00205fe0:	jump	0x206000
000963:0x00205fe8:	move	@m00, i
000963:0x00205ff8:	inc	i
000963:0x00206000:	movefm	[0xd31561b0], m_CompatiblePlugTypes
000963:0x00206010:	ncalli	array<int>.Count()
000963:0x00206018:	cmpi	i, #return
000963:0x00206028:	bge	0x206098
000965:0x00206030:	movefm	[0xd31561b0], m_CompatiblePlugTypes
000965:0x00206040:	icall	
000965:0x00206050:	move	plug_ID_to_Check, #return
000967:0x00206060:	cmpi	plug_ID_to_Check, plug_ID
000967:0x00206070:	bne	0x206090
000969:0x00206078:	imove	#return, 0x000001
000969:0x00206088:	rts
000969:0x00206090:	jump	0x205fe8
000969:0x00206098:	jump	0x2060b8
000976:0x002060a0:	imove	#return, 0x000001
000976:0x002060b0:	rts
000979:0x002060b8:	imove	#return, 0x000000
000979:0x002060c8:	rts
000979:0x002060d0:	rts
ComponentEnergyManager::CanReceivePlugFrom()
000987:0x002060d8:	call	
000987:0x002060e8:	cmpi	#return, _i0
000987:0x002060f8:	beq	0x206280
000987:0x00206100:	cmpm	device_to_plug, m_ThisEntityAI
000987:0x00206110:	beq	0x206280
000989:0x00206118:	call	
000989:0x00206128:	call	
000989:0x00206138:	movefm	@c00, #return
000989:0x00206148:	cmpmc	@c00, m_ThisEntityAI
000989:0x00206158:	beq	0x206270
000991:0x00206160:	call	
000991:0x00206170:	call	
000991:0x00206180:	call	
000991:0x00206190:	cmpi	#return, _i0
000991:0x002061a0:	beq	0x206268
000993:0x002061a8:	call	
000993:0x002061b8:	ncalli	EntityAI.GetPosition()
000993:0x002061c0:	movefm	[0xb5b25dc0], m_ThisEntityAI
000993:0x002061d0:	pushv	#return
000993:0x002061d8:	ncalli	EntityAI.GetPosition()
000993:0x002061e0:	movev	@v01, #return
000993:0x002061f0:	popv	#return
000993:0x002061f8:	call	
000993:0x00206210:	cmpi	#return, _i0
000993:0x00206220:	beq	0x206260
000995:0x00206228:	imove	#return, 0x000001
000995:0x00206238:	release	#return
000995:0x00206240:	release	#return
000995:0x00206248:	release	#return
000995:0x00206250:	release	#return
000995:0x00206258:	rts
000995:0x00206260:	release	#return
000995:0x00206268:	release	#return
000995:0x00206270:	release	#return
000995:0x00206278:	release	#return
001001:0x00206280:	imove	#return, 0x000000
001001:0x00206290:	rts
001001:0x00206298:	rts
ComponentEnergyManager::CanBePluggedInto()
001007:0x002062a0:	call	
001007:0x002062b0:	movem	device_to_plug, m_ThisEntityAI
001007:0x002062c0:	call	
001007:0x002062d0:	move	#return, #return
001007:0x002062e0:	release	#return
001007:0x002062e8:	rts
001007:0x002062f0:	rts
ComponentEnergyManager::HasElectricityIcon()
001013:0x002062f8:	move	#return, m_HasElectricityIcon
001013:0x00206308:	rts
001013:0x00206310:	rts
ComponentEnergyManager::HasConversionOfEnergyToQuantity()
001019:0x00206318:	move	#return, m_ConvertEnergyToQuantity
001019:0x00206328:	rts
001019:0x00206330:	rts
ComponentEnergyManager::IsEnergySourceAtReach()
001040:0x00206460:	call	
001040:0x00206470:	cmpi	#return, _i0
001040:0x00206480:	bne	0x2064b8
001040:0x00206488:	cmpv	override_source_position, _v<-1.000000,-1.000000,-1.000000>
001040:0x00206498:	bne	0x2064b8
001042:0x002064a0:	imove	#return, 0x000000
001042:0x002064b0:	rts
001045:0x002064b8:	call	
001045:0x002064c8:	move	@f00, #return
001045:0x002064d8:	cmpf	@f00, _f0.000000
001045:0x002064e8:	bne	0x206508
001047:0x002064f0:	imove	#return, 0x000001
001047:0x00206500:	rts
001053:0x00206508:	cmpv	override_source_position, _v<-1.000000,-1.000000,-1.000000>
001053:0x00206518:	bne	0x2065c8
001055:0x00206520:	call	
001055:0x00206530:	movem	energy_source, #return
001055:0x00206540:	release	#return
001057:0x00206548:	cmpcm	energy_source, null
001057:0x00206558:	bne	0x206580
001058:0x00206560:	imove	#return, 0x000000
001058:0x00206570:	release	energy_source
001058:0x00206578:	rts
001060:0x00206580:	ncalli	EntityAI.GetPosition()
001060:0x00206588:	movev	source_pos, #return
001061:0x00206598:	ncall	Distance(from_position, source_pos)
001061:0x002065a8:	move	distance, #return
001061:0x002065b8:	release	energy_source
001061:0x002065c0:	jump	0x2065f8
001065:0x002065c8:	movev	source_pos, override_source_position
001066:0x002065d8:	ncall	Distance(from_position, source_pos)
001066:0x002065e8:	move	distance, #return
001069:0x002065f8:	call	
001069:0x00206608:	addf	@f01, #return, add_tolerance
001069:0x00206618:	move	@f00, @f01
001069:0x00206628:	cmpf	distance, @f00
001069:0x00206638:	ble	0x206660
001071:0x00206640:	imove	#return, 0x000000
001071:0x00206650:	rts
001071:0x00206658:	jump	0x206678
001075:0x00206660:	imove	#return, 0x000001
001075:0x00206670:	rts
001075:0x00206678:	rts
ComponentEnergyManager::HasVisibleSocketsInInventory()
001081:0x00206680:	move	#return, m_ShowSocketsInInventory
001081:0x00206690:	rts
001081:0x00206698:	rts
ComponentEnergyManager::IsSelectionAPlug()
001087:0x00206778:	call	
001087:0x00206788:	cmpcm	#return, null
001087:0x00206798:	beq	0x206878
001089:0x002067a0:	call	
001089:0x002067b0:	move	socket_count, #return
001091:0x002067c0:	move	i, socket_count
001091:0x002067d0:	jump	0x2067e0
001091:0x002067d8:	dec	i
001091:0x002067e0:	cmpi	i, _i0
001091:0x002067f0:	blt	0x206878
001093:0x002067f8:	icall	ToString(i)
001093:0x00206808:	adds	@s01, SOCKET_, #return
001093:0x00206818:	moves	@s00, @s01
001093:0x00206828:	adds	real_selection, @s00, _PLUGGED
001095:0x00206838:	cmps	selection_to_test, real_selection
001095:0x00206848:	bne	0x206870
001097:0x00206850:	imove	#return, 0x000001
001097:0x00206860:	release	#return
001097:0x00206868:	rts
001097:0x00206870:	jump	0x2067d8
001097:0x00206878:	release	#return
001102:0x00206880:	imove	#return, 0x000000
001102:0x00206890:	rts
001102:0x00206898:	rts
ComponentEnergyManager::GetSocketsCount()
001111:0x002068a0:	cfti	#return, m_SocketsCount
001111:0x002068b0:	rts
001111:0x002068b8:	rts
ComponentEnergyManager::GetPlugType()
001117:0x002068c0:	move	#return, m_PlugType
001117:0x002068d0:	rts
001117:0x002068d8:	rts
ComponentEnergyManager::GetAttachmentAction()
001123:0x002068e0:	move	#return, m_AttachmentActionType
001123:0x002068f0:	rts
001123:0x002068f8:	rts
ComponentEnergyManager::GetEnergySourceStorageIDb1()
001129:0x00206900:	move	#return, m_EnergySourceStorageIDb1
001129:0x00206910:	rts
001129:0x00206918:	rts
ComponentEnergyManager::GetEnergySourceStorageIDb2()
001135:0x00206920:	move	#return, m_EnergySourceStorageIDb2
001135:0x00206930:	rts
001135:0x00206938:	rts
ComponentEnergyManager::GetEnergySourceStorageIDb3()
001141:0x00206940:	move	#return, m_EnergySourceStorageIDb3
001141:0x00206950:	rts
001141:0x00206958:	rts
ComponentEnergyManager::GetEnergySourceStorageIDb4()
001147:0x00206960:	move	#return, m_EnergySourceStorageIDb4
001147:0x00206970:	rts
001147:0x00206978:	rts
ComponentEnergyManager::GetEnergySourceNetworkIDLow()
001153:0x00206980:	move	#return, m_EnergySourceNetworkIDLow
001153:0x00206990:	rts
001153:0x00206998:	rts
ComponentEnergyManager::GetEnergySourceNetworkIDHigh()
001159:0x002069a0:	move	#return, m_EnergySourceNetworkIDHigh
001159:0x002069b0:	rts
001159:0x002069b8:	rts
ComponentEnergyManager::GetPluggedDevicesCount()
001165:0x002069c0:	call	
001165:0x002069d0:	cmpcm	#return, null
001165:0x002069e0:	beq	0x206a28
001167:0x002069e8:	call	
001167:0x002069f8:	ncalli	array<EntityAI>.Count()
001167:0x00206a00:	move	#return, #return
001167:0x00206a10:	release	#return
001167:0x00206a18:	release	#return
001167:0x00206a20:	rts
001167:0x00206a28:	release	#return
001170:0x00206a30:	imove	#return, 0x000000
001170:0x00206a40:	rts
001170:0x00206a48:	rts
ComponentEnergyManager::GetEnergy0To100()
001176:0x00206a78:	cmpf	m_EnergyStorageMax, _f0.000000
001176:0x00206a88:	ble	0x206b08
001178:0x00206a90:	divf	@f02, m_Energy, m_EnergyStorageMax
001178:0x00206aa0:	move	@f01, @f02
001178:0x00206ab0:	mulf	@f01, @f01, _f100.000000
001178:0x00206ac0:	move	@f00, @f01
001178:0x00206ad0:	icall	Round(@f00)
001178:0x00206ae0:	cfti	coef, #return
001179:0x00206af0:	move	#return, coef
001179:0x00206b00:	rts
001182:0x00206b08:	imove	#return, 0x000000
001182:0x00206b18:	rts
001182:0x00206b20:	rts
ComponentEnergyManager::GetEnergy0To1()
001188:0x00206b28:	cmpf	m_EnergyStorageMax, _f0.000000
001188:0x00206b38:	ble	0x206b58
001190:0x00206b40:	divf	#return, m_Energy, m_EnergyStorageMax
001190:0x00206b50:	rts
001193:0x00206b58:	imove	#return, 0.00000
001193:0x00206b68:	rts
001193:0x00206b70:	rts
ComponentEnergyManager::GetUpdateInterval()
001205:0x00206b78:	move	#return, m_UpdateInterval
001205:0x00206b88:	rts
001205:0x00206b90:	rts
ComponentEnergyManager::GetWetnessExposure()
001211:0x00206b98:	move	#return, m_WetnessExposure
001211:0x00206ba8:	rts
001211:0x00206bb0:	rts
ComponentEnergyManager::GetEnergyUsage()
001217:0x00206bb8:	move	#return, m_EnergyUsage
001217:0x00206bc8:	rts
001217:0x00206bd0:	rts
ComponentEnergyManager::GetEnergy()
001223:0x00206bd8:	move	#return, m_Energy
001223:0x00206be8:	rts
001223:0x00206bf0:	rts
ComponentEnergyManager::AddEnergy()
001229:0x00206d08:	cmpf	added_energy, _f0.000000
001229:0x00206d18:	beq	0x206e30
001240:0x00206d20:	cmpf	added_energy, _f0.000000
001240:0x00206d30:	ble	0x206d50
001240:0x00206d38:	imove	energy_was_added, 0x000001
001240:0x00206d48:	jump	0x206d60
001240:0x00206d50:	imove	energy_was_added, 0x000000
001242:0x00206d60:	call	
001242:0x00206d70:	addf	energy_to_clamp, #return, added_energy
001243:0x00206d80:	call	
001243:0x00206d90:	icall	Clamp(energy_to_clamp, _f0.000000, #return)
001243:0x00206da8:	move	clamped_energy, #return
001244:0x00206db8:	call	
001245:0x00206dc8:	call	
001247:0x00206dd8:	cmpi	energy_was_added, _i0
001247:0x00206de8:	beq	0x206e08
001248:0x00206df0:	call	
001248:0x00206e00:	jump	0x206e18
001250:0x00206e08:	call	
001252:0x00206e18:	subf	#return, energy_to_clamp, clamped_energy
001252:0x00206e28:	rts
001255:0x00206e30:	imove	#return, 0.00000
001255:0x00206e40:	rts
001255:0x00206e48:	rts
ComponentEnergyManager::GetEnergyMax()
001261:0x00206f28:	imove	max_health, 0.00000
001263:0x00206f38:	movefm	[0xb5b25dc0], m_ThisEntityAI
001263:0x00206f48:	ncalli	EntityAI.HasDamageSystem()
001263:0x00206f50:	cmpi	#return, _i0
001263:0x00206f60:	beq	0x206f98
001264:0x00206f68:	movefm	[0xb5b25dc0], m_ThisEntityAI
001264:0x00206f78:	ncalli	EntityAI.GetMaxHealth(_s'', _s'')
001264:0x00206f88:	move	max_health, #return
001268:0x00206f98:	cmpf	max_health, _f0.000000
001268:0x00206fa8:	beq	0x206fc8
001268:0x00206fb0:	cmpf	m_ReduceMaxEnergyByDamageCoef, _f0.000000
001268:0x00206fc0:	bne	0x206ff0
001269:0x00206fc8:	call	
001269:0x00206fd8:	move	#return, #return
001269:0x00206fe8:	rts
001271:0x00206ff0:	imove	health, 100.00000
001273:0x00207000:	ncall	GetGame()
001273:0x00207008:	ncalli	CGame.IsServer()
001273:0x00207010:	cmpi	#return, _i0
001273:0x00207020:	bne	0x207050
001273:0x00207028:	ncall	GetGame()
001273:0x00207030:	ncalli	CGame.IsMultiplayer()
001273:0x00207038:	cmpi	#return, _i0
001273:0x00207048:	bne	0x207080
001274:0x00207050:	movefm	[0xb5b25dc0], m_ThisEntityAI
001274:0x00207060:	ncalli	EntityAI.GetHealth(_s'', _s'')
001274:0x00207070:	move	health, #return
001276:0x00207080:	divf	@f01, health, max_health
001276:0x00207090:	move	@f00, @f01
001276:0x002070a0:	subf	damage_coef, _f1.000000, @f00
001278:0x002070b0:	call	
001278:0x002070c0:	mulf	@f02, damage_coef, m_ReduceMaxEnergyByDamageCoef
001278:0x002070d0:	move	@f01, @f02
001278:0x002070e0:	subf	@f01, _f1.000000, @f01
001278:0x002070f0:	move	@f00, @f01
001278:0x00207100:	mulf	#return, #return, @f00
001278:0x00207110:	rts
001278:0x00207118:	rts
ComponentEnergyManager::GetEnergyMaxPristine()
001284:0x00207120:	move	#return, m_EnergyStorageMax
001284:0x00207130:	rts
001284:0x00207138:	rts
ComponentEnergyManager::GetCordLength()
001290:0x00207140:	move	#return, m_CordLength
001290:0x00207150:	rts
001290:0x00207158:	rts
ComponentEnergyManager::GetEnergySource()
001296:0x00207160:	movem	#return, m_EnergySource
001296:0x00207170:	rts
001296:0x00207178:	rts
ComponentEnergyManager::GetDeviceBySocketID()
001302:0x00207180:	cfv	@c00, m_Sockets[id]
001302:0x00207190:	movetm	#return, @c00
001302:0x002071a0:	rts
001302:0x002071a8:	rts
ComponentEnergyManager::GetPlugOwner()
001308:0x002071b0:	movefm	[0xb5b97830], m_DeviceByPlugSelection
001308:0x002071c0:	icall	
001308:0x002071d0:	cmpi	#return, _i0
001308:0x002071e0:	beq	0x207220
001310:0x002071e8:	movefm	[0xb5b97830], m_DeviceByPlugSelection
001310:0x002071f8:	icall	
001310:0x00207208:	movetm	#return, #return
001310:0x00207218:	rts
001313:0x00207220:	movetm	#return, NULL
001313:0x00207230:	rts
001313:0x00207238:	rts
ComponentEnergyManager::GetPluggedDevice()
001319:0x00207240:	call	
001319:0x00207250:	move	@m00, #return
001319:0x00207260:	cmpi	@m00, _i0
001319:0x00207270:	ble	0x2072b8
001321:0x00207278:	call	
001321:0x00207288:	icall	
001321:0x00207298:	movetm	#return, #return
001321:0x002072a8:	release	#return
001321:0x002072b0:	rts
001324:0x002072b8:	movetm	#return, NULL
001324:0x002072c8:	rts
001324:0x002072d0:	rts
ComponentEnergyManager::GetCordTextureFile()
001330:0x002072d8:	moves	#return, m_CordTextureFile
001330:0x002072e8:	rts
001330:0x002072f0:	rts
ComponentEnergyManager::GetPluggedDevices()
001336:0x002072f8:	movem	#return, m_PluggedDevices
001336:0x00207308:	rts
001336:0x00207310:	rts
ComponentEnergyManager::GetPoweredDevices()
001342:0x00207420:	new	return_array, array<EntityAI>
001343:0x00207440:	call	
001343:0x00207450:	move	plugged_devices_c, #return
001344:0x00207460:	imove	i, 0x000000
001344:0x00207470:	jump	0x207480
001344:0x00207478:	inc	i
001344:0x00207480:	cmpi	i, plugged_devices_c
001344:0x00207490:	bge	0x207528
001346:0x00207498:	call	
001346:0x002074a8:	icall	
001346:0x002074b8:	movetm	device, #return
001346:0x002074c8:	release	#return
001347:0x002074d0:	call	
001347:0x002074e0:	cmpi	#return, _i0
001347:0x002074f0:	beq	0x207518
001349:0x002074f8:	movefm	@c00, device
001349:0x00207508:	icall	
001349:0x00207518:	release	device
001349:0x00207520:	jump	0x207478
001353:0x00207528:	movem	#return, return_array
001353:0x00207538:	release	return_array
001353:0x00207540:	rts
001353:0x00207548:	release	return_array
001353:0x00207550:	rts
ComponentEnergyManager::OnWork()
001364:0x00207558:	movefm	[0xb5b25dc0], m_ThisEntityAI
001364:0x00207568:	call	
001364:0x00207578:	rts
ComponentEnergyManager::OnIsPlugged()
001370:0x00207580:	cmpi	m_DebugPlugs, _i0
001370:0x00207590:	beq	0x207650
001372:0x00207598:	cmpcm	m_DebugUpdate, null
001372:0x002075a8:	bne	0x2075d8
001373:0x002075b0:	new	m_DebugUpdate, Timer
001375:0x002075d8:	movefm	[0xb5b3c700], m_DebugUpdate
001375:0x002075e8:	call	
001375:0x002075f8:	cmpi	#return, _i0
001375:0x00207608:	bne	0x207650
001376:0x00207610:	movetm	params, NULL
001376:0x00207620:	movefm	[0xb5b3c700], m_DebugUpdate
001376:0x00207630:	call	
001379:0x00207650:	call	
001380:0x00207660:	movefm	[0xb5b25dc0], m_ThisEntityAI
001380:0x00207670:	call	
001380:0x00207680:	rts
ComponentEnergyManager::OnIsUnplugged()
001386:0x00207688:	call	
001387:0x00207698:	movefm	[0xb5b25dc0], m_ThisEntityAI
001387:0x002076a8:	call	
001387:0x002076b8:	rts
ComponentEnergyManager::OnOwnSocketTaken()
001394:0x00207740:	call	
001394:0x00207750:	call	
001394:0x00207760:	move	@m00, #return
001394:0x00207770:	cmpi	@m00, PLUG_COMMON_APPLIANCE
001394:0x00207780:	bne	0x207810
001394:0x00207788:	movefm	[0xb5b25dc0], m_ThisEntityAI
001394:0x00207798:	call	
001394:0x002077a8:	cmpi	#return, _i0
001394:0x002077b8:	beq	0x207810
001397:0x002077c0:	movefm	[0xb5b25dc0], m_ThisEntityAI
001397:0x002077d0:	call	
001397:0x002077f0:	movem	sound_plug, sound
001397:0x00207800:	release	sound
001397:0x00207808:	release	sound_plug
001397:0x00207810:	release	#return
001400:0x00207818:	movefm	[0xb5b25dc0], m_ThisEntityAI
001400:0x00207828:	call	
001400:0x00207838:	rts
ComponentEnergyManager::OnOwnSocketReleased()
001407:0x002078c0:	call	
001407:0x002078d0:	call	
001407:0x002078e0:	move	@m00, #return
001407:0x002078f0:	cmpi	@m00, PLUG_COMMON_APPLIANCE
001407:0x00207900:	bne	0x207990
001407:0x00207908:	movefm	[0xb5b25dc0], m_ThisEntityAI
001407:0x00207918:	call	
001407:0x00207928:	cmpi	#return, _i0
001407:0x00207938:	beq	0x207990
001410:0x00207940:	movefm	[0xb5b25dc0], m_ThisEntityAI
001410:0x00207950:	call	
001410:0x00207970:	movem	sound_unplug, sound
001410:0x00207980:	release	sound
001410:0x00207988:	release	sound_unplug
001410:0x00207990:	release	#return
001413:0x00207998:	movefm	[0xb5b25dc0], m_ThisEntityAI
001413:0x002079a8:	call	
001413:0x002079b8:	rts
ComponentEnergyManager::OnAttachmentAdded()
001420:0x00207a20:	call	
001420:0x00207a30:	move	attachment_action_type, #return
001422:0x00207a40:	cmpi	attachment_action_type, PLUG_THIS_INTO_ATTACHMENT
001422:0x00207a50:	bne	0x207ac8
001424:0x00207a58:	call	
001424:0x00207a68:	movem	device_to_plug, m_ThisEntityAI
001424:0x00207a78:	call	
001424:0x00207a88:	cmpi	#return, _i0
001424:0x00207a98:	beq	0x207ab8
001426:0x00207aa0:	call	
001426:0x00207ab8:	release	#return
001426:0x00207ac0:	jump	0x207b20
001429:0x00207ac8:	cmpi	attachment_action_type, PLUG_ATTACHMENTS_INTO_THIS
001429:0x00207ad8:	bne	0x207b20
001431:0x00207ae0:	call	
001431:0x00207af0:	movem	energy_source, m_ThisEntityAI
001431:0x00207b00:	call	
001431:0x00207b18:	release	#return
001431:0x00207b20:	rts
ComponentEnergyManager::OnAttachmentRemoved()
001438:0x00207b50:	call	
001438:0x00207b60:	move	attachment_action_type, #return
001440:0x00207b70:	cmpi	attachment_action_type, PLUG_THIS_INTO_ATTACHMENT
001440:0x00207b80:	bne	0x207bd0
001442:0x00207b88:	call	
001442:0x00207b98:	cmpm	elec_device, #return
001442:0x00207ba8:	bne	0x207bc0
001444:0x00207bb0:	call	
001444:0x00207bc0:	release	#return
001444:0x00207bc8:	jump	0x207c10
001447:0x00207bd0:	cmpi	attachment_action_type, PLUG_ATTACHMENTS_INTO_THIS
001447:0x00207be0:	bne	0x207c10
001449:0x00207be8:	call	
001449:0x00207bf8:	call	
001449:0x00207c08:	release	#return
001449:0x00207c10:	rts
ComponentEnergyManager::StartUpdates()
001456:0x00207c40:	cmpi	m_IsPassiveDevice, _i0
001456:0x00207c50:	bne	0x207d20
001458:0x00207c58:	cmpcm	m_UpdateTimer, null
001458:0x00207c68:	bne	0x207c98
001459:0x00207c70:	new	m_UpdateTimer, Timer
001461:0x00207c98:	movefm	[0xb5b3c700], m_UpdateTimer
001461:0x00207ca8:	call	
001461:0x00207cb8:	cmpi	#return, _i0
001461:0x00207cc8:	bne	0x207d20
001463:0x00207cd0:	call	
001463:0x00207ce0:	movetm	params, NULL
001463:0x00207cf0:	movefm	[0xb5b3c700], m_UpdateTimer
001463:0x00207d00:	call	
001463:0x00207d20:	rts
ComponentEnergyManager::OnEnergyConsumed()
001471:0x00207d28:	movefm	[0xb5b25dc0], m_ThisEntityAI
001471:0x00207d38:	call	
001471:0x00207d48:	rts
ComponentEnergyManager::OnEnergyAdded()
001477:0x00207d50:	cmpcm	m_UpdateQuantityTimer, null
001477:0x00207d60:	beq	0x207d98
001479:0x00207d68:	movefm	[0xb5b3c700], m_UpdateQuantityTimer
001479:0x00207d78:	call	
001480:0x00207d88:	movetm	m_UpdateQuantityTimer, NULL
001483:0x00207d98:	movefm	[0xb5b25dc0], m_ThisEntityAI
001483:0x00207da8:	call	
001483:0x00207db8:	rts
ComponentEnergyManager::StopUpdates()
001494:0x00207dc0:	cmpcm	m_UpdateTimer, null
001494:0x00207dd0:	beq	0x207e08
001496:0x00207dd8:	movefm	[0xb5b3c700], m_UpdateTimer
001496:0x00207de8:	call	
001497:0x00207df8:	movetm	m_UpdateTimer, NULL
001497:0x00207e08:	rts
ComponentEnergyManager::InteractBranch()
001506:0x00207ed8:	call	
001507:0x00207ef0:	call	
001507:0x00207f00:	move	@m00, #return
001507:0x00207f10:	cmpi	@m00, _i0
001507:0x00207f20:	ble	0x208020
001509:0x00207f28:	call	
001509:0x00207f38:	movem	devices, #return
001509:0x00207f48:	release	#return
001511:0x00207f50:	ncalli	array<EntityAI>.Count()
001511:0x00207f58:	move	#cnt, #return
001511:0x00207f68:	imove	#key, 0x000000
001511:0x00207f78:	jump	0x207f88
001511:0x00207f80:	inc	#key
001511:0x00207f88:	cmpi	#key, #cnt
001511:0x00207f98:	bge	0x208010
001511:0x00207fa0:	icall	
001511:0x00207fb0:	movetm	device, #return
001513:0x00207fc0:	cmpm	device, originalCaller
001513:0x00207fd0:	beq	0x208008
001515:0x00207fd8:	call	
001515:0x00207fe8:	call	
001515:0x00208000:	release	#return
001515:0x00208008:	jump	0x207f80
001515:0x00208010:	release	device
001515:0x00208018:	release	devices
001515:0x00208020:	rts
ComponentEnergyManager::OnInteractBranch()
001524:0x00208028:	movefm	[0xb5b25dc0], m_ThisEntityAI
001524:0x00208038:	ncalli	EntityAI.IncreaseLifetime()
001524:0x00208040:	rts
ComponentEnergyManager::WakeUpWholeBranch()
001531:0x002080e8:	call	
001531:0x002080f8:	move	@m00, #return
001531:0x00208108:	cmpi	@m00, _i0
001531:0x00208118:	ble	0x208288
001533:0x00208120:	call	
001533:0x00208130:	movem	plugged_devices, #return
001533:0x00208140:	release	#return
001534:0x00208148:	ncalli	array<EntityAI>.Count()
001534:0x00208150:	move	plugged_devices_c, #return
001536:0x00208160:	imove	i, 0x000000
001536:0x00208170:	jump	0x208180
001536:0x00208178:	inc	i
001536:0x00208180:	cmpi	i, plugged_devices_c
001536:0x00208190:	bge	0x208280
001538:0x00208198:	icall	
001538:0x002081a8:	movetm	device, #return
001539:0x002081b8:	cmpm	device, original_caller
001539:0x002081c8:	beq	0x208270
001541:0x002081d0:	call	
001541:0x002081e0:	call	
001541:0x002081f0:	release	#return
001542:0x002081f8:	call	
001542:0x00208208:	call	
001542:0x00208218:	release	#return
001543:0x00208220:	call	
001543:0x00208230:	call	
001543:0x00208240:	release	#return
001544:0x00208248:	call	
001544:0x00208258:	call	
001544:0x00208268:	release	#return
001544:0x00208270:	release	device
001544:0x00208278:	jump	0x208178
001544:0x00208280:	release	plugged_devices
001544:0x00208288:	rts
ComponentEnergyManager::PlugCordIntoSocket()
001554:0x00208368:	cmpi	socket_id, _i0
001554:0x00208378:	blt	0x2083f0
001556:0x00208380:	call	
001556:0x00208390:	movem	plug_owner_by_socket, #return
001556:0x002083a0:	release	#return
001558:0x002083a8:	cmpcm	plug_owner_by_socket, null
001558:0x002083b8:	bne	0x2083e8
001560:0x002083c0:	call	
001561:0x002083d8:	release	plug_owner_by_socket
001561:0x002083e0:	rts
001561:0x002083e8:	release	plug_owner_by_socket
001565:0x002083f0:	call	
001565:0x00208400:	move	slots_c, #return
001567:0x00208410:	imove	i, 0x000000
001567:0x00208420:	jump	0x208430
001567:0x00208428:	inc	i
001567:0x00208430:	cmpi	i, slots_c
001567:0x00208440:	bge	0x2084b8
001569:0x00208448:	call	
001569:0x00208458:	movem	plug_owner, #return
001569:0x00208468:	release	#return
001571:0x00208470:	cmpcm	plug_owner, null
001571:0x00208480:	bne	0x2084a8
001573:0x00208488:	call	
001574:0x002084a0:	jump	0x2084b8
001574:0x002084a8:	release	plug_owner
001574:0x002084b0:	jump	0x208428
001574:0x002084b8:	rts
ComponentEnergyManager::UpdateSocketSelections()
001582:0x00208598:	call	
001584:0x002085b0:	addi	@m01, socket_id, _i1
001584:0x002085c0:	move	@m00, @m01
001584:0x002085d0:	icall	ToString(@m00)
001584:0x002085e0:	adds	@s01, SOCKET_, #return
001584:0x002085f0:	moves	@s00, @s01
001584:0x00208600:	adds	plugged_selection, @s00, _PLUGGED
001585:0x00208610:	call	
001586:0x00208628:	movefm	[0xb5b25dc0], m_ThisEntityAI
001586:0x00208638:	call	
001588:0x00208648:	addi	@m01, socket_id, _i1
001588:0x00208658:	move	@m00, @m01
001588:0x00208668:	icall	ToString(@m00)
001588:0x00208678:	adds	@s01, SOCKET_, #return
001588:0x00208688:	moves	@s00, @s01
001588:0x00208698:	adds	unplugged_selection, @s00, _AVAILABLE
001589:0x002086a8:	movefm	[0xb5b25dc0], m_ThisEntityAI
001589:0x002086b8:	call	
001590:0x002086c8:	call	
001590:0x002086d8:	call	
001590:0x002086e8:	moves	texture_path, #return
001590:0x002086f8:	release	#return
001591:0x00208700:	movefm	[0xb5b25dc0], m_ThisEntityAI
001591:0x00208710:	call	
001591:0x00208720:	move	selection_index, #return
001592:0x00208730:	movefm	[0xb5b25dc0], m_ThisEntityAI
001592:0x00208740:	ncalli	EntityAI.SetObjectTexture(selection_index, texture_path)
001593:0x00208750:	call	
001593:0x00208760:	call	
001593:0x00208770:	release	#return
001593:0x00208778:	rts
ComponentEnergyManager::SetEnergySource()
001600:0x00208780:	movem	m_EnergySource, source
001602:0x00208790:	cmpcm	source, null
001602:0x002087a0:	beq	0x2087d0
001604:0x002087a8:	imove	m_IsPlugged, 0x000001
001605:0x002087b8:	call	
001605:0x002087c8:	jump	0x208800
001609:0x002087d0:	imove	m_IsPlugged, 0x000000
001610:0x002087e0:	imove	m_EnergySourceNetworkIDLow, 0xffffffff
001611:0x002087f0:	imove	m_EnergySourceNetworkIDHigh, 0xffffffff
001614:0x00208800:	cmpcm	m_EnergySource, null
001614:0x00208810:	beq	0x208838
001616:0x00208818:	movefm	[0xb5b25dc0], m_EnergySource
001616:0x00208828:	icall	
001623:0x00208838:	call	
001623:0x00208848:	rts
ComponentEnergyManager::PlugInDevice()
001629:0x00208878:	call	
001629:0x00208888:	cmpi	#return, _i0
001629:0x00208898:	beq	0x208ab0
001631:0x002088a0:	ncalli	EntityAI.IncreaseLifetime()
001632:0x002088a8:	movem	originalCaller, m_ThisEntityAI
001632:0x002088b8:	call	
001633:0x002088d0:	call	
001633:0x002088e0:	call	
001633:0x002088f0:	cmpi	#return, _i0
001633:0x00208900:	beq	0x208930
001634:0x00208908:	call	
001634:0x00208918:	call	
001634:0x00208928:	release	#return
001634:0x00208930:	release	#return
001636:0x00208938:	call	
001636:0x00208948:	movefm	@c00, device_to_plug
001636:0x00208958:	icall	
001636:0x00208968:	release	#return
001637:0x00208970:	call	
001637:0x00208980:	movem	source, m_ThisEntityAI
001637:0x00208990:	call	
001637:0x002089a0:	release	#return
001639:0x002089a8:	call	
001640:0x002089c0:	call	
001642:0x002089d0:	call	
001642:0x002089e0:	movem	source_device, m_ThisEntityAI
001642:0x002089f0:	call	
001642:0x00208a00:	release	#return
001643:0x00208a08:	movem	original_caller, m_ThisEntityAI
001643:0x00208a18:	call	
001645:0x00208a28:	ncall	GetGame()
001645:0x00208a30:	ncalli	CGame.IsServer()
001645:0x00208a38:	cmpi	#return, _i0
001645:0x00208a48:	bne	0x208a78
001645:0x00208a50:	ncall	GetGame()
001645:0x00208a58:	ncalli	CGame.IsMultiplayer()
001645:0x00208a60:	cmpi	#return, _i0
001645:0x00208a70:	bne	0x208a98
001647:0x00208a78:	call	
001648:0x00208a88:	call	
001651:0x00208a98:	imove	#return, 0x000001
001651:0x00208aa8:	rts
001654:0x00208ab0:	imove	#return, 0x000000
001654:0x00208ac0:	rts
001654:0x00208ac8:	rts
ComponentEnergyManager::SetPlugOwner()
001660:0x00208ad0:	movefm	[0xb5b97830], m_DeviceByPlugSelection
001660:0x00208ae0:	icall	
001660:0x00208af0:	cmpi	#return, _i0
001660:0x00208b00:	beq	0x208b38
001662:0x00208b08:	movefm	@c00, device
001662:0x00208b18:	movefm	[0xb5b97830], m_DeviceByPlugSelection
001662:0x00208b28:	icall	
001662:0x00208b38:	rts
ComponentEnergyManager::UnplugCordFromSocket()
001670:0x00208bb8:	call	
001670:0x00208bc8:	movem	plug_owner, #return
001670:0x00208bd8:	release	#return
001672:0x00208be0:	cmpcm	plug_owner, null
001672:0x00208bf0:	beq	0x208d70
001674:0x00208bf8:	movetm	plugged_device, NULL
001674:0x00208c08:	call	
001675:0x00208c20:	addi	@m01, socket_to_unplug_ID, _i1
001675:0x00208c30:	move	@m00, @m01
001675:0x00208c40:	icall	ToString(@m00)
001675:0x00208c50:	adds	@s01, SOCKET_, #return
001675:0x00208c60:	moves	@s00, @s01
001675:0x00208c70:	adds	unplugged_selection, @s00, _AVAILABLE
001676:0x00208c80:	movefm	[0xb5b25dc0], m_ThisEntityAI
001676:0x00208c90:	call	
001678:0x00208ca0:	addi	@m01, socket_to_unplug_ID, _i1
001678:0x00208cb0:	move	@m00, @m01
001678:0x00208cc0:	icall	ToString(@m00)
001678:0x00208cd0:	adds	@s01, SOCKET_, #return
001678:0x00208ce0:	moves	@s00, @s01
001678:0x00208cf0:	adds	plugged_selection, @s00, _PLUGGED
001679:0x00208d00:	movefm	[0xb5b25dc0], m_ThisEntityAI
001679:0x00208d10:	call	
001680:0x00208d20:	movetm	device, NULL
001680:0x00208d30:	call	
001681:0x00208d48:	call	
001681:0x00208d58:	call	
001681:0x00208d68:	release	#return
001681:0x00208d70:	release	plug_owner
001681:0x00208d78:	rts
ComponentEnergyManager::SetPowered()
001688:0x00208d80:	move	m_IsWorking, state
001688:0x00208d90:	rts
ComponentEnergyManager::FindAndConsumeEnergy()
001694:0x00208e58:	cmpi	ignore_switch_state, _i0
001694:0x00208e68:	bne	0x208e98
001694:0x00208e70:	call	
001694:0x00208e80:	cmpi	#return, _i0
001694:0x00208e90:	beq	0x209050
001694:0x00208e98:	movefm	[0xb5b25dc0], m_ThisEntityAI
001694:0x00208ea8:	call	
001694:0x00208eb8:	cmpi	#return, _i0
001694:0x00208ec8:	bne	0x209050
001696:0x00208ed0:	subf	@f01, _f0.000000, amount
001696:0x00208ee0:	call	
001696:0x00208ef0:	move	available_energy, #return
001698:0x00208f00:	cmpf	available_energy, _f0.000000
001698:0x00208f10:	bge	0x209000
001698:0x00208f18:	call	
001698:0x00208f28:	cmpi	#return, _i0
001698:0x00208f38:	beq	0x209000
001701:0x00208f40:	call	
001701:0x00208f50:	movem	next_power_source, #return
001701:0x00208f60:	release	#return
001703:0x00208f68:	cmpcm	next_power_source, null
001703:0x00208f78:	beq	0x208ff8
001703:0x00208f80:	cmpm	next_power_source, original_caller
001703:0x00208f90:	beq	0x208ff8
001705:0x00208f98:	call	
001705:0x00208fa8:	subf	@f01, _f0.000000, available_energy
001705:0x00208fb8:	call	
001705:0x00208fd0:	move	#return, #return
001705:0x00208fe0:	release	next_power_source
001705:0x00208fe8:	release	#return
001705:0x00208ff0:	rts
001705:0x00208ff8:	release	next_power_source
001709:0x00209000:	cmpf	available_energy, _f0.000000
001709:0x00209010:	blt	0x209030
001711:0x00209018:	imove	#return, 0x000001
001711:0x00209028:	rts
001714:0x00209030:	imove	#return, 0x000000
001714:0x00209040:	rts
001714:0x00209048:	jump	0x209068
001718:0x00209050:	imove	#return, 0x000000
001718:0x00209060:	rts
001718:0x00209068:	rts
ComponentEnergyManager::GetMySocketID()
001725:0x00209070:	move	#return, m_MySocketID
001725:0x00209080:	rts
001725:0x00209088:	rts
ComponentEnergyManager::SetMySocketID()
001731:0x00209090:	move	m_MySocketID, slot_ID
001731:0x002090a0:	rts
ComponentEnergyManager::Synch()
001736:0x002090a8:	movefm	[0xb5b25dc0], m_ThisEntityAI
001736:0x002090b8:	ncalli	EntityAI.SetSynchDirty()
001736:0x002090c0:	rts
ComponentEnergyManager::ClearLastUpdateTime()
001741:0x002090c8:	imove	m_LastUpdateTime, 0.00000
001741:0x002090d8:	rts
ComponentEnergyManager::RememberLastUpdateTime()
001746:0x002090e0:	call	
001746:0x002090f0:	move	m_LastUpdateTime, #return
001746:0x00209100:	rts
ComponentEnergyManager::GetCurrentUpdateTime()
001751:0x00209108:	ncall	GetGame()
001751:0x00209110:	icall	
001751:0x00209118:	citf	#return, #return
001751:0x00209128:	rts
001751:0x00209130:	rts
ComponentEnergyManager::DeviceUpdate()
001763:0x00209378:	cmpi	m_IsPassiveDevice, _i0
001763:0x00209388:	bne	0x209918
001766:0x00209390:	cmpcm	m_ThisEntityAI, null
001766:0x002093a0:	beq	0x209808
001766:0x002093a8:	cmpm	this, null
001766:0x002093b8:	beq	0x209808
001766:0x002093c0:	call	
001766:0x002093d0:	cmpi	#return, _i0
001766:0x002093e0:	beq	0x209808
001766:0x002093e8:	movefm	[0xb5b25dc0], m_ThisEntityAI
001766:0x002093f8:	call	
001766:0x00209408:	cmpi	#return, _i0
001766:0x00209418:	bne	0x209808
001766:0x00209420:	call	
001766:0x00209430:	cmpi	#return, _i0
001766:0x00209440:	beq	0x209808
001766:0x00209448:	cmpi	m_CanWork, _i0
001766:0x00209458:	beq	0x209808
001766:0x00209460:	ncall	GetGame()
001766:0x00209468:	call	
001766:0x00209478:	cmpi	#return, _i0
001766:0x00209488:	bne	0x209808
001768:0x00209490:	call	
001768:0x002094a0:	move	was_powered, #return
001772:0x002094b0:	cmpf	m_LastUpdateTime, _f0.000000
001772:0x002094c0:	bne	0x2094f0
001774:0x002094c8:	call	
001775:0x002094d8:	imove	consumed_energy_coef, 1.00000
001775:0x002094e8:	jump	0x209540
001779:0x002094f0:	call	
001779:0x00209500:	move	updatetime, #return
001780:0x00209510:	subf	time, updatetime, m_LastUpdateTime
001781:0x00209520:	divf	@f00, time, _f1000.000000
001781:0x00209530:	move	consumed_energy_coef, @f00
001784:0x00209540:	cmpf	consumed_energy_coef, _f0.000000
001784:0x00209550:	ble	0x2097f0
001786:0x00209558:	call	
001786:0x00209568:	move	m_LastUpdateTime, #return
001787:0x00209578:	call	
001787:0x00209588:	mulf	consume_energy, #return, consumed_energy_coef
001788:0x00209598:	imove	has_consumed_enough, 0x000001
001790:0x002095a8:	ncall	GetGame()
001790:0x002095b0:	ncalli	CGame.IsServer()
001790:0x002095b8:	cmpi	#return, _i0
001790:0x002095c8:	bne	0x2095f8
001790:0x002095d0:	ncall	GetGame()
001790:0x002095d8:	ncalli	CGame.IsMultiplayer()
001790:0x002095e0:	cmpi	#return, _i0
001790:0x002095f0:	bne	0x209618
001791:0x002095f8:	call	
001791:0x00209608:	move	has_consumed_enough, #return
001793:0x00209618:	call	
001795:0x00209628:	cmpi	has_consumed_enough, _i0
001795:0x00209638:	beq	0x209700
001797:0x00209640:	cmpi	was_powered, _i0
001797:0x00209650:	bne	0x2096e8
001799:0x00209658:	imove	m_CanStopWork, 0x000001
001800:0x00209668:	movem	original_caller, m_ThisEntityAI
001800:0x00209678:	call	
001801:0x00209688:	ncall	GetGame()
001801:0x00209690:	movec	@c00, #return
001801:0x002096a0:	movec	@c01, GameScript
001801:0x002096b0:	movefm	@c02, m_ThisEntityAI
001801:0x002096c0:	icall	
001802:0x002096d8:	call	
001805:0x002096e8:	call	
001805:0x002096f8:	jump	0x2097e8
001809:0x00209700:	cmpi	was_powered, _i0
001809:0x00209710:	beq	0x2097d8
001811:0x00209718:	cmpi	m_CanStopWork, _i0
001811:0x00209728:	beq	0x2097d8
001813:0x00209730:	imove	m_CanStopWork, 0x000000
001814:0x00209740:	call	
001815:0x00209750:	ncall	GetGame()
001815:0x00209758:	movec	@c00, #return
001815:0x00209768:	movec	@c01, GameScript
001815:0x00209778:	movefm	@c02, m_ThisEntityAI
001815:0x00209788:	icall	
001816:0x002097a0:	call	
001818:0x002097b0:	cmpi	m_AutoSwitchOff, _i0
001818:0x002097c0:	beq	0x2097d8
001820:0x002097c8:	call	
001825:0x002097d8:	call	
001825:0x002097e8:	jump	0x209800
001830:0x002097f0:	call	
001830:0x00209800:	jump	0x209918
001833:0x00209808:	cmpm	this, null
001833:0x00209818:	beq	0x209918
001833:0x00209820:	cmpcm	m_ThisEntityAI, null
001833:0x00209830:	beq	0x209918
001835:0x00209838:	call	
001836:0x00209848:	call	
001838:0x00209858:	cmpi	m_CanStopWork, _i0
001838:0x00209868:	beq	0x209918
001840:0x00209870:	imove	m_CanStopWork, 0x000000
001841:0x00209880:	call	
001842:0x00209890:	ncall	GetGame()
001842:0x00209898:	movec	@c00, #return
001842:0x002098a8:	movec	@c01, GameScript
001842:0x002098b8:	movefm	@c02, m_ThisEntityAI
001842:0x002098c8:	icall	
001843:0x002098e0:	call	
001845:0x002098f0:	cmpi	m_AutoSwitchOff, _i0
001845:0x00209900:	beq	0x209918
001847:0x00209908:	call	
001847:0x00209918:	rts
KeysToUIElements::RegisterKeyToUIElement()
//scripts/3_Game/tools\keystouielements.c
000015:0x00209998:	cmpcm	m_KeysToUIElements, NULL
000015:0x002099a8:	bne	0x2099d0
000017:0x002099b0:	new	m_KeysToUIElements, map<int,@Param2<string,bool>>
000020:0x002099d0:	icall	
000020:0x002099e0:	cmpi	#return, _i0
000020:0x002099f0:	beq	0x209a78
000022:0x002099f8:	icall	ToString(key_code, _i0, _i0, _i1)
000022:0x00209a10:	adds	@s02, _s'Template ID: ', #return
000022:0x00209a20:	moves	@s01, @s02
000022:0x00209a30:	adds	@s01, @s01, _s' is alredy exist!'
000022:0x00209a40:	moves	@s00, @s01
000022:0x00209a50:	call	Log(@s00, _s'KeysToUIElements -> OnInit()', _s'System', _s'KeysToUIElements Registration', _s'None')
000022:0x00209a70:	jump	0x209ac8
000026:0x00209a78:	new	params, Param2<string,bool>
000027:0x00209aa0:	movefm	@c00, params
000027:0x00209ab0:	icall	
000027:0x00209ac0:	release	params
000027:0x00209ac8:	rts
KeysToUIElements::GetKeyToUIElement()
000033:0x00209b20:	cmpcm	m_KeysToUIElements, null
000033:0x00209b30:	beq	0x209b88
000033:0x00209b38:	icall	
000033:0x00209b48:	cmpi	#return, _i0
000033:0x00209b58:	beq	0x209b88
000035:0x00209b60:	icall	
000035:0x00209b70:	movetm	#return, #return
000035:0x00209b80:	rts
000038:0x00209b88:	icall	ToString(key_code, _i0, _i0, _i1)
000038:0x00209ba0:	adds	@s02, _s'Template ID: ', #return
000038:0x00209bb0:	moves	@s01, @s02
000038:0x00209bc0:	adds	@s01, @s01, _s' does not exist!'
000038:0x00209bd0:	moves	@s00, @s01
000038:0x00209be0:	call	Log(@s00, _s'KeysToUIElements -> GetKeysToUIElement()', _s'System', _s'Get KeysToUIElements', _s'None')
000039:0x00209c00:	movetm	#return, NULL
000039:0x00209c10:	rts
000039:0x00209c18:	rts
KeysToUIElements::Init()
000047:0x0020c2c0:	call	RegisterKeyToUIElement(_i1, _s'ESC', false)
000048:0x0020c2d8:	call	RegisterKeyToUIElement(_i2, _s'1', false)
000049:0x0020c2f0:	call	RegisterKeyToUIElement(_i3, _s'2', false)
000050:0x0020c308:	call	RegisterKeyToUIElement(_i4, _s'3', false)
000051:0x0020c320:	call	RegisterKeyToUIElement(_i5, _s'4', false)
000052:0x0020c338:	call	RegisterKeyToUIElement(_i6, _s'5', false)
000053:0x0020c350:	call	RegisterKeyToUIElement(_i7, _s'6', false)
000054:0x0020c368:	call	RegisterKeyToUIElement(_i8, _s'7', false)
000055:0x0020c380:	call	RegisterKeyToUIElement(_i9, _s'8', false)
000056:0x0020c398:	call	RegisterKeyToUIElement(_i10, _s'9', false)
000057:0x0020c3b0:	call	RegisterKeyToUIElement(_i11, _s'0', false)
000058:0x0020c3c8:	call	RegisterKeyToUIElement(_i12, _s'-', false)
000059:0x0020c3e0:	call	RegisterKeyToUIElement(_i13, _s'=', false)
000060:0x0020c3f8:	call	RegisterKeyToUIElement(_i14, _s'BKSPC', false)
000061:0x0020c410:	call	RegisterKeyToUIElement(_i15, _s'TAB', false)
000062:0x0020c428:	call	RegisterKeyToUIElement(_i16, _s'Q', false)
000063:0x0020c440:	call	RegisterKeyToUIElement(_i17, _s'W', false)
000064:0x0020c458:	call	RegisterKeyToUIElement(_i18, _s'E', false)
000065:0x0020c470:	call	RegisterKeyToUIElement(_i19, _s'R', false)
000066:0x0020c488:	call	RegisterKeyToUIElement(_i20, _s'T', false)
000067:0x0020c4a0:	call	RegisterKeyToUIElement(_i21, _s'Y', false)
000068:0x0020c4b8:	call	RegisterKeyToUIElement(_i22, _s'U', false)
000069:0x0020c4d0:	call	RegisterKeyToUIElement(_i23, _s'I', false)
000070:0x0020c4e8:	call	RegisterKeyToUIElement(_i24, _s'O', false)
000071:0x0020c500:	call	RegisterKeyToUIElement(_i25, _s'P', false)
000072:0x0020c518:	call	RegisterKeyToUIElement(_i26, _s'(', false)
000073:0x0020c530:	call	RegisterKeyToUIElement(_i27, _s')', false)
000074:0x0020c548:	call	RegisterKeyToUIElement(_i28, _s'ENTER', false)
000075:0x0020c560:	call	RegisterKeyToUIElement(_i29, _s'LCTRL', false)
000076:0x0020c578:	call	RegisterKeyToUIElement(_i30, _s'A', false)
000077:0x0020c590:	call	RegisterKeyToUIElement(_i31, _s'S', false)
000078:0x0020c5a8:	call	RegisterKeyToUIElement(_i32, _s'D', false)
000079:0x0020c5c0:	call	RegisterKeyToUIElement(_i33, _s'F', false)
000080:0x0020c5d8:	call	RegisterKeyToUIElement(_i34, _s'G', false)
000081:0x0020c5f0:	call	RegisterKeyToUIElement(_i35, _s'H', false)
000082:0x0020c608:	call	RegisterKeyToUIElement(_i36, _s'J', false)
000083:0x0020c620:	call	RegisterKeyToUIElement(_i37, _s'K', false)
000084:0x0020c638:	call	RegisterKeyToUIElement(_i38, _s'L', false)
000085:0x0020c650:	call	RegisterKeyToUIElement(_i39, _s';', false)
000086:0x0020c668:	call	RegisterKeyToUIElement(_i40, _s''', false)
000087:0x0020c680:	call	RegisterKeyToUIElement(_i41, _s'`', false)
000088:0x0020c698:	call	RegisterKeyToUIElement(_i42, _s'LSHIFT', false)
000089:0x0020c6b0:	call	RegisterKeyToUIElement(_i43, _s'\', false)
000090:0x0020c6c8:	call	RegisterKeyToUIElement(_i44, _s'Z', false)
000091:0x0020c6e0:	call	RegisterKeyToUIElement(_i45, _s'X', false)
000092:0x0020c6f8:	call	RegisterKeyToUIElement(_i46, _s'C', false)
000093:0x0020c710:	call	RegisterKeyToUIElement(_i47, _s'V', false)
000094:0x0020c728:	call	RegisterKeyToUIElement(_i48, _s'B', false)
000095:0x0020c740:	call	RegisterKeyToUIElement(_i49, _s'N', false)
000096:0x0020c758:	call	RegisterKeyToUIElement(_i50, _s'M', false)
000097:0x0020c770:	call	RegisterKeyToUIElement(_i51, _s',', false)
000098:0x0020c788:	call	RegisterKeyToUIElement(_i52, _s'.', false)
000099:0x0020c7a0:	call	RegisterKeyToUIElement(_i53, _s'/', false)
000100:0x0020c7b8:	call	RegisterKeyToUIElement(_i54, _s'RSHIFT', false)
000101:0x0020c7d0:	call	RegisterKeyToUIElement(_i55, _s'*', false)
000102:0x0020c7e8:	call	RegisterKeyToUIElement(_i56, _s'LALT', false)
000103:0x0020c800:	call	RegisterKeyToUIElement(_i57, _s'SPACE', false)
000104:0x0020c818:	call	RegisterKeyToUIElement(_i58, _s'CPSLOCK', false)
000105:0x0020c830:	call	RegisterKeyToUIElement(_i59, _s'F1', false)
000106:0x0020c848:	call	RegisterKeyToUIElement(_i60, _s'F2', false)
000107:0x0020c860:	call	RegisterKeyToUIElement(_i61, _s'F3', false)
000108:0x0020c878:	call	RegisterKeyToUIElement(_i62, _s'F4', false)
000109:0x0020c890:	call	RegisterKeyToUIElement(_i63, _s'F5', false)
000110:0x0020c8a8:	call	RegisterKeyToUIElement(_i64, _s'F6', false)
000111:0x0020c8c0:	call	RegisterKeyToUIElement(_i65, _s'F7', false)
000112:0x0020c8d8:	call	RegisterKeyToUIElement(_i66, _s'F8', false)
000113:0x0020c8f0:	call	RegisterKeyToUIElement(_i67, _s'F9', false)
000114:0x0020c908:	call	RegisterKeyToUIElement(_i68, _s'F10', false)
000115:0x0020c920:	call	RegisterKeyToUIElement(_i69, _s'NMLOCK', false)
000116:0x0020c938:	call	RegisterKeyToUIElement(_i70, _s'SCRLOCK', false)
000117:0x0020c950:	call	RegisterKeyToUIElement(_i71, _s'Num7', false)
000118:0x0020c968:	call	RegisterKeyToUIElement(_i72, _s'Num8', false)
000119:0x0020c980:	call	RegisterKeyToUIElement(_i73, _s'Num9', false)
000120:0x0020c998:	call	RegisterKeyToUIElement(_i74, _s'Num-', false)
000121:0x0020c9b0:	call	RegisterKeyToUIElement(_i75, _s'Num4', false)
000122:0x0020c9c8:	call	RegisterKeyToUIElement(_i76, _s'Num5', false)
000123:0x0020c9e0:	call	RegisterKeyToUIElement(_i77, _s'Num6', false)
000124:0x0020c9f8:	call	RegisterKeyToUIElement(_i78, _s'Num+', false)
000125:0x0020ca10:	call	RegisterKeyToUIElement(_i79, _s'Num1', false)
000126:0x0020ca28:	call	RegisterKeyToUIElement(_i80, _s'Num2', false)
000127:0x0020ca40:	call	RegisterKeyToUIElement(_i81, _s'Num3', false)
000128:0x0020ca58:	call	RegisterKeyToUIElement(_i82, _s'Num0', false)
000129:0x0020ca70:	call	RegisterKeyToUIElement(_i83, _s'Num.', false)
000131:0x0020ca88:	call	RegisterKeyToUIElement(_i87, _s'F11', false)
000132:0x0020caa0:	call	RegisterKeyToUIElement(_i88, _s'F12', false)
000133:0x0020cab8:	call	RegisterKeyToUIElement(_i141, _s'Num=', false)
000134:0x0020cad0:	call	RegisterKeyToUIElement(_i144, _s'PrevTrack', false)
000136:0x0020cae8:	call	RegisterKeyToUIElement(_i146, _s':', false)
000137:0x0020cb00:	call	RegisterKeyToUIElement(_i147, _s'_', false)
000141:0x0020cb18:	call	RegisterKeyToUIElement(_i153, _s'NextTrack', false)
000142:0x0020cb30:	call	RegisterKeyToUIElement(_i156, _s'NumEnter', false)
000143:0x0020cb48:	call	RegisterKeyToUIElement(_i157, _s'RCTRL', false)
000144:0x0020cb60:	call	RegisterKeyToUIElement(_i160, _s'Mute', false)
000145:0x0020cb78:	call	RegisterKeyToUIElement(_i161, _s'Calc', false)
000146:0x0020cb90:	call	RegisterKeyToUIElement(_i162, _s'Play', false)
000147:0x0020cba8:	call	RegisterKeyToUIElement(_i164, _s'Stop', false)
000148:0x0020cbc0:	call	RegisterKeyToUIElement(_i174, _s'Vol-', false)
000149:0x0020cbd8:	call	RegisterKeyToUIElement(_i176, _s'Vol+', false)
000150:0x0020cbf0:	call	RegisterKeyToUIElement(_i178, _s'Web Home', false)
000151:0x0020cc08:	call	RegisterKeyToUIElement(_i179, _s'Num,', false)
000152:0x0020cc20:	call	RegisterKeyToUIElement(_i181, _s'Num/', false)
000153:0x0020cc38:	call	RegisterKeyToUIElement(_i183, _s'SysRq', false)
000154:0x0020cc50:	call	RegisterKeyToUIElement(_i184, _s'RALT', false)
000155:0x0020cc68:	call	RegisterKeyToUIElement(_i197, _s'Pause', false)
000156:0x0020cc80:	call	RegisterKeyToUIElement(_i199, _s'Home', false)
000157:0x0020cc98:	call	RegisterKeyToUIElement(_i200, _s'ArrowUp', false)
000158:0x0020ccb0:	call	RegisterKeyToUIElement(_i201, _s'PageUp', false)
000159:0x0020ccc8:	call	RegisterKeyToUIElement(_i203, _s'ArrowLeft', false)
000160:0x0020cce0:	call	RegisterKeyToUIElement(_i205, _s'ArrowRight', false)
000161:0x0020ccf8:	call	RegisterKeyToUIElement(_i207, _s'End', false)
000162:0x0020cd10:	call	RegisterKeyToUIElement(_i208, _s'ArrowDown', false)
000163:0x0020cd28:	call	RegisterKeyToUIElement(_i209, _s'PgDn', false)
000164:0x0020cd40:	call	RegisterKeyToUIElement(_i210, _s'Insert', false)
000165:0x0020cd58:	call	RegisterKeyToUIElement(_i211, _s'Delete', false)
000166:0x0020cd70:	call	RegisterKeyToUIElement(_i219, _s'LWIN', false)
000167:0x0020cd88:	call	RegisterKeyToUIElement(_i220, _s'RWIN', false)
000174:0x0020cda0:	call	RegisterKeyToUIElement(_i1048576, _s'set:dayz_gui image:left_mouse', true)
000175:0x0020cdb8:	call	RegisterKeyToUIElement(_i1048577, _s'set:dayz_gui image:right_mouse', true)
000176:0x0020cdd0:	call	RegisterKeyToUIElement(_i1048578, _s'set:dayz_gui image:middle_mouse', true)
000176:0x0020cde8:	rts
HandGuardBase::GuardCondition()
//scripts/3_Game/systems\inventory\hand_guards.c
000013:0x0020cdf0:	imove	#return, 0x000001
000013:0x0020ce00:	rts
000013:0x0020ce08:	rts
HandGuardAnd::HandGuardAnd()
000022:0x0020ce10:	movem	m_arg0, arg0
000022:0x0020ce20:	movem	m_arg1, arg1
000022:0x0020ce30:	rts
HandGuardAnd::GuardCondition()
000026:0x0020ce60:	movefm	[0xb5b33cb0], m_arg0
000026:0x0020ce70:	call	
000026:0x0020ce80:	cmpi	#return, _i0
000026:0x0020ce90:	beq	0x20cee8
000026:0x0020ce98:	movefm	[0xb5b33cb0], m_arg1
000026:0x0020cea8:	call	
000026:0x0020ceb8:	cmpi	#return, _i0
000026:0x0020cec8:	beq	0x20cee8
000026:0x0020ced0:	imove	result, 0x000001
000026:0x0020cee0:	jump	0x20cef8
000026:0x0020cee8:	imove	result, 0x000000
000035:0x0020cef8:	move	#return, result
000035:0x0020cf08:	rts
000035:0x0020cf10:	rts
HandGuardNot::HandGuardNot()
000043:0x0020cf18:	movem	m_arg0, arg0
000043:0x0020cf28:	rts
HandGuardNot::GuardCondition()
000047:0x0020cf58:	movefm	[0xb5b33cb0], m_arg0
000047:0x0020cf68:	call	
000047:0x0020cf78:	cmpi	#return, _i0
000047:0x0020cf88:	beq	0x20cfa8
000047:0x0020cf90:	imove	@m00, 0x000000
000047:0x0020cfa0:	jump	0x20cfb8
000047:0x0020cfa8:	imove	@m00, 0x000001
000047:0x0020cfb8:	move	result, @m00
000055:0x0020cfc8:	move	#return, result
000055:0x0020cfd8:	rts
000055:0x0020cfe0:	rts
HandGuardOr::HandGuardOr()
000064:0x0020cfe8:	movem	m_arg0, arg0
000064:0x0020cff8:	movem	m_arg1, arg1
000064:0x0020d008:	rts
HandGuardOr::GuardCondition()
000068:0x0020d038:	movefm	[0xb5b33cb0], m_arg0
000068:0x0020d048:	call	
000068:0x0020d058:	cmpi	#return, _i0
000068:0x0020d068:	bne	0x20d0a8
000068:0x0020d070:	movefm	[0xb5b33cb0], m_arg1
000068:0x0020d080:	call	
000068:0x0020d090:	cmpi	#return, _i0
000068:0x0020d0a0:	beq	0x20d0c0
000068:0x0020d0a8:	imove	result, 0x000001
000068:0x0020d0b8:	jump	0x20d0d0
000068:0x0020d0c0:	imove	result, 0x000000
000076:0x0020d0d0:	move	#return, result
000076:0x0020d0e0:	rts
000076:0x0020d0e8:	rts
HandGuardHasItemInEvent::HandGuardHasItemInEvent()
000083:0x0020d0f0:	movem	m_Player, p
000083:0x0020d100:	rts
HandGuardHasItemInEvent::GuardCondition()
000087:0x0020d130:	call	
000087:0x0020d140:	movem	eai, #return
000087:0x0020d150:	release	#return
000088:0x0020d158:	cmpcm	eai, NULL
000088:0x0020d168:	beq	0x20d190
000096:0x0020d170:	imove	#return, 0x000001
000096:0x0020d180:	release	eai
000096:0x0020d188:	rts
000106:0x0020d190:	imove	#return, 0x000000
000106:0x0020d1a0:	release	eai
000106:0x0020d1a8:	rts
000106:0x0020d1b0:	release	eai
000106:0x0020d1b8:	rts
HandGuardHasWeaponInEvent::GuardCondition()
000116:0x0020d210:	call	
000116:0x0020d220:	movem	eai, #return
000116:0x0020d230:	release	#return
000117:0x0020d238:	imove	result, 0x000000
000118:0x0020d248:	cmpcm	eai, null
000118:0x0020d258:	beq	0x20d298
000120:0x0020d260:	call	
000120:0x0020d270:	cmpi	#return, _i0
000120:0x0020d280:	beq	0x20d298
000122:0x0020d288:	imove	result, 0x000001
000131:0x0020d298:	move	#return, result
000131:0x0020d2a8:	release	eai
000131:0x0020d2b0:	rts
000131:0x0020d2b8:	release	eai
000131:0x0020d2c0:	rts
HandGuardIsSameItemInHands::HandGuardIsSameItemInHands()
000138:0x0020d2c8:	movem	m_Player, p
000138:0x0020d2d8:	rts
HandGuardIsSameItemInHands::GuardCondition()
000142:0x0020d308:	imove	result, 0x000000
000143:0x0020d318:	call	
000143:0x0020d328:	movefm	@c00, #return
000143:0x0020d338:	movefm	[0xb5b266d0], m_Player
000143:0x0020d348:	call	
000143:0x0020d358:	ncalli	HumanInventory.GetEntityInHands()
000143:0x0020d360:	cmpc	@c00, #return
000143:0x0020d370:	bne	0x20d388
000145:0x0020d378:	imove	result, 0x000001
000145:0x0020d388:	release	#return
000145:0x0020d390:	release	#return
000154:0x0020d398:	move	#return, result
000154:0x0020d3a8:	rts
000154:0x0020d3b0:	rts
HandGuardHasDestroyedItemInHands::HandGuardHasDestroyedItemInHands()
000161:0x0020d3b8:	movem	m_Player, p
000161:0x0020d3c8:	rts
HandGuardHasDestroyedItemInHands::GuardCondition()
000165:0x0020d420:	movefm	[0xb5b266d0], m_Player
000165:0x0020d430:	call	
000165:0x0020d440:	ncalli	HumanInventory.GetEntityInHands()
000165:0x0020d448:	movetm	hnd, #return
000165:0x0020d458:	release	#return
000166:0x0020d460:	call	
000166:0x0020d470:	cmpcm	#return, null
000166:0x0020d480:	beq	0x20d540
000168:0x0020d488:	call	
000168:0x0020d498:	movefm	@c00, #return
000168:0x0020d4a8:	cmpmc	@c00, hnd
000168:0x0020d4b8:	bne	0x20d4f0
000176:0x0020d4c0:	imove	#return, 0x000001
000176:0x0020d4d0:	release	#return
000176:0x0020d4d8:	release	#return
000176:0x0020d4e0:	release	hnd
000176:0x0020d4e8:	rts
000176:0x0020d4f0:	release	#return
000179:0x0020d4f8:	cmpcm	hnd, null
000179:0x0020d508:	bne	0x20d538
000187:0x0020d510:	imove	#return, 0x000001
000187:0x0020d520:	release	#return
000187:0x0020d528:	release	hnd
000187:0x0020d530:	rts
000187:0x0020d538:	jump	0x20d568
000198:0x0020d540:	imove	#return, 0x000001
000198:0x0020d550:	release	#return
000198:0x0020d558:	release	hnd
000198:0x0020d560:	rts
000198:0x0020d568:	release	#return
000206:0x0020d570:	imove	#return, 0x000000
000206:0x0020d580:	release	hnd
000206:0x0020d588:	rts
000206:0x0020d590:	release	hnd
000206:0x0020d598:	rts
HandGuardHasItemInHands::HandGuardHasItemInHands()
000213:0x0020d5a0:	movem	m_Player, p
000213:0x0020d5b0:	rts
HandGuardHasItemInHands::GuardCondition()
000217:0x0020d5e0:	imove	result, 0x000000
000218:0x0020d5f0:	movefm	[0xb5b266d0], m_Player
000218:0x0020d600:	call	
000218:0x0020d610:	ncalli	HumanInventory.GetEntityInHands()
000218:0x0020d618:	cmpm	#return, null
000218:0x0020d628:	beq	0x20d640
000220:0x0020d630:	imove	result, 0x000001
000220:0x0020d640:	release	#return
000229:0x0020d648:	move	#return, result
000229:0x0020d658:	rts
000229:0x0020d660:	rts
HandGuardHasRoomForItem::HandGuardHasRoomForItem()
000236:0x0020d668:	movem	m_Player, p
000236:0x0020d678:	rts
HandGuardHasRoomForItem::GuardCondition()
000240:0x0020d680:	call	
000240:0x0020d690:	cmpcm	#return, null
000240:0x0020d6a0:	beq	0x20d938
000240:0x0020d6a8:	call	
000240:0x0020d6b8:	ncalli	InventoryLocation.IsValid()
000240:0x0020d6c0:	cmpi	#return, _i0
000240:0x0020d6d0:	beq	0x20d938
000242:0x0020d6d8:	ncall	GetGame()
000242:0x0020d6e0:	ncalli	CGame.IsDedicatedServer()
000242:0x0020d6e8:	cmpi	#return, _i0
000242:0x0020d6f8:	bne	0x20d7a8
000244:0x0020d700:	cmpcm	m_Player, null
000244:0x0020d710:	beq	0x20d7a8
000245:0x0020d718:	movefm	[0xb5b266d0], m_Player
000245:0x0020d728:	call	
000245:0x0020d738:	call	
000245:0x0020d748:	ncalli	InventoryLocation.GetItem()
000245:0x0020d750:	pushc	#return
000245:0x0020d758:	call	
000245:0x0020d768:	movefm	@c01, #return
000245:0x0020d778:	popc	#return
000245:0x0020d780:	call	
000245:0x0020d798:	release	#return
000245:0x0020d7a0:	release	#return
000248:0x0020d7a8:	call	
000248:0x0020d7b8:	movefm	[0xb5bad7e8], #return
000248:0x0020d7c8:	ncall	LocationTestAddEntity([0xb5bad7e8], false, true, true, true, true, false)
000248:0x0020d7f0:	cmpi	#return, _i0
000248:0x0020d800:	bne	0x20d838
000258:0x0020d808:	imove	#return, 0x000000
000258:0x0020d818:	release	#return
000258:0x0020d820:	release	#return
000258:0x0020d828:	release	#return
000258:0x0020d830:	rts
000258:0x0020d838:	release	#return
000262:0x0020d840:	ncall	GetGame()
000262:0x0020d848:	ncalli	CGame.IsDedicatedServer()
000262:0x0020d850:	cmpi	#return, _i0
000262:0x0020d860:	bne	0x20d910
000264:0x0020d868:	cmpcm	m_Player, null
000264:0x0020d878:	beq	0x20d910
000265:0x0020d880:	movefm	[0xb5b266d0], m_Player
000265:0x0020d890:	call	
000265:0x0020d8a0:	call	
000265:0x0020d8b0:	ncalli	InventoryLocation.GetItem()
000265:0x0020d8b8:	pushc	#return
000265:0x0020d8c0:	call	
000265:0x0020d8d0:	movefm	@c01, #return
000265:0x0020d8e0:	popc	#return
000265:0x0020d8e8:	call	
000265:0x0020d900:	release	#return
000265:0x0020d908:	release	#return
000274:0x0020d910:	imove	#return, 0x000001
000274:0x0020d920:	release	#return
000274:0x0020d928:	release	#return
000274:0x0020d930:	rts
000274:0x0020d938:	release	#return
000274:0x0020d940:	release	#return
000284:0x0020d948:	imove	#return, 0x000000
000284:0x0020d958:	rts
000284:0x0020d960:	rts
HandGuardCanMove::HandGuardCanMove()
000291:0x0020d968:	movem	m_Player, p
000291:0x0020d978:	rts
HandGuardCanMove::GuardCondition()
000295:0x0020d9f8:	movefm	@c02, e
000295:0x0020da08:	icall	SafeCastType([0xb5b3a1a0], @c01, @c02)
000295:0x0020da20:	movetm	es, @c01
000297:0x0020da30:	call	
000297:0x0020da40:	movefm	[0xb5bad978], #return
000297:0x0020da50:	call	
000297:0x0020da60:	movefm	[0xb5bad9a0], #return
000297:0x0020da70:	ncall	LocationCanMoveEntity([0xb5bad978], [0xb5bad9a0])
000297:0x0020da80:	move	result, #return
000297:0x0020da90:	release	#return
000297:0x0020da98:	release	#return
000306:0x0020daa0:	move	#return, result
000306:0x0020dab0:	release	es
000306:0x0020dab8:	rts
000306:0x0020dac0:	release	es
000306:0x0020dac8:	rts
HandGuardCanSwap::HandGuardCanSwap()
000313:0x0020dad0:	movem	m_Player, p
000313:0x0020dae0:	rts
HandGuardCanSwap::GuardCondition()
000317:0x0020db38:	movefm	@c02, e
000317:0x0020db48:	icall	SafeCastType([0xb5b36208], @c01, @c02)
000317:0x0020db60:	movetm	es, @c01
000318:0x0020db70:	call	
000318:0x0020db80:	ncalli	InventoryLocation.GetItem()
000318:0x0020db88:	movefm	@c01, es
000318:0x0020db98:	movefm	[0xb5b18280], m_Src2
000318:0x0020dba8:	pushc	#return
000318:0x0020dbb0:	ncalli	InventoryLocation.GetItem()
000318:0x0020dbb8:	movec	@c02, #return
000318:0x0020dbc8:	popc	#return
000318:0x0020dbd0:	call	CanSwapEntitiesEx(#return, @c02)
000318:0x0020dbe8:	move	result, #return
000318:0x0020dbf8:	release	#return
000327:0x0020dc00:	move	#return, result
000327:0x0020dc10:	release	es
000327:0x0020dc18:	rts
000327:0x0020dc20:	release	es
000327:0x0020dc28:	rts
HandGuardCanForceSwap::HandGuardCanForceSwap()
000334:0x0020dc30:	movem	m_Player, p
000334:0x0020dc40:	rts
HandGuardCanForceSwap::GuardCondition()
000338:0x0020dc98:	movefm	@c02, e
000338:0x0020dca8:	icall	SafeCastType([0xb5b36268], @c01, @c02)
000338:0x0020dcc0:	movetm	es, @c01
000340:0x0020dcd0:	call	
000340:0x0020dce0:	ncalli	InventoryLocation.GetItem()
000340:0x0020dce8:	movefm	@c01, es
000340:0x0020dcf8:	movefm	[0xb5b18280], m_Src2
000340:0x0020dd08:	pushc	#return
000340:0x0020dd10:	ncalli	InventoryLocation.GetItem()
000340:0x0020dd18:	movec	@c02, #return
000340:0x0020dd28:	popc	#return
000340:0x0020dd30:	call	CanSwapEntitiesEx(#return, @c02)
000340:0x0020dd48:	move	result, #return
000340:0x0020dd58:	release	#return
000341:0x0020dd60:	cmpi	result, _i0
000341:0x0020dd70:	bne	0x20de90
000341:0x0020dd78:	movefm	@c00, es
000341:0x0020dd88:	cmpcm	m_Dst2, null
000341:0x0020dd98:	beq	0x20de90
000342:0x0020dda0:	call	
000342:0x0020ddb0:	ncalli	InventoryLocation.GetItem()
000342:0x0020ddb8:	movefm	@c01, es
000342:0x0020ddc8:	movem	item1_dst, m_Dst
000342:0x0020ddd8:	movefm	@c02, es
000342:0x0020dde8:	movefm	[0xb5b18280], m_Src2
000342:0x0020ddf8:	pushc	#return
000342:0x0020de00:	ncalli	InventoryLocation.GetItem()
000342:0x0020de08:	movec	@c03, #return
000342:0x0020de18:	popc	#return
000342:0x0020de20:	movefm	@c04, es
000342:0x0020de30:	movem	item2_dst, m_Dst2
000342:0x0020de40:	call	CanForceSwapEntitiesEx(#return, item1_dst, @c03, item2_dst)
000342:0x0020de60:	movem	m_Dst2, item2_dst
000342:0x0020de70:	release	item2_dst
000342:0x0020de78:	move	result, #return
000342:0x0020de88:	release	#return
000351:0x0020de90:	move	#return, result
000351:0x0020dea0:	release	es
000351:0x0020dea8:	rts
000351:0x0020deb0:	release	es
000351:0x0020deb8:	rts
HandGuardInstantForceSwap::HandGuardInstantForceSwap()
000358:0x0020dec0:	movem	m_Player, p
000358:0x0020ded0:	rts
HandGuardInstantForceSwap::GuardCondition()
000362:0x0020df78:	movefm	@c02, e
000362:0x0020df88:	icall	SafeCastType([0xb5b36268], @c01, @c02)
000362:0x0020dfa0:	movetm	es, @c01
000364:0x0020dfb0:	movefm	@c01, es
000364:0x0020dfc0:	movem	src1, m_Src
000365:0x0020dfd0:	movefm	@c01, es
000365:0x0020dfe0:	movem	dst2, m_Dst2
000367:0x0020dff0:	imove	result, 0x000000
000368:0x0020e000:	ncalli	InventoryLocation.GetType()
000368:0x0020e008:	move	@m00, #return
000368:0x0020e018:	cmpi	@m00, _i3
000368:0x0020e028:	bne	0x20e0c8
000368:0x0020e030:	ncalli	InventoryLocation.GetType()
000368:0x0020e038:	move	@m00, #return
000368:0x0020e048:	cmpi	@m00, _i3
000368:0x0020e058:	bne	0x20e0c8
000370:0x0020e060:	ncalli	InventoryLocation.GetParent()
000370:0x0020e068:	movec	@c00, #return
000370:0x0020e078:	pushc	#return
000370:0x0020e080:	ncalli	InventoryLocation.GetParent()
000370:0x0020e088:	movec	@c02, #return
000370:0x0020e098:	popc	#return
000370:0x0020e0a0:	cmpc	@c00, @c02
000370:0x0020e0b0:	bne	0x20e0c8
000372:0x0020e0b8:	imove	result, 0x000001
000383:0x0020e0c8:	move	#return, result
000383:0x0020e0d8:	release	es
000383:0x0020e0e0:	release	src1
000383:0x0020e0e8:	release	dst2
000383:0x0020e0f0:	rts
000383:0x0020e0f8:	release	es
000383:0x0020e100:	release	src1
000383:0x0020e108:	release	dst2
000383:0x0020e110:	rts
Hit_Metal::Hit_Metal()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_metal.c
000005:0x0020e118:	call	
000006:0x0020e128:	call	
000007:0x0020e138:	call	
000007:0x0020e148:	rts
PPESMAA::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppesmaa.c
000008:0x0020e150:	imove	#return, 0x000010
000008:0x0020e160:	rts
000008:0x0020e168:	rts
PPESMAA::GetDefaultMaterialPath()
000013:0x0020e198:	moves	#return, _s'Graphics/Materials/postprocess/smaa'
000013:0x0020e1a8:	rts
000013:0x0020e1b0:	rts
PPESMAA::RegisterMaterialParameters()
000018:0x0020e1e0:	call	
000018:0x0020e200:	rts
ColorValuesData::ColorValuesData()
//scripts/3_Game/ppemanager\materials\matparameters\ppematclassparametercolor.c
000009:0x0020e208:	new	m_Values, array<float>
000010:0x0020e228:	movefm	@c00, values
000010:0x0020e238:	movefm	[0xd3156238], m_Values
000010:0x0020e248:	icall	
000011:0x0020e258:	move	m_Operator, operator
000011:0x0020e268:	rts
ColorValuesData::SetValues()
000016:0x0020e270:	movefm	@c00, values
000016:0x0020e280:	movefm	[0xd3156238], m_Values
000016:0x0020e290:	icall	
000016:0x0020e2a0:	rts
ColorValuesData::GetValues()
000021:0x0020e2a8:	movem	#return, m_Values
000021:0x0020e2b8:	rts
000021:0x0020e2c0:	rts
ColorValuesData::SetOperator()
000026:0x0020e2c8:	move	m_Operator, operator
000026:0x0020e2d8:	rts
ColorValuesData::GetOperator()
000031:0x0020e2e0:	move	#return, m_Operator
000031:0x0020e2f0:	rts
000031:0x0020e2f8:	rts
PPEMatClassParameterColor::PPEMatClassParameterColor()
000050:0x0020e300:	new	m_LayerInfo, map<int,@ColorValuesData>
000050:0x0020e320:	rts
PPEMatClassParameterColor::InitDefaults()
000055:0x0020e328:	movefm	@c02, m_Defaults
000055:0x0020e338:	icall	SafeCastType([0xb5b355e0], @c01, @c02)
000055:0x0020e350:	movetm	m_Color, @c01
000056:0x0020e360:	imove	@m00, 0x000000
000056:0x0020e370:	movefm	[0xb5b355e0], m_Color
000056:0x0020e380:	movec	@c00, [0xb5b355e0]
000056:0x0020e390:	ftv	m_ColorDefaults[@m00], param2
000056:0x0020e3a0:	inc	@m00
000056:0x0020e3a8:	movefm	[0xb5b355e0], m_Color
000056:0x0020e3b8:	movec	@c01, [0xb5b355e0]
000056:0x0020e3c8:	ftv	m_ColorDefaults[@m00], param3
000056:0x0020e3d8:	inc	@m00
000056:0x0020e3e0:	movefm	[0xb5b355e0], m_Color
000056:0x0020e3f0:	movec	@c02, [0xb5b355e0]
000056:0x0020e400:	ftv	m_ColorDefaults[@m00], param4
000056:0x0020e410:	inc	@m00
000056:0x0020e418:	movefm	[0xb5b355e0], m_Color
000056:0x0020e428:	movec	@c03, [0xb5b355e0]
000056:0x0020e438:	ftv	m_ColorDefaults[@m00], param5
000056:0x0020e448:	inc	@m00
000056:0x0020e450:	rts
Param4<float,float,float,float>::Param4()
//scripts/1_Core/param.c
000128:0x0020e6b0:	move	param1, p1
000129:0x0020e6c0:	move	param2, p2
000130:0x0020e6d0:	move	param3, p3
000131:0x0020e6e0:	move	param4, p4
000131:0x0020e6f0:	rts
Param4<float,float,float,float>::Serialize()
000136:0x0020e6f8:	icall	
000136:0x0020e708:	cmpi	#return, _i0
000136:0x0020e718:	beq	0x20e7b0
000136:0x0020e720:	icall	
000136:0x0020e730:	cmpi	#return, _i0
000136:0x0020e740:	beq	0x20e7b0
000136:0x0020e748:	icall	
000136:0x0020e758:	cmpi	#return, _i0
000136:0x0020e768:	beq	0x20e7b0
000136:0x0020e770:	icall	
000136:0x0020e780:	cmpi	#return, _i0
000136:0x0020e790:	beq	0x20e7b0
000136:0x0020e798:	imove	#return, 0x000001
000136:0x0020e7a8:	jump	0x20e7c0
000136:0x0020e7b0:	imove	#return, 0x000000
000136:0x0020e7c0:	rts
000136:0x0020e7c8:	rts
Param4<float,float,float,float>::Deserializer()
000141:0x0020e7d0:	icall	
000141:0x0020e7e0:	cmpi	#return, _i0
000141:0x0020e7f0:	beq	0x20e888
000141:0x0020e7f8:	icall	
000141:0x0020e808:	cmpi	#return, _i0
000141:0x0020e818:	beq	0x20e888
000141:0x0020e820:	icall	
000141:0x0020e830:	cmpi	#return, _i0
000141:0x0020e840:	beq	0x20e888
000141:0x0020e848:	icall	
000141:0x0020e858:	cmpi	#return, _i0
000141:0x0020e868:	beq	0x20e888
000141:0x0020e870:	imove	#return, 0x000001
000141:0x0020e880:	jump	0x20e898
000141:0x0020e888:	imove	#return, 0x000000
000141:0x0020e898:	rts
000141:0x0020e8a0:	rts
PPEMatClassParameterColor::InitCuttent()
//scripts/3_Game/ppemanager\materials\matparameters\ppematclassparametercolor.c
000061:0x0020e8a8:	ifv	@f00, m_ColorDefaults[0x000000]
000061:0x0020e8b8:	ifv	@f01, m_ColorDefaults[0x000001]
000061:0x0020e8c8:	ifv	@f02, m_ColorDefaults[0x000002]
000061:0x0020e8d8:	ifv	@f03, m_ColorDefaults[0x000003]
000061:0x0020e8e8:	new	m_CurrentValues, Param4<float,float,float,float>
000061:0x0020e918:	rts
PPEMatClassParameterColor::GetParameterVarType()
000066:0x0020e920:	imove	#return, 0x000008
000066:0x0020e930:	rts
000066:0x0020e938:	rts
PPEMatClassParameterColor::Update()
000071:0x0020ec20:	call	
000071:0x0020ec40:	movem	p_total, p_total
000071:0x0020ec50:	move	setting_defaults, setting_defaults
000071:0x0020ec60:	release	p_total
000073:0x0020ec68:	imove	active_request_count, 0x000000
000077:0x0020ec78:	imove	setting_value_zero, 0x000000
000079:0x0020ec88:	new	color_values_total, array<float>
000079:0x0020eca8:	icall	
000079:0x0020ecb8:	icall	
000079:0x0020ecc8:	icall	
000079:0x0020ecd8:	icall	
000080:0x0020ece8:	new	color_values_temp, array<float>
000080:0x0020ed08:	icall	
000080:0x0020ed18:	icall	
000080:0x0020ed28:	icall	
000080:0x0020ed38:	icall	
000081:0x0020ed48:	imove	color_total_override_set, 0x000000
000084:0x0020ed58:	cmpcm	p_total, null
000084:0x0020ed68:	bne	0x20eda0
000086:0x0020ed70:	new	p_total, Param4<float,float,float,float>
000089:0x0020eda0:	movefm	[0xb5b35828], m_RequestMap
000089:0x0020edb0:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000089:0x0020edb8:	move	@m00, #return
000089:0x0020edc8:	cmpi	@m00, _i0
000089:0x0020edd8:	ble	0x20ee00
000091:0x0020ede0:	movefm	[0xb5b92348], m_LayerInfo
000091:0x0020edf0:	ncalli	map<int,@ColorValuesData>.Clear()
000091:0x0020edf8:	jump	0x20ee98
000096:0x0020ee00:	call	
000096:0x0020ee10:	movem	p_total, p_total
000096:0x0020ee20:	release	p_total
000097:0x0020ee28:	move	parameter_idx, m_ParameterIndex
000097:0x0020ee38:	movefm	[0xb5b35de0], m_Parent
000097:0x0020ee48:	call	
000098:0x0020ee58:	release	req_data
000098:0x0020ee60:	release	color_values_total
000098:0x0020ee68:	release	color_values_temp
000098:0x0020ee70:	movem	p_total, p_total
000098:0x0020ee80:	move	setting_defaults, setting_defaults
000098:0x0020ee90:	rts
000102:0x0020ee98:	imove	i, 0x000000
000102:0x0020eea8:	jump	0x20eec8
000102:0x0020eeb0:	move	@m00, i
000102:0x0020eec0:	inc	i
000102:0x0020eec8:	movefm	[0xb5b35828], m_RequestMap
000102:0x0020eed8:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000102:0x0020eee0:	cmpi	i, #return
000102:0x0020eef0:	bge	0x20f5c0
000104:0x0020eef8:	movefm	[0xb5b35828], m_RequestMap
000104:0x0020ef08:	icall	
000104:0x0020ef18:	icall	SafeCastType([0xb5b3d708], @c01, #return)
000104:0x0020ef30:	movetm	req_data, @c01
000106:0x0020ef40:	cmpcm	req_data, null
000106:0x0020ef50:	bne	0x20f040
000108:0x0020ef58:	icall	ToString(this)
000108:0x0020ef68:	adds	@s05, _s'PPEMatClassParameterColor | req_data not found! | ', #return
000108:0x0020ef78:	moves	@s04, @s05
000108:0x0020ef88:	adds	@s04, @s04, _s' | mat/par: '
000108:0x0020ef98:	moves	@s03, @s04
000108:0x0020efa8:	icall	ToString(m_MaterialIndex)
000108:0x0020efb8:	adds	@s03, @s03, #return
000108:0x0020efc8:	moves	@s02, @s03
000108:0x0020efd8:	adds	@s02, @s02, _s'/'
000108:0x0020efe8:	moves	@s01, @s02
000108:0x0020eff8:	icall	ToString(m_ParameterIndex)
000108:0x0020f008:	adds	@s01, @s01, #return
000108:0x0020f018:	moves	@s00, @s01
000108:0x0020f028:	call	Error(@s00)
000109:0x0020f038:	jump	0x20eeb0
000112:0x0020f040:	call	
000112:0x0020f050:	move	setting_value_zero, #return
000115:0x0020f060:	cmpi	setting_value_zero, _i0
000115:0x0020f070:	beq	0x20f0d0
000115:0x0020f078:	call	
000115:0x0020f088:	cmpi	#return, _i0
000115:0x0020f098:	bne	0x20f0d0
000115:0x0020f0a0:	call	
000115:0x0020f0b0:	cmpi	#return, _i0
000115:0x0020f0c0:	bne	0x20f0d0
000118:0x0020f0c8:	jump	0x20eeb0
000121:0x0020f0d0:	move	@m00, active_request_count
000121:0x0020f0e0:	inc	active_request_count
000125:0x0020f0e8:	movefm	@c00, req_data
000125:0x0020f0f8:	movefm	@c02, req_data
000125:0x0020f108:	movem	m_ColorLast, m_ColorCurrent
000127:0x0020f118:	call	
000127:0x0020f128:	cmpi	#return, _i0
000127:0x0020f138:	bne	0x20f2f0
000127:0x0020f140:	call	
000127:0x0020f150:	cmpi	#return, _i0
000127:0x0020f160:	beq	0x20f2f0
000129:0x0020f168:	movefm	@c01, req_data
000129:0x0020f178:	movefm	@c00, m_ColorCurrent
000129:0x0020f188:	icall	
000130:0x0020f198:	call	
000130:0x0020f1a8:	new	@c01, array<float>
000130:0x0020f1c8:	pushc	@c01
000130:0x0020f1d0:	icall	
000130:0x0020f1e0:	icall	
000130:0x0020f1f0:	push	#return
000130:0x0020f1f8:	icall	
000130:0x0020f208:	move	@f01, #return
000130:0x0020f218:	pop	#return
000130:0x0020f220:	icall	
000130:0x0020f230:	push	#return
000130:0x0020f238:	icall	
000130:0x0020f248:	move	@f01, #return
000130:0x0020f258:	pop	#return
000130:0x0020f260:	icall	
000130:0x0020f270:	push	#return
000130:0x0020f278:	icall	
000130:0x0020f288:	move	@f01, #return
000130:0x0020f298:	pop	#return
000130:0x0020f2a0:	icall	
000130:0x0020f2b0:	call	
000130:0x0020f2c0:	call	
000130:0x0020f2d8:	popc	@c01
000130:0x0020f2e0:	release	@c01
000132:0x0020f2e8:	jump	0x20eeb0
000135:0x0020f2f0:	cmpi	setting_value_zero, _i0
000135:0x0020f300:	beq	0x20f3b8
000137:0x0020f308:	movefm	@c00, req_data
000137:0x0020f318:	new	m_ColorTarget, array<float>
000137:0x0020f338:	movefm	[0xd3156238], m_ColorTarget
000137:0x0020f348:	icall	
000137:0x0020f358:	movefm	[0xd3156238], m_ColorTarget
000137:0x0020f368:	icall	
000137:0x0020f378:	movefm	[0xd3156238], m_ColorTarget
000137:0x0020f388:	icall	
000137:0x0020f398:	movefm	[0xd3156238], m_ColorTarget
000137:0x0020f3a8:	icall	
000142:0x0020f3b8:	call	
000143:0x0020f3c8:	cmpi	setting_value_zero, _i0
000143:0x0020f3d8:	beq	0x20f3f8
000145:0x0020f3e0:	call	
000145:0x0020f3f0:	jump	0x20f578
000150:0x0020f3f8:	movefm	@c01, req_data
000150:0x0020f408:	movefm	@c00, m_ColorTarget
000150:0x0020f418:	icall	
000151:0x0020f428:	call	
000151:0x0020f438:	new	@c01, array<float>
000151:0x0020f458:	pushc	@c01
000151:0x0020f460:	icall	
000151:0x0020f470:	icall	
000151:0x0020f480:	push	#return
000151:0x0020f488:	icall	
000151:0x0020f498:	move	@f01, #return
000151:0x0020f4a8:	pop	#return
000151:0x0020f4b0:	icall	
000151:0x0020f4c0:	push	#return
000151:0x0020f4c8:	icall	
000151:0x0020f4d8:	move	@f01, #return
000151:0x0020f4e8:	pop	#return
000151:0x0020f4f0:	icall	
000151:0x0020f500:	push	#return
000151:0x0020f508:	icall	
000151:0x0020f518:	move	@f01, #return
000151:0x0020f528:	pop	#return
000151:0x0020f530:	icall	
000151:0x0020f540:	call	
000151:0x0020f550:	call	
000151:0x0020f568:	popc	@c01
000151:0x0020f570:	release	@c01
000154:0x0020f578:	movefm	@c00, req_data
000154:0x0020f588:	movefm	@c01, m_ColorCurrent
000154:0x0020f598:	movefm	@c02, color_values_temp
000154:0x0020f5a8:	icall	
000154:0x0020f5b8:	jump	0x20eeb0
000161:0x0020f5c0:	imove	operator, 0xffffffff
000162:0x0020f5d0:	imove	override_active, 0x000000
000164:0x0020f5e0:	new	color_values_total, array<float>
000164:0x0020f600:	ifv	@f00, m_ColorDefaults[0x000000]
000164:0x0020f610:	icall	
000164:0x0020f620:	ifv	@f00, m_ColorDefaults[0x000001]
000164:0x0020f630:	icall	
000164:0x0020f640:	ifv	@f00, m_ColorDefaults[0x000002]
000164:0x0020f650:	icall	
000164:0x0020f660:	ifv	@f00, m_ColorDefaults[0x000003]
000164:0x0020f670:	icall	
000166:0x0020f680:	imove	i, 0x000000
000166:0x0020f690:	jump	0x20f6b0
000166:0x0020f698:	move	@m00, i
000166:0x0020f6a8:	inc	i
000166:0x0020f6b0:	movefm	[0xb5b92348], m_LayerInfo
000166:0x0020f6c0:	ncalli	map<int,@ColorValuesData>.Count()
000166:0x0020f6c8:	cmpi	i, #return
000166:0x0020f6d8:	bge	0x210490
000168:0x0020f6e0:	cmpi	override_active, _i0
000168:0x0020f6f0:	beq	0x20f700
000169:0x0020f6f8:	jump	0x210490
000171:0x0020f700:	movefm	[0xd31561b0], m_CommandLayersArray
000171:0x0020f710:	icall	
000171:0x0020f720:	movefm	[0xb5b92348], m_LayerInfo
000171:0x0020f730:	icall	
000171:0x0020f740:	call	
000171:0x0020f750:	movem	values, #return
000171:0x0020f760:	release	#return
000172:0x0020f768:	movefm	[0xd31561b0], m_CommandLayersArray
000172:0x0020f778:	icall	
000172:0x0020f788:	movefm	[0xb5b92348], m_LayerInfo
000172:0x0020f798:	icall	
000172:0x0020f7a8:	call	
000172:0x0020f7b8:	move	operator, #return
000174:0x0020f7c8:	move	#switch, operator
000174:0x0020f7d8:	imove	@m00, 0x000000
000174:0x0020f7e8:	cmpi	@m00, #switch
000174:0x0020f7f8:	bne	0x20f990
000177:0x0020f800:	icall	
000177:0x0020f810:	push	#return
000177:0x0020f818:	icall	
000177:0x0020f828:	move	@f02, #return
000177:0x0020f838:	pop	#return
000177:0x0020f840:	icall	Min(#return, @f02)
000177:0x0020f850:	icall	
000178:0x0020f860:	icall	
000178:0x0020f870:	push	#return
000178:0x0020f878:	icall	
000178:0x0020f888:	move	@f02, #return
000178:0x0020f898:	pop	#return
000178:0x0020f8a0:	icall	Min(#return, @f02)
000178:0x0020f8b0:	icall	
000179:0x0020f8c0:	icall	
000179:0x0020f8d0:	push	#return
000179:0x0020f8d8:	icall	
000179:0x0020f8e8:	move	@f02, #return
000179:0x0020f8f8:	pop	#return
000179:0x0020f900:	icall	Min(#return, @f02)
000179:0x0020f910:	icall	
000180:0x0020f920:	icall	
000180:0x0020f930:	push	#return
000180:0x0020f938:	icall	
000180:0x0020f948:	move	@f02, #return
000180:0x0020f958:	pop	#return
000180:0x0020f960:	icall	Min(#return, @f02)
000180:0x0020f970:	icall	
000181:0x0020f980:	jump	0x210460
000181:0x0020f988:	jump	0x20f9b8
000181:0x0020f990:	imove	@m00, 0x000001
000181:0x0020f9a0:	cmpi	@m00, #switch
000181:0x0020f9b0:	bne	0x20fb48
000184:0x0020f9b8:	icall	
000184:0x0020f9c8:	push	#return
000184:0x0020f9d0:	icall	
000184:0x0020f9e0:	move	@f02, #return
000184:0x0020f9f0:	pop	#return
000184:0x0020f9f8:	icall	Max(#return, @f02)
000184:0x0020fa08:	icall	
000185:0x0020fa18:	icall	
000185:0x0020fa28:	push	#return
000185:0x0020fa30:	icall	
000185:0x0020fa40:	move	@f02, #return
000185:0x0020fa50:	pop	#return
000185:0x0020fa58:	icall	Max(#return, @f02)
000185:0x0020fa68:	icall	
000186:0x0020fa78:	icall	
000186:0x0020fa88:	push	#return
000186:0x0020fa90:	icall	
000186:0x0020faa0:	move	@f02, #return
000186:0x0020fab0:	pop	#return
000186:0x0020fab8:	icall	Max(#return, @f02)
000186:0x0020fac8:	icall	
000187:0x0020fad8:	icall	
000187:0x0020fae8:	push	#return
000187:0x0020faf0:	icall	
000187:0x0020fb00:	move	@f02, #return
000187:0x0020fb10:	pop	#return
000187:0x0020fb18:	icall	Max(#return, @f02)
000187:0x0020fb28:	icall	
000188:0x0020fb38:	jump	0x210460
000188:0x0020fb40:	jump	0x20fb70
000188:0x0020fb48:	imove	@m00, 0x000003
000188:0x0020fb58:	cmpi	@m00, #switch
000188:0x0020fb68:	bne	0x20fb78
000188:0x0020fb70:	jump	0x20fba0
000188:0x0020fb78:	imove	@m00, 0x000002
000188:0x0020fb88:	cmpi	@m00, #switch
000188:0x0020fb98:	bne	0x20fd70
000192:0x0020fba0:	icall	
000192:0x0020fbb0:	push	#return
000192:0x0020fbb8:	icall	
000192:0x0020fbc8:	move	@f02, #return
000192:0x0020fbd8:	pop	#return
000192:0x0020fbe0:	addf	@f01, #return, @f02
000192:0x0020fbf0:	move	@f00, @f01
000192:0x0020fc00:	icall	
000193:0x0020fc10:	icall	
000193:0x0020fc20:	push	#return
000193:0x0020fc28:	icall	
000193:0x0020fc38:	move	@f02, #return
000193:0x0020fc48:	pop	#return
000193:0x0020fc50:	addf	@f01, #return, @f02
000193:0x0020fc60:	move	@f00, @f01
000193:0x0020fc70:	icall	
000194:0x0020fc80:	icall	
000194:0x0020fc90:	push	#return
000194:0x0020fc98:	icall	
000194:0x0020fca8:	move	@f02, #return
000194:0x0020fcb8:	pop	#return
000194:0x0020fcc0:	addf	@f01, #return, @f02
000194:0x0020fcd0:	move	@f00, @f01
000194:0x0020fce0:	icall	
000195:0x0020fcf0:	icall	
000195:0x0020fd00:	push	#return
000195:0x0020fd08:	icall	
000195:0x0020fd18:	move	@f02, #return
000195:0x0020fd28:	pop	#return
000195:0x0020fd30:	addf	@f01, #return, @f02
000195:0x0020fd40:	move	@f00, @f01
000195:0x0020fd50:	icall	
000196:0x0020fd60:	jump	0x210460
000196:0x0020fd68:	jump	0x20fd98
000196:0x0020fd70:	imove	@m00, 0x000005
000196:0x0020fd80:	cmpi	@m00, #switch
000196:0x0020fd90:	bne	0x20fda0
000196:0x0020fd98:	jump	0x20fdc8
000196:0x0020fda0:	imove	@m00, 0x000004
000196:0x0020fdb0:	cmpi	@m00, #switch
000196:0x0020fdc0:	bne	0x20ff98
000204:0x0020fdc8:	icall	
000204:0x0020fdd8:	push	#return
000204:0x0020fde0:	icall	
000204:0x0020fdf0:	move	@f02, #return
000204:0x0020fe00:	pop	#return
000204:0x0020fe08:	subf	@f01, #return, @f02
000204:0x0020fe18:	move	@f00, @f01
000204:0x0020fe28:	icall	
000205:0x0020fe38:	icall	
000205:0x0020fe48:	push	#return
000205:0x0020fe50:	icall	
000205:0x0020fe60:	move	@f02, #return
000205:0x0020fe70:	pop	#return
000205:0x0020fe78:	subf	@f01, #return, @f02
000205:0x0020fe88:	move	@f00, @f01
000205:0x0020fe98:	icall	
000206:0x0020fea8:	icall	
000206:0x0020feb8:	push	#return
000206:0x0020fec0:	icall	
000206:0x0020fed0:	move	@f02, #return
000206:0x0020fee0:	pop	#return
000206:0x0020fee8:	subf	@f01, #return, @f02
000206:0x0020fef8:	move	@f00, @f01
000206:0x0020ff08:	icall	
000207:0x0020ff18:	icall	
000207:0x0020ff28:	push	#return
000207:0x0020ff30:	icall	
000207:0x0020ff40:	move	@f02, #return
000207:0x0020ff50:	pop	#return
000207:0x0020ff58:	subf	@f01, #return, @f02
000207:0x0020ff68:	move	@f00, @f01
000207:0x0020ff78:	icall	
000208:0x0020ff88:	jump	0x210460
000208:0x0020ff90:	jump	0x20ffc0
000208:0x0020ff98:	imove	@m00, 0x000007
000208:0x0020ffa8:	cmpi	@m00, #switch
000208:0x0020ffb8:	bne	0x20ffc8
000208:0x0020ffc0:	jump	0x20fff0
000208:0x0020ffc8:	imove	@m00, 0x000006
000208:0x0020ffd8:	cmpi	@m00, #switch
000208:0x0020ffe8:	bne	0x2101c0
000216:0x0020fff0:	icall	
000216:0x00210000:	push	#return
000216:0x00210008:	icall	
000216:0x00210018:	move	@f02, #return
000216:0x00210028:	pop	#return
000216:0x00210030:	subf	@f01, #return, @f02
000216:0x00210040:	move	@f00, @f01
000216:0x00210050:	icall	
000217:0x00210060:	icall	
000217:0x00210070:	push	#return
000217:0x00210078:	icall	
000217:0x00210088:	move	@f02, #return
000217:0x00210098:	pop	#return
000217:0x002100a0:	subf	@f01, #return, @f02
000217:0x002100b0:	move	@f00, @f01
000217:0x002100c0:	icall	
000218:0x002100d0:	icall	
000218:0x002100e0:	push	#return
000218:0x002100e8:	icall	
000218:0x002100f8:	move	@f02, #return
000218:0x00210108:	pop	#return
000218:0x00210110:	subf	@f01, #return, @f02
000218:0x00210120:	move	@f00, @f01
000218:0x00210130:	icall	
000219:0x00210140:	icall	
000219:0x00210150:	push	#return
000219:0x00210158:	icall	
000219:0x00210168:	move	@f02, #return
000219:0x00210178:	pop	#return
000219:0x00210180:	subf	@f01, #return, @f02
000219:0x00210190:	move	@f00, @f01
000219:0x002101a0:	icall	
000220:0x002101b0:	jump	0x210460
000220:0x002101b8:	jump	0x2101e8
000220:0x002101c0:	imove	@m00, 0x000008
000220:0x002101d0:	cmpi	@m00, #switch
000220:0x002101e0:	bne	0x2103b8
000227:0x002101e8:	icall	
000227:0x002101f8:	push	#return
000227:0x00210200:	icall	
000227:0x00210210:	move	@f02, #return
000227:0x00210220:	pop	#return
000227:0x00210228:	mulf	@f01, #return, @f02
000227:0x00210238:	move	@f00, @f01
000227:0x00210248:	icall	
000228:0x00210258:	icall	
000228:0x00210268:	push	#return
000228:0x00210270:	icall	
000228:0x00210280:	move	@f02, #return
000228:0x00210290:	pop	#return
000228:0x00210298:	mulf	@f01, #return, @f02
000228:0x002102a8:	move	@f00, @f01
000228:0x002102b8:	icall	
000229:0x002102c8:	icall	
000229:0x002102d8:	push	#return
000229:0x002102e0:	icall	
000229:0x002102f0:	move	@f02, #return
000229:0x00210300:	pop	#return
000229:0x00210308:	mulf	@f01, #return, @f02
000229:0x00210318:	move	@f00, @f01
000229:0x00210328:	icall	
000230:0x00210338:	icall	
000230:0x00210348:	push	#return
000230:0x00210350:	icall	
000230:0x00210360:	move	@f02, #return
000230:0x00210370:	pop	#return
000230:0x00210378:	mulf	@f01, #return, @f02
000230:0x00210388:	move	@f00, @f01
000230:0x00210398:	icall	
000231:0x002103a8:	jump	0x210460
000231:0x002103b0:	jump	0x2103e0
000231:0x002103b8:	imove	@m00, 0x00000a
000231:0x002103c8:	cmpi	@m00, #switch
000231:0x002103d8:	bne	0x210410
000234:0x002103e0:	movefm	@c00, values
000234:0x002103f0:	icall	
000235:0x00210400:	jump	0x210460
000235:0x00210408:	jump	0x210438
000235:0x00210410:	imove	@m00, 0x000009
000235:0x00210420:	cmpi	@m00, #switch
000235:0x00210430:	bne	0x210460
000238:0x00210438:	movefm	@c00, values
000238:0x00210448:	icall	
000239:0x00210458:	jump	0x210460
000243:0x00210460:	cmpi	operator, OVERRIDE
000243:0x00210470:	bne	0x210488
000246:0x00210478:	imove	override_active, 0x000001
000246:0x00210488:	jump	0x20f698
000252:0x00210490:	movefm	[0xd31561b0], m_CommandLayersArray
000252:0x002104a0:	ncalli	array<int>.Clear()
000254:0x002104a8:	cmpi	m_MaterialIndex, _i15
000254:0x002104b8:	bne	0x2104d8
000254:0x002104c0:	cmpi	m_ParameterIndex, _i21
000254:0x002104d0:	bne	0x2104d8
000261:0x002104d8:	cmpi	active_request_count, _i0
000261:0x002104e8:	bgt	0x210520
000263:0x002104f0:	call	
000263:0x00210500:	movem	p_total, p_total
000263:0x00210510:	release	p_total
000263:0x00210518:	jump	0x210680
000267:0x00210520:	movefm	@c01, p_total
000267:0x00210530:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000267:0x00210548:	movec	@c02, @c00
000267:0x00210558:	icall	
000267:0x00210568:	move	param1, #return
000268:0x00210578:	movefm	@c01, p_total
000268:0x00210588:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000268:0x002105a0:	movec	@c02, @c00
000268:0x002105b0:	icall	
000268:0x002105c0:	move	param2, #return
000269:0x002105d0:	movefm	@c01, p_total
000269:0x002105e0:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000269:0x002105f8:	movec	@c02, @c00
000269:0x00210608:	icall	
000269:0x00210618:	move	param3, #return
000270:0x00210628:	movefm	@c01, p_total
000270:0x00210638:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000270:0x00210650:	movec	@c02, @c00
000270:0x00210660:	icall	
000270:0x00210670:	move	param4, #return
000274:0x00210680:	move	parameter_idx, m_ParameterIndex
000274:0x00210690:	movefm	[0xb5b35de0], m_Parent
000274:0x002106a0:	call	
000276:0x002106b0:	call	
000276:0x002106c0:	movem	p_total, result_values
000276:0x002106d0:	release	result_values
000278:0x002106d8:	movem	m_CurrentValues, p_total
000278:0x002106e8:	release	req_data
000278:0x002106f0:	release	color_values_total
000278:0x002106f8:	release	color_values_temp
000278:0x00210700:	release	values
000278:0x00210708:	movem	p_total, p_total
000278:0x00210718:	move	setting_defaults, setting_defaults
000278:0x00210728:	rts
PPEMatClassParameterColor::PrepareLayerInfo()
000285:0x00210758:	movefm	[0xb5b92348], m_LayerInfo
000285:0x00210768:	icall	
000285:0x00210778:	cmpi	#return, _i0
000285:0x00210788:	beq	0x2107e8
000287:0x00210790:	movefm	[0xb5b92348], m_LayerInfo
000287:0x002107a0:	icall	
000287:0x002107b0:	movetm	tmp, #return
000288:0x002107c0:	call	
000289:0x002107d0:	call	
000289:0x002107e0:	jump	0x210810
000293:0x002107e8:	new	tmp, ColorValuesData
000296:0x00210810:	movefm	@c00, tmp
000296:0x00210820:	movefm	[0xb5b92348], m_LayerInfo
000296:0x00210830:	icall	
000297:0x00210840:	call	
000297:0x00210850:	release	tmp
000297:0x00210858:	rts
PPEMatClassParameterColor::SetParameterValueDefault()
000302:0x00210860:	cmpcm	p_total, null
000302:0x00210870:	bne	0x2108f0
000304:0x00210878:	ifv	@f00, m_ColorDefaults[0x000000]
000304:0x00210888:	ifv	@f01, m_ColorDefaults[0x000001]
000304:0x00210898:	ifv	@f02, m_ColorDefaults[0x000002]
000304:0x002108a8:	ifv	@f03, m_ColorDefaults[0x000003]
000304:0x002108b8:	new	p_total, Param4<float,float,float,float>
000304:0x002108e8:	jump	0x210a50
000308:0x002108f0:	movefm	@c01, p_total
000308:0x00210900:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000308:0x00210918:	movec	@c02, @c00
000308:0x00210928:	ifv	@f00, m_ColorDefaults[0x000000]
000308:0x00210938:	move	param1, @f00
000309:0x00210948:	movefm	@c01, p_total
000309:0x00210958:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000309:0x00210970:	movec	@c02, @c00
000309:0x00210980:	ifv	@f00, m_ColorDefaults[0x000001]
000309:0x00210990:	move	param2, @f00
000310:0x002109a0:	movefm	@c01, p_total
000310:0x002109b0:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000310:0x002109c8:	movec	@c02, @c00
000310:0x002109d8:	ifv	@f00, m_ColorDefaults[0x000002]
000310:0x002109e8:	move	param3, @f00
000311:0x002109f8:	movefm	@c01, p_total
000311:0x00210a08:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000311:0x00210a20:	movec	@c02, @c00
000311:0x00210a30:	ifv	@f00, m_ColorDefaults[0x000003]
000311:0x00210a40:	move	param4, @f00
000313:0x00210a50:	movem	m_CurrentValues, p_total
000313:0x00210a60:	movem	p_total, p_total
000313:0x00210a70:	rts
PPEMatClassParameterColorColorization::ModifyResultValues()
000321:0x00210bf0:	call	
000321:0x00210c00:	movem	result_values, result_values
000321:0x00210c10:	release	result_values
000324:0x00210c18:	call	GetPPEManager()
000324:0x00210c28:	call	
000324:0x00210c40:	movem	par, #return
000324:0x00210c50:	release	#return
000324:0x00210c58:	release	#return
000325:0x00210c60:	movefm	@c01, par
000325:0x00210c70:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000325:0x00210c88:	movec	@c02, @c00
000325:0x00210c98:	move	saturation_coef, param1
000327:0x00210ca8:	movefm	@c01, result_values
000327:0x00210cb8:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000327:0x00210cd0:	movec	@c02, @c00
000327:0x00210ce0:	move	r, param1
000328:0x00210cf0:	movefm	@c01, result_values
000328:0x00210d00:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000328:0x00210d18:	movec	@c02, @c00
000328:0x00210d28:	move	g, param2
000329:0x00210d38:	movefm	@c01, result_values
000329:0x00210d48:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000329:0x00210d60:	movec	@c02, @c00
000329:0x00210d70:	move	b, param3
000330:0x00210d80:	movefm	@c01, result_values
000330:0x00210d90:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000330:0x00210da8:	movec	@c02, @c00
000330:0x00210db8:	move	a, param4
000332:0x00210dc8:	icall	Max(r, g)
000332:0x00210dd8:	push	#return
000332:0x00210de0:	icall	Max(#return, b)
000332:0x00210df0:	move	@f01, #return
000332:0x00210e00:	pop	#return
000332:0x00210e08:	move	highest_channel, @f01
000333:0x00210e18:	call	EaseOutSine(saturation_coef)
000333:0x00210e28:	move	saturation_coef, #return
000335:0x00210e38:	icall	Lerp(highest_channel, r, saturation_coef)
000335:0x00210e50:	move	r, #return
000336:0x00210e60:	icall	Lerp(highest_channel, g, saturation_coef)
000336:0x00210e78:	move	g, #return
000337:0x00210e88:	icall	Lerp(highest_channel, b, saturation_coef)
000337:0x00210ea0:	move	b, #return
000338:0x00210eb0:	ifv	@f01, m_ColorDefaults[0x000003]
000338:0x00210ec0:	icall	Lerp(@f01, a, saturation_coef)
000338:0x00210ed8:	move	a, #return
000341:0x00210ee8:	movefm	@c01, result_values
000341:0x00210ef8:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000341:0x00210f10:	movec	@c02, @c00
000341:0x00210f20:	move	param1, r
000342:0x00210f30:	movefm	@c01, result_values
000342:0x00210f40:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000342:0x00210f58:	movec	@c02, @c00
000342:0x00210f68:	move	param2, g
000343:0x00210f78:	movefm	@c01, result_values
000343:0x00210f88:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000343:0x00210fa0:	movec	@c02, @c00
000343:0x00210fb0:	move	param3, b
000344:0x00210fc0:	movefm	@c01, result_values
000344:0x00210fd0:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000344:0x00210fe8:	movec	@c02, @c00
000344:0x00210ff8:	move	param4, a
000344:0x00211008:	release	par
000344:0x00211010:	movem	result_values, result_values
000344:0x00211020:	rts
Input::IsAnyInputDeviceActive()
//scripts/3_Game/tools\input.c
000158:0x00211028:	ncalli	Input.IsActiveGamepadSelected()
000158:0x00211030:	cmpi	#return, _i0
000158:0x00211040:	bne	0x211088
000158:0x00211048:	ncalli	Input.IsMouseConnected()
000158:0x00211050:	cmpi	#return, _i0
000158:0x00211060:	bne	0x211088
000158:0x00211068:	ncalli	Input.IsKeyboardConnected()
000158:0x00211070:	cmpi	#return, _i0
000158:0x00211080:	beq	0x2110a0
000158:0x00211088:	imove	#return, 0x000001
000158:0x00211098:	jump	0x2110b0
000158:0x002110a0:	imove	#return, 0x000000
000158:0x002110b0:	rts
000158:0x002110b8:	rts
Input::AreAllAllowedInputDevicesActive()
000167:0x00211238:	imove	passed, 0x000001
000168:0x00211248:	ncalli	Input.IsActiveGamepadSelected()
000168:0x00211250:	move	gamepad, #return
000169:0x00211260:	ncalli	Input.IsMouseConnected()
000169:0x00211268:	move	mouse, #return
000170:0x00211278:	ncalli	Input.IsKeyboardConnected()
000170:0x00211280:	move	keyboard, #return
000173:0x00211290:	call	
000173:0x002112a0:	move	@m00, #return
000173:0x002112b0:	cmpi	@m00, IN_GAME
000173:0x002112c0:	beq	0x2112e8
000175:0x002112c8:	ncalli	Input.IsEnabledMouseAndKeyboard()
000175:0x002112d0:	move	MnKEnabled, #return
000175:0x002112e0:	jump	0x211368
000177:0x002112e8:	call	
000177:0x002112f8:	move	@m00, #return
000177:0x00211308:	cmpi	@m00, MAIN_MENU
000177:0x00211318:	beq	0x211340
000179:0x00211320:	ncalli	Input.IsEnabledMouseAndKeyboardEvenOnServer()
000179:0x00211328:	move	MnKEnabled, #return
000179:0x00211338:	jump	0x211368
000183:0x00211340:	imove	#return, 0x000001
000183:0x00211350:	movem	unavailableDeviceList, unavailableDeviceList
000183:0x00211360:	rts
000186:0x00211368:	cmpi	MnKEnabled, _i0
000186:0x00211378:	bne	0x2113e0
000188:0x00211380:	cmpi	gamepad, _i0
000188:0x00211390:	bne	0x2113d8
000190:0x00211398:	imove	passed, 0x000000
000191:0x002113a8:	call	
000191:0x002113c0:	movem	unavailableDeviceList, filler
000191:0x002113d0:	release	filler
000191:0x002113d8:	jump	0x2114f0
000196:0x002113e0:	cmpi	gamepad, _i0
000196:0x002113f0:	bne	0x2114f0
000198:0x002113f8:	cmpi	mouse, _i0
000198:0x00211408:	bne	0x211450
000200:0x00211410:	imove	passed, 0x000000
000201:0x00211420:	call	
000201:0x00211438:	movem	unavailableDeviceList, filler
000201:0x00211448:	release	filler
000203:0x00211450:	cmpi	keyboard, _i0
000203:0x00211460:	bne	0x2114a8
000205:0x00211468:	imove	passed, 0x000000
000206:0x00211478:	call	
000206:0x00211490:	movem	unavailableDeviceList, filler
000206:0x002114a0:	release	filler
000209:0x002114a8:	cmpi	passed, _i0
000209:0x002114b8:	bne	0x2114f0
000211:0x002114c0:	call	
000211:0x002114d8:	movem	unavailableDeviceList, filler
000211:0x002114e8:	release	filler
000215:0x002114f0:	move	#return, passed
000215:0x00211500:	movem	unavailableDeviceList, unavailableDeviceList
000215:0x00211510:	rts
000215:0x00211518:	movem	unavailableDeviceList, unavailableDeviceList
000215:0x00211528:	rts
Input::FillUnavailableDeviceArray()
000220:0x00211530:	cmpcm	filler, null
000220:0x00211540:	beq	0x211558
000222:0x00211548:	icall	
000222:0x00211558:	movem	filler, filler
000222:0x00211568:	rts
Input::UpdateConnectedInputDeviceList()
000229:0x00211570:	call	
000229:0x00211580:	ncalli	array<int>.Clear()
000229:0x00211588:	release	#return
000231:0x00211590:	ncalli	Input.IsActiveGamepadSelected()
000231:0x00211598:	cmpi	#return, _i0
000231:0x002115a8:	beq	0x2115d8
000232:0x002115b0:	call	
000232:0x002115c0:	icall	
000232:0x002115d0:	release	#return
000233:0x002115d8:	ncalli	Input.IsMouseConnected()
000233:0x002115e0:	cmpi	#return, _i0
000233:0x002115f0:	beq	0x211620
000234:0x002115f8:	call	
000234:0x00211608:	icall	
000234:0x00211618:	release	#return
000235:0x00211620:	ncalli	Input.IsKeyboardConnected()
000235:0x00211628:	cmpi	#return, _i0
000235:0x00211638:	beq	0x211668
000236:0x00211640:	call	
000236:0x00211650:	icall	
000236:0x00211660:	release	#return
000236:0x00211668:	rts
Input::OnGamepadDisconnected()
000279:0x00211698:	call	
000279:0x002116a8:	cmpi	#return, _i0
000279:0x002116b8:	beq	0x2117c8
000281:0x002116c0:	call	
000283:0x002116d0:	call	
000283:0x002116e0:	cmpi	#return, _i0
000283:0x002116f0:	bne	0x2117c8
000285:0x002116f8:	call	
000285:0x00211708:	move	state, #return
000286:0x00211718:	cmpi	state, MAIN_MENU_START
000286:0x00211728:	beq	0x2117c8
000286:0x00211730:	cmpi	state, MAIN_MENU_USER_SELECT
000286:0x00211740:	beq	0x2117c8
000288:0x00211748:	ncall	GetGame()
000288:0x00211750:	ncalli	CGame.GetMission()
000288:0x00211758:	cmpc	#return, null
000288:0x00211768:	beq	0x2117c8
000289:0x00211770:	ncall	GetGame()
000289:0x00211778:	ncalli	CGame.GetMission()
000289:0x00211780:	call	
000289:0x00211790:	icall	
000289:0x002117c0:	release	#return
000289:0x002117c8:	rts
Input::OnGamepadIdentification()
000298:0x002117f8:	cmpi	gamepad, _i-1
000298:0x00211808:	ble	0x2119c8
000300:0x00211810:	call	
000300:0x00211820:	move	state, #return
000302:0x00211830:	call	
000303:0x00211840:	ncalli	Input.SelectActiveGamepad(gamepad)
000304:0x00211850:	call	
000305:0x00211860:	call	
000306:0x00211870:	cmpi	state, MAIN_MENU_START
000306:0x00211880:	beq	0x2118a0
000306:0x00211888:	cmpi	state, MAIN_MENU_USER_SELECT
000306:0x00211898:	bne	0x2118e8
000308:0x002118a0:	ncall	GetGame()
000308:0x002118a8:	ncalli	CGame.GetMission()
000308:0x002118b0:	cmpc	#return, null
000308:0x002118c0:	beq	0x2118e8
000309:0x002118c8:	ncall	GetGame()
000309:0x002118d0:	ncalli	CGame.GetMission()
000309:0x002118d8:	call	
000312:0x002118e8:	ncall	GetGame()
000312:0x002118f0:	cmpc	#return, null
000312:0x00211900:	beq	0x2119c0
000312:0x00211908:	ncall	GetGame()
000312:0x00211910:	ncalli	CGame.GetMission()
000312:0x00211918:	cmpc	#return, null
000312:0x00211928:	beq	0x2119c0
000312:0x00211930:	ncall	GetGame()
000312:0x00211938:	ncalli	CGame.GetMission()
000312:0x00211940:	call	
000312:0x00211950:	cmpcm	#return, null
000312:0x00211960:	beq	0x2119c0
000313:0x00211968:	ncall	GetGame()
000313:0x00211970:	ncalli	CGame.GetMission()
000313:0x00211978:	call	
000313:0x00211988:	icall	
000313:0x002119b8:	release	#return
000313:0x002119c0:	release	#return
000313:0x002119c8:	rts
Input::GetUserGamepad()
000319:0x00211aa0:	new	gamepads, array<int>
000320:0x00211ac0:	movefm	[0xb5bf0f30], gamepads
000320:0x00211ad0:	ncalli	Input.GetGamepadList([0xb5bf0f30])
000321:0x00211ae0:	imove	i, 0x000000
000321:0x00211af0:	jump	0x211b10
000321:0x00211af8:	move	@m00, i
000321:0x00211b08:	inc	i
000321:0x00211b10:	ncalli	array<int>.Count()
000321:0x00211b18:	cmpi	i, #return
000321:0x00211b28:	bge	0x211bb0
000324:0x00211b30:	icall	
000324:0x00211b40:	icall	
000325:0x00211b50:	cmpm	user, user2
000325:0x00211b60:	bne	0x211ba0
000326:0x00211b68:	icall	
000326:0x00211b78:	move	#return, #return
000326:0x00211b88:	release	user2
000326:0x00211b90:	release	gamepads
000326:0x00211b98:	rts
000326:0x00211ba0:	release	user2
000326:0x00211ba8:	jump	0x211af8
000328:0x00211bb0:	imove	#return, 0xffffffff
000328:0x00211bc0:	release	gamepads
000328:0x00211bc8:	rts
000328:0x00211bd0:	release	gamepads
000328:0x00211bd8:	rts
Input::IsInactiveGamepadOrUserSelected()
000341:0x00211be0:	imove	#return, 0x000000
000341:0x00211bf0:	rts
000341:0x00211bf8:	rts
Input::OnMouseConnected()
000348:0x00211c28:	call	
000349:0x00211c38:	call	
000349:0x00211c48:	cmpi	#return, _i0
000349:0x00211c58:	bne	0x211d30
000349:0x00211c60:	ncall	GetGame()
000349:0x00211c68:	ncalli	CGame.GetMission()
000349:0x00211c70:	cmpc	#return, null
000349:0x00211c80:	beq	0x211d30
000351:0x00211c88:	call	
000351:0x00211c98:	move	state, #return
000352:0x00211ca8:	cmpi	state, MAIN_MENU_START
000352:0x00211cb8:	beq	0x211d30
000352:0x00211cc0:	cmpi	state, MAIN_MENU_USER_SELECT
000352:0x00211cd0:	beq	0x211d30
000354:0x00211cd8:	ncall	GetGame()
000354:0x00211ce0:	ncalli	CGame.GetMission()
000354:0x00211ce8:	call	
000354:0x00211cf8:	icall	
000354:0x00211d28:	release	#return
000354:0x00211d30:	rts
Input::OnMouseDisconnected()
000363:0x00211d60:	call	
000364:0x00211d70:	call	
000364:0x00211d80:	cmpi	#return, _i0
000364:0x00211d90:	bne	0x211e68
000364:0x00211d98:	ncall	GetGame()
000364:0x00211da0:	ncalli	CGame.GetMission()
000364:0x00211da8:	cmpc	#return, null
000364:0x00211db8:	beq	0x211e68
000366:0x00211dc0:	call	
000366:0x00211dd0:	move	state, #return
000367:0x00211de0:	cmpi	state, MAIN_MENU_START
000367:0x00211df0:	beq	0x211e68
000367:0x00211df8:	cmpi	state, MAIN_MENU_USER_SELECT
000367:0x00211e08:	beq	0x211e68
000369:0x00211e10:	ncall	GetGame()
000369:0x00211e18:	ncalli	CGame.GetMission()
000369:0x00211e20:	call	
000369:0x00211e30:	icall	
000369:0x00211e60:	release	#return
000369:0x00211e68:	rts
Input::OnKeyboardConnected()
000378:0x00211e98:	call	
000379:0x00211ea8:	call	
000379:0x00211eb8:	cmpi	#return, _i0
000379:0x00211ec8:	bne	0x211fa0
000379:0x00211ed0:	ncall	GetGame()
000379:0x00211ed8:	ncalli	CGame.GetMission()
000379:0x00211ee0:	cmpc	#return, null
000379:0x00211ef0:	beq	0x211fa0
000381:0x00211ef8:	call	
000381:0x00211f08:	move	state, #return
000382:0x00211f18:	cmpi	state, MAIN_MENU_START
000382:0x00211f28:	beq	0x211fa0
000382:0x00211f30:	cmpi	state, MAIN_MENU_USER_SELECT
000382:0x00211f40:	beq	0x211fa0
000384:0x00211f48:	ncall	GetGame()
000384:0x00211f50:	ncalli	CGame.GetMission()
000384:0x00211f58:	call	
000384:0x00211f68:	icall	
000384:0x00211f98:	release	#return
000384:0x00211fa0:	rts
Input::OnKeyboardDisconnected()
000393:0x00211fd0:	call	
000394:0x00211fe0:	call	
000394:0x00211ff0:	cmpi	#return, _i0
000394:0x00212000:	bne	0x2120d8
000394:0x00212008:	ncall	GetGame()
000394:0x00212010:	ncalli	CGame.GetMission()
000394:0x00212018:	cmpc	#return, null
000394:0x00212028:	beq	0x2120d8
000396:0x00212030:	call	
000396:0x00212040:	move	state, #return
000397:0x00212050:	cmpi	state, MAIN_MENU_START
000397:0x00212060:	beq	0x2120d8
000397:0x00212068:	cmpi	state, MAIN_MENU_USER_SELECT
000397:0x00212078:	beq	0x2120d8
000399:0x00212080:	ncall	GetGame()
000399:0x00212088:	ncalli	CGame.GetMission()
000399:0x00212090:	call	
000399:0x002120a0:	icall	
000399:0x002120d0:	release	#return
000399:0x002120d8:	rts
Input::OnLastInputDeviceChanged()
000407:0x002120e0:	ncall	GetGame()
000407:0x002120e8:	ncalli	CGame.GetMission()
000407:0x002120f0:	cmpc	#return, null
000407:0x00212100:	beq	0x212160
000409:0x00212108:	ncall	GetGame()
000409:0x00212110:	ncalli	CGame.GetMission()
000409:0x00212118:	call	
000409:0x00212128:	icall	
000409:0x00212158:	release	#return
000409:0x00212160:	rts
MenuCarEngineSmoke::MenuCarEngineSmoke()
//scripts/3_Game/effects\effectparticle\menucarenginesmoke.c
000005:0x00212168:	call	
000005:0x00212178:	rts
BiosPrivacyPermissionResult::Compare()
//scripts/3_Game/services\biosprivacyservice.c
000034:0x00212180:	movefm	@c00, a
000034:0x00212190:	movefm	@c01, b
000034:0x002121a0:	cmpi	m_Permission, m_Permission
000034:0x002121b0:	bne	0x212208
000034:0x002121b8:	movefm	@c02, a
000034:0x002121c8:	movefm	@c03, b
000034:0x002121d8:	cmpi	m_IsAllowed, m_IsAllowed
000034:0x002121e8:	bne	0x212208
000034:0x002121f0:	imove	#return, 0x000001
000034:0x00212200:	jump	0x212218
000034:0x00212208:	imove	#return, 0x000000
000034:0x00212218:	rts
000034:0x00212220:	rts
BiosPrivacyService::OnPermissions()
000093:0x00212250:	cmpcm	result_list, null
000093:0x00212260:	bne	0x2122b0
000095:0x00212268:	icall	ToString(error)
000095:0x00212278:	adds	@s01, _s'biapi privacy error: ', #return
000095:0x00212288:	moves	@s00, @s01
000095:0x00212298:	icall	Print(@s00)
000096:0x002122a8:	rts
000099:0x002122b0:	call	OnPermissionsAsync(result_list, error)
000099:0x002122c8:	rts
BiosPrivacyService::OnPrivilege()
000109:0x00212330:	move	#switch, privilege
000109:0x00212340:	imove	@m00, 0x000002
000109:0x00212350:	cmpi	@m00, #switch
000109:0x00212360:	bne	0x212388
000113:0x00212368:	call	OnLoadMPPrivilege(error)
000114:0x00212378:	jump	0x2123c8
000114:0x00212380:	jump	0x2123b0
000114:0x00212388:	imove	@m00, 0x000000
000114:0x00212398:	cmpi	@m00, #switch
000114:0x002123a8:	bne	0x2123c8
000118:0x002123b0:	call	OnLoadVoicePrivilege(error)
000119:0x002123c0:	jump	0x2123c8
000119:0x002123c8:	rts
DebugWeatherRPCData::DebugWeatherRPCData()
//scripts/3_Game/debugweatherrpcdata.c
000001:0x002123d0:	imove	m_FogValue, -1.00000
000001:0x002123e0:	imove	m_OvercastValue, -1.00000
000001:0x002123f0:	imove	m_RainValue, -1.00000
000001:0x00212400:	imove	m_FogInterpolation, 0.00000
000001:0x00212410:	imove	m_OvercastInterpolation, -1.00000
000001:0x00212420:	imove	m_RainInterpolation, -1.00000
000001:0x00212430:	imove	m_FogDuration, -1.00000
000001:0x00212440:	imove	m_OvercastDuration, -1.00000
000001:0x00212450:	imove	m_RainDuration, -1.00000
000001:0x00212460:	rts
PPERequester_HealthHitReaction::SetHitIntensity()
//scripts/3_Game/ppemanager\requesters\pperhealthhit.c
000008:0x00212490:	call	
000009:0x002124b8:	new	@c01, array<float>
000009:0x002124d8:	pushc	@c01
000009:0x002124e0:	mulf	@f01, intensity, INTENSITY_MULT
000009:0x002124f0:	move	@f00, @f01
000009:0x00212500:	icall	
000009:0x00212510:	icall	
000009:0x00212520:	icall	
000009:0x00212530:	icall	
000009:0x00212540:	call	
000009:0x00212560:	popc	@c01
000009:0x00212568:	release	@c01
000009:0x00212570:	rts
Hit_Plastic::Hit_Plastic()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_plastic.c
000005:0x00212578:	call	
000006:0x00212588:	call	
000007:0x00212598:	call	
000007:0x002125a8:	rts
PPEffects::Init()
//scripts/3_Game/ppeffects.c
000055:0x00212658:	cmpcm	m_BlurValues, null
000055:0x00212668:	beq	0x212678
000057:0x00212670:	delete	m_BlurValues
000059:0x00212678:	cmpcm	m_ChromAbbValues, null
000059:0x00212688:	beq	0x212698
000061:0x00212690:	delete	m_ChromAbbValues
000063:0x00212698:	cmpcm	m_VignetteEffects, null
000063:0x002126a8:	beq	0x2126b8
000065:0x002126b0:	delete	m_VignetteEffects
000067:0x002126b8:	cmpcm	m_VignetteValues, null
000067:0x002126c8:	beq	0x2126d8
000069:0x002126d0:	delete	m_VignetteValues
000071:0x002126d8:	cmpcm	m_ColorEffect, null
000071:0x002126e8:	beq	0x2126f8
000073:0x002126f0:	delete	m_ColorEffect
000076:0x002126f8:	ncall	GetGame()
000076:0x00212700:	ncalli	CGame.GetWorld()
000076:0x00212708:	ncalli	World.GetMaterial(_s'graphics/materials/postprocess/glow')
000076:0x00212718:	movea	m_MatColors, #return
000077:0x00212728:	ncall	GetGame()
000077:0x00212730:	ncalli	CGame.GetWorld()
000077:0x00212738:	ncalli	World.GetMaterial(_s'graphics/materials/postprocess/radialblur')
000077:0x00212748:	movea	m_RadialBlur, #return
000078:0x00212758:	new	m_BlurValues, array<float>
000079:0x00212778:	new	m_ChromAbbValues, array<float>
000080:0x00212798:	new	m_VignetteEffects, array<int>
000081:0x002127b8:	new	m_VignetteValues, map<int,@array<float>>
000084:0x002127d8:	call	RegisterBlurEffect()
000084:0x002127e8:	move	m_BlurInventory, #return
000085:0x002127f8:	call	RegisterBlurEffect()
000085:0x00212808:	move	m_BlurDrunk, #return
000086:0x00212818:	call	RegisterBlurEffect()
000086:0x00212828:	move	m_BlurFever, #return
000087:0x00212838:	call	RegisterBlurEffect()
000087:0x00212848:	move	m_BlurMenu, #return
000088:0x00212858:	call	RegisterBlurEffect()
000088:0x00212868:	move	m_BlurOptics, #return
000089:0x00212878:	call	RegisterBlurEffect()
000089:0x00212888:	move	m_BlurFlashbang, #return
000092:0x00212898:	call	RegisterChromAbbEffect()
000092:0x002128a8:	move	m_ChromAbbOptic, #return
000096:0x002128b8:	call	RegisterVignetteEffect()
000096:0x002128c8:	move	m_VignetteUnconscious, #return
000097:0x002128d8:	call	RegisterVignetteEffect()
000097:0x002128e8:	move	m_VignetteShock, #return
000098:0x002128f8:	call	RegisterVignetteEffect()
000098:0x00212908:	move	m_VignetteTunnel, #return
000099:0x00212918:	call	RegisterVignetteEffect()
000099:0x00212928:	move	m_VignetteMenu, #return
000101:0x00212938:	new	m_ColorEffect, array<float>
000102:0x00212958:	new	m_ColorValues, map<int,@array<float>>
000105:0x00212978:	call	RegisterColorEffect()
000105:0x00212988:	move	m_BurlapBlindness, #return
000106:0x00212998:	call	RegisterColorEffect()
000106:0x002129a8:	move	m_DyingEffect, #return
000107:0x002129b8:	call	RegisterColorEffect()
000107:0x002129c8:	move	m_ShockEffect, #return
000110:0x002129d8:	new	colorizeDefault, array<float>
000110:0x002129f8:	icall	
000110:0x00212a08:	icall	
000110:0x00212a18:	icall	
000111:0x00212a28:	new	m_ColorizeEffects, map<int,@array<float>>
000115:0x00212a48:	movefm	@c00, colorizeDefault
000115:0x00212a58:	icall	
000115:0x00212a68:	release	colorizeDefault
000115:0x00212a70:	rts
PPEffects::ResetBlurEffects()
000122:0x00212aa0:	cmpcm	m_BlurValues, null
000122:0x00212ab0:	beq	0x212b20
000124:0x00212ab8:	imove	i, 0x000000
000124:0x00212ac8:	jump	0x212ad8
000124:0x00212ad0:	inc	i
000124:0x00212ad8:	ncalli	array<float>.Count()
000124:0x00212ae0:	cmpi	i, #return
000124:0x00212af0:	bge	0x212b10
000126:0x00212af8:	icall	
000126:0x00212b08:	jump	0x212ad0
000128:0x00212b10:	call	UpdateBlur()
000128:0x00212b20:	rts
PPEffects::ResetRadialBlur()
000134:0x00212b28:	call	SetRadialBlur(_f0.000000, _f0.000000, _f0.000000, _f0.000000)
000134:0x00212b48:	rts
PPEffects::SetBlurValue()
000139:0x00212ba0:	cmpcm	m_BlurValues, null
000139:0x00212bb0:	beq	0x212bf0
000139:0x00212bb8:	ncalli	array<float>.Count()
000139:0x00212bc0:	cmpi	index, #return
000139:0x00212bd0:	bge	0x212bf0
000141:0x00212bd8:	icall	
000141:0x00212be8:	jump	0x212c50
000145:0x00212bf0:	icall	ToString(index)
000145:0x00212c00:	adds	@s01, _s'Error: PPEffects: m_BlurValues with index: ', #return
000145:0x00212c10:	moves	@s00, @s01
000145:0x00212c20:	adds	@s00, @s00, _s' is not registered.'
000145:0x00212c30:	moves	@s01, @s00
000145:0x00212c40:	icall	Print(@s01)
000145:0x00212c50:	rts
PPEffects::RegisterBlurEffect()
000151:0x00212c58:	icall	
000151:0x00212c68:	move	#return, #return
000151:0x00212c78:	rts
000151:0x00212c80:	rts
PPEffects::SetRadialBlur()
000158:0x00212d28:	ncall	GetGame()
000158:0x00212d30:	cmpc	#return, null
000158:0x00212d40:	beq	0x212da8
000160:0x00212d48:	icall	SetParam(m_RadialBlur, _s'PowerX', powerX)
000161:0x00212d60:	icall	SetParam(m_RadialBlur, _s'PowerY', powerY)
000162:0x00212d78:	icall	SetParam(m_RadialBlur, _s'OffsetX', offsetX)
000163:0x00212d90:	icall	SetParam(m_RadialBlur, _s'OffsetY', offsetY)
000163:0x00212da8:	rts
PPEffects::SetBlur()
000170:0x00212e30:	ncall	GetGame()
000170:0x00212e38:	cmpc	#return, null
000170:0x00212e48:	beq	0x212eb0
000172:0x00212e50:	ncall	GetGame()
000172:0x00212e58:	ncalli	CGame.GetWorld()
000172:0x00212e60:	ncalli	World.GetMaterial(_s'graphics/materials/postprocess/gauss')
000172:0x00212e70:	movea	mat_blur, #return
000174:0x00212e80:	cmpc	mat_blur, _i0
000174:0x00212e90:	beq	0x212eb0
000176:0x00212e98:	icall	SetParam(mat_blur, _s'Intensity', value)
000176:0x00212eb0:	rts
PPEffects::UpdateBlur()
000184:0x00212f40:	imove	blur_value_total, 0.00000
000185:0x00212f50:	cmpcm	m_BlurValues, null
000185:0x00212f60:	beq	0x212fe0
000187:0x00212f68:	imove	i, 0x000000
000187:0x00212f78:	jump	0x212f88
000187:0x00212f80:	inc	i
000187:0x00212f88:	ncalli	array<float>.Count()
000187:0x00212f90:	cmpi	i, #return
000187:0x00212fa0:	bge	0x212fe0
000189:0x00212fa8:	icall	
000189:0x00212fb8:	move	@f00, #return
000189:0x00212fc8:	addf	blur_value_total, blur_value_total, @f00
000189:0x00212fd8:	jump	0x212f80
000193:0x00212fe0:	call	SetBlur(blur_value_total)
000193:0x00212ff0:	rts
PPEffects::SetBlurInventory()
000199:0x00212ff8:	call	SetBlurValue(m_BlurInventory, value)
000200:0x00213010:	call	UpdateBlur()
000200:0x00213020:	rts
PPEffects::SetBlurDrunk()
000206:0x00213028:	call	SetBlurValue(m_BlurDrunk, value)
000207:0x00213040:	call	UpdateBlur()
000207:0x00213050:	rts
PPEffects::SetBlurFever()
000214:0x00213058:	call	SetBlurValue(m_BlurFever, value)
000215:0x00213070:	call	UpdateBlur()
000215:0x00213080:	rts
PPEffects::SetBlurMenu()
000222:0x00213088:	call	SetBlurValue(m_BlurMenu, value)
000223:0x002130a0:	call	UpdateBlur()
000223:0x002130b0:	rts
PPEffects::SetBlurOptics()
000230:0x002130b8:	call	SetBlurValue(m_BlurOptics, value)
000231:0x002130d0:	call	UpdateBlur()
000231:0x002130e0:	rts
PPEffects::SetBlurFlashbang()
000238:0x002130e8:	call	SetBlurValue(m_BlurFlashbang, value)
000239:0x00213100:	call	UpdateBlur()
000239:0x00213110:	rts
PPEffects::SetBlurShock()
000244:0x00213118:	call	SetBlurValue(m_BlurShock, value)
000245:0x00213130:	call	UpdateBlur()
000245:0x00213140:	rts
PPEffects::RegisterChromAbbEffect()
000257:0x00213148:	icall	
000257:0x00213158:	move	#return, #return
000257:0x00213168:	rts
000257:0x00213170:	rts
PPEffects::ResetChromAbbEffects()
000262:0x002131a0:	cmpcm	m_ChromAbbValues, null
000262:0x002131b0:	beq	0x213220
000264:0x002131b8:	imove	i, 0x000000
000264:0x002131c8:	jump	0x2131d8
000264:0x002131d0:	inc	i
000264:0x002131d8:	ncalli	array<float>.Count()
000264:0x002131e0:	cmpi	i, #return
000264:0x002131f0:	bge	0x213210
000266:0x002131f8:	icall	
000266:0x00213208:	jump	0x2131d0
000268:0x00213210:	call	UpdateChromAbb()
000268:0x00213220:	rts
PPEffects::SetChromAbbValue()
000274:0x00213250:	cmpcm	m_ChromAbbValues, null
000274:0x00213260:	beq	0x2132a0
000274:0x00213268:	ncalli	array<float>.Count()
000274:0x00213270:	cmpi	index, #return
000274:0x00213280:	bge	0x2132a0
000276:0x00213288:	icall	
000276:0x00213298:	jump	0x213300
000280:0x002132a0:	icall	ToString(index)
000280:0x002132b0:	adds	@s01, _s'Error: PPEffects: m_ChromAbbValues with index: ', #return
000280:0x002132c0:	moves	@s00, @s01
000280:0x002132d0:	adds	@s00, @s00, _s' is not registered.'
000280:0x002132e0:	moves	@s01, @s00
000280:0x002132f0:	icall	Print(@s01)
000280:0x00213300:	rts
PPEffects::SetChromAbb()
000286:0x00213330:	ncall	GetGame()
000286:0x00213338:	cmpc	#return, null
000286:0x00213348:	beq	0x213380
000288:0x00213350:	cmpc	m_MatColors, _i0
000288:0x00213360:	beq	0x213380
000291:0x00213368:	icall	SetParam(m_MatColors, _s'MaxChromAbberation', value)
000291:0x00213380:	rts
PPEffects::UpdateChromAbb()
000300:0x00213410:	imove	chromabb_value_total, 0.00000
000301:0x00213420:	cmpcm	m_ChromAbbValues, null
000301:0x00213430:	beq	0x2134b0
000303:0x00213438:	imove	i, 0x000000
000303:0x00213448:	jump	0x213458
000303:0x00213450:	inc	i
000303:0x00213458:	ncalli	array<float>.Count()
000303:0x00213460:	cmpi	i, #return
000303:0x00213470:	bge	0x2134b0
000305:0x00213478:	icall	
000305:0x00213488:	move	@f00, #return
000305:0x00213498:	addf	chromabb_value_total, chromabb_value_total, @f00
000305:0x002134a8:	jump	0x213450
000309:0x002134b0:	call	SetChromAbb(chromabb_value_total)
000309:0x002134c0:	rts
PPEffects::SetChromAbbOptic()
000314:0x002134c8:	call	SetChromAbbValue(m_ChromAbbOptic, value)
000315:0x002134e0:	call	UpdateChromAbb()
000315:0x002134f0:	rts
PPEffects::ResetColorEffects()
000345:0x00213520:	cmpcm	m_ColorEffect, null
000345:0x00213530:	beq	0x213628
000347:0x00213538:	imove	i, 0x000000
000347:0x00213548:	jump	0x213558
000347:0x00213550:	inc	i
000347:0x00213558:	ncalli	array<float>.Count()
000347:0x00213560:	cmpi	i, #return
000347:0x00213570:	bge	0x213618
000350:0x00213578:	new	@c01, array<float>
000350:0x00213598:	pushc	@c01
000350:0x002135a0:	icall	
000350:0x002135b0:	icall	
000350:0x002135c0:	icall	
000350:0x002135d0:	icall	
000350:0x002135e0:	icall	
000350:0x002135f0:	icall	
000350:0x00213600:	popc	@c01
000350:0x00213608:	release	@c01
000350:0x00213610:	jump	0x213550
000352:0x00213618:	call	UpdateColor()
000352:0x00213628:	rts
PPEffects::SetColorValue()
000358:0x00213680:	ncalli	array<float>.Count()
000358:0x00213688:	cmpi	index, #return
000358:0x00213698:	bge	0x213740
000360:0x002136a0:	new	values, array<float>
000360:0x002136c0:	icall	
000360:0x002136d0:	icall	
000360:0x002136e0:	icall	
000360:0x002136f0:	icall	
000360:0x00213700:	icall	
000362:0x00213710:	movefm	@c00, values
000362:0x00213720:	icall	
000362:0x00213730:	release	values
000362:0x00213738:	jump	0x2137a0
000366:0x00213740:	icall	ToString(index)
000366:0x00213750:	adds	@s01, _s'Error: PPEffects: m_ColorValues with index: ', #return
000366:0x00213760:	moves	@s00, @s01
000366:0x00213770:	adds	@s00, @s00, _s' is not registered.'
000366:0x00213780:	moves	@s01, @s00
000366:0x00213790:	icall	Print(@s01)
000366:0x002137a0:	rts
PPEffects::RegisterColorEffect()
000372:0x002137a8:	icall	
000372:0x002137b8:	move	#return, #return
000372:0x002137c8:	rts
000372:0x002137d0:	rts
PPEffects::UpdateColor()
000377:0x00213968:	imove	@m00, 0x000000
000377:0x00213978:	ftv	color_value_total[@m00], _f0.000000
000377:0x00213988:	inc	@m00
000377:0x00213990:	ftv	color_value_total[@m00], _f0.000000
000377:0x002139a0:	inc	@m00
000377:0x002139a8:	ftv	color_value_total[@m00], _f0.000000
000377:0x002139b8:	inc	@m00
000377:0x002139c0:	ftv	color_value_total[@m00], _f0.000000
000377:0x002139d0:	inc	@m00
000383:0x002139d8:	ncall	GetGame()
000383:0x002139e0:	cmpc	#return, null
000383:0x002139f0:	beq	0x213a20
000383:0x002139f8:	ncall	GetGame()
000383:0x00213a00:	ncalli	CGame.GetWorld()
000383:0x00213a08:	cmpm	#return, null
000383:0x00213a18:	bne	0x213a28
000385:0x00213a20:	rts
000388:0x00213a28:	imove	i, 0x000000
000388:0x00213a38:	jump	0x213a48
000388:0x00213a40:	inc	i
000388:0x00213a48:	ncalli	map<int,@array<float>>.Count()
000388:0x00213a50:	cmpi	i, #return
000388:0x00213a60:	bge	0x213be8
000390:0x00213a68:	icall	
000390:0x00213a78:	move	key, #return
000391:0x00213a88:	icall	
000391:0x00213a98:	movetm	value, #return
000393:0x00213aa8:	ifv	@f00, color_value_total[0x000000]
000393:0x00213ab8:	icall	
000393:0x00213ac8:	addf	@f00, @f00, #return
000393:0x00213ad8:	itv	color_value_total[0x000000], @f00
000394:0x00213ae8:	ifv	@f00, color_value_total[0x000001]
000394:0x00213af8:	icall	
000394:0x00213b08:	addf	@f00, @f00, #return
000394:0x00213b18:	itv	color_value_total[0x000001], @f00
000395:0x00213b28:	ifv	@f00, color_value_total[0x000002]
000395:0x00213b38:	icall	
000395:0x00213b48:	addf	@f00, @f00, #return
000395:0x00213b58:	itv	color_value_total[0x000002], @f00
000396:0x00213b68:	ifv	@f00, color_value_total[0x000003]
000396:0x00213b78:	icall	
000396:0x00213b88:	addf	@f00, @f00, #return
000396:0x00213b98:	itv	color_value_total[0x000003], @f00
000397:0x00213ba8:	icall	
000397:0x00213bb8:	move	@f00, #return
000397:0x00213bc8:	addf	color_overlay, color_overlay, @f00
000397:0x00213bd8:	release	value
000397:0x00213be0:	jump	0x213a40
000400:0x00213be8:	movea	m_ColorValueTotal, color_value_total
000401:0x00213bf8:	move	m_ColorOverlayTotal, color_overlay
000402:0x00213c08:	icall	SetParam(m_MatColors, _s'OverlayColor', color_value_total)
000403:0x00213c20:	icall	SetParam(m_MatColors, _s'OverlayFactor', color_overlay)
000403:0x00213c38:	rts
PPEffects::SetLensEffect()
000415:0x00213c40:	call	PerformSetLensEffect(lens, chromAbb, centerX, centerY)
000415:0x00213c60:	rts
PPEffects::PerformSetLensEffect()
000421:0x00213ce0:	icall	SetParam(m_MatColors, _s'LensDistort', lens)
000422:0x00213cf8:	call	SetChromAbbOptic(chromAbb)
000423:0x00213d08:	icall	SetParam(m_MatColors, _s'LensCenterX', centerX)
000424:0x00213d20:	icall	SetParam(m_MatColors, _s'LensCenterY', centerY)
000424:0x00213d38:	rts
PPEffects::SetVignette()
000437:0x00213dc8:	itv	color[0x000000], R
000438:0x00213dd8:	itv	color[0x000001], G
000439:0x00213de8:	itv	color[0x000002], B
000440:0x00213df8:	itv	color[0x000003], A
000442:0x00213e08:	icall	SetParam(m_MatColors, _s'Vignette', intensity)
000443:0x00213e20:	icall	SetParam(m_MatColors, _s'VignetteColor', color)
000443:0x00213e38:	rts
PPEffects::SetVignetteEffectValue()
000448:0x00213e68:	ncalli	array<int>.Count()
000448:0x00213e70:	cmpi	index, #return
000448:0x00213e80:	bge	0x213f28
000450:0x00213e88:	new	values, array<float>
000450:0x00213ea8:	icall	
000450:0x00213eb8:	icall	
000450:0x00213ec8:	icall	
000450:0x00213ed8:	icall	
000450:0x00213ee8:	icall	
000452:0x00213ef8:	movefm	@c00, values
000452:0x00213f08:	icall	
000452:0x00213f18:	release	values
000452:0x00213f20:	jump	0x213f88
000456:0x00213f28:	icall	ToString(index)
000456:0x00213f38:	adds	@s01, _s'Error: PPEffects: m_ColorValues with index: ', #return
000456:0x00213f48:	moves	@s00, @s01
000456:0x00213f58:	adds	@s00, @s00, _s' is not registered.'
000456:0x00213f68:	moves	@s01, @s00
000456:0x00213f78:	icall	Print(@s01)
000456:0x00213f88:	rts
PPEffects::RegisterVignetteEffect()
000462:0x00213f90:	icall	
000462:0x00213fa0:	move	#return, #return
000462:0x00213fb0:	rts
000462:0x00213fb8:	rts
PPEffects::SetUnconsciousnessVignette()
000467:0x00213fc0:	call	SetVignetteEffectValue(m_VignetteUnconscious, value, _f0.000000, _f0.000000, _f0.000000, _f0.000000)
000468:0x00213fe8:	call	UpdateVignette()
000468:0x00213ff8:	rts
PPEffects::SetShockVignette()
000473:0x00214000:	call	SetVignetteEffectValue(m_VignetteShock, value, _f0.000000, _f0.000000, _f0.000000, _f0.000000)
000474:0x00214028:	call	UpdateVignette()
000474:0x00214038:	rts
PPEffects::SetTunnelVignette()
000479:0x00214040:	call	SetVignetteEffectValue(m_VignetteTunnel, value, _f0.000000, _f0.000000, _f0.000000, _f0.000000)
000480:0x00214068:	call	UpdateVignette()
000480:0x00214078:	rts
PPEffects::SetMenuVignette()
000485:0x00214080:	call	SetVignetteEffectValue(m_VignetteMenu, value, _f0.000000, _f0.000000, _f0.000000, _f0.000000)
000486:0x002140a8:	call	UpdateVignette()
000486:0x002140b8:	rts
PPEffects::ResetVignettes()
000491:0x00214110:	cmpcm	m_VignetteValues, null
000491:0x00214120:	beq	0x214218
000493:0x00214128:	imove	i, 0x000000
000493:0x00214138:	jump	0x214148
000493:0x00214140:	inc	i
000493:0x00214148:	ncalli	map<int,@array<float>>.Count()
000493:0x00214150:	cmpi	i, #return
000493:0x00214160:	bge	0x214208
000495:0x00214168:	new	values, array<float>
000495:0x00214188:	icall	
000495:0x00214198:	icall	
000495:0x002141a8:	icall	
000495:0x002141b8:	icall	
000495:0x002141c8:	icall	
000497:0x002141d8:	movefm	@c00, values
000497:0x002141e8:	icall	
000497:0x002141f8:	release	values
000497:0x00214200:	jump	0x214140
000499:0x00214208:	call	UpdateVignette()
000499:0x00214218:	rts
PPEffects::OverrideDOF()
000505:0x00214220:	ncall	GetGame()
000505:0x00214228:	ncalli	CGame.OverrideDOF(enable, focusDistance, focusLength, focusLengthNear, blur, focusDepthOffset)
000505:0x00214248:	rts
PPEffects::AddPPMask()
000510:0x00214250:	ncall	GetGame()
000510:0x00214258:	ncalli	CGame.AddPPMask(ndcX, ndcY, ndcRadius, ndcBlur)
000510:0x00214270:	rts
PPEffects::ResetPPMask()
000515:0x00214278:	ncall	GetGame()
000515:0x00214280:	cmpc	#return, null
000515:0x00214290:	beq	0x2142a8
000515:0x00214298:	ncall	GetGame()
000515:0x002142a0:	ncalli	CGame.ResetPPMask()
000515:0x002142a8:	rts
PPEffects::ResetDOFOverride()
000520:0x002142b0:	call	OverrideDOF(false, _f0.000000, _f0.000000, _f0.000000, _f0.000000, _f1.000000)
000520:0x002142d8:	rts
PPEffects::ResetLensEffect()
000525:0x002142e0:	call	SetLensEffect(_f0.000000, _f0.000000, _f0.000000, _f0.000000)
000525:0x00214300:	rts
PPEffects::HitEffect()
000531:0x00214378:	ifv	@f02, m_ColorValueTotal[0x000000]
000531:0x00214388:	icall	Clamp(@f02, _f0.000000, _f1.000000)
000531:0x002143a0:	icall	Lerp(#return, _f1.000000, value)
000531:0x002143b8:	itv	m_HitEffectColor[0x000000], #return
000532:0x002143c8:	itv	m_HitEffectColor[0x000001], _f0.000000
000533:0x002143d8:	itv	m_HitEffectColor[0x000002], _f0.000000
000534:0x002143e8:	ifv	@f02, m_ColorValueTotal[0x000000]
000534:0x002143f8:	icall	Clamp(@f02, _f0.000000, _f1.000000)
000534:0x00214410:	icall	Lerp(#return, _f1.000000, value)
000534:0x00214428:	itv	m_HitEffectColor[0x000003], #return
000545:0x00214438:	icall	SetParam(m_MatColors, _s'OverlayColor', m_HitEffectColor)
000546:0x00214450:	icall	SetParam(m_MatColors, _s'OverlayFactor', _f0.050000)
000546:0x00214468:	rts
PPEffects::SetShockEffectColor()
000551:0x00214470:	cmpf	value, _f0.000000
000551:0x00214480:	ble	0x2144b8
000552:0x00214488:	call	SetColorValue(m_ShockEffect, COLOR_SHOCK, COLOR_SHOCK, COLOR_SHOCK, _f1.000000, value)
000552:0x002144b0:	jump	0x2144e0
000554:0x002144b8:	call	SetColorValue(m_ShockEffect, _f0.000000, _f0.000000, _f0.000000, _f1.000000, value)
000555:0x002144e0:	call	UpdateColor()
000555:0x002144f0:	rts
PPEffects::FlashbangEffect()
000561:0x00214588:	itv	hitEffectColor[0x000000], _f1.000000
000562:0x00214598:	itv	hitEffectColor[0x000001], _f1.000000
000563:0x002145a8:	itv	hitEffectColor[0x000002], _f1.000000
000564:0x002145b8:	ifv	@f02, m_ColorValueTotal[0x000000]
000564:0x002145c8:	icall	Clamp(@f02, _f0.000000, _f1.000000)
000564:0x002145e0:	icall	Lerp(#return, _f1.000000, value)
000564:0x002145f8:	itv	hitEffectColor[0x000003], #return
000566:0x00214608:	icall	SetParam(m_MatColors, _s'OverlayColor', hitEffectColor)
000567:0x00214620:	icall	SetParam(m_MatColors, _s'OverlayFactor', _f0.750000)
000567:0x00214638:	rts
PPEffects::EnableBurlapSackBlindness()
000572:0x00214668:	call	SetColorValue(m_BurlapBlindness, _f0.000000, _f0.000000, _f0.000000, _f1.000000, _f1.000000)
000573:0x00214690:	call	UpdateColor()
000574:0x002146a0:	call	
000574:0x002146b0:	rts
PPEffects::DisableBurlapSackBlindness()
000579:0x002146b8:	call	SetColorValue(m_BurlapBlindness, _f0.000000, _f0.000000, _f0.000000, _f0.000000, _f0.000000)
000580:0x002146e0:	call	UpdateColor()
000581:0x002146f0:	call	
000581:0x00214700:	rts
PPEffects::SetDeathDarkening()
000586:0x00214730:	icall	Clamp(value, _f0.000000, _f1.000000)
000586:0x00214748:	move	value, #return
000587:0x00214758:	call	SetColorValue(m_DyingEffect, _f0.000000, _f0.000000, _f0.000000, _f1.000000, value)
000588:0x00214780:	call	UpdateColor()
000589:0x00214790:	cmpf	value, _f0.990000
000589:0x002147a0:	ble	0x2147c0
000590:0x002147a8:	call	SetEVValuePP(_f-5.000000)
000590:0x002147b8:	jump	0x2147d0
000592:0x002147c0:	call	SetEVValuePP(_f0.000000)
000592:0x002147d0:	rts
PPEffects::UpdateSaturation()
000597:0x00214800:	icall	SetParam(m_MatColors, _s'Saturation', m_BloodSaturation)
000597:0x00214818:	rts
PPEffects::UpdateVignette()
000605:0x00214938:	imove	intensity_value_total, 0.00000
000606:0x00214948:	cmpcm	m_VignetteEffects, null
000606:0x00214958:	beq	0x214ae8
000608:0x00214960:	imove	i, 0x000000
000608:0x00214970:	jump	0x214980
000608:0x00214978:	inc	i
000608:0x00214980:	ncalli	array<int>.Count()
000608:0x00214988:	cmpi	i, #return
000608:0x00214998:	bge	0x214ae8
000610:0x002149a0:	icall	
000610:0x002149b0:	cmpm	#return, null
000610:0x002149c0:	beq	0x214ae0
000616:0x002149c8:	icall	
000616:0x002149d8:	icall	
000616:0x002149e8:	itv	color[0x000000], #return
000617:0x002149f8:	icall	
000617:0x00214a08:	icall	
000617:0x00214a18:	itv	color[0x000001], #return
000618:0x00214a28:	icall	
000618:0x00214a38:	icall	
000618:0x00214a48:	itv	color[0x000002], #return
000619:0x00214a58:	icall	
000619:0x00214a68:	icall	
000619:0x00214a78:	itv	color[0x000003], #return
000621:0x00214a88:	icall	
000621:0x00214a98:	icall	
000621:0x00214aa8:	move	intesity, #return
000622:0x00214ab8:	move	@f00, intesity
000622:0x00214ac8:	addf	intensity_value_total, intensity_value_total, @f00
000622:0x00214ad8:	jump	0x214ae0
000622:0x00214ae0:	jump	0x214978
000637:0x00214ae8:	ifv	@f00, color[0x000000]
000637:0x00214af8:	ifv	@f01, color[0x000001]
000637:0x00214b08:	ifv	@f02, color[0x000002]
000637:0x00214b18:	ifv	@f03, color[0x000003]
000637:0x00214b28:	call	SetVignette(intensity_value_total, @f00, @f01, @f02, @f03)
000637:0x00214b48:	rts
PPEffects::SetBloodSaturation()
000642:0x00214b50:	move	m_BloodSaturation, value
000643:0x00214b60:	call	UpdateSaturation()
000643:0x00214b70:	rts
PPEffects::SetColorizationNV()
000661:0x00214bd0:	new	colorizeArray, array<float>
000661:0x00214bf0:	icall	
000661:0x00214c00:	icall	
000661:0x00214c10:	icall	
000662:0x00214c20:	movefm	@c00, colorizeArray
000662:0x00214c30:	icall	
000663:0x00214c40:	call	UpdateColorize()
000663:0x00214c50:	release	colorizeArray
000663:0x00214c58:	rts
PPEffects::UpdateColorize()
000668:0x00214f20:	imove	foundActiveEffect, 0x000000
000669:0x00214f30:	imove	lowestKey, 0x0f4240
000672:0x00214f40:	imove	i, 0x000000
000672:0x00214f50:	jump	0x214f70
000672:0x00214f58:	move	@m00, i
000672:0x00214f68:	inc	i
000672:0x00214f70:	ncalli	map<int,@array<float>>.Count()
000672:0x00214f78:	cmpi	i, #return
000672:0x00214f88:	bge	0x2150c0
000674:0x00214f90:	icall	
000674:0x00214fa0:	move	currentKey, #return
000675:0x00214fb0:	icall	
000675:0x00214fc0:	movetm	colorizeValues, #return
000677:0x00214fd0:	imove	j, 0x000000
000677:0x00214fe0:	jump	0x215000
000677:0x00214fe8:	move	@m00, j
000677:0x00214ff8:	inc	j
000677:0x00215000:	ncalli	array<float>.Count()
000677:0x00215008:	cmpi	j, #return
000677:0x00215018:	bge	0x2150b0
000679:0x00215020:	icall	
000679:0x00215030:	move	@f00, #return
000679:0x00215040:	cmpf	@f00, _f0.000000
000679:0x00215050:	beq	0x2150a8
000681:0x00215058:	cmpi	currentKey, lowestKey
000681:0x00215068:	bge	0x2150a8
000683:0x00215070:	movem	chosenArray, colorizeValues
000684:0x00215080:	move	lowestKey, currentKey
000685:0x00215090:	imove	foundActiveEffect, 0x000001
000686:0x002150a0:	jump	0x2150b0
000686:0x002150a8:	jump	0x214fe8
000686:0x002150b0:	release	colorizeValues
000686:0x002150b8:	jump	0x214f58
000691:0x002150c0:	cmpi	foundActiveEffect, _i0
000691:0x002150d0:	beq	0x215168
000694:0x002150d8:	icall	
000694:0x002150e8:	itv	color[0x000000], #return
000695:0x002150f8:	icall	
000695:0x00215108:	itv	color[0x000001], #return
000696:0x00215118:	icall	
000696:0x00215128:	itv	color[0x000002], #return
000697:0x00215138:	itv	color[0x000003], _f0.000000
000698:0x00215148:	icall	SetParam(m_MatColors, _s'ColorizationColor', color)
000698:0x00215160:	jump	0x215178
000703:0x00215168:	call	ResetColorize()
000703:0x00215178:	release	chosenArray
000703:0x00215180:	rts
PPEffects::ResetColorize()
000709:0x002151c0:	itv	color[0x000000], _f1.000000
000710:0x002151d0:	itv	color[0x000001], _f1.000000
000711:0x002151e0:	itv	color[0x000002], _f1.000000
000712:0x002151f0:	itv	color[0x000003], _f0.000000
000713:0x00215200:	icall	SetParam(m_MatColors, _s'ColorizationColor', color)
000713:0x00215218:	rts
PPEffects::SetEVValuePP()
000719:0x00215220:	call	
000719:0x00215230:	rts
PPEffects::SetNVParams()
000726:0x00215288:	ncall	GetGame()
000726:0x00215290:	ncalli	CGame.GetWorld()
000726:0x00215298:	ncalli	World.GetMaterial(_s'Graphics/Materials/postprocess/filmgrainNV')
000726:0x002152a8:	movea	matHDR, #return
000731:0x002152b8:	ncalli	DayZGame.NightVissionLightParams(light_mult, noise_intensity)
000732:0x002152c8:	icall	SetParam(matHDR, _s'Sharpness', sharpness)
000733:0x002152e0:	icall	SetParam(matHDR, _s'GrainSize', grain_size)
000733:0x002152f8:	rts
PPEffects::SetBloom()
000739:0x00215378:	icall	SetParam(m_MatColors, _s'BloomThreshold', thres)
000740:0x00215390:	icall	SetParam(m_MatColors, _s'BloomSteepness', steep)
000741:0x002153a8:	icall	SetParam(m_MatColors, _s'BloomIntensity', inten)
000741:0x002153c0:	rts
PPEffects::ResetAll()
000746:0x002153c8:	call	ResetBlurEffects()
000747:0x002153d8:	call	ResetColorEffects()
000748:0x002153e8:	call	ResetVignettes()
000749:0x002153f8:	call	ResetPPMask()
000750:0x00215408:	call	ResetDOFOverride()
000751:0x00215418:	call	ResetLensEffect()
000752:0x00215428:	call	SetBloodSaturation(_f1.000000)
000754:0x00215438:	call	ResetColorize()
000754:0x00215448:	rts
PPEDynamicBlur::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppedynamicblur.c
000008:0x00215450:	imove	#return, 0x00000c
000008:0x00215460:	rts
000008:0x00215468:	rts
PPEDynamicBlur::GetDefaultMaterialPath()
000013:0x00215498:	moves	#return, _s'Graphics/Materials/postprocess/dynamicblur'
000013:0x002154a8:	rts
000013:0x002154b0:	rts
PPEDynamicBlur::RegisterMaterialParameters()
000018:0x00215508:	call	
000018:0x00215528:	rts
ContentDLC::OwnsAllDLC()
//scripts/3_Game/services\contentdlc.c
000034:0x002155a8:	imove	i, 0x000001
000034:0x002155b8:	jump	0x2155c8
000034:0x002155c0:	inc	i
000034:0x002155c8:	cmpi	i, length
000034:0x002155d8:	bge	0x215640
000036:0x002155e0:	call	GetEnumValue(_T(EDLCId), i)
000036:0x002155f8:	ncalli	ContentDLC.IsDLCInstalled(#return)
000036:0x00215608:	cmpi	#return, _i0
000036:0x00215618:	bne	0x215638
000037:0x00215620:	imove	#return, 0x000000
000037:0x00215630:	rts
000037:0x00215638:	jump	0x2155c0
000040:0x00215640:	imove	#return, 0x000001
000040:0x00215650:	rts
000040:0x00215658:	rts
ContentDLC::OnChange()
000051:0x00215660:	movefm	[0xb425b340], m_OnChange
000051:0x00215670:	icall	
000051:0x002156a0:	rts
ContentDLC::ContentDLC()
000010:0x002156a8:	new	m_OnChange, ScriptInvoker
000010:0x002156c8:	rts
InventoryLocation::DumpToStringNullSafe()
//scripts/3_Game/systems\inventory\inventorylocation.c
000220:0x002156f8:	cmpcm	loc, null
000220:0x00215708:	beq	0x215738
000221:0x00215710:	call	
000221:0x00215720:	moves	#return, #return
000221:0x00215730:	rts
000222:0x00215738:	moves	#return, _s'{ null }'
000222:0x00215748:	rts
000222:0x00215750:	rts
InventoryLocation::DumpToString()
000227:0x00215ad0:	ncalli	InventoryLocation.GetType()
000227:0x00215ad8:	call	EnumToString(_T(InventoryLocationType), #return)
000227:0x00215af0:	adds	res, _s'{ type=', #return
000228:0x00215b00:	ncalli	InventoryLocation.GetType()
000228:0x00215b08:	move	#switch, #return
000228:0x00215b18:	imove	@m00, 0x000000
000228:0x00215b28:	cmpi	@m00, #switch
000228:0x00215b38:	bne	0x215b50
000232:0x00215b40:	jump	0x2165e0
000232:0x00215b48:	jump	0x215b78
000232:0x00215b50:	imove	@m00, 0x000001
000232:0x00215b60:	cmpi	@m00, #switch
000232:0x00215b70:	bne	0x215ee8
000236:0x00215b78:	adds	@s01, res, _s' item='
000236:0x00215b88:	moves	@s00, @s01
000236:0x00215b98:	ncalli	InventoryLocation.GetItem()
000236:0x00215ba0:	call	GetDebugName#206374(#return)
000236:0x00215bb0:	adds	@s00, @s00, #return
000236:0x00215bc0:	moves	res, @s00
000237:0x00215bd0:	ncalli	InventoryLocation.GetPos()
000237:0x00215bd8:	movev	pos, #return
000239:0x00215be8:	ncalli	InventoryLocation.GetDir(dir)
000240:0x00215bf8:	adds	@s06, res, _s' pos=('
000240:0x00215c08:	moves	@s05, @s06
000240:0x00215c18:	ifv	@f00, pos[0x000000]
000240:0x00215c28:	icall	ToString(@f00)
000240:0x00215c38:	adds	@s05, @s05, #return
000240:0x00215c48:	moves	@s04, @s05
000240:0x00215c58:	adds	@s04, @s04, _s', '
000240:0x00215c68:	moves	@s03, @s04
000240:0x00215c78:	ifv	@f01, pos[0x000001]
000240:0x00215c88:	icall	ToString(@f01)
000240:0x00215c98:	adds	@s03, @s03, #return
000240:0x00215ca8:	moves	@s02, @s03
000240:0x00215cb8:	adds	@s02, @s02, _s', '
000240:0x00215cc8:	moves	@s01, @s02
000240:0x00215cd8:	ifv	@f02, pos[0x000002]
000240:0x00215ce8:	icall	ToString(@f02)
000240:0x00215cf8:	adds	@s01, @s01, #return
000240:0x00215d08:	moves	@s00, @s01
000240:0x00215d18:	adds	@s00, @s00, _s')'
000240:0x00215d28:	moves	res, @s00
000241:0x00215d38:	adds	@s08, res, _s' dir=('
000241:0x00215d48:	moves	@s07, @s08
000241:0x00215d58:	ifv	@f00, dir[0x000000]
000241:0x00215d68:	icall	ToString(@f00)
000241:0x00215d78:	adds	@s07, @s07, #return
000241:0x00215d88:	moves	@s06, @s07
000241:0x00215d98:	adds	@s06, @s06, _s', '
000241:0x00215da8:	moves	@s05, @s06
000241:0x00215db8:	ifv	@f01, dir[0x000001]
000241:0x00215dc8:	icall	ToString(@f01)
000241:0x00215dd8:	adds	@s05, @s05, #return
000241:0x00215de8:	moves	@s04, @s05
000241:0x00215df8:	adds	@s04, @s04, _s', '
000241:0x00215e08:	moves	@s03, @s04
000241:0x00215e18:	ifv	@f02, dir[0x000002]
000241:0x00215e28:	icall	ToString(@f02)
000241:0x00215e38:	adds	@s03, @s03, #return
000241:0x00215e48:	moves	@s02, @s03
000241:0x00215e58:	adds	@s02, @s02, _s', '
000241:0x00215e68:	moves	@s01, @s02
000241:0x00215e78:	ifv	@f03, dir[0x000003]
000241:0x00215e88:	icall	ToString(@f03)
000241:0x00215e98:	adds	@s01, @s01, #return
000241:0x00215ea8:	moves	@s00, @s01
000241:0x00215eb8:	adds	@s00, @s00, _s')'
000241:0x00215ec8:	moves	res, @s00
000242:0x00215ed8:	jump	0x2165e0
000242:0x00215ee0:	jump	0x215f10
000242:0x00215ee8:	imove	@m00, 0x000002
000242:0x00215ef8:	cmpi	@m00, #switch
000242:0x00215f08:	bne	0x216028
000246:0x00215f10:	adds	@s01, res, _s' item='
000246:0x00215f20:	moves	@s00, @s01
000246:0x00215f30:	ncalli	InventoryLocation.GetItem()
000246:0x00215f38:	call	GetDebugName#206374(#return)
000246:0x00215f48:	adds	@s00, @s00, #return
000246:0x00215f58:	moves	res, @s00
000247:0x00215f68:	adds	@s01, res, _s' parent='
000247:0x00215f78:	moves	@s00, @s01
000247:0x00215f88:	ncalli	InventoryLocation.GetParent()
000247:0x00215f90:	call	GetDebugName#206374(#return)
000247:0x00215fa0:	adds	@s00, @s00, #return
000247:0x00215fb0:	moves	res, @s00
000248:0x00215fc0:	adds	@s01, res, _s' slot='
000248:0x00215fd0:	moves	@s00, @s01
000248:0x00215fe0:	ncalli	InventoryLocation.GetSlot()
000248:0x00215fe8:	icall	ToString(#return)
000248:0x00215ff8:	adds	@s00, @s00, #return
000248:0x00216008:	moves	res, @s00
000249:0x00216018:	jump	0x2165e0
000249:0x00216020:	jump	0x216050
000249:0x00216028:	imove	@m00, 0x000003
000249:0x00216038:	cmpi	@m00, #switch
000249:0x00216048:	bne	0x216280
000253:0x00216050:	adds	@s01, res, _s' item='
000253:0x00216060:	moves	@s00, @s01
000253:0x00216070:	ncalli	InventoryLocation.GetItem()
000253:0x00216078:	call	GetDebugName#206374(#return)
000253:0x00216088:	adds	@s00, @s00, #return
000253:0x00216098:	moves	res, @s00
000254:0x002160a8:	adds	@s01, res, _s' parent='
000254:0x002160b8:	moves	@s00, @s01
000254:0x002160c8:	ncalli	InventoryLocation.GetParent()
000254:0x002160d0:	call	GetDebugName#206374(#return)
000254:0x002160e0:	adds	@s00, @s00, #return
000254:0x002160f0:	moves	res, @s00
000255:0x00216100:	adds	@s07, res, _s' idx='
000255:0x00216110:	moves	@s06, @s07
000255:0x00216120:	ncalli	InventoryLocation.GetIdx()
000255:0x00216128:	icall	ToString(#return)
000255:0x00216138:	adds	@s06, @s06, #return
000255:0x00216148:	moves	@s05, @s06
000255:0x00216158:	adds	@s05, @s05, _s' row='
000255:0x00216168:	moves	@s04, @s05
000255:0x00216178:	ncalli	InventoryLocation.GetRow()
000255:0x00216180:	icall	ToString(#return)
000255:0x00216190:	adds	@s04, @s04, #return
000255:0x002161a0:	moves	@s03, @s04
000255:0x002161b0:	adds	@s03, @s03, _s' col='
000255:0x002161c0:	moves	@s02, @s03
000255:0x002161d0:	ncalli	InventoryLocation.GetCol()
000255:0x002161d8:	icall	ToString(#return)
000255:0x002161e8:	adds	@s02, @s02, #return
000255:0x002161f8:	moves	@s01, @s02
000255:0x00216208:	adds	@s01, @s01, _s' f='
000255:0x00216218:	moves	@s00, @s01
000255:0x00216228:	ncalli	InventoryLocation.GetFlip()
000255:0x00216230:	call	ToString(#return)
000255:0x00216240:	move	#return, value
000255:0x00216250:	adds	@s00, @s00, #return
000255:0x00216260:	moves	res, @s00
000256:0x00216270:	jump	0x2165e0
000256:0x00216278:	jump	0x2162a8
000256:0x00216280:	imove	@m00, 0x000004
000256:0x00216290:	cmpi	@m00, #switch
000256:0x002162a0:	bne	0x216368
000260:0x002162a8:	adds	@s01, res, _s' item='
000260:0x002162b8:	moves	@s00, @s01
000260:0x002162c8:	ncalli	InventoryLocation.GetItem()
000260:0x002162d0:	call	GetDebugName#206374(#return)
000260:0x002162e0:	adds	@s00, @s00, #return
000260:0x002162f0:	moves	res, @s00
000261:0x00216300:	adds	@s01, res, _s' parent='
000261:0x00216310:	moves	@s00, @s01
000261:0x00216320:	ncalli	InventoryLocation.GetParent()
000261:0x00216328:	call	GetDebugName#206374(#return)
000261:0x00216338:	adds	@s00, @s00, #return
000261:0x00216348:	moves	res, @s00
000262:0x00216358:	jump	0x2165e0
000262:0x00216360:	jump	0x216390
000262:0x00216368:	imove	@m00, 0x000005
000262:0x00216378:	cmpi	@m00, #switch
000262:0x00216388:	bne	0x2165b8
000266:0x00216390:	adds	@s01, res, _s' item='
000266:0x002163a0:	moves	@s00, @s01
000266:0x002163b0:	ncalli	InventoryLocation.GetItem()
000266:0x002163b8:	call	GetDebugName#206374(#return)
000266:0x002163c8:	adds	@s00, @s00, #return
000266:0x002163d8:	moves	res, @s00
000267:0x002163e8:	adds	@s01, res, _s' parent='
000267:0x002163f8:	moves	@s00, @s01
000267:0x00216408:	ncalli	InventoryLocation.GetParent()
000267:0x00216410:	call	GetDebugName#206374(#return)
000267:0x00216420:	adds	@s00, @s00, #return
000267:0x00216430:	moves	res, @s00
000268:0x00216440:	adds	@s07, res, _s' idx='
000268:0x00216450:	moves	@s06, @s07
000268:0x00216460:	ncalli	InventoryLocation.GetIdx()
000268:0x00216468:	icall	ToString(#return)
000268:0x00216478:	adds	@s06, @s06, #return
000268:0x00216488:	moves	@s05, @s06
000268:0x00216498:	adds	@s05, @s05, _s' row='
000268:0x002164a8:	moves	@s04, @s05
000268:0x002164b8:	ncalli	InventoryLocation.GetRow()
000268:0x002164c0:	icall	ToString(#return)
000268:0x002164d0:	adds	@s04, @s04, #return
000268:0x002164e0:	moves	@s03, @s04
000268:0x002164f0:	adds	@s03, @s03, _s' col='
000268:0x00216500:	moves	@s02, @s03
000268:0x00216510:	ncalli	InventoryLocation.GetCol()
000268:0x00216518:	icall	ToString(#return)
000268:0x00216528:	adds	@s02, @s02, #return
000268:0x00216538:	moves	@s01, @s02
000268:0x00216548:	adds	@s01, @s01, _s' f='
000268:0x00216558:	moves	@s00, @s01
000268:0x00216568:	ncalli	InventoryLocation.GetFlip()
000268:0x00216570:	call	ToString(#return)
000268:0x00216580:	move	#return, value
000268:0x00216590:	adds	@s00, @s00, #return
000268:0x002165a0:	moves	res, @s00
000269:0x002165b0:	jump	0x2165e0
000273:0x002165b8:	adds	@s00, res, _s'??'
000273:0x002165c8:	moves	res, @s00
000274:0x002165d8:	jump	0x2165e0
000277:0x002165e0:	adds	@s00, res, _s' }'
000277:0x002165f0:	moves	res, @s00
000278:0x00216600:	moves	#return, res
000278:0x00216610:	rts
000278:0x00216618:	rts
InventoryLocation::ReadFromContext()
000285:0x00216848:	imove	type, 0x000000
000286:0x00216858:	imove	idx, 0xffffffff
000287:0x00216868:	imove	row, 0xffffffff
000288:0x00216878:	imove	col, 0xffffffff
000289:0x00216888:	imove	flp, 0x000000
000290:0x00216898:	icall	
000290:0x002168a8:	cmpi	#return, _i0
000290:0x002168b8:	bne	0x2168e8
000291:0x002168c0:	imove	#return, 0x000000
000291:0x002168d0:	release	parent
000291:0x002168d8:	release	item
000291:0x002168e0:	rts
000293:0x002168e8:	move	#switch, type
000293:0x002168f8:	imove	@m00, 0x000000
000293:0x00216908:	cmpi	@m00, #switch
000293:0x00216918:	bne	0x216930
000297:0x00216920:	jump	0x2172f8
000297:0x00216928:	jump	0x216958
000297:0x00216930:	imove	@m00, 0x000001
000297:0x00216940:	cmpi	@m00, #switch
000297:0x00216950:	bne	0x216aa0
000301:0x00216958:	icall	
000301:0x00216968:	cmpi	#return, _i0
000301:0x00216978:	bne	0x2169a8
000302:0x00216980:	imove	#return, 0x000000
000302:0x00216990:	release	parent
000302:0x00216998:	release	item
000302:0x002169a0:	rts
000304:0x002169a8:	icall	
000304:0x002169b8:	cmpi	#return, _i0
000304:0x002169c8:	bne	0x2169f8
000305:0x002169d0:	imove	#return, 0x000000
000305:0x002169e0:	release	parent
000305:0x002169e8:	release	item
000305:0x002169f0:	rts
000308:0x002169f8:	icall	
000308:0x00216a08:	cmpi	#return, _i0
000308:0x00216a18:	bne	0x216a48
000309:0x00216a20:	imove	#return, 0x000000
000309:0x00216a30:	release	parent
000309:0x00216a38:	release	item
000309:0x00216a40:	rts
000311:0x00216a48:	cmpcm	item, null
000311:0x00216a58:	bne	0x216a68
000312:0x00216a60:	jump	0x2172f8
000314:0x00216a68:	movefm	[0xb5b9efd0], item
000314:0x00216a78:	ncalli	InventoryLocation.SetGroundEx([0xb5b9efd0], pos, dir)
000315:0x00216a90:	jump	0x2172f8
000315:0x00216a98:	jump	0x216ac8
000315:0x00216aa0:	imove	@m00, 0x000002
000315:0x00216ab0:	cmpi	@m00, #switch
000315:0x00216ac0:	bne	0x216c38
000319:0x00216ac8:	icall	
000319:0x00216ad8:	cmpi	#return, _i0
000319:0x00216ae8:	bne	0x216b18
000320:0x00216af0:	imove	#return, 0x000000
000320:0x00216b00:	release	parent
000320:0x00216b08:	release	item
000320:0x00216b10:	rts
000321:0x00216b18:	icall	
000321:0x00216b28:	cmpi	#return, _i0
000321:0x00216b38:	bne	0x216b68
000322:0x00216b40:	imove	#return, 0x000000
000322:0x00216b50:	release	parent
000322:0x00216b58:	release	item
000322:0x00216b60:	rts
000324:0x00216b68:	icall	
000324:0x00216b78:	cmpi	#return, _i0
000324:0x00216b88:	bne	0x216bb8
000325:0x00216b90:	imove	#return, 0x000000
000325:0x00216ba0:	release	parent
000325:0x00216ba8:	release	item
000325:0x00216bb0:	rts
000327:0x00216bb8:	cmpcm	parent, null
000327:0x00216bc8:	beq	0x216be8
000327:0x00216bd0:	cmpcm	item, null
000327:0x00216be0:	bne	0x216bf0
000328:0x00216be8:	jump	0x2172f8
000330:0x00216bf0:	movefm	[0xb5b9f068], parent
000330:0x00216c00:	movefm	[0xb5b9f090], item
000330:0x00216c10:	ncalli	InventoryLocation.SetAttachment([0xb5b9f068], [0xb5b9f090], slot)
000331:0x00216c28:	jump	0x2172f8
000331:0x00216c30:	jump	0x216c60
000331:0x00216c38:	imove	@m00, 0x000003
000331:0x00216c48:	cmpi	@m00, #switch
000331:0x00216c58:	bne	0x216ec8
000335:0x00216c60:	icall	
000335:0x00216c70:	cmpi	#return, _i0
000335:0x00216c80:	bne	0x216cb0
000336:0x00216c88:	imove	#return, 0x000000
000336:0x00216c98:	release	parent
000336:0x00216ca0:	release	item
000336:0x00216ca8:	rts
000337:0x00216cb0:	icall	
000337:0x00216cc0:	cmpi	#return, _i0
000337:0x00216cd0:	bne	0x216d00
000338:0x00216cd8:	imove	#return, 0x000000
000338:0x00216ce8:	release	parent
000338:0x00216cf0:	release	item
000338:0x00216cf8:	rts
000339:0x00216d00:	icall	
000339:0x00216d10:	cmpi	#return, _i0
000339:0x00216d20:	bne	0x216d50
000340:0x00216d28:	imove	#return, 0x000000
000340:0x00216d38:	release	parent
000340:0x00216d40:	release	item
000340:0x00216d48:	rts
000341:0x00216d50:	icall	
000341:0x00216d60:	cmpi	#return, _i0
000341:0x00216d70:	bne	0x216da0
000342:0x00216d78:	imove	#return, 0x000000
000342:0x00216d88:	release	parent
000342:0x00216d90:	release	item
000342:0x00216d98:	rts
000343:0x00216da0:	icall	
000343:0x00216db0:	cmpi	#return, _i0
000343:0x00216dc0:	bne	0x216df0
000344:0x00216dc8:	imove	#return, 0x000000
000344:0x00216dd8:	release	parent
000344:0x00216de0:	release	item
000344:0x00216de8:	rts
000345:0x00216df0:	icall	
000345:0x00216e00:	cmpi	#return, _i0
000345:0x00216e10:	bne	0x216e40
000346:0x00216e18:	imove	#return, 0x000000
000346:0x00216e28:	release	parent
000346:0x00216e30:	release	item
000346:0x00216e38:	rts
000348:0x00216e40:	cmpcm	parent, null
000348:0x00216e50:	beq	0x216e70
000348:0x00216e58:	cmpcm	item, null
000348:0x00216e68:	bne	0x216e78
000349:0x00216e70:	jump	0x2172f8
000351:0x00216e78:	movefm	[0xb5b9f1a8], parent
000351:0x00216e88:	movefm	[0xb5b9f1d0], item
000351:0x00216e98:	ncalli	InventoryLocation.SetCargo([0xb5b9f1a8], [0xb5b9f1d0], idx, row, col, flp)
000352:0x00216eb8:	jump	0x2172f8
000352:0x00216ec0:	jump	0x216ef0
000352:0x00216ec8:	imove	@m00, 0x000004
000352:0x00216ed8:	cmpi	@m00, #switch
000352:0x00216ee8:	bne	0x217008
000356:0x00216ef0:	icall	
000356:0x00216f00:	cmpi	#return, _i0
000356:0x00216f10:	bne	0x216f40
000357:0x00216f18:	imove	#return, 0x000000
000357:0x00216f28:	release	parent
000357:0x00216f30:	release	item
000357:0x00216f38:	rts
000358:0x00216f40:	icall	
000358:0x00216f50:	cmpi	#return, _i0
000358:0x00216f60:	bne	0x216f90
000359:0x00216f68:	imove	#return, 0x000000
000359:0x00216f78:	release	parent
000359:0x00216f80:	release	item
000359:0x00216f88:	rts
000361:0x00216f90:	cmpcm	parent, null
000361:0x00216fa0:	beq	0x216fc0
000361:0x00216fa8:	cmpcm	item, null
000361:0x00216fb8:	bne	0x216fc8
000362:0x00216fc0:	jump	0x2172f8
000364:0x00216fc8:	movefm	[0xb5b9f388], parent
000364:0x00216fd8:	movefm	[0xb5b9f3b0], item
000364:0x00216fe8:	ncalli	InventoryLocation.SetHands([0xb5b9f388], [0xb5b9f3b0])
000365:0x00216ff8:	jump	0x2172f8
000365:0x00217000:	jump	0x217030
000365:0x00217008:	imove	@m00, 0x000005
000365:0x00217018:	cmpi	@m00, #switch
000365:0x00217028:	bne	0x217290
000369:0x00217030:	icall	
000369:0x00217040:	cmpi	#return, _i0
000369:0x00217050:	bne	0x217080
000370:0x00217058:	imove	#return, 0x000000
000370:0x00217068:	release	parent
000370:0x00217070:	release	item
000370:0x00217078:	rts
000371:0x00217080:	icall	
000371:0x00217090:	cmpi	#return, _i0
000371:0x002170a0:	bne	0x2170d0
000372:0x002170a8:	imove	#return, 0x000000
000372:0x002170b8:	release	parent
000372:0x002170c0:	release	item
000372:0x002170c8:	rts
000373:0x002170d0:	icall	
000373:0x002170e0:	cmpi	#return, _i0
000373:0x002170f0:	bne	0x217120
000374:0x002170f8:	imove	#return, 0x000000
000374:0x00217108:	release	parent
000374:0x00217110:	release	item
000374:0x00217118:	rts
000375:0x00217120:	icall	
000375:0x00217130:	cmpi	#return, _i0
000375:0x00217140:	bne	0x217170
000376:0x00217148:	imove	#return, 0x000000
000376:0x00217158:	release	parent
000376:0x00217160:	release	item
000376:0x00217168:	rts
000377:0x00217170:	icall	
000377:0x00217180:	cmpi	#return, _i0
000377:0x00217190:	bne	0x2171c0
000378:0x00217198:	imove	#return, 0x000000
000378:0x002171a8:	release	parent
000378:0x002171b0:	release	item
000378:0x002171b8:	rts
000379:0x002171c0:	icall	
000379:0x002171d0:	cmpi	#return, _i0
000379:0x002171e0:	bne	0x217210
000380:0x002171e8:	imove	#return, 0x000000
000380:0x002171f8:	release	parent
000380:0x00217200:	release	item
000380:0x00217208:	rts
000382:0x00217210:	cmpcm	parent, null
000382:0x00217220:	beq	0x217240
000382:0x00217228:	cmpcm	item, null
000382:0x00217238:	bne	0x217248
000383:0x00217240:	jump	0x2172f8
000385:0x00217248:	movefm	[0xb5b9f298], parent
000385:0x00217258:	movefm	[0xb5b9f2c0], item
000385:0x00217268:	ncalli	InventoryLocation.SetProxyCargo([0xb5b9f298], [0xb5b9f2c0], idx, row, col, flp)
000386:0x00217288:	jump	0x2172f8
000390:0x00217290:	icall	ToString(type)
000390:0x002172a0:	adds	@s01, _s'ReadFromContext - really unknown location type, this should not happen, type=', #return
000390:0x002172b0:	moves	@s00, @s01
000390:0x002172c0:	call	Error(@s00)
000391:0x002172d0:	imove	#return, 0x000000
000391:0x002172e0:	release	parent
000391:0x002172e8:	release	item
000391:0x002172f0:	rts
000394:0x002172f8:	imove	#return, 0x000001
000394:0x00217308:	release	parent
000394:0x00217310:	release	item
000394:0x00217318:	rts
000394:0x00217320:	release	parent
000394:0x00217328:	release	item
000394:0x00217330:	rts
InventoryLocation::WriteToContext()
000399:0x00217740:	ncalli	InventoryLocation.GetType()
000399:0x00217748:	icall	
000399:0x00217758:	cmpi	#return, _i0
000399:0x00217768:	bne	0x217798
000401:0x00217770:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed to write type')
000402:0x00217780:	imove	#return, 0x000000
000402:0x00217790:	rts
000405:0x00217798:	ncalli	InventoryLocation.GetType()
000405:0x002177a0:	move	#switch, #return
000405:0x002177b0:	imove	@m00, 0x000000
000405:0x002177c0:	cmpi	@m00, #switch
000405:0x002177d0:	bne	0x2177e8
000409:0x002177d8:	jump	0x218050
000409:0x002177e0:	jump	0x217810
000409:0x002177e8:	imove	@m00, 0x000001
000409:0x002177f8:	cmpi	@m00, #switch
000409:0x00217808:	bne	0x217940
000413:0x00217810:	ncalli	InventoryLocation.GetItem()
000413:0x00217818:	icall	
000413:0x00217828:	cmpi	#return, _i0
000413:0x00217838:	bne	0x217868
000415:0x00217840:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed GND, arg=item')
000416:0x00217850:	imove	#return, 0x000000
000416:0x00217860:	rts
000419:0x00217868:	ncalli	InventoryLocation.GetPos()
000419:0x00217870:	movev	pos, #return
000420:0x00217880:	icall	
000420:0x00217890:	cmpi	#return, _i0
000420:0x002178a0:	bne	0x2178d0
000422:0x002178a8:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed GND, arg=pos')
000423:0x002178b8:	imove	#return, 0x000000
000423:0x002178c8:	rts
000427:0x002178d0:	ncalli	InventoryLocation.GetDir(dir)
000428:0x002178e0:	icall	
000428:0x002178f0:	cmpi	#return, _i0
000428:0x00217900:	bne	0x217930
000430:0x00217908:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed GND, arg=dir')
000431:0x00217918:	imove	#return, 0x000000
000431:0x00217928:	rts
000434:0x00217930:	jump	0x218050
000434:0x00217938:	jump	0x217968
000434:0x00217940:	imove	@m00, 0x000002
000434:0x00217950:	cmpi	@m00, #switch
000434:0x00217960:	bne	0x217a80
000438:0x00217968:	ncalli	InventoryLocation.GetParent()
000438:0x00217970:	icall	
000438:0x00217980:	cmpi	#return, _i0
000438:0x00217990:	bne	0x2179c0
000440:0x00217998:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed ATT, arg=parent')
000441:0x002179a8:	imove	#return, 0x000000
000441:0x002179b8:	rts
000443:0x002179c0:	ncalli	InventoryLocation.GetItem()
000443:0x002179c8:	icall	
000443:0x002179d8:	cmpi	#return, _i0
000443:0x002179e8:	bne	0x217a18
000445:0x002179f0:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed ATT, arg=item')
000446:0x00217a00:	imove	#return, 0x000000
000446:0x00217a10:	rts
000448:0x00217a18:	ncalli	InventoryLocation.GetSlot()
000448:0x00217a20:	icall	
000448:0x00217a30:	cmpi	#return, _i0
000448:0x00217a40:	bne	0x217a70
000450:0x00217a48:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed ATT, arg=slot')
000451:0x00217a58:	imove	#return, 0x000000
000451:0x00217a68:	rts
000453:0x00217a70:	jump	0x218050
000453:0x00217a78:	jump	0x217aa8
000453:0x00217a80:	imove	@m00, 0x000003
000453:0x00217a90:	cmpi	@m00, #switch
000453:0x00217aa0:	bne	0x217cc8
000457:0x00217aa8:	ncalli	InventoryLocation.GetParent()
000457:0x00217ab0:	icall	
000457:0x00217ac0:	cmpi	#return, _i0
000457:0x00217ad0:	bne	0x217b00
000459:0x00217ad8:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed CGO, arg=parent')
000460:0x00217ae8:	imove	#return, 0x000000
000460:0x00217af8:	rts
000462:0x00217b00:	ncalli	InventoryLocation.GetItem()
000462:0x00217b08:	icall	
000462:0x00217b18:	cmpi	#return, _i0
000462:0x00217b28:	bne	0x217b58
000464:0x00217b30:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed CGO, arg=item')
000465:0x00217b40:	imove	#return, 0x000000
000465:0x00217b50:	rts
000467:0x00217b58:	ncalli	InventoryLocation.GetIdx()
000467:0x00217b60:	icall	
000467:0x00217b70:	cmpi	#return, _i0
000467:0x00217b80:	bne	0x217bb0
000469:0x00217b88:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed CGO, arg=idx')
000470:0x00217b98:	imove	#return, 0x000000
000470:0x00217ba8:	rts
000472:0x00217bb0:	ncalli	InventoryLocation.GetRow()
000472:0x00217bb8:	icall	
000472:0x00217bc8:	cmpi	#return, _i0
000472:0x00217bd8:	bne	0x217c08
000474:0x00217be0:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed CGO, arg=row')
000475:0x00217bf0:	imove	#return, 0x000000
000475:0x00217c00:	rts
000477:0x00217c08:	ncalli	InventoryLocation.GetCol()
000477:0x00217c10:	icall	
000477:0x00217c20:	cmpi	#return, _i0
000477:0x00217c30:	bne	0x217c60
000479:0x00217c38:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed CGO, arg=col')
000480:0x00217c48:	imove	#return, 0x000000
000480:0x00217c58:	rts
000482:0x00217c60:	ncalli	InventoryLocation.GetFlip()
000482:0x00217c68:	icall	
000482:0x00217c78:	cmpi	#return, _i0
000482:0x00217c88:	bne	0x217cb8
000484:0x00217c90:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed CGO, arg=flp')
000485:0x00217ca0:	imove	#return, 0x000000
000485:0x00217cb0:	rts
000487:0x00217cb8:	jump	0x218050
000487:0x00217cc0:	jump	0x217cf0
000487:0x00217cc8:	imove	@m00, 0x000004
000487:0x00217cd8:	cmpi	@m00, #switch
000487:0x00217ce8:	bne	0x217db0
000491:0x00217cf0:	ncalli	InventoryLocation.GetParent()
000491:0x00217cf8:	icall	
000491:0x00217d08:	cmpi	#return, _i0
000491:0x00217d18:	bne	0x217d48
000493:0x00217d20:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed HND, arg=parent')
000494:0x00217d30:	imove	#return, 0x000000
000494:0x00217d40:	rts
000496:0x00217d48:	ncalli	InventoryLocation.GetItem()
000496:0x00217d50:	icall	
000496:0x00217d60:	cmpi	#return, _i0
000496:0x00217d70:	bne	0x217da0
000498:0x00217d78:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed HND, arg=item')
000499:0x00217d88:	imove	#return, 0x000000
000499:0x00217d98:	rts
000501:0x00217da0:	jump	0x218050
000501:0x00217da8:	jump	0x217dd8
000501:0x00217db0:	imove	@m00, 0x000005
000501:0x00217dc0:	cmpi	@m00, #switch
000501:0x00217dd0:	bne	0x217ff0
000505:0x00217dd8:	ncalli	InventoryLocation.GetParent()
000505:0x00217de0:	icall	
000505:0x00217df0:	cmpi	#return, _i0
000505:0x00217e00:	bne	0x217e30
000507:0x00217e08:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed PXY, arg=parent')
000508:0x00217e18:	imove	#return, 0x000000
000508:0x00217e28:	rts
000510:0x00217e30:	ncalli	InventoryLocation.GetItem()
000510:0x00217e38:	icall	
000510:0x00217e48:	cmpi	#return, _i0
000510:0x00217e58:	bne	0x217e88
000512:0x00217e60:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed PXY, arg=item')
000513:0x00217e70:	imove	#return, 0x000000
000513:0x00217e80:	rts
000515:0x00217e88:	ncalli	InventoryLocation.GetIdx()
000515:0x00217e90:	icall	
000515:0x00217ea0:	cmpi	#return, _i0
000515:0x00217eb0:	bne	0x217ee0
000517:0x00217eb8:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed PXY, arg=idx')
000518:0x00217ec8:	imove	#return, 0x000000
000518:0x00217ed8:	rts
000520:0x00217ee0:	ncalli	InventoryLocation.GetRow()
000520:0x00217ee8:	icall	
000520:0x00217ef8:	cmpi	#return, _i0
000520:0x00217f08:	bne	0x217f38
000522:0x00217f10:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed PXY, arg=row')
000523:0x00217f20:	imove	#return, 0x000000
000523:0x00217f30:	rts
000525:0x00217f38:	ncalli	InventoryLocation.GetCol()
000525:0x00217f40:	icall	
000525:0x00217f50:	cmpi	#return, _i0
000525:0x00217f60:	bne	0x217f90
000527:0x00217f68:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed PXY, arg=col')
000528:0x00217f78:	imove	#return, 0x000000
000528:0x00217f88:	rts
000530:0x00217f90:	ncalli	InventoryLocation.GetFlip()
000530:0x00217f98:	icall	
000530:0x00217fa8:	cmpi	#return, _i0
000530:0x00217fb8:	bne	0x217fe8
000532:0x00217fc0:	call	Error(_s'InventoryLocation::WriteToContext - cannot write to context! failed PXY, arg=flp')
000533:0x00217fd0:	imove	#return, 0x000000
000533:0x00217fe0:	rts
000536:0x00217fe8:	jump	0x218050
000540:0x00217ff0:	ncalli	InventoryLocation.GetType()
000540:0x00217ff8:	icall	ToString(#return)
000540:0x00218008:	adds	@s01, _s'WriteToContext - really unknown location type, this should not happen, type=', #return
000540:0x00218018:	moves	@s00, @s01
000540:0x00218028:	call	Error(@s00)
000541:0x00218038:	imove	#return, 0x000000
000541:0x00218048:	rts
000544:0x00218050:	imove	#return, 0x000001
000544:0x00218060:	rts
000544:0x00218068:	rts
OptionalLocationWriteToContext()
000550:0x002180c0:	cmpcm	loc, null
000550:0x002180d0:	beq	0x218158
000552:0x002180d8:	icall	
000552:0x002180e8:	cmpi	#return, _i0
000552:0x002180f8:	bne	0x218128
000554:0x00218100:	call	Error(_s'OptionalLocationWriteToContext - cannot write 1 to context!')
000555:0x00218110:	imove	#return, 0x000000
000555:0x00218120:	rts
000557:0x00218128:	call	
000557:0x00218138:	move	#return, #return
000557:0x00218148:	rts
000557:0x00218150:	jump	0x2181a8
000561:0x00218158:	icall	
000561:0x00218168:	cmpi	#return, _i0
000561:0x00218178:	bne	0x2181a8
000563:0x00218180:	call	Error(_s'OptionalLocationWriteToContext - cannot write 0 to context!')
000564:0x00218190:	imove	#return, 0x000000
000564:0x002181a0:	rts
000567:0x002181a8:	imove	#return, 0x000001
000567:0x002181b8:	rts
000567:0x002181c0:	rts
OptionalLocationReadFromContext()
000572:0x00218268:	imove	present, 0x000000
000573:0x00218278:	icall	
000573:0x00218288:	cmpi	#return, _i0
000573:0x00218298:	bne	0x2182d8
000575:0x002182a0:	call	Error(_s'OptionalLocationReadFromContext - cannot read bool from context!')
000576:0x002182b0:	imove	#return, 0x000000
000576:0x002182c0:	movem	loc, loc
000576:0x002182d0:	rts
000579:0x002182d8:	cmpi	present, _i0
000579:0x002182e8:	bne	0x218318
000580:0x002182f0:	imove	#return, 0x000001
000580:0x00218300:	movem	loc, loc
000580:0x00218310:	rts
000582:0x00218318:	new	loc, InventoryLocation
000583:0x00218338:	call	
000583:0x00218348:	cmpi	#return, _i0
000583:0x00218358:	bne	0x218398
000585:0x00218360:	call	Error(_s'OptionalLocationReadFromContext - cannot read (present) inventorylocation from context!')
000586:0x00218370:	imove	#return, 0x000000
000586:0x00218380:	movem	loc, loc
000586:0x00218390:	rts
000588:0x00218398:	imove	#return, 0x000001
000588:0x002183a8:	movem	loc, loc
000588:0x002183b8:	rts
000588:0x002183c0:	movem	loc, loc
000588:0x002183d0:	rts
AIBehaviourHLZombie2::GetData()
//scripts/3_Game/aibehaviour.c
000081:0x002183d8:	ncalli	AIBehaviourHLZombie2.GetTemplateData()
000081:0x002183e0:	icall	SafeCastType([0xb5b3ad50], @c01, #return)
000081:0x002183f8:	movec	#return, @c01
000081:0x00218408:	rts
000081:0x00218410:	rts
AIBehaviourHLZombie2::OnInit()
000089:0x00218440:	ncalli	AIBehaviourHLZombie2.SetNextBehaviour(_i2073710313)
000090:0x00218450:	ncalli	AIBehaviourHLZombie2.SwitchToNextBehaviour()
000090:0x00218458:	rts
AIBehaviourHLDataZombie2::OnParseConfig()
000126:0x002185a0:	icall	Print(_s'zombie data parse config start')
000128:0x002185b0:	ncalli	AIBehaviourHLDataZombie2.ParseBehaviourSlot(_s'Calm')
000129:0x002185c0:	ncalli	AIBehaviourHLDataZombie2.ParseBehaviourSlot(_s'Attracted')
000130:0x002185d0:	ncalli	AIBehaviourHLDataZombie2.ParseBehaviourSlot(_s'Disturbed')
000131:0x002185e0:	ncalli	AIBehaviourHLDataZombie2.ParseBehaviourSlot(_s'Alerted')
000133:0x002185f0:	ncalli	AIBehaviourHLDataZombie2.ParseAlertLevel(_s'Calm')
000134:0x00218600:	ncalli	AIBehaviourHLDataZombie2.ParseAlertLevel(_s'Disturbed')
000135:0x00218610:	ncalli	AIBehaviourHLDataZombie2.ParseAlertLevel(_s'Attracted')
000136:0x00218620:	ncalli	AIBehaviourHLDataZombie2.ParseAlertLevel(_s'Alerted')
000138:0x00218630:	ncalli	AIBehaviourHLDataZombie2.ReadParamValue(_s'damageToCrawl', _f0.010000)
000138:0x00218640:	move	m_fDamageToCrawl, #return
000139:0x00218650:	ncalli	AIBehaviourHLDataZombie2.ReadParamValue(_s'crawlProbability', _f0.010000)
000139:0x00218660:	move	m_fCrawlProbability, #return
000141:0x00218670:	icall	Print(_s'zombie data parse config end')
000141:0x00218680:	rts
HorizontalSpacerWithFixedAspect::OnWidgetScriptInit()
//scripts/3_Game/gui\spacers\horizontalspacerwithfixedaspect.c
000014:0x00218688:	movem	m_root, w
000015:0x00218698:	movefm	[0xd31345a8], m_root
000015:0x002186a8:	ncalli	Widget.SetHandler(this)
000015:0x002186b8:	rts
HorizontalSpacerWithFixedAspect::OnUpdate()
000021:0x002186c0:	cmpm	w, m_root
000021:0x002186d0:	bne	0x2186e8
000021:0x002186d8:	call	
000022:0x002186e8:	imove	#return, 0x000000
000022:0x002186f8:	rts
000022:0x00218700:	rts
HorizontalSpacerWithFixedAspect::UpdateLayout()
000027:0x00218758:	movefm	[0xd31345a8], m_root
000027:0x00218768:	ncalli	Widget.GetChildren()
000027:0x00218770:	movetm	child, #return
000029:0x00218780:	imove	index, 0x000000
000030:0x00218790:	cmpcm	child, null
000030:0x002187a0:	beq	0x218878
000032:0x002187a8:	cmpi	index, _i0
000032:0x002187b8:	bne	0x2187d8
000034:0x002187c0:	icall	
000034:0x002187d0:	jump	0x218840
000038:0x002187d8:	ncalli	Widget.SetFlags(_i12, false)
000039:0x002187e8:	mulf	@f02, itemWidth, coef
000039:0x002187f8:	move	@f01, @f02
000039:0x00218808:	addf	@f01, itemWidth, @f01
000039:0x00218818:	move	@f00, @f01
000039:0x00218828:	ncalli	Widget.SetPos(@f00, _f0.000000, _i1)
000042:0x00218840:	move	@m00, index
000042:0x00218850:	inc	index
000043:0x00218858:	ncalli	Widget.GetSibling()
000043:0x00218860:	movetm	child, #return
000043:0x00218870:	jump	0x218790
000043:0x00218878:	release	child
000043:0x00218880:	rts
RadialMenu::RadialMenu()
//scripts/3_Game/gui\effects\radialmenu.c
000084:0x002188b0:	imove	m_IsControllerTimoutEnabled, 0x000001
000084:0x002188c0:	imove	last_time, 0xffffffff
000086:0x002188d0:	movetm	m_Instance, this
000101:0x002188e0:	imove	m_ControlType, 0x000000
000104:0x002188f0:	ncall	GetUApi()
000104:0x002188f8:	ncalli	UAInputAPI.GetInputByID(UAUISelect)
000104:0x00218908:	ncalli	UAInput.GetPersistentWrapper()
000104:0x00218910:	movec	m_SelectInputWrapper, #return
000105:0x00218920:	ncall	GetUApi()
000105:0x00218928:	ncalli	UAInputAPI.GetInputByID(UAUIBack)
000105:0x00218938:	ncalli	UAInput.GetPersistentWrapper()
000105:0x00218940:	movec	m_BackInputWrapper, #return
000108:0x00218950:	new	m_RadialItemCards, map<Widget,float>
000109:0x00218970:	new	m_UpdateTimer, Timer
000110:0x00218998:	movetm	params, NULL
000110:0x002189a8:	movefm	[0xb5b3c700], m_UpdateTimer
000110:0x002189b8:	call	
000110:0x002189d8:	rts
RadialMenu::GetInstance()
000119:0x002189e0:	movem	#return, m_Instance
000119:0x002189f0:	rts
000119:0x002189f8:	rts
RadialMenu::OnWidgetScriptInit()
000125:0x00218a50:	ncalli	Widget.FindAnyWidget(RADIAL_ITEM_CARD_CONTAINER)
000125:0x00218a60:	movetm	m_ItemCardsContainer, #return
000126:0x00218a70:	ncalli	Widget.FindAnyWidget(RADIAL_SELECTOR)
000126:0x00218a80:	movetm	m_RadialSelector, #return
000127:0x00218a90:	movefm	[0xd31345a8], m_RadialSelector
000127:0x00218aa0:	ncalli	Widget.FindAnyWidget(RADIAL_SELECTOR_IMAGE)
000127:0x00218ab0:	icall	SafeCastType([0xd3135420], @c01, #return)
000127:0x00218ac8:	movetm	m_RadialSelectorImage, @c01
000128:0x00218ad8:	movefm	[0xd31345a8], m_RadialSelector
000128:0x00218ae8:	ncalli	Widget.FindAnyWidget(RADIAL_SELECTOR_POINTER)
000128:0x00218af8:	icall	SafeCastType([0xd3135420], @c01, #return)
000128:0x00218b10:	movetm	m_RadialSelectorPointerImage, @c01
000130:0x00218b20:	movefm	[0xd3135420], m_RadialSelectorImage
000130:0x00218b30:	ncalli	ImageWidget.GetColor()
000130:0x00218b38:	move	m_RadialSelectorOriginalColor, #return
000131:0x00218b48:	call	ARGB(_i255, _i150, _i150, _i150)
000131:0x00218b68:	move	m_RadialSelectorDisabledColor, #return
000134:0x00218b78:	movem	m_Parent, w
000135:0x00218b88:	movefm	[0xd31345a8], m_Parent
000135:0x00218b98:	ncalli	Widget.SetHandler(this)
000135:0x00218ba8:	rts
RadialMenu::SetControlType()
000141:0x00218bd8:	cmpi	m_ControlType, type
000141:0x00218be8:	beq	0x218c50
000143:0x00218bf0:	move	m_ControlType, type
000144:0x00218c00:	ncall	GetGame()
000144:0x00218c08:	movec	@c00, #return
000144:0x00218c18:	movec	@c01, GameScript
000144:0x00218c28:	movefm	@c02, m_RegisteredClass
000144:0x00218c38:	icall	
000144:0x00218c50:	rts
RadialMenu::IsUsingMouse()
000150:0x00218c58:	cmpi	m_ControlType, MOUSE
000150:0x00218c68:	bne	0x218c88
000152:0x00218c70:	imove	#return, 0x000001
000152:0x00218c80:	rts
000155:0x00218c88:	imove	#return, 0x000000
000155:0x00218c98:	rts
000155:0x00218ca0:	rts
RadialMenu::IsUsingController()
000160:0x00218ca8:	cmpi	m_ControlType, CONTROLLER
000160:0x00218cb8:	bne	0x218cd8
000162:0x00218cc0:	imove	#return, 0x000001
000162:0x00218cd0:	rts
000165:0x00218cd8:	imove	#return, 0x000000
000165:0x00218ce8:	rts
000165:0x00218cf0:	rts
RadialMenu::SetWidgetInitialized()
000170:0x00218cf8:	move	m_WidgetInitialized, state
000170:0x00218d08:	rts
RadialMenu::IsWidgetInitialized()
000175:0x00218d10:	move	#return, m_WidgetInitialized
000175:0x00218d20:	rts
000175:0x00218d28:	rts
RadialMenu::RegisterClass()
000183:0x00218d30:	movem	m_RegisteredClass, class_name
000184:0x00218d40:	cmpcm	m_UpdateTimer, null
000184:0x00218d50:	beq	0x218dd0
000184:0x00218d58:	movefm	[0xb5b3c700], m_UpdateTimer
000184:0x00218d68:	call	
000184:0x00218d78:	cmpi	#return, _i0
000184:0x00218d88:	bne	0x218dd0
000185:0x00218d90:	movetm	params, NULL
000185:0x00218da0:	movefm	[0xb5b3c700], m_UpdateTimer
000185:0x00218db0:	call	
000185:0x00218dd0:	rts
RadialMenu::SetRadiusOffset()
000192:0x00218dd8:	move	m_RadiusOffset, radius_offset
000192:0x00218de8:	rts
RadialMenu::SetExecuteDistOffset()
000198:0x00218df0:	move	m_ExecuteDistanceOffset, execute_dist_offset
000198:0x00218e00:	rts
RadialMenu::SetOffsetFromTop()
000204:0x00218e08:	move	m_OffsetFromTop, offset_from_top
000204:0x00218e18:	rts
RadialMenu::SetItemCardRadiusOffset()
000210:0x00218e20:	move	m_ItemCardRadiusOffset, item_card_radius_offset
000210:0x00218e30:	rts
RadialMenu::ActivateControllerTimeout()
000216:0x00218e38:	move	m_IsControllerTimoutEnabled, state
000216:0x00218e48:	rts
RadialMenu::SetWidgetProperties()
000221:0x00218e50:	moves	m_DelimiterLayout, delimiter_layout
000221:0x00218e60:	rts
RadialMenu::Refresh()
000230:0x00219348:	call	
000230:0x00219358:	move	item_cards_count, #return
000231:0x00219368:	cmpi	item_cards_count, _i0
000231:0x00219378:	ble	0x2193d0
000232:0x00219380:	imove	@f01, 6.28319
000232:0x00219390:	move	@f00, @f01
000232:0x002193a0:	citf	@f01, item_cards_count
000232:0x002193b0:	divf	@f00, @f00, @f01
000232:0x002193c0:	move	m_AngleRadOffset, @f00
000233:0x002193d0:	subf	@f01, _f0.000000, PI
000233:0x002193e0:	divf	angle_rad, @f01, _f2.000000
000236:0x002193f0:	cmpf	m_OffsetFromTop, _f0.000000
000236:0x00219400:	beq	0x219428
000238:0x00219408:	addf	@f00, angle_rad, m_OffsetFromTop
000238:0x00219418:	move	angle_rad, @f00
000243:0x00219428:	movefm	[0xd31345a8], m_Parent
000243:0x00219438:	ncalli	Widget.FindAnyWidget(RADIAL_DELIMITER_CONTAINER)
000243:0x00219448:	movetm	delimiters_panel, #return
000244:0x00219458:	cmpcm	delimiters_panel, null
000244:0x00219468:	beq	0x2194e8
000246:0x00219470:	ncalli	Widget.GetChildren()
000246:0x00219478:	movetm	del_child, #return
000247:0x00219488:	cmpcm	del_child, null
000247:0x00219498:	beq	0x2194e0
000249:0x002194a0:	movem	child_to_destroy1, del_child
000250:0x002194b0:	ncalli	Widget.GetSibling()
000250:0x002194b8:	movetm	del_child, #return
000252:0x002194c8:	delete	child_to_destroy1
000252:0x002194d0:	release	child_to_destroy1
000252:0x002194d8:	jump	0x219488
000252:0x002194e0:	release	del_child
000257:0x002194e8:	movefm	[0xd31345a8], m_Parent
000257:0x002194f8:	ncalli	Widget.FindAnyWidget(RADIAL_ITEM_CARD_CONTAINER)
000257:0x00219508:	movetm	item_cards_panel, #return
000258:0x00219518:	ncalli	Widget.GetChildren()
000258:0x00219520:	movetm	item_card, #return
000261:0x00219530:	call	
000261:0x00219540:	move	original_r, #return
000262:0x00219550:	move	item_cards_r, original_r
000265:0x00219560:	cmpf	m_ItemCardRadiusOffset, _f0.000000
000265:0x00219570:	beq	0x2195c0
000267:0x00219578:	mulf	@f00, item_cards_r, m_ItemCardRadiusOffset
000267:0x00219588:	move	item_cards_r, @f00
000268:0x00219598:	cmpf	item_cards_r, _f0.000000
000268:0x002195a8:	bge	0x2195c0
000268:0x002195b0:	imove	item_cards_r, 0.00000
000271:0x002195c0:	movefm	[0xb5bb42e8], m_RadialItemCards
000271:0x002195d0:	ncalli	map<Widget,float>.Clear()
000272:0x002195d8:	imove	i, 0x000000
000272:0x002195e8:	jump	0x2195f8
000272:0x002195f0:	inc	i
000272:0x002195f8:	cmpi	i, item_cards_count
000272:0x00219608:	bge	0x219868
000275:0x00219610:	cmpcm	item_card, null
000275:0x00219620:	beq	0x219708
000278:0x00219628:	icall	Cos(angle_rad)
000278:0x00219638:	mulf	pos_x, item_cards_r, #return
000279:0x00219648:	icall	Sin(angle_rad)
000279:0x00219658:	mulf	pos_y, item_cards_r, #return
000281:0x00219668:	divf	@f00, pos_x, original_r
000281:0x00219678:	move	pos_x, @f00
000282:0x00219688:	divf	@f00, pos_y, original_r
000282:0x00219698:	move	pos_y, @f00
000284:0x002196a8:	ncalli	Widget.SetPos(pos_x, pos_y, _i1)
000287:0x002196c0:	movefm	@c00, item_card
000287:0x002196d0:	movefm	[0xb5bb42e8], m_RadialItemCards
000287:0x002196e0:	icall	
000290:0x002196f0:	ncalli	Widget.GetSibling()
000290:0x002196f8:	movetm	item_card, #return
000295:0x00219708:	cmpi	item_cards_count, _i1
000295:0x00219718:	ble	0x219840
000295:0x00219720:	cmpcm	delimiters_panel, null
000295:0x00219730:	beq	0x219840
000295:0x00219738:	cmps	m_DelimiterLayout, _s''
000295:0x00219748:	beq	0x219840
000297:0x00219750:	ncall	GetGame()
000297:0x00219758:	ncalli	CGame.GetWorkspace()
000297:0x00219760:	moves	[0xd316bc98], m_DelimiterLayout
000297:0x00219770:	movefm	[0xd316bcc0], delimiters_panel
000297:0x00219780:	ncall	CreateWidgets(#return, [0xd316bc98], [0xd316bcc0], _i1)
000297:0x00219798:	movetm	delimiter_widget, #return
000298:0x002197a8:	divf	@f01, m_AngleRadOffset, _f2.000000
000298:0x002197b8:	move	@f00, @f01
000298:0x002197c8:	addf	delim_angle_rad, angle_rad, @f00
000299:0x002197d8:	ncalli	Widget.SetPos(_f0.000000, _f0.000000, _i1)
000300:0x002197f0:	call	
000300:0x00219800:	addf	@f01, #return, _f90.000000
000300:0x00219810:	move	@f00, @f01
000300:0x00219820:	ncalli	Widget.SetRotation(_f0.000000, _f0.000000, @f00, _i1)
000300:0x00219838:	release	delimiter_widget
000304:0x00219840:	move	@f00, m_AngleRadOffset
000304:0x00219850:	addf	angle_rad, angle_rad, @f00
000304:0x00219860:	jump	0x2195f0
000308:0x00219868:	cmpi	hide_selector, _i0
000308:0x00219878:	beq	0x219890
000310:0x00219880:	call	
000310:0x00219890:	release	delimiters_panel
000310:0x00219898:	release	item_cards_panel
000310:0x002198a0:	release	item_card
000310:0x002198a8:	rts
RadialMenu::ShowRadialSelector()
000317:0x002199e0:	cmpcm	m_RadialSelector, null
000317:0x002199f0:	beq	0x219c90
000317:0x002199f8:	cmpcm	selected_item, null
000317:0x00219a08:	beq	0x219c90
000319:0x00219a10:	movefm	[0xb5bb42e8], m_RadialItemCards
000319:0x00219a20:	ncalli	map<Widget,float>.Count()
000319:0x00219a28:	move	item_count, #return
000320:0x00219a38:	cmpi	item_count, _i1
000320:0x00219a48:	ble	0x219c90
000322:0x00219a50:	movefm	@c00, selected_item
000322:0x00219a60:	movefm	[0xb5bb42e8], m_RadialItemCards
000322:0x00219a70:	icall	
000322:0x00219a80:	call	
000322:0x00219a90:	cfti	angle_deg, #return
000323:0x00219aa0:	citf	@f01, angle_deg
000323:0x00219ab0:	addf	@f01, @f01, _f90.000000
000323:0x00219ac0:	move	@f00, @f01
000323:0x00219ad0:	movefm	[0xd31345a8], m_RadialSelector
000323:0x00219ae0:	ncalli	Widget.SetRotation(_f0.000000, _f0.000000, @f00, _i1)
000326:0x00219af8:	citf	@f01, item_count
000326:0x00219b08:	divf	@f01, _f1.000000, @f01
000326:0x00219b18:	move	@f00, @f01
000326:0x00219b28:	mulf	progress, @f00, _f2.000000
000327:0x00219b38:	movefm	[0xd3135420], m_RadialSelectorImage
000327:0x00219b48:	ncalli	ImageWidget.SetMaskProgress(progress)
000329:0x00219b58:	movefm	[0xd31345a8], m_RadialSelector
000329:0x00219b68:	ncalli	Widget.Show(true, _i1)
000331:0x00219b78:	ncalli	Widget.GetFlags()
000331:0x00219b80:	move	@m00, #return
000331:0x00219b90:	move	@m01, _i131072
000331:0x00219ba0:	andi	grey_selector, @m00, @m01
000332:0x00219bb0:	cmpi	grey_selector, _i0
000332:0x00219bc0:	bne	0x219c30
000334:0x00219bc8:	move	[0xd3160088], m_RadialSelectorDisabledColor
000334:0x00219bd8:	movefm	[0xd3135420], m_RadialSelectorImage
000334:0x00219be8:	ncalli	ImageWidget.SetColor([0xd3160088])
000335:0x00219bf8:	move	[0xd3160088], m_RadialSelectorDisabledColor
000335:0x00219c08:	movefm	[0xd3135420], m_RadialSelectorPointerImage
000335:0x00219c18:	ncalli	ImageWidget.SetColor([0xd3160088])
000335:0x00219c28:	jump	0x219c90
000339:0x00219c30:	move	[0xd3160088], m_RadialSelectorOriginalColor
000339:0x00219c40:	movefm	[0xd3135420], m_RadialSelectorImage
000339:0x00219c50:	ncalli	ImageWidget.SetColor([0xd3160088])
000340:0x00219c60:	move	[0xd3160088], m_RadialSelectorOriginalColor
000340:0x00219c70:	movefm	[0xd3135420], m_RadialSelectorPointerImage
000340:0x00219c80:	ncalli	ImageWidget.SetColor([0xd3160088])
000340:0x00219c90:	rts
RadialMenu::HideRadialSelector()
000348:0x00219c98:	cmpcm	m_RadialSelector, null
000348:0x00219ca8:	beq	0x219cd0
000350:0x00219cb0:	movefm	[0xd31345a8], m_RadialSelector
000350:0x00219cc0:	ncalli	Widget.Show(false, _i1)
000350:0x00219cd0:	rts
RadialMenu::GetItemCardsCount()
000359:0x00219d28:	movefm	[0xd31345a8], m_ItemCardsContainer
000359:0x00219d38:	ncalli	Widget.GetChildren()
000359:0x00219d40:	movetm	child, #return
000360:0x00219d50:	imove	count, 0x000000
000362:0x00219d60:	cmpcm	child, null
000362:0x00219d70:	beq	0x219da0
000364:0x00219d78:	inc	count
000366:0x00219d80:	ncalli	Widget.GetSibling()
000366:0x00219d88:	movetm	child, #return
000366:0x00219d98:	jump	0x219d60
000369:0x00219da0:	move	#return, count
000369:0x00219db0:	release	child
000369:0x00219db8:	rts
000369:0x00219dc0:	release	child
000369:0x00219dc8:	rts
RadialMenu::GetRadius()
000374:0x00219df8:	call	
000374:0x00219e08:	mulf	@f02, #return, _f0.500000
000374:0x00219e18:	move	@f01, @f02
000374:0x00219e28:	icall	AbsFloat(@f01)
000374:0x00219e38:	move	radius, #return
000377:0x00219e48:	cmpf	m_RadiusOffset, _f0.000000
000377:0x00219e58:	ble	0x219e78
000379:0x00219e60:	mulf	#return, radius, m_RadiusOffset
000379:0x00219e70:	rts
000383:0x00219e78:	move	#return, radius
000383:0x00219e88:	rts
000383:0x00219e90:	rts
RadialMenu::GetParentCenter()
000388:0x00219fd8:	cmpcm	m_Parent, null
000388:0x00219fe8:	beq	0x21a0b0
000392:0x00219ff0:	movefm	[0xd31345a8], m_Parent
000392:0x0021a000:	icall	
000396:0x0021a010:	movefm	[0xd31345a8], m_Parent
000396:0x0021a020:	icall	
000398:0x0021a030:	divf	@f01, ww, _f2.000000
000398:0x0021a040:	move	@f00, @f01
000398:0x0021a050:	addf	@f00, wx, @f00
000398:0x0021a060:	move	center_x, @f00
000399:0x0021a070:	divf	@f01, wh, _f2.000000
000399:0x0021a080:	move	@f00, @f01
000399:0x0021a090:	addf	@f00, wy, @f00
000399:0x0021a0a0:	move	center_y, @f00
000399:0x0021a0b0:	move	center_x, center_x
000399:0x0021a0c0:	move	center_y, center_y
000399:0x0021a0d0:	rts
RadialMenu::GetParentMinSize()
000405:0x0021a128:	cmpcm	m_Parent, null
000405:0x0021a138:	beq	0x21a188
000409:0x0021a140:	movefm	[0xd31345a8], m_Parent
000409:0x0021a150:	icall	
000411:0x0021a160:	icall	Min(size_x, size_y)
000411:0x0021a170:	move	#return, #return
000411:0x0021a180:	rts
000414:0x0021a188:	imove	#return, 0.00000
000414:0x0021a198:	rts
000414:0x0021a1a0:	rts
RadialMenu::GetObjectByDegAngle()
000423:0x0021a348:	imove	i, 0x000000
000423:0x0021a358:	jump	0x21a368
000423:0x0021a360:	inc	i
000423:0x0021a368:	movefm	[0xb5bb42e8], m_RadialItemCards
000423:0x0021a378:	ncalli	map<Widget,float>.Count()
000423:0x0021a380:	cmpi	i, #return
000423:0x0021a390:	bge	0x21a5e8
000425:0x0021a398:	movefm	[0xb5bb42e8], m_RadialItemCards
000425:0x0021a3a8:	icall	
000425:0x0021a3b8:	movetm	w, #return
000426:0x0021a3c8:	movefm	@c00, w
000426:0x0021a3d8:	movefm	[0xb5bb42e8], m_RadialItemCards
000426:0x0021a3e8:	icall	
000426:0x0021a3f8:	call	
000426:0x0021a408:	move	w_angle, #return
000427:0x0021a418:	move	rad_angle, m_AngleRadOffset
000427:0x0021a428:	call	
000427:0x0021a438:	divf	offset, #return, _f2.000000
000428:0x0021a448:	subf	min_angle, w_angle, offset
000429:0x0021a458:	addf	max_angle, w_angle, offset
000431:0x0021a468:	cmpf	min_angle, _f0.000000
000431:0x0021a478:	bge	0x21a4a0
000431:0x0021a480:	imove	@f00, 360.00000
000431:0x0021a490:	addf	min_angle, min_angle, @f00
000432:0x0021a4a0:	cmpf	max_angle, _f360.000000
000432:0x0021a4b0:	ble	0x21a4d8
000432:0x0021a4b8:	imove	@f00, 360.00000
000432:0x0021a4c8:	subf	max_angle, max_angle, @f00
000434:0x0021a4d8:	cmpf	min_angle, max_angle
000434:0x0021a4e8:	ble	0x21a588
000436:0x0021a4f0:	cmpf	min_angle, deg_angle
000436:0x0021a500:	bgt	0x21a548
000438:0x0021a508:	cmpf	deg_angle, max_angle
000438:0x0021a518:	ble	0x21a540
000440:0x0021a520:	movem	#return, w
000440:0x0021a530:	release	w
000440:0x0021a538:	rts
000440:0x0021a540:	jump	0x21a580
000445:0x0021a548:	cmpf	deg_angle, max_angle
000445:0x0021a558:	bge	0x21a580
000447:0x0021a560:	movem	#return, w
000447:0x0021a570:	release	w
000447:0x0021a578:	rts
000447:0x0021a580:	jump	0x21a5d8
000453:0x0021a588:	cmpf	deg_angle, min_angle
000453:0x0021a598:	blt	0x21a5d8
000453:0x0021a5a0:	cmpf	deg_angle, max_angle
000453:0x0021a5b0:	bge	0x21a5d8
000455:0x0021a5b8:	movem	#return, w
000455:0x0021a5c8:	release	w
000455:0x0021a5d0:	rts
000455:0x0021a5d8:	release	w
000455:0x0021a5e0:	jump	0x21a360
000460:0x0021a5e8:	movetm	#return, NULL
000460:0x0021a5f8:	rts
000460:0x0021a600:	rts
RadialMenu::GetMousePointerAngle()
000468:0x0021a770:	ncall	GetGame()
000468:0x0021a778:	icall	GetMousePos(mouse_x, mouse_y)
000472:0x0021a788:	call	
000472:0x0021a7a0:	move	center_x, center_x
000472:0x0021a7b0:	move	center_y, center_y
000474:0x0021a7c0:	citf	@f00, mouse_x
000474:0x0021a7d0:	subf	tan_x, @f00, center_x
000475:0x0021a7e0:	citf	@f00, mouse_y
000475:0x0021a7f0:	subf	tan_y, @f00, center_y
000476:0x0021a800:	icall	Atan2(tan_y, tan_x)
000476:0x0021a810:	move	angle, #return
000478:0x0021a820:	move	#return, angle
000478:0x0021a830:	rts
000478:0x0021a838:	rts
RadialMenu::GetMouseDistance()
000486:0x0021a908:	ncall	GetGame()
000486:0x0021a910:	icall	GetMousePos(mouse_x, mouse_y)
000490:0x0021a920:	call	
000490:0x0021a938:	move	center_x, center_x
000490:0x0021a948:	move	center_y, center_y
000492:0x0021a958:	citf	[0xd3177090], mouse_x
000492:0x0021a968:	citf	[0xd31770b8], mouse_y
000492:0x0021a978:	ncall	Vector([0xd3177090], [0xd31770b8], _f0.000000)
000492:0x0021a990:	pushv	#return
000492:0x0021a998:	ncall	Vector(center_x, center_y, _f0.000000)
000492:0x0021a9b0:	movev	@v00, #return
000492:0x0021a9c0:	popv	#return
000492:0x0021a9c8:	ncall	Distance(#return, @v00)
000492:0x0021a9d8:	move	distance, #return
000494:0x0021a9e8:	move	#return, distance
000494:0x0021a9f8:	rts
000494:0x0021aa00:	rts
RadialMenu::GetAngleInDegrees()
000500:0x0021aad8:	mulf	rad_deg, rad_angle, RAD2DEG
000502:0x0021aae8:	citf	@f01, _i360
000502:0x0021aaf8:	divf	@f00, rad_deg, @f01
000502:0x0021ab08:	cfti	angle_mp, @f00
000504:0x0021ab18:	cmpf	rad_deg, _f0.000000
000504:0x0021ab28:	bge	0x21aba0
000506:0x0021ab30:	citf	@f01, angle_mp
000506:0x0021ab40:	mulf	@f01, _f360.000000, @f01
000506:0x0021ab50:	move	@f00, @f01
000506:0x0021ab60:	subf	@f00, rad_deg, @f00
000506:0x0021ab70:	move	rad_deg, @f00
000507:0x0021ab80:	imove	@f00, 360.00000
000507:0x0021ab90:	addf	rad_deg, rad_deg, @f00
000510:0x0021aba0:	move	#return, rad_deg
000510:0x0021abb0:	rts
000510:0x0021abb8:	rts
RadialMenu::Update()
000520:0x0021ad90:	cmpm	this, null
000520:0x0021ada0:	beq	0x21ade8
000520:0x0021ada8:	cmpcm	m_RegisteredClass, null
000520:0x0021adb8:	bne	0x21ade8
000522:0x0021adc0:	movefm	[0xb5b3c700], m_UpdateTimer
000522:0x0021add0:	call	
000523:0x0021ade0:	rts
000527:0x0021ade8:	cmpi	last_time, _i0
000527:0x0021adf8:	bge	0x21ae20
000529:0x0021ae00:	ncall	GetGame()
000529:0x0021ae08:	icall	
000529:0x0021ae10:	move	last_time, #return
000531:0x0021ae20:	ncall	GetGame()
000531:0x0021ae28:	icall	
000531:0x0021ae30:	subi	delta_time, #return, last_time
000532:0x0021ae40:	ncall	GetGame()
000532:0x0021ae48:	icall	
000532:0x0021ae50:	move	last_time, #return
000535:0x0021ae60:	cmpm	this, null
000535:0x0021ae70:	beq	0x21b420
000535:0x0021ae78:	cmpcm	m_RegisteredClass, null
000535:0x0021ae88:	beq	0x21b420
000535:0x0021ae90:	movefm	[0xb5b22a10], m_RegisteredClass
000535:0x0021aea0:	ncalli	UIScriptedMenu.IsVisible()
000535:0x0021aea8:	cmpi	#return, _i0
000535:0x0021aeb8:	beq	0x21b420
000538:0x0021aec0:	call	
000538:0x0021aed0:	cmpi	#return, _i0
000538:0x0021aee0:	beq	0x21b0d0
000538:0x0021aee8:	cmpi	m_WidgetInitialized, _i0
000538:0x0021aef8:	beq	0x21b0d0
000540:0x0021af00:	call	
000540:0x0021af10:	move	mouse_angle, #return
000541:0x0021af20:	call	
000541:0x0021af30:	move	mouse_distance, #return
000544:0x0021af40:	cmpf	mouse_distance, MOUSE_SAFE_ZONE_RADIUS
000544:0x0021af50:	bgt	0x21afd0
000547:0x0021af58:	ncall	GetGame()
000547:0x0021af60:	movec	@c00, #return
000547:0x0021af70:	movec	@c01, GameScript
000547:0x0021af80:	movefm	@c02, m_RegisteredClass
000547:0x0021af90:	icall	
000548:0x0021afa8:	movetm	m_SelectedObject, NULL
000550:0x0021afb8:	call	
000550:0x0021afc8:	jump	0x21b0c8
000555:0x0021afd0:	ncall	GetGame()
000555:0x0021afd8:	movec	@c00, #return
000555:0x0021afe8:	movec	@c01, GameScript
000555:0x0021aff8:	movefm	@c02, m_RegisteredClass
000555:0x0021b008:	icall	
000558:0x0021b020:	call	
000558:0x0021b030:	call	
000558:0x0021b040:	movem	m_SelectedObject, #return
000558:0x0021b050:	release	#return
000559:0x0021b058:	ncall	GetGame()
000559:0x0021b060:	movec	@c00, #return
000559:0x0021b070:	movec	@c01, GameScript
000559:0x0021b080:	movefm	@c02, m_RegisteredClass
000559:0x0021b090:	icall	
000561:0x0021b0a8:	movem	selected_item, m_SelectedObject
000561:0x0021b0b8:	call	
000561:0x0021b0c8:	jump	0x21b410
000565:0x0021b0d0:	call	
000565:0x0021b0e0:	cmpi	#return, _i0
000565:0x0021b0f0:	beq	0x21b410
000567:0x0021b0f8:	call	
000570:0x0021b108:	cmpf	m_ControllerAngle, _f-1.000000
000570:0x0021b118:	ble	0x21b310
000570:0x0021b120:	cmpf	m_ControllerTilt, _f-1.000000
000570:0x0021b130:	ble	0x21b310
000573:0x0021b138:	move	deg_angle, m_ControllerAngle
000573:0x0021b148:	call	
000573:0x0021b158:	movem	w_selected, #return
000573:0x0021b168:	release	#return
000575:0x0021b170:	cmpcm	w_selected, null
000575:0x0021b180:	beq	0x21b290
000577:0x0021b188:	cmpm	w_selected, m_SelectedObject
000577:0x0021b198:	beq	0x21b288
000579:0x0021b1a0:	cmpf	m_ControllerTilt, CONTROLLER_TILT_TRESHOLD_SELECT
000579:0x0021b1b0:	blt	0x21b288
000582:0x0021b1b8:	ncall	GetGame()
000582:0x0021b1c0:	movec	@c00, #return
000582:0x0021b1d0:	movec	@c01, GameScript
000582:0x0021b1e0:	movefm	@c02, m_RegisteredClass
000582:0x0021b1f0:	icall	
000585:0x0021b208:	movem	m_SelectedObject, w_selected
000586:0x0021b218:	ncall	GetGame()
000586:0x0021b220:	movec	@c00, #return
000586:0x0021b230:	movec	@c01, GameScript
000586:0x0021b240:	movefm	@c02, m_RegisteredClass
000586:0x0021b250:	icall	
000588:0x0021b268:	movem	selected_item, m_SelectedObject
000588:0x0021b278:	call	
000588:0x0021b288:	jump	0x21b300
000594:0x0021b290:	ncall	GetGame()
000594:0x0021b298:	movec	@c00, #return
000594:0x0021b2a8:	movec	@c01, GameScript
000594:0x0021b2b8:	movefm	@c02, m_RegisteredClass
000594:0x0021b2c8:	icall	
000595:0x0021b2e0:	movetm	m_SelectedObject, NULL
000597:0x0021b2f0:	call	
000597:0x0021b300:	release	w_selected
000597:0x0021b308:	jump	0x21b3f0
000603:0x0021b310:	cmpi	m_IsControllerTimoutEnabled, _i0
000603:0x0021b320:	beq	0x21b3f0
000605:0x0021b328:	move	@m00, delta_time
000605:0x0021b338:	addi	m_ControllerTimout, m_ControllerTimout, @m00
000607:0x0021b348:	cfti	@m00, CONTROLLER_DESELECT_TIMEOUT
000607:0x0021b358:	cmpi	m_ControllerTimout, @m00
000607:0x0021b368:	blt	0x21b3f0
000609:0x0021b370:	ncall	GetGame()
000609:0x0021b378:	movec	@c00, #return
000609:0x0021b388:	movec	@c01, GameScript
000609:0x0021b398:	movefm	@c02, m_RegisteredClass
000609:0x0021b3a8:	icall	
000610:0x0021b3c0:	movetm	m_SelectedObject, NULL
000612:0x0021b3d0:	call	
000614:0x0021b3e0:	imove	m_ControllerTimout, 0x000000
000619:0x0021b3f0:	imove	m_ControllerAngle, -1.00000
000620:0x0021b400:	imove	m_ControllerTilt, -1.00000
000623:0x0021b410:	imove	m_WidgetInitialized, 0x000001
000623:0x0021b420:	rts
RadialMenu::NormalizeInvertAngle()
000629:0x0021b4a8:	subf	new_angle, _f360.000000, angle
000630:0x0021b4b8:	citf	@f01, _i360
000630:0x0021b4c8:	divf	@f00, new_angle, @f01
000630:0x0021b4d8:	cfti	angle_mp, @f00
000632:0x0021b4e8:	citf	@f01, angle_mp
000632:0x0021b4f8:	mulf	@f01, _f360.000000, @f01
000632:0x0021b508:	move	@f00, @f01
000632:0x0021b518:	subf	@f00, new_angle, @f00
000632:0x0021b528:	move	new_angle, @f00
000634:0x0021b538:	move	#return, new_angle
000634:0x0021b548:	rts
000634:0x0021b550:	rts
RadialMenu::UpdataControllerInput()
000642:0x0021b678:	ncall	GetGame()
000642:0x0021b680:	ncalli	CGame.GetInput()
000642:0x0021b688:	movetm	input, #return
000647:0x0021b698:	icall	
000648:0x0021b6b0:	mulf	@f01, angle, RAD2DEG
000648:0x0021b6c0:	move	@f00, @f01
000648:0x0021b6d0:	call	
000648:0x0021b6e0:	move	angle, #return
000650:0x0021b6f0:	move	m_ControllerAngle, angle
000651:0x0021b700:	move	m_ControllerTilt, tilt
000652:0x0021b710:	imove	m_ControllerTimout, 0x000000
000656:0x0021b720:	movec	[0xb5b1b418], m_SelectInputWrapper
000656:0x0021b730:	ncalli	UAIDWrapper.InputP()
000656:0x0021b738:	ncalli	UAInput.LocalPress()
000656:0x0021b740:	cmpi	#return, _i0
000656:0x0021b750:	beq	0x21b7a8
000658:0x0021b758:	ncall	GetGame()
000658:0x0021b760:	movec	@c00, #return
000658:0x0021b770:	movec	@c01, GameScript
000658:0x0021b780:	movefm	@c02, m_RegisteredClass
000658:0x0021b790:	icall	
000662:0x0021b7a8:	movec	[0xb5b1b418], m_BackInputWrapper
000662:0x0021b7b8:	ncalli	UAIDWrapper.InputP()
000662:0x0021b7c0:	ncalli	UAInput.LocalPress()
000662:0x0021b7c8:	cmpi	#return, _i0
000662:0x0021b7d8:	beq	0x21b830
000664:0x0021b7e0:	ncall	GetGame()
000664:0x0021b7e8:	movec	@c00, #return
000664:0x0021b7f8:	movec	@c01, GameScript
000664:0x0021b808:	movefm	@c02, m_RegisteredClass
000664:0x0021b818:	icall	
000664:0x0021b830:	release	input
000664:0x0021b838:	rts
RadialMenu::OnMouseButtonUp()
000670:0x0021b890:	cmpi	button, _i0
000670:0x0021b8a0:	bne	0x21b928
000670:0x0021b8a8:	cmpcm	m_SelectedObject, null
000670:0x0021b8b8:	beq	0x21b928
000673:0x0021b8c0:	ncall	GetGame()
000673:0x0021b8c8:	movec	@c00, #return
000673:0x0021b8d8:	movec	@c01, GameScript
000673:0x0021b8e8:	movefm	@c02, m_RegisteredClass
000673:0x0021b8f8:	icall	
000675:0x0021b910:	imove	#return, 0x000001
000675:0x0021b920:	rts
000678:0x0021b928:	cmpi	button, _i1
000678:0x0021b938:	bne	0x21b9a8
000681:0x0021b940:	ncall	GetGame()
000681:0x0021b948:	movec	@c00, #return
000681:0x0021b958:	movec	@c01, GameScript
000681:0x0021b968:	movefm	@c02, m_RegisteredClass
000681:0x0021b978:	icall	
000683:0x0021b990:	imove	#return, 0x000001
000683:0x0021b9a0:	rts
000686:0x0021b9a8:	imove	#return, 0x000000
000686:0x0021b9b8:	rts
000686:0x0021b9c0:	rts
ParticleEvents::ParticleEvents()
//scripts/3_Game/particles\particlebase.c
000015:0x0021b9c8:	new	Event_OnParticleStart, ScriptInvoker
000015:0x0021b9e8:	new	Event_OnParticleStop, ScriptInvoker
000015:0x0021ba08:	new	Event_OnParticleReset, ScriptInvoker
000015:0x0021ba28:	new	Event_OnParticleEnd, ScriptInvoker
000015:0x0021ba48:	new	Event_OnParticleParented, ScriptInvoker
000015:0x0021ba68:	new	Event_OnParticleUnParented, ScriptInvoker
000015:0x0021ba88:	rts
ParticleBase::ParticleBase()
000073:0x0021ba90:	new	m_EventInvokers, ParticleEvents
000073:0x0021bab0:	rts
ParticleBase::IsParticle()
000081:0x0021bab8:	imove	#return, 0x000001
000081:0x0021bac8:	rts
000081:0x0021bad0:	rts
ParticleBase::PlayParticle()
000098:0x0021bb28:	icall	ErrorEx(_s'Not implemented.', _i1)
000098:0x0021bb38:	rts
ParticleBase::PlayParticleEx()
000109:0x0021bb40:	icall	ErrorEx(_s'Not implemented.', _i1)
000110:0x0021bb50:	imove	#return, 0x000000
000110:0x0021bb60:	rts
000110:0x0021bb68:	rts
ParticleBase::StopParticle()
000120:0x0021bb70:	icall	ErrorEx(_s'Not implemented.', _i1)
000121:0x0021bb80:	imove	#return, 0x000000
000121:0x0021bb90:	rts
000121:0x0021bb98:	rts
ParticleBase::ResetParticle()
000130:0x0021bba0:	icall	ErrorEx(_s'Not implemented.', _i1)
000131:0x0021bbb0:	imove	#return, 0x000000
000131:0x0021bbc0:	rts
000131:0x0021bbc8:	rts
ParticleBase::RestartParticle()
000140:0x0021bbd0:	icall	ErrorEx(_s'Not implemented.', _i1)
000141:0x0021bbe0:	imove	#return, 0x000000
000141:0x0021bbf0:	rts
000141:0x0021bbf8:	rts
ParticleBase::IsParticlePlaying()
000150:0x0021bc00:	icall	ErrorEx(_s'Not implemented.', _i1)
000151:0x0021bc10:	imove	#return, 0x000000
000151:0x0021bc20:	rts
000151:0x0021bc28:	rts
ParticleBase::GetEvents()
000164:0x0021bc30:	movem	#return, m_EventInvokers
000164:0x0021bc40:	rts
000164:0x0021bc48:	rts
ParticleBase::OnParticleStart()
000181:0x0021bc50:	imove	m_IsPlaying, 0x000001
000182:0x0021bc60:	call	
000182:0x0021bc70:	movefm	@c00, #return
000182:0x0021bc80:	movefm	@c01, Event_OnParticleStart
000182:0x0021bc90:	icall	
000182:0x0021bcc0:	release	#return
000182:0x0021bcc8:	rts
ParticleBase::OnParticleStop()
000190:0x0021bcd0:	imove	m_IsPlaying, 0x000000
000191:0x0021bce0:	call	
000191:0x0021bcf0:	movefm	@c00, #return
000191:0x0021bd00:	movefm	@c01, Event_OnParticleStop
000191:0x0021bd10:	icall	
000191:0x0021bd40:	release	#return
000191:0x0021bd48:	rts
ParticleBase::OnParticleReset()
000199:0x0021bd50:	call	
000199:0x0021bd60:	movefm	@c00, #return
000199:0x0021bd70:	movefm	@c01, Event_OnParticleReset
000199:0x0021bd80:	icall	
000199:0x0021bdb0:	release	#return
000199:0x0021bdb8:	rts
ParticleBase::OnParticleEnd()
000208:0x0021bdc0:	call	
000208:0x0021bdd0:	movefm	@c00, #return
000208:0x0021bde0:	movefm	@c01, Event_OnParticleEnd
000208:0x0021bdf0:	icall	
000208:0x0021be20:	release	#return
000208:0x0021be28:	rts
ParticleBase::OnParticleParented()
000216:0x0021be30:	call	
000216:0x0021be40:	movefm	@c00, #return
000216:0x0021be50:	movefm	@c01, Event_OnParticleParented
000216:0x0021be60:	icall	
000216:0x0021be90:	release	#return
000216:0x0021be98:	rts
ParticleBase::OnParticleUnParented()
000224:0x0021bea0:	call	
000224:0x0021beb0:	movefm	@c00, #return
000224:0x0021bec0:	movefm	@c01, Event_OnParticleUnParented
000224:0x0021bed0:	icall	
000224:0x0021bf00:	release	#return
000224:0x0021bf08:	rts
VONManagerBase::VONManagerBase()
//scripts/3_Game/vonmanager.c
000009:0x0021bf10:	imove	m_VoNToggled, 0x000000
000009:0x0021bf20:	rts
VONManagerBase::IsVonToggled()
000020:0x0021bf28:	move	#return, m_VoNToggled
000020:0x0021bf38:	rts
000020:0x0021bf40:	rts
VONManagerImplementation::VONManagerImplementation()
000028:0x0021bf48:	new	m_OnVonStateEvent, ScriptInvoker
000029:0x0021bf68:	new	m_OnPartyChatChangedEvent, ScriptInvoker
000029:0x0021bf88:	rts
VONManagerImplementation::~VONManagerImplementation()
000034:0x0021bf90:	movefm	[0xb425b340], m_OnVonStateEvent
000034:0x0021bfa0:	ncalli	ScriptInvoker.Clear()
000035:0x0021bfa8:	movefm	[0xb425b340], m_OnPartyChatChangedEvent
000035:0x0021bfb8:	ncalli	ScriptInvoker.Clear()
000035:0x0021bfc0:	rts
VONManagerImplementation::HideVoiceNotification()
000043:0x0021c018:	ncall	GetGame()
000043:0x0021c020:	call	
000043:0x0021c030:	cmpi	#return, _i0
000043:0x0021c040:	beq	0x21c050
000045:0x0021c048:	rts
000048:0x0021c050:	ncall	GetGame()
000048:0x0021c058:	ncalli	CGame.GetMission()
000048:0x0021c060:	movec	mission, #return
000049:0x0021c070:	call	
000049:0x0021c080:	ncalli	ImageWidget.Show(false, _i1)
000049:0x0021c090:	release	#return
000050:0x0021c098:	call	
000050:0x0021c0a8:	rts
VONManagerImplementation::ShowVoiceNotification()
000060:0x0021c390:	ncall	GetGame()
000060:0x0021c398:	call	
000060:0x0021c3a8:	cmpi	#return, _i0
000060:0x0021c3b8:	beq	0x21c3c8
000062:0x0021c3c0:	rts
000065:0x0021c3c8:	ncall	GetGame()
000065:0x0021c3d0:	ncalli	CGame.GetMission()
000065:0x0021c3d8:	movec	mission, #return
000066:0x0021c3e8:	call	
000066:0x0021c3f8:	movem	micIcon, #return
000066:0x0021c408:	release	#return
000067:0x0021c410:	call	
000067:0x0021c420:	movem	micTimer, #return
000067:0x0021c430:	release	#return
000068:0x0021c438:	call	
000068:0x0021c448:	movem	voiceLeveWidgets, #return
000068:0x0021c458:	release	#return
000069:0x0021c460:	call	
000069:0x0021c470:	movem	voiceLevelTimers, #return
000069:0x0021c480:	release	#return
000072:0x0021c488:	call	
000073:0x0021c498:	ncalli	ImageWidget.SetAlpha(_f1.000000)
000074:0x0021c4a8:	ncalli	ImageWidget.Show(true, _i1)
000076:0x0021c4b8:	cmpi	fading, _i0
000076:0x0021c4c8:	beq	0x21c4e8
000078:0x0021c4d0:	call	
000082:0x0021c4e8:	imove	n, 0x000000
000082:0x0021c4f8:	jump	0x21c518
000082:0x0021c500:	move	@m00, n
000082:0x0021c510:	inc	n
000082:0x0021c518:	ncalli	map<int,ImageWidget>.Count()
000082:0x0021c520:	cmpi	n, #return
000082:0x0021c530:	bge	0x21c640
000084:0x0021c538:	icall	
000084:0x0021c548:	move	voiceKey, #return
000085:0x0021c558:	icall	
000085:0x0021c568:	movetm	voiceWidget, #return
000088:0x0021c578:	icall	
000088:0x0021c588:	movetm	timer, #return
000089:0x0021c598:	call	
000092:0x0021c5a8:	cmpi	voiceKey, level
000092:0x0021c5b8:	bgt	0x21c618
000094:0x0021c5c0:	ncalli	ImageWidget.SetAlpha(_f1.000000)
000095:0x0021c5d0:	ncalli	ImageWidget.Show(true, _i1)
000097:0x0021c5e0:	cmpi	fading, _i0
000097:0x0021c5f0:	beq	0x21c610
000099:0x0021c5f8:	call	
000099:0x0021c610:	jump	0x21c628
000104:0x0021c618:	ncalli	ImageWidget.Show(false, _i1)
000104:0x0021c628:	release	voiceWidget
000104:0x0021c630:	release	timer
000104:0x0021c638:	jump	0x21c500
000104:0x0021c640:	release	micIcon
000104:0x0021c648:	release	micTimer
000104:0x0021c650:	release	voiceLeveWidgets
000104:0x0021c658:	release	voiceLevelTimers
000104:0x0021c660:	rts
VONManagerImplementation::HandleInput()
000122:0x0021c6e0:	ncall	GetGame()
000122:0x0021c6e8:	ncalli	CGame.GetVoiceLevel(_c0)
000122:0x0021c6f8:	move	oldLevel, #return
000123:0x0021c708:	imove	newLevel, 0xffffffff
000125:0x0021c718:	ncalli	Input.LocalPress_ID(UAVoiceDistanceUp, false)
000125:0x0021c728:	cmpi	#return, _i0
000125:0x0021c738:	beq	0x21c7a0
000127:0x0021c740:	addi	@m01, oldLevel, _i1
000127:0x0021c750:	move	@m00, @m01
000127:0x0021c760:	imove	@m02, 0x000003
000127:0x0021c770:	move	@m01, @m02
000127:0x0021c780:	modi	@m00, @m00, @m01
000127:0x0021c790:	move	newLevel, @m00
000130:0x0021c7a0:	ncalli	Input.LocalPress_ID(UAVoiceDistanceDown, false)
000130:0x0021c7b0:	cmpi	#return, _i0
000130:0x0021c7c0:	beq	0x21c810
000132:0x0021c7c8:	subi	@m00, oldLevel, _i1
000132:0x0021c7d8:	move	newLevel, @m00
000133:0x0021c7e8:	cmpi	newLevel, VoiceLevelWhisper
000133:0x0021c7f8:	bge	0x21c810
000135:0x0021c800:	imove	newLevel, 0x000002
000139:0x0021c810:	cmpi	newLevel, _i-1
000139:0x0021c820:	beq	0x21c938
000141:0x0021c828:	cmpi	m_VoNToggled, _i0
000141:0x0021c838:	beq	0x21c8a8
000143:0x0021c840:	call	IsVoiceThresholdMinimum()
000143:0x0021c850:	cmpi	#return, _i0
000143:0x0021c860:	beq	0x21c888
000145:0x0021c868:	call	
000145:0x0021c880:	jump	0x21c8a0
000149:0x0021c888:	call	
000149:0x0021c8a0:	jump	0x21c920
000154:0x0021c8a8:	ncall	GetGame()
000154:0x0021c8b0:	ncalli	CGame.GetMission()
000154:0x0021c8b8:	call	
000154:0x0021c8c8:	cmpi	#return, _i0
000154:0x0021c8d8:	beq	0x21c8f8
000154:0x0021c8e0:	imove	@m00, 0x000000
000154:0x0021c8f0:	jump	0x21c908
000154:0x0021c8f8:	imove	@m00, 0x000001
000154:0x0021c908:	call	
000158:0x0021c920:	ncall	GetGame()
000158:0x0021c928:	ncalli	CGame.SetVoiceLevel(newLevel)
000158:0x0021c938:	rts
VONManagerImplementation::OnVOIPThresholdChanged()
000167:0x0021c968:	ncall	GetGame()
000167:0x0021c970:	ncalli	CGame.GetMission()
000167:0x0021c978:	movec	mission, #return
000170:0x0021c988:	cmpi	m_VoNToggled, _i0
000170:0x0021c998:	beq	0x21ca10
000172:0x0021c9a0:	call	IsVoiceThresholdMinimum()
000172:0x0021c9b0:	cmpi	#return, _i0
000172:0x0021c9c0:	beq	0x21ca00
000174:0x0021c9c8:	ncall	GetGame()
000174:0x0021c9d0:	ncalli	CGame.GetVoiceLevel(_c0)
000174:0x0021c9e0:	call	
000174:0x0021c9f8:	jump	0x21ca10
000178:0x0021ca00:	call	
000178:0x0021ca10:	rts
VONManagerImplementation::OnEvent()
000190:0x0021cb68:	ncall	GetGame()
000190:0x0021cb70:	ncalli	CGame.GetMission()
000190:0x0021cb78:	movec	mission, #return
000191:0x0021cb88:	movea	#switch, eventTypeId
000191:0x0021cb98:	movea	@m00, VONUserStartedTransmittingAudioEventTypeID
000191:0x0021cba8:	cmpc	@m00, #switch
000191:0x0021cbb8:	bne	0x21cc40
000196:0x0021cbc0:	cmpi	m_VoNToggled, _i0
000196:0x0021cbd0:	beq	0x21cc30
000198:0x0021cbd8:	call	IsVoiceThresholdMinimum()
000198:0x0021cbe8:	cmpi	#return, _i0
000198:0x0021cbf8:	bne	0x21cc30
000200:0x0021cc00:	ncall	GetGame()
000200:0x0021cc08:	ncalli	CGame.GetVoiceLevel(_c0)
000200:0x0021cc18:	call	
000203:0x0021cc30:	jump	0x21d138
000203:0x0021cc38:	jump	0x21cc68
000203:0x0021cc40:	movea	@m00, VONUserStoppedTransmittingAudioEventTypeID
000203:0x0021cc50:	cmpc	@m00, #switch
000203:0x0021cc60:	bne	0x21ccc8
000209:0x0021cc68:	cmpi	m_VoNToggled, _i0
000209:0x0021cc78:	beq	0x21ccb8
000211:0x0021cc80:	call	IsVoiceThresholdMinimum()
000211:0x0021cc90:	cmpi	#return, _i0
000211:0x0021cca0:	bne	0x21ccb8
000213:0x0021cca8:	call	
000216:0x0021ccb8:	jump	0x21d138
000216:0x0021ccc0:	jump	0x21ccf0
000216:0x0021ccc8:	movea	@m00, VONStateEventTypeID
000216:0x0021ccd8:	cmpc	@m00, #switch
000216:0x0021cce8:	bne	0x21cee8
000221:0x0021ccf0:	cmpc	mission, null
000221:0x0021cd00:	bne	0x21cd10
000223:0x0021cd08:	jump	0x21d138
000226:0x0021cd10:	movefm	@c02, params
000226:0x0021cd20:	icall	SafeCastType([0xb5b34968], @c01, @c02)
000226:0x0021cd38:	movetm	vonStateParams, @c01
000227:0x0021cd48:	movefm	@c00, vonStateParams
000227:0x0021cd58:	move	active, param1
000227:0x0021cd68:	call	
000228:0x0021cd78:	movefm	@c00, vonStateParams
000228:0x0021cd88:	move	m_VoNToggled, param2
000229:0x0021cd98:	ncall	GetGame()
000229:0x0021cda0:	ncalli	CGame.GetVoiceLevel(_c0)
000229:0x0021cdb0:	move	rangeLevel, #return
000231:0x0021cdc0:	call	
000231:0x0021cdd0:	cmpi	#return, _i0
000231:0x0021cde0:	beq	0x21ce88
000233:0x0021cde8:	cmpi	m_VoNToggled, _i0
000233:0x0021cdf8:	beq	0x21ce68
000235:0x0021ce00:	call	IsVoiceThresholdMinimum()
000235:0x0021ce10:	cmpi	#return, _i0
000235:0x0021ce20:	beq	0x21ce48
000237:0x0021ce28:	call	
000237:0x0021ce40:	jump	0x21ce60
000241:0x0021ce48:	call	
000241:0x0021ce60:	jump	0x21ce80
000246:0x0021ce68:	call	
000246:0x0021ce80:	jump	0x21ce98
000251:0x0021ce88:	call	
000254:0x0021ce98:	movefm	[0xb425b340], m_OnVonStateEvent
000254:0x0021cea8:	icall	
000255:0x0021ced8:	jump	0x21d138
000255:0x0021cee0:	jump	0x21cf10
000255:0x0021cee8:	movea	@m00, PartyChatStatusChangedEventTypeID
000255:0x0021cef8:	cmpc	@m00, #switch
000255:0x0021cf08:	bne	0x21cf60
000260:0x0021cf10:	movefm	[0xb425b340], m_OnPartyChatChangedEvent
000260:0x0021cf20:	icall	
000261:0x0021cf50:	jump	0x21d138
000261:0x0021cf58:	jump	0x21cf88
000261:0x0021cf60:	movea	@m00, VONStartSpeakingEventTypeID
000261:0x0021cf70:	cmpc	@m00, #switch
000261:0x0021cf80:	bne	0x21cff0
000267:0x0021cf88:	movefm	@c00, params
000267:0x0021cf98:	icall	CastTo(vonStartParams, @c00)
000267:0x0021cfa8:	cmpi	#return, _i0
000267:0x0021cfb8:	beq	0x21cfe0
000269:0x0021cfc0:	call	GetDayZGame()
000269:0x0021cfd0:	call	
000271:0x0021cfe0:	jump	0x21d138
000271:0x0021cfe8:	jump	0x21d018
000271:0x0021cff0:	movea	@m00, VONStopSpeakingEventTypeID
000271:0x0021d000:	cmpc	@m00, #switch
000271:0x0021d010:	bne	0x21d080
000277:0x0021d018:	movefm	@c00, params
000277:0x0021d028:	icall	CastTo(vonStopParams, @c00)
000277:0x0021d038:	cmpi	#return, _i0
000277:0x0021d048:	beq	0x21d070
000279:0x0021d050:	call	GetDayZGame()
000279:0x0021d060:	call	
000281:0x0021d070:	jump	0x21d138
000281:0x0021d078:	jump	0x21d0a8
000281:0x0021d080:	movea	@m00, MPSessionPlayerReadyEventTypeID
000281:0x0021d090:	cmpc	@m00, #switch
000281:0x0021d0a0:	bne	0x21d120
000286:0x0021d0a8:	cmpi	m_VoNToggled, _i0
000286:0x0021d0b8:	beq	0x21d118
000288:0x0021d0c0:	call	IsVoiceThresholdMinimum()
000288:0x0021d0d0:	cmpi	#return, _i0
000288:0x0021d0e0:	beq	0x21d118
000290:0x0021d0e8:	ncall	GetGame()
000290:0x0021d0f0:	ncalli	CGame.GetVoiceLevel(_c0)
000290:0x0021d100:	call	
000293:0x0021d118:	jump	0x21d138
000293:0x0021d120:	release	vonStateParams
000293:0x0021d128:	release	vonStartParams
000293:0x0021d130:	release	vonStopParams
000293:0x0021d138:	rts
VONManager::GetInstance()
000310:0x0021d140:	movem	#return, m_VONManager
000310:0x0021d150:	rts
000310:0x0021d158:	rts
VONManager::Init()
000318:0x0021d160:	delete	m_VONManager
000319:0x0021d168:	new	m_VONManager, VONManagerImplementation
000319:0x0021d188:	rts
VONManager::CleanupInstance()
000327:0x0021d190:	delete	m_VONManager
000328:0x0021d198:	new	m_VONManager, VONManagerBase
000328:0x0021d1b8:	rts
VONManager::IsVONToggled()
000337:0x0021d1c0:	call	
000337:0x0021d1d0:	move	#return, #return
000337:0x0021d1e0:	rts
000337:0x0021d1e8:	rts
VONManager::IsVoiceThresholdMinimum()
000346:0x0021d298:	new	gameOptions, GameOptions
000348:0x0021d2b8:	ncalli	GameOptions.GetOptionByType(_i43)
000348:0x0021d2c8:	icall	CastTo(noa, #return)
000350:0x0021d2d8:	ncalli	NumericOptionsAccess.ReadValue()
000350:0x0021d2e0:	move	@f00, #return
000350:0x0021d2f0:	ncall	GetGame()
000350:0x0021d2f8:	ncalli	CGame.GetSoundScene()
000350:0x0021d300:	ncalli	AbstractSoundScene.GetSilenceThreshold()
000350:0x0021d308:	cmpf	@f00, #return
000350:0x0021d318:	bgt	0x21d338
000350:0x0021d320:	imove	#return, 0x000001
000350:0x0021d330:	jump	0x21d348
000350:0x0021d338:	imove	#return, 0x000000
000350:0x0021d348:	release	gameOptions
000350:0x0021d350:	release	noa
000350:0x0021d358:	rts
000350:0x0021d360:	release	gameOptions
000350:0x0021d368:	release	noa
000350:0x0021d370:	rts
PPERequester_BurlapSackEffects::OnStart()
//scripts/3_Game/ppemanager\requesters\pperburlapsack.c
000005:0x0021d3a0:	call	
000007:0x0021d3b0:	call	
000008:0x0021d3d8:	call	
000009:0x0021d400:	call	
000010:0x0021d428:	new	@c01, array<float>
000010:0x0021d448:	pushc	@c01
000010:0x0021d450:	icall	
000010:0x0021d460:	icall	
000010:0x0021d470:	icall	
000010:0x0021d480:	icall	
000010:0x0021d490:	call	
000010:0x0021d4b0:	popc	@c01
000010:0x0021d4b8:	release	@c01
000012:0x0021d4c0:	ncall	GetGame()
000012:0x0021d4c8:	cmpc	#return, null
000012:0x0021d4d8:	beq	0x21d578
000012:0x0021d4e0:	ncall	GetGame()
000012:0x0021d4e8:	ncalli	CGame.GetMission()
000012:0x0021d4f0:	cmpc	#return, null
000012:0x0021d500:	beq	0x21d578
000012:0x0021d508:	ncall	GetGame()
000012:0x0021d510:	ncalli	CGame.GetMission()
000012:0x0021d518:	call	
000012:0x0021d528:	cmpcm	#return, null
000012:0x0021d538:	beq	0x21d578
000014:0x0021d540:	ncall	GetGame()
000014:0x0021d548:	ncalli	CGame.GetMission()
000014:0x0021d550:	call	
000014:0x0021d560:	call	
000014:0x0021d570:	release	#return
000014:0x0021d578:	release	#return
000014:0x0021d580:	rts
PPERequester_BurlapSackEffects::OnStop()
000020:0x0021d588:	call	
000022:0x0021d598:	ncall	GetGame()
000022:0x0021d5a0:	cmpc	#return, null
000022:0x0021d5b0:	beq	0x21d650
000022:0x0021d5b8:	ncall	GetGame()
000022:0x0021d5c0:	ncalli	CGame.GetMission()
000022:0x0021d5c8:	cmpc	#return, null
000022:0x0021d5d8:	beq	0x21d650
000022:0x0021d5e0:	ncall	GetGame()
000022:0x0021d5e8:	ncalli	CGame.GetMission()
000022:0x0021d5f0:	call	
000022:0x0021d600:	cmpcm	#return, null
000022:0x0021d610:	beq	0x21d650
000024:0x0021d618:	ncall	GetGame()
000024:0x0021d620:	ncalli	CGame.GetMission()
000024:0x0021d628:	call	
000024:0x0021d638:	call	
000024:0x0021d648:	release	#return
000024:0x0021d650:	release	#return
000024:0x0021d658:	rts
PPEGodRays::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppegodrays.c
000015:0x0021d660:	imove	#return, 0x000006
000015:0x0021d670:	rts
000015:0x0021d678:	rts
PPEGodRays::GetDefaultMaterialPath()
000020:0x0021d6a8:	moves	#return, _s'Graphics/Materials/postprocess/godrayssun'
000020:0x0021d6b8:	rts
000020:0x0021d6c0:	rts
PPEGodRays::RegisterMaterialParameters()
000025:0x0021d808:	call	
000026:0x0021d828:	call	
000027:0x0021d848:	call	
000028:0x0021d868:	call	
000029:0x0021d888:	call	
000029:0x0021d8a8:	rts
Backlit::OnInit()
//scripts/3_Game/effects\backlit\backlit.c
000113:0x0021d8d8:	ncalli	DayZGame.IsClient()
000113:0x0021d8e0:	cmpi	#return, _i0
000113:0x0021d8f0:	bne	0x21d918
000113:0x0021d8f8:	ncalli	DayZGame.IsMultiplayer()
000113:0x0021d900:	cmpi	#return, _i0
000113:0x0021d910:	bne	0x21d928
000114:0x0021d918:	imove	m_BacklitActive, 0x000001
000116:0x0021d928:	cmpi	m_BacklitActive, _i0
000116:0x0021d938:	beq	0x21d950
000117:0x0021d940:	icall	Print(_s'... Backlit Effects Enabled')
000117:0x0021d950:	rts
Backlit::LoadingAnim()
000123:0x0021db10:	cmpi	m_BacklitActive, _i0
000123:0x0021db20:	bne	0x21db30
000124:0x0021db28:	rts
000127:0x0021db30:	ncall	GetUApi()
000127:0x0021db38:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kD', EUABLAYER_LOADING, EUABACKLIT_ON, _i-65536)
000128:0x0021db50:	ncall	GetUApi()
000128:0x0021db58:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kA', EUABLAYER_LOADING, EUABACKLIT_ON, _i-3211264)
000129:0x0021db70:	ncall	GetUApi()
000129:0x0021db78:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kY', EUABLAYER_LOADING, EUABACKLIT_ON, _i-5308416)
000130:0x0021db90:	ncall	GetUApi()
000130:0x0021db98:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kZ', EUABLAYER_LOADING, EUABACKLIT_ON, _i-7405568)
000131:0x0021dbb0:	ncall	GetUApi()
000131:0x0021dbb8:	ncalli	UAInputAPI.Backlit_Animation(_s'Loading/', _f2.000000, _i-3618616, _i-16250872)
000132:0x0021dbd0:	ncall	GetUApi()
000132:0x0021dbd8:	ncalli	UAInputAPI.Backlit_ForceUpdate()
000132:0x0021dbe0:	rts
Backlit::MainMenu_OnShow()
000138:0x0021dc38:	cmpi	m_BacklitActive, _i0
000138:0x0021dc48:	bne	0x21dc58
000139:0x0021dc50:	rts
000142:0x0021dc58:	ncall	GetUApi()
000142:0x0021dc60:	ncalli	UAInputAPI.Backlit_Remove(EUABLAYER_ALL)
000143:0x0021dc70:	ncall	GetUApi()
000143:0x0021dc78:	ncalli	UAInputAPI.Backlit_Animation(_s'MainMenu/', _f2.000000, _i-65536, _i-16252928)
000144:0x0021dc90:	ncall	GetUApi()
000144:0x0021dc98:	ncalli	UAInputAPI.Backlit_ForceUpdate()
000144:0x0021dca0:	rts
Backlit::MainMenu_OnHide()
000150:0x0021dcf8:	cmpi	m_BacklitActive, _i0
000150:0x0021dd08:	bne	0x21dd18
000151:0x0021dd10:	rts
000153:0x0021dd18:	ncall	GetUApi()
000153:0x0021dd20:	ncalli	UAInputAPI.Backlit_Remove(EUABLAYER_ALL)
000154:0x0021dd30:	ncall	GetUApi()
000154:0x0021dd38:	ncalli	UAInputAPI.Backlit_Background(_i0, _i-14548992, _i-14540254)
000154:0x0021dd50:	rts
Backlit::OnEnterCar()
000160:0x0021dda8:	cmpi	m_BacklitActive, _i0
000160:0x0021ddb8:	bne	0x21ddc8
000161:0x0021ddc0:	rts
000163:0x0021ddc8:	ncall	GetUApi()
000163:0x0021ddd0:	ncalli	UAInputAPI.Backlit_Remove(EUABLAYER_ALL)
000164:0x0021dde0:	ncall	GetUApi()
000164:0x0021dde8:	ncalli	UAInputAPI.Backlit_Background(_i0, _i-14609918, _i-15661056)
000164:0x0021de00:	rts
Backlit::OnLeaveCar()
000170:0x0021de08:	cmpi	m_BacklitActive, _i0
000170:0x0021de18:	bne	0x21de28
000171:0x0021de20:	rts
000174:0x0021de28:	ncall	GetGame()
000174:0x0021de30:	ncalli	CGame.GetMission()
000174:0x0021de38:	call	
000174:0x0021de48:	cmpcm	#return, null
000174:0x0021de58:	beq	0x21dea8
000176:0x0021de60:	ncall	GetUApi()
000176:0x0021de68:	ncalli	UAInputAPI.Backlit_Remove(EUABLAYER_ALL)
000177:0x0021de78:	ncall	GetUApi()
000177:0x0021de80:	ncalli	UAInputAPI.Backlit_Background(_i0, _i-14548992, _i-14540254)
000179:0x0021de98:	call	
000179:0x0021dea8:	release	#return
000179:0x0021deb0:	rts
Backlit::OnSwimmingStart()
000186:0x0021df08:	cmpi	m_BacklitActive, _i0
000186:0x0021df18:	bne	0x21df28
000187:0x0021df20:	rts
000190:0x0021df28:	ncall	GetUApi()
000190:0x0021df30:	ncalli	UAInputAPI.Backlit_EmptyQueue()
000192:0x0021df38:	ncall	GetUApi()
000192:0x0021df40:	ncalli	UAInputAPI.Backlit_Animation(_s'Water/', _f0.000000, _i-16711681, _i-1)
000192:0x0021df58:	rts
Backlit::OnSwimmingStop()
000198:0x0021df60:	cmpi	m_BacklitActive, _i0
000198:0x0021df70:	bne	0x21df80
000199:0x0021df78:	rts
000201:0x0021df80:	ncall	GetGame()
000201:0x0021df88:	ncalli	CGame.GetMission()
000201:0x0021df90:	call	
000201:0x0021dfa0:	cmpcm	#return, null
000201:0x0021dfb0:	beq	0x21dfe8
000204:0x0021dfb8:	ncall	GetUApi()
000204:0x0021dfc0:	ncalli	UAInputAPI.Backlit_Background(_i0, _i-14548992, _i-14540254)
000206:0x0021dfd8:	call	
000206:0x0021dfe8:	release	#return
000206:0x0021dff0:	rts
Backlit::HintClear()
000213:0x0021dff8:	cmpi	m_BacklitActive, _i0
000213:0x0021e008:	bne	0x21e018
000214:0x0021e010:	rts
000217:0x0021e018:	ncall	GetUApi()
000217:0x0021e020:	ncalli	UAInputAPI.Backlit_Remove(EUABLAYER_HINTKEY)
000217:0x0021e030:	rts
Backlit::HintShow()
000223:0x0021e060:	cmpi	m_BacklitActive, _i0
000223:0x0021e070:	bne	0x21e080
000224:0x0021e078:	rts
000226:0x0021e080:	ncalli	UAInput.Backlit_Override(EUABLAYER_HINTKEY, _i-5263361)
000226:0x0021e090:	rts
Backlit::KeybindingClear()
000232:0x0021e098:	cmpi	m_BacklitActive, _i0
000232:0x0021e0a8:	bne	0x21e0b8
000233:0x0021e0b0:	rts
000235:0x0021e0b8:	ncall	GetUApi()
000235:0x0021e0c0:	ncalli	UAInputAPI.Backlit_Remove(EUABLAYER_ALL)
000235:0x0021e0d0:	rts
Backlit::KeybindingShow()
000241:0x0021e100:	cmpi	m_BacklitActive, _i0
000241:0x0021e110:	bne	0x21e120
000242:0x0021e118:	rts
000244:0x0021e120:	ncall	GetUApi()
000244:0x0021e128:	ncalli	UAInputAPI.Backlit_KeyByHash(keyHash, EUABLAYER_VISKEY, EUABACKLIT_FADEOUT_SLOW, _i-16776961)
000244:0x0021e140:	rts
Backlit::VisualiseHealth()
000250:0x0021e328:	ncall	GetUApi()
000250:0x0021e330:	movec	ua_api, #return
000252:0x0021e340:	imove	aColor, 0xff1fff1f
000253:0x0021e350:	imove	dColor, 0xff001f00
000255:0x0021e360:	cmpi	iLevel, _i0
000255:0x0021e370:	ble	0x21e398
000256:0x0021e378:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF1', EUABLAYER_HUMAN, EUABACKLIT_ON, aColor)
000256:0x0021e390:	jump	0x21e3b0
000258:0x0021e398:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF1', EUABLAYER_HUMAN, EUABACKLIT_ON, dColor)
000259:0x0021e3b0:	cmpi	iLevel, _i1
000259:0x0021e3c0:	ble	0x21e3e8
000260:0x0021e3c8:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF2', EUABLAYER_HUMAN, EUABACKLIT_ON, aColor)
000260:0x0021e3e0:	jump	0x21e400
000262:0x0021e3e8:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF2', EUABLAYER_HUMAN, EUABACKLIT_ON, dColor)
000263:0x0021e400:	cmpi	iLevel, _i2
000263:0x0021e410:	ble	0x21e438
000264:0x0021e418:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF3', EUABLAYER_HUMAN, EUABACKLIT_ON, aColor)
000264:0x0021e430:	jump	0x21e450
000266:0x0021e438:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF3', EUABLAYER_HUMAN, EUABACKLIT_ON, dColor)
000267:0x0021e450:	cmpi	iLevel, _i3
000267:0x0021e460:	ble	0x21e488
000268:0x0021e468:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF4', EUABLAYER_HUMAN, EUABACKLIT_ON, aColor)
000268:0x0021e480:	jump	0x21e4a0
000270:0x0021e488:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF4', EUABLAYER_HUMAN, EUABACKLIT_ON, dColor)
000270:0x0021e4a0:	rts
Backlit::VisualiseBlood()
000288:0x0021e610:	ncall	GetUApi()
000288:0x0021e618:	movec	ua_api, #return
000290:0x0021e628:	imove	aColor, 0xffff1f1f
000291:0x0021e638:	imove	dColor, 0xff1f0000
000293:0x0021e648:	cmpi	iLevel, _i0
000293:0x0021e658:	ble	0x21e680
000294:0x0021e660:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF5', EUABLAYER_HUMAN, EUABACKLIT_ON, aColor)
000294:0x0021e678:	jump	0x21e698
000296:0x0021e680:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF5', EUABLAYER_HUMAN, EUABACKLIT_ON, dColor)
000297:0x0021e698:	cmpi	iLevel, _i1
000297:0x0021e6a8:	ble	0x21e6d0
000298:0x0021e6b0:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF6', EUABLAYER_HUMAN, EUABACKLIT_ON, aColor)
000298:0x0021e6c8:	jump	0x21e6e8
000300:0x0021e6d0:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF6', EUABLAYER_HUMAN, EUABACKLIT_ON, dColor)
000301:0x0021e6e8:	cmpi	iLevel, _i2
000301:0x0021e6f8:	ble	0x21e720
000302:0x0021e700:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF7', EUABLAYER_HUMAN, EUABACKLIT_ON, aColor)
000302:0x0021e718:	jump	0x21e738
000304:0x0021e720:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF7', EUABLAYER_HUMAN, EUABACKLIT_ON, dColor)
000305:0x0021e738:	cmpi	iLevel, _i3
000305:0x0021e748:	ble	0x21e770
000306:0x0021e750:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF8', EUABLAYER_HUMAN, EUABACKLIT_ON, aColor)
000306:0x0021e768:	jump	0x21e788
000308:0x0021e770:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kF8', EUABLAYER_HUMAN, EUABACKLIT_ON, dColor)
000308:0x0021e788:	rts
Backlit::SetHealth()
000332:0x0021e7b8:	mulf	health, fHealth, _f0.010000
000333:0x0021e7c8:	citf	@f01, _i4
000333:0x0021e7d8:	mulf	@f00, health, @f01
000333:0x0021e7e8:	cfti	@m00, @f00
000333:0x0021e7f8:	move	m_HealthNew, @m00
000333:0x0021e808:	rts
Backlit::SetBlood()
000338:0x0021e888:	mulf	blood, fBlood, _f0.000200
000339:0x0021e898:	citf	@f01, _i4
000339:0x0021e8a8:	mulf	@f00, blood, @f01
000339:0x0021e8b8:	cfti	@m00, @f00
000339:0x0021e8c8:	move	m_BloodNew, @m00
000339:0x0021e8d8:	rts
Backlit::UpdatePlayer()
000344:0x0021ea98:	cmpi	m_BacklitActive, _i0
000344:0x0021eaa8:	bne	0x21eab8
000345:0x0021eab0:	rts
000348:0x0021eab8:	cmpi	bForce, _i0
000348:0x0021eac8:	beq	0x21eaf0
000350:0x0021ead0:	imove	m_HealthBefore, 0xffffffff
000351:0x0021eae0:	imove	m_BloodBefore, 0xffffffff
000355:0x0021eaf0:	cmpi	m_HealthNew, m_HealthBefore
000355:0x0021eb00:	bne	0x21eb28
000355:0x0021eb08:	cmpi	m_BloodNew, m_BloodBefore
000355:0x0021eb18:	bne	0x21eb28
000356:0x0021eb20:	rts
000359:0x0021eb28:	ncall	GetUApi()
000359:0x0021eb30:	ncalli	UAInputAPI.Backlit_Remove(EUABLAYER_ALL)
000362:0x0021eb40:	ncall	GetUApi()
000362:0x0021eb48:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kW', EUABLAYER_CUSTOM, EUABACKLIT_ON, _i-16776961)
000363:0x0021eb60:	ncall	GetUApi()
000363:0x0021eb68:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kA', EUABLAYER_CUSTOM, EUABACKLIT_ON, _i-16777009)
000364:0x0021eb80:	ncall	GetUApi()
000364:0x0021eb88:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kS', EUABLAYER_CUSTOM, EUABACKLIT_ON, _i-16777041)
000365:0x0021eba0:	ncall	GetUApi()
000365:0x0021eba8:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kD', EUABLAYER_CUSTOM, EUABACKLIT_ON, _i-16777073)
000367:0x0021ebc0:	ncall	GetUApi()
000367:0x0021ebc8:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kX', EUABLAYER_CUSTOM, EUABACKLIT_ON, _i-12632257)
000368:0x0021ebe0:	ncall	GetUApi()
000368:0x0021ebe8:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kC', EUABLAYER_CUSTOM, EUABACKLIT_ON, _i-12632257)
000370:0x0021ec00:	ncall	GetUApi()
000370:0x0021ec08:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kQ', EUABLAYER_CUSTOM, EUABACKLIT_ON, _i-8421617)
000371:0x0021ec20:	ncall	GetUApi()
000371:0x0021ec28:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kE', EUABLAYER_CUSTOM, EUABACKLIT_ON, _i-8421617)
000374:0x0021ec40:	move	iLevel, m_HealthNew
000374:0x0021ec50:	call	
000376:0x0021ec60:	move	iLevel, m_BloodNew
000376:0x0021ec70:	call	
000379:0x0021ec80:	ncall	GetUApi()
000379:0x0021ec88:	ncalli	UAInputAPI.Backlit_Background(_i0, _i-14548992, _i-14540254)
000382:0x0021eca0:	move	m_BloodBefore, m_BloodNew
000383:0x0021ecb0:	move	m_HealthBefore, m_HealthNew
000383:0x0021ecc0:	rts
Backlit::RefreshVehicleLayout()
000392:0x0021f070:	cmpi	m_BacklitActive, _i0
000392:0x0021f080:	bne	0x21f090
000393:0x0021f088:	rts
000395:0x0021f090:	ncall	GetUApi()
000395:0x0021f098:	movec	ua_api, #return
000397:0x0021f0a8:	cmpi	m_GearBefore, iGear
000397:0x0021f0b8:	beq	0x21f320
000399:0x0021f0c0:	move	m_GearBefore, iGear
000401:0x0021f0d0:	imove	activeColor, 0xff3fff3f
000402:0x0021f0e0:	imove	dimmColor, 0xff0f3f0f
000404:0x0021f0f0:	cmpi	iGear, _i0
000404:0x0021f100:	bne	0x21f128
000405:0x0021f108:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kR', EUABLAYER_CAR, EUABACKLIT_ON, activeColor)
000405:0x0021f120:	jump	0x21f140
000407:0x0021f128:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kR', EUABLAYER_CAR, EUABACKLIT_ON, dimmColor)
000409:0x0021f140:	cmpi	iGear, _i1
000409:0x0021f150:	bne	0x21f178
000410:0x0021f158:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kN', EUABLAYER_CAR, EUABACKLIT_ON, activeColor)
000410:0x0021f170:	jump	0x21f190
000412:0x0021f178:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kN', EUABLAYER_CAR, EUABACKLIT_ON, dimmColor)
000414:0x0021f190:	cmpi	iGear, _i2
000414:0x0021f1a0:	bne	0x21f1c8
000415:0x0021f1a8:	ncalli	UAInputAPI.Backlit_KeyByName(_s'k1', EUABLAYER_CAR, EUABACKLIT_ON, activeColor)
000415:0x0021f1c0:	jump	0x21f1e0
000417:0x0021f1c8:	ncalli	UAInputAPI.Backlit_KeyByName(_s'k1', EUABLAYER_CAR, EUABACKLIT_ON, dimmColor)
000419:0x0021f1e0:	cmpi	iGear, _i3
000419:0x0021f1f0:	bne	0x21f218
000420:0x0021f1f8:	ncalli	UAInputAPI.Backlit_KeyByName(_s'k2', EUABLAYER_CAR, EUABACKLIT_ON, activeColor)
000420:0x0021f210:	jump	0x21f230
000422:0x0021f218:	ncalli	UAInputAPI.Backlit_KeyByName(_s'k2', EUABLAYER_CAR, EUABACKLIT_ON, dimmColor)
000424:0x0021f230:	cmpi	iGear, _i4
000424:0x0021f240:	bne	0x21f268
000425:0x0021f248:	ncalli	UAInputAPI.Backlit_KeyByName(_s'k3', EUABLAYER_CAR, EUABACKLIT_ON, activeColor)
000425:0x0021f260:	jump	0x21f280
000427:0x0021f268:	ncalli	UAInputAPI.Backlit_KeyByName(_s'k3', EUABLAYER_CAR, EUABACKLIT_ON, dimmColor)
000429:0x0021f280:	cmpi	iGear, _i5
000429:0x0021f290:	bne	0x21f2b8
000430:0x0021f298:	ncalli	UAInputAPI.Backlit_KeyByName(_s'k4', EUABLAYER_CAR, EUABACKLIT_ON, activeColor)
000430:0x0021f2b0:	jump	0x21f2d0
000432:0x0021f2b8:	ncalli	UAInputAPI.Backlit_KeyByName(_s'k4', EUABLAYER_CAR, EUABACKLIT_ON, dimmColor)
000434:0x0021f2d0:	cmpi	iGear, _i6
000434:0x0021f2e0:	bne	0x21f308
000435:0x0021f2e8:	ncalli	UAInputAPI.Backlit_KeyByName(_s'k5', EUABLAYER_CAR, EUABACKLIT_ON, activeColor)
000435:0x0021f300:	jump	0x21f320
000437:0x0021f308:	ncalli	UAInputAPI.Backlit_KeyByName(_s'k5', EUABLAYER_CAR, EUABACKLIT_ON, dimmColor)
000441:0x0021f320:	cmpi	bCEL, m_CELBefore
000441:0x0021f330:	beq	0x21f398
000443:0x0021f338:	move	m_CELBefore, bCEL
000445:0x0021f348:	cmpi	bCEL, _i0
000445:0x0021f358:	beq	0x21f380
000446:0x0021f360:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kC', EUABLAYER_CAR, EUABACKLIT_ON, _i-61681)
000446:0x0021f378:	jump	0x21f398
000448:0x0021f380:	ncalli	UAInputAPI.Backlit_KeyByName(_s'kC', EUABLAYER_CAR, EUABACKLIT_NONE, _i-16777216)
000448:0x0021f398:	rts
Backlit::Backlit()
000104:0x0021f3a0:	imove	m_HealthBefore, 0xffffffff
000104:0x0021f3b0:	imove	m_BloodBefore, 0xffffffff
000104:0x0021f3c0:	imove	m_HealthNew, 0x000000
000104:0x0021f3d0:	imove	m_BloodNew, 0x000000
000104:0x0021f3e0:	imove	m_GearBefore, 0x000000
000104:0x0021f3f0:	imove	m_CELBefore, 0x000000
000104:0x0021f400:	rts
HandStableState::HandStableState()
//scripts/3_Game/systems\inventory\handstablestate.c
000008:0x0021f408:	move	m_AnimState, anim_state
000008:0x0021f418:	rts
HandStableState::OnEntry()
000014:0x0021f420:	call	
000015:0x0021f430:	call	
000015:0x0021f440:	rts
HandStableState::OnUpdate()
000021:0x0021f448:	call	
000022:0x0021f458:	call	
000022:0x0021f468:	rts
HandStableState::OnAbort()
000026:0x0021f470:	call	
000026:0x0021f480:	rts
HandStableState::OnExit()
000031:0x0021f488:	call	
000031:0x0021f498:	rts
HandStableState::IsIdle()
000034:0x0021f4a0:	imove	#return, 0x000001
000034:0x0021f4b0:	rts
000034:0x0021f4b8:	rts
HandStableState::GetCurrentStateID()
000036:0x0021f4c0:	imove	#return, 0x000000
000036:0x0021f4d0:	rts
000036:0x0021f4d8:	rts
HandStableState::HasEntityInHands()
000039:0x0021f4e0:	imove	#return, 0x000000
000039:0x0021f4f0:	rts
000039:0x0021f4f8:	rts
ArrowManagerBase::ArrowManagerBase()
//scripts/3_Game/systems\arrowmanager\arrowmanagerbase.c
000009:0x0021f500:	movem	m_Owner, owner
000010:0x0021f510:	new	m_Arrows, array<EntityAI>
000010:0x0021f530:	rts
ArrowManagerBase::AddArrow()
000015:0x0021f538:	movefm	@c00, arrow
000015:0x0021f548:	movefm	[0xb5b727b0], m_Arrows
000015:0x0021f558:	icall	
000015:0x0021f568:	rts
ArrowManagerBase::RemoveArrow()
000020:0x0021f570:	movefm	[0xb5b727b0], m_Arrows
000020:0x0021f580:	call	
000020:0x0021f590:	rts
ArrowManagerBase::ClearArrows()
000025:0x0021f638:	movem	#array, m_Arrows
000025:0x0021f648:	ncalli	array<EntityAI>.Count()
000025:0x0021f650:	move	#cnt, #return
000025:0x0021f660:	imove	#key, 0x000000
000025:0x0021f670:	jump	0x21f680
000025:0x0021f678:	inc	#key
000025:0x0021f680:	cmpi	#key, #cnt
000025:0x0021f690:	bge	0x21f6e8
000025:0x0021f698:	icall	
000025:0x0021f6a8:	movetm	arrow, #return
000027:0x0021f6b8:	cmpcm	arrow, null
000027:0x0021f6c8:	beq	0x21f6e0
000028:0x0021f6d0:	call	
000028:0x0021f6e0:	jump	0x21f678
000028:0x0021f6e8:	release	#array
000028:0x0021f6f0:	release	arrow
000031:0x0021f6f8:	movefm	[0xb5b727b0], m_Arrows
000031:0x0021f708:	ncalli	array<EntityAI>.Clear()
000031:0x0021f710:	rts
ArrowManagerBase::GetArrowsCount()
000036:0x0021f718:	movefm	[0xb5b727b0], m_Arrows
000036:0x0021f728:	ncalli	array<EntityAI>.Count()
000036:0x0021f730:	move	#return, #return
000036:0x0021f740:	rts
000036:0x0021f748:	rts
ArrowManagerBase::DropArrow()
000041:0x0021f830:	movefm	[0xb5b727b0], m_Arrows
000041:0x0021f840:	ncalli	array<EntityAI>.Count()
000041:0x0021f848:	move	@m00, #return
000041:0x0021f858:	cmpi	@m00, index
000041:0x0021f868:	ble	0x21f960
000043:0x0021f870:	movefm	[0xb5b727b0], m_Arrows
000043:0x0021f880:	icall	
000043:0x0021f890:	movetm	arrow, #return
000044:0x0021f8a0:	ncalli	EntityAI.GetPosition()
000044:0x0021f8a8:	movev	pos, #return
000046:0x0021f8b8:	movefm	[0xd3173818], m_Owner
000046:0x0021f8c8:	movefm	[0xd3173840], arrow
000046:0x0021f8d8:	ncall	RemoveChild([0xd3173818], [0xd3173840], _i0)
000049:0x0021f8f0:	call	MatrixIdentity4(m4)
000050:0x0021f900:	ctv	m4[_i3], pos
000052:0x0021f910:	ncalli	EntityAI.PlaceOnSurfaceRotated(m4, pos, _f0.000000, _f0.000000, _f0.000000, _i0)
000054:0x0021f930:	movefm	[0xd3172f58], arrow
000054:0x0021f940:	ncall	SetTransform([0xd3172f58], m4)
000055:0x0021f950:	ncalli	EntityAI.PlaceOnSurface()
000055:0x0021f958:	release	arrow
000055:0x0021f960:	rts
ArrowManagerBase::DropFirstArrow()
000061:0x0021f968:	call	
000061:0x0021f978:	rts
ArrowManagerBase::DropAllArrows()
000066:0x0021f9a8:	movefm	[0xb5b727b0], m_Arrows
000066:0x0021f9b8:	ncalli	array<EntityAI>.Count()
000066:0x0021f9c0:	subi	i, #return, _i1
000066:0x0021f9d0:	jump	0x21f9f0
000066:0x0021f9d8:	move	@m00, i
000066:0x0021f9e8:	dec	i
000066:0x0021f9f0:	cmpi	i, _i0
000066:0x0021fa00:	blt	0x21fa20
000068:0x0021fa08:	call	
000068:0x0021fa18:	jump	0x21f9d8
000068:0x0021fa20:	rts
ArrowManagerBase::GetArrow()
000074:0x0021fa28:	movefm	[0xb5b727b0], m_Arrows
000074:0x0021fa38:	ncalli	array<EntityAI>.Count()
000074:0x0021fa40:	move	@m00, #return
000074:0x0021fa50:	cmpi	@m00, index
000074:0x0021fa60:	ble	0x21faa0
000076:0x0021fa68:	movefm	[0xb5b727b0], m_Arrows
000076:0x0021fa78:	icall	
000076:0x0021fa88:	movetm	#return, #return
000076:0x0021fa98:	rts
000079:0x0021faa0:	movetm	#return, null
000079:0x0021fab0:	rts
000079:0x0021fab8:	rts
ArrowManagerBase::GetFirstArrow()
000084:0x0021fac0:	movefm	[0xb5b727b0], m_Arrows
000084:0x0021fad0:	ncalli	array<EntityAI>.Count()
000084:0x0021fad8:	cmpi	#return, _i0
000084:0x0021fae8:	beq	0x21fb28
000086:0x0021faf0:	movefm	[0xb5b727b0], m_Arrows
000086:0x0021fb00:	icall	
000086:0x0021fb10:	movetm	#return, #return
000086:0x0021fb20:	rts
000089:0x0021fb28:	movetm	#return, null
000089:0x0021fb38:	rts
000089:0x0021fb40:	rts
ArrowManagerBase::AcquireFirstArrow()
000094:0x0021fb70:	call	
000094:0x0021fb80:	movem	entity, #return
000094:0x0021fb90:	release	#return
000095:0x0021fb98:	movefm	[0xd3173818], m_Owner
000095:0x0021fba8:	movefm	[0xd3173840], entity
000095:0x0021fbb8:	ncall	RemoveChild([0xd3173818], [0xd3173840], keepTransform)
000096:0x0021fbd0:	movem	#return, entity
000096:0x0021fbe0:	release	entity
000096:0x0021fbe8:	rts
000096:0x0021fbf0:	release	entity
000096:0x0021fbf8:	rts
NotificationRuntimeData::NotificationRuntimeData()
//scripts/3_Game/client\notifications\notificationsystem.c
000023:0x0021fc00:	addf	@f00, time, NOTIFICATION_FADE_TIME
000023:0x0021fc10:	move	m_NotificationTime, @f00
000024:0x0021fc20:	movem	m_StaticData, data
000025:0x0021fc30:	cmps	detail_text, _s''
000025:0x0021fc40:	beq	0x21fc60
000026:0x0021fc48:	moves	m_DetailText, detail_text
000026:0x0021fc58:	jump	0x21fc90
000028:0x0021fc60:	movefm	[0xb5b3e7f0], m_StaticData
000028:0x0021fc70:	movec	@c00, [0xb5b3e7f0]
000028:0x0021fc80:	moves	m_DetailText, m_DescriptionText
000028:0x0021fc90:	rts
NotificationRuntimeData::SetTime()
000033:0x0021fc98:	move	m_NotificationTime, time
000033:0x0021fca8:	rts
NotificationRuntimeData::GetTime()
000038:0x0021fcb0:	move	#return, m_NotificationTime
000038:0x0021fcc0:	rts
000038:0x0021fcc8:	rts
NotificationRuntimeData::GetIcon()
000043:0x0021fcd0:	movefm	[0xb5b3e7f0], m_StaticData
000043:0x0021fce0:	movec	@c00, [0xb5b3e7f0]
000043:0x0021fcf0:	moves	#return, m_Icon
000043:0x0021fd00:	rts
000043:0x0021fd08:	rts
NotificationRuntimeData::GetTitleText()
000048:0x0021fd10:	movefm	[0xb5b3e7f0], m_StaticData
000048:0x0021fd20:	movec	@c00, [0xb5b3e7f0]
000048:0x0021fd30:	moves	#return, m_TitleText
000048:0x0021fd40:	rts
000048:0x0021fd48:	rts
NotificationRuntimeData::GetDetailText()
000053:0x0021fd50:	moves	#return, m_DetailText
000053:0x0021fd60:	rts
000053:0x0021fd68:	rts
NotificationSystem::InitInstance()
000073:0x0021fd70:	cmpcm	m_Instance, null
000073:0x0021fd80:	bne	0x21fdb8
000075:0x0021fd88:	new	m_Instance, NotificationSystem
000076:0x0021fda8:	call	LoadNotificationData()
000076:0x0021fdb8:	rts
NotificationSystem::CleanupInstance()
000082:0x0021fdc0:	movetm	m_Instance, null
000082:0x0021fdd0:	rts
NotificationSystem::GetInstance()
000087:0x0021fdd8:	movem	#return, m_Instance
000087:0x0021fde8:	rts
000087:0x0021fdf0:	rts
NotificationSystem::NotificationSystem()
000090:0x0021fdf8:	new	m_OnNotificationAdded, ScriptInvoker
000090:0x0021fe18:	new	m_OnNotificationRemoved, ScriptInvoker
000093:0x0021fe38:	new	m_TimeArray, array<@NotificationRuntimeData>
000094:0x0021fe58:	new	m_DeferredArray, array<@NotificationRuntimeData>
000094:0x0021fe78:	rts
NotificationSystem::SendNotificationToPlayerExtended()
000108:0x0021fe80:	cmpcm	player, null
000108:0x0021fe90:	beq	0x21fec0
000110:0x0021fe98:	ncalli	Man.GetIdentity()
000110:0x0021fea0:	call	SendNotificationToPlayerIdentityExtended(#return, show_time, title_text, detail_text, icon)
000110:0x0021fec0:	rts
NotificationSystem::SendNotificationToPlayerIdentityExtended()
000124:0x0021ff18:	new	rpc, ScriptRPC
000126:0x0021ff38:	icall	
000127:0x0021ff48:	icall	
000128:0x0021ff58:	icall	
000129:0x0021ff68:	icall	
000131:0x0021ff78:	movec	[0xb5c2e598], null
000131:0x0021ff88:	movefm	[0xb5c2e610], player
000131:0x0021ff98:	ncalli	ScriptRPC.Send([0xb5c2e598], RPC_SEND_NOTIFICATION_EXTENDED, true, [0xb5c2e610])
000131:0x0021ffb0:	release	rpc
000131:0x0021ffb8:	rts
NotificationSystem::SendNotificationToPlayer()
000143:0x0021ffc0:	cmpcm	player, null
000143:0x0021ffd0:	beq	0x220000
000145:0x0021ffd8:	ncalli	Man.GetIdentity()
000145:0x0021ffe0:	call	SendNotificationToPlayerIdentity(#return, type, show_time, detail_text)
000145:0x00220000:	rts
NotificationSystem::SendNotificationToPlayerIdentity()
000158:0x00220030:	new	rpc, ScriptRPC
000160:0x00220050:	icall	
000161:0x00220060:	icall	
000162:0x00220070:	icall	
000164:0x00220080:	movec	[0xb5c2e598], null
000164:0x00220090:	movefm	[0xb5c2e610], player
000164:0x002200a0:	ncalli	ScriptRPC.Send([0xb5c2e598], RPC_SEND_NOTIFICATION, true, [0xb5c2e610])
000164:0x002200b8:	release	rpc
000164:0x002200c0:	rts
NotificationSystem::AddNotification()
000175:0x00220170:	movefm	@c00, m_Instance
000175:0x00220180:	movefm	[0xb5bb8a38], m_TimeArray
000175:0x00220190:	ncalli	array<@NotificationRuntimeData>.Count()
000175:0x00220198:	move	@m00, #return
000175:0x002201a8:	cmpi	@m00, MAX_NOTIFICATIONS
000175:0x002201b8:	bge	0x2202c8
000177:0x002201c0:	ncall	GetGame()
000177:0x002201c8:	ncalli	CGame.GetTickTime()
000177:0x002201d0:	addf	time, #return, show_time
000178:0x002201e0:	call	
000178:0x002201f0:	new	data, NotificationRuntimeData
000178:0x00220220:	release	#return
000180:0x00220228:	movefm	@c00, m_Instance
000180:0x00220238:	movefm	@c01, m_TimeArray
000180:0x00220248:	movefm	@c02, data
000180:0x00220258:	icall	
000181:0x00220268:	movefm	@c00, m_Instance
000181:0x00220278:	movefm	@c01, m_OnNotificationAdded
000181:0x00220288:	icall	
000181:0x002202b8:	release	data
000181:0x002202c0:	jump	0x220358
000185:0x002202c8:	call	
000185:0x002202d8:	new	data_def, NotificationRuntimeData
000185:0x00220308:	release	#return
000186:0x00220310:	movefm	@c00, m_Instance
000186:0x00220320:	movefm	@c01, m_DeferredArray
000186:0x00220330:	movefm	@c02, data_def
000186:0x00220340:	icall	
000186:0x00220350:	release	data_def
000186:0x00220358:	rts
NotificationSystem::AddNotificationExtended()
000199:0x00220488:	movefm	@c00, m_Instance
000199:0x00220498:	movefm	[0xb5bb8a38], m_TimeArray
000199:0x002204a8:	ncalli	array<@NotificationRuntimeData>.Count()
000199:0x002204b0:	move	@m00, #return
000199:0x002204c0:	cmpi	@m00, MAX_NOTIFICATIONS
000199:0x002204d0:	bge	0x220600
000201:0x002204d8:	ncall	GetGame()
000201:0x002204e0:	ncalli	CGame.GetTickTime()
000201:0x002204e8:	addf	time, #return, show_time
000203:0x002204f8:	new	temp_data, NotificationData
000204:0x00220528:	new	data, NotificationRuntimeData
000206:0x00220558:	movefm	@c00, m_Instance
000206:0x00220568:	movefm	@c01, m_TimeArray
000206:0x00220578:	movefm	@c02, data
000206:0x00220588:	icall	
000207:0x00220598:	movefm	@c00, m_Instance
000207:0x002205a8:	movefm	@c01, m_OnNotificationAdded
000207:0x002205b8:	icall	
000207:0x002205e8:	release	temp_data
000207:0x002205f0:	release	data
000207:0x002205f8:	jump	0x2206b0
000211:0x00220600:	new	temp_data_def, NotificationData
000212:0x00220630:	new	data_def, NotificationRuntimeData
000213:0x00220660:	movefm	@c00, m_Instance
000213:0x00220670:	movefm	@c01, m_DeferredArray
000213:0x00220680:	movefm	@c02, data_def
000213:0x00220690:	icall	
000213:0x002206a0:	release	temp_data_def
000213:0x002206a8:	release	data_def
000213:0x002206b0:	rts
NotificationSystem::Update()
000219:0x002208a0:	cmpcm	m_Instance, null
000219:0x002208b0:	beq	0x220d18
000221:0x002208b8:	new	to_remove, array<NotificationRuntimeData>
000222:0x002208d8:	movefm	@c00, m_Instance
000222:0x002208e8:	movem	#array, m_TimeArray
000222:0x002208f8:	ncalli	array<@NotificationRuntimeData>.Count()
000222:0x00220900:	move	#cnt, #return
000222:0x00220910:	imove	#key, 0x000000
000222:0x00220920:	jump	0x220930
000222:0x00220928:	inc	#key
000222:0x00220930:	cmpi	#key, #cnt
000222:0x00220940:	bge	0x2209d8
000222:0x00220948:	icall	
000222:0x00220958:	movetm	data, #return
000224:0x00220968:	call	
000224:0x00220978:	move	@f00, #return
000224:0x00220988:	ncall	GetGame()
000224:0x00220990:	ncalli	CGame.GetTickTime()
000224:0x00220998:	cmpf	@f00, #return
000224:0x002209a8:	bge	0x2209d0
000226:0x002209b0:	movefm	@c01, data
000226:0x002209c0:	icall	
000226:0x002209d0:	jump	0x220928
000226:0x002209d8:	release	#array
000226:0x002209e0:	release	data
000230:0x002209e8:	ncalli	array<NotificationRuntimeData>.Count()
000230:0x002209f0:	move	#cnt, #return
000230:0x00220a00:	imove	#key, 0x000000
000230:0x00220a10:	jump	0x220a20
000230:0x00220a18:	inc	#key
000230:0x00220a20:	cmpi	#key, #cnt
000230:0x00220a30:	bge	0x220d08
000230:0x00220a38:	icall	
000230:0x00220a48:	movetm	data2, #return
000232:0x00220a58:	movefm	@c00, m_Instance
000232:0x00220a68:	movefm	@c01, m_TimeArray
000232:0x00220a78:	call	
000233:0x00220a88:	movefm	@c00, m_Instance
000233:0x00220a98:	movefm	@c01, m_OnNotificationRemoved
000233:0x00220aa8:	icall	
000235:0x00220ad8:	movefm	@c00, m_Instance
000235:0x00220ae8:	movefm	[0xb5bb8a38], m_DeferredArray
000235:0x00220af8:	ncalli	array<@NotificationRuntimeData>.Count()
000235:0x00220b00:	move	@m00, #return
000235:0x00220b10:	cmpi	@m00, _i0
000235:0x00220b20:	ble	0x220d00
000237:0x00220b28:	movefm	@c02, m_Instance
000237:0x00220b38:	movefm	@c03, m_DeferredArray
000237:0x00220b48:	movefm	@c04, m_Instance
000237:0x00220b58:	movefm	[0xb5bb8a38], m_DeferredArray
000237:0x00220b68:	ncalli	array<@NotificationRuntimeData>.Count()
000237:0x00220b70:	subi	@m01, #return, _i1
000237:0x00220b80:	move	@m00, @m01
000237:0x00220b90:	icall	
000237:0x00220ba0:	movetm	data_def, #return
000238:0x00220bb0:	ncall	GetGame()
000238:0x00220bb8:	ncalli	CGame.GetTickTime()
000238:0x00220bc0:	call	
000238:0x00220bd0:	addf	time, #return, #return
000239:0x00220be0:	call	
000240:0x00220bf0:	movefm	@c00, m_Instance
000240:0x00220c00:	movefm	@c01, m_TimeArray
000240:0x00220c10:	movefm	@c02, data_def
000240:0x00220c20:	icall	
000241:0x00220c30:	movefm	@c00, m_Instance
000241:0x00220c40:	movefm	@c01, m_OnNotificationAdded
000241:0x00220c50:	icall	
000242:0x00220c80:	movefm	@c00, m_Instance
000242:0x00220c90:	movefm	@c01, m_DeferredArray
000242:0x00220ca0:	movefm	@c02, m_Instance
000242:0x00220cb0:	movefm	[0xb5bb8a38], m_DeferredArray
000242:0x00220cc0:	ncalli	array<@NotificationRuntimeData>.Count()
000242:0x00220cc8:	subi	@m01, #return, _i1
000242:0x00220cd8:	move	@m00, @m01
000242:0x00220ce8:	ncalli	array<@NotificationRuntimeData>.Remove(@m00)
000242:0x00220cf8:	release	data_def
000242:0x00220d00:	jump	0x220a18
000242:0x00220d08:	release	data2
000242:0x00220d10:	release	to_remove
000242:0x00220d18:	rts
NotificationSystem::GetNotificationData()
000250:0x00220d20:	movefm	[0xb5bb8b80], m_DataArray
000250:0x00220d30:	icall	
000250:0x00220d40:	cmpi	#return, _i0
000250:0x00220d50:	beq	0x220d90
000252:0x00220d58:	movefm	[0xb5bb8b80], m_DataArray
000252:0x00220d68:	icall	
000252:0x00220d78:	movetm	#return, #return
000252:0x00220d88:	rts
000255:0x00220d90:	movetm	#return, null
000255:0x00220da0:	rts
000255:0x00220da8:	rts
JsonFileLoader<map<int,NotificationData>>::JsonLoadFile()
//scripts/3_Game/tools\jsonfileloader.c
000007:0x00221248:	icall	FileExist(filename)
000007:0x00221258:	cmpi	#return, _i0
000007:0x00221268:	beq	0x2213a8
000013:0x00221270:	icall	OpenFile(filename, _i1)
000013:0x00221280:	movea	handle, #return
000014:0x00221290:	cmpc	handle, _i0
000014:0x002212a0:	bne	0x2212c0
000015:0x002212a8:	movem	data, data
000015:0x002212b8:	rts
000018:0x002212c0:	icall	FGets(handle, line_content)
000018:0x002212d0:	move	@m00, #return
000018:0x002212e0:	cmpi	@m00, _i0
000018:0x002212f0:	blt	0x221320
000020:0x002212f8:	moves	@s00, line_content
000020:0x00221308:	adds	file_content, file_content, @s00
000020:0x00221318:	jump	0x2212c0
000023:0x00221320:	icall	CloseFile(handle)
000025:0x00221330:	cmpcm	m_Serializer, null
000025:0x00221340:	bne	0x221368
000026:0x00221348:	new	m_Serializer, JsonSerializer
000028:0x00221368:	icall	
000028:0x00221380:	cmpi	#return, _i0
000028:0x00221390:	bne	0x2213a8
000029:0x00221398:	call	Error(error)
000029:0x002213a8:	movem	data, data
000029:0x002213b8:	rts
JsonFileLoader<map<int,NotificationData>>::JsonSaveFile()
000036:0x00221438:	cmpcm	m_Serializer, null
000036:0x00221448:	bne	0x221470
000037:0x00221450:	new	m_Serializer, JsonSerializer
000039:0x00221470:	icall	
000041:0x00221488:	icall	OpenFile(filename, _i4)
000041:0x00221498:	movea	handle, #return
000042:0x002214a8:	cmpc	handle, _i0
000042:0x002214b8:	bne	0x2214c8
000043:0x002214c0:	rts
000045:0x002214c8:	icall	FPrint(handle, file_content)
000047:0x002214d8:	icall	CloseFile(handle)
000047:0x002214e8:	rts
JsonFileLoader<map<int,NotificationData>>::JsonLoadData()
000053:0x00221518:	cmpcm	m_Serializer, null
000053:0x00221528:	bne	0x221550
000054:0x00221530:	new	m_Serializer, JsonSerializer
000056:0x00221550:	icall	
000056:0x00221568:	cmpi	#return, _i0
000056:0x00221578:	bne	0x221590
000057:0x00221580:	call	Error(error)
000057:0x00221590:	movem	data, data
000057:0x002215a0:	rts
JsonFileLoader<map<int,NotificationData>>::JsonMakeData()
000063:0x002215d0:	cmpcm	m_Serializer, null
000063:0x002215e0:	bne	0x221608
000064:0x002215e8:	new	m_Serializer, JsonSerializer
000066:0x00221608:	icall	
000067:0x00221620:	moves	#return, string_data
000067:0x00221630:	rts
000067:0x00221638:	rts
JsonFileLoader<map<int,@NotificationData>>::JsonLoadFile()
000007:0x00221ae8:	icall	FileExist(filename)
000007:0x00221af8:	cmpi	#return, _i0
000007:0x00221b08:	beq	0x221c48
000013:0x00221b10:	icall	OpenFile(filename, _i1)
000013:0x00221b20:	movea	handle, #return
000014:0x00221b30:	cmpc	handle, _i0
000014:0x00221b40:	bne	0x221b60
000015:0x00221b48:	movem	data, data
000015:0x00221b58:	rts
000018:0x00221b60:	icall	FGets(handle, line_content)
000018:0x00221b70:	move	@m00, #return
000018:0x00221b80:	cmpi	@m00, _i0
000018:0x00221b90:	blt	0x221bc0
000020:0x00221b98:	moves	@s00, line_content
000020:0x00221ba8:	adds	file_content, file_content, @s00
000020:0x00221bb8:	jump	0x221b60
000023:0x00221bc0:	icall	CloseFile(handle)
000025:0x00221bd0:	cmpcm	m_Serializer, null
000025:0x00221be0:	bne	0x221c08
000026:0x00221be8:	new	m_Serializer, JsonSerializer
000028:0x00221c08:	icall	
000028:0x00221c20:	cmpi	#return, _i0
000028:0x00221c30:	bne	0x221c48
000029:0x00221c38:	call	Error(error)
000029:0x00221c48:	movem	data, data
000029:0x00221c58:	rts
JsonFileLoader<map<int,@NotificationData>>::JsonSaveFile()
000036:0x00221cb0:	cmpcm	m_Serializer, null
000036:0x00221cc0:	bne	0x221ce8
000037:0x00221cc8:	new	m_Serializer, JsonSerializer
000039:0x00221ce8:	icall	
000041:0x00221d00:	icall	OpenFile(filename, _i4)
000041:0x00221d10:	movea	handle, #return
000042:0x00221d20:	cmpc	handle, _i0
000042:0x00221d30:	bne	0x221d40
000043:0x00221d38:	rts
000045:0x00221d40:	icall	FPrint(handle, file_content)
000047:0x00221d50:	icall	CloseFile(handle)
000047:0x00221d60:	rts
JsonFileLoader<map<int,@NotificationData>>::JsonLoadData()
000053:0x00221d90:	cmpcm	m_Serializer, null
000053:0x00221da0:	bne	0x221dc8
000054:0x00221da8:	new	m_Serializer, JsonSerializer
000056:0x00221dc8:	icall	
000056:0x00221de0:	cmpi	#return, _i0
000056:0x00221df0:	bne	0x221e08
000057:0x00221df8:	call	Error(error)
000057:0x00221e08:	movem	data, data
000057:0x00221e18:	rts
JsonFileLoader<map<int,@NotificationData>>::JsonMakeData()
000063:0x00221e48:	cmpcm	m_Serializer, null
000063:0x00221e58:	bne	0x221e80
000064:0x00221e60:	new	m_Serializer, JsonSerializer
000066:0x00221e80:	icall	
000067:0x00221e98:	moves	#return, string_data
000067:0x00221ea8:	rts
000067:0x00221eb0:	rts
NotificationSystem::LoadNotificationData()
//scripts/3_Game/client\notifications\notificationsystem.c
000261:0x00221eb8:	movefm	@c00, m_Instance
000261:0x00221ec8:	new	m_DataArray, map<int,@NotificationData>
000262:0x00221ee8:	call	JsonLoadFile(JSON_FILE_PATH, data_array)
000262:0x00221f00:	movem	data_array, data
000262:0x00221f10:	release	data
000264:0x00221f18:	movefm	@c00, m_Instance
000264:0x00221f28:	movefm	@c01, m_DataArray
000264:0x00221f38:	movefm	@c02, data_array
000264:0x00221f48:	icall	
000266:0x00221f58:	new	types, array<int>
000267:0x00221f78:	imove	type_curr, 0x000000
000268:0x00221f88:	cmpi	type_curr, NOTIFICATIONS_END
000268:0x00221f98:	beq	0x221fd0
000270:0x00221fa0:	icall	
000271:0x00221fb0:	move	@m00, type_curr
000271:0x00221fc0:	inc	type_curr
000271:0x00221fc8:	jump	0x221f88
000274:0x00221fd0:	imove	i, 0x000000
000274:0x00221fe0:	jump	0x222000
000274:0x00221fe8:	move	@m00, i
000274:0x00221ff8:	inc	i
000274:0x00222000:	movefm	@c00, m_Instance
000274:0x00222010:	movefm	[0xb5bb8b80], m_DataArray
000274:0x00222020:	ncalli	map<int,@NotificationData>.Count()
000274:0x00222028:	cmpi	i, #return
000274:0x00222038:	bge	0x222088
000276:0x00222040:	movefm	@c01, m_Instance
000276:0x00222050:	movefm	@c02, m_DataArray
000276:0x00222060:	icall	
000276:0x00222070:	call	
000276:0x00222080:	jump	0x221fe8
000279:0x00222088:	ncalli	array<int>.Count()
000279:0x00222090:	move	@m00, #return
000279:0x002220a0:	cmpi	@m00, _i0
000279:0x002220b0:	ble	0x2221e0
000281:0x002220b8:	ncalli	array<int>.Count()
000281:0x002220c0:	move	#cnt, #return
000281:0x002220d0:	imove	#key, 0x000000
000281:0x002220e0:	jump	0x2220f0
000281:0x002220e8:	inc	#key
000281:0x002220f0:	cmpi	#key, #cnt
000281:0x00222100:	bge	0x2221a8
000281:0x00222108:	icall	
000281:0x00222118:	move	type2, #return
000283:0x00222128:	new	data2, NotificationData
000284:0x00222158:	movefm	@c00, m_Instance
000284:0x00222168:	movefm	@c01, m_DataArray
000284:0x00222178:	movefm	@c02, data2
000284:0x00222188:	icall	
000284:0x00222198:	release	data2
000284:0x002221a0:	jump	0x2220e8
000286:0x002221a8:	movefm	@c01, m_Instance
000286:0x002221b8:	movem	data, m_DataArray
000286:0x002221c8:	call	JsonSaveFile(JSON_FILE_PATH, data)
000286:0x002221e0:	release	data_array
000286:0x002221e8:	release	types
000286:0x002221f0:	rts
PPERequester_GenericBlackGlassesBase::OnStart()
//scripts/3_Game/ppemanager\requesters\pperglasses.c
000007:0x00222220:	call	
000009:0x00222230:	call	
000010:0x00222258:	new	@c01, array<float>
000010:0x00222278:	pushc	@c01
000010:0x00222280:	icall	
000010:0x00222290:	icall	
000010:0x002222a0:	icall	
000010:0x002222b0:	icall	
000010:0x002222c0:	call	
000010:0x002222e0:	popc	@c01
000010:0x002222e8:	release	@c01
000010:0x002222f0:	rts
PPERequester_GlassesSportBlue::OnStart()
000022:0x002222f8:	call	
000024:0x00222308:	call	
000025:0x00222330:	new	@c01, array<float>
000025:0x00222350:	pushc	@c01
000025:0x00222358:	icall	
000025:0x00222368:	icall	
000025:0x00222378:	icall	
000025:0x00222388:	icall	
000025:0x00222398:	call	
000025:0x002223b8:	popc	@c01
000025:0x002223c0:	release	@c01
000025:0x002223c8:	rts
PPERequester_GlassesSportGreen::OnStart()
000033:0x002223d0:	call	
000035:0x002223e0:	call	
000036:0x00222408:	new	@c01, array<float>
000036:0x00222428:	pushc	@c01
000036:0x00222430:	icall	
000036:0x00222440:	icall	
000036:0x00222450:	icall	
000036:0x00222460:	icall	
000036:0x00222470:	call	
000036:0x00222490:	popc	@c01
000036:0x00222498:	release	@c01
000036:0x002224a0:	rts
PPERequester_GlassesSportOrange::OnStart()
000044:0x002224a8:	call	
000046:0x002224b8:	call	
000047:0x002224e0:	new	@c01, array<float>
000047:0x00222500:	pushc	@c01
000047:0x00222508:	icall	
000047:0x00222518:	icall	
000047:0x00222528:	icall	
000047:0x00222538:	icall	
000047:0x00222548:	call	
000047:0x00222568:	popc	@c01
000047:0x00222570:	release	@c01
000047:0x00222578:	rts
PPERequester_GlassesAviator::OnStart()
000055:0x00222580:	call	
000057:0x00222590:	call	
000058:0x002225b8:	new	@c01, array<float>
000058:0x002225d8:	pushc	@c01
000058:0x002225e0:	icall	
000058:0x002225f0:	icall	
000058:0x00222600:	icall	
000058:0x00222610:	icall	
000058:0x00222620:	call	
000058:0x00222640:	popc	@c01
000058:0x00222648:	release	@c01
000058:0x00222650:	rts
PPERequester_TacticalGoggles::OnStart()
000066:0x00222658:	call	
000068:0x00222668:	call	
000068:0x00222690:	rts
PPERequester_WeldingMask::OnStart()
000076:0x002226c0:	call	
000078:0x002226d0:	call	
000079:0x002226f8:	new	@c01, array<float>
000079:0x00222718:	pushc	@c01
000079:0x00222720:	icall	
000079:0x00222730:	icall	
000079:0x00222740:	icall	
000079:0x00222750:	icall	
000079:0x00222760:	call	
000079:0x00222780:	popc	@c01
000079:0x00222788:	release	@c01
000079:0x00222790:	rts
HandStartReplacingItemElsewhereWithNewInHands::OnEntry()
//scripts/3_Game/systems\inventory\handreplacingitemelsewherewithnewinhands.c
000008:0x002228b0:	call	
000010:0x002228c0:	movefm	@c01, e
000010:0x002228d0:	movem	player, m_Player
000011:0x002228e0:	movefm	@c02, e
000011:0x002228f0:	icall	SafeCastType([0xb5b370f8], @c01, @c02)
000011:0x00222908:	movetm	edr, @c01
000012:0x00222918:	cmpcm	edr, null
000012:0x00222928:	beq	0x2229d0
000014:0x00222930:	call	hndDebugPrint(_s'[hndfsm] HandStartReplacingItemElsewhereWithNewInHands about to execute lambda')
000016:0x00222940:	ncalli	Man.GetInventory()
000016:0x00222948:	icall	SafeCastType([0xb5b3b8d8], @c01, #return)
000016:0x00222960:	movetm	inv, @c01
000017:0x00222970:	movefm	@c00, edr
000017:0x00222980:	movefm	@c01, m_Lambda
000017:0x00222990:	call	
000018:0x002229a0:	release	inv
000018:0x002229a8:	release	player
000018:0x002229b0:	release	edr
000018:0x002229b8:	rts
000018:0x002229c0:	release	inv
000018:0x002229c8:	jump	0x2229e0
000021:0x002229d0:	call	Error(_s'[hndfsm] HandStartReplacingItemElsewhereWithNewInHands - not a HandEvenReplaceWithNewBase event')
000021:0x002229e0:	release	player
000021:0x002229e8:	release	edr
000021:0x002229f0:	rts
HandStartReplacingItemElsewhereWithNewInHands::OnAbort()
000026:0x002229f8:	call	
000026:0x00222a08:	rts
HandStartReplacingItemElsewhereWithNewInHands::OnExit()
000031:0x00222a10:	call	
000031:0x00222a20:	rts
HandStartReplacingItemElsewhereWithNewInHands::IsWaitingForActionFinish()
000034:0x00222a28:	imove	#return, 0x000001
000034:0x00222a38:	rts
000034:0x00222a40:	rts
HandReplacingItemElsewhereWithNewInHands::HandReplacingItemElsewhereWithNewInHands()
000045:0x00222b10:	new	m_Replacing, HandStartReplacingItemElsewhereWithNewInHands
000048:0x00222b38:	new	_fin_, HandEventHumanCommandActionFinished
000050:0x00222b60:	new	m_FSM, HandFSM
000052:0x00222b88:	movem	src, m_Replacing
000052:0x00222b98:	movetm	dst, NULL
000052:0x00222ba8:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000052:0x00222be0:	pushc	@c00
000052:0x00222be8:	movefm	[0xb5b3f2a8], m_FSM
000052:0x00222bf8:	call	
000052:0x00222c08:	popc	@c00
000052:0x00222c10:	release	@c00
000054:0x00222c18:	movem	initial_state, m_Replacing
000054:0x00222c28:	movefm	[0xb5b3f2a8], m_FSM
000054:0x00222c38:	call	
000054:0x00222c48:	release	_fin_
000054:0x00222c50:	rts
MenuEvaporation::MenuEvaporation()
//scripts/3_Game/effects\effectparticle\menuevaporation.c
000005:0x00222c58:	call	
000005:0x00222c68:	rts
ParticleSource::ParticleSource()
//scripts/3_Game/particles\particlemanager\particlesource.c
000128:0x00222c70:	movetm	m_ParticleEffect, this
000128:0x00222c80:	rts
ParticleSource::DisableAutoDestroy()
000153:0x00222c88:	ncalli	ParticleSource.SetParticleAutoDestroyFlags(_i0)
000153:0x00222c98:	rts
ParticleSource::CreateParticle()
000180:0x00222d30:	imove	flags, 0x000000
000182:0x00222d40:	cmpi	playOnCreation, _i0
000182:0x00222d50:	beq	0x222d78
000184:0x00222d58:	ori	@m00, flags, _i1
000184:0x00222d68:	move	flags, @m00
000187:0x00222d78:	cmpi	forceWorldRotation, _i0
000187:0x00222d88:	beq	0x222db0
000189:0x00222d90:	ori	@m00, flags, _i2
000189:0x00222da0:	move	flags, @m00
000192:0x00222db0:	call	CreateParticleEx(id, pos, flags, parent, ori, owner)
000192:0x00222dd8:	movem	#return, #return
000192:0x00222de8:	release	#return
000192:0x00222df0:	rts
000192:0x00222df8:	rts
ParticleSource::CreateParticleEx()
000207:0x00222f50:	call	GetParticleFullPath(id)
000207:0x00222f60:	moves	particlePath, #return
000208:0x00222f70:	cmps	particlePath, _s''
000208:0x00222f80:	bne	0x222fe0
000210:0x00222f88:	icall	Format(_s'Could not create ParticleSource as particle id %1 is invalid.', id, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000210:0x00222fb8:	icall	ErrorEx(#return, _i2)
000211:0x00222fc8:	movetm	#return, null
000211:0x00222fd8:	rts
000214:0x00222fe0:	movev	localPos, pos
000216:0x00222ff0:	cmpcm	parent, null
000216:0x00223000:	beq	0x223020
000217:0x00223008:	ncalli	Object.GetPosition()
000217:0x00223010:	movev	pos, #return
000219:0x00223020:	ncall	GetGame()
000219:0x00223028:	ncalli	CGame.CreateObjectEx(_s'ParticleSource', pos, ECE_LOCAL, _i512)
000219:0x00223040:	icall	SafeCastType([0xb5b275f0], @c01, #return)
000219:0x00223058:	movetm	p, @c01
000220:0x00223068:	call	
000221:0x00223078:	new	props, ParticleProperties
000222:0x002230b0:	call	
000224:0x002230c0:	movem	#return, p
000224:0x002230d0:	release	p
000224:0x002230d8:	release	props
000224:0x002230e0:	rts
000224:0x002230e8:	release	p
000224:0x002230f0:	release	props
000224:0x002230f8:	rts
ParticleSource::CreateOnObject()
000243:0x00223128:	call	CreateParticle(particle_id, local_pos, false, parent_obj, local_ori, force_world_rotation, _c0)
000243:0x00223150:	movem	#return, #return
000243:0x00223160:	release	#return
000243:0x00223168:	rts
000243:0x00223170:	rts
ParticleSource::Create()
000251:0x00223178:	call	CreateOnObject(particle_id, parent_obj, local_pos, local_ori, _i0)
000251:0x00223198:	movem	#return, #return
000251:0x002231a8:	release	#return
000251:0x002231b0:	rts
000251:0x002231b8:	rts
ParticleSource::CreateInWorld()
000264:0x002231c0:	movetm	parent, null
000264:0x002231d0:	call	CreateParticle(particle_id, global_pos, false, parent, global_ori, force_world_rotation, _c0)
000264:0x002231f8:	movem	#return, #return
000264:0x00223208:	release	#return
000264:0x00223210:	rts
000264:0x00223218:	rts
ParticleSource::Create#109489()
000272:0x00223220:	call	CreateInWorld(particle_id, global_pos, global_ori, _i0)
000272:0x00223240:	movem	#return, #return
000272:0x00223250:	release	#return
000272:0x00223258:	rts
000272:0x00223260:	rts
ParticleSource::PlayOnObject()
000295:0x00223268:	call	CreateParticle(particle_id, local_pos, true, parent_obj, local_ori, force_world_rotation, _c0)
000295:0x00223290:	movem	#return, #return
000295:0x002232a0:	release	#return
000295:0x002232a8:	rts
000295:0x002232b0:	rts
ParticleSource::Play()
000303:0x002232b8:	call	PlayOnObject(particle_id, parent_obj, local_pos, local_ori, _i0)
000303:0x002232d8:	movem	#return, #return
000303:0x002232e8:	release	#return
000303:0x002232f0:	rts
000303:0x002232f8:	rts
ParticleSource::PlayInWorld()
000314:0x00223338:	call	CreateParticle(particle_id, global_pos, true, _c0, _v<0.000000,0.000000,0.000000>, _i0, _c0)
000314:0x00223360:	movem	#return, #return
000314:0x00223370:	release	#return
000314:0x00223378:	rts
000314:0x00223380:	rts
ParticleSource::Play#109633()
000322:0x00223388:	call	PlayInWorld(particle_id, global_pos)
000322:0x002233a0:	movem	#return, #return
000322:0x002233b0:	release	#return
000322:0x002233b8:	rts
000322:0x002233c0:	rts
ParticleSource::PlayParticleEx()
000348:0x002233c8:	cmpi	particle_id, _i-1
000348:0x002233d8:	ble	0x2233f0
000352:0x002233e0:	call	
000355:0x002233f0:	icall	
000355:0x00223400:	move	#return, #return
000355:0x00223410:	rts
000355:0x00223418:	rts
ParticleSource::StopParticle()
000374:0x00223420:	icall	
000374:0x00223430:	move	#return, #return
000374:0x00223440:	rts
000374:0x00223448:	rts
ParticleSource::ResetParticle()
000389:0x00223450:	ncalli	ParticleSource.ResetParticleNative()
000389:0x00223458:	move	#return, #return
000389:0x00223468:	rts
000389:0x00223470:	rts
ParticleSource::RestartParticle()
000404:0x00223478:	ncalli	ParticleSource.RestartParticleNative()
000404:0x00223480:	move	#return, #return
000404:0x00223490:	rts
000404:0x00223498:	rts
ParticleSource::IsParticlePlaying()
000419:0x002234a0:	icall	
000419:0x002234a8:	move	#return, #return
000419:0x002234b8:	rts
000419:0x002234c0:	rts
ParticleSource::SetParticle()
000446:0x002234c8:	ncalli	ParticleSource.SetParticleNative(path)
000446:0x002234d8:	move	#return, #return
000446:0x002234e8:	rts
000446:0x002234f0:	rts
ParticleSource::SetParticleByID()
000456:0x002234f8:	call	GetParticleFullPath(id)
000456:0x00223508:	call	
000456:0x00223518:	move	#return, #return
000456:0x00223528:	rts
000456:0x00223530:	rts
ParticleSource::SetSource()
000466:0x00223538:	call	
000466:0x00223548:	rts
ParticleSource::GetParticle()
000494:0x00223550:	icall	
000494:0x00223560:	move	#return, #return
000494:0x00223570:	moves	path, path
000494:0x00223580:	rts
000494:0x00223588:	moves	path, path
000494:0x00223598:	rts
ParticleSource::GetParticleID()
000504:0x002235c8:	call	
000504:0x002235e0:	moves	path, path
000504:0x002235f0:	cmpi	#return, _i0
000504:0x00223600:	beq	0x223638
000505:0x00223608:	call	GetParticleIDByName(path)
000505:0x00223618:	move	#return, #return
000505:0x00223628:	rts
000505:0x00223630:	jump	0x223650
000507:0x00223638:	imove	#return, 0xffffffff
000507:0x00223648:	rts
000507:0x00223650:	rts
ParticleSource::GetParticleIDLegacy()
000519:0x002236a8:	call	
000519:0x002236c0:	moves	path, path
000519:0x002236d0:	cmpi	#return, _i0
000519:0x002236e0:	beq	0x223718
000520:0x002236e8:	call	GetParticleID(path)
000520:0x002236f8:	move	#return, #return
000520:0x00223708:	rts
000520:0x00223710:	jump	0x223730
000522:0x00223718:	imove	#return, 0xffffffff
000522:0x00223728:	rts
000522:0x00223730:	rts
ParticleSource::ApplyProperties()
000549:0x00223738:	movefm	[0xb5b6f5b0], properties
000549:0x00223748:	ncalli	ParticleSource.ApplyPropertiesNative([0xb5b6f5b0])
000549:0x00223758:	move	#return, #return
000549:0x00223768:	rts
000549:0x00223770:	rts
ParticleSource::GetDirectParticleEffect()
000568:0x00223778:	movetm	#return, this
000568:0x00223788:	rts
000568:0x00223790:	rts
ParticleSource::GetParticleParent()
000577:0x00223798:	ncalli	ParticleSource.GetParent()
000577:0x002237a0:	icall	SafeCastType([0xb5b006f0], @c01, #return)
000577:0x002237b8:	movetm	#return, @c01
000577:0x002237c8:	rts
000577:0x002237d0:	rts
ParticleSource::HasActiveParticle()
000592:0x002237d8:	icall	
000592:0x002237e0:	move	#return, #return
000592:0x002237f0:	rts
000592:0x002237f8:	rts
ParticleSource::GetParticleCount()
000609:0x00223800:	icall	
000609:0x00223808:	move	#return, #return
000609:0x00223818:	rts
000609:0x00223820:	rts
ParticleSource::IsRepeat()
000624:0x00223828:	icall	
000624:0x00223830:	move	#return, #return
000624:0x00223840:	rts
000624:0x00223848:	rts
ParticleSource::GetMaxLifetime()
000639:0x00223850:	icall	
000639:0x00223858:	move	#return, #return
000639:0x00223868:	rts
000639:0x00223870:	rts
ParticleSource::OnParticleParented()
000724:0x00223878:	movefm	@c02, parent
000724:0x00223888:	icall	SafeCastType([0xb5b006f0], @c01, @c02)
000724:0x002238a0:	movetm	m_ParentObject, @c01
000726:0x002238b0:	call	
000726:0x002238c0:	rts
ParticleSource::OnParticleUnParented()
000734:0x00223978:	movetm	m_ParentObject, null
000738:0x00223988:	cmpi	m_WiggleProcessing, _i0
000738:0x00223998:	bne	0x223a30
000738:0x002239a0:	call	
000738:0x002239b0:	cmpi	#return, _i0
000738:0x002239c0:	beq	0x223a30
000740:0x002239c8:	move	randomAngle, m_MaxOriWiggle
000741:0x002239d8:	move	randomInterval, m_MaxOriInterval
000742:0x002239e8:	movev	m_DefaultPos, m_DefaultWorldPos
000743:0x002239f8:	movev	m_DefaultOri, m_DefaultWorldOri
000745:0x00223a08:	call	
000746:0x00223a18:	call	
000749:0x00223a30:	call	
000749:0x00223a40:	rts
ParticleSource::OnParticleStop()
000757:0x00223a48:	call	
000757:0x00223a58:	cmpi	#return, _i0
000757:0x00223a68:	beq	0x223a88
000759:0x00223a70:	call	
000760:0x00223a80:	delete	m_RandomizeOri
000763:0x00223a88:	call	
000763:0x00223a98:	rts
ParticleSource::AddAsChild()
000785:0x00223af0:	imove	flags, 0x000000
000787:0x00223b00:	cmpi	force_rotation_to_world, _i0
000787:0x00223b10:	beq	0x223b28
000788:0x00223b18:	imove	flags, 0x000002
000790:0x00223b28:	new	props, ParticleProperties
000791:0x00223b60:	call	
000791:0x00223b70:	release	props
000791:0x00223b78:	rts
ParticleSource::SetParticleParam()
000810:0x00223b80:	icall	SetParticleParm(this, _i-1, parameter_id, value)
000810:0x00223b98:	rts
ParticleSource::SetParameter()
000821:0x00223ba0:	icall	SetParticleParm(this, emitter, parameter, value)
000821:0x00223bb8:	rts
ParticleSource::GetParameter()
000832:0x00223bc0:	icall	GetParticleParm(this, emitter, parameter, value)
000832:0x00223bd8:	move	value, value
000832:0x00223be8:	rts
ParticleSource::GetParameterEx()
000844:0x00223c18:	icall	GetParticleParm(this, emitter, parameter, value)
000845:0x00223c30:	move	#return, value
000845:0x00223c40:	rts
000845:0x00223c48:	rts
ParticleSource::ScaleParticleParamFromOriginal()
000855:0x00223cf0:	icall	GetParticleEmitorCount(this)
000855:0x00223d00:	move	emitors, #return
000856:0x00223d10:	imove	i, 0x000000
000856:0x00223d20:	jump	0x223d30
000856:0x00223d28:	inc	i
000856:0x00223d30:	cmpi	i, emitors
000856:0x00223d40:	bge	0x223da0
000859:0x00223d48:	icall	GetParticleParmOriginal(this, i, parameter_id, value)
000860:0x00223d60:	mulf	@f01, value, coef
000860:0x00223d70:	move	@f00, @f01
000860:0x00223d80:	icall	SetParticleParm(this, i, parameter_id, @f00)
000860:0x00223d98:	jump	0x223d28
000860:0x00223da0:	rts
ParticleSource::ScaleParticleParam()
000871:0x00223e20:	icall	GetParticleEmitorCount(this)
000871:0x00223e30:	move	emitors, #return
000872:0x00223e40:	imove	i, 0x000000
000872:0x00223e50:	jump	0x223e60
000872:0x00223e58:	inc	i
000872:0x00223e60:	cmpi	i, emitors
000872:0x00223e70:	bge	0x223ed0
000875:0x00223e78:	icall	GetParticleParm(this, i, parameter_id, value)
000876:0x00223e90:	mulf	@f01, value, coef
000876:0x00223ea0:	move	@f00, @f01
000876:0x00223eb0:	icall	SetParticleParm(this, i, parameter_id, @f00)
000876:0x00223ec8:	jump	0x223e58
000876:0x00223ed0:	rts
ParticleSource::IncrementParticleParamFromOriginal()
000888:0x00223f50:	icall	GetParticleEmitorCount(this)
000888:0x00223f60:	move	emitors, #return
000889:0x00223f70:	imove	i, 0x000000
000889:0x00223f80:	jump	0x223f90
000889:0x00223f88:	inc	i
000889:0x00223f90:	cmpi	i, emitors
000889:0x00223fa0:	bge	0x224000
000892:0x00223fa8:	icall	GetParticleParmOriginal(this, i, parameter_id, param)
000893:0x00223fc0:	addf	@f01, param, value
000893:0x00223fd0:	move	@f00, @f01
000893:0x00223fe0:	icall	SetParticleParm(this, i, parameter_id, @f00)
000893:0x00223ff8:	jump	0x223f88
000893:0x00224000:	rts
ParticleSource::IncrementParticleParam()
000905:0x00224080:	icall	GetParticleEmitorCount(this)
000905:0x00224090:	move	emitors, #return
000906:0x002240a0:	imove	i, 0x000000
000906:0x002240b0:	jump	0x2240c0
000906:0x002240b8:	inc	i
000906:0x002240c0:	cmpi	i, emitors
000906:0x002240d0:	bge	0x224130
000909:0x002240d8:	icall	GetParticleParm(this, i, parameter_id, param)
000910:0x002240f0:	addf	@f01, param, value
000910:0x00224100:	move	@f00, @f01
000910:0x00224110:	icall	SetParticleParm(this, i, parameter_id, @f00)
000910:0x00224128:	jump	0x2240b8
000910:0x00224130:	rts
ParticleSource::SetWiggle()
000931:0x00224138:	cmpf	random_angle, _f0.000000
000931:0x00224148:	bne	0x224168
000931:0x00224150:	cmpf	random_interval, _f0.000000
000931:0x00224160:	beq	0x224258
000933:0x00224168:	call	
000933:0x00224178:	cmpi	#return, _i0
000933:0x00224188:	beq	0x2241b8
000935:0x00224190:	move	m_MaxOriWiggle, random_angle
000936:0x002241a0:	move	m_MaxOriInterval, random_interval
000937:0x002241b0:	rts
000941:0x002241b8:	ncall	Update(this)
000947:0x002241c8:	icall	GetLocalPosition(this)
000947:0x002241d8:	movev	m_DefaultPos, #return
000948:0x002241e8:	ncall	GetLocalYawPitchRoll(this)
000948:0x002241f8:	movev	m_DefaultOri, #return
000949:0x00224208:	ncalli	ParticleSource.GetWorldPosition()
000949:0x00224210:	movev	m_DefaultWorldPos, #return
000950:0x00224220:	ncall	GetYawPitchRoll(this)
000950:0x00224230:	movev	m_DefaultWorldOri, #return
000951:0x00224240:	ncalli	ParticleSource.IsHierarchyPositionOnly()
000951:0x00224248:	move	m_ForceOrientationRelativeToWorld, #return
000954:0x00224258:	call	
000954:0x00224270:	rts
ParticleSource::StopWiggle()
000962:0x00224348:	call	
000962:0x00224358:	move	wiggling, #return
000964:0x00224368:	call	
000966:0x00224378:	cmpi	wiggling, _i0
000966:0x00224388:	beq	0x224458
000969:0x00224390:	imove	flags, 0x000000
000971:0x002243a0:	cmpi	m_ForceOrientationRelativeToWorld, _i0
000971:0x002243b0:	beq	0x2243c8
000972:0x002243b8:	imove	flags, 0x000002
000974:0x002243c8:	movev	localPos, m_DefaultPos
000974:0x002243d8:	call	
000974:0x002243e8:	movev	localOri, m_DefaultOri
000974:0x002243f8:	ncalli	ParticleSource.GetOwner()
000974:0x00224400:	new	prop, ParticleProperties
000974:0x00224438:	release	#return
000975:0x00224440:	call	
000975:0x00224450:	release	prop
000975:0x00224458:	rts
ParticleSource::RandomizeOrientation()
000984:0x002244d8:	ncalli	ParticleSource.ToDelete()
000984:0x002244e0:	cmpi	#return, _i0
000984:0x002244f0:	beq	0x224500
000985:0x002244f8:	rts
000987:0x00224500:	imove	m_WiggleProcessing, 0x000001
000989:0x00224510:	movefm	[0xb5b3c700], m_RandomizeOri
000989:0x00224520:	call	
000989:0x00224530:	cmpi	#return, _i0
000989:0x00224540:	bne	0x224598
000990:0x00224548:	icall	RandomFloat(_f0.000000, m_MaxOriInterval)
000990:0x00224558:	movetm	params, null
000990:0x00224568:	movefm	[0xb5b3c700], m_RandomizeOri
000990:0x00224578:	call	
000992:0x00224598:	imove	flags, 0x000000
000994:0x002245a8:	cmpi	m_ForceOrientationRelativeToWorld, _i0
000994:0x002245b8:	beq	0x2245d0
000995:0x002245c0:	imove	flags, 0x000002
000997:0x002245d0:	movev	localPos, m_DefaultPos
000997:0x002245e0:	call	
000997:0x002245f0:	call	
000997:0x00224600:	addv	@v01, m_DefaultOri, #return
000997:0x00224610:	movev	@v00, @v01
000997:0x00224620:	ncalli	ParticleSource.GetOwner()
000997:0x00224628:	new	prop, ParticleProperties
000997:0x00224660:	release	#return
000998:0x00224668:	call	
001000:0x00224678:	imove	m_WiggleProcessing, 0x000000
001000:0x00224688:	release	prop
001000:0x00224690:	rts
ParticleSource::UpdateState()
001013:0x002246c0:	icall	ErrorEx(_s'Should not be in use on ParticleSource.', _i2)
001013:0x002246d0:	rts
ParticleSource::DestroyParticleEffect()
001016:0x002246d8:	icall	ErrorEx(_s'Should not be in use on ParticleSource.', _i2)
001016:0x002246e8:	rts
ParticleSource::CreateParticleEffect()
001019:0x002246f0:	icall	ErrorEx(_s'Should not be in use on ParticleSource.', _i2)
001019:0x00224700:	rts
ParticleSource::EOnFrame()
001022:0x00224708:	icall	ErrorEx(_s'Should not be in use on ParticleSource.', _i2)
001022:0x00224718:	rts
ParticleSource::OnCheckAutoDelete()
001025:0x00224720:	icall	ErrorEx(_s'Should not be in use on ParticleSource.', _i2)
001025:0x00224730:	rts
ParticleSource::OnToDelete()
001028:0x00224738:	icall	ErrorEx(_s'Should not be in use on ParticleSource.', _i2)
001028:0x00224748:	rts
PPEClassBase::PPEClassBase()
//scripts/3_Game/ppemanager\materials\ppematclassesbase.c
000014:0x00224750:	moves	m_MaterialPath, _s''
000016:0x00224760:	call	
000017:0x00224770:	call	
000018:0x00224780:	call	
000019:0x00224790:	call	
000019:0x002247a0:	rts
PPEClassBase::Init()
000024:0x002247a8:	cmps	mat_path_override, _s''
000024:0x002247b8:	beq	0x2247d8
000026:0x002247c0:	moves	m_MaterialPath, mat_path_override
000026:0x002247d0:	jump	0x2247f8
000030:0x002247d8:	call	
000030:0x002247e8:	moves	m_MaterialPath, #return
000032:0x002247f8:	call	GetPPEManager()
000032:0x00224808:	movem	m_Manager, #return
000032:0x00224818:	release	#return
000032:0x00224820:	rts
PPEClassBase::CreateMaterial()
000037:0x00224828:	cmps	m_MaterialPath, _s''
000037:0x00224838:	beq	0x224880
000038:0x00224840:	ncall	GetGame()
000038:0x00224848:	ncalli	CGame.GetWorld()
000038:0x00224850:	moves	[0xb5ba0798], m_MaterialPath
000038:0x00224860:	ncalli	World.GetMaterial([0xb5ba0798])
000038:0x00224870:	movea	m_Material, #return
000038:0x00224880:	rts
PPEClassBase::GetMaterial()
000043:0x00224888:	movea	#return, m_Material
000043:0x00224898:	rts
000043:0x002248a0:	rts
PPEClassBase::CreateDataStructure()
000049:0x002248a8:	new	m_MaterialParamMapStructure, map<int,@PPEMatClassParameterCommandData>
000051:0x002248c8:	new	m_ParameterUpdateQueueMap, map<int,@array<int>>
000052:0x002248e8:	new	m_ParameterRemovalQueue, array<int>
000053:0x00224908:	new	m_UpdatedParameters, array<int>
000053:0x00224928:	rts
PPEClassBase::RegisterParameterScalarBool()
000061:0x002249b0:	new	p, Param2<string,bool>
000062:0x002249d8:	call	
000062:0x002249e8:	new	parameter_data, PPEMatClassParameterBool
000063:0x00224a18:	call	
000064:0x00224a28:	movefm	@c00, parameter_data
000064:0x00224a38:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000064:0x00224a48:	icall	
000064:0x00224a58:	release	p
000064:0x00224a60:	release	parameter_data
000064:0x00224a68:	rts
PPEClassBase::RegisterParameterScalarInt()
000069:0x00224ac0:	new	p, Param4<string,int,int,int>
000071:0x00224af0:	call	
000071:0x00224b00:	new	parameter_data, PPEMatClassParameterInt
000072:0x00224b30:	call	
000073:0x00224b40:	movefm	@c00, parameter_data
000073:0x00224b50:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000073:0x00224b60:	icall	
000073:0x00224b70:	release	p
000073:0x00224b78:	release	parameter_data
000073:0x00224b80:	rts
PPEClassBase::RegisterParameterScalarFloat()
000079:0x00224bd8:	new	p, Param4<string,float,float,float>
000081:0x00224c08:	call	
000081:0x00224c18:	new	parameter_data, PPEMatClassParameterFloat
000082:0x00224c48:	call	
000083:0x00224c58:	movefm	@c00, parameter_data
000083:0x00224c68:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000083:0x00224c78:	icall	
000083:0x00224c88:	release	p
000083:0x00224c90:	release	parameter_data
000083:0x00224c98:	rts
PPEClassBase::RegisterParameterScalarFloatEx()
000089:0x00224d40:	new	p, Param4<string,float,float,float>
000092:0x00224d70:	icall	Spawn(type)
000092:0x00224d80:	icall	CastTo(parameter_data, #return)
000092:0x00224d90:	move	boo, #return
000094:0x00224da0:	call	
000095:0x00224db0:	call	
000095:0x00224dc0:	call	
000096:0x00224dd0:	call	
000097:0x00224de0:	call	
000098:0x00224df0:	movefm	@c00, parameter_data
000098:0x00224e00:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000098:0x00224e10:	icall	
000098:0x00224e20:	release	p
000098:0x00224e28:	release	parameter_data
000098:0x00224e30:	rts
PPEClassBase::RegisterParameterColor()
000104:0x00224e88:	new	p, Param5<string,float,float,float,float>
000105:0x00224ec0:	call	
000105:0x00224ed0:	new	parameter_data, PPEMatClassParameterColor
000106:0x00224f00:	call	
000107:0x00224f10:	movefm	@c00, parameter_data
000107:0x00224f20:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000107:0x00224f30:	icall	
000107:0x00224f40:	release	p
000107:0x00224f48:	release	parameter_data
000107:0x00224f50:	rts
PPEClassBase::RegisterParameterColorEx()
000113:0x00224fd0:	new	p, Param5<string,float,float,float,float>
000115:0x00225008:	icall	Spawn(type)
000115:0x00225018:	icall	CastTo(parameter_data, #return)
000115:0x00225028:	move	boo, #return
000117:0x00225038:	call	
000118:0x00225048:	call	
000118:0x00225058:	call	
000119:0x00225068:	call	
000120:0x00225078:	call	
000121:0x00225088:	movefm	@c00, parameter_data
000121:0x00225098:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000121:0x002250a8:	icall	
000121:0x002250b8:	release	p
000121:0x002250c0:	release	parameter_data
000121:0x002250c8:	rts
PPEClassBase::RegisterParameterVector()
000126:0x00225120:	new	p, Param2<string,@array<float>>
000127:0x00225148:	call	
000127:0x00225158:	new	parameter_data, PPEMatClassParameterVector
000128:0x00225188:	call	
000129:0x00225198:	movefm	@c00, parameter_data
000129:0x002251a8:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000129:0x002251b8:	icall	
000129:0x002251c8:	release	p
000129:0x002251d0:	release	parameter_data
000129:0x002251d8:	rts
PPEClassBase::RegisterParameterTexture()
000135:0x00225230:	new	p, Param2<string,string>
000136:0x00225258:	call	
000136:0x00225268:	new	parameter_data, PPEMatClassParameterTexture
000137:0x00225298:	call	
000138:0x002252a8:	movefm	@c00, parameter_data
000138:0x002252b8:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000138:0x002252c8:	icall	
000138:0x002252d8:	release	p
000138:0x002252e0:	release	parameter_data
000138:0x002252e8:	rts
PPEClassBase::RegisterParameterResource()
000143:0x00225340:	new	p, Param2<string,string>
000144:0x00225368:	call	
000144:0x00225378:	new	parameter_data, PPEMatClassParameterResource
000145:0x002253a8:	call	
000146:0x002253b8:	movefm	@c00, parameter_data
000146:0x002253c8:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000146:0x002253d8:	icall	
000146:0x002253e8:	release	p
000146:0x002253f0:	release	parameter_data
000146:0x002253f8:	rts
PPEClassBase::InsertParamValueData()
000154:0x002254f8:	call	
000154:0x00225508:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000154:0x00225518:	icall	
000154:0x00225528:	move	exists, #return
000155:0x00225538:	cmpi	exists, _i0
000155:0x00225548:	bne	0x225690
000157:0x00225550:	call	
000157:0x00225560:	icall	ToString(#return)
000157:0x00225570:	adds	@s06, _s'PPEClassBase | InsertParamValueData | mat/par/req: ', #return
000157:0x00225580:	moves	@s05, @s06
000157:0x00225590:	adds	@s05, @s05, _s'/'
000157:0x002255a0:	moves	@s04, @s05
000157:0x002255b0:	call	
000157:0x002255c0:	icall	ToString(#return)
000157:0x002255d0:	adds	@s04, @s04, #return
000157:0x002255e0:	moves	@s03, @s04
000157:0x002255f0:	adds	@s03, @s03, _s'/'
000157:0x00225600:	moves	@s02, @s03
000157:0x00225610:	call	
000157:0x00225620:	icall	ToString(#return)
000157:0x00225630:	adds	@s02, @s02, #return
000157:0x00225640:	moves	@s01, @s02
000157:0x00225650:	adds	@s01, @s01, _s' not registered in m_MaterialParamMapStructure!'
000157:0x00225660:	moves	@s00, @s01
000157:0x00225670:	call	Error(@s00)
000158:0x00225680:	release	param_data
000158:0x00225688:	rts
000161:0x00225690:	call	
000162:0x002256a0:	call	
000163:0x002256b0:	call	
000163:0x002256c0:	release	param_data
000163:0x002256c8:	rts
PPEClassBase::OnUpdate()
000203:0x002257a0:	imove	parameter_idx, 0xffffffff
000206:0x002257b0:	movefm	[0xb5b90170], m_ParameterUpdateQueueMap
000206:0x002257c0:	icall	
000206:0x002257d0:	cmpi	#return, _i0
000206:0x002257e0:	beq	0x225970
000209:0x002257e8:	imove	i, 0x000000
000209:0x002257f8:	jump	0x225818
000209:0x00225800:	move	@m00, i
000209:0x00225810:	inc	i
000209:0x00225818:	movefm	[0xb5b90170], m_ParameterUpdateQueueMap
000209:0x00225828:	icall	
000209:0x00225838:	ncalli	array<int>.Count()
000209:0x00225840:	cmpi	i, #return
000209:0x00225850:	bge	0x225930
000213:0x00225858:	imove	setting_defaults, 0x000000
000214:0x00225868:	movefm	[0xb5b90170], m_ParameterUpdateQueueMap
000214:0x00225878:	icall	
000214:0x00225888:	icall	
000214:0x00225898:	move	parameter_idx, #return
000215:0x002258a8:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000215:0x002258b8:	icall	
000215:0x002258c8:	call	
000215:0x002258e8:	movem	p_values, p_total
000215:0x002258f8:	move	setting_defaults, setting_defaults
000215:0x00225908:	release	p_total
000217:0x00225910:	call	
000217:0x00225920:	release	p_values
000217:0x00225928:	jump	0x225800
000219:0x00225930:	call	
000219:0x00225940:	movefm	[0xb5b38888], m_Manager
000219:0x00225950:	call	
000221:0x00225960:	call	
000221:0x00225970:	rts
PPEClassBase::SetFinalParameterValue()
000230:0x00225b30:	call	
000230:0x00225b40:	call	
000230:0x00225b50:	move	var_type, #return
000230:0x00225b60:	release	#return
000231:0x00225b68:	call	
000231:0x00225b78:	call	
000231:0x00225b88:	movem	values, #return
000231:0x00225b98:	release	#return
000231:0x00225ba0:	release	#return
000233:0x00225ba8:	move	#switch, var_type
000233:0x00225bb8:	imove	@m00, 0x000001
000233:0x00225bc8:	cmpi	@m00, #switch
000233:0x00225bd8:	bne	0x225c50
000236:0x00225be0:	movefm	@c01, values
000236:0x00225bf0:	icall	SafeCastType([0xb5bfdc40], @c00, @c01)
000236:0x00225c08:	movec	@c02, @c00
000236:0x00225c18:	move	value_var_bool, param1
000238:0x00225c28:	icall	SetParamByIndex(m_Material, parameter_idx, value_var_bool)
000240:0x00225c40:	jump	0x225f58
000240:0x00225c48:	jump	0x225c78
000240:0x00225c50:	imove	@m00, 0x000002
000240:0x00225c60:	cmpi	@m00, #switch
000240:0x00225c70:	bne	0x225ce8
000243:0x00225c78:	movefm	@c01, values
000243:0x00225c88:	icall	SafeCastType([0xb5b34040], @c00, @c01)
000243:0x00225ca0:	movec	@c02, @c00
000243:0x00225cb0:	move	value_var_int, param1
000245:0x00225cc0:	icall	SetParamByIndex(m_Material, parameter_idx, value_var_int)
000247:0x00225cd8:	jump	0x225f58
000247:0x00225ce0:	jump	0x225d10
000247:0x00225ce8:	imove	@m00, 0x000004
000247:0x00225cf8:	cmpi	@m00, #switch
000247:0x00225d08:	bne	0x225d80
000250:0x00225d10:	movefm	@c01, values
000250:0x00225d20:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000250:0x00225d38:	movec	@c02, @c00
000250:0x00225d48:	move	value_var_float, param1
000252:0x00225d58:	icall	SetParamByIndex(m_Material, parameter_idx, value_var_float)
000254:0x00225d70:	jump	0x225f58
000254:0x00225d78:	jump	0x225da8
000254:0x00225d80:	imove	@m00, 0x000008
000254:0x00225d90:	cmpi	@m00, #switch
000254:0x00225da0:	bne	0x225f58
000257:0x00225da8:	imove	@m00, 0x000000
000257:0x00225db8:	ftv	color[@m00], _f0.000000
000257:0x00225dc8:	inc	@m00
000257:0x00225dd0:	ftv	color[@m00], _f0.000000
000257:0x00225de0:	inc	@m00
000257:0x00225de8:	ftv	color[@m00], _f0.000000
000257:0x00225df8:	inc	@m00
000257:0x00225e00:	ftv	color[@m00], _f0.000000
000257:0x00225e10:	inc	@m00
000258:0x00225e18:	movefm	@c01, values
000258:0x00225e28:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000258:0x00225e40:	movec	@c02, @c00
000258:0x00225e50:	itv	color[0x000000], param1
000259:0x00225e60:	movefm	@c01, values
000259:0x00225e70:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000259:0x00225e88:	movec	@c02, @c00
000259:0x00225e98:	itv	color[0x000001], param2
000260:0x00225ea8:	movefm	@c01, values
000260:0x00225eb8:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000260:0x00225ed0:	movec	@c02, @c00
000260:0x00225ee0:	itv	color[0x000002], param3
000261:0x00225ef0:	movefm	@c01, values
000261:0x00225f00:	icall	SafeCastType([0xb5d0c4d8], @c00, @c01)
000261:0x00225f18:	movec	@c02, @c00
000261:0x00225f28:	itv	color[0x000003], param4
000263:0x00225f38:	icall	SetParamByIndex(m_Material, parameter_idx, color)
000265:0x00225f50:	jump	0x225f58
000265:0x00225f58:	release	values
000265:0x00225f60:	rts
PPEClassBase::ApplyValueChanges()
000272:0x00225fb8:	imove	i, 0x000000
000272:0x00225fc8:	jump	0x225fe8
000272:0x00225fd0:	move	@m00, i
000272:0x00225fe0:	inc	i
000272:0x00225fe8:	movefm	[0xd31561b0], m_UpdatedParameters
000272:0x00225ff8:	ncalli	array<int>.Count()
000272:0x00226000:	cmpi	i, #return
000272:0x00226010:	bge	0x226060
000274:0x00226018:	movefm	[0xd31561b0], m_UpdatedParameters
000274:0x00226028:	icall	
000274:0x00226038:	move	parameter_id, #return
000275:0x00226048:	call	
000275:0x00226058:	jump	0x225fd0
000278:0x00226060:	movefm	[0xd31561b0], m_UpdatedParameters
000278:0x00226070:	ncalli	array<int>.Clear()
000278:0x00226078:	rts
PPEClassBase::InsertUpdatedParameter()
000283:0x00226080:	movefm	[0xd31561b0], m_UpdatedParameters
000283:0x00226090:	icall	
000283:0x002260a0:	move	@m00, #return
000283:0x002260b0:	cmpi	@m00, _i-1
000283:0x002260c0:	bne	0x2260e8
000284:0x002260c8:	movefm	[0xd31561b0], m_UpdatedParameters
000284:0x002260d8:	icall	
000284:0x002260e8:	rts
PPEClassBase::ParamUpdateRemove()
000290:0x002260f0:	movefm	[0xd31561b0], m_ParameterRemovalQueue
000290:0x00226100:	icall	
000290:0x00226110:	move	@m00, #return
000290:0x00226120:	cmpi	@m00, _i-1
000290:0x00226130:	bne	0x226158
000291:0x00226138:	movefm	[0xd31561b0], m_ParameterRemovalQueue
000291:0x00226148:	icall	
000291:0x00226158:	rts
PPEClassBase::SetParameterUpdating()
000297:0x00226160:	movefm	[0xb5b90170], m_ParameterUpdateQueueMap
000297:0x00226170:	icall	
000297:0x00226180:	cmpi	#return, _i0
000297:0x00226190:	bne	0x2261f0
000299:0x00226198:	new	@c00, array<int>
000299:0x002261b8:	pushc	@c00
000299:0x002261c0:	movefm	[0xb5b90170], m_ParameterUpdateQueueMap
000299:0x002261d0:	icall	
000299:0x002261e0:	popc	@c00
000299:0x002261e8:	release	@c00
000302:0x002261f0:	movefm	[0xb5b90170], m_ParameterUpdateQueueMap
000302:0x00226200:	icall	
000302:0x00226210:	icall	
000302:0x00226220:	move	@m00, #return
000302:0x00226230:	cmpi	@m00, _i-1
000302:0x00226240:	bne	0x226278
000304:0x00226248:	movefm	[0xb5b90170], m_ParameterUpdateQueueMap
000304:0x00226258:	icall	
000304:0x00226268:	icall	
000304:0x00226278:	rts
PPEClassBase::ParamUpdateQueueCleanup()
000312:0x002262a8:	imove	i, 0x000000
000312:0x002262b8:	jump	0x2262d8
000312:0x002262c0:	move	@m00, i
000312:0x002262d0:	inc	i
000312:0x002262d8:	movefm	[0xb5b90170], m_ParameterUpdateQueueMap
000312:0x002262e8:	icall	
000312:0x002262f8:	ncalli	array<int>.Count()
000312:0x00226300:	cmpi	i, #return
000312:0x00226310:	bge	0x226398
000314:0x00226318:	movefm	[0xb5b90170], m_ParameterUpdateQueueMap
000314:0x00226328:	icall	
000314:0x00226338:	icall	
000314:0x00226348:	movefm	[0xd31561b0], m_ParameterRemovalQueue
000314:0x00226358:	icall	
000314:0x00226368:	move	@m00, #return
000314:0x00226378:	cmpi	@m00, _i-1
000314:0x00226388:	beq	0x226390
000314:0x00226390:	jump	0x2262c0
000320:0x00226398:	movefm	[0xb5b90170], m_ParameterUpdateQueueMap
000320:0x002263a8:	icall	
000320:0x002263b8:	ncalli	array<int>.Clear()
000320:0x002263c0:	rts
PPEClassBase::ChangeMaterialPathUsed()
000328:0x002263c8:	moves	m_MaterialPath, path
000329:0x002263d8:	movec	m_Material, null
000330:0x002263e8:	call	
000330:0x002263f8:	rts
PPEClassBase::GetCurrentMaterialPath()
000335:0x00226400:	moves	#return, m_MaterialPath
000335:0x00226410:	rts
000335:0x00226418:	rts
PPEClassBase::GetPostProcessEffectID()
000341:0x00226420:	imove	#return, 0x000000
000341:0x00226430:	rts
000341:0x00226438:	rts
PPEClassBase::GetParameterCommandData()
000352:0x00226440:	movefm	[0xb5b90358], m_MaterialParamMapStructure
000352:0x00226450:	icall	
000352:0x00226460:	movetm	#return, #return
000352:0x00226470:	rts
000352:0x00226478:	rts
PPEMedian::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppemedian.c
000010:0x00226480:	imove	#return, 0x000012
000010:0x00226490:	rts
000010:0x00226498:	rts
PPEMedian::GetDefaultMaterialPath()
000015:0x002264c8:	moves	#return, _s'Graphics/Materials/postprocess/median'
000015:0x002264d8:	rts
000015:0x002264e0:	rts
PPEMedian::RegisterMaterialParameters()
000020:0x00226538:	call	
000021:0x00226558:	call	
000021:0x00226578:	rts
PPEColors::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppecolors.c
000016:0x00226580:	imove	#return, 0x00000e
000016:0x00226590:	rts
000016:0x00226598:	rts
PPEColors::GetDefaultMaterialPath()
000021:0x002265c8:	moves	#return, _s'Graphics/Materials/postprocess/colors'
000021:0x002265d8:	rts
000021:0x002265e0:	rts
PPEColors::RegisterMaterialParameters()
000026:0x00226750:	call	
000027:0x00226770:	call	
000028:0x00226790:	call	
000029:0x002267b0:	call	
000030:0x002267d0:	call	
000031:0x002267f8:	call	
000032:0x00226820:	call	
000033:0x00226848:	new	@c01, array<float>
000033:0x00226868:	pushc	@c01
000033:0x00226870:	icall	
000033:0x00226880:	icall	
000033:0x00226890:	icall	
000033:0x002268a0:	icall	
000033:0x002268b0:	call	
000033:0x002268c8:	popc	@c01
000033:0x002268d0:	release	@c01
000033:0x002268d8:	rts
SyncEvents::RegisterEvents()
//scripts/3_Game/syncevents.c
000005:0x00226998:	ncall	GetGame()
000005:0x002269a0:	icall	SafeCastType([0xb5b39920], @c01, #return)
000005:0x002269b8:	movec	dz_game, @c01
000007:0x002269c8:	movec	@c00, dz_game
000007:0x002269d8:	icall	
000008:0x002269e8:	icall	Print(_s'SyncEvents -> RegisterEvents')
000008:0x002269f8:	rts
Param2<int,@SyncData>::Param2()
//scripts/1_Core/param.c
000066:0x00226b80:	move	param1, p1
000067:0x00226b90:	movem	param2, p2
000067:0x00226ba0:	rts
Param2<int,@SyncData>::Serialize()
000072:0x00226ba8:	icall	
000072:0x00226bb8:	cmpi	#return, _i0
000072:0x00226bc8:	beq	0x226c10
000072:0x00226bd0:	icall	
000072:0x00226be0:	cmpi	#return, _i0
000072:0x00226bf0:	beq	0x226c10
000072:0x00226bf8:	imove	#return, 0x000001
000072:0x00226c08:	jump	0x226c20
000072:0x00226c10:	imove	#return, 0x000000
000072:0x00226c20:	rts
000072:0x00226c28:	rts
Param2<int,@SyncData>::Deserializer()
000077:0x00226c30:	icall	
000077:0x00226c40:	cmpi	#return, _i0
000077:0x00226c50:	beq	0x226c98
000077:0x00226c58:	icall	
000077:0x00226c68:	cmpi	#return, _i0
000077:0x00226c78:	beq	0x226c98
000077:0x00226c80:	imove	#return, 0x000001
000077:0x00226c90:	jump	0x226ca8
000077:0x00226c98:	imove	#return, 0x000000
000077:0x00226ca8:	rts
000077:0x00226cb0:	rts
SyncEvents::Event_OnRPC()
//scripts/3_Game/syncevents.c
000013:0x00226d10:	cmpi	rpc_type, RPC_SYNC_EVENT
000013:0x00226d20:	bne	0x226e58
000013:0x00226d28:	ncall	GetGame()
000013:0x00226d30:	cmpc	#return, null
000013:0x00226d40:	beq	0x226e58
000013:0x00226d48:	ncall	GetGame()
000013:0x00226d50:	ncalli	CGame.IsMultiplayer()
000013:0x00226d58:	cmpi	#return, _i0
000013:0x00226d68:	beq	0x226e58
000013:0x00226d70:	ncall	GetGame()
000013:0x00226d78:	ncalli	CGame.IsClient()
000013:0x00226d80:	cmpi	#return, _i0
000013:0x00226d90:	beq	0x226e58
000015:0x00226d98:	movetm	p2, null
000015:0x00226da8:	new	event_data, Param2<int,@SyncData>
000017:0x00226dd0:	icall	
000017:0x00226de0:	cmpi	#return, _i0
000017:0x00226df0:	beq	0x226e50
000019:0x00226df8:	movefm	@c00, event_data
000019:0x00226e08:	move	event_type, param1
000019:0x00226e18:	movefm	@c02, event_data
000019:0x00226e28:	movem	data, param2
000019:0x00226e38:	call	OnSyncEvent(event_type, data, target)
000019:0x00226e50:	release	event_data
000019:0x00226e58:	rts
SyncEvents::OnSyncEvent()
000026:0x00226e88:	move	#switch, event_type
000026:0x00226e98:	imove	@m00, 0x000000
000026:0x00226ea8:	cmpi	@m00, #switch
000026:0x00226eb8:	bne	0x226f00
000030:0x00226ec0:	movefm	@c01, data
000030:0x00226ed0:	movem	player_list, m_ServerPlayerList
000030:0x00226ee0:	call	SyncEvent_OnRecievedPlayerList(player_list)
000031:0x00226ef0:	jump	0x226fc8
000031:0x00226ef8:	jump	0x226f28
000031:0x00226f00:	imove	@m00, 0x000001
000031:0x00226f10:	cmpi	@m00, #switch
000031:0x00226f20:	bne	0x226f68
000035:0x00226f28:	movefm	@c01, data
000035:0x00226f38:	movem	entity_killed_data, m_EntityKill
000035:0x00226f48:	call	SyncEvent_OnEntityKilled(entity_killed_data)
000036:0x00226f58:	jump	0x226fc8
000036:0x00226f60:	jump	0x226f90
000036:0x00226f68:	imove	@m00, 0x000002
000036:0x00226f78:	cmpi	@m00, #switch
000036:0x00226f88:	bne	0x226fc8
000040:0x00226f90:	movefm	@c00, data
000040:0x00226fa0:	move	igante_type, m_SyncInt
000040:0x00226fb0:	call	SyncEvent_OnPlayerIgnitedFireplace(igante_type)
000041:0x00226fc0:	jump	0x226fc8
000041:0x00226fc8:	rts
SyncEvents::SendPlayerList()
000048:0x00227020:	new	data, SyncData
000049:0x00227040:	movefm	@c00, data
000049:0x00227050:	new	m_ServerPlayerList, SyncPlayerList
000050:0x00227070:	movefm	@c00, data
000050:0x00227080:	movefm	[0xb5b3ed58], m_ServerPlayerList
000050:0x00227090:	call	
000052:0x002270a0:	call	SendSyncEvent(RPC_SYNC_EVENT, PlayerList, data, true, _c0)
000052:0x002270c0:	release	data
000052:0x002270c8:	rts
SyncEvents::SendEntityKilled()
000057:0x00227120:	cmpcm	victim, null
000057:0x00227130:	beq	0x227160
000057:0x00227138:	call	
000057:0x00227148:	cmpi	#return, _i0
000057:0x00227158:	bne	0x2271a0
000057:0x00227160:	cmpcm	killer, null
000057:0x00227170:	beq	0x227470
000057:0x00227178:	call	
000057:0x00227188:	cmpi	#return, _i0
000057:0x00227198:	beq	0x227470
000059:0x002271a0:	new	data, SyncData
000060:0x002271c0:	movefm	@c00, data
000060:0x002271d0:	new	m_EntityKill, SyncEntityKillInfo
000062:0x002271f0:	movefm	@c00, data
000062:0x00227200:	movefm	[0xb5b3eb98], m_EntityKill
000062:0x00227210:	movec	@c01, [0xb5b3eb98]
000062:0x00227220:	movem	m_EntityVictim, victim
000063:0x00227230:	movefm	@c00, data
000063:0x00227240:	movefm	[0xb5b3eb98], m_EntityKill
000063:0x00227250:	movec	@c01, [0xb5b3eb98]
000063:0x00227260:	movem	m_EntityKiller, killer
000064:0x00227270:	movefm	@c00, data
000064:0x00227280:	movefm	[0xb5b3eb98], m_EntityKill
000064:0x00227290:	movec	@c01, [0xb5b3eb98]
000064:0x002272a0:	movem	m_EntitySource, source
000065:0x002272b0:	movefm	@c00, data
000065:0x002272c0:	movefm	[0xb5b3eb98], m_EntityKill
000065:0x002272d0:	movec	@c01, [0xb5b3eb98]
000065:0x002272e0:	move	m_IsHeadShot, is_headshot
000069:0x002272f0:	cmpcm	killer, null
000069:0x00227300:	beq	0x2273c8
000069:0x00227308:	call	
000069:0x00227318:	cmpi	#return, _i0
000069:0x00227328:	beq	0x2273c8
000069:0x00227330:	ncalli	EntityAI.GetID()
000069:0x00227338:	move	@m00, #return
000069:0x00227348:	push	#return
000069:0x00227350:	ncalli	EntityAI.GetID()
000069:0x00227358:	move	@m02, #return
000069:0x00227368:	pop	#return
000069:0x00227370:	cmpi	@m00, @m02
000069:0x00227380:	beq	0x2273c8
000071:0x00227388:	movefm	@c02, killer
000071:0x00227398:	icall	SafeCastType([0xb5b266d0], @c01, @c02)
000071:0x002273b0:	movetm	recipient, @c01
000071:0x002273c0:	jump	0x227440
000073:0x002273c8:	cmpcm	victim, null
000073:0x002273d8:	beq	0x227440
000073:0x002273e0:	call	
000073:0x002273f0:	cmpi	#return, _i0
000073:0x00227400:	beq	0x227440
000075:0x00227408:	movefm	@c02, victim
000075:0x00227418:	icall	SafeCastType([0xb5b266d0], @c01, @c02)
000075:0x00227430:	movetm	recipient, @c01
000078:0x00227440:	call	SendSyncEventEx(RPC_SYNC_EVENT, EntityKill, data, true, recipient)
000078:0x00227460:	release	data
000078:0x00227468:	release	recipient
000078:0x00227470:	rts
SyncEvents::SendPlayerIgnatedFireplace()
000084:0x002274a0:	new	data, SyncData
000085:0x002274c0:	movefm	@c00, data
000085:0x002274d0:	move	m_SyncInt, ignite_type
000087:0x002274e0:	ncalli	Man.GetIdentity()
000087:0x002274e8:	call	SendSyncEvent(RPC_SYNC_EVENT, PlayerIgnateFireplayce, data, true, #return)
000087:0x00227508:	release	data
000087:0x00227510:	rts
SyncEvents::SendSyncEvent()
000092:0x00227540:	new	event_data, Param2<int,@SyncData>
000093:0x00227568:	cmpcm	player_target, null
000093:0x00227578:	bne	0x2275c0
000095:0x00227580:	ncall	GetGame()
000095:0x00227588:	movetm	target, null
000095:0x00227598:	call	
000095:0x002275b8:	jump	0x2275f8
000099:0x002275c0:	ncall	GetGame()
000099:0x002275c8:	movetm	target, null
000099:0x002275d8:	call	
000099:0x002275f8:	release	event_data
000099:0x00227600:	rts
SyncEvents::SendSyncEventEx()
000105:0x00227608:	ncalli	Man.GetIdentity()
000105:0x00227610:	call	SendSyncEvent(rpc_event_id, sync_event_type, data, guaranteed, #return)
000105:0x00227630:	rts
SlotToAnimType()
//scripts/3_Game/systems\inventory\handanimated_guards.c
000004:0x002277a8:	new	invloc1, InventoryLocation
000007:0x002277c8:	cmpcm	dst, null
000007:0x002277d8:	beq	0x227828
000007:0x002277e0:	ncalli	InventoryLocation.GetParent()
000007:0x002277e8:	cmpm	#return, null
000007:0x002277f8:	beq	0x227828
000007:0x00227800:	ncalli	InventoryLocation.GetParent()
000007:0x00227808:	ncalli	EntityAI.GetHierarchyRootPlayer()
000007:0x00227810:	cmpm	#return, null
000007:0x00227820:	beq	0x227888
000007:0x00227828:	cmpcm	src, null
000007:0x00227838:	beq	0x2278a8
000007:0x00227840:	ncalli	InventoryLocation.GetParent()
000007:0x00227848:	cmpm	#return, null
000007:0x00227858:	beq	0x2278a8
000007:0x00227860:	ncalli	InventoryLocation.GetParent()
000007:0x00227868:	ncalli	EntityAI.GetHierarchyRootPlayer()
000007:0x00227870:	cmpm	#return, null
000007:0x00227880:	bne	0x2278a8
000008:0x00227888:	imove	#return, 0xffffffff
000008:0x00227898:	release	invloc1
000008:0x002278a0:	rts
000010:0x002278a8:	cmpcm	dst, null
000010:0x002278b8:	beq	0x227948
000010:0x002278c0:	ncalli	InventoryLocation.GetType()
000010:0x002278c8:	move	@m00, #return
000010:0x002278d8:	cmpi	@m00, _i2
000010:0x002278e8:	beq	0x227920
000010:0x002278f0:	ncalli	InventoryLocation.GetType()
000010:0x002278f8:	move	@m00, #return
000010:0x00227908:	cmpi	@m00, _i3
000010:0x00227918:	bne	0x227948
000012:0x00227920:	movefm	[0xb5b9f5b8], dst
000012:0x00227930:	ncalli	InventoryLocation.Copy([0xb5b9f5b8])
000012:0x00227940:	jump	0x2279f0
000015:0x00227948:	ncalli	InventoryLocation.GetType()
000015:0x00227950:	move	@m00, #return
000015:0x00227960:	cmpi	@m00, _i2
000015:0x00227970:	beq	0x2279a8
000015:0x00227978:	ncalli	InventoryLocation.GetType()
000015:0x00227980:	move	@m00, #return
000015:0x00227990:	cmpi	@m00, _i3
000015:0x002279a0:	bne	0x2279d0
000017:0x002279a8:	movefm	[0xb5b9f5b8], src
000017:0x002279b8:	ncalli	InventoryLocation.Copy([0xb5b9f5b8])
000017:0x002279c8:	jump	0x2279f0
000022:0x002279d0:	imove	#return, 0xffffffff
000022:0x002279e0:	release	invloc1
000022:0x002279e8:	rts
000025:0x002279f0:	imove	val, 0xffffffff
000026:0x00227a00:	ncalli	InventoryLocation.GetItem()
000026:0x00227a08:	cmpm	#return, null
000026:0x00227a18:	beq	0x227a88
000026:0x00227a20:	ncalli	InventoryLocation.GetItem()
000026:0x00227a28:	call	
000026:0x00227a40:	move	val, value
000026:0x00227a50:	cmpi	#return, _i0
000026:0x00227a60:	beq	0x227a88
000028:0x00227a68:	move	#return, val
000028:0x00227a78:	release	invloc1
000028:0x00227a80:	rts
000031:0x00227a88:	ncalli	InventoryLocation.GetType()
000031:0x00227a90:	move	@m00, #return
000031:0x00227aa0:	cmpi	@m00, _i2
000031:0x00227ab0:	bne	0x227fe0
000034:0x00227ab8:	ncalli	InventoryLocation.GetSlot()
000034:0x00227ac0:	move	#switch, #return
000034:0x00227ad0:	imove	@m00, 0xd29fa60a
000034:0x00227ae0:	cmpi	@m00, #switch
000034:0x00227af0:	bne	0x227c28
000038:0x00227af8:	ncalli	InventoryLocation.GetItem()
000038:0x00227b00:	cmpm	#return, null
000038:0x00227b10:	beq	0x227b90
000038:0x00227b18:	pushc	#return
000038:0x00227b20:	ncalli	InventoryLocation.GetItem()
000038:0x00227b28:	movec	@c00, #return
000038:0x00227b38:	popc	#return
000038:0x00227b40:	call	
000038:0x00227b50:	cmpi	#return, _i0
000038:0x00227b60:	beq	0x227b90
000040:0x00227b68:	imove	#return, 0x000001
000040:0x00227b78:	release	invloc1
000040:0x00227b80:	rts
000040:0x00227b88:	jump	0x227c00
000042:0x00227b90:	ncalli	InventoryLocation.GetItem()
000042:0x00227b98:	cmpm	#return, null
000042:0x00227ba8:	beq	0x227c00
000042:0x00227bb0:	ncalli	InventoryLocation.GetItem()
000042:0x00227bb8:	call	
000042:0x00227bc8:	cmpi	#return, _i0
000042:0x00227bd8:	beq	0x227c00
000044:0x00227be0:	imove	#return, 0x000002
000044:0x00227bf0:	release	invloc1
000044:0x00227bf8:	rts
000046:0x00227c00:	imove	#return, 0x000000
000046:0x00227c10:	release	invloc1
000046:0x00227c18:	rts
000046:0x00227c20:	jump	0x227c50
000046:0x00227c28:	imove	@m00, 0xc7d7f58
000046:0x00227c38:	cmpi	@m00, #switch
000046:0x00227c48:	bne	0x227d60
000050:0x00227c50:	ncalli	InventoryLocation.GetItem()
000050:0x00227c58:	cmpm	#return, null
000050:0x00227c68:	beq	0x227cc8
000050:0x00227c70:	ncalli	InventoryLocation.GetItem()
000050:0x00227c78:	call	
000050:0x00227c88:	cmpi	#return, _i0
000050:0x00227c98:	beq	0x227cc8
000052:0x00227ca0:	imove	#return, 0x000004
000052:0x00227cb0:	release	invloc1
000052:0x00227cb8:	rts
000052:0x00227cc0:	jump	0x227d38
000054:0x00227cc8:	ncalli	InventoryLocation.GetItem()
000054:0x00227cd0:	cmpm	#return, null
000054:0x00227ce0:	beq	0x227d38
000054:0x00227ce8:	ncalli	InventoryLocation.GetItem()
000054:0x00227cf0:	call	
000054:0x00227d00:	cmpi	#return, _i0
000054:0x00227d10:	beq	0x227d38
000056:0x00227d18:	imove	#return, 0x000005
000056:0x00227d28:	release	invloc1
000056:0x00227d30:	rts
000058:0x00227d38:	imove	#return, 0x000003
000058:0x00227d48:	release	invloc1
000058:0x00227d50:	rts
000058:0x00227d58:	jump	0x227d88
000058:0x00227d60:	imove	@m00, 0xdb01d71b
000058:0x00227d70:	cmpi	@m00, #switch
000058:0x00227d80:	bne	0x227f10
000062:0x00227d88:	ncalli	InventoryLocation.GetParent()
000062:0x00227d90:	movetm	parent_item, #return
000064:0x00227da0:	cmpcm	parent_item, null
000064:0x00227db0:	beq	0x227dd0
000065:0x00227db8:	ncalli	EntityAI.GetHierarchyRootPlayer()
000065:0x00227dc0:	movetm	owner, #return
000066:0x00227dd0:	cmpcm	owner, null
000066:0x00227de0:	bne	0x227e18
000067:0x00227de8:	imove	#return, 0xffffffff
000067:0x00227df8:	release	parent_item
000067:0x00227e00:	release	owner
000067:0x00227e08:	release	invloc1
000067:0x00227e10:	rts
000069:0x00227e18:	ncalli	Man.GetInventory()
000069:0x00227e20:	ncalli	GameInventory.FindAttachment(HIPS)
000069:0x00227e30:	movetm	item1, #return
000070:0x00227e40:	ncalli	EntityAI.GetHierarchyParent()
000070:0x00227e48:	movetm	item2, #return
000071:0x00227e58:	cmpcm	owner, null
000071:0x00227e68:	beq	0x227ec8
000071:0x00227e70:	cmpm	item1, item2
000071:0x00227e80:	bne	0x227ec8
000073:0x00227e88:	imove	#return, 0x000006
000073:0x00227e98:	release	parent_item
000073:0x00227ea0:	release	owner
000073:0x00227ea8:	release	item1
000073:0x00227eb0:	release	item2
000073:0x00227eb8:	release	invloc1
000073:0x00227ec0:	rts
000075:0x00227ec8:	imove	#return, 0x000007
000075:0x00227ed8:	release	parent_item
000075:0x00227ee0:	release	owner
000075:0x00227ee8:	release	item1
000075:0x00227ef0:	release	item2
000075:0x00227ef8:	release	invloc1
000075:0x00227f00:	rts
000075:0x00227f08:	jump	0x227f38
000075:0x00227f10:	imove	@m00, 0xc4b3255
000075:0x00227f20:	cmpi	@m00, #switch
000075:0x00227f30:	bne	0x227f78
000078:0x00227f38:	imove	#return, 0x000008
000078:0x00227f48:	release	parent_item
000078:0x00227f50:	release	owner
000078:0x00227f58:	release	item1
000078:0x00227f60:	release	item2
000078:0x00227f68:	release	invloc1
000078:0x00227f70:	rts
000090:0x00227f78:	imove	#return, 0x000009
000090:0x00227f88:	release	parent_item
000090:0x00227f90:	release	owner
000090:0x00227f98:	release	item1
000090:0x00227fa0:	release	item2
000090:0x00227fa8:	release	invloc1
000090:0x00227fb0:	rts
000090:0x00227fb8:	release	parent_item
000090:0x00227fc0:	release	owner
000090:0x00227fc8:	release	item1
000090:0x00227fd0:	release	item2
000090:0x00227fd8:	jump	0x2281c8
000096:0x00227fe0:	ncalli	InventoryLocation.GetType()
000096:0x00227fe8:	move	@m00, #return
000096:0x00227ff8:	cmpi	@m00, _i3
000096:0x00228008:	bne	0x2281c8
000098:0x00228010:	ncalli	InventoryLocation.GetItem()
000098:0x00228018:	cmpm	#return, null
000098:0x00228028:	beq	0x2281a8
000098:0x00228030:	ncalli	InventoryLocation.GetItem()
000098:0x00228038:	ncalli	EntityAI.GetInventory()
000098:0x00228040:	ncalli	GameInventory.HasInventorySlot(SHOULDER)
000098:0x00228050:	cmpi	#return, _i0
000098:0x00228060:	bne	0x2280a0
000098:0x00228068:	ncalli	InventoryLocation.GetItem()
000098:0x00228070:	ncalli	EntityAI.GetInventory()
000098:0x00228078:	ncalli	GameInventory.HasInventorySlot(MELEE)
000098:0x00228088:	cmpi	#return, _i0
000098:0x00228098:	beq	0x2281a8
000101:0x002280a0:	ncalli	InventoryLocation.GetItem()
000101:0x002280a8:	cmpm	#return, null
000101:0x002280b8:	beq	0x228118
000101:0x002280c0:	ncalli	InventoryLocation.GetItem()
000101:0x002280c8:	call	
000101:0x002280d8:	cmpi	#return, _i0
000101:0x002280e8:	beq	0x228118
000103:0x002280f0:	imove	#return, 0x000004
000103:0x00228100:	release	invloc1
000103:0x00228108:	rts
000103:0x00228110:	jump	0x228188
000105:0x00228118:	ncalli	InventoryLocation.GetItem()
000105:0x00228120:	cmpm	#return, null
000105:0x00228130:	beq	0x228188
000105:0x00228138:	ncalli	InventoryLocation.GetItem()
000105:0x00228140:	call	
000105:0x00228150:	cmpi	#return, _i0
000105:0x00228160:	beq	0x228188
000107:0x00228168:	imove	#return, 0x000005
000107:0x00228178:	release	invloc1
000107:0x00228180:	rts
000109:0x00228188:	imove	#return, 0x000003
000109:0x00228198:	release	invloc1
000109:0x002281a0:	rts
000112:0x002281a8:	imove	#return, 0x000009
000112:0x002281b8:	release	invloc1
000112:0x002281c0:	rts
000114:0x002281c8:	imove	#return, 0xffffffff
000114:0x002281d8:	release	invloc1
000114:0x002281e0:	rts
000114:0x002281e8:	release	invloc1
000114:0x002281f0:	rts
SelectAnimationOfTakeToHands()
000119:0x00228270:	call	
000119:0x00228280:	cmpi	#return, _i0
000119:0x00228290:	beq	0x2282c0
000120:0x00228298:	imove	#return, 0x000000
000120:0x002282a8:	move	animType, animType
000120:0x002282b8:	rts
000121:0x002282c0:	ncalli	InventoryLocation.GetType()
000121:0x002282c8:	move	@m00, #return
000121:0x002282d8:	cmpi	@m00, _i1
000121:0x002282e8:	bne	0x228318
000122:0x002282f0:	imove	#return, 0x000000
000122:0x00228300:	move	animType, animType
000122:0x00228310:	rts
000124:0x00228318:	ncalli	InventoryLocation.GetItem()
000124:0x00228320:	ncalli	EntityAI.GetHierarchyRootPlayer()
000124:0x00228328:	movec	@c00, #return
000124:0x00228338:	cmpmc	@c00, player
000124:0x00228348:	bne	0x228450
000126:0x00228350:	call	SlotToAnimType(player, src, _c0)
000126:0x00228368:	move	animType, #return
000127:0x00228378:	cmpi	animType, _i-1
000127:0x00228388:	beq	0x228450
000129:0x00228390:	icall	ToString(animType)
000129:0x002283a0:	adds	@s03, _s'[hndfsm] SelectAnimationOfTakeToHands - selected animType=', #return
000129:0x002283b0:	moves	@s02, @s03
000129:0x002283c0:	adds	@s02, @s02, _s' for item='
000129:0x002283d0:	moves	@s01, @s02
000129:0x002283e0:	ncalli	InventoryLocation.GetItem()
000129:0x002283e8:	icall	ToString(#return)
000129:0x002283f8:	adds	@s01, @s01, #return
000129:0x00228408:	moves	@s00, @s01
000129:0x00228418:	call	hndDebugPrint(@s00)
000130:0x00228428:	imove	#return, 0x000001
000130:0x00228438:	move	animType, animType
000130:0x00228448:	rts
000133:0x00228450:	call	hndDebugPrint(_s'[hndfsm] SelectAnimationOfTakeToHands - no animation')
000134:0x00228460:	imove	#return, 0x000000
000134:0x00228470:	move	animType, animType
000134:0x00228480:	rts
000134:0x00228488:	move	animType, animType
000134:0x00228498:	rts
SelectAnimationOfMoveFromHands()
000139:0x002284f0:	call	
000139:0x00228500:	cmpi	#return, _i0
000139:0x00228510:	beq	0x228540
000140:0x00228518:	imove	#return, 0x000000
000140:0x00228528:	move	animType, animType
000140:0x00228538:	rts
000142:0x00228540:	ncalli	InventoryLocation.GetItem()
000142:0x00228548:	ncalli	EntityAI.GetHierarchyRootPlayer()
000142:0x00228550:	movec	@c00, #return
000142:0x00228560:	cmpmc	@c00, player
000142:0x00228570:	bne	0x228678
000144:0x00228578:	call	SlotToAnimType(player, dst, _c0)
000144:0x00228590:	move	animType, #return
000145:0x002285a0:	cmpi	animType, _i-1
000145:0x002285b0:	beq	0x228678
000147:0x002285b8:	icall	ToString(animType)
000147:0x002285c8:	adds	@s03, _s'[hndfsm] SelectAnimationOfMoveFromHands guard - selected animType=', #return
000147:0x002285d8:	moves	@s02, @s03
000147:0x002285e8:	adds	@s02, @s02, _s' for item='
000147:0x002285f8:	moves	@s01, @s02
000147:0x00228608:	ncalli	InventoryLocation.GetItem()
000147:0x00228610:	icall	ToString(#return)
000147:0x00228620:	adds	@s01, @s01, #return
000147:0x00228630:	moves	@s00, @s01
000147:0x00228640:	call	hndDebugPrint(@s00)
000148:0x00228650:	imove	#return, 0x000001
000148:0x00228660:	move	animType, animType
000148:0x00228670:	rts
000151:0x00228678:	call	hndDebugPrint(_s'[hndfsm] SelectAnimationOfMoveFromHands - no animation')
000152:0x00228688:	imove	#return, 0x000000
000152:0x00228698:	move	animType, animType
000152:0x002286a8:	rts
000152:0x002286b0:	move	animType, animType
000152:0x002286c0:	rts
SelectAnimationOfForceSwapInHands()
000157:0x00228830:	call	
000157:0x00228840:	cmpi	#return, _i0
000157:0x00228850:	beq	0x228890
000158:0x00228858:	imove	#return, 0x000000
000158:0x00228868:	move	animType1, animType1
000158:0x00228878:	move	animType2, animType2
000158:0x00228888:	rts
000160:0x00228890:	call	DumpToStringNullSafe(old_src)
000160:0x002288a0:	adds	@s07, _s'[hndfsm] SlotToAnimType - old_src=', #return
000160:0x002288b0:	moves	@s06, @s07
000160:0x002288c0:	adds	@s06, @s06, _s' new_src='
000160:0x002288d0:	moves	@s05, @s06
000160:0x002288e0:	call	DumpToStringNullSafe(new_src)
000160:0x002288f0:	adds	@s05, @s05, #return
000160:0x00228900:	moves	@s04, @s05
000160:0x00228910:	adds	@s04, @s04, _s' old_dst='
000160:0x00228920:	moves	@s03, @s04
000160:0x00228930:	call	DumpToStringNullSafe(old_dst)
000160:0x00228940:	adds	@s03, @s03, #return
000160:0x00228950:	moves	@s02, @s03
000160:0x00228960:	adds	@s02, @s02, _s' new_dst='
000160:0x00228970:	moves	@s01, @s02
000160:0x00228980:	call	DumpToStringNullSafe(new_dst)
000160:0x00228990:	adds	@s01, @s01, #return
000160:0x002289a0:	moves	@s00, @s01
000160:0x002289b0:	call	hndDebugPrint(@s00)
000162:0x002289c0:	ncalli	InventoryLocation.GetItem()
000162:0x002289c8:	ncalli	EntityAI.GetHierarchyRootPlayer()
000162:0x002289d0:	movec	@c00, #return
000162:0x002289e0:	cmpmc	@c00, player
000162:0x002289f0:	beq	0x228a30
000162:0x002289f8:	ncalli	InventoryLocation.GetItem()
000162:0x00228a00:	ncalli	EntityAI.GetHierarchyRootPlayer()
000162:0x00228a08:	movec	@c00, #return
000162:0x00228a18:	cmpmc	@c00, player
000162:0x00228a28:	bne	0x228c48
000164:0x00228a30:	call	SlotToAnimType(player, old_src, old_dst)
000164:0x00228a48:	move	animType1, #return
000165:0x00228a58:	call	SlotToAnimType(player, new_src, new_dst)
000165:0x00228a70:	move	animType2, #return
000168:0x00228a80:	cmpi	animType1, _i-1
000168:0x00228a90:	beq	0x228c48
000168:0x00228a98:	cmpi	animType2, _i-1
000168:0x00228aa8:	beq	0x228c48
000170:0x00228ab0:	icall	ToString(animType1)
000170:0x00228ac0:	adds	@s07, _s'[hndfsm] SelectAnimationOfForceSwapInHands guard - selected animType1=', #return
000170:0x00228ad0:	moves	@s06, @s07
000170:0x00228ae0:	adds	@s06, @s06, _s' animType2='
000170:0x00228af0:	moves	@s05, @s06
000170:0x00228b00:	icall	ToString(animType2)
000170:0x00228b10:	adds	@s05, @s05, #return
000170:0x00228b20:	moves	@s04, @s05
000170:0x00228b30:	adds	@s04, @s04, _s' for old_item='
000170:0x00228b40:	moves	@s03, @s04
000170:0x00228b50:	ncalli	InventoryLocation.GetItem()
000170:0x00228b58:	icall	ToString(#return)
000170:0x00228b68:	adds	@s03, @s03, #return
000170:0x00228b78:	moves	@s02, @s03
000170:0x00228b88:	adds	@s02, @s02, _s' for new_item='
000170:0x00228b98:	moves	@s01, @s02
000170:0x00228ba8:	pushc	#return
000170:0x00228bb0:	ncalli	InventoryLocation.GetItem()
000170:0x00228bb8:	movec	@c00, #return
000170:0x00228bc8:	popc	#return
000170:0x00228bd0:	icall	ToString(@c00)
000170:0x00228be0:	adds	@s01, @s01, #return
000170:0x00228bf0:	moves	@s00, @s01
000170:0x00228c00:	call	hndDebugPrint(@s00)
000171:0x00228c10:	imove	#return, 0x000001
000171:0x00228c20:	move	animType1, animType1
000171:0x00228c30:	move	animType2, animType2
000171:0x00228c40:	rts
000180:0x00228c48:	call	hndDebugPrint(_s'[hndfsm] SelectAnimationOfForceSwapInHands - no animation')
000181:0x00228c58:	imove	#return, 0x000000
000181:0x00228c68:	move	animType1, animType1
000181:0x00228c78:	move	animType2, animType2
000181:0x00228c88:	rts
000181:0x00228c90:	move	animType1, animType1
000181:0x00228ca0:	move	animType2, animType2
000181:0x00228cb0:	rts
HandSelectAnimationOfTakeToHandsEvent::GuardCondition()
000191:0x00228ce0:	imove	animType, 0xffffffff
000192:0x00228cf0:	movefm	@c01, e
000192:0x00228d00:	movem	player, m_Player
000192:0x00228d10:	call	
000192:0x00228d20:	call	
000192:0x00228d30:	call	SelectAnimationOfTakeToHands(player, #return, #return, animType)
000192:0x00228d50:	move	animType, animType
000192:0x00228d60:	cmpi	#return, _i0
000192:0x00228d70:	beq	0x228dc0
000194:0x00228d78:	movefm	@c00, e
000194:0x00228d88:	move	m_AnimationID, animType
000195:0x00228d98:	imove	#return, 0x000001
000195:0x00228da8:	release	#return
000195:0x00228db0:	release	#return
000195:0x00228db8:	rts
000195:0x00228dc0:	release	#return
000195:0x00228dc8:	release	#return
000197:0x00228dd0:	imove	#return, 0x000000
000197:0x00228de0:	rts
000197:0x00228de8:	rts
HandSelectAnimationOfMoveFromHandsEvent::HandSelectAnimationOfMoveFromHandsEvent()
000207:0x00228df0:	movem	m_Player, p
000207:0x00228e00:	rts
HandSelectAnimationOfMoveFromHandsEvent::GuardCondition()
000212:0x00228ea8:	movefm	[0xb5b266d0], m_Player
000212:0x00228eb8:	call	
000212:0x00228ec8:	ncalli	HumanInventory.GetEntityInHands()
000212:0x00228ed0:	movetm	eai, #return
000212:0x00228ee0:	release	#return
000213:0x00228ee8:	cmpcm	eai, null
000213:0x00228ef8:	beq	0x229110
000215:0x00228f00:	new	src, InventoryLocation
000216:0x00228f20:	ncalli	EntityAI.GetInventory()
000216:0x00228f28:	movefm	[0xb5bad1f8], src
000216:0x00228f38:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000216:0x00228f48:	cmpi	#return, _i0
000216:0x00228f58:	beq	0x229108
000218:0x00228f60:	movefm	[0xb5bad978], src
000218:0x00228f70:	call	
000218:0x00228f80:	movefm	[0xb5bad9a0], #return
000218:0x00228f90:	ncall	LocationCanMoveEntity([0xb5bad978], [0xb5bad9a0])
000218:0x00228fa0:	cmpi	#return, _i0
000218:0x00228fb0:	bne	0x228ff8
000220:0x00228fb8:	call	hndDebugPrint(_s'[hndfsm] HandSelectAnimationOfMoveFromHandsEvent - rejected')
000221:0x00228fc8:	imove	#return, 0x000000
000221:0x00228fd8:	release	#return
000221:0x00228fe0:	release	src
000221:0x00228fe8:	release	eai
000221:0x00228ff0:	rts
000221:0x00228ff8:	release	#return
000224:0x00229000:	imove	animType, 0xffffffff
000225:0x00229010:	movefm	@c01, e
000225:0x00229020:	movem	player, m_Player
000225:0x00229030:	call	
000225:0x00229040:	call	SelectAnimationOfMoveFromHands(player, src, #return, animType)
000225:0x00229060:	move	animType, animType
000225:0x00229070:	cmpi	#return, _i0
000225:0x00229080:	beq	0x2290d8
000227:0x00229088:	movefm	@c00, e
000227:0x00229098:	move	m_AnimationID, animType
000228:0x002290a8:	imove	#return, 0x000001
000228:0x002290b8:	release	#return
000228:0x002290c0:	release	src
000228:0x002290c8:	release	eai
000228:0x002290d0:	rts
000228:0x002290d8:	release	#return
000230:0x002290e0:	imove	#return, 0x000000
000230:0x002290f0:	release	src
000230:0x002290f8:	release	eai
000230:0x00229100:	rts
000230:0x00229108:	release	src
000233:0x00229110:	imove	#return, 0x000000
000233:0x00229120:	release	eai
000233:0x00229128:	rts
000233:0x00229130:	release	eai
000233:0x00229138:	rts
HandSelectAnimationOfForceSwapInHandsEvent::HandSelectAnimationOfForceSwapInHandsEvent()
000241:0x00229140:	movem	m_Player, p
000241:0x00229150:	rts
HandSelectAnimationOfForceSwapInHandsEvent::ProcessSwapEvent()
000245:0x002291a8:	movefm	@c02, e
000245:0x002291b8:	icall	SafeCastType([0xb5b36208], @c01, @c02)
000245:0x002291d0:	movetm	es, @c01
000246:0x002291e0:	cmpcm	es, null
000246:0x002291f0:	beq	0x229320
000247:0x002291f8:	movefm	@c01, e
000247:0x00229208:	movem	player, m_Player
000247:0x00229218:	movefm	@c02, es
000247:0x00229228:	movem	old_src, m_Src
000247:0x00229238:	movefm	@c03, es
000247:0x00229248:	movem	new_src, m_Src2
000247:0x00229258:	movefm	@c04, es
000247:0x00229268:	movem	old_dst, m_Dst
000247:0x00229278:	movefm	@c05, es
000247:0x00229288:	movem	new_dst, m_Dst2
000247:0x00229298:	call	SelectAnimationOfForceSwapInHands(player, old_src, new_src, old_dst, new_dst, animType1, animType2)
000247:0x002292c0:	move	animType1, animType1
000247:0x002292d0:	move	animType2, animType2
000247:0x002292e0:	move	#return, #return
000247:0x002292f0:	release	es
000247:0x002292f8:	move	animType1, animType1
000247:0x00229308:	move	animType2, animType2
000247:0x00229318:	rts
000248:0x00229320:	call	Error(_s'HandSelectAnimationOfForceSwapInHandsEvent - not an swap event')
000249:0x00229330:	imove	#return, 0x000000
000249:0x00229340:	release	es
000249:0x00229348:	move	animType1, animType1
000249:0x00229358:	move	animType2, animType2
000249:0x00229368:	rts
000249:0x00229370:	release	es
000249:0x00229378:	move	animType1, animType1
000249:0x00229388:	move	animType2, animType2
000249:0x00229398:	rts
HandSelectAnimationOfForceSwapInHandsEvent::GuardCondition()
000254:0x00229530:	movefm	@c02, e
000254:0x00229540:	icall	SafeCastType([0xb5b36268], @c01, @c02)
000254:0x00229558:	movetm	es, @c01
000255:0x00229568:	cmpcm	es, null
000255:0x00229578:	beq	0x2299d0
000257:0x00229580:	call	
000257:0x00229590:	adds	@s01, _s'[hndfsm] HandSelectAnimationOfForceSwapInHandsEvent FSwap e=', #return
000257:0x002295a0:	moves	@s00, @s01
000257:0x002295b0:	call	hndDebugPrint(@s00)
000259:0x002295c0:	movefm	@c00, es
000259:0x002295d0:	movefm	[0xb5b18280], m_Src2
000259:0x002295e0:	ncalli	InventoryLocation.IsValid()
000259:0x002295e8:	cmpi	#return, _i0
000259:0x002295f8:	beq	0x229640
000259:0x00229600:	movefm	@c00, es
000259:0x00229610:	movefm	[0xb5b18280], m_Src
000259:0x00229620:	ncalli	InventoryLocation.IsValid()
000259:0x00229628:	cmpi	#return, _i0
000259:0x00229638:	bne	0x229670
000261:0x00229640:	call	Error(_s'[hndfsm] HandSelectAnimationOfForceSwapInHandsEvent - invalid item source')
000262:0x00229650:	imove	#return, 0x000000
000262:0x00229660:	release	es
000262:0x00229668:	rts
000265:0x00229670:	imove	allow, 0x000000
000266:0x00229680:	call	
000266:0x00229690:	ncalli	InventoryLocation.GetItem()
000266:0x00229698:	movefm	@c01, es
000266:0x002296a8:	movefm	[0xb5b18280], m_Src2
000266:0x002296b8:	pushc	#return
000266:0x002296c0:	ncalli	InventoryLocation.GetItem()
000266:0x002296c8:	movec	@c02, #return
000266:0x002296d8:	popc	#return
000266:0x002296e0:	call	CanSwapEntitiesEx(#return, @c02)
000266:0x002296f8:	cmpi	#return, _i0
000266:0x00229708:	beq	0x229728
000267:0x00229710:	imove	allow, 0x000001
000267:0x00229720:	jump	0x2298c0
000268:0x00229728:	movefm	@c00, es
000268:0x00229738:	cmpcm	m_Dst2, null
000268:0x00229748:	beq	0x2298c0
000270:0x00229750:	call	
000270:0x00229760:	ncalli	InventoryLocation.GetItem()
000270:0x00229768:	movefm	@c01, es
000270:0x00229778:	movem	item1_dst, m_Dst
000270:0x00229788:	movefm	@c02, es
000270:0x00229798:	movefm	[0xb5b18280], m_Src2
000270:0x002297a8:	pushc	#return
000270:0x002297b0:	ncalli	InventoryLocation.GetItem()
000270:0x002297b8:	movec	@c03, #return
000270:0x002297c8:	popc	#return
000270:0x002297d0:	movefm	@c04, es
000270:0x002297e0:	movem	item2_dst, m_Dst2
000270:0x002297f0:	call	CanForceSwapEntitiesEx(#return, item1_dst, @c03, item2_dst)
000270:0x00229810:	movem	m_Dst2, item2_dst
000270:0x00229820:	release	item2_dst
000270:0x00229828:	cmpi	#return, _i0
000270:0x00229838:	bne	0x2298a8
000272:0x00229840:	movefm	@c01, es
000272:0x00229850:	movem	loc, m_Dst2
000272:0x00229860:	call	DumpToStringNullSafe(loc)
000272:0x00229870:	adds	@s01, _s'[hndfsm] HandSelectAnimationOfForceSwapInHandsEvent - no room at dst=', #return
000272:0x00229880:	moves	@s00, @s01
000272:0x00229890:	call	Error(@s00)
000272:0x002298a0:	jump	0x2298b8
000276:0x002298a8:	imove	allow, 0x000001
000276:0x002298b8:	release	#return
000276:0x002298c0:	release	#return
000280:0x002298c8:	cmpi	allow, _i0
000280:0x002298d8:	beq	0x2299b8
000282:0x002298e0:	imove	animType1, 0xffffffff
000283:0x002298f0:	imove	animType2, 0xffffffff
000284:0x00229900:	call	
000284:0x00229918:	move	animType1, animType1
000284:0x00229928:	move	animType2, animType2
000284:0x00229938:	cmpi	#return, _i0
000284:0x00229948:	beq	0x2299b0
000286:0x00229950:	movefm	@c00, e
000286:0x00229960:	move	m_AnimationID, animType1
000287:0x00229970:	movefm	@c00, es
000287:0x00229980:	move	m_Animation2ID, animType2
000288:0x00229990:	imove	#return, 0x000001
000288:0x002299a0:	release	es
000288:0x002299a8:	rts
000288:0x002299b0:	jump	0x2299c8
000292:0x002299b8:	call	Error(_s'[hndfsm] HandSelectAnimationOfForceSwapInHandsEvent - m_HasRoomGuard.GuardCondition failed')
000292:0x002299c8:	jump	0x2299e0
000295:0x002299d0:	call	Error(_s'[hndfsm] HandSelectAnimationOfForceSwapInHandsEvent - not a swap event')
000296:0x002299e0:	imove	#return, 0x000000
000296:0x002299f0:	release	es
000296:0x002299f8:	rts
000296:0x00229a00:	release	es
000296:0x00229a08:	rts
HandSelectAnimationOfSwapInHandsEvent::GuardCondition()
000304:0x00229ab0:	movefm	@c02, e
000304:0x00229ac0:	icall	SafeCastType([0xb5b36208], @c01, @c02)
000304:0x00229ad8:	movetm	es, @c01
000305:0x00229ae8:	cmpcm	es, null
000305:0x00229af8:	beq	0x229bd8
000307:0x00229b00:	imove	animType1, 0xffffffff
000308:0x00229b10:	imove	animType2, 0xffffffff
000309:0x00229b20:	call	
000309:0x00229b38:	move	animType1, animType1
000309:0x00229b48:	move	animType2, animType2
000309:0x00229b58:	cmpi	#return, _i0
000309:0x00229b68:	beq	0x229bd0
000311:0x00229b70:	movefm	@c00, e
000311:0x00229b80:	move	m_AnimationID, animType1
000312:0x00229b90:	movefm	@c00, es
000312:0x00229ba0:	move	m_Animation2ID, animType2
000313:0x00229bb0:	imove	#return, 0x000001
000313:0x00229bc0:	release	es
000313:0x00229bc8:	rts
000313:0x00229bd0:	jump	0x229be8
000317:0x00229bd8:	call	Error(_s'[hndfsm] HandSelectAnimationOfSwapInHandsEvent - not a swap event')
000318:0x00229be8:	imove	#return, 0x000000
000318:0x00229bf8:	release	es
000318:0x00229c00:	rts
000318:0x00229c08:	release	es
000318:0x00229c10:	rts
JsonUndergroundAreaBreadcrumb::GetPosition()
//scripts/3_Game/undergroundarealoader.c
000011:0x00229c18:	movefm	[0xd3156238], Position
000011:0x00229c28:	icall	
000011:0x00229c38:	movefm	[0xd3156238], Position
000011:0x00229c48:	push	#return
000011:0x00229c50:	icall	
000011:0x00229c60:	move	@f01, #return
000011:0x00229c70:	pop	#return
000011:0x00229c78:	movefm	[0xd3156238], Position
000011:0x00229c88:	push	#return
000011:0x00229c90:	icall	
000011:0x00229ca0:	move	@f02, #return
000011:0x00229cb0:	pop	#return
000011:0x00229cb8:	ncall	Vector(#return, @f01, @f02)
000011:0x00229cd0:	movev	#return, #return
000011:0x00229ce0:	rts
000011:0x00229ce8:	rts
JsonUndergroundAreaTriggerData::GetPosition()
000024:0x00229cf0:	movefm	[0xd3156238], Position
000024:0x00229d00:	icall	
000024:0x00229d10:	movefm	[0xd3156238], Position
000024:0x00229d20:	push	#return
000024:0x00229d28:	icall	
000024:0x00229d38:	move	@f01, #return
000024:0x00229d48:	pop	#return
000024:0x00229d50:	movefm	[0xd3156238], Position
000024:0x00229d60:	push	#return
000024:0x00229d68:	icall	
000024:0x00229d78:	move	@f02, #return
000024:0x00229d88:	pop	#return
000024:0x00229d90:	ncall	Vector(#return, @f01, @f02)
000024:0x00229da8:	movev	#return, #return
000024:0x00229db8:	rts
000024:0x00229dc0:	rts
JsonUndergroundAreaTriggerData::GetOrientation()
000029:0x00229dc8:	movefm	[0xd3156238], Orientation
000029:0x00229dd8:	icall	
000029:0x00229de8:	movefm	[0xd3156238], Orientation
000029:0x00229df8:	push	#return
000029:0x00229e00:	icall	
000029:0x00229e10:	move	@f01, #return
000029:0x00229e20:	pop	#return
000029:0x00229e28:	movefm	[0xd3156238], Orientation
000029:0x00229e38:	push	#return
000029:0x00229e40:	icall	
000029:0x00229e50:	move	@f02, #return
000029:0x00229e60:	pop	#return
000029:0x00229e68:	ncall	Vector(#return, @f01, @f02)
000029:0x00229e80:	movev	#return, #return
000029:0x00229e90:	rts
000029:0x00229e98:	rts
JsonUndergroundAreaTriggerData::GetSize()
000033:0x00229ea0:	movefm	[0xd3156238], Size
000033:0x00229eb0:	icall	
000033:0x00229ec0:	movefm	[0xd3156238], Size
000033:0x00229ed0:	push	#return
000033:0x00229ed8:	icall	
000033:0x00229ee8:	move	@f01, #return
000033:0x00229ef8:	pop	#return
000033:0x00229f00:	movefm	[0xd3156238], Size
000033:0x00229f10:	push	#return
000033:0x00229f18:	icall	
000033:0x00229f28:	move	@f02, #return
000033:0x00229f38:	pop	#return
000033:0x00229f40:	ncall	Vector(#return, @f01, @f02)
000033:0x00229f58:	movev	#return, #return
000033:0x00229f68:	rts
000033:0x00229f70:	rts
JsonFileLoader<JsonUndergroundTriggers>::JsonLoadFile()
//scripts/3_Game/tools\jsonfileloader.c
000007:0x0022a328:	icall	FileExist(filename)
000007:0x0022a338:	cmpi	#return, _i0
000007:0x0022a348:	beq	0x22a488
000013:0x0022a350:	icall	OpenFile(filename, _i1)
000013:0x0022a360:	movea	handle, #return
000014:0x0022a370:	cmpc	handle, _i0
000014:0x0022a380:	bne	0x22a3a0
000015:0x0022a388:	movem	data, data
000015:0x0022a398:	rts
000018:0x0022a3a0:	icall	FGets(handle, line_content)
000018:0x0022a3b0:	move	@m00, #return
000018:0x0022a3c0:	cmpi	@m00, _i0
000018:0x0022a3d0:	blt	0x22a400
000020:0x0022a3d8:	moves	@s00, line_content
000020:0x0022a3e8:	adds	file_content, file_content, @s00
000020:0x0022a3f8:	jump	0x22a3a0
000023:0x0022a400:	icall	CloseFile(handle)
000025:0x0022a410:	cmpcm	m_Serializer, null
000025:0x0022a420:	bne	0x22a448
000026:0x0022a428:	new	m_Serializer, JsonSerializer
000028:0x0022a448:	icall	
000028:0x0022a460:	cmpi	#return, _i0
000028:0x0022a470:	bne	0x22a488
000029:0x0022a478:	call	Error(error)
000029:0x0022a488:	movem	data, data
000029:0x0022a498:	rts
JsonFileLoader<JsonUndergroundTriggers>::JsonSaveFile()
000036:0x0022a4f0:	cmpcm	m_Serializer, null
000036:0x0022a500:	bne	0x22a528
000037:0x0022a508:	new	m_Serializer, JsonSerializer
000039:0x0022a528:	icall	
000041:0x0022a540:	icall	OpenFile(filename, _i4)
000041:0x0022a550:	movea	handle, #return
000042:0x0022a560:	cmpc	handle, _i0
000042:0x0022a570:	bne	0x22a580
000043:0x0022a578:	rts
000045:0x0022a580:	icall	FPrint(handle, file_content)
000047:0x0022a590:	icall	CloseFile(handle)
000047:0x0022a5a0:	rts
JsonFileLoader<JsonUndergroundTriggers>::JsonLoadData()
000053:0x0022a5d0:	cmpcm	m_Serializer, null
000053:0x0022a5e0:	bne	0x22a608
000054:0x0022a5e8:	new	m_Serializer, JsonSerializer
000056:0x0022a608:	icall	
000056:0x0022a620:	cmpi	#return, _i0
000056:0x0022a630:	bne	0x22a648
000057:0x0022a638:	call	Error(error)
000057:0x0022a648:	movem	data, data
000057:0x0022a658:	rts
JsonFileLoader<JsonUndergroundTriggers>::JsonMakeData()
000063:0x0022a688:	cmpcm	m_Serializer, null
000063:0x0022a698:	bne	0x22a6c0
000064:0x0022a6a0:	new	m_Serializer, JsonSerializer
000066:0x0022a6c0:	icall	
000067:0x0022a6d8:	moves	#return, string_data
000067:0x0022a6e8:	rts
000067:0x0022a6f0:	rts
UndergroundAreaLoader::GetData()
//scripts/3_Game/undergroundarealoader.c
000056:0x0022a6f8:	icall	FileExist(m_Path)
000056:0x0022a708:	cmpi	#return, _i0
000056:0x0022a718:	bne	0x22a838
000059:0x0022a720:	adds	@s01, _s'[WARNING] :: [UndergroundAreaLoader GetData()] :: file not found in MISSION folder, your path is ', m_Path
000059:0x0022a730:	moves	@s00, @s01
000059:0x0022a740:	adds	@s00, @s00, _s' Attempting DATA folder'
000059:0x0022a750:	moves	@s01, @s00
000059:0x0022a760:	icall	PrintToRPT(@s01)
000062:0x0022a770:	ncall	GetGame()
000062:0x0022a778:	icall	
000063:0x0022a788:	icall	Format(_s'DZ/worlds/%1/ce/cfgundergroundtriggers.json', worldName, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000063:0x0022a7b8:	moves	m_Path, #return
000065:0x0022a7c8:	icall	FileExist(m_Path)
000065:0x0022a7d8:	cmpi	#return, _i0
000065:0x0022a7e8:	bne	0x22a838
000067:0x0022a7f0:	adds	@s01, _s'[WARNING] :: [UndergroundAreaLoader GetData()] ::file not found in DATA folder, your path is ', m_Path
000067:0x0022a800:	moves	@s00, @s01
000067:0x0022a810:	icall	PrintToRPT(@s00)
000068:0x0022a820:	movetm	#return, null
000068:0x0022a830:	rts
000073:0x0022a838:	call	JsonLoadFile(m_Path, data)
000073:0x0022a850:	movem	data, data
000073:0x0022a860:	release	data
000075:0x0022a868:	movem	#return, data
000075:0x0022a878:	release	data
000075:0x0022a880:	rts
000075:0x0022a888:	release	data
000075:0x0022a890:	rts
UndergroundAreaLoader::SpawnAllTriggerCarriers()
000081:0x0022a938:	cmpcm	m_JsonData, null
000081:0x0022a948:	bne	0x22a978
000083:0x0022a950:	call	GetData()
000083:0x0022a960:	movem	m_JsonData, #return
000083:0x0022a970:	release	#return
000086:0x0022a978:	cmpcm	m_JsonData, null
000086:0x0022a988:	beq	0x22a9b8
000086:0x0022a990:	movefm	@c00, m_JsonData
000086:0x0022a9a0:	cmpcm	Triggers, null
000086:0x0022a9b0:	bne	0x22a9c0
000088:0x0022a9b8:	rts
000091:0x0022a9c0:	movefm	@c00, m_JsonData
000091:0x0022a9d0:	movem	#array, Triggers
000091:0x0022a9e0:	ncalli	array<@JsonUndergroundAreaTriggerData>.Count()
000091:0x0022a9e8:	move	#cnt, #return
000091:0x0022a9f8:	imove	i, 0x000000
000091:0x0022aa08:	jump	0x22aa18
000091:0x0022aa10:	inc	i
000091:0x0022aa18:	cmpi	i, #cnt
000091:0x0022aa28:	bge	0x22aa70
000091:0x0022aa30:	icall	
000091:0x0022aa40:	movetm	data, #return
000093:0x0022aa50:	call	SpawnTriggerCarrier(i, data)
000093:0x0022aa68:	jump	0x22aa10
000093:0x0022aa70:	release	#array
000093:0x0022aa78:	release	data
000093:0x0022aa80:	rts
UndergroundAreaLoader::SpawnTriggerCarrier()
000100:0x0022ab00:	ncall	GetGame()
000100:0x0022ab08:	call	
000100:0x0022ab18:	ncalli	CGame.CreateObjectEx(_s'UndergroundTriggerCarrier', #return, ECE_NONE, _i512)
000100:0x0022ab30:	icall	SafeCastType([0xb5b3a080], @c01, #return)
000100:0x0022ab48:	movetm	carrier, @c01
000102:0x0022ab58:	cmpcm	carrier, null
000102:0x0022ab68:	beq	0x22aba0
000104:0x0022ab70:	call	
000105:0x0022ab80:	call	
000105:0x0022ab90:	ncalli	UndergroundTriggerCarrierBase.SetOrientation(#return)
000105:0x0022aba0:	release	carrier
000105:0x0022aba8:	rts
Param1<JsonUndergroundTriggers>::Param1()
//scripts/1_Core/param.c
000038:0x0022acd0:	movem	param1, p1
000038:0x0022ace0:	rts
Param1<JsonUndergroundTriggers>::Serialize()
000043:0x0022ace8:	icall	
000043:0x0022acf8:	move	#return, #return
000043:0x0022ad08:	rts
000043:0x0022ad10:	rts
Param1<JsonUndergroundTriggers>::Deserializer()
000048:0x0022ad18:	icall	
000048:0x0022ad28:	move	#return, #return
000048:0x0022ad38:	rts
000048:0x0022ad40:	rts
UndergroundAreaLoader::SyncDataSend()
//scripts/3_Game/undergroundarealoader.c
000112:0x0022ad48:	ncall	GetGame()
000112:0x0022ad50:	movetm	target, null
000112:0x0022ad60:	new	@c00, Param1<JsonUndergroundTriggers>
000112:0x0022ad88:	pushc	@c00
000112:0x0022ad90:	call	
000112:0x0022adb0:	popc	@c00
000112:0x0022adb8:	release	@c00
000112:0x0022adc0:	rts
UndergroundAreaLoader::OnRPC()
000119:0x0022ae18:	movetm	p1, null
000119:0x0022ae28:	new	data, Param1<JsonUndergroundTriggers>
000121:0x0022ae50:	icall	
000121:0x0022ae60:	cmpi	#return, _i0
000121:0x0022ae70:	beq	0x22aea0
000123:0x0022ae78:	movefm	@c01, data
000123:0x0022ae88:	movem	m_JsonData, param1
000123:0x0022ae98:	jump	0x22aeb0
000127:0x0022aea0:	icall	ErrorEx(_s'UndergroundAreaLoader datasynced - failed to read', _i2)
000127:0x0022aeb0:	release	data
000127:0x0022aeb8:	rts
Hit_Glass::Hit_Glass()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_glass.c
000005:0x0022aec0:	call	
000006:0x0022aed0:	call	
000007:0x0022aee0:	call	
000007:0x0022aef0:	rts
DayZAIHitComponentHelpers::RegisterHitComponent()
//scripts/3_Game/entities\dayzaihitcomponents.c
000023:0x0022af50:	new	newComponent, DayZAIHitComponent
000025:0x0022af70:	movefm	@c00, newComponent
000025:0x0022af80:	moves	m_Name, pName
000026:0x0022af90:	movefm	@c00, newComponent
000026:0x0022afa0:	cfti	m_Weight, pWeight
000028:0x0022afb0:	movefm	@c00, newComponent
000028:0x0022afc0:	icall	
000028:0x0022afd0:	release	newComponent
000028:0x0022afd8:	rts
DayZAIHitComponentHelpers::SelectMostProbableHitComponent()
000042:0x0022b0f8:	call	SumOfWeights(pHitComponents)
000042:0x0022b108:	move	weights, #return
000043:0x0022b118:	icall	RandomInt(_i0, weights)
000043:0x0022b128:	citf	rnd, #return
000045:0x0022b138:	imove	i, 0x000000
000045:0x0022b148:	jump	0x22b158
000045:0x0022b150:	inc	i
000045:0x0022b158:	ncalli	array<@DayZAIHitComponent>.Count()
000045:0x0022b160:	cmpi	i, #return
000045:0x0022b170:	bge	0x22b240
000047:0x0022b178:	icall	
000047:0x0022b188:	movetm	hitComp, #return
000048:0x0022b198:	movefm	@c00, hitComp
000048:0x0022b1a8:	citf	@f00, m_Weight
000048:0x0022b1b8:	subf	rnd, rnd, @f00
000050:0x0022b1c8:	cmpf	rnd, _f0.000000
000050:0x0022b1d8:	bgt	0x22b230
000052:0x0022b1e0:	movefm	@c00, hitComp
000052:0x0022b1f0:	moves	pHitComponent, m_Name
000053:0x0022b200:	imove	#return, 0x000001
000053:0x0022b210:	release	hitComp
000053:0x0022b218:	moves	pHitComponent, pHitComponent
000053:0x0022b228:	rts
000053:0x0022b230:	release	hitComp
000053:0x0022b238:	jump	0x22b150
000057:0x0022b240:	imove	#return, 0x000000
000057:0x0022b250:	moves	pHitComponent, pHitComponent
000057:0x0022b260:	rts
000057:0x0022b268:	moves	pHitComponent, pHitComponent
000057:0x0022b278:	rts
DayZAIHitComponentHelpers::SumOfWeights()
000070:0x0022b320:	imove	sum, 0x000000
000072:0x0022b330:	imove	i, 0x000000
000072:0x0022b340:	jump	0x22b350
000072:0x0022b348:	inc	i
000072:0x0022b350:	ncalli	array<@DayZAIHitComponent>.Count()
000072:0x0022b358:	cmpi	i, #return
000072:0x0022b368:	bge	0x22b3d0
000074:0x0022b370:	icall	
000074:0x0022b380:	movetm	hitComp, #return
000075:0x0022b390:	movefm	@c00, hitComp
000075:0x0022b3a0:	move	@m00, m_Weight
000075:0x0022b3b0:	addi	sum, sum, @m00
000075:0x0022b3c0:	release	hitComp
000075:0x0022b3c8:	jump	0x22b348
000078:0x0022b3d0:	move	#return, sum
000078:0x0022b3e0:	rts
000078:0x0022b3e8:	rts
PPERequester_CameraNV::SetNVMode()
//scripts/3_Game/ppemanager\requesters\ppercameranv.c
000015:0x0022b468:	call	
000017:0x0022b490:	move	#switch, mode
000017:0x0022b4a0:	imove	@m00, 0x000000
000017:0x0022b4b0:	cmpi	@m00, #switch
000017:0x0022b4c0:	bne	0x22b608
000020:0x0022b4c8:	new	@c01, array<float>
000020:0x0022b4e8:	pushc	@c01
000020:0x0022b4f0:	icall	
000020:0x0022b500:	icall	
000020:0x0022b510:	icall	
000020:0x0022b520:	icall	
000020:0x0022b530:	call	
000020:0x0022b550:	popc	@c01
000020:0x0022b558:	release	@c01
000021:0x0022b560:	call	
000022:0x0022b578:	call	
000023:0x0022b590:	call	
000024:0x0022b5a8:	call	
000025:0x0022b5d0:	call	
000026:0x0022b5f8:	jump	0x22bd10
000026:0x0022b600:	jump	0x22b630
000026:0x0022b608:	imove	@m00, 0x000001
000026:0x0022b618:	cmpi	@m00, #switch
000026:0x0022b628:	bne	0x22b7c0
000029:0x0022b630:	new	@c01, array<float>
000029:0x0022b650:	pushc	@c01
000029:0x0022b658:	icall	
000029:0x0022b668:	icall	
000029:0x0022b678:	icall	
000029:0x0022b688:	icall	
000029:0x0022b698:	call	
000029:0x0022b6b8:	popc	@c01
000029:0x0022b6c0:	release	@c01
000030:0x0022b6c8:	mulf	@f01, _f7.000000, m_UGExposureCoef
000030:0x0022b6d8:	move	@f00, @f01
000030:0x0022b6e8:	call	
000031:0x0022b710:	call	
000032:0x0022b738:	call	
000033:0x0022b760:	call	
000034:0x0022b788:	call	
000035:0x0022b7b0:	jump	0x22bd10
000035:0x0022b7b8:	jump	0x22b7e8
000035:0x0022b7c0:	imove	@m00, 0x000005
000035:0x0022b7d0:	cmpi	@m00, #switch
000035:0x0022b7e0:	bne	0x22b978
000038:0x0022b7e8:	new	@c01, array<float>
000038:0x0022b808:	pushc	@c01
000038:0x0022b810:	icall	
000038:0x0022b820:	icall	
000038:0x0022b830:	icall	
000038:0x0022b840:	icall	
000038:0x0022b850:	call	
000038:0x0022b870:	popc	@c01
000038:0x0022b878:	release	@c01
000039:0x0022b880:	mulf	@f01, _f2.000000, m_UGExposureCoef
000039:0x0022b890:	move	@f00, @f01
000039:0x0022b8a0:	call	
000040:0x0022b8c8:	call	
000041:0x0022b8f0:	call	
000042:0x0022b918:	call	
000043:0x0022b940:	call	
000044:0x0022b968:	jump	0x22bd10
000044:0x0022b970:	jump	0x22b9a0
000044:0x0022b978:	imove	@m00, 0x000002
000044:0x0022b988:	cmpi	@m00, #switch
000044:0x0022b998:	bne	0x22bb30
000047:0x0022b9a0:	new	@c01, array<float>
000047:0x0022b9c0:	pushc	@c01
000047:0x0022b9c8:	icall	
000047:0x0022b9d8:	icall	
000047:0x0022b9e8:	icall	
000047:0x0022b9f8:	icall	
000047:0x0022ba08:	call	
000047:0x0022ba28:	popc	@c01
000047:0x0022ba30:	release	@c01
000048:0x0022ba38:	mulf	@f01, _f7.000000, m_UGExposureCoef
000048:0x0022ba48:	move	@f00, @f01
000048:0x0022ba58:	call	
000049:0x0022ba80:	call	
000050:0x0022baa8:	call	
000051:0x0022bad0:	call	
000052:0x0022baf8:	call	
000053:0x0022bb20:	jump	0x22bd10
000053:0x0022bb28:	jump	0x22bb58
000053:0x0022bb30:	imove	@m00, 0x000003
000053:0x0022bb40:	cmpi	@m00, #switch
000053:0x0022bb50:	bne	0x22bcc8
000056:0x0022bb58:	new	@c01, array<float>
000056:0x0022bb78:	pushc	@c01
000056:0x0022bb80:	icall	
000056:0x0022bb90:	icall	
000056:0x0022bba0:	icall	
000056:0x0022bbb0:	icall	
000056:0x0022bbc0:	call	
000056:0x0022bbe0:	popc	@c01
000056:0x0022bbe8:	release	@c01
000057:0x0022bbf0:	mulf	@f01, _f5.500000, m_UGExposureCoef
000057:0x0022bc00:	move	@f00, @f01
000057:0x0022bc10:	call	
000058:0x0022bc38:	call	
000059:0x0022bc50:	call	
000060:0x0022bc68:	call	
000061:0x0022bc90:	call	
000062:0x0022bcb8:	jump	0x22bd10
000062:0x0022bcc0:	jump	0x22bcf0
000062:0x0022bcc8:	imove	@m00, 0x000004
000062:0x0022bcd8:	cmpi	@m00, #switch
000062:0x0022bce8:	bne	0x22bd10
000066:0x0022bcf0:	call	
000067:0x0022bd08:	jump	0x22bd10
000070:0x0022bd10:	move	m_CurrentMode, mode
000070:0x0022bd20:	rts
PPERequester_CameraNV::OnStart()
000075:0x0022bd28:	call	
000077:0x0022bd38:	movefm	@c01, par
000077:0x0022bd48:	icall	SafeCastType([0xb5b34040], @c00, @c01)
000077:0x0022bd60:	movec	@c02, @c00
000077:0x0022bd70:	move	mode, param1
000077:0x0022bd80:	call	
000077:0x0022bd90:	rts
PPERequester_CameraNV::OnStop()
000083:0x0022bd98:	call	
000083:0x0022bda8:	rts
PPERequester_CameraNV::SetUndergroundExposureCoef()
000088:0x0022bdb0:	move	m_UGExposureCoef, coef
000090:0x0022bdc0:	cmpi	m_IsRunning, _i0
000090:0x0022bdd0:	beq	0x22bdf8
000091:0x0022bdd8:	move	mode, m_CurrentMode
000091:0x0022bde8:	call	
000091:0x0022bdf8:	rts
PPERequester_CameraNV::PPERequester_CameraNV()
000001:0x0022be00:	imove	m_UGExposureCoef, 1.00000
000001:0x0022be10:	rts
HorizontalSpacer::UpdateChild()
//scripts/3_Game/gui\spacers\horizontalspacer.c
000009:0x0022bee0:	citf	@f03, Border
000009:0x0022bef0:	mulf	@f03, @f03, _f2.000000
000009:0x0022bf00:	move	@f02, @f03
000009:0x0022bf10:	subf	@f02, w, @f02
000009:0x0022bf20:	move	@f01, @f02
000009:0x0022bf30:	citf	@f04, m_count
000009:0x0022bf40:	subf	@f04, @f04, _f1.000000
000009:0x0022bf50:	move	@f03, @f04
000009:0x0022bf60:	citf	@f04, Gap
000009:0x0022bf70:	mulf	@f03, @f03, @f04
000009:0x0022bf80:	move	@f02, @f03
000009:0x0022bf90:	subf	@f01, @f01, @f02
000009:0x0022bfa0:	move	@f00, @f01
000009:0x0022bfb0:	citf	@f01, m_count
000009:0x0022bfc0:	divf	itemWidth, @f00, @f01
000010:0x0022bfd0:	citf	@f01, Border
000010:0x0022bfe0:	mulf	@f01, _f2.000000, @f01
000010:0x0022bff0:	move	@f00, @f01
000010:0x0022c000:	subf	itemHeight, h, @f00
000012:0x0022c010:	citf	@f03, Gap
000012:0x0022c020:	addf	@f03, itemWidth, @f03
000012:0x0022c030:	move	@f02, @f03
000012:0x0022c040:	citf	@f03, index
000012:0x0022c050:	mulf	@f02, @f02, @f03
000012:0x0022c060:	move	@f01, @f02
000012:0x0022c070:	citf	@f02, Border
000012:0x0022c080:	addf	@f01, @f02, @f01
000012:0x0022c090:	move	@f00, @f01
000012:0x0022c0a0:	citf	[0xd315fed0], Border
000012:0x0022c0b0:	ncalli	Widget.SetPos(@f00, [0xd315fed0], _i1)
000013:0x0022c0c8:	ncalli	Widget.SetSize(itemWidth, itemHeight, _i1)
000015:0x0022c0e0:	ncalli	Widget.GetChildren()
000015:0x0022c0e8:	cmpm	#return, null
000015:0x0022c0f8:	beq	0x22c160
000017:0x0022c100:	ncalli	Widget.GetChildren()
000017:0x0022c108:	movetm	c, #return
000019:0x0022c118:	icall	
000020:0x0022c128:	cmpcm	gap, null
000020:0x0022c138:	beq	0x22c150
000021:0x0022c140:	call	
000021:0x0022c150:	release	c
000021:0x0022c158:	release	gap
000021:0x0022c160:	rts
HandStartReplacingItemInHands::OnEntry()
//scripts/3_Game/systems\inventory\handreplacingiteminhands.c
000008:0x0022c2d8:	call	
000010:0x0022c2e8:	movefm	@c01, e
000010:0x0022c2f8:	movem	player, m_Player
000011:0x0022c308:	call	
000011:0x0022c318:	ncalli	HumanInventory.GetEntityInHands()
000011:0x0022c320:	movetm	itemInHands, #return
000011:0x0022c330:	release	#return
000013:0x0022c338:	new	src, InventoryLocation
000014:0x0022c358:	ncalli	EntityAI.GetInventory()
000014:0x0022c360:	movefm	[0xb5bad1f8], src
000014:0x0022c370:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000014:0x0022c380:	cmpi	#return, _i0
000014:0x0022c390:	beq	0x22c4b8
000016:0x0022c398:	movefm	@c02, e
000016:0x0022c3a8:	icall	SafeCastType([0xb5b37168], @c01, @c02)
000016:0x0022c3c0:	movetm	edr, @c01
000017:0x0022c3d0:	cmpcm	edr, null
000017:0x0022c3e0:	beq	0x22c498
000019:0x0022c3e8:	call	hndDebugPrint(_s'[hndfsm] HandStartReplacingItemInHands about to execute lambda')
000021:0x0022c3f8:	ncalli	Man.GetInventory()
000021:0x0022c400:	icall	SafeCastType([0xb5b3b8d8], @c01, #return)
000021:0x0022c418:	movetm	inv, @c01
000022:0x0022c428:	movefm	@c00, edr
000022:0x0022c438:	movefm	@c01, m_Lambda
000022:0x0022c448:	call	
000024:0x0022c458:	release	inv
000024:0x0022c460:	release	edr
000024:0x0022c468:	release	player
000024:0x0022c470:	release	itemInHands
000024:0x0022c478:	release	src
000024:0x0022c480:	rts
000024:0x0022c488:	release	inv
000024:0x0022c490:	jump	0x22c4a8
000027:0x0022c498:	call	Error(_s'[hndfsm] HandStartReplacingItemInHands - not a HandEventDestroyAndReplaceWithNew event')
000027:0x0022c4a8:	release	edr
000027:0x0022c4b0:	jump	0x22c4c8
000030:0x0022c4b8:	call	Error(_s'[hndfsm] HandStartReplacingItemInHands - itemInHands has no InventoryLocation')
000030:0x0022c4c8:	release	player
000030:0x0022c4d0:	release	itemInHands
000030:0x0022c4d8:	release	src
000030:0x0022c4e0:	rts
HandStartReplacingItemInHands::OnAbort()
000035:0x0022c4e8:	call	
000035:0x0022c4f8:	rts
HandStartReplacingItemInHands::OnExit()
000040:0x0022c500:	call	
000040:0x0022c510:	rts
HandStartReplacingItemInHands::IsWaitingForActionFinish()
000043:0x0022c518:	imove	#return, 0x000001
000043:0x0022c528:	rts
000043:0x0022c530:	rts
HandReplacingItemInHands::HandReplacingItemInHands()
000054:0x0022c560:	new	m_Replacing, HandStartReplacingItemInHands
000057:0x0022c588:	new	_fin_, HandEventHumanCommandActionFinished
000059:0x0022c5b0:	new	m_FSM, HandFSM
000061:0x0022c5d8:	movem	src, m_Replacing
000061:0x0022c5e8:	movetm	dst, NULL
000061:0x0022c5f8:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000061:0x0022c630:	pushc	@c00
000061:0x0022c638:	movefm	[0xb5b3f2a8], m_FSM
000061:0x0022c648:	call	
000061:0x0022c658:	popc	@c00
000061:0x0022c660:	release	@c00
000063:0x0022c668:	movem	initial_state, m_Replacing
000063:0x0022c678:	movefm	[0xb5b3f2a8], m_FSM
000063:0x0022c688:	call	
000063:0x0022c698:	release	_fin_
000063:0x0022c6a0:	rts
HandReplacingItemInHands::OnEntry()
000068:0x0022c6a8:	call	
000068:0x0022c6b8:	rts
HandReplacingItemInHands::OnAbort()
000073:0x0022c6c0:	call	
000073:0x0022c6d0:	rts
HandReplacingItemInHands::OnExit()
000078:0x0022c6d8:	call	
000078:0x0022c6e8:	rts
BiosPackageService::OnCheckUpdate()
//scripts/3_Game/services\biospackageservice.c
000041:0x0022c6f0:	cmpi	error, _i0
000041:0x0022c700:	bne	0x22c768
000041:0x0022c708:	movefm	@c00, checkUpdateResult
000041:0x0022c718:	cmpi	m_IsUpdate, _i0
000041:0x0022c728:	bne	0x22c758
000041:0x0022c730:	movefm	@c00, checkUpdateResult
000041:0x0022c740:	cmpi	m_IsMandatory, _i0
000041:0x0022c750:	beq	0x22c768
000043:0x0022c758:	call	PromptUpdate()
000043:0x0022c768:	rts
BiosPackageService::OnPromptUpdate()
000057:0x0022c770:	call	ErrorCaught(error)
000057:0x0022c780:	rts
BiosPackageService::OnShowStore()
000067:0x0022c788:	call	ErrorCaught(error)
000067:0x0022c798:	rts
AmmoEffects::GetAmmoParticleID()
//scripts/3_Game/ammoeffects.c
000026:0x0022c880:	icall	
000026:0x0022c890:	cmpi	#return, _i0
000026:0x0022c8a0:	bne	0x22c938
000030:0x0022c8a8:	ncall	GetGame()
000030:0x0022c8b0:	icall	Format(_s'cfgAmmo %1 particle', ammoType, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000030:0x0022c8e0:	icall	
000033:0x0022c8f0:	cmps	particleFileName, _s''
000033:0x0022c900:	beq	0x22c928
000035:0x0022c908:	call	GetParticleIDByName(particleFileName)
000035:0x0022c918:	move	particleID, #return
000039:0x0022c928:	icall	
000042:0x0022c938:	move	#return, particleID
000042:0x0022c948:	rts
000042:0x0022c950:	rts
AmmoEffects::PlayAmmoParticle()
000048:0x0022c980:	call	GetAmmoParticleID(ammoType)
000048:0x0022c990:	move	particleID, #return
000050:0x0022c9a0:	call	IsValidId(particleID)
000050:0x0022c9b0:	cmpi	#return, _i0
000050:0x0022c9c0:	beq	0x22ca58
000052:0x0022c9c8:	call	GetInstance()
000052:0x0022c9d8:	call	
000052:0x0022c9f0:	movefm	@c00, #return
000052:0x0022ca00:	cmpc	@c00, null
000052:0x0022ca10:	beq	0x22ca30
000052:0x0022ca18:	imove	#return, 0x000001
000052:0x0022ca28:	jump	0x22ca40
000052:0x0022ca30:	imove	#return, 0x000000
000052:0x0022ca40:	release	#return
000052:0x0022ca48:	release	#return
000052:0x0022ca50:	rts
000055:0x0022ca58:	imove	#return, 0x000000
000055:0x0022ca68:	rts
000055:0x0022ca70:	rts
AmmoEffects::GetAmmoEffectTypename()
000073:0x0022cb20:	icall	
000073:0x0022cb30:	cmpi	#return, _i0
000073:0x0022cb40:	bne	0x22cbd8
000077:0x0022cb48:	ncall	GetGame()
000077:0x0022cb50:	icall	Format(_s'cfgAmmo %1 effect', ammoType, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000077:0x0022cb80:	icall	
000080:0x0022cb90:	cmps	effectName, _s''
000080:0x0022cba0:	beq	0x22cbc8
000082:0x0022cba8:	ncall	ToType(effectName)
000082:0x0022cbb8:	movea	typeName, #return
000086:0x0022cbc8:	icall	
000089:0x0022cbd8:	movea	#return, typeName
000089:0x0022cbe8:	rts
000089:0x0022cbf0:	rts
AmmoEffects::PlayAmmoEffect()
000095:0x0022cc48:	call	GetAmmoEffectTypename(ammoType)
000095:0x0022cc58:	movea	typeName, #return
000097:0x0022cc68:	cmpc	typeName, null
000097:0x0022cc78:	beq	0x22cd20
000099:0x0022cc80:	icall	Spawn(typeName)
000099:0x0022cc90:	icall	SafeCastType([0xb5b35a20], @c01, #return)
000099:0x0022cca8:	movetm	eff, @c01
000101:0x0022ccb8:	cmpcm	eff, null
000101:0x0022ccc8:	beq	0x22cd18
000103:0x0022ccd0:	call	
000104:0x0022cce0:	call	PlayInWorld(eff, pos)
000104:0x0022ccf8:	move	#return, #return
000104:0x0022cd08:	release	eff
000104:0x0022cd10:	rts
000104:0x0022cd18:	release	eff
000108:0x0022cd20:	imove	#return, 0x000000
000108:0x0022cd30:	rts
000108:0x0022cd38:	rts
AmmoEffects::Init()
000123:0x0022cd40:	new	m_AmmoParticles, map<string,int>
000124:0x0022cd60:	new	m_AmmoEffects, map<string,typename>
000124:0x0022cd80:	rts
HandEventBase::HandEventBase()
//scripts/3_Game/systems\inventory\hand_events.c
000045:0x0022cd88:	imove	m_EventID, 0x000000
000045:0x0022cd98:	imove	m_AnimationID, 0xffffffff
000045:0x0022cda8:	movefm	@c00, p
000045:0x0022cdb8:	icall	CastTo(m_Player, @c00)
000045:0x0022cdc8:	movem	m_Src, src
000045:0x0022cdd8:	rts
HandEventBase::GetEventID()
000046:0x0022cde0:	move	#return, m_EventID
000046:0x0022cdf0:	rts
000046:0x0022cdf8:	rts
HandEventBase::IsAuthoritative()
000050:0x0022ce70:	cmpcm	m_Player, null
000050:0x0022ce80:	beq	0x22cf20
000050:0x0022ce88:	movefm	[0xb5b2afc0], m_Player
000050:0x0022ce98:	ncalli	DayZPlayer.GetInstanceType()
000050:0x0022cea0:	move	@m00, #return
000050:0x0022ceb0:	cmpi	@m00, _i1
000050:0x0022cec0:	beq	0x22cf20
000050:0x0022cec8:	movefm	[0xb5b2afc0], m_Player
000050:0x0022ced8:	ncalli	DayZPlayer.GetInstanceType()
000050:0x0022cee0:	move	@m00, #return
000050:0x0022cef0:	cmpi	@m00, _i2
000050:0x0022cf00:	beq	0x22cf20
000050:0x0022cf08:	imove	#return, 0x000001
000050:0x0022cf18:	jump	0x22cf30
000050:0x0022cf20:	imove	#return, 0x000000
000050:0x0022cf30:	rts
000050:0x0022cf38:	rts
HandEventBase::IsOwner()
000055:0x0022cfb8:	cmpcm	m_Player, null
000055:0x0022cfc8:	beq	0x22d0a8
000055:0x0022cfd0:	movefm	[0xb5b2afc0], m_Player
000055:0x0022cfe0:	ncalli	DayZPlayer.GetInstanceType()
000055:0x0022cfe8:	move	@m00, #return
000055:0x0022cff8:	cmpi	@m00, _i1
000055:0x0022d008:	beq	0x22d090
000055:0x0022d010:	movefm	[0xb5b2afc0], m_Player
000055:0x0022d020:	ncalli	DayZPlayer.GetInstanceType()
000055:0x0022d028:	move	@m00, #return
000055:0x0022d038:	cmpi	@m00, _i3
000055:0x0022d048:	beq	0x22d090
000055:0x0022d050:	movefm	[0xb5b2afc0], m_Player
000055:0x0022d060:	ncalli	DayZPlayer.GetInstanceType()
000055:0x0022d068:	move	@m00, #return
000055:0x0022d078:	cmpi	@m00, _i5
000055:0x0022d088:	bne	0x22d0a8
000055:0x0022d090:	imove	#return, 0x000001
000055:0x0022d0a0:	jump	0x22d0b8
000055:0x0022d0a8:	imove	#return, 0x000000
000055:0x0022d0b8:	rts
000055:0x0022d0c0:	rts
HandEventBase::IsProxy()
000060:0x0022d100:	cmpcm	m_Player, null
000060:0x0022d110:	beq	0x22d1b0
000060:0x0022d118:	movefm	[0xb5b2afc0], m_Player
000060:0x0022d128:	ncalli	DayZPlayer.GetInstanceType()
000060:0x0022d130:	move	@m00, #return
000060:0x0022d140:	cmpi	@m00, _i2
000060:0x0022d150:	beq	0x22d198
000060:0x0022d158:	movefm	[0xb5b2afc0], m_Player
000060:0x0022d168:	ncalli	DayZPlayer.GetInstanceType()
000060:0x0022d170:	move	@m00, #return
000060:0x0022d180:	cmpi	@m00, _i4
000060:0x0022d190:	bne	0x22d1b0
000060:0x0022d198:	imove	#return, 0x000001
000060:0x0022d1a8:	jump	0x22d1c0
000060:0x0022d1b0:	imove	#return, 0x000000
000060:0x0022d1c0:	rts
000060:0x0022d1c8:	rts
HandEventBase::WriteToContext()
000067:0x0022d1d0:	icall	
000068:0x0022d1e0:	icall	
000069:0x0022d1f0:	movem	loc, m_Src
000069:0x0022d200:	call	OptionalLocationWriteToContext(loc, ctx)
000070:0x0022d218:	icall	
000070:0x0022d228:	rts
HandEventBase::GetSrc()
000073:0x0022d230:	movem	#return, m_Src
000073:0x0022d240:	rts
000073:0x0022d248:	rts
HandEventBase::GetSrcEntity()
000076:0x0022d250:	cmpcm	m_Src, null
000076:0x0022d260:	beq	0x22d298
000077:0x0022d268:	movefm	[0xb5b18280], m_Src
000077:0x0022d278:	ncalli	InventoryLocation.GetItem()
000077:0x0022d280:	movetm	#return, #return
000077:0x0022d290:	rts
000078:0x0022d298:	movetm	#return, null
000078:0x0022d2a8:	rts
000078:0x0022d2b0:	rts
HandEventBase::GetSecondSrcEntity()
000080:0x0022d2b8:	movetm	#return, null
000080:0x0022d2c8:	rts
000080:0x0022d2d0:	rts
HandEventBase::GetDst()
000081:0x0022d2d8:	movetm	#return, null
000081:0x0022d2e8:	rts
000081:0x0022d2f0:	rts
HandEventBase::GetAnimationID()
000082:0x0022d2f8:	move	#return, m_AnimationID
000082:0x0022d308:	rts
000082:0x0022d310:	rts
HandEventBase::AcquireInventoryJunctureFromServer()
000083:0x0022d318:	imove	#return, 0x000000
000083:0x0022d328:	rts
000083:0x0022d330:	rts
HandEventBase::CheckRequest()
000084:0x0022d338:	imove	#return, 0x000001
000084:0x0022d348:	rts
000084:0x0022d350:	rts
HandEventBase::CheckRequestEx()
000085:0x0022d358:	call	
000085:0x0022d368:	move	#return, #return
000085:0x0022d378:	rts
000085:0x0022d380:	rts
HandEventBase::CanPerformEvent()
000086:0x0022d388:	imove	#return, 0x000001
000086:0x0022d398:	rts
000086:0x0022d3a0:	rts
HandEventBase::CanPerformEventEx()
000087:0x0022d3a8:	call	
000087:0x0022d3b8:	move	#return, #return
000087:0x0022d3c8:	rts
000087:0x0022d3d0:	rts
HandEventBase::CheckRequestSrc()
000088:0x0022d3d8:	imove	#return, 0x000001
000088:0x0022d3e8:	rts
000088:0x0022d3f0:	rts
HandEventBase::IsServerSideOnly()
000089:0x0022d3f8:	imove	#return, 0x000000
000089:0x0022d408:	rts
000089:0x0022d410:	rts
HandEventBase::HandEventFactory()
000093:0x0022d490:	move	#switch, id
000093:0x0022d4a0:	imove	@m00, 0x000000
000093:0x0022d4b0:	cmpi	@m00, #switch
000093:0x0022d4c0:	bne	0x22d4e8
000095:0x0022d4c8:	movetm	#return, null
000095:0x0022d4d8:	rts
000095:0x0022d4e0:	jump	0x22d510
000095:0x0022d4e8:	imove	@m00, 0x000001
000095:0x0022d4f8:	cmpi	@m00, #switch
000095:0x0022d508:	bne	0x22d548
000096:0x0022d510:	new	#return, HandEventTake
000096:0x0022d538:	rts
000096:0x0022d540:	jump	0x22d570
000096:0x0022d548:	imove	@m00, 0x000002
000096:0x0022d558:	cmpi	@m00, #switch
000096:0x0022d568:	bne	0x22d5b0
000097:0x0022d570:	new	#return, HandEventMoveTo
000097:0x0022d5a0:	rts
000097:0x0022d5a8:	jump	0x22d5d8
000097:0x0022d5b0:	imove	@m00, 0x000003
000097:0x0022d5c0:	cmpi	@m00, #switch
000097:0x0022d5d0:	bne	0x22d610
000098:0x0022d5d8:	new	#return, HandEventDrop
000098:0x0022d600:	rts
000098:0x0022d608:	jump	0x22d638
000098:0x0022d610:	imove	@m00, 0x000004
000098:0x0022d620:	cmpi	@m00, #switch
000098:0x0022d630:	bne	0x22d670
000099:0x0022d638:	new	#return, HandEventThrow
000099:0x0022d660:	rts
000099:0x0022d668:	jump	0x22d698
000099:0x0022d670:	imove	@m00, 0x000005
000099:0x0022d680:	cmpi	@m00, #switch
000099:0x0022d690:	bne	0x22d6e0
000100:0x0022d698:	new	#return, HandEventSwap
000100:0x0022d6d0:	rts
000100:0x0022d6d8:	jump	0x22d708
000100:0x0022d6e0:	imove	@m00, 0x000006
000100:0x0022d6f0:	cmpi	@m00, #switch
000100:0x0022d700:	bne	0x22d750
000101:0x0022d708:	new	#return, HandEventForceSwap
000101:0x0022d740:	rts
000101:0x0022d748:	jump	0x22d778
000101:0x0022d750:	imove	@m00, 0x000007
000101:0x0022d760:	cmpi	@m00, #switch
000101:0x0022d770:	bne	0x22d7b0
000102:0x0022d778:	new	#return, HandEventDestroy
000102:0x0022d7a0:	rts
000102:0x0022d7a8:	jump	0x22d7d8
000102:0x0022d7b0:	imove	@m00, 0x000008
000102:0x0022d7c0:	cmpi	@m00, #switch
000102:0x0022d7d0:	bne	0x22d810
000103:0x0022d7d8:	new	#return, HandEventCreated
000103:0x0022d800:	rts
000103:0x0022d808:	jump	0x22d838
000103:0x0022d810:	imove	@m00, 0x000009
000103:0x0022d820:	cmpi	@m00, #switch
000103:0x0022d830:	bne	0x22d870
000104:0x0022d838:	new	#return, HandEventDestroyed
000104:0x0022d860:	rts
000104:0x0022d868:	jump	0x22d898
000104:0x0022d870:	imove	@m00, 0x00000a
000104:0x0022d880:	cmpi	@m00, #switch
000104:0x0022d890:	bne	0x22d8d8
000105:0x0022d898:	new	#return, HandEventDestroyAndReplaceWithNew
000105:0x0022d8c8:	rts
000105:0x0022d8d0:	jump	0x22d900
000105:0x0022d8d8:	imove	@m00, 0x00000b
000105:0x0022d8e8:	cmpi	@m00, #switch
000105:0x0022d8f8:	bne	0x22d940
000106:0x0022d900:	new	#return, HandEventDestroyAndReplaceWithNewElsewhere
000106:0x0022d930:	rts
000106:0x0022d938:	jump	0x22d968
000106:0x0022d940:	imove	@m00, 0x00000c
000106:0x0022d950:	cmpi	@m00, #switch
000106:0x0022d960:	bne	0x22d9a8
000107:0x0022d968:	new	#return, HandEventDestroyElsewhereAndReplaceWithNewInHands
000107:0x0022d998:	rts
000107:0x0022d9a0:	jump	0x22d9d0
000107:0x0022d9a8:	imove	@m00, 0x00000d
000107:0x0022d9b8:	cmpi	@m00, #switch
000107:0x0022d9c8:	bne	0x22da08
000108:0x0022d9d0:	new	#return, HandEventReplaced
000108:0x0022d9f8:	rts
000108:0x0022da00:	jump	0x22da30
000108:0x0022da08:	imove	@m00, 0x000010
000108:0x0022da18:	cmpi	@m00, #switch
000108:0x0022da28:	bne	0x22da90
000109:0x0022da30:	new	@c00, HandAnimEventChanged
000109:0x0022da58:	pushc	@c00
000109:0x0022da60:	movetm	#return, @c00
000109:0x0022da70:	popc	@c00
000109:0x0022da78:	release	@c00
000109:0x0022da80:	rts
000109:0x0022da88:	jump	0x22dab8
000109:0x0022da90:	imove	@m00, 0x00000e
000109:0x0022daa0:	cmpi	@m00, #switch
000109:0x0022dab0:	bne	0x22db18
000110:0x0022dab8:	new	@c00, HandEventHumanCommandActionFinished
000110:0x0022dae0:	pushc	@c00
000110:0x0022dae8:	movetm	#return, @c00
000110:0x0022daf8:	popc	@c00
000110:0x0022db00:	release	@c00
000110:0x0022db08:	rts
000110:0x0022db10:	jump	0x22db40
000110:0x0022db18:	imove	@m00, 0x00000f
000110:0x0022db28:	cmpi	@m00, #switch
000110:0x0022db38:	bne	0x22db98
000111:0x0022db40:	new	@c00, HandEventHumanCommandActionAborted
000111:0x0022db68:	pushc	@c00
000111:0x0022db70:	movetm	#return, @c00
000111:0x0022db80:	popc	@c00
000111:0x0022db88:	release	@c00
000111:0x0022db90:	rts
000113:0x0022db98:	icall	ToString(id)
000113:0x0022dba8:	adds	@s01, _s'[hndfsm] HandEventFactory - unregistered hand event with id=', #return
000113:0x0022dbb8:	moves	@s00, @s01
000113:0x0022dbc8:	call	Error(@s00)
000114:0x0022dbd8:	movetm	#return, null
000114:0x0022dbe8:	rts
000114:0x0022dbf0:	rts
HandEventBase::CreateHandEventFromContext()
000119:0x0022dd88:	imove	eventID, 0xffffffff
000120:0x0022dd98:	icall	
000120:0x0022dda8:	cmpi	#return, _i0
000120:0x0022ddb8:	bne	0x22dde8
000122:0x0022ddc0:	call	Error(_s'[hndfsm] CreateHandEventFromContext - cannot read eventID')
000123:0x0022ddd0:	movetm	#return, null
000123:0x0022dde0:	rts
000126:0x0022dde8:	icall	
000126:0x0022ddf8:	cmpi	#return, _i0
000126:0x0022de08:	bne	0x22de40
000128:0x0022de10:	call	Error(_s'[hndfsm] CreateHandEventFromContext - cannot read player')
000129:0x0022de20:	movetm	#return, null
000129:0x0022de30:	release	player
000129:0x0022de38:	rts
000132:0x0022de40:	call	OptionalLocationReadFromContext(src, ctx)
000132:0x0022de58:	movem	src, loc
000132:0x0022de68:	release	loc
000134:0x0022de70:	imove	animID, 0xffffffff
000135:0x0022de80:	icall	
000135:0x0022de90:	cmpi	#return, _i0
000135:0x0022dea0:	bne	0x22dee0
000137:0x0022dea8:	call	Error(_s'[hndfsm] CreateHandEventFromContext - cannot read animID')
000138:0x0022deb8:	movetm	#return, null
000138:0x0022dec8:	release	player
000138:0x0022ded0:	release	src
000138:0x0022ded8:	rts
000140:0x0022dee0:	call	HandEventFactory(eventID, player, src)
000140:0x0022def8:	movem	b, #return
000140:0x0022df08:	release	#return
000141:0x0022df10:	cmpcm	b, null
000141:0x0022df20:	beq	0x22df58
000143:0x0022df28:	movefm	@c00, b
000143:0x0022df38:	move	m_AnimationID, animID
000144:0x0022df48:	call	
000146:0x0022df58:	movem	#return, b
000146:0x0022df68:	release	player
000146:0x0022df70:	release	src
000146:0x0022df78:	release	b
000146:0x0022df80:	rts
000146:0x0022df88:	release	player
000146:0x0022df90:	release	src
000146:0x0022df98:	release	b
000146:0x0022dfa0:	rts
HandEventBase::DumpToString()
000151:0x0022e070:	call	
000151:0x0022e080:	call	EnumToString(_T(HandEventID), #return)
000151:0x0022e098:	adds	res, _s'{ HandEv id=', #return
000152:0x0022e0a8:	adds	@s01, res, _s' pl='
000152:0x0022e0b8:	moves	@s00, @s01
000152:0x0022e0c8:	movem	o, m_Player
000152:0x0022e0d8:	call	GetDebugName#206374(o)
000152:0x0022e0e8:	adds	@s00, @s00, #return
000152:0x0022e0f8:	moves	res, @s00
000153:0x0022e108:	adds	@s01, res, _s' src='
000153:0x0022e118:	moves	@s00, @s01
000153:0x0022e128:	movem	loc, m_Src
000153:0x0022e138:	call	DumpToStringNullSafe(loc)
000153:0x0022e148:	adds	@s00, @s00, #return
000153:0x0022e158:	moves	res, @s00
000154:0x0022e168:	adds	@s00, res, _s' }'
000154:0x0022e178:	moves	res, @s00
000155:0x0022e188:	moves	#return, res
000155:0x0022e198:	rts
000155:0x0022e1a0:	rts
HandEventBase::ReserveInventory()
000160:0x0022e1d0:	call	
000160:0x0022e1e0:	movem	dst, #return
000160:0x0022e1f0:	release	#return
000161:0x0022e1f8:	cmpcm	dst, null
000161:0x0022e208:	beq	0x22e290
000161:0x0022e210:	movefm	[0xb5b2afc0], m_Player
000161:0x0022e220:	call	
000161:0x0022e230:	ncalli	InventoryLocation.GetItem()
000161:0x0022e238:	call	
000161:0x0022e250:	cmpi	#return, _i0
000161:0x0022e260:	bne	0x22e290
000163:0x0022e268:	imove	#return, 0x000000
000163:0x0022e278:	release	#return
000163:0x0022e280:	release	dst
000163:0x0022e288:	rts
000163:0x0022e290:	release	#return
000165:0x0022e298:	imove	#return, 0x000001
000165:0x0022e2a8:	release	dst
000165:0x0022e2b0:	rts
000165:0x0022e2b8:	release	dst
000165:0x0022e2c0:	rts
HandEventBase::ClearInventoryReservation()
000170:0x0022e2f0:	call	
000170:0x0022e300:	movem	dst, #return
000170:0x0022e310:	release	#return
000171:0x0022e318:	cmpcm	dst, null
000171:0x0022e328:	beq	0x22e378
000173:0x0022e330:	movefm	[0xb5b2afc0], m_Player
000173:0x0022e340:	call	
000173:0x0022e350:	ncalli	InventoryLocation.GetItem()
000173:0x0022e358:	call	
000173:0x0022e370:	release	#return
000173:0x0022e378:	release	dst
000173:0x0022e380:	rts
HandEventTake::HandEventTake()
000180:0x0022e388:	imove	m_EventID, 0x000001
000180:0x0022e398:	rts
HandEventTake::GetDst()
000184:0x0022e3c8:	new	dst, InventoryLocation
000185:0x0022e3e8:	movefm	[0xb5b9f388], m_Player
000185:0x0022e3f8:	call	
000185:0x0022e408:	movefm	[0xb5b9f3b0], #return
000185:0x0022e418:	ncalli	InventoryLocation.SetHands([0xb5b9f388], [0xb5b9f3b0])
000185:0x0022e428:	release	#return
000186:0x0022e430:	movem	#return, dst
000186:0x0022e440:	release	dst
000186:0x0022e448:	rts
000186:0x0022e450:	release	dst
000186:0x0022e458:	rts
HandEventTake::CheckRequestSrc()
000191:0x0022e528:	movefm	[0xb5baf3c0], m_Player
000191:0x0022e538:	call	
000191:0x0022e548:	movefm	[0xb5baf3e8], #return
000191:0x0022e558:	ncall	CheckRequestSrc([0xb5baf3c0], [0xb5baf3e8], c_MaxItemDistanceRadius)
000191:0x0022e570:	cmpi	false, #return
000191:0x0022e580:	bne	0x22e720
000193:0x0022e588:	call	
000193:0x0022e598:	call	EnumToString(_T(HandEventID), #return)
000193:0x0022e5b0:	icall	ToString(m_Player)
000193:0x0022e5c0:	call	InventoryHFSMLog(_s'CANNOT perform', #return, _s'n/a', _s'CheckRequestSrc', #return)
000194:0x0022e5e0:	movem	o, m_Player
000194:0x0022e5f0:	call	GetDebugName#206374(o)
000194:0x0022e600:	adds	@s05, _s'[cheat] HandleInputData man=', #return
000194:0x0022e610:	moves	@s04, @s05
000194:0x0022e620:	adds	@s04, @s04, _s' failed src1 check with cmd='
000194:0x0022e630:	moves	@s03, @s04
000194:0x0022e640:	call	
000194:0x0022e650:	call	EnumToString(_T(HandEventID), #return)
000194:0x0022e668:	adds	@s03, @s03, #return
000194:0x0022e678:	moves	@s02, @s03
000194:0x0022e688:	adds	@s02, @s02, _s' src1='
000194:0x0022e698:	moves	@s01, @s02
000194:0x0022e6a8:	call	
000194:0x0022e6b8:	call	DumpToStringNullSafe(#return)
000194:0x0022e6c8:	adds	@s01, @s01, #return
000194:0x0022e6d8:	moves	@s00, @s01
000194:0x0022e6e8:	call	syncDebugPrint(@s00)
000194:0x0022e6f8:	release	#return
000195:0x0022e700:	imove	#return, 0x000000
000195:0x0022e710:	release	#return
000195:0x0022e718:	rts
000195:0x0022e720:	release	#return
000197:0x0022e728:	imove	#return, 0x000001
000197:0x0022e738:	rts
000197:0x0022e740:	rts
HandEventTake::CheckRequest()
000202:0x0022e748:	movefm	[0xb5baf5c8], m_Player
000202:0x0022e758:	call	
000202:0x0022e768:	movefm	[0xb5baf5f0], #return
000202:0x0022e778:	call	
000202:0x0022e788:	movefm	[0xb5baf618], #return
000202:0x0022e798:	ncall	CheckMoveToDstRequest([0xb5baf5c8], [0xb5baf5f0], [0xb5baf618], c_MaxItemDistanceRadius)
000202:0x0022e7b0:	move	#return, #return
000202:0x0022e7c0:	release	#return
000202:0x0022e7c8:	release	#return
000202:0x0022e7d0:	rts
000202:0x0022e7d8:	rts
HandEventTake::CanPerformEvent()
000207:0x0022e7e0:	call	
000207:0x0022e7f0:	movefm	[0xb5bad978], #return
000207:0x0022e800:	call	
000207:0x0022e810:	movefm	[0xb5bad9a0], #return
000207:0x0022e820:	ncall	LocationCanMoveEntity([0xb5bad978], [0xb5bad9a0])
000207:0x0022e830:	cmpi	false, #return
000207:0x0022e840:	bne	0x22e870
000216:0x0022e848:	imove	#return, 0x000000
000216:0x0022e858:	release	#return
000216:0x0022e860:	release	#return
000216:0x0022e868:	rts
000216:0x0022e870:	release	#return
000216:0x0022e878:	release	#return
000218:0x0022e880:	imove	#return, 0x000001
000218:0x0022e890:	rts
000218:0x0022e898:	rts
HandEventTake::AcquireInventoryJunctureFromServer()
000223:0x0022e918:	call	
000223:0x0022e928:	movem	src, #return
000223:0x0022e938:	release	#return
000224:0x0022e940:	call	
000224:0x0022e950:	movem	dst, #return
000224:0x0022e960:	release	#return
000225:0x0022e968:	cmpcm	src, null
000225:0x0022e978:	beq	0x22e9d8
000225:0x0022e980:	cmpcm	dst, null
000225:0x0022e990:	beq	0x22e9d8
000227:0x0022e998:	call	TryAcquireInventoryJunctureFromServer(player, src, dst)
000227:0x0022e9b0:	move	#return, #return
000227:0x0022e9c0:	release	src
000227:0x0022e9c8:	release	dst
000227:0x0022e9d0:	rts
000229:0x0022e9d8:	call	
000229:0x0022e9e8:	adds	@s01, _s'[hndfsm] HandEventTake. AcquireInventoryJunctureFromServer: no src or dst for ev=', #return
000229:0x0022e9f8:	moves	@s00, @s01
000229:0x0022ea08:	call	Error(@s00)
000230:0x0022ea18:	imove	#return, 0x000003
000230:0x0022ea28:	release	src
000230:0x0022ea30:	release	dst
000230:0x0022ea38:	rts
000230:0x0022ea40:	release	src
000230:0x0022ea48:	release	dst
000230:0x0022ea50:	rts
HandEventMoveTo::HandEventMoveTo()
000238:0x0022ea58:	imove	m_EventID, 0x000002
000238:0x0022ea68:	movem	m_Dst, dst
000238:0x0022ea78:	rts
HandEventMoveTo::ReadFromContext()
000242:0x0022ea80:	new	m_Dst, InventoryLocation
000243:0x0022eaa0:	call	
000244:0x0022eab0:	movefm	[0xb5b18280], m_Dst
000244:0x0022eac0:	call	
000244:0x0022ead0:	rts
HandEventMoveTo::WriteToContext()
000248:0x0022ead8:	call	
000249:0x0022eae8:	movefm	[0xb5b18280], m_Dst
000249:0x0022eaf8:	call	
000249:0x0022eb08:	rts
HandEventMoveTo::GetDst()
000252:0x0022eb10:	movem	#return, m_Dst
000252:0x0022eb20:	rts
000252:0x0022eb28:	rts
HandEventMoveTo::CheckRequestSrc()
000256:0x0022eb30:	movefm	[0xb5baf3c0], m_Player
000256:0x0022eb40:	call	
000256:0x0022eb50:	movefm	[0xb5baf3e8], #return
000256:0x0022eb60:	ncall	CheckRequestSrc([0xb5baf3c0], [0xb5baf3e8], c_MaxItemDistanceRadius)
000256:0x0022eb78:	cmpi	false, #return
000256:0x0022eb88:	bne	0x22ecd0
000258:0x0022eb90:	movem	o, m_Player
000258:0x0022eba0:	call	GetDebugName#206374(o)
000258:0x0022ebb0:	adds	@s05, _s'[cheat] HandleInputData man=', #return
000258:0x0022ebc0:	moves	@s04, @s05
000258:0x0022ebd0:	adds	@s04, @s04, _s' failed src1 check with cmd='
000258:0x0022ebe0:	moves	@s03, @s04
000258:0x0022ebf0:	call	
000258:0x0022ec00:	call	EnumToString(_T(HandEventID), #return)
000258:0x0022ec18:	adds	@s03, @s03, #return
000258:0x0022ec28:	moves	@s02, @s03
000258:0x0022ec38:	adds	@s02, @s02, _s' src1='
000258:0x0022ec48:	moves	@s01, @s02
000258:0x0022ec58:	call	
000258:0x0022ec68:	call	DumpToStringNullSafe(#return)
000258:0x0022ec78:	adds	@s01, @s01, #return
000258:0x0022ec88:	moves	@s00, @s01
000258:0x0022ec98:	call	syncDebugPrint(@s00)
000258:0x0022eca8:	release	#return
000259:0x0022ecb0:	imove	#return, 0x000000
000259:0x0022ecc0:	release	#return
000259:0x0022ecc8:	rts
000259:0x0022ecd0:	release	#return
000261:0x0022ecd8:	imove	#return, 0x000001
000261:0x0022ece8:	rts
000261:0x0022ecf0:	rts
HandEventMoveTo::CheckRequest()
000266:0x0022ecf8:	movefm	[0xb5baf5c8], m_Player
000266:0x0022ed08:	call	
000266:0x0022ed18:	movefm	[0xb5baf5f0], #return
000266:0x0022ed28:	call	
000266:0x0022ed38:	movefm	[0xb5baf618], #return
000266:0x0022ed48:	ncall	CheckMoveToDstRequest([0xb5baf5c8], [0xb5baf5f0], [0xb5baf618], c_MaxItemDistanceRadius)
000266:0x0022ed60:	move	#return, #return
000266:0x0022ed70:	release	#return
000266:0x0022ed78:	release	#return
000266:0x0022ed80:	rts
000266:0x0022ed88:	rts
HandEventMoveTo::CanPerformEvent()
000271:0x0022ed90:	call	
000271:0x0022eda0:	movefm	[0xb5bad978], #return
000271:0x0022edb0:	call	
000271:0x0022edc0:	movefm	[0xb5bad9a0], #return
000271:0x0022edd0:	ncall	LocationCanMoveEntity([0xb5bad978], [0xb5bad9a0])
000271:0x0022ede0:	cmpi	false, #return
000271:0x0022edf0:	bne	0x22ee20
000279:0x0022edf8:	imove	#return, 0x000000
000279:0x0022ee08:	release	#return
000279:0x0022ee10:	release	#return
000279:0x0022ee18:	rts
000279:0x0022ee20:	release	#return
000279:0x0022ee28:	release	#return
000281:0x0022ee30:	imove	#return, 0x000001
000281:0x0022ee40:	rts
000281:0x0022ee48:	rts
HandEventMoveTo::AcquireInventoryJunctureFromServer()
000286:0x0022eec8:	call	
000286:0x0022eed8:	movem	src, #return
000286:0x0022eee8:	release	#return
000287:0x0022eef0:	call	
000287:0x0022ef00:	movem	dst, #return
000287:0x0022ef10:	release	#return
000288:0x0022ef18:	cmpcm	src, null
000288:0x0022ef28:	beq	0x22ef88
000288:0x0022ef30:	cmpcm	dst, null
000288:0x0022ef40:	beq	0x22ef88
000290:0x0022ef48:	call	TryAcquireInventoryJunctureFromServer(player, src, dst)
000290:0x0022ef60:	move	#return, #return
000290:0x0022ef70:	release	src
000290:0x0022ef78:	release	dst
000290:0x0022ef80:	rts
000292:0x0022ef88:	call	
000292:0x0022ef98:	adds	@s01, _s'[hndfsm] HandEventMoveTo. AcquireInventoryJunctureFromServer: no src or dst for ev=', #return
000292:0x0022efa8:	moves	@s00, @s01
000292:0x0022efb8:	call	Error(@s00)
000293:0x0022efc8:	imove	#return, 0x000003
000293:0x0022efd8:	release	src
000293:0x0022efe0:	release	dst
000293:0x0022efe8:	rts
000293:0x0022eff0:	release	src
000293:0x0022eff8:	release	dst
000293:0x0022f000:	rts
HandEventMoveTo::DumpToString()
000298:0x0022f080:	call	
000298:0x0022f090:	call	EnumToString(_T(HandEventID), #return)
000298:0x0022f0a8:	adds	@s07, _s'{ HandEventMoveTo id=', #return
000298:0x0022f0b8:	moves	@s06, @s07
000298:0x0022f0c8:	adds	@s06, @s06, _s' pl='
000298:0x0022f0d8:	moves	@s05, @s06
000298:0x0022f0e8:	movem	o, m_Player
000298:0x0022f0f8:	call	GetDebugName#206374(o)
000298:0x0022f108:	adds	@s05, @s05, #return
000298:0x0022f118:	moves	@s04, @s05
000298:0x0022f128:	adds	@s04, @s04, _s' src='
000298:0x0022f138:	moves	@s03, @s04
000298:0x0022f148:	movem	loc, m_Src
000298:0x0022f158:	call	DumpToStringNullSafe(loc)
000298:0x0022f168:	adds	@s03, @s03, #return
000298:0x0022f178:	moves	@s02, @s03
000298:0x0022f188:	adds	@s02, @s02, _s' dst='
000298:0x0022f198:	moves	@s01, @s02
000298:0x0022f1a8:	movem	loc, m_Dst
000298:0x0022f1b8:	call	DumpToStringNullSafe(loc)
000298:0x0022f1c8:	adds	@s01, @s01, #return
000298:0x0022f1d8:	moves	@s00, @s01
000298:0x0022f1e8:	adds	res, @s00, _s' }'
000299:0x0022f1f8:	moves	#return, res
000299:0x0022f208:	rts
000299:0x0022f210:	rts
HandEventRemove::GetDst()
000308:0x0022f218:	movem	#return, m_Dst
000308:0x0022f228:	rts
000308:0x0022f230:	rts
HandEventRemove::CheckRequestSrc()
000313:0x0022f238:	movefm	[0xb5baf3c0], m_Player
000313:0x0022f248:	call	
000313:0x0022f258:	movefm	[0xb5baf3e8], #return
000313:0x0022f268:	ncall	CheckRequestSrc([0xb5baf3c0], [0xb5baf3e8], c_MaxItemDistanceRadius)
000313:0x0022f280:	cmpi	false, #return
000313:0x0022f290:	bne	0x22f2b8
000321:0x0022f298:	imove	#return, 0x000000
000321:0x0022f2a8:	release	#return
000321:0x0022f2b0:	rts
000321:0x0022f2b8:	release	#return
000323:0x0022f2c0:	imove	#return, 0x000001
000323:0x0022f2d0:	rts
000323:0x0022f2d8:	rts
HandEventRemove::CheckRequest()
000328:0x0022f2e0:	movefm	[0xb5baf5c8], m_Player
000328:0x0022f2f0:	call	
000328:0x0022f300:	movefm	[0xb5baf5f0], #return
000328:0x0022f310:	call	
000328:0x0022f320:	movefm	[0xb5baf618], #return
000328:0x0022f330:	ncall	CheckMoveToDstRequest([0xb5baf5c8], [0xb5baf5f0], [0xb5baf618], c_MaxItemDistanceRadius)
000328:0x0022f348:	move	#return, #return
000328:0x0022f358:	release	#return
000328:0x0022f360:	release	#return
000328:0x0022f368:	rts
000328:0x0022f370:	rts
HandEventRemove::CanPerformEvent()
000333:0x0022f378:	call	
000333:0x0022f388:	movefm	[0xb5bad978], #return
000333:0x0022f398:	call	
000333:0x0022f3a8:	movefm	[0xb5bad9a0], #return
000333:0x0022f3b8:	ncall	LocationCanMoveEntity([0xb5bad978], [0xb5bad9a0])
000333:0x0022f3c8:	cmpi	false, #return
000333:0x0022f3d8:	bne	0x22f408
000341:0x0022f3e0:	imove	#return, 0x000000
000341:0x0022f3f0:	release	#return
000341:0x0022f3f8:	release	#return
000341:0x0022f400:	rts
000341:0x0022f408:	release	#return
000341:0x0022f410:	release	#return
000343:0x0022f418:	imove	#return, 0x000001
000343:0x0022f428:	rts
000343:0x0022f430:	rts
HandEventRemove::AcquireInventoryJunctureFromServer()
000348:0x0022f4b0:	call	
000348:0x0022f4c0:	movem	src, #return
000348:0x0022f4d0:	release	#return
000349:0x0022f4d8:	call	
000349:0x0022f4e8:	movem	dst, #return
000349:0x0022f4f8:	release	#return
000350:0x0022f500:	cmpcm	src, null
000350:0x0022f510:	beq	0x22f570
000350:0x0022f518:	cmpcm	dst, null
000350:0x0022f528:	beq	0x22f570
000352:0x0022f530:	call	TryAcquireInventoryJunctureFromServer(player, src, dst)
000352:0x0022f548:	move	#return, #return
000352:0x0022f558:	release	src
000352:0x0022f560:	release	dst
000352:0x0022f568:	rts
000354:0x0022f570:	call	
000354:0x0022f580:	adds	@s01, _s'[hndfsm] HandEventThrow. AcquireInventoryJunctureFromServer: no src or dst for ev=', #return
000354:0x0022f590:	moves	@s00, @s01
000354:0x0022f5a0:	call	Error(@s00)
000355:0x0022f5b0:	imove	#return, 0x000003
000355:0x0022f5c0:	release	src
000355:0x0022f5c8:	release	dst
000355:0x0022f5d0:	rts
000355:0x0022f5d8:	release	src
000355:0x0022f5e0:	release	dst
000355:0x0022f5e8:	rts
HandEventDrop::HandEventDrop()
000365:0x0022f5f0:	imove	m_EventID, 0x000003
000366:0x0022f600:	imove	m_CanPerformDrop, 0x000001
000366:0x0022f610:	rts
HandEventDrop::ReadFromContext()
000371:0x0022f618:	call	
000373:0x0022f628:	icall	
000374:0x0022f638:	movem	loc, m_Dst
000374:0x0022f648:	call	OptionalLocationReadFromContext(loc, ctx)
000374:0x0022f660:	movem	m_Dst, loc
000374:0x0022f670:	release	loc
000375:0x0022f678:	cmpcm	m_Dst, null
000375:0x0022f688:	bne	0x22f6b0
000377:0x0022f690:	new	m_Dst, InventoryLocation
000377:0x0022f6b0:	rts
HandEventDrop::WriteToContext()
000383:0x0022f6b8:	call	
000385:0x0022f6c8:	icall	
000386:0x0022f6d8:	movem	loc, m_Dst
000386:0x0022f6e8:	call	OptionalLocationWriteToContext(loc, ctx)
000386:0x0022f700:	rts
HandEventDrop::CheckRequestEx()
000392:0x0022f708:	movefm	@c00, validation
000392:0x0022f718:	cmpi	m_IsJuncture, _i0
000392:0x0022f728:	bne	0x22f7d0
000392:0x0022f730:	call	
000392:0x0022f740:	cmpi	#return, _i0
000392:0x0022f750:	beq	0x22f7d0
000394:0x0022f758:	movem	owner, m_Player
000394:0x0022f768:	call	
000394:0x0022f778:	movem	ground, m_Dst
000394:0x0022f788:	call	SetGroundPosByOwner(owner, #return, ground)
000394:0x0022f7a0:	movem	m_Dst, ground
000394:0x0022f7b0:	release	ground
000394:0x0022f7b8:	move	m_CanPerformDrop, #return
000394:0x0022f7c8:	release	#return
000397:0x0022f7d0:	cmpi	m_CanPerformDrop, _i0
000397:0x0022f7e0:	bne	0x22f820
000399:0x0022f7e8:	movefm	@c00, validation
000399:0x0022f7f8:	imove	m_Reason, 0x000002
000400:0x0022f808:	imove	#return, 0x000000
000400:0x0022f818:	rts
000403:0x0022f820:	call	
000403:0x0022f830:	move	#return, #return
000403:0x0022f840:	rts
000403:0x0022f848:	rts
HandEventDrop::CanPerformEventEx()
000408:0x0022f850:	cmpi	m_CanPerformDrop, _i0
000408:0x0022f860:	bne	0x22f880
000410:0x0022f868:	imove	#return, 0x000000
000410:0x0022f878:	rts
000414:0x0022f880:	movefm	@c00, validation
000414:0x0022f890:	cmpi	m_IsJuncture, _i0
000414:0x0022f8a0:	bne	0x22f968
000414:0x0022f8a8:	movefm	@c00, validation
000414:0x0022f8b8:	cmpi	m_IsRemote, _i0
000414:0x0022f8c8:	bne	0x22f968
000414:0x0022f8d0:	call	
000414:0x0022f8e0:	cmpcm	#return, null
000414:0x0022f8f0:	bne	0x22f968
000414:0x0022f8f8:	ncall	GetGame()
000414:0x0022f900:	ncalli	CGame.IsMultiplayer()
000414:0x0022f908:	cmpi	#return, _i0
000414:0x0022f918:	beq	0x22f968
000414:0x0022f920:	ncall	GetGame()
000414:0x0022f928:	ncalli	CGame.IsClient()
000414:0x0022f930:	cmpi	#return, _i0
000414:0x0022f940:	beq	0x22f968
000416:0x0022f948:	imove	#return, 0x000001
000416:0x0022f958:	release	#return
000416:0x0022f960:	rts
000416:0x0022f968:	release	#return
000420:0x0022f970:	movefm	@c00, validation
000420:0x0022f980:	cmpi	m_IsRemote, _i0
000420:0x0022f990:	bne	0x22fab0
000420:0x0022f998:	call	
000420:0x0022f9a8:	cmpcm	#return, null
000420:0x0022f9b8:	bne	0x22fab0
000422:0x0022f9c0:	new	m_Dst, InventoryLocation
000423:0x0022f9e0:	movem	owner, m_Player
000423:0x0022f9f0:	call	
000423:0x0022fa00:	movem	ground, m_Dst
000423:0x0022fa10:	call	SetGroundPosByOwner(owner, #return, ground)
000423:0x0022fa28:	movem	m_Dst, ground
000423:0x0022fa38:	release	ground
000423:0x0022fa40:	move	m_CanPerformDrop, #return
000423:0x0022fa50:	release	#return
000425:0x0022fa58:	cmpi	m_CanPerformDrop, _i0
000425:0x0022fa68:	bne	0x22fab0
000427:0x0022fa70:	movefm	@c00, validation
000427:0x0022fa80:	imove	m_Reason, 0x000002
000428:0x0022fa90:	imove	#return, 0x000000
000428:0x0022faa0:	release	#return
000428:0x0022faa8:	rts
000428:0x0022fab0:	release	#return
000432:0x0022fab8:	call	
000432:0x0022fac8:	move	#return, #return
000432:0x0022fad8:	rts
000432:0x0022fae0:	rts
HandEventThrow::HandEventThrow()
000442:0x0022fb90:	imove	m_EventID, 0x000004
000443:0x0022fba0:	cmpcm	src, null
000443:0x0022fbb0:	beq	0x22fc78
000446:0x0022fbb8:	call	
000446:0x0022fbc8:	movem	entity, #return
000446:0x0022fbd8:	release	#return
000447:0x0022fbe0:	cmpcm	entity, null
000447:0x0022fbf0:	beq	0x22fc60
000449:0x0022fbf8:	new	m_Dst, InventoryLocation
000450:0x0022fc18:	icall	GetTransform(entity, mat)
000451:0x0022fc28:	movefm	[0xb5b9ef50], entity
000451:0x0022fc38:	movefm	[0xb5b18280], m_Dst
000451:0x0022fc48:	ncalli	InventoryLocation.SetGround([0xb5b9ef50], mat)
000451:0x0022fc58:	jump	0x22fc70
000455:0x0022fc60:	call	Error(_s'[hndfsm] HandEventThrow src entity null!')
000455:0x0022fc70:	release	entity
000455:0x0022fc78:	rts
HandEventThrow::ReadFromContext()
000462:0x0022fcf8:	call	
000464:0x0022fd08:	new	m_Dst, InventoryLocation
000465:0x0022fd28:	movefm	[0xb5b18280], m_Dst
000465:0x0022fd38:	call	
000468:0x0022fd48:	icall	
000469:0x0022fd58:	icall	
000470:0x0022fd68:	icall	
000471:0x0022fd78:	itv	m_Force[0x000000], x
000472:0x0022fd88:	itv	m_Force[0x000001], y
000473:0x0022fd98:	itv	m_Force[0x000002], z
000473:0x0022fda8:	rts
HandEventThrow::WriteToContext()
000478:0x0022fdb0:	call	
000480:0x0022fdc0:	movefm	[0xb5b18280], m_Dst
000480:0x0022fdd0:	call	
000482:0x0022fde0:	ifv	@f00, m_Force[0x000000]
000482:0x0022fdf0:	icall	
000483:0x0022fe00:	ifv	@f00, m_Force[0x000001]
000483:0x0022fe10:	icall	
000484:0x0022fe20:	ifv	@f00, m_Force[0x000002]
000484:0x0022fe30:	icall	
000484:0x0022fe40:	rts
HandEventThrow::SetForce()
000487:0x0022fe48:	movev	m_Force, force
000487:0x0022fe58:	rts
HandEventThrow::GetForce()
000488:0x0022fe60:	movev	#return, m_Force
000488:0x0022fe70:	rts
000488:0x0022fe78:	rts
HandEventSwap::HandEventSwap()
000501:0x0022fe80:	imove	m_Animation2ID, 0xffffffff
000503:0x0022fe90:	imove	m_EventID, 0x000005
000504:0x0022fea0:	movem	m_Dst, dst
000505:0x0022feb0:	movem	m_Src2, src2
000506:0x0022fec0:	movem	m_Dst2, dst2
000506:0x0022fed0:	rts
HandEventSwap::ReadFromContext()
000511:0x0022fed8:	call	
000513:0x0022fee8:	new	m_Src2, InventoryLocation
000514:0x0022ff08:	new	m_Dst, InventoryLocation
000515:0x0022ff28:	new	m_Dst2, InventoryLocation
000517:0x0022ff48:	movefm	[0xb5b18280], m_Src2
000517:0x0022ff58:	call	
000518:0x0022ff68:	movefm	[0xb5b18280], m_Dst
000518:0x0022ff78:	call	
000519:0x0022ff88:	movefm	[0xb5b18280], m_Dst2
000519:0x0022ff98:	call	
000520:0x0022ffa8:	icall	
000520:0x0022ffb8:	rts
HandEventSwap::WriteToContext()
000525:0x0022ffc0:	call	
000527:0x0022ffd0:	movefm	[0xb5b18280], m_Src2
000527:0x0022ffe0:	call	
000528:0x0022fff0:	movefm	[0xb5b18280], m_Dst
000528:0x00230000:	call	
000529:0x00230010:	movefm	[0xb5b18280], m_Dst2
000529:0x00230020:	call	
000530:0x00230030:	icall	
000530:0x00230040:	rts
HandEventSwap::GetDst()
000535:0x00230048:	movem	#return, m_Dst
000535:0x00230058:	rts
000535:0x00230060:	rts
HandEventSwap::GetSecondSrcEntity()
000540:0x00230068:	movefm	[0xb5b18280], m_Src2
000540:0x00230078:	ncalli	InventoryLocation.GetItem()
000540:0x00230080:	movetm	#return, #return
000540:0x00230090:	rts
000540:0x00230098:	rts
HandEventSwap::CheckRequestSrc()
000545:0x002300f0:	movefm	[0xb5baf3c0], m_Player
000545:0x00230100:	call	
000545:0x00230110:	movefm	[0xb5baf3e8], #return
000545:0x00230120:	ncall	CheckRequestSrc([0xb5baf3c0], [0xb5baf3e8], c_MaxItemDistanceRadius)
000545:0x00230138:	cmpi	false, #return
000545:0x00230148:	bne	0x230290
000547:0x00230150:	movem	o, m_Player
000547:0x00230160:	call	GetDebugName#206374(o)
000547:0x00230170:	adds	@s05, _s'[cheat] HandleInputData man=', #return
000547:0x00230180:	moves	@s04, @s05
000547:0x00230190:	adds	@s04, @s04, _s' failed src1 check with cmd='
000547:0x002301a0:	moves	@s03, @s04
000547:0x002301b0:	call	
000547:0x002301c0:	call	EnumToString(_T(HandEventID), #return)
000547:0x002301d8:	adds	@s03, @s03, #return
000547:0x002301e8:	moves	@s02, @s03
000547:0x002301f8:	adds	@s02, @s02, _s' src1='
000547:0x00230208:	moves	@s01, @s02
000547:0x00230218:	call	
000547:0x00230228:	call	DumpToStringNullSafe(#return)
000547:0x00230238:	adds	@s01, @s01, #return
000547:0x00230248:	moves	@s00, @s01
000547:0x00230258:	call	syncDebugPrint(@s00)
000547:0x00230268:	release	#return
000548:0x00230270:	imove	#return, 0x000000
000548:0x00230280:	release	#return
000548:0x00230288:	rts
000548:0x00230290:	release	#return
000550:0x00230298:	movefm	[0xb5baf3c0], m_Player
000550:0x002302a8:	movefm	[0xb5baf3e8], m_Src2
000550:0x002302b8:	ncall	CheckRequestSrc([0xb5baf3c0], [0xb5baf3e8], c_MaxItemDistanceRadius)
000550:0x002302d0:	cmpi	false, #return
000550:0x002302e0:	bne	0x230418
000552:0x002302e8:	movem	o, m_Player
000552:0x002302f8:	call	GetDebugName#206374(o)
000552:0x00230308:	adds	@s05, _s'[cheat] HandleInputData man=', #return
000552:0x00230318:	moves	@s04, @s05
000552:0x00230328:	adds	@s04, @s04, _s' failed src2 check with cmd='
000552:0x00230338:	moves	@s03, @s04
000552:0x00230348:	call	
000552:0x00230358:	call	EnumToString(_T(HandEventID), #return)
000552:0x00230370:	adds	@s03, @s03, #return
000552:0x00230380:	moves	@s02, @s03
000552:0x00230390:	adds	@s02, @s02, _s' src2='
000552:0x002303a0:	moves	@s01, @s02
000552:0x002303b0:	movem	loc, m_Src2
000552:0x002303c0:	call	DumpToStringNullSafe(loc)
000552:0x002303d0:	adds	@s01, @s01, #return
000552:0x002303e0:	moves	@s00, @s01
000552:0x002303f0:	call	syncDebugPrint(@s00)
000553:0x00230400:	imove	#return, 0x000000
000553:0x00230410:	rts
000555:0x00230418:	imove	#return, 0x000001
000555:0x00230428:	rts
000555:0x00230430:	rts
HandEventSwap::CheckRequest()
000560:0x00230438:	movefm	[0xb5baf690], m_Player
000560:0x00230448:	movefm	[0xb5baf6b8], m_Src
000560:0x00230458:	movefm	[0xb5baf6e0], m_Src2
000560:0x00230468:	movefm	[0xb5baf708], m_Dst
000560:0x00230478:	movefm	[0xb5baf730], m_Dst2
000560:0x00230488:	ncall	CheckSwapItemsRequest([0xb5baf690], [0xb5baf6b8], [0xb5baf6e0], [0xb5baf708], [0xb5baf730], c_MaxItemDistanceRadius)
000560:0x002304a8:	cmpi	#return, _i0
000560:0x002304b8:	bne	0x2304c8
000560:0x002304c0:	jump	0x230588
000569:0x002304c8:	movefm	[0xb5b2afc0], m_Player
000569:0x002304d8:	call	
000569:0x002304e8:	movefm	[0xb5bae7f0], m_Src
000569:0x002304f8:	movefm	[0xb5bae818], m_Src2
000569:0x00230508:	movefm	[0xb5bae840], m_Dst
000569:0x00230518:	movefm	[0xb5bae868], m_Dst2
000569:0x00230528:	ncalli	HumanInventory.CanAddSwappedEntity([0xb5bae7f0], [0xb5bae818], [0xb5bae840], [0xb5bae868])
000569:0x00230540:	cmpi	#return, _i0
000569:0x00230550:	bne	0x230560
000569:0x00230558:	jump	0x230580
000579:0x00230560:	imove	#return, 0x000001
000579:0x00230570:	release	#return
000579:0x00230578:	rts
000579:0x00230580:	release	#return
000581:0x00230588:	imove	#return, 0x000000
000581:0x00230598:	rts
000581:0x002305a0:	rts
HandEventSwap::CanPerformEvent()
000586:0x002305a8:	call	
000586:0x002305b8:	ncalli	InventoryLocation.GetItem()
000586:0x002305c0:	movem	item1_dst, m_Dst
000586:0x002305d0:	movefm	[0xb5b18280], m_Src2
000586:0x002305e0:	pushc	#return
000586:0x002305e8:	ncalli	InventoryLocation.GetItem()
000586:0x002305f0:	movec	@c01, #return
000586:0x00230600:	popc	#return
000586:0x00230608:	movem	item2_dst, m_Dst2
000586:0x00230618:	call	CanForceSwapEntitiesEx(#return, item1_dst, @c01, item2_dst)
000586:0x00230638:	movem	m_Dst2, item2_dst
000586:0x00230648:	release	item2_dst
000586:0x00230650:	cmpi	#return, _i0
000586:0x00230660:	beq	0x230688
000587:0x00230668:	imove	#return, 0x000001
000587:0x00230678:	release	#return
000587:0x00230680:	rts
000587:0x00230688:	release	#return
000595:0x00230690:	imove	#return, 0x000000
000595:0x002306a0:	rts
000595:0x002306a8:	rts
HandEventSwap::AcquireInventoryJunctureFromServer()
000600:0x002306b0:	movem	src1, m_Src
000600:0x002306c0:	movem	src2, m_Src2
000600:0x002306d0:	movem	dst1, m_Dst
000600:0x002306e0:	movem	dst2, m_Dst2
000600:0x002306f0:	call	TryAcquireTwoInventoryJuncturesFromServer(player, src1, src2, dst1, dst2)
000600:0x00230710:	move	#return, #return
000600:0x00230720:	rts
000600:0x00230728:	rts
HandEventSwap::DumpToString()
000605:0x002307a8:	call	
000605:0x002307b8:	call	EnumToString(_T(HandEventID), #return)
000605:0x002307d0:	adds	@s11, _s'{ HandEventSwap id=', #return
000605:0x002307e0:	moves	@s10, @s11
000605:0x002307f0:	adds	@s10, @s10, _s' pl='
000605:0x00230800:	moves	@s09, @s10
000605:0x00230810:	movem	o, m_Player
000605:0x00230820:	call	GetDebugName#206374(o)
000605:0x00230830:	adds	@s09, @s09, #return
000605:0x00230840:	moves	@s08, @s09
000605:0x00230850:	adds	@s08, @s08, _s' src1='
000605:0x00230860:	moves	@s07, @s08
000605:0x00230870:	movem	loc, m_Src
000605:0x00230880:	call	DumpToStringNullSafe(loc)
000605:0x00230890:	adds	@s07, @s07, #return
000605:0x002308a0:	moves	@s06, @s07
000605:0x002308b0:	adds	@s06, @s06, _s' src2='
000605:0x002308c0:	moves	@s05, @s06
000605:0x002308d0:	movem	loc, m_Src2
000605:0x002308e0:	call	DumpToStringNullSafe(loc)
000605:0x002308f0:	adds	@s05, @s05, #return
000605:0x00230900:	moves	@s04, @s05
000605:0x00230910:	adds	@s04, @s04, _s' dst1='
000605:0x00230920:	moves	@s03, @s04
000605:0x00230930:	movem	loc, m_Dst
000605:0x00230940:	call	DumpToStringNullSafe(loc)
000605:0x00230950:	adds	@s03, @s03, #return
000605:0x00230960:	moves	@s02, @s03
000605:0x00230970:	adds	@s02, @s02, _s' dst2='
000605:0x00230980:	moves	@s01, @s02
000605:0x00230990:	movem	loc, m_Dst2
000605:0x002309a0:	call	DumpToStringNullSafe(loc)
000605:0x002309b0:	adds	@s01, @s01, #return
000605:0x002309c0:	moves	@s00, @s01
000605:0x002309d0:	adds	#return, @s00, _s' }'
000605:0x002309e0:	rts
000605:0x002309e8:	rts
HandEventSwap::CheckAndExecuteForceStandUp()
000610:0x00230a18:	movefm	@c02, m_Player
000610:0x00230a28:	icall	SafeCastType([0xb5b2afc0], @c01, @c02)
000610:0x00230a40:	movetm	player, @c01
000611:0x00230a50:	movefm	[0xb5b18280], m_Src
000611:0x00230a60:	ncalli	InventoryLocation.GetItem()
000611:0x00230a68:	movefm	[0xb5b18280], m_Src2
000611:0x00230a78:	pushc	#return
000611:0x00230a80:	ncalli	InventoryLocation.GetItem()
000611:0x00230a88:	movec	@c01, #return
000611:0x00230a98:	popc	#return
000611:0x00230aa0:	call	
000611:0x00230ab8:	release	player
000611:0x00230ac0:	rts
HandEventSwap::ReserveInventory()
000616:0x00230ac8:	movefm	[0xb5b2afc0], m_Player
000616:0x00230ad8:	call	
000616:0x00230ae8:	movefm	[0xb5b18280], m_Dst
000616:0x00230af8:	ncalli	InventoryLocation.GetItem()
000616:0x00230b00:	movem	dst, m_Dst
000616:0x00230b10:	call	
000616:0x00230b28:	cmpi	#return, _i0
000616:0x00230b38:	bne	0x230b60
000618:0x00230b40:	imove	#return, 0x000000
000618:0x00230b50:	release	#return
000618:0x00230b58:	rts
000618:0x00230b60:	release	#return
000620:0x00230b68:	movefm	[0xb5b2afc0], m_Player
000620:0x00230b78:	call	
000620:0x00230b88:	movefm	[0xb5b18280], m_Dst2
000620:0x00230b98:	ncalli	InventoryLocation.GetItem()
000620:0x00230ba0:	movem	dst, m_Dst2
000620:0x00230bb0:	call	
000620:0x00230bc8:	cmpi	#return, _i0
000620:0x00230bd8:	bne	0x230c68
000622:0x00230be0:	movefm	[0xb5b2afc0], m_Player
000622:0x00230bf0:	call	
000622:0x00230c00:	movefm	[0xb5b18280], m_Dst
000622:0x00230c10:	ncalli	InventoryLocation.GetItem()
000622:0x00230c18:	movem	dst, m_Dst
000622:0x00230c28:	call	
000622:0x00230c40:	release	#return
000623:0x00230c48:	imove	#return, 0x000000
000623:0x00230c58:	release	#return
000623:0x00230c60:	rts
000623:0x00230c68:	release	#return
000625:0x00230c70:	imove	#return, 0x000001
000625:0x00230c80:	rts
000625:0x00230c88:	rts
HandEventSwap::ClearInventoryReservation()
000630:0x00230c90:	movefm	[0xb5b2afc0], m_Player
000630:0x00230ca0:	call	
000630:0x00230cb0:	movefm	[0xb5b18280], m_Dst
000630:0x00230cc0:	ncalli	InventoryLocation.GetItem()
000630:0x00230cc8:	movem	dst, m_Dst
000630:0x00230cd8:	call	
000630:0x00230cf0:	release	#return
000631:0x00230cf8:	movefm	[0xb5b2afc0], m_Player
000631:0x00230d08:	call	
000631:0x00230d18:	movefm	[0xb5b18280], m_Dst2
000631:0x00230d28:	ncalli	InventoryLocation.GetItem()
000631:0x00230d30:	movem	dst, m_Dst2
000631:0x00230d40:	call	
000631:0x00230d58:	release	#return
000631:0x00230d60:	rts
HandEventForceSwap::HandEventForceSwap()
000637:0x00230d68:	imove	m_EventID, 0x000006
000637:0x00230d78:	rts
HandEventForceSwap::CheckRequest()
000641:0x00230e20:	imove	test1, 0x000000
000642:0x00230e30:	movefm	[0xb5b2afc0], m_Player
000642:0x00230e40:	call	
000642:0x00230e50:	ncalli	HumanInventory.GetEntityInHands()
000642:0x00230e58:	movetm	inHands, #return
000642:0x00230e68:	release	#return
000643:0x00230e70:	call	
000643:0x00230e80:	cmpcm	#return, null
000643:0x00230e90:	beq	0x230f78
000643:0x00230e98:	cmpcm	inHands, null
000643:0x00230ea8:	beq	0x230f78
000643:0x00230eb0:	cmpcm	m_Dst, null
000643:0x00230ec0:	beq	0x230f78
000643:0x00230ec8:	movefm	[0xb5b18280], m_Dst
000643:0x00230ed8:	ncalli	InventoryLocation.IsValid()
000643:0x00230ee0:	cmpi	#return, _i0
000643:0x00230ef0:	beq	0x230f78
000645:0x00230ef8:	movefm	[0xb5baf690], m_Player
000645:0x00230f08:	movefm	[0xb5baf6b8], m_Src
000645:0x00230f18:	movefm	[0xb5baf6e0], m_Src2
000645:0x00230f28:	movefm	[0xb5baf708], m_Dst
000645:0x00230f38:	movefm	[0xb5baf730], m_Dst2
000645:0x00230f48:	ncall	CheckSwapItemsRequest([0xb5baf690], [0xb5baf6b8], [0xb5baf6e0], [0xb5baf708], [0xb5baf730], c_MaxItemDistanceRadius)
000645:0x00230f68:	move	test1, #return
000645:0x00230f78:	release	#return
000654:0x00230f80:	move	#return, test1
000654:0x00230f90:	release	inHands
000654:0x00230f98:	rts
000654:0x00230fa0:	release	inHands
000654:0x00230fa8:	rts
HandEventForceSwap::CanPerformEvent()
000659:0x00231000:	movefm	[0xb5b18280], m_Src
000659:0x00231010:	ncalli	InventoryLocation.GetItem()
000659:0x00231018:	movem	item1_dst, m_Dst
000659:0x00231028:	movefm	[0xb5b18280], m_Src2
000659:0x00231038:	pushc	#return
000659:0x00231040:	ncalli	InventoryLocation.GetItem()
000659:0x00231048:	movec	@c01, #return
000659:0x00231058:	popc	#return
000659:0x00231060:	movem	item2_dst, m_Dst2
000659:0x00231070:	call	CanForceSwapEntitiesEx(#return, item1_dst, @c01, item2_dst)
000659:0x00231090:	movem	m_Dst2, item2_dst
000659:0x002310a0:	release	item2_dst
000659:0x002310a8:	move	test2, #return
000667:0x002310b8:	move	#return, test2
000667:0x002310c8:	rts
000667:0x002310d0:	rts
HandEventDestroy::HandEventDestroy()
000673:0x002310d8:	imove	m_EventID, 0x000007
000673:0x002310e8:	rts
HandEventDestroy::IsServerSideOnly()
000675:0x002310f0:	imove	#return, 0x000001
000675:0x00231100:	rts
000675:0x00231108:	rts
HandEventCreated::HandEventCreated()
000680:0x00231110:	imove	m_EventID, 0x000008
000680:0x00231120:	rts
HandEventDestroyed::HandEventDestroyed()
000685:0x00231128:	imove	m_EventID, 0x000009
000685:0x00231138:	rts
HandEventReplaceWithNewBase::HandEvengReplaceWithNewBase()
000693:0x00231140:	imove	m_EventID, 0x00000a
000693:0x00231150:	movem	m_Lambda, lambda
000693:0x00231160:	rts
HandEventReplaceWithNewBase::ReadFromContext()
000697:0x00231190:	call	
000698:0x002311a0:	icall	
000699:0x002311b0:	call	Error(_s'[hndfsm] HandEventDestroyAndReplaceWithNew - Cannot serialize lambda (read)')
000699:0x002311c0:	rts
HandEventReplaceWithNewBase::WriteToContext()
000703:0x002311f0:	call	
000704:0x00231200:	icall	
000705:0x00231210:	call	Error(_s'[hndfsm] HandEventDestroyAndReplaceWithNew - Cannot serialize lambda (write)')
000705:0x00231220:	rts
HandEventReplaceWithNewBase::IsServerSideOnly()
000708:0x00231228:	imove	#return, 0x000001
000708:0x00231238:	rts
000708:0x00231240:	rts
HandEventReplaceWithNewBase::GetDst()
000712:0x00231270:	new	dst, InventoryLocation
000713:0x00231290:	movefm	[0xb5b9f388], m_Player
000713:0x002312a0:	call	
000713:0x002312b0:	movefm	[0xb5b9f3b0], #return
000713:0x002312c0:	ncalli	InventoryLocation.SetHands([0xb5b9f388], [0xb5b9f3b0])
000713:0x002312d0:	release	#return
000714:0x002312d8:	movem	#return, dst
000714:0x002312e8:	release	dst
000714:0x002312f0:	rts
000714:0x002312f8:	release	dst
000714:0x00231300:	rts
HandEventReplaceWithNewBase::DumpToString()
000719:0x00231380:	call	
000719:0x00231390:	call	EnumToString(_T(HandEventID), #return)
000719:0x002313a8:	adds	@s09, _s'{ HandEvenReplaceWithNewBase id=', #return
000719:0x002313b8:	moves	@s08, @s09
000719:0x002313c8:	adds	@s08, @s08, _s' pl='
000719:0x002313d8:	moves	@s07, @s08
000719:0x002313e8:	movem	o, m_Player
000719:0x002313f8:	call	GetDebugName#206374(o)
000719:0x00231408:	adds	@s07, @s07, #return
000719:0x00231418:	moves	@s06, @s07
000719:0x00231428:	adds	@s06, @s06, _s' src='
000719:0x00231438:	moves	@s05, @s06
000719:0x00231448:	call	
000719:0x00231458:	call	DumpToStringNullSafe(#return)
000719:0x00231468:	adds	@s05, @s05, #return
000719:0x00231478:	moves	@s04, @s05
000719:0x00231488:	adds	@s04, @s04, _s' lambda='
000719:0x00231498:	moves	@s03, @s04
000719:0x002314a8:	icall	ToString(m_Lambda)
000719:0x002314b8:	adds	@s03, @s03, #return
000719:0x002314c8:	moves	@s02, @s03
000719:0x002314d8:	adds	@s02, @s02, _s' dst='
000719:0x002314e8:	moves	@s01, @s02
000719:0x002314f8:	call	
000719:0x00231508:	call	DumpToStringNullSafe(#return)
000719:0x00231518:	adds	@s01, @s01, #return
000719:0x00231528:	moves	@s00, @s01
000719:0x00231538:	adds	res, @s00, _s' }'
000719:0x00231548:	release	#return
000719:0x00231550:	release	#return
000720:0x00231558:	moves	#return, res
000720:0x00231568:	rts
000720:0x00231570:	rts
HandEventDestroyAndReplaceWithNew::HandEventDestroyAndReplaceWithNew()
000726:0x00231578:	imove	m_EventID, 0x00000a
000726:0x00231588:	movem	m_Lambda, lambda
000726:0x00231598:	rts
HandEventDestroyAndReplaceWithNewElsewhere::HandEventDestroyAndReplaceWithNewElsewhere()
000731:0x002315a0:	imove	m_EventID, 0x00000c
000731:0x002315b0:	movem	m_Lambda, lambda
000731:0x002315c0:	rts
HandEventDestroyElsewhereAndReplaceWithNewInHands::HandEventDestroyElsewhereAndReplaceWithNewInHands()
000736:0x002315c8:	imove	m_EventID, 0x00000c
000736:0x002315d8:	movem	m_Lambda, lambda
000736:0x002315e8:	rts
HandEventReplaced::HandEventReplaced()
000741:0x002315f0:	imove	m_EventID, 0x00000d
000741:0x00231600:	rts
HandAnimEventChanged::HandAnimEventChanged()
000748:0x00231608:	imove	m_EventID, 0x000010
000748:0x00231618:	rts
HandAnimEventFactory()
000753:0x00231648:	move	#switch, type
000753:0x00231658:	imove	@m00, 0x000014
000753:0x00231668:	cmpi	@m00, #switch
000753:0x00231678:	bne	0x2316b8
000755:0x00231680:	new	#return, HandAnimEventChanged
000755:0x002316a8:	rts
000755:0x002316b0:	jump	0x2316e0
000755:0x002316b8:	imove	@m00, 0x000015
000755:0x002316c8:	cmpi	@m00, #switch
000755:0x002316d8:	bne	0x231710
000756:0x002316e0:	new	#return, HandAnimEventChanged
000756:0x00231708:	rts
000758:0x00231710:	movetm	#return, null
000758:0x00231720:	rts
000758:0x00231728:	rts
HandEventHumanCommandActionFinished::HandEventHumanCommandActionFinished()
000765:0x00231730:	imove	m_EventID, 0x00000e
000765:0x00231740:	rts
HandEventHumanCommandActionAborted::HandEventHumanCommandActionAborted()
000771:0x00231748:	imove	m_EventID, 0x00000f
000771:0x00231758:	rts
PPERequesterBase::PPERequesterBase()
//scripts/3_Game/ppemanager\requesters\pperequestplatformsbase.c
000012:0x00231760:	imove	m_Valid, 0x000000
000014:0x00231770:	call	VerifyRequester(this)
000014:0x00231780:	move	m_Valid, #return
000016:0x00231790:	move	m_IDX, requester_IDX
000017:0x002317a0:	imove	m_ValuesSent, 0x000001
000018:0x002317b0:	imove	m_IsRunning, 0x000000
000019:0x002317c0:	new	m_RequestDataStructure, map<int,@map<int,@PPERequestParamDataBase>>
000019:0x002317e0:	rts
PPERequesterBase::SetRequesterUpdating()
000025:0x00231810:	cmpi	m_Valid, _i0
000025:0x00231820:	bne	0x2318a0
000027:0x00231828:	icall	ToString(this)
000027:0x00231838:	adds	@s02, _s'', #return
000027:0x00231848:	moves	@s01, @s02
000027:0x00231858:	adds	@s01, @s01, _s' not valid!'
000027:0x00231868:	moves	@s00, @s01
000027:0x00231878:	call	Log(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
000028:0x00231898:	rts
000031:0x002318a0:	call	GetPPEManager()
000031:0x002318b0:	call	
000031:0x002318c8:	release	#return
000034:0x002318d0:	cmpi	state, _i0
000034:0x002318e0:	beq	0x231918
000035:0x002318e8:	call	GetPPEManager()
000035:0x002318f8:	call	
000035:0x00231910:	release	#return
000035:0x00231918:	rts
PPERequesterBase::Start()
000040:0x00231920:	call	
000041:0x00231930:	imove	m_IsRunning, 0x000001
000041:0x00231940:	rts
PPERequesterBase::Stop()
000046:0x00231948:	cmpcm	m_RequestDataStructure, null
000046:0x00231958:	beq	0x2319a0
000046:0x00231960:	movefm	[0xb5b8efd0], m_RequestDataStructure
000046:0x00231970:	ncalli	map<int,@map<int,@PPERequestParamDataBase>>.Count()
000046:0x00231978:	move	@m00, #return
000046:0x00231988:	cmpi	@m00, _i0
000046:0x00231998:	bgt	0x2319a8
000047:0x002319a0:	rts
000049:0x002319a8:	call	
000050:0x002319b8:	imove	m_IsRunning, 0x000000
000050:0x002319c8:	rts
PPERequesterBase::IsRequesterRunning()
000055:0x002319d0:	move	#return, m_IsRunning
000055:0x002319e0:	rts
000055:0x002319e8:	rts
PPERequesterBase::SetRequesterIDX()
000061:0x002319f0:	move	m_IDX, idx
000061:0x00231a00:	rts
PPERequesterBase::GetRequesterIDX()
000067:0x00231a08:	move	#return, m_IDX
000067:0x00231a18:	rts
000067:0x00231a20:	rts
PPERequesterBase::GetCategoryMask()
000073:0x00231a28:	imove	#return, 0x000000
000073:0x00231a38:	rts
000073:0x00231a40:	rts
PPERequesterBase::SetTargetValueBool()
000080:0x00231a70:	cmpcm	m_RequestDataStructure, null
000080:0x00231a80:	bne	0x231a90
000081:0x00231a88:	rts
000083:0x00231a90:	call	
000083:0x00231aa8:	movefm	@c02, #return
000083:0x00231ab8:	icall	SafeCastType([0xb5b36380], @c01, @c02)
000083:0x00231ad0:	movetm	data, @c01
000083:0x00231ae0:	release	#return
000084:0x00231ae8:	call	
000085:0x00231af8:	call	
000087:0x00231b08:	movefm	@c00, data
000087:0x00231b18:	move	m_BoolTarget, val
000088:0x00231b28:	movefm	@c00, data
000088:0x00231b38:	movefm	@c01, data
000088:0x00231b48:	move	m_BoolLast, m_BoolCurrent
000090:0x00231b58:	movefm	@c00, data
000090:0x00231b68:	movefm	@c01, data
000090:0x00231b78:	cmpi	m_BoolTarget, m_BoolCurrent
000090:0x00231b88:	bne	0x231bb8
000090:0x00231b90:	call	
000090:0x00231ba0:	cmpi	#return, _i0
000090:0x00231bb0:	beq	0x231be8
000092:0x00231bb8:	call	
000093:0x00231bc8:	call	
000095:0x00231bd8:	call	
000095:0x00231be8:	release	data
000095:0x00231bf0:	rts
PPERequesterBase::SetTargetValueBoolDefault()
000103:0x00231c20:	cmpcm	m_RequestDataStructure, null
000103:0x00231c30:	beq	0x231cb8
000103:0x00231c38:	movefm	[0xb5b8efd0], m_RequestDataStructure
000103:0x00231c48:	icall	
000103:0x00231c58:	cmpm	#return, null
000103:0x00231c68:	beq	0x231cb8
000103:0x00231c70:	movefm	[0xb5b8efd0], m_RequestDataStructure
000103:0x00231c80:	icall	
000103:0x00231c90:	icall	
000103:0x00231ca0:	cmpm	#return, null
000103:0x00231cb0:	bne	0x231cc0
000104:0x00231cb8:	rts
000106:0x00231cc0:	call	
000106:0x00231cd8:	movefm	@c02, #return
000106:0x00231ce8:	icall	SafeCastType([0xb5b36380], @c01, @c02)
000106:0x00231d00:	movetm	data, @c01
000106:0x00231d10:	release	#return
000107:0x00231d18:	movefm	@c00, data
000107:0x00231d28:	movefm	@c01, data
000107:0x00231d38:	move	m_BoolLast, m_BoolCurrent
000108:0x00231d48:	call	
000108:0x00231d58:	cmpi	#return, _i0
000108:0x00231d68:	bne	0x231d90
000110:0x00231d70:	call	
000112:0x00231d80:	call	
000112:0x00231d90:	release	data
000112:0x00231d98:	rts
PPERequesterBase::SetTargetValueInt()
000119:0x00231dc8:	cmpcm	m_RequestDataStructure, null
000119:0x00231dd8:	bne	0x231de8
000120:0x00231de0:	rts
000122:0x00231de8:	call	
000122:0x00231e00:	movefm	@c02, #return
000122:0x00231e10:	icall	SafeCastType([0xb5b36020], @c01, @c02)
000122:0x00231e28:	movetm	data, @c01
000122:0x00231e38:	release	#return
000123:0x00231e40:	call	
000124:0x00231e50:	call	
000126:0x00231e60:	movefm	@c00, data
000126:0x00231e70:	move	m_IntTarget, val
000127:0x00231e80:	movefm	@c00, data
000127:0x00231e90:	movefm	@c01, data
000127:0x00231ea0:	move	m_IntLast, m_IntCurrent
000128:0x00231eb0:	movefm	@c00, data
000128:0x00231ec0:	movefm	@c01, data
000128:0x00231ed0:	cmpi	m_IntTarget, m_IntCurrent
000128:0x00231ee0:	bne	0x231f10
000128:0x00231ee8:	call	
000128:0x00231ef8:	cmpi	#return, _i0
000128:0x00231f08:	beq	0x231f40
000130:0x00231f10:	call	
000131:0x00231f20:	call	
000133:0x00231f30:	call	
000133:0x00231f40:	release	data
000133:0x00231f48:	rts
PPERequesterBase::SetTargetValueIntDefault()
000141:0x00231f78:	cmpcm	m_RequestDataStructure, null
000141:0x00231f88:	beq	0x232010
000141:0x00231f90:	movefm	[0xb5b8efd0], m_RequestDataStructure
000141:0x00231fa0:	icall	
000141:0x00231fb0:	cmpm	#return, null
000141:0x00231fc0:	beq	0x232010
000141:0x00231fc8:	movefm	[0xb5b8efd0], m_RequestDataStructure
000141:0x00231fd8:	icall	
000141:0x00231fe8:	icall	
000141:0x00231ff8:	cmpm	#return, null
000141:0x00232008:	bne	0x232018
000142:0x00232010:	rts
000144:0x00232018:	call	
000144:0x00232030:	movefm	@c02, #return
000144:0x00232040:	icall	SafeCastType([0xb5b36020], @c01, @c02)
000144:0x00232058:	movetm	data, @c01
000144:0x00232068:	release	#return
000145:0x00232070:	movefm	@c00, data
000145:0x00232080:	movefm	@c01, data
000145:0x00232090:	move	m_IntLast, m_IntCurrent
000146:0x002320a0:	call	
000146:0x002320b0:	cmpi	#return, _i0
000146:0x002320c0:	bne	0x2320e8
000148:0x002320c8:	call	
000150:0x002320d8:	call	
000150:0x002320e8:	release	data
000150:0x002320f0:	rts
PPERequesterBase::SetTargetValueFloat()
000157:0x00232120:	cmpcm	m_RequestDataStructure, null
000157:0x00232130:	bne	0x232140
000158:0x00232138:	rts
000160:0x00232140:	call	
000160:0x00232158:	movefm	@c02, #return
000160:0x00232168:	icall	SafeCastType([0xb5b3aec8], @c01, @c02)
000160:0x00232180:	movetm	data, @c01
000160:0x00232190:	release	#return
000161:0x00232198:	call	
000162:0x002321a8:	call	
000164:0x002321b8:	movefm	@c00, data
000164:0x002321c8:	movefm	@c01, data
000164:0x002321d8:	move	m_FloatFormerTarget, m_FloatTarget
000165:0x002321e8:	movefm	@c00, data
000165:0x002321f8:	call	
000165:0x00232218:	move	m_FloatTarget, #return
000166:0x00232228:	movefm	@c00, data
000166:0x00232238:	movefm	@c01, data
000166:0x00232248:	move	m_FloatLast, m_FloatCurrent
000167:0x00232258:	movefm	@c00, data
000167:0x00232268:	movefm	@c01, data
000167:0x00232278:	move	m_FloatStart, m_FloatCurrent
000168:0x00232288:	movefm	@c00, data
000168:0x00232298:	movefm	@c01, data
000168:0x002322a8:	cmpf	m_FloatTarget, m_FloatCurrent
000168:0x002322b8:	bne	0x2322e8
000168:0x002322c0:	call	
000168:0x002322d0:	cmpi	#return, _i0
000168:0x002322e0:	beq	0x232318
000170:0x002322e8:	call	
000171:0x002322f8:	call	
000173:0x00232308:	call	
000173:0x00232318:	release	data
000173:0x00232320:	rts
PPERequesterBase::SetTargetValueFloatDefault()
000181:0x00232350:	cmpcm	m_RequestDataStructure, null
000181:0x00232360:	beq	0x2323e8
000181:0x00232368:	movefm	[0xb5b8efd0], m_RequestDataStructure
000181:0x00232378:	icall	
000181:0x00232388:	cmpm	#return, null
000181:0x00232398:	beq	0x2323e8
000181:0x002323a0:	movefm	[0xb5b8efd0], m_RequestDataStructure
000181:0x002323b0:	icall	
000181:0x002323c0:	icall	
000181:0x002323d0:	cmpm	#return, null
000181:0x002323e0:	bne	0x2323f0
000182:0x002323e8:	rts
000184:0x002323f0:	call	
000184:0x00232408:	movefm	@c02, #return
000184:0x00232418:	icall	SafeCastType([0xb5b3aec8], @c01, @c02)
000184:0x00232430:	movetm	data, @c01
000184:0x00232440:	release	#return
000185:0x00232448:	movefm	@c00, data
000185:0x00232458:	movefm	@c01, data
000185:0x00232468:	move	m_FloatFormerTarget, m_FloatTarget
000186:0x00232478:	movefm	@c00, data
000186:0x00232488:	movefm	@c01, data
000186:0x00232498:	move	m_FloatLast, m_FloatCurrent
000187:0x002324a8:	movefm	@c00, data
000187:0x002324b8:	movefm	@c01, data
000187:0x002324c8:	move	m_FloatStart, m_FloatCurrent
000188:0x002324d8:	call	
000188:0x002324e8:	cmpi	#return, _i0
000188:0x002324f8:	bne	0x232520
000190:0x00232500:	call	
000192:0x00232510:	call	
000192:0x00232520:	release	data
000192:0x00232528:	rts
PPERequesterBase::SetTargetValueColor()
000199:0x00232558:	cmpcm	m_RequestDataStructure, null
000199:0x00232568:	bne	0x232578
000200:0x00232570:	rts
000202:0x00232578:	call	
000202:0x00232590:	movefm	@c02, #return
000202:0x002325a0:	icall	SafeCastType([0xb5b3d708], @c01, @c02)
000202:0x002325b8:	movetm	data, @c01
000202:0x002325c8:	release	#return
000203:0x002325d0:	call	
000204:0x002325e0:	call	
000205:0x002325f0:	movefm	@c00, data
000205:0x00232600:	movefm	@c02, data
000205:0x00232610:	movem	m_ColorFormerTarget, m_ColorTarget
000207:0x00232620:	movefm	@c00, data
000207:0x00232630:	movefm	@c01, m_ColorTarget
000207:0x00232640:	movefm	@c02, val
000207:0x00232650:	icall	
000209:0x00232660:	movefm	@c00, data
000209:0x00232670:	movefm	@c02, data
000209:0x00232680:	movem	m_ColorLast, m_ColorCurrent
000210:0x00232690:	movefm	@c00, data
000210:0x002326a0:	movefm	@c02, data
000210:0x002326b0:	movem	m_ColorStart, m_ColorCurrent
000213:0x002326c0:	call	
000214:0x002326d0:	call	
000216:0x002326e0:	call	
000216:0x002326f0:	release	data
000216:0x002326f8:	rts
PPERequesterBase::SetTargetValueColorDefault()
000224:0x00232728:	cmpcm	m_RequestDataStructure, null
000224:0x00232738:	beq	0x2327c0
000224:0x00232740:	movefm	[0xb5b8efd0], m_RequestDataStructure
000224:0x00232750:	icall	
000224:0x00232760:	cmpm	#return, null
000224:0x00232770:	beq	0x2327c0
000224:0x00232778:	movefm	[0xb5b8efd0], m_RequestDataStructure
000224:0x00232788:	icall	
000224:0x00232798:	icall	
000224:0x002327a8:	cmpm	#return, null
000224:0x002327b8:	bne	0x2327c8
000225:0x002327c0:	rts
000227:0x002327c8:	call	
000227:0x002327e0:	movefm	@c02, #return
000227:0x002327f0:	icall	SafeCastType([0xb5b3d708], @c01, @c02)
000227:0x00232808:	movetm	data, @c01
000227:0x00232818:	release	#return
000228:0x00232820:	movefm	@c00, data
000228:0x00232830:	movefm	@c02, data
000228:0x00232840:	movem	m_ColorFormerTarget, m_ColorTarget
000229:0x00232850:	movefm	@c00, data
000229:0x00232860:	movefm	@c02, data
000229:0x00232870:	movem	m_ColorLast, m_ColorCurrent
000230:0x00232880:	movefm	@c00, data
000230:0x00232890:	movefm	@c02, data
000230:0x002328a0:	movem	m_ColorStart, m_ColorCurrent
000231:0x002328b0:	call	
000231:0x002328c0:	cmpi	#return, _i0
000231:0x002328d0:	bne	0x2328f8
000233:0x002328d8:	call	
000235:0x002328e8:	call	
000235:0x002328f8:	release	data
000235:0x00232900:	rts
PPERequesterBase::QueueValuesSend()
000255:0x00232908:	imove	m_ValuesSent, 0x000000
000257:0x00232918:	call	
000257:0x00232928:	rts
PPERequesterBase::GetRequestData()
000264:0x002329d8:	movefm	[0xb5b8efd0], m_RequestDataStructure
000264:0x002329e8:	icall	
000264:0x002329f8:	cmpm	#return, null
000264:0x00232a08:	beq	0x232b18
000266:0x00232a10:	movefm	[0xb5b8efd0], m_RequestDataStructure
000266:0x00232a20:	icall	
000266:0x00232a30:	icall	
000266:0x00232a40:	cmpm	#return, null
000266:0x00232a50:	beq	0x232aa0
000268:0x00232a58:	movefm	[0xb5b8efd0], m_RequestDataStructure
000268:0x00232a68:	icall	
000268:0x00232a78:	icall	
000268:0x00232a88:	movetm	data, #return
000268:0x00232a98:	jump	0x232b10
000272:0x00232aa0:	call	
000272:0x00232ab8:	movem	data, #return
000272:0x00232ac8:	release	#return
000273:0x00232ad0:	movefm	[0xb5b8efd0], m_RequestDataStructure
000273:0x00232ae0:	icall	
000273:0x00232af0:	movefm	@c00, data
000273:0x00232b00:	icall	
000273:0x00232b10:	jump	0x232bc0
000278:0x00232b18:	call	
000278:0x00232b30:	movem	data, #return
000278:0x00232b40:	release	#return
000279:0x00232b48:	new	temp_map, map<int,@PPERequestParamDataBase>
000280:0x00232b68:	movefm	@c00, data
000280:0x00232b78:	icall	
000281:0x00232b88:	movefm	@c00, temp_map
000281:0x00232b98:	movefm	[0xb5b8efd0], m_RequestDataStructure
000281:0x00232ba8:	icall	
000281:0x00232bb8:	release	temp_map
000284:0x00232bc0:	cmpcm	data, null
000284:0x00232bd0:	bne	0x232be8
000286:0x00232bd8:	call	Error(_s'GetRequestData | no data found in the structure')
000289:0x00232be8:	movefm	@c00, data
000289:0x00232bf8:	movetm	m_Requester, this
000291:0x00232c08:	movem	#return, data
000291:0x00232c18:	release	data
000291:0x00232c20:	rts
000291:0x00232c28:	release	data
000291:0x00232c30:	rts
PPERequesterBase::PrepareData()
000297:0x00232cb0:	move	#switch, type
000297:0x00232cc0:	imove	@m00, 0x000001
000297:0x00232cd0:	cmpi	@m00, #switch
000297:0x00232ce0:	bne	0x232d48
000300:0x00232ce8:	move	requester_idx, m_IDX
000300:0x00232cf8:	new	data, PPERequestParamDataBool
000301:0x00232d38:	jump	0x232ed8
000301:0x00232d40:	jump	0x232d70
000301:0x00232d48:	imove	@m00, 0x000002
000301:0x00232d58:	cmpi	@m00, #switch
000301:0x00232d68:	bne	0x232dd0
000304:0x00232d70:	move	requester_idx, m_IDX
000304:0x00232d80:	new	data, PPERequestParamDataInt
000305:0x00232dc0:	jump	0x232ed8
000305:0x00232dc8:	jump	0x232df8
000305:0x00232dd0:	imove	@m00, 0x000004
000305:0x00232de0:	cmpi	@m00, #switch
000305:0x00232df0:	bne	0x232e58
000308:0x00232df8:	move	requester_idx, m_IDX
000308:0x00232e08:	new	data, PPERequestParamDataFloat
000309:0x00232e48:	jump	0x232ed8
000309:0x00232e50:	jump	0x232e80
000309:0x00232e58:	imove	@m00, 0x000008
000309:0x00232e68:	cmpi	@m00, #switch
000309:0x00232e78:	bne	0x232ed8
000312:0x00232e80:	move	requester_idx, m_IDX
000312:0x00232e90:	new	data, PPERequestParamDataColor
000313:0x00232ed0:	jump	0x232ed8
000315:0x00232ed8:	movem	#return, data
000315:0x00232ee8:	release	data
000315:0x00232ef0:	rts
000315:0x00232ef8:	release	data
000315:0x00232f00:	rts
PPERequesterBase::GetActiveRequestStructure()
000321:0x00232f08:	movem	#return, m_RequestDataStructure
000321:0x00232f18:	rts
000321:0x00232f20:	rts
PPERequesterBase::ClearRequesterData()
000326:0x00232f28:	movefm	[0xb5b8efd0], m_RequestDataStructure
000326:0x00232f38:	ncalli	map<int,@map<int,@PPERequestParamDataBase>>.Clear()
000326:0x00232f40:	rts
PPERequesterBase::SendCurrentValueData()
000331:0x00232f48:	call	GetPPEManager()
000331:0x00232f58:	call	
000331:0x00232f68:	release	#return
000331:0x00232f70:	rts
PPERequesterBase::OnUpdate()
000340:0x00232fc8:	cmpi	m_ValuesSent, _i0
000340:0x00232fd8:	bne	0x233110
000342:0x00232fe0:	imove	i, 0x000000
000342:0x00232ff0:	jump	0x233010
000342:0x00232ff8:	move	@m00, i
000342:0x00233008:	inc	i
000342:0x00233010:	movefm	[0xb5b8efd0], m_RequestDataStructure
000342:0x00233020:	ncalli	map<int,@map<int,@PPERequestParamDataBase>>.Count()
000342:0x00233028:	cmpi	i, #return
000342:0x00233038:	bge	0x233100
000344:0x00233040:	imove	j, 0x000000
000344:0x00233050:	jump	0x233070
000344:0x00233058:	move	@m00, j
000344:0x00233068:	inc	j
000344:0x00233070:	movefm	[0xb5b8efd0], m_RequestDataStructure
000344:0x00233080:	icall	
000344:0x00233090:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000344:0x00233098:	cmpi	j, #return
000344:0x002330a8:	bge	0x2330f8
000346:0x002330b0:	movefm	[0xb5b8efd0], m_RequestDataStructure
000346:0x002330c0:	icall	
000346:0x002330d0:	icall	
000346:0x002330e0:	call	
000346:0x002330f0:	jump	0x233058
000346:0x002330f8:	jump	0x232ff8
000349:0x00233100:	imove	m_ValuesSent, 0x000001
000351:0x00233110:	call	
000351:0x00233120:	rts
PPERequesterBase::OnStart()
000356:0x00233128:	call	
000356:0x00233138:	rts
PPERequesterBase::OnStop()
000363:0x00233140:	call	
000364:0x00233150:	call	
000364:0x00233160:	rts
PPERequesterBase::RelativizeValue()
000370:0x00233208:	move	ret, value
000371:0x00233218:	cmpi	relative, _i0
000371:0x00233228:	bne	0x233358
000373:0x00233230:	move	#switch, var_type
000373:0x00233240:	imove	@m00, 0x000004
000373:0x00233250:	cmpi	@m00, #switch
000373:0x00233260:	bne	0x233350
000376:0x00233268:	call	GetPPEManager()
000376:0x00233278:	call	
000376:0x00233290:	movefm	@c02, #return
000376:0x002332a0:	icall	SafeCastType([0xb5b35538], @c01, @c02)
000376:0x002332b8:	movetm	p_float, @c01
000376:0x002332c8:	release	#return
000376:0x002332d0:	release	#return
000377:0x002332d8:	movefm	@c00, p_float
000377:0x002332e8:	movefm	@c01, p_float
000377:0x002332f8:	icall	InverseLerp(param3, param4, ret)
000377:0x00233310:	move	ret, #return
000378:0x00233320:	icall	Clamp(ret, _f0.000000, _f1.000000)
000378:0x00233338:	move	ret, #return
000379:0x00233348:	jump	0x233358
000379:0x00233350:	release	p_float
000384:0x00233358:	move	#return, ret
000384:0x00233368:	rts
000384:0x00233370:	rts
PPERequesterBase::SetDefaultValuesAll()
000393:0x00233418:	imove	i, 0x000000
000393:0x00233428:	jump	0x233448
000393:0x00233430:	move	@m00, i
000393:0x00233440:	inc	i
000393:0x00233448:	movefm	[0xb5b8efd0], m_RequestDataStructure
000393:0x00233458:	ncalli	map<int,@map<int,@PPERequestParamDataBase>>.Count()
000393:0x00233460:	cmpi	i, #return
000393:0x00233470:	bge	0x233740
000395:0x00233478:	imove	j, 0x000000
000395:0x00233488:	jump	0x2334a8
000395:0x00233490:	move	@m00, j
000395:0x002334a0:	inc	j
000395:0x002334a8:	movefm	[0xb5b8efd0], m_RequestDataStructure
000395:0x002334b8:	icall	
000395:0x002334c8:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000395:0x002334d0:	cmpi	j, #return
000395:0x002334e0:	bge	0x233738
000397:0x002334e8:	movefm	[0xb5b8efd0], m_RequestDataStructure
000397:0x002334f8:	icall	
000397:0x00233508:	icall	
000397:0x00233518:	movetm	req_data, #return
000399:0x00233528:	call	
000399:0x00233538:	cmpi	#return, _i0
000399:0x00233548:	bne	0x233558
000400:0x00233550:	jump	0x233490
000402:0x00233558:	call	
000402:0x00233568:	move	#switch, #return
000402:0x00233578:	imove	@m00, 0x000001
000402:0x00233588:	cmpi	@m00, #switch
000402:0x00233598:	bne	0x2335e8
000405:0x002335a0:	call	
000405:0x002335b0:	call	
000405:0x002335c0:	call	
000406:0x002335d8:	jump	0x233730
000406:0x002335e0:	jump	0x233610
000406:0x002335e8:	imove	@m00, 0x000002
000406:0x002335f8:	cmpi	@m00, #switch
000406:0x00233608:	bne	0x233658
000409:0x00233610:	call	
000409:0x00233620:	call	
000409:0x00233630:	call	
000410:0x00233648:	jump	0x233730
000410:0x00233650:	jump	0x233680
000410:0x00233658:	imove	@m00, 0x000004
000410:0x00233668:	cmpi	@m00, #switch
000410:0x00233678:	bne	0x2336c8
000413:0x00233680:	call	
000413:0x00233690:	call	
000413:0x002336a0:	call	
000414:0x002336b8:	jump	0x233730
000414:0x002336c0:	jump	0x2336f0
000414:0x002336c8:	imove	@m00, 0x000008
000414:0x002336d8:	cmpi	@m00, #switch
000414:0x002336e8:	bne	0x233730
000417:0x002336f0:	call	
000417:0x00233700:	call	
000417:0x00233710:	call	
000418:0x00233728:	jump	0x233730
000418:0x00233730:	jump	0x233490
000418:0x00233738:	jump	0x233430
000418:0x00233740:	release	req_data
000418:0x00233748:	rts
PPERequester_GameplayBase::GetCategoryMask()
000438:0x00233750:	imove	#return, 0x000002
000438:0x00233760:	rts
000438:0x00233768:	rts
PPERequester_MenuBase::GetCategoryMask()
000446:0x00233770:	imove	#return, 0x000004
000446:0x00233780:	rts
000446:0x00233788:	rts
PPERequester_TutorialMenu::OnStart()
//scripts/3_Game/ppemanager\requesters\ppertutorial.c
000007:0x00233790:	call	
000009:0x002337a0:	movefm	@c01, par
000009:0x002337b0:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000009:0x002337c8:	movec	@c02, @c00
000009:0x002337d8:	move	m_Gauss, param1
000011:0x002337e8:	move	val, m_Gauss
000011:0x002337f8:	call	
000011:0x00233820:	rts
Transport::GetMeleeTargetType()
//scripts/3_Game/vehicles\transport.c
000016:0x00233828:	imove	#return, 0x000001
000016:0x00233838:	rts
000016:0x00233840:	rts
Transport::IsTransport()
000063:0x00233848:	imove	#return, 0x000001
000063:0x00233858:	rts
000063:0x00233860:	rts
Transport::IsIgnoredByConstruction()
000068:0x00233868:	imove	#return, 0x000000
000068:0x00233878:	rts
000068:0x00233880:	rts
Transport::IsHealthVisible()
000073:0x00233888:	imove	#return, 0x000001
000073:0x00233898:	rts
000073:0x002338a0:	rts
Transport::ShowZonesHealth()
000078:0x002338a8:	imove	#return, 0x000001
000078:0x002338b8:	rts
000078:0x002338c0:	rts
Transport::GetTransportCameraDistance()
000083:0x002338f0:	imove	#return, 4.00000
000083:0x00233900:	rts
000083:0x00233908:	rts
Transport::GetTransportCameraOffset()
000088:0x00233948:	movev	#return, _v<0.000000,1.300000,0.000000>
000088:0x00233958:	rts
000088:0x00233960:	rts
Transport::GetAnimInstance()
000094:0x00233990:	call	Error(_s'GetAnimInstance() not implemented')
000095:0x002339a0:	imove	#return, 0x000000
000095:0x002339b0:	rts
000095:0x002339b8:	rts
Transport::GetSeatAnimationType()
000104:0x002339e8:	call	Error(_s'GetSeatAnimationType() not implemented')
000106:0x002339f8:	imove	#return, 0x000000
000106:0x00233a08:	rts
000106:0x00233a10:	rts
Transport::Get3rdPersonCameraType()
000112:0x00233a40:	call	Error(_s'Get3rdPersonCameraType() not implemented')
000113:0x00233a50:	imove	#return, 0x000000
000113:0x00233a60:	rts
000113:0x00233a68:	rts
Transport::CrewCanGetThrough()
000122:0x00233a70:	imove	#return, 0x000000
000122:0x00233a80:	rts
000122:0x00233a88:	rts
Transport::CanReachSeatFromSeat()
000131:0x00233a90:	imove	#return, 0x000000
000131:0x00233aa0:	rts
000131:0x00233aa8:	rts
Transport::CanReachSeatFromDoors()
000140:0x00233ab0:	imove	#return, 0x000000
000140:0x00233ac0:	rts
000140:0x00233ac8:	rts
Transport::CanReachDoorsFromSeat()
000149:0x00233ad0:	imove	#return, 0x000000
000149:0x00233ae0:	rts
000149:0x00233ae8:	rts
Transport::GetSeatIndexFromDoor()
000158:0x00233bb8:	moves	#switch, pDoorSelection
000158:0x00233bc8:	moves	@s00, _s'DoorsDriver'
000158:0x00233bd8:	cmps	@s00, #switch
000158:0x00233be8:	bne	0x233c18
000161:0x00233bf0:	imove	#return, 0x000000
000161:0x00233c00:	rts
000162:0x00233c08:	jump	0x233d00
000162:0x00233c10:	jump	0x233c40
000162:0x00233c18:	moves	@s00, _s'DoorsCoDriver'
000162:0x00233c28:	cmps	@s00, #switch
000162:0x00233c38:	bne	0x233c68
000164:0x00233c40:	imove	#return, 0x000001
000164:0x00233c50:	rts
000165:0x00233c58:	jump	0x233d00
000165:0x00233c60:	jump	0x233c90
000165:0x00233c68:	moves	@s00, _s'DoorsCargo1'
000165:0x00233c78:	cmps	@s00, #switch
000165:0x00233c88:	bne	0x233cb8
000167:0x00233c90:	imove	#return, 0x000002
000167:0x00233ca0:	rts
000168:0x00233ca8:	jump	0x233d00
000168:0x00233cb0:	jump	0x233ce0
000168:0x00233cb8:	moves	@s00, _s'DoorsCargo2'
000168:0x00233cc8:	cmps	@s00, #switch
000168:0x00233cd8:	bne	0x233d00
000170:0x00233ce0:	imove	#return, 0x000003
000170:0x00233cf0:	rts
000171:0x00233cf8:	jump	0x233d00
000173:0x00233d00:	imove	#return, 0xffffffff
000173:0x00233d10:	rts
000173:0x00233d18:	rts
Transport::IsIgnoredObject()
000178:0x00233e70:	cmpcm	o, null
000178:0x00233e80:	bne	0x233ea0
000179:0x00233e88:	imove	#return, 0x000000
000179:0x00233e98:	rts
000182:0x00233ea0:	movefm	[0xd3178bc8], o
000182:0x00233eb0:	ncall	dBodyGetInteractionLayer([0xd3178bc8])
000182:0x00233ec0:	move	layer, #return
000183:0x00233ed0:	ncall	dGetInteractionLayer(this, _i16, layer)
000183:0x00233ee8:	move	interacts, #return
000184:0x00233ef8:	cmpi	interacts, _i0
000184:0x00233f08:	bne	0x233f28
000186:0x00233f10:	imove	#return, 0x000001
000186:0x00233f20:	rts
000190:0x00233f28:	movefm	@c00, o
000190:0x00233f38:	icall	CastTo(player, @c00)
000190:0x00233f48:	cmpi	#return, _i0
000190:0x00233f58:	beq	0x233fe0
000193:0x00233f60:	ncalli	DayZPlayer.GetCommand_Vehicle()
000193:0x00233f68:	movec	hcv, #return
000194:0x00233f78:	cmpc	hcv, null
000194:0x00233f88:	beq	0x233fe0
000194:0x00233f90:	ncalli	HumanCommandVehicle.GetTransport()
000194:0x00233f98:	movec	@c00, #return
000194:0x00233fa8:	cmpc	@c00, this
000194:0x00233fb8:	bne	0x233fe0
000196:0x00233fc0:	imove	#return, 0x000001
000196:0x00233fd0:	release	player
000196:0x00233fd8:	rts
000200:0x00233fe0:	movefm	@c02, o
000200:0x00233ff0:	icall	SafeCastType([0xb5b25dc0], @c01, @c02)
000200:0x00234008:	movetm	e, @c01
000202:0x00234018:	cmpcm	e, null
000202:0x00234028:	beq	0x234080
000202:0x00234030:	call	
000202:0x00234040:	cmpi	#return, _i0
000202:0x00234050:	bne	0x2340f8
000202:0x00234058:	call	
000202:0x00234068:	cmpi	#return, _i0
000202:0x00234078:	bne	0x2340f8
000202:0x00234080:	call	
000202:0x00234090:	cmpi	#return, _i0
000202:0x002340a0:	bne	0x2340f8
000202:0x002340a8:	call	
000202:0x002340b8:	cmpi	#return, _i0
000202:0x002340c8:	bne	0x2340f8
000202:0x002340d0:	call	
000202:0x002340e0:	cmpi	#return, _i0
000202:0x002340f0:	beq	0x234110
000202:0x002340f8:	imove	#return, 0x000001
000202:0x00234108:	jump	0x234120
000202:0x00234110:	imove	#return, 0x000000
000202:0x00234120:	release	player
000202:0x00234128:	release	e
000202:0x00234130:	rts
000202:0x00234138:	release	player
000202:0x00234140:	release	e
000202:0x00234148:	rts
Transport::IsAreaAtDoorFree()
000207:0x00234490:	icall	GetTransform(this, transform)
000211:0x002344a0:	icall	
000214:0x002344b8:	ctv	entry[_i2], crewDir
000215:0x002344c8:	crossv	@v00, Up, crewDir
000215:0x002344d8:	ctv	entry[_i0], @v00
000216:0x002344e8:	cfv	@v00, entry[_i2]
000216:0x002344f8:	cfv	@v01, entry[_i0]
000216:0x00234508:	crossv	@v00, @v00, @v01
000216:0x00234518:	ctv	entry[_i1], @v00
000217:0x00234528:	ctv	entry[_i3], crewPos
000219:0x00234538:	icall	MatrixMultiply4(transform, entry, transform)
000221:0x00234550:	cfv	@v00, transform[_i3]
000221:0x00234560:	movev	position, @v00
000222:0x00234570:	icall	MatrixToAngles(transform)
000222:0x00234580:	movev	orientation, #return
000224:0x00234590:	ifv	@f01, position[0x000001]
000224:0x002345a0:	addf	@f01, @f01, maxAllowedObjHeight
000224:0x002345b0:	move	@f00, @f01
000224:0x002345c0:	ifv	@f02, extents[0x000001]
000224:0x002345d0:	mulf	@f02, @f02, _f0.500000
000224:0x002345e0:	move	@f01, @f02
000224:0x002345f0:	addf	@f00, @f00, @f01
000224:0x00234600:	itv	position[0x000001], @f00
000226:0x00234610:	new	excluded, array<Object>
000227:0x00234630:	new	collided, array<Object>
000229:0x00234650:	icall	
000231:0x00234660:	ncall	GetGame()
000231:0x00234668:	movefm	[0xb5bdd748], excluded
000231:0x00234678:	movefm	[0xb5bdd770], collided
000231:0x00234688:	ncalli	CGame.IsBoxColliding(position, orientation, extents, [0xb5bdd748], [0xb5bdd770])
000233:0x002346a8:	icall	RotationMatrixFromAngles(orientation, transform)
000234:0x002346b8:	ctv	transform[_i3], position
000236:0x002346c8:	ncalli	array<Object>.Count()
000236:0x002346d0:	move	#cnt, #return
000236:0x002346e0:	imove	#key, 0x000000
000236:0x002346f0:	jump	0x234700
000236:0x002346f8:	inc	#key
000236:0x00234700:	cmpi	#key, #cnt
000236:0x00234710:	bge	0x234820
000236:0x00234718:	icall	
000236:0x00234728:	movetm	o, #return
000238:0x00234738:	movefm	@c02, o
000238:0x00234748:	icall	SafeCastType([0xb5b25dc0], @c01, @c02)
000238:0x00234760:	movetm	e, @c01
000239:0x00234770:	call	
000239:0x00234780:	cmpi	#return, _i0
000239:0x00234790:	beq	0x2347a0
000240:0x00234798:	jump	0x2346f8
000243:0x002347a0:	ncalli	Object.GetCollisionBox(minmax)
000243:0x002347b0:	cmpi	#return, _i0
000243:0x002347c0:	beq	0x234810
000244:0x002347c8:	imove	#return, 0x000000
000244:0x002347d8:	release	e
000244:0x002347e0:	release	o
000244:0x002347e8:	release	excluded
000244:0x002347f0:	release	collided
000244:0x002347f8:	movev	extents, extents
000244:0x00234808:	rts
000244:0x00234810:	release	e
000244:0x00234818:	jump	0x2346f8
000244:0x00234820:	release	o
000247:0x00234828:	imove	#return, 0x000001
000247:0x00234838:	release	excluded
000247:0x00234840:	release	collided
000247:0x00234848:	movev	extents, extents
000247:0x00234858:	rts
000247:0x00234860:	release	excluded
000247:0x00234868:	release	collided
000247:0x00234870:	movev	extents, extents
000247:0x00234880:	rts
Transport::IsAreaAtDoorFree#59351()
000255:0x00234918:	itv	extents[0x000000], horizontalExtents
000256:0x00234928:	itv	extents[0x000001], playerHeight
000257:0x00234938:	itv	extents[0x000002], horizontalExtents
000259:0x00234948:	call	
000259:0x00234968:	movev	extents, extents
000259:0x00234978:	move	#return, #return
000259:0x00234988:	rts
000259:0x00234990:	rts
Transport::DebugFreeAreaAtDoor()
000264:0x00234aa0:	call	ARGB(_i20, _i0, _i255, _i0)
000264:0x00234ac0:	move	color, #return
000269:0x00234ad0:	itv	extents[0x000000], horizontalExtents
000270:0x00234ae0:	itv	extents[0x000001], playerHeight
000271:0x00234af0:	itv	extents[0x000002], horizontalExtents
000273:0x00234b00:	call	
000273:0x00234b20:	movev	extents, extents
000273:0x00234b30:	cmpi	#return, _i0
000273:0x00234b40:	bne	0x234b78
000275:0x00234b48:	call	ARGB(_i20, _i255, _i0, _i0)
000275:0x00234b68:	move	color, #return
000278:0x00234b78:	subv	@v02, _v<0.000000,0.000000,0.000000>, extents
000278:0x00234b88:	scalev	@v01, @v02, _f0.500000
000278:0x00234b98:	movev	@v00, @v01
000278:0x00234ba8:	scalev	@v02, extents, _f0.500000
000278:0x00234bb8:	movev	@v01, @v02
000278:0x00234bc8:	call	DrawBox(@v00, @v01, color)
000278:0x00234be0:	movec	shape, #return
000279:0x00234bf0:	ncalli	Shape.SetMatrix(transform)
000280:0x00234c00:	movec	#return, shape
000280:0x00234c10:	rts
000280:0x00234c18:	rts
PPEChromAber::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppechromaber.c
000012:0x00234c20:	imove	#return, 0x00000a
000012:0x00234c30:	rts
000012:0x00234c38:	rts
PPEChromAber::GetDefaultMaterialPath()
000017:0x00234c68:	moves	#return, _s'Graphics/Materials/postprocess/chromaber'
000017:0x00234c78:	rts
000017:0x00234c80:	rts
PPEChromAber::RegisterMaterialParameters()
000022:0x00234c88:	call	
000023:0x00234ca8:	call	
000023:0x00234cc8:	rts
HoverEffect::HoverEffect()
//scripts/3_Game/gui\effects\hovereffect.c
000013:0x00234cd0:	new	m_anim, AnimatorTimer
000013:0x00234cf0:	rts
HoverEffect::OnWidgetScriptInit()
000019:0x00234cf8:	movem	m_root, w
000020:0x00234d08:	movefm	[0xd31345a8], m_root
000020:0x00234d18:	ncalli	Widget.SetHandler(this)
000020:0x00234d28:	rts
HoverEffect::Update()
000026:0x00234d80:	movefm	[0xb5b3c880], m_anim
000026:0x00234d90:	call	
000026:0x00234da0:	mulf	p, amount, #return
000027:0x00234db0:	mulf	@f02, m_orginal_width, p
000027:0x00234dc0:	move	@f01, @f02
000027:0x00234dd0:	addf	@f01, m_orginal_width, @f01
000027:0x00234de0:	move	@f00, @f01
000027:0x00234df0:	mulf	@f03, m_orginal_height, p
000027:0x00234e00:	move	@f02, @f03
000027:0x00234e10:	addf	@f02, m_orginal_height, @f02
000027:0x00234e20:	move	@f01, @f02
000027:0x00234e30:	movefm	[0xd31345a8], m_root
000027:0x00234e40:	ncalli	Widget.SetSize(@f00, @f01, _i1)
000029:0x00234e58:	movefm	[0xb5b3c880], m_anim
000029:0x00234e68:	call	
000029:0x00234e78:	mulf	@f01, _f0.500000, #return
000029:0x00234e88:	move	@f00, @f01
000029:0x00234e98:	subf	c, _f1.000000, @f00
000030:0x00234ea8:	call	ARGBF(_f1.000000, _f1.000000, c, c)
000030:0x00234ec8:	movefm	[0xd31345a8], m_root
000030:0x00234ed8:	ncalli	Widget.SetColor(#return)
000030:0x00234ee8:	rts
HoverEffect::OnMouseEnter()
000036:0x00234ef0:	movefm	[0xb5b3c880], m_anim
000036:0x00234f00:	call	
000036:0x00234f10:	cmpi	#return, _i0
000036:0x00234f20:	bne	0x234f48
000036:0x00234f28:	movefm	[0xd31345a8], m_root
000036:0x00234f38:	icall	
000037:0x00234f48:	move	speed, speed
000037:0x00234f58:	movefm	[0xb5b3c880], m_anim
000037:0x00234f68:	call	
000039:0x00234f80:	imove	#return, 0x000000
000039:0x00234f90:	rts
000039:0x00234f98:	rts
HoverEffect::OnMouseLeave()
000045:0x00234fa0:	move	speed, speed
000045:0x00234fb0:	movefm	[0xb5b3c880], m_anim
000045:0x00234fc0:	call	
000046:0x00234fd8:	imove	#return, 0x000000
000046:0x00234fe8:	rts
000046:0x00234ff0:	rts
BiosSessionService::TryGetSession()
//scripts/3_Game/services\biossessionservice.c
000049:0x00234ff8:	cmps	join_handle, _s''
000049:0x00235008:	beq	0x235030
000051:0x00235010:	imove	m_GetSessionAttempts, 0x000000
000052:0x00235020:	moves	m_CurrentHandle, join_handle
000055:0x00235030:	cmpi	m_GetSessionAttempts, _i10
000055:0x00235040:	bge	0x235070
000056:0x00235048:	moves	[0xb5c18bc0], m_CurrentHandle
000056:0x00235058:	ncalli	BiosSessionService.GetSessionAsync([0xb5c18bc0])
000056:0x00235068:	jump	0x235080
000058:0x00235070:	call	
000058:0x00235080:	rts
BiosSessionService::OnSetActivity()
000131:0x00235088:	call	ErrorCaught(error)
000131:0x00235098:	rts
BiosSessionService::OnGetGameplaySession()
000149:0x00235168:	imove	m_GetSessionAttempts, 0x000000
000150:0x00235178:	call	
000150:0x00235188:	move	#switch, #return
000150:0x00235198:	imove	@m00, 0x000006
000150:0x002351a8:	cmpi	@m00, #switch
000150:0x002351b8:	bne	0x235308
000156:0x002351c0:	ncall	GetGame()
000156:0x002351c8:	icall	
000156:0x002351d8:	move	found, #return
000157:0x002351e8:	cmps	addr, session_address
000157:0x002351f8:	bne	0x235218
000157:0x00235200:	cmpi	port, session_port
000157:0x00235210:	beq	0x2352e0
000159:0x00235218:	cmpi	found, _i0
000159:0x00235228:	beq	0x2352c0
000161:0x00235230:	call	SetInviteServerInfo(session_address, session_port)
000162:0x00235248:	ncalli	DayZGame.GetUIManager()
000162:0x00235250:	call	
000163:0x00235260:	ncalli	DayZGame.GetUIManager()
000163:0x00235268:	movec	[0xb5c1aac0], null
000163:0x00235278:	ncalli	UIManager.EnterScriptedMenu(MENU_INVITE_TIMER, [0xb5c1aac0])
000163:0x00235288:	cmpm	#return, null
000163:0x00235298:	bne	0x2352b8
000165:0x002352a0:	call	AddNotification(CONNECT_FAIL_GENERIC, _f6.000000, _s'')
000165:0x002352b8:	jump	0x2352d8
000170:0x002352c0:	call	AddNotification(JOIN_FAIL_GET_SESSION, _f6.000000, _s'')
000170:0x002352d8:	jump	0x2352f8
000175:0x002352e0:	call	AddNotification(INVITE_FAIL_SAME_SERVER, _f6.000000, _s'#ps4_already_in_session')
000177:0x002352f8:	jump	0x235360
000177:0x00235300:	jump	0x235330
000177:0x00235308:	imove	@m00, 0x000005
000177:0x00235318:	cmpi	@m00, #switch
000177:0x00235328:	bne	0x235340
000181:0x00235330:	call	
000186:0x00235340:	call	
000187:0x00235358:	jump	0x235360
000187:0x00235360:	rts
BiosSessionService::OnGetSessionError()
000203:0x00235368:	call	ErrorCaught(error)
000204:0x00235378:	move	@m00, m_GetSessionAttempts
000204:0x00235388:	inc	m_GetSessionAttempts
000204:0x00235390:	rts
BiosSessionService::OnEnterGameplaySession()
000222:0x00235398:	call	ErrorCaught(error)
000222:0x002353a8:	cmpi	#return, _i0
000222:0x002353b8:	bne	0x235440
000224:0x002353c0:	ncalli	BiosSessionService.SetGameplayActivityAsync(session_address, session_port)
000225:0x002353d0:	call	GetPendingInviteList()
000225:0x002353e0:	cmpcm	#return, null
000225:0x002353f0:	beq	0x235438
000226:0x002353f8:	call	GetPendingInviteList()
000226:0x00235408:	movefm	[0xb5c18d78], #return
000226:0x00235418:	ncalli	BiosSessionService.InviteToGameplaySessionAsync(session_address, session_port, [0xb5c18d78])
000226:0x00235430:	release	#return
000226:0x00235438:	release	#return
000226:0x00235440:	rts
BiosSessionService::OnShowInviteToGameplaySession()
000246:0x00235448:	call	ErrorCaught(error)
000246:0x00235458:	rts
BiosSessionService::GetSessionPlayerList()
000260:0x00235460:	call	GetSimplePlayerList()
000260:0x00235470:	movem	#return, #return
000260:0x00235480:	release	#return
000260:0x00235488:	rts
000260:0x00235490:	rts
EffGeneratorSmoke::EffGeneratorSmoke()
//scripts/3_Game/effects\effectparticle\generatorsmoke.c
000005:0x00235498:	call	
000005:0x002354a8:	rts
PPERequester_BloodLoss::SetBloodLossLevel()
//scripts/3_Game/ppemanager\requesters\pperbloodloss.c
000005:0x002354b0:	call	
000005:0x002354d8:	rts
PPERequester_DeathDarkening::OnStart()
//scripts/3_Game/ppemanager\requesters\pperdeathdarkening.c
000007:0x00235508:	call	
000009:0x00235518:	movefm	@c01, par
000009:0x00235528:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000009:0x00235540:	movec	@c02, @c00
000009:0x00235550:	move	m_Value, param1
000011:0x00235560:	move	t, m_Value
000011:0x00235570:	call	EaseInCubic(t)
000011:0x00235580:	move	m_Value, #return
000012:0x00235590:	icall	Lerp(_f0.000000, _f-10.000000, m_Value)
000012:0x002355a8:	move	m_Value, #return
000015:0x002355b8:	move	val, m_Value
000015:0x002355c8:	call	
000015:0x002355f0:	rts
ImpactMaterials::RegisterSurface()
//scripts/3_Game/impacteffects.c
000081:0x002355f8:	cmpcm	m_ImpactEffect, null
000081:0x00235608:	bne	0x235630
000082:0x00235610:	new	m_ImpactEffect, map<string,typename>
000084:0x00235630:	ncall	ToType(surface)
000084:0x00235640:	icall	
000086:0x00235650:	inc	m_LastRegisteredMaterial
000086:0x00235658:	move	#return, m_LastRegisteredMaterial
000086:0x00235668:	rts
000086:0x00235670:	rts
ImpactMaterials::UnregisterSurface()
000091:0x00235678:	cmpcm	m_ImpactEffect, null
000091:0x00235688:	beq	0x235708
000093:0x00235690:	icall	
000094:0x002356a0:	icall	
000094:0x002356b0:	cmpi	#return, _i0
000094:0x002356c0:	beq	0x2356e0
000094:0x002356c8:	imove	@m00, 0x000000
000094:0x002356d8:	jump	0x2356f0
000094:0x002356e0:	imove	@m00, 0x000001
000094:0x002356f0:	move	#return, @m00
000094:0x00235700:	rts
000097:0x00235708:	imove	#return, 0x000000
000097:0x00235718:	rts
000097:0x00235720:	rts
ImpactMaterials::RegisterIgnoredAmmo()
000102:0x00235728:	cmpcm	m_IgnoredAmmo, null
000102:0x00235738:	bne	0x235760
000103:0x00235740:	new	m_IgnoredAmmo, map<string,int>
000105:0x00235760:	inc	m_LastRegisteredIgnoredAmmo
000107:0x00235768:	icall	
000109:0x00235778:	move	#return, m_LastRegisteredIgnoredAmmo
000109:0x00235788:	rts
000109:0x00235790:	rts
ImpactMaterials::UnregisterIgnoredAmmo()
000114:0x00235798:	cmpcm	m_IgnoredAmmo, null
000114:0x002357a8:	beq	0x235828
000116:0x002357b0:	icall	
000117:0x002357c0:	icall	
000117:0x002357d0:	cmpi	#return, _i0
000117:0x002357e0:	beq	0x235800
000117:0x002357e8:	imove	@m00, 0x000000
000117:0x002357f8:	jump	0x235810
000117:0x00235800:	imove	@m00, 0x000001
000117:0x00235810:	move	#return, @m00
000117:0x00235820:	rts
000120:0x00235828:	imove	#return, 0x000000
000120:0x00235838:	rts
000120:0x00235840:	rts
ImpactMaterials::GetImpactEffect()
000125:0x002358f0:	icall	Format(_s'%1_%2', surface, ammoType, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000125:0x00235920:	moves	key, #return
000127:0x00235930:	icall	
000127:0x00235940:	movea	eff_type, #return
000129:0x00235950:	cmpc	eff_type, null
000129:0x00235960:	beq	0x235988
000130:0x00235968:	movea	#return, eff_type
000130:0x00235978:	rts
000130:0x00235980:	jump	0x2359b0
000132:0x00235988:	icall	
000132:0x00235998:	movea	#return, #return
000132:0x002359a8:	rts
000132:0x002359b0:	rts
ImpactMaterials::EvaluateImpactEffectEx()
000137:0x002359b8:	movefm	@c01, pData
000137:0x002359c8:	movem	directHit, m_DirectHit
000137:0x002359d8:	movefm	@c00, pData
000137:0x002359e8:	move	componentIndex, m_ComponentIndex
000137:0x002359f8:	movefm	@c02, pData
000137:0x00235a08:	moves	surface, m_Surface
000137:0x00235a18:	movefm	@c03, pData
000137:0x00235a28:	movev	pos, m_Position
000137:0x00235a38:	movefm	@c04, pData
000137:0x00235a48:	move	impact_type, m_ImpactType
000137:0x00235a58:	movefm	@c05, pData
000137:0x00235a68:	movev	surfNormal, m_SurfaceNormal
000137:0x00235a78:	movefm	@c06, pData
000137:0x00235a88:	movev	exitPos, m_ExitPosition
000137:0x00235a98:	movefm	@c07, pData
000137:0x00235aa8:	movev	inSpeed, m_InSpeed
000137:0x00235ab8:	movefm	@c08, pData
000137:0x00235ac8:	movev	outSpeed, m_OutSpeed
000137:0x00235ad8:	movefm	@c09, pData
000137:0x00235ae8:	move	deflected, m_IsDeflected
000137:0x00235af8:	movefm	@c10, pData
000137:0x00235b08:	moves	ammoType, m_AmmoType
000137:0x00235b18:	movefm	@c11, pData
000137:0x00235b28:	move	isWater, m_IsWater
000137:0x00235b38:	call	EvaluateImpactEffect(directHit, componentIndex, surface, pos, impact_type, surfNormal, exitPos, inSpeed, outSpeed, deflected, ammoType, isWater)
000137:0x00235b78:	rts
ImpactMaterials::EvaluateImpactEffect()
000143:0x00235d18:	icall	
000143:0x00235d28:	cmpi	#return, _i0
000143:0x00235d38:	beq	0x235d48
000144:0x00235d40:	rts
000146:0x00235d48:	cmpi	impact_type, UNKNOWN
000146:0x00235d58:	bne	0x235d70
000147:0x00235d60:	imove	impact_type, 0x000001
000149:0x00235d70:	cmpi	deflected, _i0
000149:0x00235d80:	beq	0x235da0
000150:0x00235d88:	imove	impact_type, 0x000003
000150:0x00235d98:	jump	0x235dc8
000151:0x00235da0:	cmpv	outSpeed, _v<0.000000,0.000000,0.000000>
000151:0x00235db0:	beq	0x235dc8
000152:0x00235db8:	imove	impact_type, 0x000002
000154:0x00235dc8:	cmpi	isWater, _i0
000154:0x00235dd8:	beq	0x235df0
000155:0x00235de0:	moves	surface, _s'Hit_Water'
000157:0x00235df0:	call	GetImpactEffect(surface, ammoType)
000157:0x00235e08:	icall	Spawn(#return)
000157:0x00235e18:	icall	SafeCastType([0xb5b35ad8], @c01, #return)
000157:0x00235e30:	movetm	eff, @c01
000159:0x00235e40:	cmpcm	eff, null
000159:0x00235e50:	bne	0x236028
000159:0x00235e58:	cmps	surface, _s''
000159:0x00235e68:	bne	0x236028
000161:0x00235e70:	ncall	ToType(surface)
000161:0x00235e80:	icall	Spawn(#return)
000161:0x00235e90:	icall	SafeCastType([0xb5b35ad8], @c01, #return)
000161:0x00235ea8:	movetm	eff, @c01
000163:0x00235eb8:	cmpcm	eff, null
000163:0x00235ec8:	beq	0x235f28
000165:0x00235ed0:	call	RegisterSurface(surface)
000166:0x00235ee0:	icall	Format(_s'Unregistered surface for bullet impact effect (%1). Register this surface in ImpactMaterials (Script) for better performance.', surface, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000166:0x00235f10:	icall	ErrorEx(#return, _i1)
000166:0x00235f20:	jump	0x236028
000170:0x00235f28:	cmpcm	directHit, null
000170:0x00235f38:	beq	0x236028
000172:0x00235f40:	call	
000172:0x00235f50:	moves	object_type, #return
000174:0x00235f60:	cmps	object_type, _s''
000174:0x00235f70:	bne	0x235f88
000175:0x00235f78:	moves	object_type, _s'OBJECT_WITHOUT_CONFIG_CLASS'
000177:0x00235f88:	call	
000177:0x00235f98:	icall	Format(_s'Object '%1' with model file: %2.p3d has undefined 'Hit_...' material! Cannot play impact effect.', object_type, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000177:0x00235fc8:	icall	ErrorEx(#return, _i2)
000178:0x00235fd8:	call	GetImpactEffect(_s'Hit_ErrorNoMaterial', ammoType)
000178:0x00235ff0:	icall	Spawn(#return)
000178:0x00236000:	icall	SafeCastType([0xb5b35ad8], @c01, #return)
000178:0x00236018:	movetm	eff, @c01
000183:0x00236028:	cmpcm	eff, null
000183:0x00236038:	bne	0x2360e8
000183:0x00236040:	cmps	surface, _s''
000183:0x00236050:	beq	0x2360e8
000185:0x00236058:	icall	Format(_s'Unregistered surface impact material <%1>! Register this surface in ImpactMaterials (Script).', surface, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000185:0x00236088:	icall	ErrorEx(#return, _i2)
000186:0x00236098:	call	GetImpactEffect(_s'Hit_Undefined', ammoType)
000186:0x002360b0:	icall	Spawn(#return)
000186:0x002360c0:	icall	SafeCastType([0xb5b35ad8], @c01, #return)
000186:0x002360d8:	movetm	eff, @c01
000189:0x002360e8:	cmpcm	eff, null
000189:0x002360f8:	beq	0x236158
000191:0x00236100:	call	
000192:0x00236130:	call	
000193:0x00236140:	call	PlayInWorld(eff, pos)
000193:0x00236158:	release	eff
000193:0x00236160:	rts
GameplayEffectWidgets_base::IncreaseMaskUpdateCount()
//scripts/3_Game/gameplayeffectwidgets_base.c
000005:0x00236168:	move	@m00, m_MaskWidgetUpdateCount
000005:0x00236178:	inc	m_MaskWidgetUpdateCount
000005:0x00236180:	rts
GameplayEffectWidgets_base::ResetMaskUpdateCount()
000006:0x00236188:	imove	m_MaskWidgetUpdateCount, 0x000000
000006:0x00236198:	rts
PPEExposureNative::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\exceptions\ppeexposurenative.c
000019:0x002361a0:	imove	#return, 0x000032
000019:0x002361b0:	rts
000019:0x002361b8:	rts
PPEExposureNative::RegisterMaterialParameters()
000024:0x002361c0:	call	
000024:0x002361e0:	rts
PPEExposureNative::SetFinalParameterValue()
000030:0x00236238:	call	
000030:0x00236248:	call	
000030:0x00236258:	movem	values, #return
000030:0x00236268:	release	#return
000030:0x00236270:	release	#return
000031:0x00236278:	movefm	@c01, values
000031:0x00236288:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000031:0x002362a0:	movec	@c02, @c00
000031:0x002362b0:	move	value_var_float, param1
000033:0x002362c0:	call	
000033:0x002362d0:	release	values
000033:0x002362d8:	rts
actionDebugPrint()
//scripts/3_Game/systems\inventory\debug.c
000015:0x002362e0:	adds	@s01, _s'', s
000015:0x002362f0:	moves	@s00, @s01
000015:0x00236300:	icall	Print(@s00)
000015:0x00236310:	rts
DayZCreatureAIType::DayZCreatureAIType()
//scripts/3_Game/entities\dayzcreatureaitype.c
000013:0x00236340:	ncalli	DayZCreatureAIType.GetName()
000013:0x00236348:	adds	@s01, _s'CfgVehicles ', #return
000013:0x00236358:	moves	@s00, @s01
000013:0x00236368:	adds	@s00, @s00, _s' '
000013:0x00236378:	moves	m_CfgPath, @s00
000014:0x00236388:	adds	@s00, m_CfgPath, _s'AnimEvents '
000014:0x00236398:	moves	m_AnimEventsCfgPath, @s00
000015:0x002363a8:	call	
000015:0x002363b8:	rts
DayZCreatureAIType::LoadAnimSoundEvents()
000025:0x00236598:	new	m_animSoundEvents, array<@AnimSoundEvent>
000027:0x002365b8:	adds	soundsCfgPath, m_AnimEventsCfgPath, _s'Sounds '
000029:0x002365c8:	ncall	GetGame()
000029:0x002365d0:	ncalli	CGame.ConfigGetChildrenCount(soundsCfgPath)
000029:0x002365e0:	move	soundCount, #return
000030:0x002365f0:	imove	i, 0x000000
000030:0x00236600:	jump	0x236620
000030:0x00236608:	move	@m00, i
000030:0x00236618:	inc	i
000030:0x00236620:	cmpi	i, soundCount
000030:0x00236630:	bge	0x236718
000033:0x00236638:	ncall	GetGame()
000033:0x00236640:	icall	
000034:0x00236658:	adds	@s01, soundsCfgPath, soundName
000034:0x00236668:	moves	@s00, @s01
000034:0x00236678:	adds	soundPath, @s00, _s' '
000035:0x00236688:	new	soundEvent, AnimSoundEvent
000036:0x002366b0:	call	
000036:0x002366c0:	cmpi	#return, _i0
000036:0x002366d0:	beq	0x236708
000037:0x002366d8:	movefm	@c00, soundEvent
000037:0x002366e8:	movefm	[0xb5b8df98], m_animSoundEvents
000037:0x002366f8:	icall	
000037:0x00236708:	release	soundEvent
000037:0x00236710:	jump	0x236608
000037:0x00236718:	rts
DayZCreatureAIType::LoadAnimSoundVoiceEvents()
000043:0x00236838:	new	m_animSoundVoiceEvents, array<@AnimSoundVoiceEvent>
000045:0x00236858:	adds	soundsCfgPath, m_AnimEventsCfgPath, _s'SoundVoice '
000047:0x00236868:	ncall	GetGame()
000047:0x00236870:	ncalli	CGame.ConfigGetChildrenCount(soundsCfgPath)
000047:0x00236880:	move	soundCount, #return
000048:0x00236890:	imove	i, 0x000000
000048:0x002368a0:	jump	0x2368c0
000048:0x002368a8:	move	@m00, i
000048:0x002368b8:	inc	i
000048:0x002368c0:	cmpi	i, soundCount
000048:0x002368d0:	bge	0x2369b8
000051:0x002368d8:	ncall	GetGame()
000051:0x002368e0:	icall	
000052:0x002368f8:	adds	@s01, soundsCfgPath, soundName
000052:0x00236908:	moves	@s00, @s01
000052:0x00236918:	adds	soundPath, @s00, _s' '
000053:0x00236928:	new	soundEvent, AnimSoundVoiceEvent
000054:0x00236950:	call	
000054:0x00236960:	cmpi	#return, _i0
000054:0x00236970:	beq	0x2369a8
000055:0x00236978:	movefm	@c00, soundEvent
000055:0x00236988:	movefm	[0xb5b8e078], m_animSoundVoiceEvents
000055:0x00236998:	icall	
000055:0x002369a8:	release	soundEvent
000055:0x002369b0:	jump	0x2368a8
000055:0x002369b8:	rts
DayZCreatureAIType::LoadAnimStepEvents()
000061:0x00236b98:	new	m_animStepEvents, array<@AnimStepEvent>
000062:0x00236bb8:	adds	stepsCfgPath, m_AnimEventsCfgPath, _s'Steps '
000063:0x00236bc8:	ncall	GetGame()
000063:0x00236bd0:	ncalli	CGame.ConfigGetChildrenCount(stepsCfgPath)
000063:0x00236be0:	move	stepsCount, #return
000065:0x00236bf0:	imove	i, 0x000000
000065:0x00236c00:	jump	0x236c20
000065:0x00236c08:	move	@m00, i
000065:0x00236c18:	inc	i
000065:0x00236c20:	cmpi	i, stepsCount
000065:0x00236c30:	bge	0x236cf0
000068:0x00236c38:	ncall	GetGame()
000068:0x00236c40:	icall	
000069:0x00236c58:	adds	@s01, stepsCfgPath, stepName
000069:0x00236c68:	moves	@s00, @s01
000069:0x00236c78:	adds	stepPath, @s00, _s' '
000070:0x00236c88:	new	stepEvent, AnimStepEvent
000071:0x00236cb0:	movefm	@c00, stepEvent
000071:0x00236cc0:	movefm	[0xb5b8e150], m_animStepEvents
000071:0x00236cd0:	icall	
000071:0x00236ce0:	release	stepEvent
000071:0x00236ce8:	jump	0x236c08
000071:0x00236cf0:	rts
DayZCreatureAIType::LoadAnimDamageEvents()
000077:0x00236ea0:	new	m_animDamageEvents, array<@AnimDamageEvent>
000079:0x00236ec0:	adds	damagesCfgPath, m_AnimEventsCfgPath, _s'Damages '
000080:0x00236ed0:	ncall	GetGame()
000080:0x00236ed8:	ncalli	CGame.ConfigGetChildrenCount(damagesCfgPath)
000080:0x00236ee8:	move	damagesCount, #return
000082:0x00236ef8:	imove	i, 0x000000
000082:0x00236f08:	jump	0x236f28
000082:0x00236f10:	move	@m00, i
000082:0x00236f20:	inc	i
000082:0x00236f28:	cmpi	i, damagesCount
000082:0x00236f38:	bge	0x236ff8
000085:0x00236f40:	ncall	GetGame()
000085:0x00236f48:	icall	
000086:0x00236f60:	adds	@s01, damagesCfgPath, damageName
000086:0x00236f70:	moves	@s00, @s01
000086:0x00236f80:	adds	damagePath, @s00, _s' '
000087:0x00236f90:	new	damageEvent, AnimDamageEvent
000088:0x00236fb8:	movefm	@c00, damageEvent
000088:0x00236fc8:	movefm	[0xb5b8e228], m_animDamageEvents
000088:0x00236fd8:	icall	
000088:0x00236fe8:	release	damageEvent
000088:0x00236ff0:	jump	0x236f10
000088:0x00236ff8:	rts
DayZCreatureAIType::LoadParams()
000094:0x00237000:	call	
000095:0x00237010:	call	
000096:0x00237020:	call	
000097:0x00237030:	call	
000097:0x00237040:	rts
DayZCreatureAIType::GetStepEvent()
000102:0x00237098:	imove	i, 0x000000
000102:0x002370a8:	jump	0x2370c8
000102:0x002370b0:	move	@m00, i
000102:0x002370c0:	inc	i
000102:0x002370c8:	movefm	[0xb5b8e150], m_animStepEvents
000102:0x002370d8:	ncalli	array<@AnimStepEvent>.Count()
000102:0x002370e0:	cmpi	i, #return
000102:0x002370f0:	bge	0x237180
000104:0x002370f8:	movefm	[0xb5b8e150], m_animStepEvents
000104:0x00237108:	icall	
000104:0x00237118:	movetm	stepEvent, #return
000105:0x00237128:	movefm	@c00, stepEvent
000105:0x00237138:	cmpi	m_iID, event_id
000105:0x00237148:	bne	0x237170
000107:0x00237150:	movem	#return, stepEvent
000107:0x00237160:	release	stepEvent
000107:0x00237168:	rts
000107:0x00237170:	release	stepEvent
000107:0x00237178:	jump	0x2370b0
000111:0x00237180:	movetm	#return, null
000111:0x00237190:	rts
000111:0x00237198:	rts
DayZCreatureAIType::GetSoundEvent()
000116:0x002371f0:	imove	i, 0x000000
000116:0x00237200:	jump	0x237220
000116:0x00237208:	move	@m00, i
000116:0x00237218:	inc	i
000116:0x00237220:	movefm	[0xb5b8df98], m_animSoundEvents
000116:0x00237230:	ncalli	array<@AnimSoundEvent>.Count()
000116:0x00237238:	cmpi	i, #return
000116:0x00237248:	bge	0x2372d8
000118:0x00237250:	movefm	[0xb5b8df98], m_animSoundEvents
000118:0x00237260:	icall	
000118:0x00237270:	movetm	soundEvent, #return
000119:0x00237280:	movefm	@c00, soundEvent
000119:0x00237290:	cmpi	m_iID, event_id
000119:0x002372a0:	bne	0x2372c8
000121:0x002372a8:	movem	#return, soundEvent
000121:0x002372b8:	release	soundEvent
000121:0x002372c0:	rts
000121:0x002372c8:	release	soundEvent
000121:0x002372d0:	jump	0x237208
000125:0x002372d8:	movetm	#return, null
000125:0x002372e8:	rts
000125:0x002372f0:	rts
DayZCreatureAIType::GetSoundVoiceEvent()
000130:0x00237378:	imove	i, 0x000000
000130:0x00237388:	jump	0x2373a8
000130:0x00237390:	move	@m00, i
000130:0x002373a0:	inc	i
000130:0x002373a8:	movefm	[0xb5b8e078], m_animSoundVoiceEvents
000130:0x002373b8:	ncalli	array<@AnimSoundVoiceEvent>.Count()
000130:0x002373c0:	cmpi	i, #return
000130:0x002373d0:	bge	0x237460
000132:0x002373d8:	movefm	[0xb5b8e078], m_animSoundVoiceEvents
000132:0x002373e8:	icall	
000132:0x002373f8:	movetm	voiceEvent, #return
000133:0x00237408:	movefm	@c00, voiceEvent
000133:0x00237418:	cmpi	m_iID, event_id
000133:0x00237428:	bne	0x237450
000135:0x00237430:	movem	#return, voiceEvent
000135:0x00237440:	release	voiceEvent
000135:0x00237448:	rts
000135:0x00237450:	release	voiceEvent
000135:0x00237458:	jump	0x237390
000139:0x00237460:	movetm	#return, null
000139:0x00237470:	rts
000139:0x00237478:	rts
DayZCreatureAIType::GetDamageEvent()
000144:0x002374d0:	imove	i, 0x000000
000144:0x002374e0:	jump	0x237500
000144:0x002374e8:	move	@m00, i
000144:0x002374f8:	inc	i
000144:0x00237500:	movefm	[0xb5b8e228], m_animDamageEvents
000144:0x00237510:	ncalli	array<@AnimDamageEvent>.Count()
000144:0x00237518:	cmpi	i, #return
000144:0x00237528:	bge	0x2375b8
000146:0x00237530:	movefm	[0xb5b8e228], m_animDamageEvents
000146:0x00237540:	icall	
000146:0x00237550:	movetm	damageEvent, #return
000147:0x00237560:	movefm	@c00, damageEvent
000147:0x00237570:	cmpi	m_iID, event_id
000147:0x00237580:	bne	0x2375a8
000149:0x00237588:	movem	#return, damageEvent
000149:0x00237598:	release	damageEvent
000149:0x002375a0:	rts
000149:0x002375a8:	release	damageEvent
000149:0x002375b0:	jump	0x2374e8
000153:0x002375b8:	movetm	#return, null
000153:0x002375c8:	rts
000153:0x002375d0:	rts
EntityAI::EntityAI()
//scripts/3_Game/entities\entityai.c
000145:0x002378e0:	imove	m_PreparedToDelete, 0x000000
000145:0x002378f0:	imove	m_RefresherViable, 0x000000
000145:0x00237900:	imove	m_WeightDirty, 0x000001
000145:0x00237910:	new	m_DamageDisplayNameMap, map<int,string>
000145:0x00237930:	icall	
000145:0x00237940:	citf	m_ConfigWeight, #return
000145:0x00237950:	imove	m_PendingDelete, 0x000000
000145:0x00237960:	imove	m_Initialized, 0x000000
000145:0x00237970:	imove	m_TransportHitRegistered, 0x000000
000145:0x00237980:	imove	m_ViewIndex, 0x000000
000148:0x00237990:	call	
000148:0x002379a0:	moves	type, #return
000149:0x002379b0:	adds	@s01, _s'CfgVehicles ', type
000149:0x002379c0:	moves	@s00, @s01
000149:0x002379d0:	adds	param_access_energy_sys, @s00, _s' EnergyManager '
000150:0x002379e0:	ncall	GetGame()
000150:0x002379e8:	ncalli	CGame.ConfigIsExisting(param_access_energy_sys)
000150:0x002379f8:	move	is_electic_device, #return
000152:0x00237a08:	cmpi	is_electic_device, _i0
000152:0x00237a18:	beq	0x237ab8
000154:0x00237a20:	call	
000154:0x00237a38:	release	#return
000155:0x00237a40:	ncalli	EntityAI.RegisterNetSyncVariableBool(_s'm_EM.m_IsSwichedOn')
000156:0x00237a50:	ncalli	EntityAI.RegisterNetSyncVariableBool(_s'm_EM.m_CanWork')
000157:0x00237a60:	ncalli	EntityAI.RegisterNetSyncVariableBool(_s'm_EM.m_IsPlugged')
000158:0x00237a70:	ncalli	EntityAI.RegisterNetSyncVariableInt(_s'm_EM.m_EnergySourceNetworkIDLow', _i0, _i0)
000159:0x00237a88:	ncalli	EntityAI.RegisterNetSyncVariableInt(_s'm_EM.m_EnergySourceNetworkIDHigh', _i0, _i0)
000160:0x00237aa0:	ncalli	EntityAI.RegisterNetSyncVariableFloat(_s'm_EM.m_Energy', _f0.000000, _f0.000000, _i1)
000164:0x00237ab8:	ncalli	EntityAI.RegisterNetSyncVariableInt(_s'm_ViewIndex', _i0, _i99)
000166:0x00237ad0:	ncalli	EntityAI.RegisterNetSyncVariableBool(_s'm_RefresherViable')
000168:0x00237ae0:	new	m_AttachmentsWithCargo, array<EntityAI>
000169:0x00237b00:	new	m_AttachmentsWithAttachments, array<EntityAI>
000170:0x00237b20:	imove	m_LastUpdatedTime, 0.00000
000171:0x00237b30:	imove	m_ElapsedSinceLastUpdate, 0.00000
000173:0x00237b40:	call	
000173:0x00237b50:	move	m_CanDisplayWeight, #return
000175:0x00237b60:	call	
000176:0x00237b70:	call	
000178:0x00237b80:	call	
000178:0x00237b90:	new	m_HiddenSelectionsData, HiddenSelectionsData
000180:0x00237bb8:	ncall	GetGame()
000180:0x00237bc0:	call	
000180:0x00237bd0:	icall	SetInstance([0xb5d358b8], this)
000180:0x00237be0:	icall	
000180:0x00237c18:	release	#return
000180:0x00237c20:	rts
EntityAI::DeferredInit()
000190:0x00237c28:	imove	m_Initialized, 0x000001
000190:0x00237c38:	rts
EntityAI::IsInitialized()
000195:0x00237c40:	move	#return, m_Initialized
000195:0x00237c50:	rts
000195:0x00237c58:	rts
EntityAI::GetHideIconMask()
000201:0x00237c60:	imove	#return, 0x000000
000201:0x00237c70:	rts
000201:0x00237c78:	rts
EntityAI::CreateComponent()
000210:0x00237c80:	call	
000210:0x00237c98:	movem	#return, #return
000210:0x00237ca8:	release	#return
000210:0x00237cb0:	rts
000210:0x00237cb8:	rts
EntityAI::GetComponent()
000216:0x00237cc0:	cmpcm	m_ComponentsBank, NULL
000216:0x00237cd0:	bne	0x237d00
000217:0x00237cd8:	new	m_ComponentsBank, ComponentsBank
000219:0x00237d00:	movefm	[0xb5b3d468], m_ComponentsBank
000219:0x00237d10:	call	
000219:0x00237d28:	movem	#return, #return
000219:0x00237d38:	release	#return
000219:0x00237d40:	rts
000219:0x00237d48:	rts
EntityAI::DeleteComponent()
000225:0x00237d50:	movefm	[0xb5b3d468], m_ComponentsBank
000225:0x00237d60:	call	
000225:0x00237d70:	move	#return, #return
000225:0x00237d80:	rts
000225:0x00237d88:	rts
EntityAI::GetDestructionBehaviour()
000230:0x00237d90:	moves	#return, _s''
000230:0x00237da0:	rts
000230:0x00237da8:	rts
EntityAI::IsDestructionBehaviour()
000235:0x00237db0:	imove	#return, 0x000000
000235:0x00237dc0:	rts
000235:0x00237dc8:	rts
EntityAI::HasComponent()
000241:0x00237dd0:	cmpcm	m_ComponentsBank, null
000241:0x00237de0:	beq	0x237e20
000242:0x00237de8:	movefm	[0xb5b3d468], m_ComponentsBank
000242:0x00237df8:	call	
000242:0x00237e08:	move	#return, #return
000242:0x00237e18:	rts
000244:0x00237e20:	imove	#return, 0x000000
000244:0x00237e30:	rts
000244:0x00237e38:	rts
EntityAI::MaxLifetimeRefreshCalc()
000250:0x00237f18:	ncall	GetGame()
000250:0x00237f20:	ncalli	CGame.IsMultiplayer()
000250:0x00237f28:	cmpi	#return, _i0
000250:0x00237f38:	beq	0x237f68
000250:0x00237f40:	ncall	GetGame()
000250:0x00237f48:	ncalli	CGame.IsServer()
000250:0x00237f50:	cmpi	#return, _i0
000250:0x00237f60:	beq	0x238038
000250:0x00237f68:	ncalli	EntityAI.GetEconomyProfile()
000250:0x00237f70:	cmpc	#return, null
000250:0x00237f80:	beq	0x238038
000252:0x00237f88:	ncalli	EntityAI.GetEconomyProfile()
000252:0x00237f90:	ncalli	CEItemProfile.GetLifetime()
000252:0x00237f98:	move	lifetime, #return
000253:0x00237fa8:	ncall	GetCEApi()
000253:0x00237fb0:	ncalli	CEApi.GetCEGlobalInt(_s'FlagRefreshFrequency')
000253:0x00237fc0:	move	frequency, #return
000254:0x00237fd0:	cmpi	frequency, _i0
000254:0x00237fe0:	bgt	0x237ff8
000256:0x00237fe8:	imove	frequency, 0x000000
000259:0x00237ff8:	cfti	@m00, lifetime
000259:0x00238008:	cmpi	frequency, @m00
000259:0x00238018:	bgt	0x238038
000261:0x00238020:	imove	m_RefresherViable, 0x000001
000262:0x00238030:	ncalli	EntityAI.SetSynchDirty()
000262:0x00238038:	rts
EntityAI::IsRefresherSignalingViable()
000269:0x00238040:	call	
000269:0x00238050:	cmpi	#return, _i0
000269:0x00238060:	beq	0x238080
000271:0x00238068:	imove	#return, 0x000000
000271:0x00238078:	rts
000273:0x00238080:	move	#return, m_RefresherViable
000273:0x00238090:	rts
000273:0x00238098:	rts
EntityAI::InitDamageZoneMapping()
000288:0x002380a0:	new	m_DamageZoneMap, map<string,@array<string>>
000289:0x002380c0:	movem	zoneMap, m_DamageZoneMap
000289:0x002380d0:	call	GetDamageZoneMap(this, zoneMap)
000289:0x002380e8:	movem	m_DamageZoneMap, zoneMap
000289:0x002380f8:	release	zoneMap
000289:0x00238100:	rts
EntityAI::InitDamageZoneDisplayNameMapping()
000299:0x002382b0:	call	
000299:0x002382c0:	cmpi	#return, _i0
000299:0x002382d0:	beq	0x2382f0
000301:0x002382d8:	moves	path_base, CFG_WEAPONSPATH
000301:0x002382e8:	jump	0x238340
000303:0x002382f0:	call	
000303:0x00238300:	cmpi	#return, _i0
000303:0x00238310:	beq	0x238330
000305:0x00238318:	moves	path_base, CFG_MAGAZINESPATH
000305:0x00238328:	jump	0x238340
000309:0x00238330:	moves	path_base, CFG_VEHICLESPATH
000312:0x00238340:	call	
000312:0x00238350:	icall	Format(_s'%1 %2 DamageSystem DamageZones', path_base, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000312:0x00238380:	moves	path_base, #return
000314:0x00238390:	ncall	GetGame()
000314:0x00238398:	ncalli	CGame.ConfigIsExisting(path_base)
000314:0x002383a8:	cmpi	#return, _i0
000314:0x002383b8:	bne	0x238440
000316:0x002383c0:	call	
000316:0x002383d0:	moves	component_name, #return
000317:0x002383e0:	ncall	GetGame()
000317:0x002383e8:	call	
000317:0x002383f8:	moves	component_name, value
000318:0x00238408:	ncall	Hash(_s'')
000318:0x00238418:	movefm	[0xd3158338], m_DamageDisplayNameMap
000318:0x00238428:	icall	
000318:0x00238438:	jump	0x2385f8
000322:0x00238440:	new	zone_names, array<string>
000323:0x00238460:	movefm	[0xb5b6a438], zone_names
000323:0x00238470:	ncalli	EntityAI.GetDamageZones([0xb5b6a438])
000325:0x00238480:	imove	i, 0x000000
000325:0x00238490:	jump	0x2384b0
000325:0x00238498:	move	@m00, i
000325:0x002384a8:	inc	i
000325:0x002384b0:	ncalli	array<string>.Count()
000325:0x002384b8:	cmpi	i, #return
000325:0x002384c8:	bge	0x2385f0
000327:0x002384d0:	icall	
000327:0x002384e0:	icall	Format(_s'%1 %2 displayName', path_base, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000327:0x00238510:	moves	path, #return
000329:0x00238520:	ncall	GetGame()
000329:0x00238528:	ncalli	CGame.ConfigIsExisting(path)
000329:0x00238538:	cmpi	#return, _i0
000329:0x00238548:	beq	0x2385e8
000329:0x00238550:	ncall	GetGame()
000329:0x00238558:	icall	
000329:0x00238568:	cmpi	#return, _i0
000329:0x00238578:	beq	0x2385e8
000331:0x00238580:	ncall	GetGame()
000331:0x00238588:	call	
000331:0x00238598:	moves	component_name, value
000332:0x002385a8:	icall	
000332:0x002385b8:	ncall	Hash(#return)
000332:0x002385c8:	movefm	[0xd3158338], m_DamageDisplayNameMap
000332:0x002385d8:	icall	
000332:0x002385e8:	jump	0x238498
000332:0x002385f0:	release	zone_names
000332:0x002385f8:	rts
EntityAI::GetEntityDamageZoneMap()
000340:0x00238600:	movem	#return, m_DamageZoneMap
000340:0x00238610:	rts
000340:0x00238618:	rts
EntityAI::GetEntityDamageDisplayNameMap()
000345:0x00238620:	movem	#return, m_DamageDisplayNameMap
000345:0x00238630:	rts
000345:0x00238638:	rts
EntityAI::CanDisplayWeight()
000351:0x00238640:	move	#return, m_CanDisplayWeight
000351:0x00238650:	rts
000351:0x00238658:	rts
EntityAI::Log()
000357:0x00238688:	call	
000357:0x00238698:	call	Log(msg, _s'Object', _s'n/a', fnc_name, #return)
000357:0x002386b8:	rts
EntityAI::LogWarning()
000363:0x002386c0:	call	
000363:0x002386d0:	call	LogWarning(msg, _s'Object', _s'n/a', fnc_name, #return)
000363:0x002386f0:	rts
EntityAI::LogError()
000369:0x002386f8:	call	
000369:0x00238708:	call	LogError(msg, _s'Object', _s'n/a', fnc_name, #return)
000369:0x00238728:	rts
EntityAI::IsSkinned()
000375:0x00238730:	call	
000375:0x00238740:	cmpcm	#return, null
000375:0x00238750:	beq	0x2387a8
000375:0x00238758:	call	
000375:0x00238768:	call	
000375:0x00238778:	cmpi	#return, _i0
000375:0x00238788:	beq	0x2387a8
000375:0x00238790:	imove	#return, 0x000001
000375:0x002387a0:	jump	0x2387b8
000375:0x002387a8:	imove	#return, 0x000000
000375:0x002387b8:	release	#return
000375:0x002387c0:	release	#return
000375:0x002387c8:	rts
000375:0x002387d0:	rts
EntityAI::SetAsSkinned()
000380:0x002387d8:	call	
000380:0x002387e8:	cmpcm	#return, null
000380:0x002387f8:	beq	0x238828
000381:0x00238800:	call	
000381:0x00238810:	call	
000381:0x00238820:	release	#return
000381:0x00238828:	release	#return
000381:0x00238830:	rts
EntityAI::CanBeSkinnedWith()
000386:0x00238838:	call	
000386:0x00238848:	cmpi	#return, _i0
000386:0x00238858:	bne	0x2388b8
000386:0x00238860:	cmpcm	tool, null
000386:0x00238870:	beq	0x2388b8
000387:0x00238878:	call	
000387:0x00238888:	cmpi	#return, _i0
000387:0x00238898:	bne	0x2388b8
000388:0x002388a0:	imove	#return, 0x000001
000388:0x002388b0:	rts
000389:0x002388b8:	imove	#return, 0x000000
000389:0x002388c8:	rts
000389:0x002388d0:	rts
EntityAI::HasFlammableMaterial()
000397:0x002388d8:	imove	#return, 0x000000
000397:0x002388e8:	rts
000397:0x002388f0:	rts
EntityAI::CanBeIgnitedBy()
000403:0x002388f8:	imove	#return, 0x000000
000403:0x00238908:	rts
000403:0x00238910:	rts
EntityAI::CanIgniteItem()
000409:0x00238918:	imove	#return, 0x000000
000409:0x00238928:	rts
000409:0x00238930:	rts
EntityAI::IsIgnited()
000415:0x00238938:	cmpcm	m_EM, null
000415:0x00238948:	beq	0x238988
000416:0x00238950:	movefm	[0xb5b36560], m_EM
000416:0x00238960:	call	
000416:0x00238970:	move	#return, #return
000416:0x00238980:	rts
000417:0x00238988:	imove	#return, 0x000000
000417:0x00238998:	rts
000417:0x002389a0:	rts
EntityAI::DisassembleOnLastDetach()
000423:0x002389a8:	imove	#return, 0x000000
000423:0x002389b8:	rts
000423:0x002389c0:	rts
EntityAI::IsBasebuildingKit()
000428:0x002389c8:	imove	#return, 0x000000
000428:0x002389d8:	rts
000428:0x002389e0:	rts
EntityAI::PlacementCanBeRotated()
000434:0x002389e8:	imove	#return, 0x000001
000434:0x002389f8:	rts
000434:0x00238a00:	rts
EntityAI::IsTargetIgnitionSuccessful()
000464:0x00238a08:	imove	#return, 0x000001
000464:0x00238a18:	rts
000464:0x00238a20:	rts
EntityAI::IsThisIgnitionSuccessful()
000470:0x00238a28:	imove	#return, 0x000001
000470:0x00238a38:	rts
000470:0x00238a40:	rts
EntityAI::OnPlacementCancelled()
000484:0x00238aa0:	cmpcm	m_EM, null
000484:0x00238ab0:	beq	0x238bb8
000486:0x00238ab8:	ncalli	EntityAI.GetHierarchyParent()
000486:0x00238ac0:	icall	SafeCastType([0xb5b266d0], @c01, #return)
000486:0x00238ad8:	movetm	attached_to, @c01
000487:0x00238ae8:	cmpcm	attached_to, null
000487:0x00238af8:	beq	0x238b18
000487:0x00238b00:	cmpm	attached_to, player
000487:0x00238b10:	bne	0x238bb0
000491:0x00238b18:	movefm	[0xb5b36560], m_EM
000491:0x00238b28:	call	
000491:0x00238b38:	move	@f00, #return
000491:0x00238b48:	cmpf	@f00, _f0.000000
000491:0x00238b58:	bgt	0x238b70
000494:0x00238b60:	release	attached_to
000494:0x00238b68:	rts
000498:0x00238b70:	movefm	[0xb5b36560], m_EM
000498:0x00238b80:	call	
000499:0x00238b90:	movefm	[0xb5b36560], m_EM
000499:0x00238ba0:	call	
000499:0x00238bb0:	release	attached_to
000499:0x00238bb8:	rts
EntityAI::CanBePlaced()
000504:0x00238bc0:	imove	#return, 0x000001
000504:0x00238bd0:	rts
000504:0x00238bd8:	rts
EntityAI::CanBePlacedFailMessage()
000509:0x00238be0:	moves	#return, _s''
000509:0x00238bf0:	rts
000509:0x00238bf8:	rts
EntityAI::DoPlacingHeightCheck()
000515:0x00238c00:	imove	#return, 0x000000
000515:0x00238c10:	rts
000515:0x00238c18:	rts
EntityAI::HeightCheckOverride()
000521:0x00238c20:	imove	#return, 0.00000
000521:0x00238c30:	rts
000521:0x00238c38:	rts
EntityAI::HeightStartCheckOverride()
000527:0x00238c40:	imove	#return, 0.00000
000527:0x00238c50:	rts
000527:0x00238c58:	rts
EntityAI::IsEmpty()
000533:0x00238c60:	call	
000533:0x00238c70:	cmpi	#return, _i0
000533:0x00238c80:	bne	0x238cd8
000533:0x00238c88:	ncalli	EntityAI.GetInventory()
000533:0x00238c90:	ncalli	GameInventory.AttachmentCount()
000533:0x00238c98:	move	@m00, #return
000533:0x00238ca8:	cmpi	@m00, _i0
000533:0x00238cb8:	bne	0x238cd8
000533:0x00238cc0:	imove	#return, 0x000001
000533:0x00238cd0:	jump	0x238ce8
000533:0x00238cd8:	imove	#return, 0x000000
000533:0x00238ce8:	rts
000533:0x00238cf0:	rts
EntityAI::CanBeSplit()
000538:0x00238cf8:	imove	#return, 0x000000
000538:0x00238d08:	rts
000538:0x00238d10:	rts
EntityAI::HasAnyCargo()
000544:0x00238d40:	ncalli	EntityAI.GetInventory()
000544:0x00238d48:	ncalli	GameInventory.GetCargo()
000544:0x00238d50:	movetm	cargo, #return
000546:0x00238d60:	cmpcm	cargo, null
000546:0x00238d70:	bne	0x238d98
000546:0x00238d78:	imove	#return, 0x000000
000546:0x00238d88:	release	cargo
000546:0x00238d90:	rts
000548:0x00238d98:	ncalli	CargoBase.GetItemCount()
000548:0x00238da0:	move	@m00, #return
000548:0x00238db0:	cmpi	@m00, _i0
000548:0x00238dc0:	ble	0x238df0
000550:0x00238dc8:	imove	#return, 0x000001
000550:0x00238dd8:	release	cargo
000550:0x00238de0:	rts
000550:0x00238de8:	jump	0x238e10
000554:0x00238df0:	imove	#return, 0x000000
000554:0x00238e00:	release	cargo
000554:0x00238e08:	rts
000554:0x00238e10:	release	cargo
000554:0x00238e18:	rts
EntityAI::GetAttachmentsWithCargo()
000560:0x00238e20:	movem	#return, m_AttachmentsWithCargo
000560:0x00238e30:	rts
000560:0x00238e38:	rts
EntityAI::GetAttachmentsWithAttachments()
000565:0x00238e40:	movem	#return, m_AttachmentsWithAttachments
000565:0x00238e50:	rts
000565:0x00238e58:	rts
EntityAI::GetAgents()
000568:0x00238e60:	imove	#return, 0x000000
000568:0x00238e70:	rts
000568:0x00238e78:	rts
EntityAI::IsEntityAI()
000574:0x00238e80:	imove	#return, 0x000001
000574:0x00238e90:	rts
000574:0x00238e98:	rts
EntityAI::IsInventoryVisible()
000578:0x00238ea0:	ncalli	EntityAI.GetParent()
000578:0x00238ea8:	cmpm	#return, null
000578:0x00238eb8:	bne	0x238ee0
000578:0x00238ec0:	ncalli	EntityAI.GetHierarchyParent()
000578:0x00238ec8:	cmpm	#return, null
000578:0x00238ed8:	beq	0x238ef8
000578:0x00238ee0:	imove	@m00, 0x000000
000578:0x00238ef0:	jump	0x238f08
000578:0x00238ef8:	imove	@m00, 0x000001
000578:0x00238f08:	move	#return, @m00
000578:0x00238f18:	rts
000578:0x00238f20:	rts
EntityAI::IsPlayer()
000583:0x00238f28:	imove	#return, 0x000000
000583:0x00238f38:	rts
000583:0x00238f40:	rts
EntityAI::IsAnimal()
000588:0x00238f48:	imove	#return, 0x000000
000588:0x00238f58:	rts
000588:0x00238f60:	rts
EntityAI::IsZombie()
000593:0x00238f68:	imove	#return, 0x000000
000593:0x00238f78:	rts
000593:0x00238f80:	rts
EntityAI::IsZombieMilitary()
000598:0x00238f88:	imove	#return, 0x000000
000598:0x00238f98:	rts
000598:0x00238fa0:	rts
EntityAI::IsIgnoredByConstruction()
000603:0x00238fa8:	ncalli	EntityAI.IsDamageDestroyed()
000603:0x00238fb0:	move	#return, #return
000603:0x00238fc0:	rts
000603:0x00238fc8:	rts
EntityAI::CanBeTargetedByAI()
000608:0x00238fd0:	cmpcm	ai, null
000608:0x00238fe0:	beq	0x239028
000608:0x00238fe8:	call	
000608:0x00238ff8:	cmpi	#return, _i0
000608:0x00239008:	beq	0x239028
000610:0x00239010:	imove	#return, 0x000000
000610:0x00239020:	rts
000613:0x00239028:	ncall	dBodyIsActive(this)
000613:0x00239038:	cmpi	#return, _i0
000613:0x00239048:	bne	0x239090
000613:0x00239050:	call	
000613:0x00239060:	cmpi	#return, _i0
000613:0x00239070:	bne	0x239090
000614:0x00239078:	imove	#return, 0x000000
000614:0x00239088:	rts
000615:0x00239090:	ncalli	EntityAI.IsDamageDestroyed()
000615:0x00239098:	cmpi	#return, _i0
000615:0x002390a8:	beq	0x2390c8
000615:0x002390b0:	imove	@m00, 0x000000
000615:0x002390c0:	jump	0x2390d8
000615:0x002390c8:	imove	@m00, 0x000001
000615:0x002390d8:	move	#return, @m00
000615:0x002390e8:	rts
000615:0x002390f0:	rts
EntityAI::CanBeBackstabbed()
000620:0x002390f8:	imove	#return, 0x000000
000620:0x00239108:	rts
000620:0x00239110:	rts
EntityAI::Delete()
000633:0x00239118:	imove	m_PendingDelete, 0x000001
000634:0x00239128:	call	
000634:0x00239138:	rts
EntityAI::DeleteOnClient()
000639:0x00239180:	ncall	GetGame()
000639:0x00239188:	call	
000639:0x00239198:	pushc	#return
000639:0x002391a0:	ncall	GetGame()
000639:0x002391a8:	movec	@c00, #return
000639:0x002391b8:	popc	#return
000639:0x002391c0:	movec	@c01, @c00
000639:0x002391d0:	icall	SetInstance([0xb5d37180], @c01)
000639:0x002391e0:	icall	
000639:0x00239210:	release	#return
000639:0x00239218:	rts
EntityAI::DeleteSafe()
000645:0x00239220:	ncalli	EntityAI.GetHierarchyRootPlayer()
000645:0x00239228:	movec	@c00, #return
000645:0x00239238:	cmpc	@c00, null
000645:0x00239248:	bne	0x239268
000647:0x00239250:	call	
000647:0x00239260:	jump	0x2392f0
000651:0x00239268:	ncall	GetGame()
000651:0x00239270:	ncalli	CGame.IsServer()
000651:0x00239278:	cmpi	#return, _i0
000651:0x00239288:	beq	0x2392d8
000651:0x00239290:	ncall	GetGame()
000651:0x00239298:	ncalli	CGame.IsMultiplayer()
000651:0x002392a0:	cmpi	#return, _i0
000651:0x002392b0:	beq	0x2392d8
000652:0x002392b8:	ncalli	EntityAI.GetHierarchyRootPlayer()
000652:0x002392c0:	call	
000652:0x002392d0:	jump	0x2392f0
000654:0x002392d8:	ncalli	EntityAI.GetHierarchyRootPlayer()
000654:0x002392e0:	call	
000654:0x002392f0:	rts
EntityAI::DeleteSave()
000661:0x002392f8:	call	
000661:0x00239308:	rts
EntityAI::IsSetForDeletion()
000666:0x00239310:	call	
000666:0x00239320:	cmpi	#return, _i0
000666:0x00239330:	bne	0x239390
000666:0x00239338:	cmpi	m_PendingDelete, _i0
000666:0x00239348:	bne	0x239390
000666:0x00239350:	ncalli	EntityAI.ToDelete()
000666:0x00239358:	cmpi	#return, _i0
000666:0x00239368:	bne	0x239390
000666:0x00239370:	ncalli	EntityAI.IsPendingDeletion()
000666:0x00239378:	cmpi	#return, _i0
000666:0x00239388:	beq	0x2393a8
000666:0x00239390:	imove	#return, 0x000001
000666:0x002393a0:	jump	0x2393b8
000666:0x002393a8:	imove	#return, 0x000000
000666:0x002393b8:	rts
000666:0x002393c0:	rts
EntityAI::SetPrepareToDelete()
000671:0x002393c8:	imove	m_PreparedToDelete, 0x000001
000671:0x002393d8:	rts
EntityAI::IsPreparedToDelete()
000676:0x002393e0:	move	#return, m_PreparedToDelete
000676:0x002393f0:	rts
000676:0x002393f8:	rts
EntityAI::CheckForDestroy()
000682:0x00239440:	call	
000682:0x00239450:	cmpi	#return, _i0
000682:0x00239460:	beq	0x2394d0
000684:0x00239468:	ncall	GetGame()
000684:0x00239470:	call	
000684:0x00239480:	icall	SetInstance([0xb5d37440], this)
000684:0x00239490:	icall	
000684:0x002394c8:	release	#return
000684:0x002394d0:	rts
EntityAI::IsPrepareToDelete()
000690:0x002394d8:	imove	#return, 0x000000
000690:0x002394e8:	rts
000690:0x002394f0:	rts
EntityAI::TryDelete()
000695:0x00239538:	call	
000695:0x00239548:	cmpi	#return, _i0
000695:0x00239558:	bne	0x239578
000696:0x00239560:	imove	#return, 0x000000
000696:0x00239570:	rts
000698:0x00239578:	ncall	GetGame()
000698:0x00239580:	ncalli	CGame.HasInventoryJunctureItem(this)
000698:0x00239590:	cmpi	#return, _i0
000698:0x002395a0:	beq	0x239628
000700:0x002395a8:	ncall	GetGame()
000700:0x002395b0:	call	
000700:0x002395c0:	icall	SetInstance([0xb5d37538], this)
000700:0x002395d0:	icall	
000700:0x00239608:	release	#return
000701:0x00239610:	imove	#return, 0x000000
000701:0x00239620:	rts
000704:0x00239628:	call	
000705:0x00239638:	call	
000706:0x00239648:	imove	#return, 0x000001
000706:0x00239658:	rts
000706:0x00239660:	rts
EntityAI::GetHierarchyLevel()
000726:0x00239668:	ncalli	EntityAI.GetHierarchyParent()
000726:0x00239670:	cmpm	#return, null
000726:0x00239680:	bne	0x2396a8
000727:0x00239688:	move	#return, lvl
000727:0x00239698:	rts
000727:0x002396a0:	jump	0x2396f8
000730:0x002396a8:	ncalli	EntityAI.GetHierarchyParent()
000730:0x002396b0:	addi	@m02, lvl, _i1
000730:0x002396c0:	move	@m01, @m02
000730:0x002396d0:	call	
000730:0x002396e0:	move	#return, #return
000730:0x002396f0:	rts
000730:0x002396f8:	rts
EntityAI::OnInventoryInit()
000736:0x00239700:	call	
000736:0x00239710:	rts
EntityAI::EEInit()
000742:0x00239768:	ncalli	EntityAI.GetInventory()
000742:0x00239770:	cmpm	#return, null
000742:0x00239780:	beq	0x239938
000744:0x00239788:	ncalli	EntityAI.GetInventory()
000744:0x00239790:	call	
000745:0x002397a0:	movefm	[0xb5b727b0], m_AttachmentsWithCargo
000745:0x002397b0:	ncalli	array<EntityAI>.Clear()
000746:0x002397b8:	movefm	[0xb5b727b0], m_AttachmentsWithAttachments
000746:0x002397c8:	ncalli	array<EntityAI>.Clear()
000747:0x002397d0:	imove	i, 0x000000
000747:0x002397e0:	jump	0x239800
000747:0x002397e8:	move	@m00, i
000747:0x002397f8:	inc	i
000747:0x00239800:	ncalli	EntityAI.GetInventory()
000747:0x00239808:	ncalli	GameInventory.AttachmentCount()
000747:0x00239810:	cmpi	i, #return
000747:0x00239820:	bge	0x239938
000749:0x00239828:	ncalli	EntityAI.GetInventory()
000749:0x00239830:	ncalli	GameInventory.GetAttachmentFromIndex(i)
000749:0x00239840:	movetm	attachment, #return
000750:0x00239850:	cmpcm	attachment, null
000750:0x00239860:	beq	0x239928
000752:0x00239868:	ncalli	EntityAI.GetInventory()
000752:0x00239870:	ncalli	GameInventory.GetCargo()
000752:0x00239878:	cmpm	#return, null
000752:0x00239888:	beq	0x2398c0
000754:0x00239890:	movefm	@c00, attachment
000754:0x002398a0:	movefm	[0xb5b727b0], m_AttachmentsWithCargo
000754:0x002398b0:	icall	
000757:0x002398c0:	ncalli	EntityAI.GetInventory()
000757:0x002398c8:	ncalli	GameInventory.GetAttachmentSlotsCount()
000757:0x002398d0:	move	@m00, #return
000757:0x002398e0:	cmpi	@m00, _i0
000757:0x002398f0:	ble	0x239928
000759:0x002398f8:	movefm	@c00, attachment
000759:0x00239908:	movefm	[0xb5b727b0], m_AttachmentsWithAttachments
000759:0x00239918:	icall	
000759:0x00239928:	release	attachment
000759:0x00239930:	jump	0x2397e8
000765:0x00239938:	call	
000765:0x00239948:	rts
EntityAI::EEDelete()
000771:0x00239950:	imove	m_PendingDelete, 0x000001
000772:0x00239960:	ncalli	EntityAI.GetInventory()
000772:0x00239968:	call	
000774:0x00239978:	cmpcm	m_EM, null
000774:0x00239988:	beq	0x2399b0
000775:0x00239990:	movefm	[0xb5b36560], m_EM
000775:0x002399a0:	call	
000775:0x002399b0:	rts
EntityAI::OnExplosionEffects()
000780:0x002399b8:	call	
000782:0x002399f0:	ncalli	DayZGame.GetWorld()
000782:0x002399f8:	ncalli	World.AddEnvShootingSource(pos, _f1.000000)
000784:0x00239a08:	cmpcm	m_DestructionBehaviourObj, null
000784:0x00239a18:	beq	0x239aa0
000784:0x00239a20:	movefm	[0xb5b38280], m_DestructionBehaviourObj
000784:0x00239a30:	call	
000784:0x00239a40:	cmpi	#return, _i0
000784:0x00239a50:	beq	0x239aa0
000786:0x00239a58:	movefm	[0xb5b38280], m_DestructionBehaviourObj
000786:0x00239a68:	call	
000786:0x00239aa0:	rts
EntityAI::EEItemLocationChanged()
000797:0x00239b48:	ncalli	InventoryLocation.GetParent()
000797:0x00239b50:	movetm	old_owner, #return
000798:0x00239b60:	ncalli	InventoryLocation.GetParent()
000798:0x00239b68:	movetm	new_owner, #return
000799:0x00239b78:	call	
000801:0x00239b90:	ncalli	InventoryLocation.GetType()
000801:0x00239b98:	move	@m00, #return
000801:0x00239ba8:	cmpi	@m00, _i2
000801:0x00239bb8:	bne	0x239c08
000801:0x00239bc0:	ncalli	InventoryLocation.GetType()
000801:0x00239bc8:	move	@m00, #return
000801:0x00239bd8:	cmpi	@m00, _i2
000801:0x00239be8:	bne	0x239c08
000803:0x00239bf0:	call	
000806:0x00239c08:	ncalli	InventoryLocation.GetType()
000806:0x00239c10:	move	@m00, #return
000806:0x00239c20:	cmpi	@m00, _i2
000806:0x00239c30:	bne	0x239c88
000808:0x00239c38:	cmpcm	old_owner, null
000808:0x00239c48:	beq	0x239c78
000809:0x00239c50:	ncalli	InventoryLocation.GetSlot()
000809:0x00239c58:	call	
000809:0x00239c70:	jump	0x239c88
000811:0x00239c78:	call	Error(_s'EntityAI::EEItemLocationChanged - detached, but old_owner is null')
000814:0x00239c88:	ncalli	InventoryLocation.GetType()
000814:0x00239c90:	move	@m00, #return
000814:0x00239ca0:	cmpi	@m00, _i2
000814:0x00239cb0:	bne	0x239d10
000816:0x00239cb8:	cmpcm	new_owner, null
000816:0x00239cc8:	beq	0x239d00
000817:0x00239cd0:	ncalli	InventoryLocation.GetParent()
000817:0x00239cd8:	ncalli	InventoryLocation.GetSlot()
000817:0x00239ce0:	call	
000817:0x00239cf8:	jump	0x239d10
000819:0x00239d00:	call	Error(_s'EntityAI::EEItemLocationChanged - attached, but new_owner is null')
000819:0x00239d10:	release	old_owner
000819:0x00239d18:	release	new_owner
000819:0x00239d20:	rts
EntityAI::EEInventoryOut()
000838:0x00239d28:	imove	m_LastUpdatedTime, 0.00000
000840:0x00239d38:	ncalli	EntityAI.GetInventory()
000840:0x00239d40:	cmpm	#return, null
000840:0x00239d50:	beq	0x239d80
000840:0x00239d58:	cmpcm	newParent, null
000840:0x00239d68:	bne	0x239d80
000842:0x00239d70:	ncalli	EntityAI.GetInventory()
000842:0x00239d78:	ncalli	GameInventory.ResetFlipCargo()
000842:0x00239d80:	rts
EntityAI::EEAmmoChanged()
000848:0x00239d88:	call	
000848:0x00239d98:	rts
EntityAI::EEHealthLevelChanged()
000854:0x00239dc8:	ncalli	EntityAI.GetHierarchyParent()
000854:0x00239dd0:	movetm	parent, #return
000856:0x00239de0:	cmpi	newLevel, STATE_RUINED
000856:0x00239df0:	bne	0x239e60
000858:0x00239df8:	cmpcm	parent, null
000858:0x00239e08:	beq	0x239e20
000860:0x00239e10:	call	
000862:0x00239e20:	cmps	zone, _s''
000862:0x00239e30:	bne	0x239e48
000864:0x00239e38:	call	
000866:0x00239e48:	call	
000866:0x00239e60:	release	parent
000866:0x00239e68:	rts
EntityAI::AttemptDestructionBehaviour()
000875:0x00239ef0:	call	
000875:0x00239f00:	cmpi	#return, _i0
000875:0x00239f10:	beq	0x23a038
000875:0x00239f18:	call	
000875:0x00239f28:	cmps	#return, _s''
000875:0x00239f38:	beq	0x23a038
000877:0x00239f40:	call	
000877:0x00239f50:	ncall	ToType(#return)
000877:0x00239f60:	movea	destType, #return
000879:0x00239f70:	cmpc	destType, null
000879:0x00239f80:	beq	0x23a028
000881:0x00239f88:	cmpcm	m_DestructionBehaviourObj, null
000881:0x00239f98:	bne	0x239fd8
000883:0x00239fa0:	icall	Spawn(destType)
000883:0x00239fb0:	icall	SafeCastType([0xb5b38280], @c01, #return)
000883:0x00239fc8:	movetm	m_DestructionBehaviourObj, @c01
000886:0x00239fd8:	cmpcm	m_DestructionBehaviourObj, null
000886:0x00239fe8:	beq	0x23a020
000888:0x00239ff0:	movefm	[0xb5b38280], m_DestructionBehaviourObj
000888:0x0023a000:	call	
000888:0x0023a020:	jump	0x23a038
000893:0x0023a028:	icall	ErrorEx(_s'Incorrect destruction behaviour type, make sure the class returned in 'GetDestructionBehaviour()' is a valid type inheriting from 'DestructionEffectBase'', _i2)
000893:0x0023a038:	rts
EntityAI::EEKilled()
000905:0x0023a080:	ncall	GetGame()
000905:0x0023a088:	call	
000905:0x0023a098:	call	
000905:0x0023a0b0:	release	#return
000907:0x0023a0b8:	call	
000907:0x0023a0c8:	cmpi	#return, _i0
000907:0x0023a0d8:	beq	0x23a148
000908:0x0023a0e0:	ncall	GetGame()
000908:0x0023a0e8:	call	
000908:0x0023a0f8:	icall	SetInstance([0xb5d38080], this)
000908:0x0023a108:	icall	
000908:0x0023a140:	release	#return
000908:0x0023a148:	rts
EntityAI::ReplaceOnDeath()
000913:0x0023a150:	imove	#return, 0x000000
000913:0x0023a160:	rts
000913:0x0023a168:	rts
EntityAI::GetDeadItemName()
000918:0x0023a170:	moves	#return, _s''
000918:0x0023a180:	rts
000918:0x0023a188:	rts
EntityAI::KeepHealthOnReplace()
000923:0x0023a190:	imove	#return, 0x000000
000923:0x0023a1a0:	rts
000923:0x0023a1a8:	rts
EntityAI::DeathUpdate()
000928:0x0023a208:	ncall	GetGame()
000928:0x0023a210:	call	
000928:0x0023a220:	ncalli	EntityAI.GetPosition()
000928:0x0023a228:	ncalli	CGame.CreateObjectEx(#return, #return, ECE_OBJECT_SWAP, RF_ORIGINAL)
000928:0x0023a240:	icall	SafeCastType([0xb5b25dc0], @c01, #return)
000928:0x0023a258:	movetm	dead_entity, @c01
000929:0x0023a268:	ncalli	EntityAI.GetOrientation()
000929:0x0023a270:	ncalli	EntityAI.SetOrientation(#return)
000930:0x0023a280:	call	
000930:0x0023a290:	cmpi	#return, _i0
000930:0x0023a2a0:	beq	0x23a2c8
000931:0x0023a2a8:	call	
000931:0x0023a2b8:	call	
000932:0x0023a2c8:	call	
000932:0x0023a2d8:	release	dead_entity
000932:0x0023a2e0:	rts
EntityAI::EEItemAttached()
000957:0x0023a368:	ncall	GetSlotIdFromString(slot_name)
000957:0x0023a378:	move	slotId, #return
000958:0x0023a388:	call	
000958:0x0023a398:	call	
000958:0x0023a3b0:	release	#return
000959:0x0023a3b8:	call	
000961:0x0023a3c8:	cmpcm	m_ComponentsBank, NULL
000961:0x0023a3d8:	beq	0x23a4a0
000963:0x0023a3e0:	imove	comp_key, 0x000000
000963:0x0023a3f0:	jump	0x23a400
000963:0x0023a3f8:	inc	comp_key
000963:0x0023a400:	cmpi	comp_key, COMP_TYPE_COUNT
000963:0x0023a410:	bge	0x23a4a0
000965:0x0023a418:	movefm	[0xb5b3d468], m_ComponentsBank
000965:0x0023a428:	call	
000965:0x0023a438:	cmpi	#return, _i0
000965:0x0023a448:	beq	0x23a498
000967:0x0023a450:	movefm	[0xb5b3d468], m_ComponentsBank
000967:0x0023a460:	call	
000967:0x0023a478:	call	
000967:0x0023a490:	release	#return
000967:0x0023a498:	jump	0x23a3f8
000973:0x0023a4a0:	cmpcm	m_EM, null
000973:0x0023a4b0:	beq	0x23a500
000973:0x0023a4b8:	call	
000973:0x0023a4c8:	cmpcm	#return, null
000973:0x0023a4d8:	beq	0x23a500
000974:0x0023a4e0:	movefm	[0xb5b36560], m_EM
000974:0x0023a4f0:	call	
000974:0x0023a500:	release	#return
000976:0x0023a508:	ncalli	EntityAI.GetInventory()
000976:0x0023a510:	ncalli	GameInventory.GetCargo()
000976:0x0023a518:	cmpm	#return, null
000976:0x0023a528:	beq	0x23a560
000977:0x0023a530:	movefm	@c00, item
000977:0x0023a540:	movefm	[0xb5b727b0], m_AttachmentsWithCargo
000977:0x0023a550:	icall	
000979:0x0023a560:	ncalli	EntityAI.GetInventory()
000979:0x0023a568:	ncalli	GameInventory.GetAttachmentSlotsCount()
000979:0x0023a570:	move	@m00, #return
000979:0x0023a580:	cmpi	@m00, _i0
000979:0x0023a590:	ble	0x23a5c8
000980:0x0023a598:	movefm	@c00, item
000980:0x0023a5a8:	movefm	[0xb5b727b0], m_AttachmentsWithAttachments
000980:0x0023a5b8:	icall	
000982:0x0023a5c8:	cmpcm	m_OnItemAttached, null
000982:0x0023a5d8:	beq	0x23a620
000983:0x0023a5e0:	movefm	[0xb425b340], m_OnItemAttached
000983:0x0023a5f0:	icall	
000983:0x0023a620:	rts
EntityAI::EEItemDetached()
000992:0x0023a678:	ncall	GetSlotIdFromString(slot_name)
000992:0x0023a688:	move	slotId, #return
000993:0x0023a698:	call	
000993:0x0023a6a8:	call	
000993:0x0023a6c0:	release	#return
000994:0x0023a6c8:	call	
000996:0x0023a6d8:	cmpcm	m_ComponentsBank, NULL
000996:0x0023a6e8:	beq	0x23a7b0
000998:0x0023a6f0:	imove	comp_key, 0x000000
000998:0x0023a700:	jump	0x23a710
000998:0x0023a708:	inc	comp_key
000998:0x0023a710:	cmpi	comp_key, COMP_TYPE_COUNT
000998:0x0023a720:	bge	0x23a7b0
001000:0x0023a728:	movefm	[0xb5b3d468], m_ComponentsBank
001000:0x0023a738:	call	
001000:0x0023a748:	cmpi	#return, _i0
001000:0x0023a758:	beq	0x23a7a8
001002:0x0023a760:	movefm	[0xb5b3d468], m_ComponentsBank
001002:0x0023a770:	call	
001002:0x0023a788:	call	
001002:0x0023a7a0:	release	#return
001002:0x0023a7a8:	jump	0x23a708
001008:0x0023a7b0:	cmpcm	m_EM, null
001008:0x0023a7c0:	beq	0x23a810
001008:0x0023a7c8:	call	
001008:0x0023a7d8:	cmpcm	#return, null
001008:0x0023a7e8:	beq	0x23a810
001009:0x0023a7f0:	movefm	[0xb5b36560], m_EM
001009:0x0023a800:	call	
001009:0x0023a810:	release	#return
001011:0x0023a818:	movefm	@c00, item
001011:0x0023a828:	movefm	[0xb5b727b0], m_AttachmentsWithCargo
001011:0x0023a838:	icall	
001011:0x0023a848:	move	@m00, #return
001011:0x0023a858:	cmpi	@m00, _i-1
001011:0x0023a868:	ble	0x23a890
001012:0x0023a870:	movefm	[0xb5b727b0], m_AttachmentsWithCargo
001012:0x0023a880:	call	
001014:0x0023a890:	movefm	@c00, item
001014:0x0023a8a0:	movefm	[0xb5b727b0], m_AttachmentsWithAttachments
001014:0x0023a8b0:	icall	
001014:0x0023a8c0:	move	@m00, #return
001014:0x0023a8d0:	cmpi	@m00, _i-1
001014:0x0023a8e0:	ble	0x23a908
001015:0x0023a8e8:	movefm	[0xb5b727b0], m_AttachmentsWithAttachments
001015:0x0023a8f8:	call	
001018:0x0023a908:	cmpcm	m_OnItemDetached, null
001018:0x0023a918:	beq	0x23a960
001019:0x0023a920:	movefm	[0xb425b340], m_OnItemDetached
001019:0x0023a930:	icall	
001019:0x0023a960:	rts
EntityAI::EECargoIn()
001024:0x0023a968:	call	
001026:0x0023a978:	cmpcm	m_OnItemAddedIntoCargo, null
001026:0x0023a988:	beq	0x23a9d0
001027:0x0023a990:	movefm	[0xb425b340], m_OnItemAddedIntoCargo
001027:0x0023a9a0:	icall	
001029:0x0023a9d0:	call	
001029:0x0023a9e0:	rts
EntityAI::EECargoOut()
001034:0x0023a9e8:	call	
001036:0x0023a9f8:	cmpcm	m_OnItemRemovedFromCargo, null
001036:0x0023aa08:	beq	0x23aa50
001037:0x0023aa10:	movefm	[0xb425b340], m_OnItemRemovedFromCargo
001037:0x0023aa20:	icall	
001039:0x0023aa50:	call	
001039:0x0023aa60:	rts
EntityAI::EECargoMove()
001044:0x0023aa68:	cmpcm	m_OnItemMovedInCargo, null
001044:0x0023aa78:	beq	0x23aac0
001045:0x0023aa80:	movefm	[0xb425b340], m_OnItemMovedInCargo
001045:0x0023aa90:	icall	
001046:0x0023aac0:	call	
001046:0x0023aad0:	rts
EntityAI::GetOnItemAttached()
001051:0x0023aad8:	cmpcm	m_OnItemAttached, null
001051:0x0023aae8:	bne	0x23ab10
001052:0x0023aaf0:	new	m_OnItemAttached, ScriptInvoker
001053:0x0023ab10:	movem	#return, m_OnItemAttached
001053:0x0023ab20:	rts
001053:0x0023ab28:	rts
EntityAI::GetOnItemDetached()
001058:0x0023ab30:	cmpcm	m_OnItemDetached, null
001058:0x0023ab40:	bne	0x23ab68
001059:0x0023ab48:	new	m_OnItemDetached, ScriptInvoker
001060:0x0023ab68:	movem	#return, m_OnItemDetached
001060:0x0023ab78:	rts
001060:0x0023ab80:	rts
EntityAI::GetOnItemAddedIntoCargo()
001065:0x0023ab88:	cmpcm	m_OnItemAddedIntoCargo, null
001065:0x0023ab98:	bne	0x23abc0
001066:0x0023aba0:	new	m_OnItemAddedIntoCargo, ScriptInvoker
001067:0x0023abc0:	movem	#return, m_OnItemAddedIntoCargo
001067:0x0023abd0:	rts
001067:0x0023abd8:	rts
EntityAI::GetOnItemRemovedFromCargo()
001072:0x0023abe0:	cmpcm	m_OnItemRemovedFromCargo, null
001072:0x0023abf0:	bne	0x23ac18
001073:0x0023abf8:	new	m_OnItemRemovedFromCargo, ScriptInvoker
001074:0x0023ac18:	movem	#return, m_OnItemRemovedFromCargo
001074:0x0023ac28:	rts
001074:0x0023ac30:	rts
EntityAI::GetOnItemMovedInCargo()
001079:0x0023ac38:	cmpcm	m_OnItemMovedInCargo, null
001079:0x0023ac48:	bne	0x23ac70
001080:0x0023ac50:	new	m_OnItemMovedInCargo, ScriptInvoker
001081:0x0023ac70:	movem	#return, m_OnItemMovedInCargo
001081:0x0023ac80:	rts
001081:0x0023ac88:	rts
EntityAI::GetOnItemFlipped()
001086:0x0023ac90:	cmpcm	m_OnItemFlipped, null
001086:0x0023aca0:	bne	0x23acc8
001087:0x0023aca8:	new	m_OnItemFlipped, ScriptInvoker
001088:0x0023acc8:	movem	#return, m_OnItemFlipped
001088:0x0023acd8:	rts
001088:0x0023ace0:	rts
EntityAI::GetOnViewIndexChanged()
001093:0x0023ace8:	cmpcm	m_OnViewIndexChanged, null
001093:0x0023acf8:	bne	0x23ad20
001094:0x0023ad00:	new	m_OnViewIndexChanged, ScriptInvoker
001095:0x0023ad20:	movem	#return, m_OnViewIndexChanged
001095:0x0023ad30:	rts
001095:0x0023ad38:	rts
EntityAI::GetOnSetLock()
001100:0x0023ad40:	cmpcm	m_OnSetLock, null
001100:0x0023ad50:	bne	0x23ad78
001101:0x0023ad58:	new	m_OnSetLock, ScriptInvoker
001102:0x0023ad78:	movem	#return, m_OnSetLock
001102:0x0023ad88:	rts
001102:0x0023ad90:	rts
EntityAI::GetOnReleaseLock()
001107:0x0023ad98:	cmpcm	m_OnReleaseLock, null
001107:0x0023ada8:	bne	0x23add0
001108:0x0023adb0:	new	m_OnReleaseLock, ScriptInvoker
001109:0x0023add0:	movem	#return, m_OnReleaseLock
001109:0x0023ade0:	rts
001109:0x0023ade8:	rts
EntityAI::GetOnAttachmentSetLock()
001114:0x0023adf0:	cmpcm	m_OnAttachmentSetLock, null
001114:0x0023ae00:	bne	0x23ae28
001115:0x0023ae08:	new	m_OnAttachmentSetLock, ScriptInvoker
001116:0x0023ae28:	movem	#return, m_OnAttachmentSetLock
001116:0x0023ae38:	rts
001116:0x0023ae40:	rts
EntityAI::GetOnAttachmentReleaseLock()
001121:0x0023ae48:	cmpcm	m_OnAttachmentReleaseLock, null
001121:0x0023ae58:	bne	0x23ae80
001122:0x0023ae60:	new	m_OnAttachmentReleaseLock, ScriptInvoker
001123:0x0023ae80:	movem	#return, m_OnAttachmentReleaseLock
001123:0x0023ae90:	rts
001123:0x0023ae98:	rts
EntityAI::OnMovedInsideCargo()
001130:0x0023aea0:	cmpcm	m_EM, null
001130:0x0023aeb0:	beq	0x23aed8
001131:0x0023aeb8:	movefm	[0xb5b36560], m_EM
001131:0x0023aec8:	call	
001131:0x0023aed8:	rts
EntityAI::EEOnAfterLoad()
001151:0x0023b038:	cmpcm	m_EM, null
001151:0x0023b048:	beq	0x23b2c0
001151:0x0023b050:	movefm	[0xb5b36560], m_EM
001151:0x0023b060:	call	
001151:0x0023b070:	cmpi	#return, _i0
001151:0x0023b080:	beq	0x23b2c0
001153:0x0023b088:	movefm	[0xb5b36560], m_EM
001153:0x0023b098:	call	
001153:0x0023b0a8:	move	b1, #return
001154:0x0023b0b8:	movefm	[0xb5b36560], m_EM
001154:0x0023b0c8:	call	
001154:0x0023b0d8:	move	b2, #return
001155:0x0023b0e8:	movefm	[0xb5b36560], m_EM
001155:0x0023b0f8:	call	
001155:0x0023b108:	move	b3, #return
001156:0x0023b118:	movefm	[0xb5b36560], m_EM
001156:0x0023b128:	call	
001156:0x0023b138:	move	b4, #return
001159:0x0023b148:	ncall	GetGame()
001159:0x0023b150:	ncalli	CGame.GetEntityByPersitentID(b1, b2, b3, b4)
001159:0x0023b168:	movetm	potential_energy_source, #return
001166:0x0023b178:	imove	is_attachment, 0x000000
001168:0x0023b188:	cmpcm	potential_energy_source, null
001168:0x0023b198:	beq	0x23b1d8
001169:0x0023b1a0:	ncalli	EntityAI.GetInventory()
001169:0x0023b1a8:	movefm	[0xb5bacf00], potential_energy_source
001169:0x0023b1b8:	ncalli	GameInventory.HasAttachment([0xb5bacf00])
001169:0x0023b1c8:	move	is_attachment, #return
001171:0x0023b1d8:	cmpi	is_attachment, _i0
001171:0x0023b1e8:	bne	0x23b230
001171:0x0023b1f0:	cmpcm	potential_energy_source, null
001171:0x0023b200:	beq	0x23b230
001172:0x0023b208:	ncalli	EntityAI.GetInventory()
001172:0x0023b210:	ncalli	GameInventory.HasAttachment(this)
001172:0x0023b220:	move	is_attachment, #return
001174:0x0023b230:	cmpcm	potential_energy_source, null
001174:0x0023b240:	beq	0x23b2b0
001174:0x0023b248:	call	
001174:0x0023b258:	cmpcm	#return, null
001174:0x0023b268:	beq	0x23b2b0
001174:0x0023b270:	cmpi	is_attachment, _i0
001174:0x0023b280:	bne	0x23b2b0
001175:0x0023b288:	movefm	[0xb5b36560], m_EM
001175:0x0023b298:	call	
001175:0x0023b2b0:	release	#return
001175:0x0023b2b8:	release	potential_energy_source
001175:0x0023b2c0:	rts
EntityAI::OnBinLoadItemsDropped()
001192:0x0023b2c8:	ncalli	EntityAI.GetHierarchyRootPlayer()
001192:0x0023b2d0:	cmpm	#return, null
001192:0x0023b2e0:	beq	0x23b300
001195:0x0023b2e8:	ncalli	EntityAI.GetHierarchyRootPlayer()
001195:0x0023b2f0:	call	
001195:0x0023b300:	rts
EntityAI::HideAllSelections()
001202:0x0023b430:	call	
001202:0x0023b440:	adds	@s01, _s'cfgVehicles ', #return
001202:0x0023b450:	moves	@s00, @s01
001202:0x0023b460:	adds	cfg_path, @s00, _s' AnimationSources'
001204:0x0023b470:	ncall	GetGame()
001204:0x0023b478:	ncalli	CGame.ConfigIsExisting(cfg_path)
001204:0x0023b488:	cmpi	#return, _i0
001204:0x0023b498:	beq	0x23b548
001206:0x0023b4a0:	ncall	GetGame()
001206:0x0023b4a8:	ncalli	CGame.ConfigGetChildrenCount(cfg_path)
001206:0x0023b4b8:	move	selections, #return
001208:0x0023b4c8:	imove	i, 0x000000
001208:0x0023b4d8:	jump	0x23b4f8
001208:0x0023b4e0:	move	@m00, i
001208:0x0023b4f0:	inc	i
001208:0x0023b4f8:	cmpi	i, selections
001208:0x0023b508:	bge	0x23b548
001211:0x0023b510:	ncall	GetGame()
001211:0x0023b518:	icall	
001212:0x0023b530:	call	
001212:0x0023b540:	jump	0x23b4e0
001212:0x0023b548:	rts
EntityAI::ShowAllSelections()
001220:0x0023b5f0:	call	
001220:0x0023b600:	adds	@s01, _s'cfgVehicles ', #return
001220:0x0023b610:	moves	@s00, @s01
001220:0x0023b620:	adds	cfg_path, @s00, _s' AnimationSources'
001222:0x0023b630:	ncall	GetGame()
001222:0x0023b638:	ncalli	CGame.ConfigIsExisting(cfg_path)
001222:0x0023b648:	cmpi	#return, _i0
001222:0x0023b658:	beq	0x23b708
001224:0x0023b660:	ncall	GetGame()
001224:0x0023b668:	ncalli	CGame.ConfigGetChildrenCount(cfg_path)
001224:0x0023b678:	move	selections, #return
001226:0x0023b688:	imove	i, 0x000000
001226:0x0023b698:	jump	0x23b6b8
001226:0x0023b6a0:	move	@m00, i
001226:0x0023b6b0:	inc	i
001226:0x0023b6b8:	cmpi	i, selections
001226:0x0023b6c8:	bge	0x23b708
001229:0x0023b6d0:	ncall	GetGame()
001229:0x0023b6d8:	icall	
001230:0x0023b6f0:	call	
001230:0x0023b700:	jump	0x23b6a0
001230:0x0023b708:	rts
EntityAI::CanReceiveAttachment()
001244:0x0023b818:	ncalli	EntityAI.GetInventory()
001244:0x0023b820:	ncalli	GameInventory.FindAttachment(slotId)
001244:0x0023b830:	movetm	currentAtt, #return
001245:0x0023b840:	call	
001245:0x0023b850:	move	hasInternalConflict, #return
001246:0x0023b860:	cmpcm	currentAtt, null
001246:0x0023b870:	beq	0x23b9f8
001248:0x0023b878:	call	
001248:0x0023b888:	movem	diff, #return
001248:0x0023b898:	release	#return
001249:0x0023b8a0:	call	
001249:0x0023b8b0:	call	
001249:0x0023b8c0:	release	#return
001250:0x0023b8c8:	ncalli	set<int>.Count()
001250:0x0023b8d0:	move	@m00, #return
001250:0x0023b8e0:	cmpi	@m00, _i0
001250:0x0023b8f0:	bne	0x23b968
001252:0x0023b8f8:	cmpi	hasInternalConflict, _i0
001252:0x0023b908:	beq	0x23b928
001252:0x0023b910:	imove	@m00, 0x000000
001252:0x0023b920:	jump	0x23b938
001252:0x0023b928:	imove	@m00, 0x000001
001252:0x0023b938:	move	#return, @m00
001252:0x0023b948:	release	diff
001252:0x0023b950:	release	currentAtt
001252:0x0023b958:	rts
001252:0x0023b960:	jump	0x23b9f0
001256:0x0023b968:	cmpi	hasInternalConflict, _i0
001256:0x0023b978:	bne	0x23b9c8
001256:0x0023b980:	call	
001256:0x0023b998:	cmpi	#return, _i0
001256:0x0023b9a8:	bne	0x23b9c8
001256:0x0023b9b0:	imove	#return, 0x000001
001256:0x0023b9c0:	jump	0x23b9d8
001256:0x0023b9c8:	imove	#return, 0x000000
001256:0x0023b9d8:	release	diff
001256:0x0023b9e0:	release	currentAtt
001256:0x0023b9e8:	rts
001256:0x0023b9f0:	release	diff
001259:0x0023b9f8:	cmpi	hasInternalConflict, _i0
001259:0x0023ba08:	bne	0x23ba68
001259:0x0023ba10:	call	
001259:0x0023ba20:	call	
001259:0x0023ba38:	cmpi	#return, _i0
001259:0x0023ba48:	bne	0x23ba68
001259:0x0023ba50:	imove	#return, 0x000001
001259:0x0023ba60:	jump	0x23ba78
001259:0x0023ba68:	imove	#return, 0x000000
001259:0x0023ba78:	release	#return
001259:0x0023ba80:	release	currentAtt
001259:0x0023ba88:	rts
001259:0x0023ba90:	release	currentAtt
001259:0x0023ba98:	rts
EntityAI::CanLoadAttachment()
001270:0x0023baa0:	imove	#return, 0x000001
001270:0x0023bab0:	rts
001270:0x0023bab8:	rts
EntityAI::CanPutAsAttachment()
001282:0x0023bac0:	call	
001282:0x0023bad0:	cmpi	#return, _i0
001282:0x0023bae0:	beq	0x23bb00
001282:0x0023bae8:	imove	@m00, 0x000000
001282:0x0023baf8:	jump	0x23bb10
001282:0x0023bb00:	imove	@m00, 0x000001
001282:0x0023bb10:	move	#return, @m00
001282:0x0023bb20:	rts
001282:0x0023bb28:	rts
EntityAI::CanSwitchDuringAttach()
001288:0x0023bb30:	imove	#return, 0x000000
001288:0x0023bb40:	rts
001288:0x0023bb48:	rts
EntityAI::CanReleaseAttachment()
001298:0x0023bbc8:	cmpcm	attachment, null
001298:0x0023bbd8:	beq	0x23bd20
001298:0x0023bbe0:	ncalli	EntityAI.GetInventory()
001298:0x0023bbe8:	cmpm	#return, null
001298:0x0023bbf8:	beq	0x23bd20
001298:0x0023bc00:	ncalli	EntityAI.GetInventory()
001298:0x0023bc08:	cmpm	#return, null
001298:0x0023bc18:	beq	0x23bd20
001300:0x0023bc20:	new	il, InventoryLocation
001301:0x0023bc40:	ncalli	EntityAI.GetInventory()
001301:0x0023bc48:	movefm	[0xb5bad1f8], il
001301:0x0023bc58:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001302:0x0023bc68:	ncalli	InventoryLocation.IsValid()
001302:0x0023bc70:	cmpi	#return, _i0
001302:0x0023bc80:	beq	0x23bd18
001304:0x0023bc88:	ncalli	InventoryLocation.GetSlot()
001304:0x0023bc90:	move	slot, #return
001305:0x0023bca0:	ncalli	EntityAI.GetInventory()
001305:0x0023bca8:	ncalli	GameInventory.GetSlotLock(slot)
001305:0x0023bcb8:	cmpi	#return, _i0
001305:0x0023bcc8:	beq	0x23bce8
001305:0x0023bcd0:	imove	@m00, 0x000000
001305:0x0023bce0:	jump	0x23bcf8
001305:0x0023bce8:	imove	@m00, 0x000001
001305:0x0023bcf8:	move	#return, @m00
001305:0x0023bd08:	release	il
001305:0x0023bd10:	rts
001305:0x0023bd18:	release	il
001308:0x0023bd20:	imove	#return, 0x000001
001308:0x0023bd30:	rts
001308:0x0023bd38:	rts
EntityAI::CanDetachAttachment()
001318:0x0023bd40:	imove	#return, 0x000001
001318:0x0023bd50:	rts
001318:0x0023bd58:	rts
EntityAI::CanCombineAttachment()
001323:0x0023bdb0:	ncalli	EntityAI.GetInventory()
001323:0x0023bdb8:	ncalli	GameInventory.FindAttachment(slot)
001323:0x0023bdc8:	movetm	att, #return
001324:0x0023bdd8:	cmpcm	att, null
001324:0x0023bde8:	beq	0x23be28
001325:0x0023bdf0:	call	
001325:0x0023be08:	move	#return, #return
001325:0x0023be18:	release	att
001325:0x0023be20:	rts
001326:0x0023be28:	imove	#return, 0x000000
001326:0x0023be38:	release	att
001326:0x0023be40:	rts
001326:0x0023be48:	release	att
001326:0x0023be50:	rts
EntityAI::CanBeCombined()
001331:0x0023be58:	imove	#return, 0x000000
001331:0x0023be68:	rts
001331:0x0023be70:	rts
EntityAI::CanReceiveItemIntoCargo()
001345:0x0023be78:	ncalli	EntityAI.GetInventory()
001345:0x0023be80:	cmpm	#return, null
001345:0x0023be90:	beq	0x23bef8
001345:0x0023be98:	ncalli	EntityAI.GetInventory()
001345:0x0023bea0:	ncalli	GameInventory.GetCargo()
001345:0x0023bea8:	cmpm	#return, null
001345:0x0023beb8:	beq	0x23bef8
001346:0x0023bec0:	ncalli	EntityAI.GetInventory()
001346:0x0023bec8:	ncalli	GameInventory.GetCargo()
001346:0x0023bed0:	call	
001346:0x0023bee0:	move	#return, #return
001346:0x0023bef0:	rts
001348:0x0023bef8:	imove	#return, 0x000001
001348:0x0023bf08:	rts
001348:0x0023bf10:	rts
EntityAI::CanLoadItemIntoCargo()
001359:0x0023bf18:	imove	#return, 0x000001
001359:0x0023bf28:	rts
001359:0x0023bf30:	rts
EntityAI::CanPutInCargo()
001370:0x0023bf38:	call	
001370:0x0023bf48:	cmpi	#return, _i0
001370:0x0023bf58:	beq	0x23bf78
001370:0x0023bf60:	imove	@m00, 0x000000
001370:0x0023bf70:	jump	0x23bf88
001370:0x0023bf78:	imove	@m00, 0x000001
001370:0x0023bf88:	move	#return, @m00
001370:0x0023bf98:	rts
001370:0x0023bfa0:	rts
EntityAI::CanSwapItemInCargo()
001381:0x0023bfa8:	ncalli	EntityAI.GetInventory()
001381:0x0023bfb0:	cmpm	#return, null
001381:0x0023bfc0:	beq	0x23c030
001381:0x0023bfc8:	ncalli	EntityAI.GetInventory()
001381:0x0023bfd0:	ncalli	GameInventory.GetCargo()
001381:0x0023bfd8:	cmpm	#return, null
001381:0x0023bfe8:	beq	0x23c030
001382:0x0023bff0:	ncalli	EntityAI.GetInventory()
001382:0x0023bff8:	ncalli	GameInventory.GetCargo()
001382:0x0023c000:	call	
001382:0x0023c018:	move	#return, #return
001382:0x0023c028:	rts
001384:0x0023c030:	imove	#return, 0x000001
001384:0x0023c040:	rts
001384:0x0023c048:	rts
EntityAI::CanReleaseCargo()
001395:0x0023c050:	imove	#return, 0x000001
001395:0x0023c060:	rts
001395:0x0023c068:	rts
EntityAI::CanRemoveFromCargo()
001406:0x0023c070:	imove	#return, 0x000001
001406:0x0023c080:	rts
001406:0x0023c088:	rts
EntityAI::CanReceiveItemIntoHands()
001439:0x0023c090:	imove	#return, 0x000001
001439:0x0023c0a0:	rts
001439:0x0023c0a8:	rts
EntityAI::IsBeingPlaced()
001444:0x0023c0b0:	imove	#return, 0x000000
001444:0x0023c0c0:	rts
001444:0x0023c0c8:	rts
EntityAI::IsHologram()
001449:0x0023c0d0:	imove	#return, 0x000000
001449:0x0023c0e0:	rts
001449:0x0023c0e8:	rts
EntityAI::CanSaveItemInHands()
001454:0x0023c0f0:	imove	#return, 0x000001
001454:0x0023c100:	rts
001454:0x0023c108:	rts
EntityAI::CanPutIntoHands()
001465:0x0023c110:	call	
001465:0x0023c120:	cmpi	#return, _i0
001465:0x0023c130:	beq	0x23c150
001465:0x0023c138:	imove	@m00, 0x000000
001465:0x0023c148:	jump	0x23c160
001465:0x0023c150:	imove	@m00, 0x000001
001465:0x0023c160:	move	#return, @m00
001465:0x0023c170:	rts
001465:0x0023c178:	rts
EntityAI::CanReleaseFromHands()
001476:0x0023c180:	imove	#return, 0x000001
001476:0x0023c190:	rts
001476:0x0023c198:	rts
EntityAI::CanRemoveFromHands()
001487:0x0023c1a0:	imove	#return, 0x000001
001487:0x0023c1b0:	rts
001487:0x0023c1b8:	rts
EntityAI::CanDisplayAttachmentSlot()
001496:0x0023c1e8:	call	LogWarning(_s'Obsolete function - use CanDisplayAttachmentSlot with slot id parameter', _s'n/a', _s'n/a', _s'n/a', _s'n/a')
001497:0x0023c208:	ncall	GetSlotIdFromString(slot_name)
001497:0x0023c218:	ncall	GetShowForSlotId(#return)
001497:0x0023c228:	move	#return, #return
001497:0x0023c238:	rts
001497:0x0023c240:	rts
EntityAI::CanDisplayAttachmentSlot#66939()
001506:0x0023c248:	ncall	GetShowForSlotId(slot_id)
001506:0x0023c258:	move	#return, #return
001506:0x0023c268:	rts
001506:0x0023c270:	rts
EntityAI::CanDisplayAnyAttachmentSlot()
001514:0x0023c2f0:	ncalli	EntityAI.GetInventory()
001514:0x0023c2f8:	ncalli	GameInventory.GetAttachmentSlotsCount()
001514:0x0023c300:	move	count, #return
001516:0x0023c310:	imove	i, 0x000000
001516:0x0023c320:	jump	0x23c340
001516:0x0023c328:	move	@m00, i
001516:0x0023c338:	inc	i
001516:0x0023c340:	cmpi	i, count
001516:0x0023c350:	bge	0x23c3c8
001518:0x0023c358:	ncalli	EntityAI.GetInventory()
001518:0x0023c360:	ncalli	GameInventory.GetAttachmentSlotId(i)
001518:0x0023c370:	move	slotID, #return
001519:0x0023c380:	call	
001519:0x0023c390:	cmpi	#return, _i0
001519:0x0023c3a0:	beq	0x23c3c0
001521:0x0023c3a8:	imove	#return, 0x000001
001521:0x0023c3b8:	rts
001521:0x0023c3c0:	jump	0x23c328
001525:0x0023c3c8:	imove	#return, 0x000000
001525:0x0023c3d8:	rts
001525:0x0023c3e0:	rts
EntityAI::CanDisplayAttachmentCategory()
001534:0x0023c3e8:	imove	#return, 0x000001
001534:0x0023c3f8:	rts
001534:0x0023c400:	rts
EntityAI::CanDisplayCargo()
001542:0x0023c408:	imove	#return, 0x000001
001542:0x0023c418:	rts
001542:0x0023c420:	rts
EntityAI::CanAssignToQuickbar()
001550:0x0023c428:	imove	#return, 0x000001
001550:0x0023c438:	rts
001550:0x0023c440:	rts
EntityAI::CanAssignAttachmentsToQuickbar()
001558:0x0023c448:	imove	#return, 0x000001
001558:0x0023c458:	rts
001558:0x0023c460:	rts
EntityAI::IgnoreOutOfReachCondition()
001566:0x0023c468:	ncalli	EntityAI.GetHierarchyRootPlayer()
001566:0x0023c470:	movec	@c00, #return
001566:0x0023c480:	ncall	GetGame()
001566:0x0023c488:	ncalli	CGame.GetPlayer()
001566:0x0023c490:	cmpc	@c00, #return
001566:0x0023c4a0:	bne	0x23c4c0
001566:0x0023c4a8:	imove	#return, 0x000001
001566:0x0023c4b8:	jump	0x23c4d0
001566:0x0023c4c0:	imove	#return, 0x000000
001566:0x0023c4d0:	rts
001566:0x0023c4d8:	rts
EntityAI::IsTakeable()
001579:0x0023c4e0:	imove	#return, 0x000000
001579:0x0023c4f0:	rts
001579:0x0023c4f8:	rts
EntityAI::GetSlotsCountCorrect()
001588:0x0023c500:	ncalli	EntityAI.GetInventory()
001588:0x0023c508:	cmpm	#return, null
001588:0x0023c518:	beq	0x23c550
001589:0x0023c520:	ncalli	EntityAI.GetInventory()
001589:0x0023c528:	ncalli	GameInventory.GetAttachmentSlotsCount()
001589:0x0023c530:	move	#return, #return
001589:0x0023c540:	rts
001589:0x0023c548:	jump	0x23c568
001591:0x0023c550:	imove	#return, 0xffffffff
001591:0x0023c560:	rts
001591:0x0023c568:	rts
EntityAI::FindAttachmentBySlotName()
001596:0x0023c598:	ncall	GetGame()
001596:0x0023c5a0:	cmpc	#return, null
001596:0x0023c5b0:	beq	0x23c620
001598:0x0023c5b8:	ncall	GetSlotIdFromString(slot_name)
001598:0x0023c5c8:	move	slot_id, #return
001599:0x0023c5d8:	cmpi	slot_id, _i-1
001599:0x0023c5e8:	beq	0x23c620
001600:0x0023c5f0:	ncalli	EntityAI.GetInventory()
001600:0x0023c5f8:	ncalli	GameInventory.FindAttachment(slot_id)
001600:0x0023c608:	movetm	#return, #return
001600:0x0023c618:	rts
001602:0x0023c620:	movetm	#return, null
001602:0x0023c630:	rts
001602:0x0023c638:	rts
EntityAI::IsLockedInSlot()
001610:0x0023c6c8:	ncalli	EntityAI.GetHierarchyParent()
001610:0x0023c6d0:	movetm	parent, #return
001611:0x0023c6e0:	cmpcm	parent, null
001611:0x0023c6f0:	beq	0x23c790
001613:0x0023c6f8:	new	inventory_location, InventoryLocation
001614:0x0023c718:	ncalli	EntityAI.GetInventory()
001614:0x0023c720:	movefm	[0xb5bad1f8], inventory_location
001614:0x0023c730:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001616:0x0023c740:	ncalli	EntityAI.GetInventory()
001616:0x0023c748:	ncalli	InventoryLocation.GetSlot()
001616:0x0023c750:	ncalli	GameInventory.GetSlotLock(#return)
001616:0x0023c760:	move	#return, #return
001616:0x0023c770:	release	inventory_location
001616:0x0023c778:	release	parent
001616:0x0023c780:	rts
001616:0x0023c788:	release	inventory_location
001619:0x0023c790:	imove	#return, 0x000000
001619:0x0023c7a0:	release	parent
001619:0x0023c7a8:	rts
001619:0x0023c7b0:	release	parent
001619:0x0023c7b8:	rts
EntityAI::PredictiveTakeEntityToInventory()
001627:0x0023c7c0:	ncall	GetGame()
001627:0x0023c7c8:	ncalli	CGame.IsMultiplayer()
001627:0x0023c7d0:	cmpi	#return, _i0
001627:0x0023c7e0:	beq	0x23c828
001628:0x0023c7e8:	ncalli	EntityAI.GetInventory()
001628:0x0023c7f0:	call	
001628:0x0023c808:	move	#return, #return
001628:0x0023c818:	rts
001628:0x0023c820:	jump	0x23c860
001630:0x0023c828:	ncalli	EntityAI.GetInventory()
001630:0x0023c830:	call	
001630:0x0023c848:	move	#return, #return
001630:0x0023c858:	rts
001630:0x0023c860:	rts
EntityAI::LocalTakeEntityToInventory()
001634:0x0023c868:	ncalli	EntityAI.GetInventory()
001634:0x0023c870:	call	
001634:0x0023c888:	move	#return, #return
001634:0x0023c898:	rts
001634:0x0023c8a0:	rts
EntityAI::ServerTakeEntityToInventory()
001638:0x0023c8a8:	ncalli	EntityAI.GetInventory()
001638:0x0023c8b0:	call	
001638:0x0023c8c8:	move	#return, #return
001638:0x0023c8d8:	rts
001638:0x0023c8e0:	rts
EntityAI::PredictiveTakeEntityToTargetInventory()
001642:0x0023c8e8:	ncall	GetGame()
001642:0x0023c8f0:	ncalli	CGame.IsMultiplayer()
001642:0x0023c8f8:	cmpi	#return, _i0
001642:0x0023c908:	beq	0x23c958
001643:0x0023c910:	ncalli	EntityAI.GetInventory()
001643:0x0023c918:	call	
001643:0x0023c938:	move	#return, #return
001643:0x0023c948:	rts
001643:0x0023c950:	jump	0x23c998
001645:0x0023c958:	ncalli	EntityAI.GetInventory()
001645:0x0023c960:	call	
001645:0x0023c980:	move	#return, #return
001645:0x0023c990:	rts
001645:0x0023c998:	rts
EntityAI::LocalTakeEntityToTargetInventory()
001649:0x0023c9a0:	ncalli	EntityAI.GetInventory()
001649:0x0023c9a8:	call	
001649:0x0023c9c8:	move	#return, #return
001649:0x0023c9d8:	rts
001649:0x0023c9e0:	rts
EntityAI::ServerTakeEntityToTargetInventory()
001653:0x0023c9e8:	ncalli	EntityAI.GetInventory()
001653:0x0023c9f0:	call	
001653:0x0023ca10:	move	#return, #return
001653:0x0023ca20:	rts
001653:0x0023ca28:	rts
EntityAI::PredictiveTakeEntityToCargo()
001660:0x0023ca30:	ncall	GetGame()
001660:0x0023ca38:	ncalli	CGame.IsMultiplayer()
001660:0x0023ca40:	cmpi	#return, _i0
001660:0x0023ca50:	beq	0x23ca98
001661:0x0023ca58:	ncalli	EntityAI.GetInventory()
001661:0x0023ca60:	call	
001661:0x0023ca78:	move	#return, #return
001661:0x0023ca88:	rts
001661:0x0023ca90:	jump	0x23cad0
001663:0x0023ca98:	ncalli	EntityAI.GetInventory()
001663:0x0023caa0:	call	
001663:0x0023cab8:	move	#return, #return
001663:0x0023cac8:	rts
001663:0x0023cad0:	rts
EntityAI::LocalTakeEntityToCargo()
001667:0x0023cad8:	ncalli	EntityAI.GetInventory()
001667:0x0023cae0:	call	
001667:0x0023caf8:	move	#return, #return
001667:0x0023cb08:	rts
001667:0x0023cb10:	rts
EntityAI::ServerTakeEntityToCargo()
001671:0x0023cb18:	ncalli	EntityAI.GetInventory()
001671:0x0023cb20:	call	
001671:0x0023cb38:	move	#return, #return
001671:0x0023cb48:	rts
001671:0x0023cb50:	rts
EntityAI::PredictiveTakeEntityToTargetCargo()
001676:0x0023cb58:	ncall	GetGame()
001676:0x0023cb60:	ncalli	CGame.IsMultiplayer()
001676:0x0023cb68:	cmpi	#return, _i0
001676:0x0023cb78:	beq	0x23cbc0
001677:0x0023cb80:	ncalli	EntityAI.GetInventory()
001677:0x0023cb88:	call	
001677:0x0023cba0:	move	#return, #return
001677:0x0023cbb0:	rts
001677:0x0023cbb8:	jump	0x23cbf8
001679:0x0023cbc0:	ncalli	EntityAI.GetInventory()
001679:0x0023cbc8:	call	
001679:0x0023cbe0:	move	#return, #return
001679:0x0023cbf0:	rts
001679:0x0023cbf8:	rts
EntityAI::LocalTakeEntityToTargetCargo()
001683:0x0023cc00:	ncalli	EntityAI.GetInventory()
001683:0x0023cc08:	call	
001683:0x0023cc20:	move	#return, #return
001683:0x0023cc30:	rts
001683:0x0023cc38:	rts
EntityAI::ServerTakeEntityToTargetCargo()
001687:0x0023cc40:	ncalli	EntityAI.GetInventory()
001687:0x0023cc48:	call	
001687:0x0023cc60:	move	#return, #return
001687:0x0023cc70:	rts
001687:0x0023cc78:	rts
EntityAI::PredictiveTakeEntityToCargoEx()
001694:0x0023cc80:	ncall	GetGame()
001694:0x0023cc88:	ncalli	CGame.IsMultiplayer()
001694:0x0023cc90:	cmpi	#return, _i0
001694:0x0023cca0:	beq	0x23ccf0
001695:0x0023cca8:	ncalli	EntityAI.GetInventory()
001695:0x0023ccb0:	call	
001695:0x0023ccd0:	move	#return, #return
001695:0x0023cce0:	rts
001695:0x0023cce8:	jump	0x23cd30
001697:0x0023ccf0:	ncalli	EntityAI.GetInventory()
001697:0x0023ccf8:	call	
001697:0x0023cd18:	move	#return, #return
001697:0x0023cd28:	rts
001697:0x0023cd30:	rts
EntityAI::LocalTakeEntityToCargoEx()
001701:0x0023cd38:	ncalli	EntityAI.GetInventory()
001701:0x0023cd40:	call	
001701:0x0023cd60:	move	#return, #return
001701:0x0023cd70:	rts
001701:0x0023cd78:	rts
EntityAI::PredictiveTakeEntityToTargetCargoEx()
001706:0x0023cd80:	ncall	GetGame()
001706:0x0023cd88:	ncalli	CGame.IsMultiplayer()
001706:0x0023cd90:	cmpi	#return, _i0
001706:0x0023cda0:	beq	0x23cdf0
001707:0x0023cda8:	ncalli	EntityAI.GetInventory()
001707:0x0023cdb0:	call	
001707:0x0023cdd0:	move	#return, #return
001707:0x0023cde0:	rts
001707:0x0023cde8:	jump	0x23ce30
001709:0x0023cdf0:	ncalli	EntityAI.GetInventory()
001709:0x0023cdf8:	call	
001709:0x0023ce18:	move	#return, #return
001709:0x0023ce28:	rts
001709:0x0023ce30:	rts
EntityAI::LocalTakeEntityToTargetCargoEx()
001713:0x0023ce38:	ncalli	EntityAI.GetInventory()
001713:0x0023ce40:	call	
001713:0x0023ce60:	move	#return, #return
001713:0x0023ce70:	rts
001713:0x0023ce78:	rts
EntityAI::ServerTakeEntityToTargetCargoEx()
001717:0x0023ce80:	ncalli	EntityAI.GetInventory()
001717:0x0023ce88:	call	
001717:0x0023cea8:	move	#return, #return
001717:0x0023ceb8:	rts
001717:0x0023cec0:	rts
EntityAI::PredictiveTakeEntityAsAttachmentEx()
001724:0x0023cec8:	ncall	GetGame()
001724:0x0023ced0:	ncalli	CGame.IsMultiplayer()
001724:0x0023ced8:	cmpi	#return, _i0
001724:0x0023cee8:	beq	0x23cf30
001725:0x0023cef0:	ncalli	EntityAI.GetInventory()
001725:0x0023cef8:	call	
001725:0x0023cf10:	move	#return, #return
001725:0x0023cf20:	rts
001725:0x0023cf28:	jump	0x23cf68
001727:0x0023cf30:	ncalli	EntityAI.GetInventory()
001727:0x0023cf38:	call	
001727:0x0023cf50:	move	#return, #return
001727:0x0023cf60:	rts
001727:0x0023cf68:	rts
EntityAI::LocalTakeEntityAsAttachmentEx()
001731:0x0023cf70:	ncalli	EntityAI.GetInventory()
001731:0x0023cf78:	call	
001731:0x0023cf90:	move	#return, #return
001731:0x0023cfa0:	rts
001731:0x0023cfa8:	rts
EntityAI::ServerTakeEntityAsAttachmentEx()
001735:0x0023cfb0:	ncalli	EntityAI.GetInventory()
001735:0x0023cfb8:	call	
001735:0x0023cfd0:	move	#return, #return
001735:0x0023cfe0:	rts
001735:0x0023cfe8:	rts
EntityAI::PredictiveTakeEntityToTargetAttachmentEx()
001740:0x0023cff0:	ncall	GetGame()
001740:0x0023cff8:	ncalli	CGame.IsMultiplayer()
001740:0x0023d000:	cmpi	#return, _i0
001740:0x0023d010:	beq	0x23d060
001741:0x0023d018:	ncalli	EntityAI.GetInventory()
001741:0x0023d020:	call	
001741:0x0023d040:	move	#return, #return
001741:0x0023d050:	rts
001741:0x0023d058:	jump	0x23d0a0
001743:0x0023d060:	ncalli	EntityAI.GetInventory()
001743:0x0023d068:	call	
001743:0x0023d088:	move	#return, #return
001743:0x0023d098:	rts
001743:0x0023d0a0:	rts
EntityAI::LocalTakeEntityToTargetAttachmentEx()
001747:0x0023d0a8:	ncalli	EntityAI.GetInventory()
001747:0x0023d0b0:	call	
001747:0x0023d0d0:	move	#return, #return
001747:0x0023d0e0:	rts
001747:0x0023d0e8:	rts
EntityAI::ServerTakeEntityToTargetAttachmentEx()
001751:0x0023d0f0:	ncalli	EntityAI.GetInventory()
001751:0x0023d0f8:	call	
001751:0x0023d118:	move	#return, #return
001751:0x0023d128:	rts
001751:0x0023d130:	rts
EntityAI::PredictiveTakeEntityToTargetAttachment()
001756:0x0023d138:	ncall	GetGame()
001756:0x0023d140:	ncalli	CGame.IsMultiplayer()
001756:0x0023d148:	cmpi	#return, _i0
001756:0x0023d158:	beq	0x23d1a0
001757:0x0023d160:	ncalli	EntityAI.GetInventory()
001757:0x0023d168:	call	
001757:0x0023d180:	move	#return, #return
001757:0x0023d190:	rts
001757:0x0023d198:	jump	0x23d1d8
001759:0x0023d1a0:	ncalli	EntityAI.GetInventory()
001759:0x0023d1a8:	call	
001759:0x0023d1c0:	move	#return, #return
001759:0x0023d1d0:	rts
001759:0x0023d1d8:	rts
EntityAI::LocalTakeEntityToTargetAttachment()
001763:0x0023d1e0:	ncalli	EntityAI.GetInventory()
001763:0x0023d1e8:	call	
001763:0x0023d200:	move	#return, #return
001763:0x0023d210:	rts
001763:0x0023d218:	rts
EntityAI::ServerTakeEntityToTargetAttachment()
001767:0x0023d220:	ncalli	EntityAI.GetInventory()
001767:0x0023d228:	call	
001767:0x0023d240:	move	#return, #return
001767:0x0023d250:	rts
001767:0x0023d258:	rts
EntityAI::PredictiveTakeToDst()
001772:0x0023d260:	ncall	GetGame()
001772:0x0023d268:	ncalli	CGame.IsMultiplayer()
001772:0x0023d270:	cmpi	#return, _i0
001772:0x0023d280:	beq	0x23d2c8
001773:0x0023d288:	ncalli	EntityAI.GetInventory()
001773:0x0023d290:	call	
001773:0x0023d2a8:	move	#return, #return
001773:0x0023d2b8:	rts
001773:0x0023d2c0:	jump	0x23d300
001775:0x0023d2c8:	ncalli	EntityAI.GetInventory()
001775:0x0023d2d0:	call	
001775:0x0023d2e8:	move	#return, #return
001775:0x0023d2f8:	rts
001775:0x0023d300:	rts
EntityAI::LocalTakeToDst()
001779:0x0023d308:	ncalli	EntityAI.GetInventory()
001779:0x0023d310:	call	
001779:0x0023d328:	move	#return, #return
001779:0x0023d338:	rts
001779:0x0023d340:	rts
EntityAI::ServerTakeToDst()
001783:0x0023d348:	ncalli	EntityAI.GetInventory()
001783:0x0023d350:	call	
001783:0x0023d368:	move	#return, #return
001783:0x0023d378:	rts
001783:0x0023d380:	rts
EntityAI::PredictiveTakeEntityAsAttachment()
001791:0x0023d388:	ncall	GetGame()
001791:0x0023d390:	ncalli	CGame.IsMultiplayer()
001791:0x0023d398:	cmpi	#return, _i0
001791:0x0023d3a8:	beq	0x23d3f0
001792:0x0023d3b0:	ncalli	EntityAI.GetInventory()
001792:0x0023d3b8:	call	
001792:0x0023d3d0:	move	#return, #return
001792:0x0023d3e0:	rts
001792:0x0023d3e8:	jump	0x23d428
001794:0x0023d3f0:	ncalli	EntityAI.GetInventory()
001794:0x0023d3f8:	call	
001794:0x0023d410:	move	#return, #return
001794:0x0023d420:	rts
001794:0x0023d428:	rts
EntityAI::LocalTakeEntityAsAttachment()
001798:0x0023d430:	ncalli	EntityAI.GetInventory()
001798:0x0023d438:	call	
001798:0x0023d450:	move	#return, #return
001798:0x0023d460:	rts
001798:0x0023d468:	rts
EntityAI::ServerTakeEntityAsAttachment()
001802:0x0023d470:	ncalli	EntityAI.GetInventory()
001802:0x0023d478:	call	
001802:0x0023d490:	move	#return, #return
001802:0x0023d4a0:	rts
001802:0x0023d4a8:	rts
EntityAI::PredictiveDropEntity()
001805:0x0023d4b0:	imove	#return, 0x000000
001805:0x0023d4c0:	rts
001805:0x0023d4c8:	rts
EntityAI::LocalDropEntity()
001806:0x0023d4d0:	imove	#return, 0x000000
001806:0x0023d4e0:	rts
001806:0x0023d4e8:	rts
EntityAI::ServerDropEntity()
001807:0x0023d4f0:	imove	#return, 0x000000
001807:0x0023d500:	rts
001807:0x0023d508:	rts
EntityAI::GetAttachmentByType()
001814:0x0023d560:	imove	i, 0x000000
001814:0x0023d570:	jump	0x23d590
001814:0x0023d578:	move	@m00, i
001814:0x0023d588:	inc	i
001814:0x0023d590:	ncalli	EntityAI.GetInventory()
001814:0x0023d598:	ncalli	GameInventory.AttachmentCount()
001814:0x0023d5a0:	cmpi	i, #return
001814:0x0023d5b0:	bge	0x23d660
001816:0x0023d5b8:	ncalli	EntityAI.GetInventory()
001816:0x0023d5c0:	ncalli	GameInventory.GetAttachmentFromIndex(i)
001816:0x0023d5d0:	movetm	attachment, #return
001817:0x0023d5e0:	cmpcm	attachment, null
001817:0x0023d5f0:	beq	0x23d650
001817:0x0023d5f8:	movefm	[0xd315b878], attachment
001817:0x0023d608:	ncall	IsInherited([0xd315b878], type)
001817:0x0023d618:	cmpi	#return, _i0
001817:0x0023d628:	beq	0x23d650
001818:0x0023d630:	movem	#return, attachment
001818:0x0023d640:	release	attachment
001818:0x0023d648:	rts
001818:0x0023d650:	release	attachment
001818:0x0023d658:	jump	0x23d578
001820:0x0023d660:	movetm	#return, NULL
001820:0x0023d670:	rts
001820:0x0023d678:	rts
EntityAI::GetAttachmentByConfigTypeName()
001828:0x0023d6d0:	imove	i, 0x000000
001828:0x0023d6e0:	jump	0x23d700
001828:0x0023d6e8:	move	@m00, i
001828:0x0023d6f8:	inc	i
001828:0x0023d700:	ncalli	EntityAI.GetInventory()
001828:0x0023d708:	ncalli	GameInventory.AttachmentCount()
001828:0x0023d710:	cmpi	i, #return
001828:0x0023d720:	bge	0x23d7a8
001830:0x0023d728:	ncalli	EntityAI.GetInventory()
001830:0x0023d730:	ncalli	GameInventory.GetAttachmentFromIndex(i)
001830:0x0023d740:	movetm	attachment, #return
001831:0x0023d750:	call	
001831:0x0023d760:	cmpi	#return, _i0
001831:0x0023d770:	beq	0x23d798
001832:0x0023d778:	movem	#return, attachment
001832:0x0023d788:	release	attachment
001832:0x0023d790:	rts
001832:0x0023d798:	release	attachment
001832:0x0023d7a0:	jump	0x23d6e8
001834:0x0023d7a8:	movetm	#return, NULL
001834:0x0023d7b8:	rts
001834:0x0023d7c0:	rts
EntityAI::CanDropEntity()
001839:0x0023d7c8:	imove	#return, 0x000001
001839:0x0023d7d8:	rts
001839:0x0023d7e0:	rts
EntityAI::SpawnEntityOnGroundPos()
001845:0x0023d868:	new	il, InventoryLocation
001847:0x0023d888:	call	MatrixIdentity4(mat)
001848:0x0023d898:	ctv	mat[_i3], pos
001849:0x0023d8a8:	movec	[0xb5b9ef50], NULL
001849:0x0023d8b8:	ncalli	InventoryLocation.SetGround([0xb5b9ef50], mat)
001850:0x0023d8c8:	call	SpawnEntity(object_name, il, ECE_PLACE_ON_SURFACE, RF_DEFAULT)
001850:0x0023d8e8:	movem	#return, #return
001850:0x0023d8f8:	release	il
001850:0x0023d900:	release	#return
001850:0x0023d908:	rts
001850:0x0023d910:	release	il
001850:0x0023d918:	rts
EntityAI::SpawnEntityOnGround()
001856:0x0023d948:	new	il, InventoryLocation
001857:0x0023d968:	movec	[0xb5b9ef50], NULL
001857:0x0023d978:	ncalli	InventoryLocation.SetGround([0xb5b9ef50], mat)
001858:0x0023d988:	call	SpawnEntity(object_name, il, ECE_PLACE_ON_SURFACE, RF_DEFAULT)
001858:0x0023d9a8:	movem	#return, #return
001858:0x0023d9b8:	release	il
001858:0x0023d9c0:	release	#return
001858:0x0023d9c8:	rts
001858:0x0023d9d0:	release	il
001858:0x0023d9d8:	rts
EntityAI::CanSwapEntities()
001865:0x0023d9e0:	imove	#return, 0x000001
001865:0x0023d9f0:	rts
001865:0x0023d9f8:	rts
EntityAI::GetWet()
001876:0x0023da00:	imove	#return, 0.00000
001876:0x0023da10:	rts
001876:0x0023da18:	rts
EntityAI::GetWetMax()
001881:0x0023da20:	imove	#return, 0.00000
001881:0x0023da30:	rts
001881:0x0023da38:	rts
EntityAI::GetWetMin()
001886:0x0023da40:	imove	#return, 0.00000
001886:0x0023da50:	rts
001886:0x0023da58:	rts
EntityAI::GetWetInit()
001891:0x0023da60:	imove	#return, 0.00000
001891:0x0023da70:	rts
001891:0x0023da78:	rts
EntityAI::HasWetness()
001896:0x0023da80:	call	
001896:0x0023da90:	call	
001896:0x0023daa0:	subf	@f01, #return, #return
001896:0x0023dab0:	move	@f00, @f01
001896:0x0023dac0:	cmpf	@f00, _f0.000000
001896:0x0023dad0:	beq	0x23daf0
001896:0x0023dad8:	imove	#return, 0x000001
001896:0x0023dae8:	jump	0x23db00
001896:0x0023daf0:	imove	#return, 0x000000
001896:0x0023db00:	rts
001896:0x0023db08:	rts
EntityAI::GetWetLevelInternal()
001908:0x0023db10:	cmpf	wetness, STATE_DAMP
001908:0x0023db20:	bge	0x23db48
001910:0x0023db28:	imove	#return, 0x000000
001910:0x0023db38:	rts
001910:0x0023db40:	jump	0x23dbe8
001912:0x0023db48:	cmpf	wetness, STATE_WET
001912:0x0023db58:	bge	0x23db80
001914:0x0023db60:	imove	#return, 0x000001
001914:0x0023db70:	rts
001914:0x0023db78:	jump	0x23dbe8
001916:0x0023db80:	cmpf	wetness, STATE_SOAKING_WET
001916:0x0023db90:	bge	0x23dbb8
001918:0x0023db98:	imove	#return, 0x000002
001918:0x0023dba8:	rts
001918:0x0023dbb0:	jump	0x23dbe8
001920:0x0023dbb8:	cmpf	wetness, STATE_DRENCHED
001920:0x0023dbc8:	bge	0x23dbe8
001922:0x0023dbd0:	imove	#return, 0x000003
001922:0x0023dbe0:	rts
001924:0x0023dbe8:	imove	#return, 0x000004
001924:0x0023dbf8:	rts
001924:0x0023dc00:	rts
EntityAI::GetQuantity()
001930:0x0023dc08:	imove	#return, 0.00000
001930:0x0023dc18:	rts
001930:0x0023dc20:	rts
EntityAI::GetQuantityMax()
001935:0x0023dc28:	imove	#return, 0x000000
001935:0x0023dc38:	rts
001935:0x0023dc40:	rts
EntityAI::GetTargetQuantityMax()
001942:0x0023dc48:	imove	#return, 0x000000
001942:0x0023dc58:	rts
001942:0x0023dc60:	rts
EntityAI::GetQuickBarBonus()
001947:0x0023dc68:	imove	#return, 0x000000
001947:0x0023dc78:	rts
001947:0x0023dc80:	rts
EntityAI::GetTemperature()
001958:0x0023dc88:	imove	#return, 0.00000
001958:0x0023dc98:	rts
001958:0x0023dca0:	rts
EntityAI::GetTemperatureInit()
001963:0x0023dca8:	imove	#return, 0.00000
001963:0x0023dcb8:	rts
001963:0x0023dcc0:	rts
EntityAI::GetTemperatureMin()
001968:0x0023dcc8:	imove	#return, 0.00000
001968:0x0023dcd8:	rts
001968:0x0023dce0:	rts
EntityAI::GetTemperatureMax()
001973:0x0023dce8:	imove	#return, 0.00000
001973:0x0023dcf8:	rts
001973:0x0023dd00:	rts
EntityAI::GetHiddenSelectionsData()
001980:0x0023dd08:	movem	#return, m_HiddenSelectionsData
001980:0x0023dd18:	rts
001980:0x0023dd20:	rts
EntityAI::GetHiddenSelectionIndex()
001986:0x0023dd28:	cmpcm	m_HiddenSelectionsData, null
001986:0x0023dd38:	beq	0x23dd78
001987:0x0023dd40:	movefm	[0xb5b39710], m_HiddenSelectionsData
001987:0x0023dd50:	call	
001987:0x0023dd60:	move	#return, #return
001987:0x0023dd70:	rts
001989:0x0023dd78:	imove	#return, 0xffffffff
001989:0x0023dd88:	rts
001989:0x0023dd90:	rts
EntityAI::GetHiddenSelections()
001995:0x0023dd98:	cmpcm	m_HiddenSelectionsData, null
001995:0x0023dda8:	beq	0x23ddf0
001996:0x0023ddb0:	movefm	[0xb5b39710], m_HiddenSelectionsData
001996:0x0023ddc0:	movec	@c01, [0xb5b39710]
001996:0x0023ddd0:	movem	#return, m_HiddenSelections
001996:0x0023dde0:	rts
001996:0x0023dde8:	jump	0x23de18
001998:0x0023ddf0:	call	
001998:0x0023de00:	movem	#return, #return
001998:0x0023de10:	rts
001998:0x0023de18:	rts
EntityAI::GetHiddenSelectionsTextures()
002004:0x0023de20:	cmpcm	m_HiddenSelectionsData, null
002004:0x0023de30:	beq	0x23de78
002005:0x0023de38:	movefm	[0xb5b39710], m_HiddenSelectionsData
002005:0x0023de48:	movec	@c01, [0xb5b39710]
002005:0x0023de58:	movem	#return, m_HiddenSelectionsTextures
002005:0x0023de68:	rts
002005:0x0023de70:	jump	0x23dea0
002007:0x0023de78:	call	
002007:0x0023de88:	movem	#return, #return
002007:0x0023de98:	rts
002007:0x0023dea0:	rts
EntityAI::GetHiddenSelectionsMaterials()
002013:0x0023dea8:	cmpcm	m_HiddenSelectionsData, null
002013:0x0023deb8:	beq	0x23df00
002014:0x0023dec0:	movefm	[0xb5b39710], m_HiddenSelectionsData
002014:0x0023ded0:	movec	@c01, [0xb5b39710]
002014:0x0023dee0:	movem	#return, m_HiddenSelectionsMaterials
002014:0x0023def0:	rts
002014:0x0023def8:	jump	0x23df28
002016:0x0023df00:	call	
002016:0x0023df10:	movem	#return, #return
002016:0x0023df20:	rts
002016:0x0023df28:	rts
EntityAI::OnStoreSave()
002106:0x0023dff8:	cmpcm	m_EM, null
002106:0x0023e008:	beq	0x23e1c0
002109:0x0023e010:	movefm	[0xb5b36560], m_EM
002109:0x0023e020:	call	
002109:0x0023e030:	icall	
002112:0x0023e040:	movefm	[0xb5b36560], m_EM
002112:0x0023e050:	call	
002112:0x0023e060:	icall	
002115:0x0023e070:	movefm	[0xb5b36560], m_EM
002115:0x0023e080:	call	
002115:0x0023e090:	icall	
002118:0x0023e0a0:	movefm	[0xb5b36560], m_EM
002118:0x0023e0b0:	call	
002118:0x0023e0c0:	icall	
002122:0x0023e0d0:	movefm	[0xb5b36560], m_EM
002122:0x0023e0e0:	call	
002122:0x0023e0f0:	movem	energy_source, #return
002122:0x0023e100:	release	#return
002123:0x0023e108:	imove	b1, 0x000000
002124:0x0023e118:	imove	b2, 0x000000
002125:0x0023e128:	imove	b3, 0x000000
002126:0x0023e138:	imove	b4, 0x000000
002128:0x0023e148:	cmpcm	energy_source, null
002128:0x0023e158:	beq	0x23e178
002130:0x0023e160:	icall	
002133:0x0023e178:	icall	
002134:0x0023e188:	icall	
002135:0x0023e198:	icall	
002136:0x0023e1a8:	icall	
002136:0x0023e1b8:	release	energy_source
002136:0x0023e1c0:	rts
EntityAI::OnStoreLoad()
002168:0x0023e4a8:	cmpcm	m_EM, null
002168:0x0023e4b8:	beq	0x23e8f8
002171:0x0023e4c0:	imove	f_energy, 0.00000
002172:0x0023e4d0:	icall	
002172:0x0023e4e0:	cmpi	#return, _i0
002172:0x0023e4f0:	bne	0x23e508
002173:0x0023e4f8:	imove	f_energy, 0.00000
002174:0x0023e508:	movefm	[0xb5b36560], m_EM
002174:0x0023e518:	call	
002177:0x0023e528:	imove	b_is_passive, 0x000000
002178:0x0023e538:	icall	
002178:0x0023e548:	cmpi	#return, _i0
002178:0x0023e558:	bne	0x23e578
002179:0x0023e560:	imove	#return, 0x000000
002179:0x0023e570:	rts
002180:0x0023e578:	movefm	[0xb5b36560], m_EM
002180:0x0023e588:	call	
002183:0x0023e598:	imove	b_is_on, 0x000000
002184:0x0023e5a8:	icall	
002184:0x0023e5b8:	cmpi	#return, _i0
002184:0x0023e5c8:	bne	0x23e608
002186:0x0023e5d0:	movefm	[0xb5b36560], m_EM
002186:0x0023e5e0:	call	
002187:0x0023e5f0:	imove	#return, 0x000000
002187:0x0023e600:	rts
002191:0x0023e608:	imove	b_is_plugged, 0x000000
002192:0x0023e618:	icall	
002192:0x0023e628:	cmpi	#return, _i0
002192:0x0023e638:	bne	0x23e658
002193:0x0023e640:	imove	#return, 0x000000
002193:0x0023e650:	rts
002196:0x0023e658:	cmpi	version, _i103
002196:0x0023e668:	bgt	0x23e718
002199:0x0023e670:	imove	i_energy_source_ID_low, 0x000000
002200:0x0023e680:	icall	
002200:0x0023e690:	cmpi	#return, _i0
002200:0x0023e6a0:	bne	0x23e6c0
002201:0x0023e6a8:	imove	#return, 0x000000
002201:0x0023e6b8:	rts
002204:0x0023e6c0:	imove	i_energy_source_ID_high, 0x000000
002205:0x0023e6d0:	icall	
002205:0x0023e6e0:	cmpi	#return, _i0
002205:0x0023e6f0:	bne	0x23e710
002206:0x0023e6f8:	imove	#return, 0x000000
002206:0x0023e708:	rts
002206:0x0023e710:	jump	0x23e8c0
002210:0x0023e718:	imove	b1, 0x000000
002211:0x0023e728:	imove	b2, 0x000000
002212:0x0023e738:	imove	b3, 0x000000
002213:0x0023e748:	imove	b4, 0x000000
002215:0x0023e758:	icall	
002215:0x0023e768:	cmpi	#return, _i0
002215:0x0023e778:	bne	0x23e798
002215:0x0023e780:	imove	#return, 0x000000
002215:0x0023e790:	rts
002216:0x0023e798:	icall	
002216:0x0023e7a8:	cmpi	#return, _i0
002216:0x0023e7b8:	bne	0x23e7d8
002216:0x0023e7c0:	imove	#return, 0x000000
002216:0x0023e7d0:	rts
002217:0x0023e7d8:	icall	
002217:0x0023e7e8:	cmpi	#return, _i0
002217:0x0023e7f8:	bne	0x23e818
002217:0x0023e800:	imove	#return, 0x000000
002217:0x0023e810:	rts
002218:0x0023e818:	icall	
002218:0x0023e828:	cmpi	#return, _i0
002218:0x0023e838:	bne	0x23e858
002218:0x0023e840:	imove	#return, 0x000000
002218:0x0023e850:	rts
002220:0x0023e858:	cmpi	b_is_plugged, _i0
002220:0x0023e868:	beq	0x23e8c0
002223:0x0023e870:	movefm	[0xb5b36560], m_EM
002223:0x0023e880:	call	
002224:0x0023e8a0:	movefm	[0xb5b36560], m_EM
002224:0x0023e8b0:	call	
002228:0x0023e8c0:	cmpi	b_is_on, _i0
002228:0x0023e8d0:	beq	0x23e8f8
002230:0x0023e8d8:	movefm	[0xb5b36560], m_EM
002230:0x0023e8e8:	call	
002233:0x0023e8f8:	imove	#return, 0x000001
002233:0x0023e908:	rts
002233:0x0023e910:	rts
EntityAI::OnVariablesSynchronized()
002244:0x0023eaf8:	cmpcm	m_EM, null
002244:0x0023eb08:	beq	0x23ee08
002246:0x0023eb10:	ncall	GetGame()
002246:0x0023eb18:	ncalli	CGame.IsMultiplayer()
002246:0x0023eb20:	cmpi	#return, _i0
002246:0x0023eb30:	beq	0x23ee08
002248:0x0023eb38:	movefm	[0xb5b36560], m_EM
002248:0x0023eb48:	call	
002248:0x0023eb58:	move	is_on, #return
002250:0x0023eb68:	movefm	[0xb5b36560], m_EM
002250:0x0023eb78:	call	
002250:0x0023eb88:	cmpi	is_on, #return
002250:0x0023eb98:	beq	0x23ec00
002252:0x0023eba0:	cmpi	is_on, _i0
002252:0x0023ebb0:	beq	0x23ebe0
002253:0x0023ebb8:	movefm	[0xb5b36560], m_EM
002253:0x0023ebc8:	call	
002253:0x0023ebd8:	jump	0x23ec00
002255:0x0023ebe0:	movefm	[0xb5b36560], m_EM
002255:0x0023ebf0:	call	
002258:0x0023ec00:	movefm	[0xb5b36560], m_EM
002258:0x0023ec10:	call	
002258:0x0023ec20:	move	id_low, #return
002259:0x0023ec30:	movefm	[0xb5b36560], m_EM
002259:0x0023ec40:	call	
002259:0x0023ec50:	move	id_High, #return
002261:0x0023ec60:	ncall	GetGame()
002261:0x0023ec68:	ncalli	CGame.GetObjectByNetworkId(id_low, id_High)
002261:0x0023ec78:	icall	SafeCastType([0xb5b25dc0], @c01, #return)
002261:0x0023ec90:	movetm	energy_source, @c01
002263:0x0023eca0:	cmpcm	energy_source, null
002263:0x0023ecb0:	beq	0x23eda0
002265:0x0023ecb8:	call	
002265:0x0023ecc8:	movem	esem, #return
002265:0x0023ecd8:	release	#return
002267:0x0023ece0:	cmpcm	esem, null
002267:0x0023ecf0:	bne	0x23ed68
002269:0x0023ecf8:	call	
002269:0x0023ed08:	moves	object, #return
002270:0x0023ed18:	adds	@s02, _s'Synchronization error! Object ', object
002270:0x0023ed28:	moves	@s01, @s02
002270:0x0023ed38:	adds	@s01, @s01, _s' has no instance of the Energy Manager component!'
002270:0x0023ed48:	moves	@s00, @s01
002270:0x0023ed58:	call	Error(@s00)
002273:0x0023ed68:	movefm	[0xb5b36560], m_EM
002273:0x0023ed78:	call	
002273:0x0023ed90:	release	esem
002273:0x0023ed98:	jump	0x23edc0
002278:0x0023eda0:	movefm	[0xb5b36560], m_EM
002278:0x0023edb0:	call	
002281:0x0023edc0:	movefm	[0xb5b36560], m_EM
002281:0x0023edd0:	call	
002282:0x0023ede0:	movefm	[0xb5b36560], m_EM
002282:0x0023edf0:	call	
002282:0x0023ee00:	release	energy_source
002282:0x0023ee08:	rts
EntityAI::EOnFrame()
002291:0x0023ee38:	cmpcm	m_ComponentsBank, NULL
002291:0x0023ee48:	beq	0x23ef10
002293:0x0023ee50:	imove	comp_key, 0x000000
002293:0x0023ee60:	jump	0x23ee70
002293:0x0023ee68:	inc	comp_key
002293:0x0023ee70:	cmpi	comp_key, COMP_TYPE_COUNT
002293:0x0023ee80:	bge	0x23ef10
002295:0x0023ee88:	movefm	[0xb5b3d468], m_ComponentsBank
002295:0x0023ee98:	call	
002295:0x0023eea8:	cmpi	#return, _i0
002295:0x0023eeb8:	beq	0x23ef08
002297:0x0023eec0:	movefm	[0xb5b3d468], m_ComponentsBank
002297:0x0023eed0:	call	
002297:0x0023eee8:	call	
002297:0x0023ef00:	release	#return
002297:0x0023ef08:	jump	0x23ee68
002297:0x0023ef10:	rts
EntityAI::GetDebugText()
002305:0x0023f080:	moves	text, Empty
002307:0x0023f090:	call	
002307:0x0023f0a0:	icall	ToString(#return)
002307:0x0023f0b0:	adds	@s02, _s'Weight: ', #return
002307:0x0023f0c0:	moves	@s01, @s02
002307:0x0023f0d0:	adds	@s00, @s01, _s'
'
002307:0x0023f0e0:	adds	text, text, @s00
002308:0x0023f0f0:	ncalli	EntityAI.GetIsSimulationDisabled()
002308:0x0023f0f8:	call	ToString(#return)
002308:0x0023f108:	move	#return, value
002308:0x0023f118:	adds	@s02, _s'Disabled: ', #return
002308:0x0023f128:	moves	@s01, @s02
002308:0x0023f138:	adds	@s00, @s01, _s'
'
002308:0x0023f148:	adds	text, text, @s00
002314:0x0023f158:	call	
002314:0x0023f168:	movem	compEM, #return
002314:0x0023f178:	release	#return
002315:0x0023f180:	cmpcm	compEM, null
002315:0x0023f190:	beq	0x23f2e0
002317:0x0023f198:	call	
002317:0x0023f1a8:	call	GetDebugName#206374(#return)
002317:0x0023f1b8:	adds	@s02, _s'Energy Source: ', #return
002317:0x0023f1c8:	moves	@s01, @s02
002317:0x0023f1d8:	adds	@s00, @s01, _s'
'
002317:0x0023f1e8:	adds	text, text, @s00
002317:0x0023f1f8:	release	#return
002318:0x0023f200:	call	
002318:0x0023f210:	call	ToString(#return)
002318:0x0023f220:	move	#return, value
002318:0x0023f230:	adds	@s02, _s'Switched On: ', #return
002318:0x0023f240:	moves	@s01, @s02
002318:0x0023f250:	adds	@s00, @s01, _s'
'
002318:0x0023f260:	adds	text, text, @s00
002319:0x0023f270:	call	
002319:0x0023f280:	call	ToString(#return)
002319:0x0023f290:	move	#return, value
002319:0x0023f2a0:	adds	@s02, _s'Is Working: ', #return
002319:0x0023f2b0:	moves	@s01, @s02
002319:0x0023f2c0:	adds	@s00, @s01, _s'
'
002319:0x0023f2d0:	adds	text, text, @s00
002322:0x0023f2e0:	moves	#return, text
002322:0x0023f2f0:	release	compEM
002322:0x0023f2f8:	rts
002322:0x0023f300:	release	compEM
002322:0x0023f308:	rts
EntityAI::GetDebugButtonNames()
002326:0x0023f310:	moves	button1, button1
002326:0x0023f320:	moves	button2, button2
002326:0x0023f330:	moves	button3, button3
002326:0x0023f340:	moves	button4, button4
002326:0x0023f350:	rts
EntityAI::DebugBBoxDraw()
002347:0x0023f358:	call	
002347:0x0023f370:	call	
002347:0x0023f380:	movec	#return, #return
002347:0x0023f390:	release	#return
002347:0x0023f398:	rts
002347:0x0023f3a0:	rts
EntityAI::DebugBBoxSetColor()
002352:0x0023f3a8:	call	
002352:0x0023f3c0:	call	
002352:0x0023f3d0:	release	#return
002352:0x0023f3d8:	rts
EntityAI::DebugBBoxDelete()
002357:0x0023f3e0:	call	
002357:0x0023f3f8:	call	
002357:0x0023f408:	release	#return
002357:0x0023f410:	rts
EntityAI::DebugDirectionDraw()
002362:0x0023f418:	call	
002362:0x0023f430:	call	
002362:0x0023f440:	movec	#return, #return
002362:0x0023f450:	release	#return
002362:0x0023f458:	rts
002362:0x0023f460:	rts
EntityAI::DebugDirectionSetColor()
002367:0x0023f468:	call	
002367:0x0023f480:	call	
002367:0x0023f490:	release	#return
002367:0x0023f498:	rts
EntityAI::DebugDirectionDelete()
002372:0x0023f4a0:	call	
002372:0x0023f4b8:	call	
002372:0x0023f4c8:	release	#return
002372:0x0023f4d0:	rts
EntityAI::HideSelection()
002378:0x0023f4d8:	ncalli	EntityAI.ToDelete()
002378:0x0023f4e0:	cmpi	#return, _i0
002378:0x0023f4f0:	bne	0x23f508
002380:0x0023f4f8:	ncalli	EntityAI.SetAnimationPhase(selection_name, _f1.000000)
002380:0x0023f508:	rts
EntityAI::ShowSelection()
002387:0x0023f510:	ncalli	EntityAI.ToDelete()
002387:0x0023f518:	cmpi	#return, _i0
002387:0x0023f528:	bne	0x23f540
002389:0x0023f530:	ncalli	EntityAI.SetAnimationPhase(selection_name, _f0.000000)
002389:0x0023f540:	rts
EntityAI::IncreaseLifetimeUp()
002412:0x0023f548:	ncalli	EntityAI.IncreaseLifetime()
002413:0x0023f550:	ncalli	EntityAI.GetHierarchyParent()
002413:0x0023f558:	cmpm	#return, null
002413:0x0023f568:	beq	0x23f588
002414:0x0023f570:	ncalli	EntityAI.GetHierarchyParent()
002414:0x0023f578:	call	
002414:0x0023f588:	rts
EntityAI::GetCompBS()
002422:0x0023f590:	call	
002422:0x0023f5a0:	cmpi	#return, _i0
002422:0x0023f5b0:	beq	0x23f618
002423:0x0023f5b8:	call	
002423:0x0023f5d0:	movefm	@c02, #return
002423:0x0023f5e0:	icall	SafeCastType([0xb5b3a260], @c01, @c02)
002423:0x0023f5f8:	movetm	#return, @c01
002423:0x0023f608:	release	#return
002423:0x0023f610:	rts
002424:0x0023f618:	movetm	#return, NULL
002424:0x0023f628:	rts
002424:0x0023f630:	rts
EntityAI::GetCompEM()
002432:0x0023f638:	cmpcm	m_EM, null
002432:0x0023f648:	beq	0x23f668
002433:0x0023f650:	movem	#return, m_EM
002433:0x0023f660:	rts
002435:0x0023f668:	call	
002435:0x0023f678:	cmpi	#return, _i0
002435:0x0023f688:	beq	0x23f6f0
002436:0x0023f690:	call	
002436:0x0023f6a8:	movefm	@c02, #return
002436:0x0023f6b8:	icall	SafeCastType([0xb5b36560], @c01, @c02)
002436:0x0023f6d0:	movetm	#return, @c01
002436:0x0023f6e0:	release	#return
002436:0x0023f6e8:	rts
002437:0x0023f6f0:	movetm	#return, NULL
002437:0x0023f700:	rts
002437:0x0023f708:	rts
EntityAI::HasEnergyManager()
002443:0x0023f710:	call	
002443:0x0023f720:	move	#return, #return
002443:0x0023f730:	rts
002443:0x0023f738:	rts
EntityAI::OnRPC()
002487:0x0023f7e8:	call	
002489:0x0023f800:	ncall	GetGame()
002489:0x0023f808:	ncalli	CGame.IsClient()
002489:0x0023f810:	cmpi	#return, _i0
002489:0x0023f820:	beq	0x23f998
002491:0x0023f828:	move	#switch, rpc_type
002491:0x0023f838:	imove	@m00, 0x000014
002491:0x0023f848:	cmpi	@m00, #switch
002491:0x0023f858:	bne	0x23f950
002496:0x0023f860:	new	p_skinned_state, Param1<bool>
002497:0x0023f888:	icall	
002497:0x0023f898:	cmpi	#return, _i0
002497:0x0023f8a8:	beq	0x23f940
002499:0x0023f8b0:	movefm	@c00, p_skinned_state
002499:0x0023f8c0:	citf	state, param1
002500:0x0023f8d0:	cmpf	state, _f0.000000
002500:0x0023f8e0:	beq	0x23f938
002500:0x0023f8e8:	call	
002500:0x0023f8f8:	cmpcm	#return, null
002500:0x0023f908:	beq	0x23f938
002501:0x0023f910:	call	
002501:0x0023f920:	call	
002501:0x0023f930:	release	#return
002501:0x0023f938:	release	#return
002503:0x0023f940:	jump	0x23f998
002503:0x0023f948:	jump	0x23f978
002503:0x0023f950:	imove	@m00, 0x000017
002503:0x0023f960:	cmpi	@m00, #switch
002503:0x0023f970:	bne	0x23f990
002508:0x0023f978:	call	
002509:0x0023f988:	jump	0x23f998
002509:0x0023f990:	release	p_skinned_state
002509:0x0023f998:	rts
EntityAI::GetWetWeightModifier()
002547:0x0023f9a0:	call	
002547:0x0023f9b0:	call	GetWetnessWeightModifiers()
002547:0x0023f9c0:	icall	
002547:0x0023f9d0:	move	#return, #return
002547:0x0023f9e0:	release	#return
002547:0x0023f9e8:	rts
002547:0x0023f9f0:	rts
EntityAI::GetConfigWeightModified()
002552:0x0023f9f8:	call	
002552:0x0023fa08:	mulf	#return, m_ConfigWeight, #return
002552:0x0023fa18:	rts
002552:0x0023fa20:	rts
EntityAI::GetWeight()
002570:0x0023fa28:	call	
002570:0x0023fa38:	cfti	#return, #return
002570:0x0023fa48:	rts
002570:0x0023fa50:	rts
EntityAI::ClearWeightDirty()
002576:0x0023fa58:	imove	m_WeightDirty, 0x000000
002576:0x0023fa68:	rts
EntityAI::SetWeightDirty()
002593:0x0023fa70:	imove	m_WeightDirty, 0x000001
002594:0x0023fa80:	ncalli	EntityAI.GetHierarchyParent()
002594:0x0023fa88:	cmpm	#return, null
002594:0x0023fa98:	beq	0x23fab8
002596:0x0023faa0:	ncalli	EntityAI.GetHierarchyParent()
002596:0x0023faa8:	call	
002596:0x0023fab8:	rts
EntityAI::GetInventoryAndCargoWeight()
002603:0x0023fc20:	ncalli	EntityAI.GetInventory()
002603:0x0023fc28:	cmpm	#return, null
002603:0x0023fc38:	beq	0x23fe08
002605:0x0023fc40:	imove	i, 0x000000
002606:0x0023fc50:	ncalli	EntityAI.GetInventory()
002606:0x0023fc58:	ncalli	GameInventory.AttachmentCount()
002606:0x0023fc60:	move	AttachmentsCount, #return
002607:0x0023fc70:	cmpi	AttachmentsCount, _i0
002607:0x0023fc80:	ble	0x23fd20
002609:0x0023fc88:	imove	i, 0x000000
002609:0x0023fc98:	jump	0x23fcb8
002609:0x0023fca0:	move	@m00, i
002609:0x0023fcb0:	inc	i
002609:0x0023fcb8:	cmpi	i, AttachmentsCount
002609:0x0023fcc8:	bge	0x23fd20
002611:0x0023fcd0:	ncalli	EntityAI.GetInventory()
002611:0x0023fcd8:	ncalli	GameInventory.GetAttachmentFromIndex(i)
002611:0x0023fce8:	call	
002611:0x0023fcf8:	move	@f00, #return
002611:0x0023fd08:	addf	totalWeight, totalWeight, @f00
002611:0x0023fd18:	jump	0x23fca0
002615:0x0023fd20:	ncalli	EntityAI.GetInventory()
002615:0x0023fd28:	ncalli	GameInventory.GetCargo()
002615:0x0023fd30:	movetm	cargo, #return
002616:0x0023fd40:	cmpcm	cargo, null
002616:0x0023fd50:	beq	0x23fe00
002618:0x0023fd58:	ncalli	CargoBase.GetItemCount()
002618:0x0023fd60:	move	cargoCount, #return
002619:0x0023fd70:	imove	i, 0x000000
002619:0x0023fd80:	jump	0x23fda0
002619:0x0023fd88:	move	@m00, i
002619:0x0023fd98:	inc	i
002619:0x0023fda0:	cmpi	i, cargoCount
002619:0x0023fdb0:	bge	0x23fe00
002621:0x0023fdb8:	ncalli	CargoBase.GetItem(i)
002621:0x0023fdc8:	call	
002621:0x0023fdd8:	move	@f00, #return
002621:0x0023fde8:	addf	totalWeight, totalWeight, @f00
002621:0x0023fdf8:	jump	0x23fd88
002621:0x0023fe00:	release	cargo
002625:0x0023fe08:	move	#return, totalWeight
002625:0x0023fe18:	rts
002625:0x0023fe20:	rts
EntityAI::GetWeightSpecialized()
002630:0x0023fe28:	call	
002630:0x0023fe38:	move	#return, #return
002630:0x0023fe48:	rts
002630:0x0023fe50:	rts
EntityAI::GetWeightEx()
002637:0x0023fe58:	cmpi	m_WeightDirty, _i0
002637:0x0023fe68:	bne	0x23fe88
002637:0x0023fe70:	cmpi	forceRecalc, _i0
002637:0x0023fe80:	beq	0x23feb8
002639:0x0023fe88:	call	
002639:0x0023fe98:	move	m_WeightEx, #return
002640:0x0023fea8:	call	
002658:0x0023feb8:	move	#return, m_WeightEx
002658:0x0023fec8:	rts
002658:0x0023fed0:	rts
EntityAI::SetViewIndex()
002671:0x0023fed8:	move	m_ViewIndex, index
002673:0x0023fee8:	ncall	GetGame()
002673:0x0023fef0:	ncalli	CGame.IsServer()
002673:0x0023fef8:	cmpi	#return, _i0
002673:0x0023ff08:	beq	0x23ff18
002675:0x0023ff10:	ncalli	EntityAI.SetSynchDirty()
002675:0x0023ff18:	rts
EntityAI::GetViewIndex()
002682:0x0023ffc0:	ncalli	EntityAI.MemoryPointExists(_s'invView2')
002682:0x0023ffd0:	cmpi	#return, _i0
002682:0x0023ffe0:	beq	0x240208
002685:0x0023ffe8:	new	il, InventoryLocation
002686:0x00240008:	ncalli	EntityAI.GetInventory()
002686:0x00240010:	movefm	[0xb5bad1f8], il
002686:0x00240020:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
002687:0x00240030:	ncalli	InventoryLocation.GetType()
002687:0x00240038:	move	type, #return
002688:0x00240048:	move	#switch, type
002688:0x00240058:	imove	@m00, 0x000003
002688:0x00240068:	cmpi	@m00, #switch
002688:0x00240078:	bne	0x2400a8
002692:0x00240080:	imove	#return, 0x000000
002692:0x00240090:	release	il
002692:0x00240098:	rts
002692:0x002400a0:	jump	0x2400d0
002692:0x002400a8:	imove	@m00, 0x000002
002692:0x002400b8:	cmpi	@m00, #switch
002692:0x002400c8:	bne	0x2400f8
002696:0x002400d0:	imove	#return, 0x000001
002696:0x002400e0:	release	il
002696:0x002400e8:	rts
002696:0x002400f0:	jump	0x240120
002696:0x002400f8:	imove	@m00, 0x000004
002696:0x00240108:	cmpi	@m00, #switch
002696:0x00240118:	bne	0x240148
002700:0x00240120:	imove	#return, 0x000000
002700:0x00240130:	release	il
002700:0x00240138:	rts
002700:0x00240140:	jump	0x240170
002700:0x00240148:	imove	@m00, 0x000001
002700:0x00240158:	cmpi	@m00, #switch
002700:0x00240168:	bne	0x240198
002704:0x00240170:	imove	#return, 0x000001
002704:0x00240180:	release	il
002704:0x00240188:	rts
002704:0x00240190:	jump	0x2401c0
002704:0x00240198:	imove	@m00, 0x000005
002704:0x002401a8:	cmpi	@m00, #switch
002704:0x002401b8:	bne	0x2401e0
002708:0x002401c0:	imove	#return, 0x000000
002708:0x002401d0:	release	il
002708:0x002401d8:	rts
002712:0x002401e0:	imove	#return, 0x000000
002712:0x002401f0:	release	il
002712:0x002401f8:	rts
002712:0x00240200:	release	il
002721:0x00240208:	imove	#return, 0x000000
002721:0x00240218:	rts
002721:0x00240220:	rts
EntityAI::GetHitComponentForAI()
002728:0x00240250:	call	
002728:0x00240260:	adds	@s02, _s'EntityAI: HitComponentForAI not set properly for that entity (', #return
002728:0x00240270:	moves	@s01, @s02
002728:0x00240280:	adds	@s01, @s01, _s')'
002728:0x00240290:	moves	@s00, @s01
002728:0x002402a0:	call	LogError(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
002730:0x002402c0:	moves	#return, _s''
002730:0x002402d0:	rts
002730:0x002402d8:	rts
EntityAI::GetDefaultHitComponent()
002736:0x00240308:	call	
002736:0x00240318:	adds	@s02, _s'EntityAI: DefaultHitComponent not set properly for that entity (', #return
002736:0x00240328:	moves	@s01, @s02
002736:0x00240338:	adds	@s01, @s01, _s')'
002736:0x00240348:	moves	@s00, @s01
002736:0x00240358:	call	LogError(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
002738:0x00240378:	moves	#return, _s''
002738:0x00240388:	rts
002738:0x00240390:	rts
EntityAI::GetDefaultHitPositionComponent()
002744:0x002403c0:	call	
002744:0x002403d0:	adds	@s02, _s'EntityAI: DefaultHitPositionComponent not set for that entity (', #return
002744:0x002403e0:	moves	@s01, @s02
002744:0x002403f0:	adds	@s01, @s01, _s')'
002744:0x00240400:	moves	@s00, @s01
002744:0x00240410:	call	LogError(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
002745:0x00240430:	moves	#return, _s''
002745:0x00240440:	rts
002745:0x00240448:	rts
EntityAI::GetSuitableFinisherHitComponents()
002750:0x00240478:	call	
002750:0x00240488:	adds	@s02, _s'EntityAI: SuitableFinisherHitComponents not set for that entity (', #return
002750:0x00240498:	moves	@s01, @s02
002750:0x002404a8:	adds	@s01, @s01, _s')'
002750:0x002404b8:	moves	@s00, @s01
002750:0x002404c8:	call	LogError(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
002751:0x002404e8:	movetm	#return, null
002751:0x002404f8:	rts
002751:0x00240500:	rts
EntityAI::GetDefaultHitPosition()
002756:0x00240530:	call	
002756:0x00240540:	adds	@s02, _s'EntityAI: DefaultHitPosition not set for that entity (', #return
002756:0x00240550:	moves	@s01, @s02
002756:0x00240560:	adds	@s01, @s01, _s')'
002756:0x00240570:	moves	@s00, @s01
002756:0x00240580:	call	LogError(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
002757:0x002405a0:	movev	#return, Zero
002757:0x002405b0:	rts
002757:0x002405b8:	rts
EntityAI::GetMeleeTargetType()
002763:0x002405c0:	imove	#return, 0x000000
002763:0x002405d0:	rts
002763:0x002405d8:	rts
EntityAI::GetAttachmentSoundType()
002769:0x002405e0:	moves	#return, _s'None'
002769:0x002405f0:	rts
002769:0x002405f8:	rts
EntityAI::IsHeavyBehaviour()
002775:0x00240600:	imove	#return, 0x000000
002775:0x00240610:	rts
002775:0x00240618:	rts
EntityAI::IsOneHandedBehaviour()
002781:0x00240620:	imove	#return, 0x000000
002781:0x00240630:	rts
002781:0x00240638:	rts
EntityAI::IsTwoHandedBehaviour()
002787:0x00240640:	imove	#return, 0x000000
002787:0x00240650:	rts
002787:0x00240658:	rts
EntityAI::OnCEUpdate()
002807:0x002406b8:	ncall	GetGame()
002807:0x002406c0:	ncalli	CGame.GetTickTime()
002807:0x002406c8:	move	currentTime, #return
002808:0x002406d8:	cmpf	m_LastUpdatedTime, _f0.000000
002808:0x002406e8:	bne	0x240700
002809:0x002406f0:	move	m_LastUpdatedTime, currentTime
002811:0x00240700:	subf	@f00, currentTime, m_LastUpdatedTime
002811:0x00240710:	move	m_ElapsedSinceLastUpdate, @f00
002812:0x00240720:	move	m_LastUpdatedTime, currentTime
002812:0x00240730:	rts
EntityAI::OnDebugSpawn()
002817:0x00240ba8:	new	slots, array<string>
002818:0x00240bc8:	movefm	[0xb5b691a0], slots
002818:0x00240bd8:	ncalli	EntityAI.ConfigGetTextArray(_s'Attachments', [0xb5b691a0])
002820:0x00240be8:	new	mags, array<string>
002821:0x00240c08:	movefm	[0xb5b691a0], mags
002821:0x00240c18:	ncalli	EntityAI.ConfigGetTextArray(_s'magazines', [0xb5b691a0])
002825:0x00240c28:	new	all_paths, array<string>
002827:0x00240c48:	icall	
002828:0x00240c58:	icall	
002829:0x00240c68:	icall	
002837:0x00240c78:	imove	i, 0x000000
002837:0x00240c88:	jump	0x240ca8
002837:0x00240c90:	move	@m00, i
002837:0x00240ca0:	inc	i
002837:0x00240ca8:	ncalli	array<string>.Count()
002837:0x00240cb0:	cmpi	i, #return
002837:0x00240cc0:	bge	0x240fe8
002839:0x00240cc8:	icall	
002839:0x00240cd8:	moves	config_path, #return
002840:0x00240ce8:	ncall	GetGame()
002840:0x00240cf0:	ncalli	CGame.ConfigGetChildrenCount(config_path)
002840:0x00240d00:	move	children_count, #return
002842:0x00240d10:	imove	x, 0x000000
002842:0x00240d20:	jump	0x240d40
002842:0x00240d28:	move	@m00, x
002842:0x00240d38:	inc	x
002842:0x00240d40:	cmpi	x, children_count
002842:0x00240d50:	bge	0x240fe0
002844:0x00240d58:	ncall	GetGame()
002844:0x00240d60:	icall	
002845:0x00240d78:	adds	@s01, config_path, _s' '
002845:0x00240d88:	moves	@s00, @s01
002845:0x00240d98:	adds	@s00, @s00, child_name
002845:0x00240da8:	moves	path, @s00
002846:0x00240db8:	ncall	GetGame()
002846:0x00240dc0:	adds	@s03, config_path, _s' '
002846:0x00240dd0:	moves	@s02, @s03
002846:0x00240de0:	adds	@s02, @s02, child_name
002846:0x00240df0:	moves	@s01, @s02
002846:0x00240e00:	adds	@s01, @s01, _s' scope'
002846:0x00240e10:	moves	@s00, @s01
002846:0x00240e20:	ncalli	CGame.ConfigGetInt(@s00)
002846:0x00240e30:	move	scope, #return
002847:0x00240e40:	imove	should_check, 0x000001
002848:0x00240e50:	cmps	config_path, _s'CfgVehicles'
002848:0x00240e60:	bne	0x240e90
002848:0x00240e68:	cmpi	scope, _i0
002848:0x00240e78:	bne	0x240e90
002850:0x00240e80:	imove	should_check, 0x000000
002853:0x00240e90:	cmpi	should_check, _i0
002853:0x00240ea0:	beq	0x240fd8
002856:0x00240ea8:	ncall	GetGame()
002856:0x00240eb0:	adds	@s03, config_path, _s' '
002856:0x00240ec0:	moves	@s02, @s03
002856:0x00240ed0:	adds	@s02, @s02, child_name
002856:0x00240ee0:	moves	@s01, @s02
002856:0x00240ef0:	adds	@s01, @s01, _s' inventorySlot'
002856:0x00240f00:	moves	@s00, @s01
002856:0x00240f10:	icall	
002857:0x00240f20:	imove	z, 0x000000
002857:0x00240f30:	jump	0x240f50
002857:0x00240f38:	move	@m00, z
002857:0x00240f48:	inc	z
002857:0x00240f50:	ncalli	array<string>.Count()
002857:0x00240f58:	cmpi	z, #return
002857:0x00240f68:	bge	0x240fd8
002859:0x00240f70:	icall	
002859:0x00240f80:	moves	@s00, #return
002859:0x00240f90:	cmps	@s00, inv_slot
002859:0x00240fa0:	bne	0x240fd0
002861:0x00240fa8:	ncalli	EntityAI.GetInventory()
002861:0x00240fb0:	call	
002861:0x00240fc0:	release	#return
002862:0x00240fc8:	jump	0x240f38
002862:0x00240fd0:	jump	0x240f38
002862:0x00240fd8:	jump	0x240d28
002862:0x00240fe0:	jump	0x240c90
002862:0x00240fe8:	release	slots
002862:0x00240ff0:	release	mags
002862:0x00240ff8:	release	all_paths
002862:0x00241000:	rts
EntityAI::ProcessMeleeItemDamage()
002873:0x00241008:	ncall	GetGame()
002873:0x00241010:	ncalli	CGame.IsServer()
002873:0x00241018:	cmpi	#return, _i0
002873:0x00241028:	beq	0x241058
002874:0x00241030:	subf	@f00, _f0.000000, MELEE_ITEM_DAMAGE
002874:0x00241040:	ncalli	EntityAI.AddHealth(_s'', _s'Health', @f00)
002875:0x00241058:	movetm	#return, this
002875:0x00241068:	rts
002875:0x00241070:	rts
EntityAI::GetLiquidThroughputCoef()
002881:0x00241078:	imove	#return, 1.00000
002881:0x00241088:	rts
002881:0x00241090:	rts
EntityAI::GetInvulnerabilityTypeString()
002886:0x00241098:	moves	#return, _s''
002886:0x002410a8:	rts
002886:0x002410b0:	rts
EntityAI::ProcessInvulnerabilityCheck()
002891:0x00241188:	ncall	GetGame()
002891:0x00241190:	cmpc	#return, null
002891:0x002411a0:	beq	0x2412d8
002891:0x002411a8:	ncall	GetGame()
002891:0x002411b0:	ncalli	CGame.IsMultiplayer()
002891:0x002411b8:	cmpi	#return, _i0
002891:0x002411c8:	beq	0x2412d8
002891:0x002411d0:	ncall	GetGame()
002891:0x002411d8:	ncalli	CGame.IsServer()
002891:0x002411e0:	cmpi	#return, _i0
002891:0x002411f0:	beq	0x2412d8
002894:0x002411f8:	moves	#switch, servercfg_param
002894:0x00241208:	moves	@s00, _s'disableContainerDamage'
002894:0x00241218:	cmps	@s00, #switch
002894:0x00241228:	bne	0x241260
002897:0x00241230:	call	GetDisableContainerDamage()
002897:0x00241240:	move	invulnerability, #return
002898:0x00241250:	jump	0x2412b0
002898:0x00241258:	jump	0x241288
002898:0x00241260:	moves	@s00, _s'disableBaseDamage'
002898:0x00241270:	cmps	@s00, #switch
002898:0x00241280:	bne	0x2412b0
002901:0x00241288:	call	GetDisableBaseDamage()
002901:0x00241298:	move	invulnerability, #return
002902:0x002412a8:	jump	0x2412b0
002905:0x002412b0:	cmpi	invulnerability, _i0
002905:0x002412c0:	ble	0x2412d8
002907:0x002412c8:	ncalli	EntityAI.SetAllowDamage(false)
002907:0x002412d8:	rts
EntityAI::SetInvisibleRecursive()
002922:0x00241460:	new	childrenAtt, array<int>
002923:0x00241480:	new	attachmentsArray, array<int>
002924:0x002414a0:	cmpcm	attachments, null
002924:0x002414b0:	beq	0x2414e0
002925:0x002414b8:	movefm	@c00, attachments
002925:0x002414c8:	icall	
002925:0x002414d8:	jump	0x241568
002928:0x002414e0:	imove	i, 0x000000
002928:0x002414f0:	jump	0x241510
002928:0x002414f8:	move	@m00, i
002928:0x00241508:	inc	i
002928:0x00241510:	ncalli	EntityAI.GetInventory()
002928:0x00241518:	ncalli	GameInventory.GetAttachmentSlotsCount()
002928:0x00241520:	cmpi	i, #return
002928:0x00241530:	bge	0x241568
002930:0x00241538:	ncalli	EntityAI.GetInventory()
002930:0x00241540:	ncalli	GameInventory.GetAttachmentSlotId(i)
002930:0x00241550:	icall	
002930:0x00241560:	jump	0x2414f8
002936:0x00241568:	ncalli	array<int>.Count()
002936:0x00241570:	move	#cnt, #return
002936:0x00241580:	imove	#key, 0x000000
002936:0x00241590:	jump	0x2415a0
002936:0x00241598:	inc	#key
002936:0x002415a0:	cmpi	#key, #cnt
002936:0x002415b0:	bge	0x241738
002936:0x002415b8:	icall	
002936:0x002415c8:	move	slot, #return
002938:0x002415d8:	cmpcm	parent, null
002938:0x002415e8:	beq	0x241620
002939:0x002415f0:	ncalli	EntityAI.GetInventory()
002939:0x002415f8:	ncalli	GameInventory.FindAttachment(slot)
002939:0x00241608:	movetm	item, #return
002939:0x00241618:	jump	0x241630
002941:0x00241620:	movetm	item, this
002943:0x00241630:	cmpcm	item, null
002943:0x00241640:	beq	0x241730
002945:0x00241648:	ncalli	EntityAI.GetInventory()
002945:0x00241650:	ncalli	GameInventory.AttachmentCount()
002945:0x00241658:	move	@m00, #return
002945:0x00241668:	cmpi	@m00, _i0
002945:0x00241678:	ble	0x241720
002947:0x00241680:	imove	i, 0x000000
002947:0x00241690:	jump	0x2416b0
002947:0x00241698:	move	@m00, i
002947:0x002416a8:	inc	i
002947:0x002416b0:	ncalli	EntityAI.GetInventory()
002947:0x002416b8:	ncalli	GameInventory.GetAttachmentSlotsCount()
002947:0x002416c0:	cmpi	i, #return
002947:0x002416d0:	bge	0x241708
002949:0x002416d8:	ncalli	EntityAI.GetInventory()
002949:0x002416e0:	ncalli	GameInventory.GetAttachmentSlotId(i)
002949:0x002416f0:	icall	
002949:0x00241700:	jump	0x241698
002952:0x00241708:	call	
002955:0x00241720:	ncalli	EntityAI.SetInvisible(invisible)
002955:0x00241730:	jump	0x241598
002955:0x00241738:	release	childrenAtt
002955:0x00241740:	release	attachmentsArray
002955:0x00241748:	release	item
002955:0x00241750:	rts
EntityAI::SoundHardTreeFallingPlay()
002962:0x002417a8:	ncalli	EntityAI.GetPosition()
002962:0x002417b0:	call	PlaySound(_s'hardTreeFall_SoundSet', #return, _f0.000000, _f0.000000, _i0)
002962:0x002417d0:	movem	sound, #return
002962:0x002417e0:	release	#return
002963:0x002417e8:	call	
002963:0x002417f8:	release	sound
002963:0x00241800:	rts
EntityAI::SoundSoftTreeFallingPlay()
002968:0x00241858:	ncalli	EntityAI.GetPosition()
002968:0x00241860:	call	PlaySound(_s'softTreeFall_SoundSet', #return, _f0.000000, _f0.000000, _i0)
002968:0x00241880:	movem	sound, #return
002968:0x00241890:	release	#return
002969:0x00241898:	call	
002969:0x002418a8:	release	sound
002969:0x002418b0:	rts
EntityAI::SoundHardBushFallingPlay()
002974:0x00241908:	ncalli	EntityAI.GetPosition()
002974:0x00241910:	call	PlaySound(_s'hardBushFall_SoundSet', #return, _f0.000000, _f0.000000, _i0)
002974:0x00241930:	movem	sound, #return
002974:0x00241940:	release	#return
002975:0x00241948:	call	
002975:0x00241958:	release	sound
002975:0x00241960:	rts
EntityAI::SoundSoftBushFallingPlay()
002980:0x002419b8:	ncalli	EntityAI.GetPosition()
002980:0x002419c0:	call	PlaySound(_s'softBushFall_SoundSet', #return, _f0.000000, _f0.000000, _i0)
002980:0x002419e0:	movem	sound, #return
002980:0x002419f0:	release	#return
002981:0x002419f8:	call	
002981:0x00241a08:	release	sound
002981:0x00241a10:	rts
EntityAI::RegisterTransportHit()
002986:0x00241bd8:	cmpi	m_TransportHitRegistered, _i0
002986:0x00241be8:	bne	0x241f58
002988:0x00241bf0:	imove	m_TransportHitRegistered, 0x000001
002989:0x00241c00:	movefm	[0xd3179198], transport
002989:0x00241c10:	ncall	GetVelocity([0xd3179198])
002989:0x00241c20:	movev	m_TransportHitVelocity, #return
002995:0x00241c30:	movefm	@c00, transport
002995:0x00241c40:	icall	CastTo(car, @c00)
002995:0x00241c50:	cmpi	#return, _i0
002995:0x00241c60:	beq	0x241dd0
002997:0x00241c68:	call	
002997:0x00241c78:	move	@f00, #return
002997:0x00241c88:	cmpf	@f00, _f2.000000
002997:0x00241c98:	ble	0x241d10
002999:0x00241ca0:	movev	[0xd315e360], m_TransportHitVelocity
002999:0x00241cb0:	ncall	Length([0xd315e360])
002999:0x00241cc0:	move	damage, #return
003000:0x00241cd0:	movefm	[0xb5b6a088], transport
003000:0x00241ce0:	ncalli	EntityAI.ProcessDirectDamage(DT_CUSTOM, [0xb5b6a088], _s'', _s'TransportHit', _v<0.000000,0.000000,0.000000>, damage, _i0)
003000:0x00241d08:	jump	0x241d20
003004:0x00241d10:	imove	m_TransportHitRegistered, 0x000000
003008:0x00241d20:	ncalli	EntityAI.IsDamageDestroyed()
003008:0x00241d28:	cmpi	#return, _i0
003008:0x00241d38:	beq	0x241dc8
003008:0x00241d40:	call	
003008:0x00241d50:	move	@f00, #return
003008:0x00241d60:	cmpf	@f00, _f3.000000
003008:0x00241d70:	ble	0x241dc8
003010:0x00241d78:	scalev	@v00, m_TransportHitVelocity, _f40.000000
003010:0x00241d88:	movev	impulse, @v00
003011:0x00241d98:	imove	@f00, 60.00000
003011:0x00241da8:	itv	impulse[0x000001], @f00
003012:0x00241db8:	icall	dBodyApplyImpulse(this, impulse)
003012:0x00241dc8:	jump	0x241f50
003018:0x00241dd0:	movev	[0xd315e360], m_TransportHitVelocity
003018:0x00241de0:	ncall	Length([0xd315e360])
003018:0x00241df0:	move	@f00, #return
003018:0x00241e00:	cmpf	@f00, _f0.100000
003018:0x00241e10:	ble	0x241e88
003020:0x00241e18:	movev	[0xd315e360], m_TransportHitVelocity
003020:0x00241e28:	ncall	Length([0xd315e360])
003020:0x00241e38:	move	damage, #return
003021:0x00241e48:	movefm	[0xb5b6a088], transport
003021:0x00241e58:	ncalli	EntityAI.ProcessDirectDamage(DT_CUSTOM, [0xb5b6a088], _s'', _s'TransportHit', _v<0.000000,0.000000,0.000000>, damage, _i0)
003021:0x00241e80:	jump	0x241e98
003025:0x00241e88:	imove	m_TransportHitRegistered, 0x000000
003029:0x00241e98:	ncalli	EntityAI.IsDamageDestroyed()
003029:0x00241ea0:	cmpi	#return, _i0
003029:0x00241eb0:	beq	0x241f50
003029:0x00241eb8:	movev	[0xd315e360], m_TransportHitVelocity
003029:0x00241ec8:	ncall	Length([0xd315e360])
003029:0x00241ed8:	move	@f00, #return
003029:0x00241ee8:	cmpf	@f00, _f0.300000
003029:0x00241ef8:	ble	0x241f50
003031:0x00241f00:	scalev	@v00, m_TransportHitVelocity, _f40.000000
003031:0x00241f10:	movev	impulse, @v00
003032:0x00241f20:	imove	@f00, 60.00000
003032:0x00241f30:	itv	impulse[0x000001], @f00
003033:0x00241f40:	icall	dBodyApplyImpulse(this, impulse)
003033:0x00241f50:	release	car
003033:0x00241f58:	rts
EntityAI::GetInventoryHandAnimation()
003041:0x00241f60:	imove	value, 0xffffffff
003042:0x00241f70:	imove	#return, 0x000000
003042:0x00241f80:	move	value, value
003042:0x00241f90:	rts
003042:0x00241f98:	move	value, value
003042:0x00241fa8:	rts
EntityAI::TranslateSlotFromSelection()
003047:0x00241fb0:	imove	#return, 0x000000
003047:0x00241fc0:	move	slot_id, slot_id
003047:0x00241fd0:	rts
003047:0x00241fd8:	move	slot_id, slot_id
003047:0x00241fe8:	rts
EntityAI::IsUniversalTemperatureSource()
003053:0x00241ff0:	call	
003053:0x00242000:	movefm	@c00, #return
003053:0x00242010:	cmpc	@c00, null
003053:0x00242020:	beq	0x242078
003053:0x00242028:	call	
003053:0x00242038:	call	
003053:0x00242048:	cmpi	#return, _i0
003053:0x00242058:	beq	0x242078
003053:0x00242060:	imove	#return, 0x000001
003053:0x00242070:	jump	0x242088
003053:0x00242078:	imove	#return, 0x000000
003053:0x00242088:	release	#return
003053:0x00242090:	release	#return
003053:0x00242098:	rts
003053:0x002420a0:	rts
EntityAI::GetUniversalTemperatureSource()
003058:0x002420a8:	movem	#return, m_UniversalTemperatureSource
003058:0x002420b8:	rts
003058:0x002420c0:	rts
EntityAI::SetUniversalTemperatureSource()
003063:0x002420c8:	movem	m_UniversalTemperatureSource, uts
003063:0x002420d8:	rts
EntityAI::GetUniversalTemperatureSourcePosition()
003068:0x002420e0:	ncalli	EntityAI.GetPosition()
003068:0x002420e8:	movev	#return, #return
003068:0x002420f8:	rts
003068:0x00242100:	rts
EntityAI::SetPersistentPairID()
003082:0x00242158:	call	
003082:0x00242168:	movem	raib, #return
003082:0x00242178:	release	#return
003083:0x00242180:	cmpcm	raib, null
003083:0x00242190:	beq	0x2421a8
003085:0x00242198:	call	
003085:0x002421a8:	release	raib
003085:0x002421b0:	rts
EntityAI::InitAttachmentExclusionValues()
003100:0x002421e0:	new	m_AttachmentExclusionSlotMap, map<int,@set<int>>
003101:0x00242200:	new	m_AttachmentExclusionMaskGlobal, set<int>
003102:0x00242220:	new	m_AttachmentExclusionMaskChildren, set<int>
003104:0x00242240:	ncalli	EntityAI.GetInventory()
003104:0x00242248:	ncalli	GameInventory.GetSlotIdCount()
003104:0x00242250:	move	count, #return
003106:0x00242260:	cmpi	count, _i0
003106:0x00242270:	bne	0x242280
003107:0x00242278:	rts
003109:0x00242280:	call	
003110:0x00242290:	call	
003111:0x002422a0:	call	
003111:0x002422b0:	rts
EntityAI::InitInherentSlotExclusionMap()
003117:0x00242330:	ncalli	EntityAI.GetInventory()
003117:0x00242338:	ncalli	GameInventory.GetSlotIdCount()
003117:0x00242340:	move	count, #return
003119:0x00242350:	call	
003119:0x00242360:	call	
003119:0x00242378:	release	#return
003122:0x00242380:	imove	i, 0x000000
003122:0x00242390:	jump	0x2423b0
003122:0x00242398:	move	@m00, i
003122:0x002423a8:	inc	i
003122:0x002423b0:	cmpi	i, count
003122:0x002423c0:	bge	0x242428
003124:0x002423c8:	ncalli	EntityAI.GetInventory()
003124:0x002423d0:	ncalli	GameInventory.GetSlotId(i)
003124:0x002423e0:	move	slotId, #return
003125:0x002423f0:	call	
003125:0x00242400:	call	
003125:0x00242418:	release	#return
003125:0x00242420:	jump	0x242398
003125:0x00242428:	rts
EntityAI::GetAttachmentExclusionInitSlotValue()
003132:0x00242480:	new	dflt, set<int>
003133:0x002424a0:	movem	#return, dflt
003133:0x002424b0:	release	dflt
003133:0x002424b8:	rts
003133:0x002424c0:	release	dflt
003133:0x002424c8:	rts
EntityAI::InitLegacyConfigExclusionValues()
003139:0x00242530:	call	
003139:0x00242540:	move	performLegacyInit, #return
003142:0x00242550:	call	
003144:0x00242560:	cmpi	performLegacyInit, _i0
003144:0x00242570:	beq	0x242588
003145:0x00242578:	call	
003145:0x00242588:	rts
EntityAI::InitLegacyExclusionCheck()
003152:0x00242638:	movefm	[0xd31566c8], m_AttachmentExclusionMaskGlobal
003152:0x00242648:	ncalli	set<int>.Count()
003152:0x00242650:	move	@m00, #return
003152:0x00242660:	cmpi	@m00, _i0
003152:0x00242670:	ble	0x242690
003153:0x00242678:	imove	#return, 0x000000
003153:0x00242688:	rts
003156:0x00242690:	movefm	[0xb5b72378], m_AttachmentExclusionSlotMap
003156:0x002426a0:	ncalli	map<int,@set<int>>.Count()
003156:0x002426a8:	move	count, #return
003157:0x002426b8:	cmpi	count, _i1
003157:0x002426c8:	ble	0x242788
003159:0x002426d0:	imove	i, 0x000000
003159:0x002426e0:	jump	0x242700
003159:0x002426e8:	move	@m00, i
003159:0x002426f8:	inc	i
003159:0x00242700:	cmpi	i, count
003159:0x00242710:	bge	0x242788
003161:0x00242718:	movefm	[0xb5b72378], m_AttachmentExclusionSlotMap
003161:0x00242728:	icall	
003161:0x00242738:	ncalli	set<int>.Count()
003161:0x00242740:	move	countSet, #return
003162:0x00242750:	cmpi	countSet, _i0
003162:0x00242760:	ble	0x242780
003164:0x00242768:	imove	#return, 0x000000
003164:0x00242778:	rts
003164:0x00242780:	jump	0x2426e8
003169:0x00242788:	imove	#return, 0x000001
003169:0x00242798:	rts
003169:0x002427a0:	rts
EntityAI::InitLegacySlotExclusionValuesImplicit()
003180:0x002428c8:	ncalli	EntityAI.GetInventory()
003180:0x002428d0:	ncalli	GameInventory.GetSlotIdCount()
003180:0x002428d8:	move	slotCount, #return
003181:0x002428e8:	imove	i, 0x000000
003181:0x002428f8:	jump	0x242918
003181:0x00242900:	move	@m00, i
003181:0x00242910:	inc	i
003181:0x00242918:	cmpi	i, slotCount
003181:0x00242928:	bge	0x242c38
003183:0x00242930:	ncalli	EntityAI.GetInventory()
003183:0x00242938:	ncalli	GameInventory.GetSlotId(i)
003183:0x00242948:	move	slotId, #return
003185:0x00242958:	move	#switch, slotId
003185:0x00242968:	imove	@m00, 0xa9de2bed
003185:0x00242978:	cmpi	@m00, #switch
003185:0x00242988:	bne	0x242a40
003189:0x00242990:	new	tmp, set<int>
003190:0x002429b0:	call	
003190:0x002429c0:	movefm	@c00, #return
003190:0x002429d0:	icall	
003190:0x002429e0:	release	#return
003191:0x002429e8:	icall	
003192:0x002429f8:	icall	
003193:0x00242a08:	icall	
003194:0x00242a18:	call	
003195:0x00242a30:	jump	0x242c28
003195:0x00242a38:	jump	0x242a68
003195:0x00242a40:	imove	@m00, 0x5656dc
003195:0x00242a50:	cmpi	@m00, #switch
003195:0x00242a60:	bne	0x242b18
003200:0x00242a68:	new	tmp, set<int>
003201:0x00242a88:	call	
003201:0x00242a98:	movefm	@c00, #return
003201:0x00242aa8:	icall	
003201:0x00242ab8:	release	#return
003202:0x00242ac0:	icall	
003203:0x00242ad0:	icall	
003204:0x00242ae0:	icall	
003205:0x00242af0:	call	
003206:0x00242b08:	jump	0x242c28
003206:0x00242b10:	jump	0x242b40
003206:0x00242b18:	imove	@m00, 0x559ed95e
003206:0x00242b28:	cmpi	@m00, #switch
003206:0x00242b38:	bne	0x242c28
003211:0x00242b40:	new	tmp, set<int>
003212:0x00242b60:	call	
003212:0x00242b70:	movefm	@c00, #return
003212:0x00242b80:	icall	
003212:0x00242b90:	release	#return
003213:0x00242b98:	call	
003213:0x00242ba8:	cmpi	#return, _i0
003213:0x00242bb8:	beq	0x242be8
003215:0x00242bc0:	icall	
003216:0x00242bd0:	icall	
003216:0x00242be0:	jump	0x242c08
003220:0x00242be8:	icall	
003221:0x00242bf8:	icall	
003223:0x00242c08:	call	
003224:0x00242c20:	jump	0x242c28
003224:0x00242c28:	release	tmp
003224:0x00242c30:	jump	0x242900
003224:0x00242c38:	rts
EntityAI::InitLegacySlotExclusionValuesDerived()
003233:0x00242da8:	ncalli	EntityAI.GetInventory()
003233:0x00242db0:	ncalli	GameInventory.GetSlotIdCount()
003233:0x00242db8:	move	slotCount, #return
003234:0x00242dc8:	imove	i, 0x000000
003234:0x00242dd8:	jump	0x242df8
003234:0x00242de0:	move	@m00, i
003234:0x00242df0:	inc	i
003234:0x00242df8:	cmpi	i, slotCount
003234:0x00242e08:	bge	0x2432a8
003236:0x00242e10:	ncalli	EntityAI.GetInventory()
003236:0x00242e18:	ncalli	GameInventory.GetSlotId(i)
003236:0x00242e28:	move	slotId, #return
003238:0x00242e38:	move	#switch, slotId
003238:0x00242e48:	imove	@m00, 0xa9de2bed
003238:0x00242e58:	cmpi	@m00, #switch
003238:0x00242e68:	bne	0x242f98
003242:0x00242e70:	new	tmp, set<int>
003243:0x00242e90:	call	
003243:0x00242ea0:	movefm	@c00, #return
003243:0x00242eb0:	icall	
003243:0x00242ec0:	release	#return
003244:0x00242ec8:	call	
003244:0x00242ed8:	cmpi	#return, _i0
003244:0x00242ee8:	beq	0x242f00
003246:0x00242ef0:	icall	
003248:0x00242f00:	call	
003248:0x00242f10:	cmpi	#return, _i0
003248:0x00242f20:	beq	0x242f38
003250:0x00242f28:	icall	
003252:0x00242f38:	call	
003252:0x00242f48:	cmpi	#return, _i0
003252:0x00242f58:	beq	0x242f70
003254:0x00242f60:	icall	
003256:0x00242f70:	call	
003257:0x00242f88:	jump	0x243298
003257:0x00242f90:	jump	0x242fc0
003257:0x00242f98:	imove	@m00, 0x5656dc
003257:0x00242fa8:	cmpi	@m00, #switch
003257:0x00242fb8:	bne	0x2430e8
003262:0x00242fc0:	new	tmp, set<int>
003263:0x00242fe0:	call	
003263:0x00242ff0:	movefm	@c00, #return
003263:0x00243000:	icall	
003263:0x00243010:	release	#return
003264:0x00243018:	call	
003264:0x00243028:	cmpi	#return, _i0
003264:0x00243038:	beq	0x243050
003266:0x00243040:	icall	
003268:0x00243050:	call	
003268:0x00243060:	cmpi	#return, _i0
003268:0x00243070:	beq	0x243088
003270:0x00243078:	icall	
003272:0x00243088:	call	
003272:0x00243098:	cmpi	#return, _i0
003272:0x002430a8:	beq	0x2430c0
003274:0x002430b0:	icall	
003276:0x002430c0:	call	
003277:0x002430d8:	jump	0x243298
003277:0x002430e0:	jump	0x243110
003277:0x002430e8:	imove	@m00, 0x559ed95e
003277:0x002430f8:	cmpi	@m00, #switch
003277:0x00243108:	bne	0x243298
003282:0x00243110:	new	tmp, set<int>
003283:0x00243130:	call	
003283:0x00243140:	movefm	@c00, #return
003283:0x00243150:	icall	
003283:0x00243160:	release	#return
003284:0x00243168:	call	
003284:0x00243178:	cmpi	#return, _i0
003284:0x00243188:	beq	0x243208
003286:0x00243190:	call	
003286:0x002431a0:	cmpi	#return, _i0
003286:0x002431b0:	beq	0x2431c8
003288:0x002431b8:	icall	
003290:0x002431c8:	call	
003290:0x002431d8:	cmpi	#return, _i0
003290:0x002431e8:	beq	0x243200
003292:0x002431f0:	icall	
003292:0x00243200:	jump	0x243278
003297:0x00243208:	call	
003297:0x00243218:	cmpi	#return, _i0
003297:0x00243228:	beq	0x243240
003299:0x00243230:	icall	
003301:0x00243240:	call	
003301:0x00243250:	cmpi	#return, _i0
003301:0x00243260:	beq	0x243278
003303:0x00243268:	icall	
003306:0x00243278:	call	
003307:0x00243290:	jump	0x243298
003307:0x00243298:	release	tmp
003307:0x002432a0:	jump	0x242de0
003307:0x002432a8:	rts
EntityAI::AddSingleExclusionValueGlobal()
003319:0x002432b0:	movefm	[0xd31566c8], m_AttachmentExclusionMaskGlobal
003319:0x002432c0:	icall	
003319:0x002432d0:	move	@m00, #return
003319:0x002432e0:	cmpi	@m00, _i-1
003319:0x002432f0:	bne	0x243318
003320:0x002432f8:	movefm	[0xd31566c8], m_AttachmentExclusionMaskGlobal
003320:0x00243308:	icall	
003320:0x00243318:	rts
EntityAI::ClearSingleExclusionValueGlobal()
003326:0x00243348:	movefm	[0xd31566c8], m_AttachmentExclusionMaskGlobal
003326:0x00243358:	icall	
003326:0x00243368:	move	idx, #return
003327:0x00243378:	cmpi	idx, _i-1
003327:0x00243388:	beq	0x2433b0
003328:0x00243390:	movefm	[0xd31566c8], m_AttachmentExclusionMaskGlobal
003328:0x002433a0:	ncalli	set<int>.Remove(idx)
003328:0x002433b0:	rts
EntityAI::SetAttachmentExclusionMaskGlobal()
003333:0x002433b8:	movefm	[0xd31566c8], m_AttachmentExclusionMaskGlobal
003333:0x002433c8:	ncalli	set<int>.Clear()
003334:0x002433d0:	movefm	@c00, values
003334:0x002433e0:	movefm	[0xd31566c8], m_AttachmentExclusionMaskGlobal
003334:0x002433f0:	icall	
003334:0x00243400:	rts
EntityAI::SetAttachmentExclusionMaskSlot()
003340:0x00243458:	cmpcm	m_AttachmentExclusionSlotMap, null
003340:0x00243468:	beq	0x2434a8
003342:0x00243470:	movefm	@c00, values
003342:0x00243480:	movefm	[0xb5b72378], m_AttachmentExclusionSlotMap
003342:0x00243490:	icall	
003342:0x002434a0:	jump	0x243508
003345:0x002434a8:	icall	ToString(this)
003345:0x002434b8:	adds	@s02, _s'm_AttachmentExclusionSlotMap not available! Fill the 'inventorySlot[]' in the ', #return
003345:0x002434c8:	moves	@s01, @s02
003345:0x002434d8:	adds	@s01, @s01, _s' config file.'
003345:0x002434e8:	moves	@s00, @s01
003345:0x002434f8:	icall	ErrorEx(@s00, _i2)
003345:0x00243508:	rts
EntityAI::PropagateExclusionValueRecursive()
003350:0x002435e0:	cmpcm	values, null
003350:0x002435f0:	beq	0x243750
003350:0x002435f8:	ncalli	set<int>.Count()
003350:0x00243600:	move	@m00, #return
003350:0x00243610:	cmpi	@m00, _i0
003350:0x00243620:	beq	0x243750
003353:0x00243628:	new	lcn, InventoryLocation
003354:0x00243648:	ncalli	EntityAI.GetInventory()
003354:0x00243650:	movefm	[0xb5bad1f8], lcn
003354:0x00243660:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
003355:0x00243670:	ncalli	InventoryLocation.GetSlot()
003355:0x00243678:	call	
003355:0x00243698:	movem	passThis, adjustedValue
003355:0x002436a8:	release	adjustedValue
003355:0x002436b0:	cmpi	#return, _i0
003355:0x002436c0:	beq	0x243740
003357:0x002436c8:	movefm	[0xd31566c8], m_AttachmentExclusionMaskChildren
003357:0x002436d8:	call	
003358:0x002436e8:	ncalli	EntityAI.GetHierarchyParent()
003358:0x002436f0:	movetm	parent, #return
003359:0x00243700:	cmpcm	parent, null
003359:0x00243710:	beq	0x243738
003360:0x00243718:	ncalli	InventoryLocation.GetSlot()
003360:0x00243720:	call	
003360:0x00243738:	release	parent
003360:0x00243740:	release	passThis
003360:0x00243748:	release	lcn
003360:0x00243750:	rts
EntityAI::ClearExclusionValueRecursive()
003367:0x00243820:	cmpcm	values, null
003367:0x00243830:	beq	0x243a08
003367:0x00243838:	ncalli	set<int>.Count()
003367:0x00243840:	move	@m00, #return
003367:0x00243850:	cmpi	@m00, _i0
003367:0x00243860:	beq	0x243a08
003370:0x00243868:	new	lcn, InventoryLocation
003371:0x00243888:	ncalli	EntityAI.GetInventory()
003371:0x00243890:	movefm	[0xb5bad1f8], lcn
003371:0x002438a0:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
003372:0x002438b0:	ncalli	InventoryLocation.GetSlot()
003372:0x002438b8:	call	
003372:0x002438d8:	movem	passThis, adjustedValue
003372:0x002438e8:	release	adjustedValue
003372:0x002438f0:	cmpi	#return, _i0
003372:0x00243900:	beq	0x2439f8
003374:0x00243908:	ncalli	set<int>.Count()
003374:0x00243910:	move	count, #return
003375:0x00243920:	imove	i, 0x000000
003375:0x00243930:	jump	0x243950
003375:0x00243938:	move	@m00, i
003375:0x00243948:	inc	i
003375:0x00243950:	cmpi	i, count
003375:0x00243960:	bge	0x2439a0
003377:0x00243968:	icall	
003377:0x00243978:	movefm	[0xd31566c8], m_AttachmentExclusionMaskChildren
003377:0x00243988:	call	
003377:0x00243998:	jump	0x243938
003379:0x002439a0:	ncalli	EntityAI.GetHierarchyParent()
003379:0x002439a8:	movetm	parent, #return
003380:0x002439b8:	cmpcm	parent, null
003380:0x002439c8:	beq	0x2439f0
003381:0x002439d0:	ncalli	InventoryLocation.GetSlot()
003381:0x002439d8:	call	
003381:0x002439f0:	release	parent
003381:0x002439f8:	release	passThis
003381:0x00243a00:	release	lcn
003381:0x00243a08:	rts
EntityAI::GetAttachmentExclusionMaskAll()
003389:0x00243a90:	new	values, set<int>
003390:0x00243ab0:	call	
003390:0x00243ac0:	movem	slotValues, #return
003390:0x00243ad0:	release	#return
003391:0x00243ad8:	cmpcm	slotValues, null
003391:0x00243ae8:	beq	0x243b00
003392:0x00243af0:	call	
003393:0x00243b00:	movem	other, m_AttachmentExclusionMaskGlobal
003393:0x00243b10:	call	
003394:0x00243b20:	movem	other, m_AttachmentExclusionMaskChildren
003394:0x00243b30:	call	
003396:0x00243b40:	movem	#return, values
003396:0x00243b50:	release	values
003396:0x00243b58:	release	slotValues
003396:0x00243b60:	rts
003396:0x00243b68:	release	values
003396:0x00243b70:	release	slotValues
003396:0x00243b78:	rts
EntityAI::GetAttachmentExclusionMaskSlot()
003402:0x00243b80:	movefm	[0xb5b72378], m_AttachmentExclusionSlotMap
003402:0x00243b90:	icall	
003402:0x00243ba0:	movetm	#return, #return
003402:0x00243bb0:	rts
003402:0x00243bb8:	rts
EntityAI::GetAttachmentExclusionMaskGlobal()
003408:0x00243bc0:	movem	#return, m_AttachmentExclusionMaskGlobal
003408:0x00243bd0:	rts
003408:0x00243bd8:	rts
EntityAI::GetAttachmentExclusionMaskChildren()
003414:0x00243be0:	movem	#return, m_AttachmentExclusionMaskChildren
003414:0x00243bf0:	rts
003414:0x00243bf8:	rts
EntityAI::HasInternalExclusionConflicts()
003420:0x00243d40:	call	
003420:0x00243d50:	movem	targetSlotValues, #return
003420:0x00243d60:	release	#return
003421:0x00243d68:	cmpcm	targetSlotValues, null
003421:0x00243d78:	beq	0x243ed0
003423:0x00243d80:	new	additionalValues, set<int>
003424:0x00243da0:	call	
003424:0x00243db0:	call	
003424:0x00243dc0:	release	#return
003425:0x00243dc8:	call	
003425:0x00243dd8:	call	
003425:0x00243de8:	release	#return
003427:0x00243df0:	ncalli	set<int>.Count()
003427:0x00243df8:	move	countTarget, #return
003428:0x00243e08:	imove	i, 0x000000
003428:0x00243e18:	jump	0x243e38
003428:0x00243e20:	move	@m00, i
003428:0x00243e30:	inc	i
003428:0x00243e38:	cmpi	i, countTarget
003428:0x00243e48:	bge	0x243ec8
003430:0x00243e50:	icall	
003430:0x00243e60:	icall	
003430:0x00243e70:	move	@m00, #return
003430:0x00243e80:	cmpi	@m00, _i-1
003430:0x00243e90:	beq	0x243ec0
003432:0x00243e98:	imove	#return, 0x000001
003432:0x00243ea8:	release	additionalValues
003432:0x00243eb0:	release	targetSlotValues
003432:0x00243eb8:	rts
003432:0x00243ec0:	jump	0x243e20
003432:0x00243ec8:	release	additionalValues
003436:0x00243ed0:	imove	#return, 0x000000
003436:0x00243ee0:	release	targetSlotValues
003436:0x00243ee8:	rts
003436:0x00243ef0:	release	targetSlotValues
003436:0x00243ef8:	rts
EntityAI::IsExclusionFlagPresent()
003444:0x00244000:	ncalli	EntityAI.GetInventory()
003444:0x00244008:	call	
003444:0x00244020:	move	slotId, slot_id
003444:0x00244030:	moves	slotName, slot_name
003446:0x00244040:	call	
003446:0x00244050:	movem	currentSlotValuesAll, #return
003446:0x00244060:	release	#return
003447:0x00244068:	ncalli	set<int>.Count()
003447:0x00244070:	move	count, #return
003448:0x00244080:	imove	i, 0x000000
003448:0x00244090:	jump	0x2440b0
003448:0x00244098:	move	@m00, i
003448:0x002440a8:	inc	i
003448:0x002440b0:	cmpi	i, count
003448:0x002440c0:	bge	0x244138
003450:0x002440c8:	icall	
003450:0x002440d8:	icall	
003450:0x002440e8:	move	@m00, #return
003450:0x002440f8:	cmpi	@m00, _i-1
003450:0x00244108:	beq	0x244130
003451:0x00244110:	imove	#return, 0x000001
003451:0x00244120:	release	currentSlotValuesAll
003451:0x00244128:	rts
003451:0x00244130:	jump	0x244098
003453:0x00244138:	imove	#return, 0x000000
003453:0x00244148:	release	currentSlotValuesAll
003453:0x00244150:	rts
003453:0x00244158:	release	currentSlotValuesAll
003453:0x00244160:	rts
EntityAI::IsExclusionFlagPresentRecursive()
003459:0x002441e0:	cmpcm	values, null
003459:0x002441f0:	beq	0x2443b8
003459:0x002441f8:	ncalli	set<int>.Count()
003459:0x00244200:	move	@m00, #return
003459:0x00244210:	cmpi	@m00, _i0
003459:0x00244220:	beq	0x2443b8
003461:0x00244228:	new	lcn, InventoryLocation
003462:0x00244248:	ncalli	EntityAI.GetInventory()
003462:0x00244250:	movefm	[0xb5bad1f8], lcn
003462:0x00244260:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
003463:0x00244270:	ncalli	EntityAI.GetHierarchyParent()
003463:0x00244278:	movetm	parent, #return
003465:0x00244288:	ncalli	InventoryLocation.GetSlot()
003465:0x00244290:	call	
003465:0x002442b0:	movem	passThis, adjustedValue
003465:0x002442c0:	release	adjustedValue
003465:0x002442c8:	cmpi	#return, _i0
003465:0x002442d8:	beq	0x244360
003467:0x002442e0:	cmpcm	parent, null
003467:0x002442f0:	beq	0x244360
003467:0x002442f8:	cmpcm	parent, this
003467:0x00244308:	beq	0x244360
003469:0x00244310:	ncalli	InventoryLocation.GetSlot()
003469:0x00244318:	call	
003469:0x00244330:	move	#return, #return
003469:0x00244340:	release	lcn
003469:0x00244348:	release	parent
003469:0x00244350:	release	passThis
003469:0x00244358:	rts
003472:0x00244360:	call	
003472:0x00244370:	move	#return, #return
003472:0x00244380:	release	lcn
003472:0x00244388:	release	parent
003472:0x00244390:	release	passThis
003472:0x00244398:	rts
003472:0x002443a0:	release	lcn
003472:0x002443a8:	release	parent
003472:0x002443b0:	release	passThis
003475:0x002443b8:	imove	#return, 0x000000
003475:0x002443c8:	rts
003475:0x002443d0:	rts
EntityAI::CheckExclusionAccessCondition()
003481:0x00244490:	cmpi	occupiedSlot, HANDS
003481:0x002444a0:	beq	0x2444f0
003481:0x002444a8:	cmpi	occupiedSlot, SHOULDER
003481:0x002444b8:	beq	0x2444f0
003481:0x002444c0:	cmpi	occupiedSlot, MELEE
003481:0x002444d0:	beq	0x2444f0
003481:0x002444d8:	cmpi	occupiedSlot, LEFTHAND
003481:0x002444e8:	bne	0x244508
003481:0x002444f0:	imove	occupiedException, 0x000001
003481:0x00244500:	jump	0x244518
003481:0x00244508:	imove	occupiedException, 0x000000
003482:0x00244518:	cmpi	targetSlot, HANDS
003482:0x00244528:	beq	0x244578
003482:0x00244530:	cmpi	targetSlot, SHOULDER
003482:0x00244540:	beq	0x244578
003482:0x00244548:	cmpi	targetSlot, MELEE
003482:0x00244558:	beq	0x244578
003482:0x00244560:	cmpi	targetSlot, LEFTHAND
003482:0x00244570:	bne	0x244590
003482:0x00244578:	imove	targetException, 0x000001
003482:0x00244588:	jump	0x2445a0
003482:0x00244590:	imove	targetException, 0x000000
003484:0x002445a0:	cmpi	occupiedException, _i0
003484:0x002445b0:	beq	0x2445f0
003486:0x002445b8:	movem	adjustedValue, value
003487:0x002445c8:	imove	#return, 0x000000
003487:0x002445d8:	movem	adjustedValue, adjustedValue
003487:0x002445e8:	rts
003490:0x002445f0:	cmpi	targetException, _i0
003490:0x00244600:	beq	0x244640
003492:0x00244608:	movetm	adjustedValue, null
003493:0x00244618:	imove	#return, 0x000000
003493:0x00244628:	movem	adjustedValue, adjustedValue
003493:0x00244638:	rts
003496:0x00244640:	call	
003496:0x00244660:	movem	adjustedValue, adjustedValue
003496:0x00244670:	release	adjustedValue
003497:0x00244678:	ncalli	set<int>.Count()
003497:0x00244680:	move	@m00, #return
003497:0x00244690:	cmpi	@m00, _i0
003497:0x002446a0:	beq	0x2446c0
003497:0x002446a8:	imove	#return, 0x000001
003497:0x002446b8:	jump	0x2446d0
003497:0x002446c0:	imove	#return, 0x000000
003497:0x002446d0:	movem	adjustedValue, adjustedValue
003497:0x002446e0:	rts
003497:0x002446e8:	movem	adjustedValue, adjustedValue
003497:0x002446f8:	rts
EntityAI::AdjustExclusionAccessCondition()
003503:0x00244700:	movem	adjustedValue, value
003503:0x00244710:	movem	adjustedValue, adjustedValue
003503:0x00244720:	rts
EntityAI::CheckExclusionAccessPropagation()
003509:0x00244778:	cmpi	occupiedSlot, HANDS
003509:0x00244788:	beq	0x2447d8
003509:0x00244790:	cmpi	occupiedSlot, SHOULDER
003509:0x002447a0:	beq	0x2447d8
003509:0x002447a8:	cmpi	occupiedSlot, MELEE
003509:0x002447b8:	beq	0x2447d8
003509:0x002447c0:	cmpi	occupiedSlot, LEFTHAND
003509:0x002447d0:	bne	0x2447f0
003509:0x002447d8:	imove	occupiedException, 0x000001
003509:0x002447e8:	jump	0x244800
003509:0x002447f0:	imove	occupiedException, 0x000000
003510:0x00244800:	cmpi	targetSlot, HANDS
003510:0x00244810:	beq	0x244860
003510:0x00244818:	cmpi	targetSlot, SHOULDER
003510:0x00244828:	beq	0x244860
003510:0x00244830:	cmpi	targetSlot, MELEE
003510:0x00244840:	beq	0x244860
003510:0x00244848:	cmpi	targetSlot, LEFTHAND
003510:0x00244858:	bne	0x244878
003510:0x00244860:	imove	targetException, 0x000001
003510:0x00244870:	jump	0x244888
003510:0x00244878:	imove	targetException, 0x000000
003512:0x00244888:	cmpi	targetException, _i0
003512:0x00244898:	beq	0x2448d8
003514:0x002448a0:	movetm	adjustedValue, null
003515:0x002448b0:	imove	#return, 0x000000
003515:0x002448c0:	movem	adjustedValue, adjustedValue
003515:0x002448d0:	rts
003518:0x002448d8:	call	
003518:0x002448f8:	movem	adjustedValue, adjustedValue
003518:0x00244908:	release	adjustedValue
003519:0x00244910:	ncalli	set<int>.Count()
003519:0x00244918:	move	@m00, #return
003519:0x00244928:	cmpi	@m00, _i0
003519:0x00244938:	beq	0x244958
003519:0x00244940:	imove	#return, 0x000001
003519:0x00244950:	jump	0x244968
003519:0x00244958:	imove	#return, 0x000000
003519:0x00244968:	movem	adjustedValue, adjustedValue
003519:0x00244978:	rts
003519:0x00244980:	movem	adjustedValue, adjustedValue
003519:0x00244990:	rts
EntityAI::AdjustExclusionAccessPropagation()
003525:0x00244998:	call	
003525:0x002449b8:	movem	adjustedValue, adjustedValue
003525:0x002449c8:	release	adjustedValue
003525:0x002449d0:	movem	adjustedValue, adjustedValue
003525:0x002449e0:	rts
EntityAI::IsManagingArrows()
003530:0x002449e8:	imove	#return, 0x000000
003530:0x002449f8:	rts
003530:0x00244a00:	rts
EntityAI::GetArrowManager()
003535:0x00244a08:	movetm	#return, null
003535:0x00244a18:	rts
003535:0x00244a20:	rts
HandActionCreated::Action()
//scripts/3_Game/systems\inventory\hand_actions.c
000026:0x00244a28:	movefm	@c00, e
000026:0x00244a38:	movefm	[0xb5b2afc0], m_Player
000026:0x00244a48:	call	
000026:0x00244a58:	rts
HandActionTake::Action()
000041:0x00244a60:	call	
000041:0x00244a70:	movefm	[0xb5badea8], #return
000041:0x00244a80:	call	
000041:0x00244a90:	movefm	[0xb5baded0], #return
000041:0x00244aa0:	ncall	LocationSyncMoveEntity([0xb5badea8], [0xb5baded0])
000041:0x00244ab0:	release	#return
000041:0x00244ab8:	release	#return
000042:0x00244ac0:	movefm	@c00, e
000042:0x00244ad0:	movefm	[0xb5b2afc0], m_Player
000042:0x00244ae0:	call	
000042:0x00244af0:	rts
HandActionDrop::Action()
000057:0x00244af8:	call	
000057:0x00244b08:	movefm	[0xb5badea8], #return
000057:0x00244b18:	call	
000057:0x00244b28:	movefm	[0xb5baded0], #return
000057:0x00244b38:	ncall	LocationSyncMoveEntity([0xb5badea8], [0xb5baded0])
000057:0x00244b48:	release	#return
000057:0x00244b50:	release	#return
000058:0x00244b58:	movefm	@c00, e
000058:0x00244b68:	movefm	[0xb5b2afc0], m_Player
000058:0x00244b78:	call	
000058:0x00244b88:	rts
HandActionThrow::Action()
000072:0x00244c60:	movefm	@c02, e
000072:0x00244c70:	icall	SafeCastType([0xb5b37858], @c01, @c02)
000072:0x00244c88:	movetm	throwEvent, @c01
000074:0x00244c98:	call	
000074:0x00244ca8:	movefm	[0xb5badea8], #return
000074:0x00244cb8:	call	
000074:0x00244cc8:	movefm	[0xb5baded0], #return
000074:0x00244cd8:	ncall	LocationSyncMoveEntity([0xb5badea8], [0xb5baded0])
000074:0x00244ce8:	release	#return
000074:0x00244cf0:	release	#return
000076:0x00244cf8:	movefm	@c03, e
000076:0x00244d08:	movefm	@c02, m_Player
000076:0x00244d18:	icall	SafeCastType([0xb5b2afc0], @c01, @c02)
000076:0x00244d30:	movetm	player, @c01
000077:0x00244d40:	ncalli	DayZPlayer.GetInstanceType()
000077:0x00244d48:	move	@m00, #return
000077:0x00244d58:	cmpi	@m00, _i2
000077:0x00244d68:	beq	0x244e30
000079:0x00244d70:	call	
000079:0x00244d80:	movefm	@c02, #return
000079:0x00244d90:	icall	SafeCastType([0xb5b279f0], @c01, @c02)
000079:0x00244da8:	movetm	item, @c01
000079:0x00244db8:	release	#return
000080:0x00244dc0:	cmpcm	item, null
000080:0x00244dd0:	beq	0x244e18
000081:0x00244dd8:	movefm	[0xb5b86988], player
000081:0x00244de8:	call	
000081:0x00244df8:	ncalli	InventoryItem.ThrowPhysically([0xb5b86988], #return, _i1)
000081:0x00244e10:	jump	0x244e28
000083:0x00244e18:	call	Error(_s'[hndfsm] HandActionThrow - src entity null!')
000083:0x00244e28:	release	item
000086:0x00244e30:	call	
000086:0x00244e40:	release	throwEvent
000086:0x00244e48:	release	player
000086:0x00244e50:	rts
HandActionMoveTo::Action()
000101:0x00244ea8:	movefm	@c02, e
000101:0x00244eb8:	icall	SafeCastType([0xb5b3a1a0], @c01, @c02)
000101:0x00244ed0:	movetm	es, @c01
000102:0x00244ee0:	cmpcm	es, null
000102:0x00244ef0:	beq	0x244f88
000104:0x00244ef8:	call	
000104:0x00244f08:	movefm	[0xb5badea8], #return
000104:0x00244f18:	movefm	@c01, es
000104:0x00244f28:	movefm	[0xb5baded0], m_Dst
000104:0x00244f38:	ncall	LocationSyncMoveEntity([0xb5badea8], [0xb5baded0])
000104:0x00244f48:	release	#return
000105:0x00244f50:	movefm	@c00, e
000105:0x00244f60:	movefm	[0xb5b2afc0], m_Player
000105:0x00244f70:	call	
000105:0x00244f80:	jump	0x244f98
000108:0x00244f88:	call	Error(_s'[hndfsm] HandActionMoveTo - this is no HandEventMoveTo')
000108:0x00244f98:	release	es
000108:0x00244fa0:	rts
HandActionDestroy::Action()
000123:0x00244fa8:	ncall	GetGame()
000123:0x00244fb0:	call	
000123:0x00244fc0:	movefm	[0xb5bdac60], #return
000123:0x00244fd0:	ncalli	CGame.ObjectDelete([0xb5bdac60])
000123:0x00244fe0:	release	#return
000124:0x00244fe8:	movefm	@c00, e
000124:0x00244ff8:	movefm	[0xb5b2afc0], m_Player
000124:0x00245008:	call	
000124:0x00245018:	rts
HandActionDestroyed::Action()
000138:0x00245020:	movefm	@c00, e
000138:0x00245030:	movefm	[0xb5b2afc0], m_Player
000138:0x00245040:	call	
000138:0x00245050:	rts
HandActionDestroyAndReplaceWithNew::Action()
000152:0x00245170:	movefm	@c01, e
000152:0x00245180:	movem	player, m_Player
000153:0x00245190:	call	
000153:0x002451a0:	ncalli	HumanInventory.GetEntityInHands()
000153:0x002451a8:	movetm	itemInHands, #return
000153:0x002451b8:	release	#return
000155:0x002451c0:	new	src, InventoryLocation
000156:0x002451e0:	ncalli	EntityAI.GetInventory()
000156:0x002451e8:	movefm	[0xb5bad1f8], src
000156:0x002451f8:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000156:0x00245208:	cmpi	#return, _i0
000156:0x00245218:	beq	0x2452f0
000158:0x00245220:	movefm	@c02, e
000158:0x00245230:	icall	SafeCastType([0xb5b37168], @c01, @c02)
000158:0x00245248:	movetm	edr, @c01
000159:0x00245258:	cmpcm	edr, null
000159:0x00245268:	beq	0x2452d0
000161:0x00245270:	movefm	@c00, edr
000161:0x00245280:	movefm	[0xb5b3a710], m_Lambda
000161:0x00245290:	call	
000162:0x002452a0:	release	edr
000162:0x002452a8:	release	player
000162:0x002452b0:	release	itemInHands
000162:0x002452b8:	release	src
000162:0x002452c0:	rts
000162:0x002452c8:	jump	0x2452e0
000165:0x002452d0:	call	Error(_s'[hndfsm] HandActionDestroyAndReplaceWithNew - not a HandEventDestroyAndReplaceWithNew event')
000165:0x002452e0:	release	edr
000165:0x002452e8:	jump	0x245300
000168:0x002452f0:	call	Error(_s'[hndfsm] HandActionDestroyAndReplaceWithNew - itemInHands has no InventoryLocation')
000168:0x00245300:	release	player
000168:0x00245308:	release	itemInHands
000168:0x00245310:	release	src
000168:0x00245318:	rts
HandActionDestroyAndReplaceWithNewElsewhere::Action()
000176:0x00245320:	call	
000176:0x00245330:	rts
HandActionReplaced::Action()
000190:0x00245360:	movefm	@c01, e
000190:0x00245370:	movem	player, m_Player
000192:0x00245380:	call	
000192:0x00245390:	release	player
000192:0x00245398:	rts
HandActionSwap::Action()
000206:0x002453f0:	movefm	@c02, e
000206:0x00245400:	icall	SafeCastType([0xb5b36208], @c01, @c02)
000206:0x00245418:	movetm	es, @c01
000207:0x00245428:	cmpcm	es, null
000207:0x00245438:	beq	0x245520
000209:0x00245440:	call	
000209:0x00245450:	movefm	[0xb5badf20], #return
000209:0x00245460:	movefm	@c01, es
000209:0x00245470:	movefm	[0xb5badf48], m_Src2
000209:0x00245480:	call	
000209:0x00245490:	movefm	[0xb5badf70], #return
000209:0x002454a0:	movefm	@c02, es
000209:0x002454b0:	movefm	[0xb5badf98], m_Dst2
000209:0x002454c0:	ncall	LocationSwap([0xb5badf20], [0xb5badf48], [0xb5badf70], [0xb5badf98])
000209:0x002454d8:	release	#return
000209:0x002454e0:	release	#return
000210:0x002454e8:	movefm	@c00, e
000210:0x002454f8:	movefm	[0xb5b2afc0], m_Player
000210:0x00245508:	call	
000210:0x00245518:	jump	0x245530
000213:0x00245520:	call	Error(_s'[hndfsm] HandActionSwap - this is no HandEventSwap')
000213:0x00245530:	release	es
000213:0x00245538:	rts
HandActionForceSwap::Action()
000227:0x00245590:	movefm	@c02, e
000227:0x002455a0:	icall	SafeCastType([0xb5b36268], @c01, @c02)
000227:0x002455b8:	movetm	es, @c01
000228:0x002455c8:	cmpcm	es, null
000228:0x002455d8:	beq	0x2456c0
000230:0x002455e0:	call	
000230:0x002455f0:	movefm	[0xb5badf20], #return
000230:0x00245600:	movefm	@c01, es
000230:0x00245610:	movefm	[0xb5badf48], m_Src2
000230:0x00245620:	call	
000230:0x00245630:	movefm	[0xb5badf70], #return
000230:0x00245640:	movefm	@c02, es
000230:0x00245650:	movefm	[0xb5badf98], m_Dst2
000230:0x00245660:	ncall	LocationSwap([0xb5badf20], [0xb5badf48], [0xb5badf70], [0xb5badf98])
000230:0x00245678:	release	#return
000230:0x00245680:	release	#return
000231:0x00245688:	movefm	@c00, e
000231:0x00245698:	movefm	[0xb5b2afc0], m_Player
000231:0x002456a8:	call	
000231:0x002456b8:	jump	0x2456d0
000234:0x002456c0:	call	Error(_s'[hndfsm] HandActionForceSwap - this is no HandEventForceSwap')
000234:0x002456d0:	release	es
000234:0x002456d8:	rts
UniversalTemperatureSourceSettings::UniversalTemperatureSourceSettings()
//scripts/3_Game/systems\universaltemperaturesource\universaltemperaturesource.c
000001:0x002456e0:	imove	m_UpdateInterval, 1.00000
000001:0x002456f0:	imove	m_TemperatureMin, 0.00000
000001:0x00245700:	imove	m_TemperatureMax, 100.00000
000001:0x00245710:	imove	m_TemperatureCap, 340282346638528859811704183484516925440.00000
000001:0x00245720:	imove	m_RangeFull, 1.00000
000001:0x00245730:	imove	m_RangeMax, 2.00000
000001:0x00245740:	imove	m_Updateable, 0x000000
000001:0x00245750:	imove	m_ManualUpdate, 0x000000
000001:0x00245760:	imove	m_AffectStat, 0x000000
000001:0x00245770:	movev	m_Position, Zero
000001:0x00245780:	movetm	m_Parent, null
000001:0x00245790:	rts
UniversalTemperatureSourceResult::UniversalTemperatureSourceResult()
000018:0x00245798:	imove	m_Temperature, 0.00000
000018:0x002457a8:	rts
UniversalTemperatureSourceTimer::OnTimer()
000029:0x002457b0:	cmpcm	m_params, null
000029:0x002457c0:	beq	0x245830
000031:0x002457c8:	ncall	GetGame()
000031:0x002457d0:	movec	@c00, #return
000031:0x002457e0:	movec	@c01, GameScript
000031:0x002457f0:	movefm	@c02, m_target
000031:0x00245800:	movefm	@c03, m_params
000031:0x00245810:	icall	
000031:0x00245828:	jump	0x245880
000035:0x00245830:	ncall	GetGame()
000035:0x00245838:	movec	@c00, #return
000035:0x00245848:	movec	@c01, GameScript
000035:0x00245858:	movefm	@c02, m_target
000035:0x00245868:	icall	
000035:0x00245880:	rts
UniversalTemperatureSourceTimer::Stop()
000041:0x00245888:	call	
000042:0x00245898:	imove	m_time, 0.00000
000042:0x002458a8:	rts
UniversalTemperatureSourceTimer::SetParams()
000047:0x002458b0:	movem	m_params, params
000047:0x002458c0:	rts
UniversalTemperatureSource::UniversalTemperatureSource()
000063:0x002458c8:	imove	m_Active, 0x000000
000064:0x002458d8:	movem	m_Settings, pSettings
000065:0x002458e8:	movem	m_Lambda, pLambda
000066:0x002458f8:	new	m_ResultValues, UniversalTemperatureSourceResult
000067:0x00245918:	new	m_Timer, UniversalTemperatureSourceTimer
000069:0x00245940:	call	
000069:0x00245950:	rts
Param2<UniversalTemperatureSourceSettings,UniversalTemperatureSourceLambdaBase>::Param2()
//scripts/1_Core/param.c
000066:0x00245b10:	movem	param1, p1
000067:0x00245b20:	movem	param2, p2
000067:0x00245b30:	rts
Param2<UniversalTemperatureSourceSettings,UniversalTemperatureSourceLambdaBase>::Serialize()
000072:0x00245b38:	icall	
000072:0x00245b48:	cmpi	#return, _i0
000072:0x00245b58:	beq	0x245ba0
000072:0x00245b60:	icall	
000072:0x00245b70:	cmpi	#return, _i0
000072:0x00245b80:	beq	0x245ba0
000072:0x00245b88:	imove	#return, 0x000001
000072:0x00245b98:	jump	0x245bb0
000072:0x00245ba0:	imove	#return, 0x000000
000072:0x00245bb0:	rts
000072:0x00245bb8:	rts
Param2<UniversalTemperatureSourceSettings,UniversalTemperatureSourceLambdaBase>::Deserializer()
000077:0x00245bc0:	icall	
000077:0x00245bd0:	cmpi	#return, _i0
000077:0x00245be0:	beq	0x245c28
000077:0x00245be8:	icall	
000077:0x00245bf8:	cmpi	#return, _i0
000077:0x00245c08:	beq	0x245c28
000077:0x00245c10:	imove	#return, 0x000001
000077:0x00245c20:	jump	0x245c38
000077:0x00245c28:	imove	#return, 0x000000
000077:0x00245c38:	rts
000077:0x00245c40:	rts
UniversalTemperatureSource::Init()
//scripts/3_Game/systems\universaltemperaturesource\universaltemperaturesource.c
000076:0x00245c70:	cmpcm	pParent, null
000076:0x00245c80:	beq	0x245d00
000078:0x00245c88:	call	
000080:0x00245c98:	movefm	[0xb5b37ff8], m_Settings
000080:0x00245ca8:	movec	@c00, [0xb5b37ff8]
000080:0x00245cb8:	movem	m_Parent, pParent
000081:0x00245cc8:	movefm	[0xb5b37ff8], m_Settings
000081:0x00245cd8:	movec	@c00, [0xb5b37ff8]
000081:0x00245ce8:	ncalli	EntityAI.GetPosition()
000081:0x00245cf0:	movev	m_Position, #return
000084:0x00245d00:	movefm	[0xb5b37ff8], m_Settings
000084:0x00245d10:	movec	@c00, [0xb5b37ff8]
000084:0x00245d20:	cmpi	m_ManualUpdate, _i0
000084:0x00245d30:	bne	0x245e50
000086:0x00245d38:	movem	p1, m_Settings
000086:0x00245d48:	movem	p2, m_Lambda
000086:0x00245d58:	new	@c00, Param2<UniversalTemperatureSourceSettings,UniversalTemperatureSourceLambdaBase>
000086:0x00245d80:	pushc	@c00
000086:0x00245d88:	movetm	params, @c00
000086:0x00245d98:	popc	@c00
000086:0x00245da0:	release	@c00
000088:0x00245da8:	movefm	[0xb5b37ff8], m_Settings
000088:0x00245db8:	movec	@c00, [0xb5b37ff8]
000088:0x00245dc8:	move	duration, m_UpdateInterval
000088:0x00245dd8:	movefm	[0xb5b37ff8], m_Settings
000088:0x00245de8:	movec	@c01, [0xb5b37ff8]
000088:0x00245df8:	move	loop, m_Updateable
000088:0x00245e08:	movefm	[0xb5b3c768], m_Timer
000088:0x00245e18:	call	
000089:0x00245e38:	call	
000089:0x00245e48:	release	params
000089:0x00245e50:	rts
UniversalTemperatureSource::GetPosition()
000095:0x00245e58:	movefm	[0xb5b37ff8], m_Settings
000095:0x00245e68:	movec	@c00, [0xb5b37ff8]
000095:0x00245e78:	movev	#return, m_Position
000095:0x00245e88:	rts
000095:0x00245e90:	rts
UniversalTemperatureSource::GetFullRange()
000100:0x00245e98:	movefm	[0xb5b37ff8], m_Settings
000100:0x00245ea8:	movec	@c00, [0xb5b37ff8]
000100:0x00245eb8:	move	#return, m_RangeFull
000100:0x00245ec8:	rts
000100:0x00245ed0:	rts
UniversalTemperatureSource::GetMaxRange()
000105:0x00245ed8:	movefm	[0xb5b37ff8], m_Settings
000105:0x00245ee8:	movec	@c00, [0xb5b37ff8]
000105:0x00245ef8:	move	#return, m_RangeMax
000105:0x00245f08:	rts
000105:0x00245f10:	rts
UniversalTemperatureSource::GetTemperature()
000110:0x00245f18:	movefm	[0xb5b37ff8], m_Settings
000110:0x00245f28:	movec	@c00, [0xb5b37ff8]
000110:0x00245f38:	cmpf	m_TemperatureCap, MAX
000110:0x00245f48:	beq	0x245fa8
000112:0x00245f50:	movefm	[0xb5b37ff8], m_Settings
000112:0x00245f60:	movec	@c01, [0xb5b37ff8]
000112:0x00245f70:	call	
000112:0x00245f80:	icall	Min(m_TemperatureCap, #return)
000112:0x00245f90:	move	#return, #return
000112:0x00245fa0:	rts
000115:0x00245fa8:	call	
000115:0x00245fb8:	move	#return, #return
000115:0x00245fc8:	rts
000115:0x00245fd0:	rts
UniversalTemperatureSource::GetTemperatureRaw()
000120:0x00245fd8:	cmpcm	m_ResultValues, null
000120:0x00245fe8:	beq	0x246028
000122:0x00245ff0:	movefm	[0xb5b39d38], m_ResultValues
000122:0x00246000:	movec	@c00, [0xb5b39d38]
000122:0x00246010:	move	#return, m_Temperature
000122:0x00246020:	rts
000125:0x00246028:	imove	#return, 0.00000
000125:0x00246038:	rts
000125:0x00246040:	rts
UniversalTemperatureSource::GetTemperatureMin()
000130:0x00246048:	movefm	[0xb5b37ff8], m_Settings
000130:0x00246058:	movec	@c00, [0xb5b37ff8]
000130:0x00246068:	move	#return, m_TemperatureMin
000130:0x00246078:	rts
000130:0x00246080:	rts
UniversalTemperatureSource::GetTemperatureMax()
000135:0x00246088:	movefm	[0xb5b37ff8], m_Settings
000135:0x00246098:	movec	@c00, [0xb5b37ff8]
000135:0x002460a8:	move	#return, m_TemperatureMax
000135:0x002460b8:	rts
000135:0x002460c0:	rts
UniversalTemperatureSource::GetParent()
000140:0x002460c8:	movefm	[0xb5b37ff8], m_Settings
000140:0x002460d8:	movec	@c01, [0xb5b37ff8]
000140:0x002460e8:	movem	#return, m_Parent
000140:0x002460f8:	rts
000140:0x00246100:	rts
UniversalTemperatureSource::IsActive()
000145:0x00246108:	movefm	[0xb5b37ff8], m_Settings
000145:0x00246118:	movec	@c00, [0xb5b37ff8]
000145:0x00246128:	cmpi	m_ManualUpdate, _i0
000145:0x00246138:	beq	0x246158
000147:0x00246140:	move	#return, m_Active
000147:0x00246150:	rts
000150:0x00246158:	cmpcm	m_Timer, null
000150:0x00246168:	beq	0x2461c0
000150:0x00246170:	movefm	[0xb5b3c768], m_Timer
000150:0x00246180:	call	
000150:0x00246190:	cmpi	#return, _i0
000150:0x002461a0:	beq	0x2461c0
000150:0x002461a8:	imove	#return, 0x000001
000150:0x002461b8:	jump	0x2461d0
000150:0x002461c0:	imove	#return, 0x000000
000150:0x002461d0:	rts
000150:0x002461d8:	rts
UniversalTemperatureSource::SetActive()
000155:0x002461e0:	movefm	[0xb5b37ff8], m_Settings
000155:0x002461f0:	movec	@c00, [0xb5b37ff8]
000155:0x00246200:	cmpi	m_ManualUpdate, _i0
000155:0x00246210:	beq	0x246230
000157:0x00246218:	move	m_Active, pActive
000158:0x00246228:	rts
000161:0x00246230:	cmpi	pActive, _i0
000161:0x00246240:	beq	0x2462a8
000161:0x00246248:	movefm	[0xb5b3c768], m_Timer
000161:0x00246258:	call	
000161:0x00246268:	cmpi	#return, _i0
000161:0x00246278:	bne	0x2462a8
000163:0x00246280:	movefm	[0xb5b3c768], m_Timer
000163:0x00246290:	call	
000163:0x002462a0:	jump	0x2462c8
000167:0x002462a8:	movefm	[0xb5b3c768], m_Timer
000167:0x002462b8:	call	
000167:0x002462c8:	rts
UniversalTemperatureSource::SetDefferedActive()
000173:0x00246320:	ncall	GetGame()
000173:0x00246328:	call	
000173:0x00246338:	citf	@f01, _i1000
000173:0x00246348:	mulf	@f00, pSeconds, @f01
000173:0x00246358:	cfti	@m01, @f00
000173:0x00246368:	move	@m00, @m01
000173:0x00246378:	new	@c00, Param1<bool>
000173:0x002463a0:	pushc	@c00
000173:0x002463a8:	icall	
000173:0x002463c8:	popc	@c00
000173:0x002463d0:	release	@c00
000173:0x002463d8:	release	#return
000173:0x002463e0:	rts
UniversalTemperatureSource::ChangeSettings()
000178:0x002463e8:	movem	p1, m_Settings
000178:0x002463f8:	movem	p2, m_Lambda
000178:0x00246408:	new	@c00, Param2<UniversalTemperatureSourceSettings,UniversalTemperatureSourceLambdaBase>
000178:0x00246430:	pushc	@c00
000178:0x00246438:	movefm	[0xb5b3c768], m_Timer
000178:0x00246448:	call	
000178:0x00246458:	popc	@c00
000178:0x00246460:	release	@c00
000178:0x00246468:	rts
UniversalTemperatureSource::Update()
000183:0x00246470:	call	
000183:0x00246480:	cmpi	#return, _i0
000183:0x00246490:	bne	0x2464a0
000185:0x00246498:	rts
000188:0x002464a0:	cmpcm	lambda, null
000188:0x002464b0:	beq	0x246530
000190:0x002464b8:	movefm	@c00, settings
000190:0x002464c8:	movefm	@c01, settings
000190:0x002464d8:	movefm	[0xb5b25dc0], m_Parent
000190:0x002464e8:	call	
000190:0x002464f8:	movev	m_Position, #return
000191:0x00246508:	movem	resultValues, m_ResultValues
000191:0x00246518:	call	
000191:0x00246530:	rts
UniversalTemperatureSourceDebug::UniversalTemperatureSourceDebug()
000212:0x00246538:	moves	m_Header, _s''
000213:0x00246548:	moves	m_Data, _s''
000214:0x00246558:	new	m_Pairs, array<string>
000215:0x00246578:	new	m_Names, array<string>
000216:0x00246598:	new	m_Values, array<string>
000216:0x002465b8:	rts
UniversalTemperatureSourceDebug::AddHeader()
000221:0x002465c0:	moves	m_Header, header
000221:0x002465d0:	rts
UniversalTemperatureSourceDebug::Add()
000226:0x00246600:	icall	Format(_s'%1%2:%3%4', m_Data, name, value, DELIMITER_DATA, _c0, _c0, _c0, _c0, _c0)
000226:0x00246630:	moves	m_Data, #return
000226:0x00246640:	rts
UniversalTemperatureSourceDebug::Commit()
000231:0x00246648:	call	
000231:0x00246658:	movem	m_Pairs, #return
000231:0x00246668:	release	#return
000232:0x00246670:	call	
000232:0x00246680:	rts
UniversalTemperatureSourceDebug::PairsCount()
000237:0x00246688:	movefm	[0xd31562c0], m_Pairs
000237:0x00246698:	ncalli	array<string>.Count()
000237:0x002466a0:	move	#return, #return
000237:0x002466b0:	rts
000237:0x002466b8:	rts
UniversalTemperatureSourceDebug::GetHeader()
000242:0x002466c0:	moves	#return, m_Header
000242:0x002466d0:	rts
000242:0x002466d8:	rts
UniversalTemperatureSourceDebug::GetName()
000247:0x00246730:	movefm	[0xd31562c0], m_Names
000247:0x00246740:	ncalli	array<string>.Count()
000247:0x00246748:	subi	@m01, #return, _i1
000247:0x00246758:	move	@m00, @m01
000247:0x00246768:	cmpi	@m00, pIndex
000247:0x00246778:	bge	0x246800
000249:0x00246780:	movefm	[0xd31562c0], m_Names
000249:0x00246790:	ncalli	array<string>.Count()
000249:0x00246798:	icall	Format(_s'GetName index: %1 from data of length: %2', pIndex, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000249:0x002467c8:	call	Log(#return, _s'UniversalTemperatureSourceDebug', _s'n/a', _s'n/a', _s'n/a')
000250:0x002467e8:	moves	#return, _s''
000250:0x002467f8:	rts
000253:0x00246800:	movefm	[0xd31562c0], m_Names
000253:0x00246810:	icall	
000253:0x00246820:	moves	#return, #return
000253:0x00246830:	rts
000253:0x00246838:	rts
UniversalTemperatureSourceDebug::GetValue()
000258:0x00246868:	movefm	[0xd31562c0], m_Values
000258:0x00246878:	ncalli	array<string>.Count()
000258:0x00246880:	subi	@m01, #return, _i1
000258:0x00246890:	move	@m00, @m01
000258:0x002468a0:	cmpi	@m00, pIndex
000258:0x002468b0:	bge	0x246938
000260:0x002468b8:	movefm	[0xd31562c0], m_Values
000260:0x002468c8:	ncalli	array<string>.Count()
000260:0x002468d0:	icall	Format(_s'GetValue index: %1 from data of length: %2', pIndex, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000260:0x00246900:	call	Log(#return, _s'UniversalTemperatureSourceDebug', _s'n/a', _s'n/a', _s'n/a')
000261:0x00246920:	moves	#return, _s''
000261:0x00246930:	rts
000264:0x00246938:	movefm	[0xd31562c0], m_Values
000264:0x00246948:	icall	
000264:0x00246958:	moves	#return, #return
000264:0x00246968:	rts
000264:0x00246970:	rts
UniversalTemperatureSourceDebug::ParseData()
000270:0x002469c8:	new	parsed, array<string>
000271:0x002469e8:	cmps	m_Data, _s''
000271:0x002469f8:	beq	0x246a50
000273:0x00246a00:	moves	value, m_Data
000273:0x00246a10:	call	Split(value, DELIMITER_DATA, parsed)
000273:0x00246a28:	moves	m_Data, value
000273:0x00246a38:	movem	parsed, output
000273:0x00246a48:	release	output
000276:0x00246a50:	movem	#return, parsed
000276:0x00246a60:	release	parsed
000276:0x00246a68:	rts
000276:0x00246a70:	release	parsed
000276:0x00246a78:	rts
UniversalTemperatureSourceDebug::ParseKeyPairs()
000281:0x00246af8:	movefm	[0xd31562c0], m_Names
000281:0x00246b08:	ncalli	array<string>.Clear()
000282:0x00246b10:	movefm	[0xd31562c0], m_Values
000282:0x00246b20:	ncalli	array<string>.Clear()
000284:0x00246b28:	cmpcm	m_Pairs, null
000284:0x00246b38:	beq	0x246c80
000286:0x00246b40:	imove	i, 0x000000
000286:0x00246b50:	jump	0x246b70
000286:0x00246b58:	move	@m00, i
000286:0x00246b68:	inc	i
000286:0x00246b70:	movefm	[0xd31562c0], m_Pairs
000286:0x00246b80:	ncalli	array<string>.Count()
000286:0x00246b88:	cmpi	i, #return
000286:0x00246b98:	bge	0x246c80
000288:0x00246ba0:	new	keypair, array<string>
000290:0x00246bc0:	movefm	[0xd31562c0], m_Pairs
000290:0x00246bd0:	icall	
000290:0x00246be0:	call	Split(#return, DELIMITER_KEYPAIR, keypair)
000290:0x00246bf8:	movem	keypair, output
000290:0x00246c08:	release	output
000291:0x00246c10:	icall	
000291:0x00246c20:	movefm	[0xd31562c0], m_Names
000291:0x00246c30:	icall	
000292:0x00246c40:	icall	
000292:0x00246c50:	movefm	[0xd31562c0], m_Values
000292:0x00246c60:	icall	
000292:0x00246c70:	release	keypair
000292:0x00246c78:	jump	0x246b58
000292:0x00246c80:	rts
UniversalTemperatureSourceDebug::Debug()
000299:0x00246cd8:	imove	i, 0x000000
000299:0x00246ce8:	jump	0x246d08
000299:0x00246cf0:	move	@m00, i
000299:0x00246d00:	inc	i
000299:0x00246d08:	movefm	[0xd31562c0], m_Names
000299:0x00246d18:	ncalli	array<string>.Count()
000299:0x00246d20:	cmpi	i, #return
000299:0x00246d30:	bge	0x246df0
000301:0x00246d38:	movefm	[0xd31562c0], m_Names
000301:0x00246d48:	icall	
000301:0x00246d58:	movefm	[0xd31562c0], m_Values
000301:0x00246d68:	pushs	#return
000301:0x00246d70:	icall	
000301:0x00246d80:	moves	@s01, #return
000301:0x00246d90:	pops	#return
000301:0x00246d98:	icall	Format(_s'%1: %2', #return, @s01, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000301:0x00246dc8:	call	Log(#return, _s'UniversalTemperatureSourceDebug', _s'n/a', _s'n/a', _s'n/a')
000301:0x00246de8:	jump	0x246cf0
000301:0x00246df0:	rts
Hit_MeatBones_MeleeFist::Hit_MeatBones_MeleeFist()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_meatbones\hit_meatbones_meleefist.c
000005:0x00246df8:	call	
000005:0x00246e08:	rts
CGame::CGame()
//scripts/3_Game/global\game.c
000035:0x00246e10:	icall	Randomize(_i-1)
000037:0x00246e20:	call	Init()
000038:0x00246e30:	new	m_ParamCache, array<@Param>
000039:0x00246e50:	movefm	[0xb5b68840], m_ParamCache
000039:0x00246e60:	icall	
000042:0x00246e70:	new	m_AnalyticsManagerServer, AnalyticsManagerServer
000043:0x00246e90:	new	m_AnalyticsManagerClient, AnalyticsManagerClient
000048:0x00246eb0:	ncalli	CGame.StorageVersion(GAME_STORAGE_VERSION)
000054:0x00246ec0:	ncalli	CGame.IsDedicatedServer()
000054:0x00246ec8:	cmpi	#return, _i0
000054:0x00246ed8:	bne	0x246f10
000056:0x00246ee0:	call	Init()
000057:0x00246ef0:	call	Init()
000058:0x00246f00:	call	Init()
000058:0x00246f10:	rts
CGame::~CGame()
000065:0x00246f18:	call	Cleanup()
000066:0x00246f28:	call	Cleanup()
000067:0x00246f38:	call	CleanupInstance()
000070:0x00246f48:	call	CleanupInstance()
000070:0x00246f58:	rts
CGame::OnInitialize()
000123:0x00246f60:	imove	#return, 0x000000
000123:0x00246f70:	rts
000123:0x00246f78:	rts
CGame::ConfigGetTextOut()
000443:0x00246fd0:	icall	
000444:0x00246fe0:	moves	#return, ret_s
000444:0x00246ff0:	rts
000444:0x00246ff8:	rts
CGame::FormatRawConfigStringKeys()
000455:0x00247078:	icall	Replace(value, _s'$STR_', _s'#STR_')
000455:0x00247090:	move	ret, #return
000456:0x002470a0:	cmpi	ret, _i0
000456:0x002470b0:	ble	0x2470d0
000456:0x002470b8:	imove	#return, 0x000001
000456:0x002470c8:	jump	0x2470e0
000456:0x002470d0:	imove	#return, 0x000000
000456:0x002470e0:	moves	value, value
000456:0x002470f0:	rts
000456:0x002470f8:	moves	value, value
000456:0x00247108:	rts
CGame::GetModelName()
000466:0x00247398:	cmps	class_name, _s''
000466:0x002473a8:	beq	0x247568
000468:0x002473b0:	adds	@s01, _s'CfgVehicles ', class_name
000468:0x002473c0:	moves	@s00, @s01
000468:0x002473d0:	adds	cfg, @s00, _s' model'
000470:0x002473e0:	ncall	GetGame()
000470:0x002473e8:	icall	
000470:0x002473f8:	cmpi	#return, _i0
000470:0x00247408:	beq	0x247568
000472:0x00247410:	ncall	Length(model_path)
000472:0x00247420:	subi	to_substring_end, #return, _i4
000473:0x00247430:	imove	to_substring_start, 0x000000
000476:0x00247440:	move	i, to_substring_end
000476:0x00247450:	jump	0x247470
000476:0x00247458:	move	@m00, i
000476:0x00247468:	dec	i
000476:0x00247470:	cmpi	i, _i0
000476:0x00247480:	ble	0x247508
000478:0x00247488:	call	Get(model_path, i)
000478:0x002474a0:	moves	model_path, value
000478:0x002474b0:	moves	sign, #return
000479:0x002474c0:	cmps	sign, _s'\'
000479:0x002474d0:	bne	0x247500
000481:0x002474d8:	addi	@m00, i, _i1
000481:0x002474e8:	move	to_substring_start, @m00
000482:0x002474f8:	jump	0x247508
000482:0x00247500:	jump	0x247458
000486:0x00247508:	subi	@m01, to_substring_end, to_substring_start
000486:0x00247518:	move	@m00, @m01
000486:0x00247528:	icall	Substring(model_path, to_substring_start, @m00)
000486:0x00247540:	moves	model_name, #return
000487:0x00247550:	moves	#return, model_name
000487:0x00247560:	rts
000491:0x00247568:	moves	#return, _s'UNKNOWN_P3D_FILE'
000491:0x00247578:	rts
000491:0x00247580:	rts
CGame::ConfigPathToString()
000605:0x00247630:	moves	return_path, _s''
000606:0x00247640:	ncalli	array<string>.Count()
000606:0x00247648:	move	count, #return
000608:0x00247658:	imove	i, 0x000000
000608:0x00247668:	jump	0x247688
000608:0x00247670:	move	@m00, i
000608:0x00247680:	inc	i
000608:0x00247688:	cmpi	i, count
000608:0x00247698:	bge	0x247730
000610:0x002476a0:	icall	
000610:0x002476b0:	moves	@s00, #return
000610:0x002476c0:	adds	return_path, return_path, @s00
000612:0x002476d0:	subi	@m01, count, _i1
000612:0x002476e0:	move	@m00, @m01
000612:0x002476f0:	cmpi	i, @m00
000612:0x00247700:	bge	0x247728
000614:0x00247708:	moves	@s00, _s' '
000614:0x00247718:	adds	return_path, return_path, @s00
000614:0x00247728:	jump	0x247670
000618:0x00247730:	moves	#return, return_path
000618:0x00247740:	rts
000618:0x00247748:	rts
CGame::AddInventoryJunctureEx()
000716:0x00247778:	movefm	[0xb5bdb318], player
000716:0x00247788:	movefm	[0xb5bdb340], item
000716:0x00247798:	movefm	[0xb5bdb368], dst
000716:0x002477a8:	ncalli	CGame.AddInventoryJuncture([0xb5bdb318], [0xb5bdb340], [0xb5bdb368], test_dst_occupancy, timeout_ms)
000716:0x002477c8:	move	result, #return
000724:0x002477d8:	move	#return, result
000724:0x002477e8:	rts
000724:0x002477f0:	rts
CGame::ClearJunctureEx()
000743:0x002477f8:	movefm	[0xb5bdb770], player
000743:0x00247808:	movefm	[0xb5bdb798], item
000743:0x00247818:	ncalli	CGame.ClearJuncture([0xb5bdb770], [0xb5bdb798])
000743:0x00247828:	move	#return, #return
000743:0x00247838:	rts
000743:0x00247840:	rts
CGame::GetWorldName#78063()
000803:0x002478a0:	icall	
000804:0x002478b0:	moves	#return, world_name
000804:0x002478c0:	rts
000804:0x002478c8:	rts
CGame::GetPlayerByIndex()
000817:0x00247920:	new	players, array<Man>
000818:0x00247940:	movefm	[0xb5bdbfb8], players
000818:0x00247950:	ncalli	CGame.GetPlayers([0xb5bdbfb8])
000819:0x00247960:	ncalli	array<Man>.Count()
000819:0x00247968:	cmpi	index, #return
000819:0x00247978:	blt	0x2479a0
000820:0x00247980:	movetm	#return, null
000820:0x00247990:	release	players
000820:0x00247998:	rts
000821:0x002479a0:	icall	
000821:0x002479b0:	icall	SafeCastType([0xb5b2afc0], @c01, #return)
000821:0x002479c8:	movetm	#return, @c01
000821:0x002479d8:	release	players
000821:0x002479e0:	rts
000821:0x002479e8:	release	players
000821:0x002479f0:	rts
CGame::RPCSingleParam()
000884:0x002479f8:	movefm	@c00, param
000884:0x00247a08:	movefm	[0xb5b68840], m_ParamCache
000884:0x00247a18:	icall	
000885:0x00247a28:	movefm	[0xb5bdc240], target
000885:0x00247a38:	movefm	[0xb5bdc290], m_ParamCache
000885:0x00247a48:	movefm	[0xb5bdc2e0], recipient
000885:0x00247a58:	ncalli	CGame.RPC([0xb5bdc240], rpc_type, [0xb5bdc290], guaranteed, [0xb5bdc2e0])
000885:0x00247a78:	rts
CGame::RPCSelfSingleParam()
000891:0x00247a80:	movefm	@c00, param
000891:0x00247a90:	movefm	[0xb5b68840], m_ParamCache
000891:0x00247aa0:	icall	
000892:0x00247ab0:	movefm	[0xb5bdc3d0], target
000892:0x00247ac0:	movefm	[0xb5bdc420], m_ParamCache
000892:0x00247ad0:	ncalli	CGame.RPCSelf([0xb5bdc3d0], rpcType, [0xb5bdc420])
000892:0x00247ae8:	rts
CGame::IsDigitalCopy()
001012:0x00247af0:	call	IsGameActive(false)
001012:0x00247b00:	move	#return, #return
001012:0x00247b10:	rts
001012:0x00247b18:	rts
CGame::SetDebugMonitorEnabled()
001023:0x00247b20:	move	m_DebugMonitorEnabled, value
001023:0x00247b30:	rts
CGame::IsDebugMonitor()
001028:0x00247b38:	ncalli	CGame.IsServer()
001028:0x00247b40:	cmpi	#return, _i0
001028:0x00247b50:	beq	0x247b88
001028:0x00247b58:	cmpi	m_DebugMonitorEnabled, _i0
001028:0x00247b68:	beq	0x247b88
001028:0x00247b70:	imove	#return, 0x000001
001028:0x00247b80:	jump	0x247b98
001028:0x00247b88:	imove	#return, 0x000000
001028:0x00247b98:	rts
001028:0x00247ba0:	rts
CGame::GetHighestSurfaceYDifference()
001052:0x00247d20:	imove	high, -9999999.00000
001053:0x00247d30:	imove	low, 100000000.00000
001055:0x00247d40:	imove	i, 0x000000
001055:0x00247d50:	jump	0x247d70
001055:0x00247d58:	move	@m00, i
001055:0x00247d68:	inc	i
001055:0x00247d70:	ncalli	array<vector>.Count()
001055:0x00247d78:	cmpi	i, #return
001055:0x00247d88:	bge	0x247e68
001057:0x00247d90:	icall	
001057:0x00247da0:	movev	pos, #return
001058:0x00247db0:	ifv	@f00, pos[0x000000]
001058:0x00247dc0:	ifv	@f01, pos[0x000002]
001058:0x00247dd0:	ncalli	CGame.SurfaceRoadY(@f00, @f01)
001058:0x00247de0:	itv	pos[0x000001], #return
001059:0x00247df0:	ifv	@f00, pos[0x000001]
001059:0x00247e00:	move	y, @f00
001061:0x00247e10:	cmpf	y, high
001061:0x00247e20:	ble	0x247e38
001062:0x00247e28:	move	high, y
001064:0x00247e38:	cmpf	y, low
001064:0x00247e48:	bge	0x247e60
001065:0x00247e50:	move	low, y
001065:0x00247e60:	jump	0x247d58
001070:0x00247e68:	subf	#return, high, low
001070:0x00247e78:	rts
001070:0x00247e80:	rts
CGame::GetSurfaceOrientation()
001076:0x00247fb8:	ncall	GetGame()
001076:0x00247fc0:	ncalli	CGame.SurfaceGetNormal(x, z)
001076:0x00247fd0:	movev	normal, #return
001077:0x00247fe0:	icall	VectorToAngles(normal)
001077:0x00247ff0:	movev	angles, #return
001078:0x00248000:	ifv	@f00, angles[0x000001]
001078:0x00248010:	addf	@f00, @f00, _f270.000000
001078:0x00248020:	itv	angles[0x000001], @f00
001081:0x00248030:	cmpv	angles, _v<0.000000,540.000000,0.000000>
001081:0x00248040:	bne	0x248058
001082:0x00248048:	movev	angles, _v<0.000000,0.000000,0.000000>
001083:0x00248058:	movev	#return, angles
001083:0x00248068:	rts
001083:0x00248070:	rts
CGame::IsSurfaceDigable()
001089:0x002480c8:	adds	@s02, _s'CfgSurfaces ', surface
001089:0x002480d8:	moves	@s01, @s02
001089:0x002480e8:	adds	@s01, @s01, _s' isDigable'
001089:0x002480f8:	moves	@s00, @s01
001089:0x00248108:	ncalli	CGame.ConfigGetInt(@s00)
001089:0x00248118:	move	#return, #return
001089:0x00248128:	rts
001089:0x00248130:	rts
CGame::IsSurfaceFertile()
001095:0x00248160:	adds	@s02, _s'CfgSurfaces ', surface
001095:0x00248170:	moves	@s01, @s02
001095:0x00248180:	adds	@s01, @s01, _s' isFertile'
001095:0x00248190:	moves	@s00, @s01
001095:0x002481a0:	ncalli	CGame.ConfigGetInt(@s00)
001095:0x002481b0:	move	#return, #return
001095:0x002481c0:	rts
001095:0x002481c8:	rts
CGame::UpdatePathgraphRegionByObject()
001100:0x00248308:	cmpcm	object, null
001100:0x00248318:	beq	0x248498
001102:0x00248320:	ncalli	Object.GetPosition()
001102:0x00248328:	movev	pos, #return
001104:0x00248338:	icall	
001104:0x00248348:	move	radius, #return
001105:0x00248358:	ifv	@f01, pos[0x000000]
001105:0x00248368:	subf	@f01, @f01, radius
001105:0x00248378:	move	@f00, @f01
001105:0x00248388:	ifv	@f01, pos[0x000001]
001105:0x00248398:	ifv	@f03, pos[0x000002]
001105:0x002483a8:	subf	@f03, @f03, radius
001105:0x002483b8:	move	@f02, @f03
001105:0x002483c8:	ncall	Vector(@f00, @f01, @f02)
001105:0x002483e0:	movev	min, #return
001106:0x002483f0:	ifv	@f01, pos[0x000000]
001106:0x00248400:	addf	@f01, @f01, radius
001106:0x00248410:	move	@f00, @f01
001106:0x00248420:	ifv	@f01, pos[0x000001]
001106:0x00248430:	ifv	@f03, pos[0x000002]
001106:0x00248440:	addf	@f03, @f03, radius
001106:0x00248450:	move	@f02, @f03
001106:0x00248460:	ncall	Vector(@f00, @f01, @f02)
001106:0x00248478:	movev	max, #return
001107:0x00248488:	ncalli	CGame.UpdatePathgraphRegion(min, max)
001107:0x00248498:	rts
CGame::IsKindOf()
001240:0x002485e8:	new	full_path, array<string>
001242:0x00248608:	adds	@s01, _s'CfgVehicles ', cfg_class_name
001242:0x00248618:	moves	@s00, @s01
001242:0x00248628:	movefm	[0xb5bda480], full_path
001242:0x00248638:	ncalli	CGame.ConfigGetFullPath(@s00, [0xb5bda480])
001244:0x00248648:	ncalli	array<string>.Count()
001244:0x00248650:	move	@m00, #return
001244:0x00248660:	cmpi	@m00, _i0
001244:0x00248670:	bne	0x2486b8
001246:0x00248678:	adds	@s01, _s'CfgAmmo ', cfg_class_name
001246:0x00248688:	moves	@s00, @s01
001246:0x00248698:	movefm	[0xb5bda480], full_path
001246:0x002486a8:	ncalli	CGame.ConfigGetFullPath(@s00, [0xb5bda480])
001249:0x002486b8:	ncalli	array<string>.Count()
001249:0x002486c0:	move	@m00, #return
001249:0x002486d0:	cmpi	@m00, _i0
001249:0x002486e0:	bne	0x248728
001251:0x002486e8:	adds	@s01, _s'CfgMagazines ', cfg_class_name
001251:0x002486f8:	moves	@s00, @s01
001251:0x00248708:	movefm	[0xb5bda480], full_path
001251:0x00248718:	ncalli	CGame.ConfigGetFullPath(@s00, [0xb5bda480])
001254:0x00248728:	ncalli	array<string>.Count()
001254:0x00248730:	move	@m00, #return
001254:0x00248740:	cmpi	@m00, _i0
001254:0x00248750:	bne	0x248798
001256:0x00248758:	adds	@s01, _s'cfgWeapons ', cfg_class_name
001256:0x00248768:	moves	@s00, @s01
001256:0x00248778:	movefm	[0xb5bda480], full_path
001256:0x00248788:	ncalli	CGame.ConfigGetFullPath(@s00, [0xb5bda480])
001259:0x00248798:	ncalli	array<string>.Count()
001259:0x002487a0:	move	@m00, #return
001259:0x002487b0:	cmpi	@m00, _i0
001259:0x002487c0:	bne	0x248808
001261:0x002487c8:	adds	@s01, _s'CfgNonAIVehicles ', cfg_class_name
001261:0x002487d8:	moves	@s00, @s01
001261:0x002487e8:	movefm	[0xb5bda480], full_path
001261:0x002487f8:	ncalli	CGame.ConfigGetFullPath(@s00, [0xb5bda480])
001264:0x00248808:	icall	ToLower(cfg_parent_name)
001265:0x00248818:	imove	i, 0x000000
001265:0x00248828:	jump	0x248848
001265:0x00248830:	move	@m00, i
001265:0x00248840:	inc	i
001265:0x00248848:	ncalli	array<string>.Count()
001265:0x00248850:	cmpi	i, #return
001265:0x00248860:	bge	0x2488d8
001267:0x00248868:	icall	
001267:0x00248878:	moves	tmp, #return
001268:0x00248888:	icall	ToLower(tmp)
001269:0x00248898:	cmps	tmp, cfg_parent_name
001269:0x002488a8:	bne	0x2488d0
001271:0x002488b0:	imove	#return, 0x000001
001271:0x002488c0:	release	full_path
001271:0x002488c8:	rts
001271:0x002488d0:	jump	0x248830
001275:0x002488d8:	imove	#return, 0x000000
001275:0x002488e8:	release	full_path
001275:0x002488f0:	rts
001275:0x002488f8:	release	full_path
001275:0x00248900:	rts
CGame::ObjectIsKindOf()
001292:0x00248980:	new	full_path, array<string>
001293:0x002489a0:	movefm	[0xb5bda4a8], object
001293:0x002489b0:	movefm	[0xb5bda4d0], full_path
001293:0x002489c0:	ncalli	CGame.ConfigGetObjectFullPath([0xb5bda4a8], [0xb5bda4d0])
001295:0x002489d0:	icall	ToLower(cfg_parent_name)
001297:0x002489e0:	imove	i, 0x000000
001297:0x002489f0:	jump	0x248a10
001297:0x002489f8:	move	@m00, i
001297:0x00248a08:	inc	i
001297:0x00248a10:	ncalli	array<string>.Count()
001297:0x00248a18:	cmpi	i, #return
001297:0x00248a28:	bge	0x248aa0
001299:0x00248a30:	icall	
001299:0x00248a40:	moves	tmp, #return
001300:0x00248a50:	icall	ToLower(tmp)
001301:0x00248a60:	cmps	tmp, cfg_parent_name
001301:0x00248a70:	bne	0x248a98
001303:0x00248a78:	imove	#return, 0x000001
001303:0x00248a88:	release	full_path
001303:0x00248a90:	rts
001303:0x00248a98:	jump	0x2489f8
001307:0x00248aa0:	imove	#return, 0x000000
001307:0x00248ab0:	release	full_path
001307:0x00248ab8:	rts
001307:0x00248ac0:	release	full_path
001307:0x00248ac8:	rts
CGame::ConfigFindClassIndex()
001320:0x00248ba8:	ncalli	CGame.ConfigGetChildrenCount(config_path)
001320:0x00248bb8:	move	class_count, #return
001321:0x00248bc8:	imove	index, 0x000000
001321:0x00248bd8:	jump	0x248bf8
001321:0x00248be0:	move	@m00, index
001321:0x00248bf0:	inc	index
001321:0x00248bf8:	cmpi	index, class_count
001321:0x00248c08:	bge	0x248c70
001323:0x00248c10:	moves	found_class, _s''
001324:0x00248c20:	icall	
001325:0x00248c38:	cmps	found_class, searched_member
001325:0x00248c48:	bne	0x248c68
001327:0x00248c50:	move	#return, index
001327:0x00248c60:	rts
001327:0x00248c68:	jump	0x248be0
001330:0x00248c70:	imove	#return, 0xffffffff
001330:0x00248c80:	rts
001330:0x00248c88:	rts
CGame::IsMissionMainMenu()
001389:0x00248c90:	call	
001389:0x00248ca0:	move	@m00, #return
001389:0x00248cb0:	cmpi	@m00, MISSION_STATE_MAINMENU
001389:0x00248cc0:	bne	0x248ce0
001389:0x00248cc8:	imove	#return, 0x000001
001389:0x00248cd8:	jump	0x248cf0
001389:0x00248ce0:	imove	#return, 0x000000
001389:0x00248cf0:	rts
001389:0x00248cf8:	rts
CGame::GetMenuDefaultCharacterData()
001397:0x00248d00:	cmpcm	m_CharacterData, null
001397:0x00248d10:	bne	0x248d68
001399:0x00248d18:	new	m_CharacterData, MenuDefaultCharacterData
001400:0x00248d38:	cmpi	fill_data, _i0
001400:0x00248d48:	beq	0x248d68
001401:0x00248d50:	ncall	GetGame()
001401:0x00248d58:	ncalli	CGame.GetMenuData()
001401:0x00248d60:	icall	
001403:0x00248d68:	movem	#return, m_CharacterData
001403:0x00248d78:	rts
001403:0x00248d80:	rts
CGame::GetAnalyticsServer()
001409:0x00248d88:	movem	#return, m_AnalyticsManagerServer
001409:0x00248d98:	rts
001409:0x00248da0:	rts
CGame::GetAnalyticsClient()
001414:0x00248da8:	movem	#return, m_AnalyticsManagerClient
001414:0x00248db8:	rts
001414:0x00248dc0:	rts
EffVomit::EffVomit()
//scripts/3_Game/effects\effectparticle\vomit.c
000005:0x00248dc8:	call	
000005:0x00248dd8:	rts
ScriptedEntity::IsInventoryVisible()
//scripts/3_Game/entities\scriptedentity.c
000064:0x00248de0:	imove	#return, 0x000000
000064:0x00248df0:	rts
000064:0x00248df8:	rts
RadialProgressBar::RadialProgressBar()
//scripts/3_Game/gui\effects\radialprogressbar.c
000016:0x00248e40:	imove	rotation, 0.00000
000016:0x00248e50:	imove	stage, 0x000000
000018:0x00248e60:	new	m_Anim, AnimatorTimer
000019:0x00248e80:	ncall	GetGame()
000019:0x00248e88:	call	
000019:0x00248e98:	movec	@c00, this
000019:0x00248ea8:	icall	SetInstance([0xb5d46e40], @c00)
000019:0x00248eb8:	icall	
000019:0x00248ec8:	release	#return
000019:0x00248ed0:	rts
RadialProgressBar::~RadialProgressBar()
000025:0x00248f18:	ncall	GetGame()
000025:0x00248f20:	call	
000025:0x00248f30:	movec	@c00, this
000025:0x00248f40:	icall	SetInstance([0xb5d46f18], @c00)
000025:0x00248f50:	icall	
000025:0x00248f60:	release	#return
000025:0x00248f68:	rts
RadialProgressBar::SetProgress()
000030:0x00248f70:	cmpf	progress, _f50.000000
000030:0x00248f80:	bge	0x248f98
000032:0x00248f88:	imove	stage, 0x000000
000034:0x00248f98:	divf	@f01, progress, _f100.000000
000034:0x00248fa8:	move	@f00, @f01
000034:0x00248fb8:	mulf	@f00, _f360.000000, @f00
000034:0x00248fc8:	move	rotation, @f00
000034:0x00248fd8:	rts
RadialProgressBar::Update()
000040:0x00249030:	movefm	[0xb5b3c880], m_Anim
000040:0x00249040:	call	
000042:0x00249050:	movefm	[0xd31345a8], m_Root
000042:0x00249060:	ncalli	Widget.GetChildren()
000042:0x00249068:	movetm	child, #return
000044:0x00249078:	imove	index, 0x000000
000045:0x00249088:	cmpcm	child, null
000045:0x00249098:	beq	0x2490f0
000047:0x002490a0:	call	
000048:0x002490b8:	move	@m00, index
000048:0x002490c8:	inc	index
000049:0x002490d0:	ncalli	Widget.GetSibling()
000049:0x002490d8:	movetm	child, #return
000049:0x002490e8:	jump	0x249088
000049:0x002490f0:	release	child
000049:0x002490f8:	rts
RadialProgressBar::UpdateChild()
000055:0x00249158:	movefm	[0xb5b3c880], m_Anim
000055:0x00249168:	call	
000055:0x00249178:	mulf	rotation_value, #return, RAD2DEG
000056:0x00249188:	ncalli	Widget.GetName()
000056:0x00249190:	moves	@s00, #return
000056:0x002491a0:	cmps	@s00, m_BarHider
000056:0x002491b0:	bne	0x2492b0
000058:0x002491b8:	cmpi	stage, _i0
000058:0x002491c8:	bne	0x2492a8
000060:0x002491d0:	cmpf	rotation, _f0.000000
000060:0x002491e0:	ble	0x249208
000062:0x002491e8:	ncalli	Widget.GetChildren()
000062:0x002491f0:	ncalli	Widget.Show(true, _i1)
000062:0x00249200:	jump	0x249220
000066:0x00249208:	ncalli	Widget.GetChildren()
000066:0x00249210:	ncalli	Widget.Show(false, _i1)
000069:0x00249220:	ncalli	Widget.GetChildren()
000069:0x00249228:	addf	@f01, start_rotation, rotation
000069:0x00249238:	move	@f00, @f01
000069:0x00249248:	ncalli	Widget.SetRotation(_f0.000000, _f0.000000, @f00, _i1)
000071:0x00249260:	cmpf	rotation, _f180.000000
000071:0x00249270:	ble	0x2492a8
000073:0x00249278:	imove	stage, 0x000001
000074:0x00249288:	ncalli	Widget.GetChildren()
000074:0x00249290:	ncalli	Widget.SetRotation(_f0.000000, _f0.000000, _f360.000000, _i1)
000074:0x002492a8:	jump	0x2493a8
000079:0x002492b0:	ncalli	Widget.GetName()
000079:0x002492b8:	moves	@s00, #return
000079:0x002492c8:	cmps	@s00, m_BarPart
000079:0x002492d8:	bne	0x2493a8
000081:0x002492e0:	cmpi	stage, _i0
000081:0x002492f0:	bne	0x249308
000082:0x002492f8:	ncalli	Widget.Show(false, _i1)
000083:0x00249308:	cmpi	stage, _i1
000083:0x00249318:	bne	0x2493a8
000085:0x00249320:	ncalli	Widget.Show(true, _i1)
000086:0x00249330:	addf	@f01, start_rotation, rotation
000086:0x00249340:	move	@f00, @f01
000086:0x00249350:	ncalli	Widget.SetRotation(_f0.000000, _f0.000000, @f00, _i1)
000088:0x00249368:	cmpf	rotation, _f360.000000
000088:0x00249378:	ble	0x2493a8
000090:0x00249380:	imove	stage, 0x000002
000091:0x00249390:	ncalli	Widget.SetRotation(_f0.000000, _f0.000000, _f180.000000, _i1)
000091:0x002493a8:	rts
RadialProgressBar::OnWidgetScriptInit()
000100:0x00249400:	movem	m_Root, w
000101:0x00249410:	movefm	[0xd31345a8], m_Root
000101:0x00249420:	ncalli	Widget.GetName()
000101:0x00249428:	adds	@s00, _s'BarHider_', #return
000101:0x00249438:	moves	m_BarHider, @s00
000102:0x00249448:	movefm	[0xd31345a8], m_Root
000102:0x00249458:	ncalli	Widget.GetName()
000102:0x00249460:	adds	@s00, _s'BarPart2_', #return
000102:0x00249470:	moves	m_BarPart, @s00
000103:0x00249480:	move	speed, speed
000103:0x00249490:	movefm	[0xb5b3c880], m_Anim
000103:0x002494a0:	call	
000103:0x002494b0:	rts
RightGap::OnUpdate()
//scripts/3_Game/gui\spacers\rightgap.c
000022:0x00249508:	ncalli	Widget.SetFlags(_i48, false)
000023:0x00249518:	ncalli	Widget.GetParent()
000023:0x00249520:	icall	
000024:0x00249530:	citf	@f01, gap
000024:0x00249540:	subf	@f01, width, @f01
000024:0x00249550:	move	@f00, @f01
000024:0x00249560:	ncalli	Widget.SetSize(@f00, height, _i1)
000025:0x00249578:	imove	#return, 0x000000
000025:0x00249588:	rts
000025:0x00249590:	rts
Entity::SetAnimationPhaseNow()
//scripts/3_Game/entities\entity.c
000020:0x00249598:	ncalli	Entity.ResetAnimationPhase(animation, phase)
000021:0x002495a8:	ncalli	Entity.SetAnimationPhase(animation, phase)
000021:0x002495b8:	rts
Hit_Rubber::Hit_Rubber()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_rubber.c
000005:0x002495c0:	call	
000006:0x002495d0:	call	
000007:0x002495e0:	call	
000007:0x002495f0:	rts
Rotator::Rotator()
//scripts/3_Game/gui\effects\rotator.c
000012:0x002495f8:	new	m_anim, AnimatorTimer
000012:0x00249618:	rts
Rotator::Update()
000018:0x00249620:	cmpcm	m_root, null
000018:0x00249630:	beq	0x2496a0
000020:0x00249638:	movefm	[0xb5b3c880], m_anim
000020:0x00249648:	call	
000020:0x00249658:	mulf	@f01, #return, RAD2DEG
000020:0x00249668:	move	@f00, @f01
000020:0x00249678:	movefm	[0xd31345a8], m_root
000020:0x00249688:	ncalli	Widget.SetRotation(_f0.000000, _f0.000000, @f00, _i1)
000020:0x002496a0:	rts
Rotator::OnWidgetScriptInit()
000027:0x002496a8:	movem	m_root, w
000028:0x002496b8:	move	speed, speed
000028:0x002496c8:	movefm	[0xb5b3c880], m_anim
000028:0x002496d8:	call	
000028:0x002496e8:	rts
PPEUnderWater::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppeunderwater.c
000012:0x002496f0:	imove	#return, 0x000001
000012:0x00249700:	rts
000012:0x00249708:	rts
PPEUnderWater::GetDefaultMaterialPath()
000017:0x00249738:	moves	#return, _s'Graphics/Materials/postprocess/uw'
000017:0x00249748:	rts
000017:0x00249750:	rts
PPEUnderWater::RegisterMaterialParameters()
000022:0x00249870:	call	
000023:0x00249890:	call	
000024:0x002498b0:	call	
000025:0x002498d0:	call	
000026:0x002498f0:	call	
000026:0x00249910:	rts
PPERequester_FeverEffects::SetFeverIntensity()
//scripts/3_Game/ppemanager\requesters\pperfever.c
000005:0x00249918:	call	
000005:0x00249940:	rts
GetDispatcher()
//scripts/3_Game/tools\dispatcher.c
000022:0x00249948:	cmpcm	g_Dispatcher, NULL
000022:0x00249958:	bne	0x249978
000025:0x00249960:	movetm	#return, NULL
000025:0x00249970:	rts
000028:0x00249978:	movem	#return, g_Dispatcher
000028:0x00249988:	rts
000028:0x00249990:	rts
SetDispatcher()
000033:0x00249998:	movem	g_Dispatcher, dispatcher
000033:0x002499a8:	rts
CallMethod()
000038:0x00249a00:	call	GetDispatcher()
000038:0x00249a10:	movem	dis, #return
000038:0x00249a20:	release	#return
000039:0x00249a28:	cmpcm	dis, null
000039:0x00249a38:	beq	0x249a80
000041:0x00249a40:	call	
000041:0x00249a58:	movem	#return, #return
000041:0x00249a68:	release	dis
000041:0x00249a70:	release	#return
000041:0x00249a78:	rts
000044:0x00249a80:	movetm	#return, NULL
000044:0x00249a90:	release	dis
000044:0x00249a98:	rts
000044:0x00249aa0:	release	dis
000044:0x00249aa8:	rts
HandFSM::GetCurrentStateID()
//scripts/3_Game/systems\inventory\handfsm.c
000036:0x00249ab0:	imove	#return, 0x000000
000036:0x00249ac0:	rts
000036:0x00249ac8:	rts
HandFSM::SyncStateFromID()
000070:0x00249ad0:	imove	#return, 0x000000
000070:0x00249ae0:	rts
000070:0x00249ae8:	rts
HandFSM::OnStoreLoad()
000084:0x00249af0:	imove	#return, 0x000001
000084:0x00249b00:	rts
000084:0x00249b08:	rts
Hit_Dirt::Hit_Dirt()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_dirt.c
000005:0x00249b10:	call	
000006:0x00249b20:	call	
000007:0x00249b30:	call	
000007:0x00249b40:	rts
BehaviourGroupInfectedPackWaypointParams::BehaviourGroupInfectedPackWaypointParams()
//scripts/3_Game/ai\aigroupbehaviour.c
000014:0x00249b48:	movev	m_CenterPosition, pos
000015:0x00249b58:	move	m_Radius, radius
000015:0x00249b68:	rts
ConnectErrorServerModule::ConnectErrorServerModule()
//scripts/3_Game/global\errormodulehandler\connecterrorservermodule.c
000038:0x00249ba8:	ncalli	ConnectErrorServerModule.SetCategory(_i2)
000038:0x00249bb8:	rts
ConnectErrorServerModule::InitOptionalVariables()
000043:0x00249bc0:	call	
000045:0x00249bd0:	moves	m_Header, _s'#server_browser_connecting_failed'
000045:0x00249be0:	rts
ConnectErrorServerModule::FillErrorDataMap()
000050:0x0024a020:	call	
000052:0x0024a030:	call	
000053:0x0024a058:	call	
000054:0x0024a080:	call	
000055:0x0024a0a8:	call	
000056:0x0024a0d0:	call	
000058:0x0024a0f8:	call	
000059:0x0024a120:	call	
000060:0x0024a148:	call	
000061:0x0024a170:	call	
000062:0x0024a198:	call	
000063:0x0024a1c0:	call	
000064:0x0024a1e8:	call	
000065:0x0024a210:	call	
000066:0x0024a238:	call	
000067:0x0024a260:	call	
000068:0x0024a288:	call	
000069:0x0024a2b0:	call	
000070:0x0024a2d8:	adds	@s02, _s'#STR_build_smaller', _s'
'
000070:0x0024a2e8:	moves	@s01, @s02
000070:0x0024a2f8:	adds	@s01, @s01, _s'#STR_PLEASE_UPDATE'
000070:0x0024a308:	moves	@s00, @s01
000070:0x0024a318:	call	
000071:0x0024a340:	adds	@s02, _s'#STR_build_greater', _s'
'
000071:0x0024a350:	moves	@s01, @s02
000071:0x0024a360:	adds	@s01, @s01, _s'#STR_PLEASE_WAIT'
000071:0x0024a370:	moves	@s00, @s01
000071:0x0024a380:	call	
000072:0x0024a3a8:	adds	@s02, _s'#STR_version_smaller', _s'
'
000072:0x0024a3b8:	moves	@s01, @s02
000072:0x0024a3c8:	adds	@s01, @s01, _s'#STR_PLEASE_UPDATE'
000072:0x0024a3d8:	moves	@s00, @s01
000072:0x0024a3e8:	call	
000073:0x0024a410:	adds	@s02, _s'#STR_version_greater', _s'
'
000073:0x0024a420:	moves	@s01, @s02
000073:0x0024a430:	adds	@s01, @s01, _s'#STR_PLEASE_WAIT'
000073:0x0024a440:	moves	@s00, @s01
000073:0x0024a450:	call	
000074:0x0024a478:	call	
000075:0x0024a4a0:	call	
000076:0x0024a4c8:	call	
000077:0x0024a4f0:	call	
000077:0x0024a518:	rts
ConnectErrorServerModule::OnEvent()
000082:0x0024a548:	movea	#switch, eventTypeId
000082:0x0024a558:	movea	@m00, MPSessionPlayerReadyEventTypeID
000082:0x0024a568:	cmpc	@m00, #switch
000082:0x0024a578:	bne	0x24a5b0
000086:0x0024a580:	ncalli	DayZGame.GetUIManager()
000086:0x0024a588:	move	[0xb5c1ac28], m_LastErrorThrown
000086:0x0024a598:	ncalli	UIManager.CloseSpecificDialog([0xb5c1ac28])
000088:0x0024a5a8:	jump	0x24a5b8
000091:0x0024a5b0:	jump	0x24a5b8
000091:0x0024a5b8:	rts
EffectParticle::InitEffect()
//scripts/3_Game/effects\effectparticle.c
000052:0x0024a600:	call	
000060:0x0024a610:	icall	SetInstance([0xb5d48600], this)
000060:0x0024a620:	movefm	[0xb425b340], Event_OnStopped
000060:0x0024a630:	icall	
000060:0x0024a640:	rts
EffectParticle::GetDebugName()
000070:0x0024a6f0:	call	
000070:0x0024a700:	cmpcm	#return, null
000070:0x0024a710:	beq	0x24a750
000072:0x0024a718:	call	
000072:0x0024a728:	icall	
000072:0x0024a730:	moves	identifier, #return
000072:0x0024a740:	release	#return
000072:0x0024a748:	jump	0x24a760
000076:0x0024a750:	moves	identifier, _s'NO_PARTICLE'
000076:0x0024a760:	release	#return
000079:0x0024a768:	call	
000079:0x0024a778:	icall	Format(_s'%1:%2:%3', #return, m_ParticleID, identifier, _c0, _c0, _c0, _c0, _c0, _c0)
000079:0x0024a7a8:	moves	#return, #return
000079:0x0024a7b8:	rts
000079:0x0024a7c0:	rts
EffectParticle::ValidateStart()
000089:0x0024a7f0:	call	
000089:0x0024a800:	cmpcm	#return, null
000089:0x0024a810:	bne	0x24a878
000091:0x0024a818:	call	
000091:0x0024a828:	icall	Format(_s'No Particle started playing, stopping EffectParticle: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000091:0x0024a858:	icall	ErrorEx(#return, _i1)
000092:0x0024a868:	call	
000092:0x0024a878:	release	#return
000092:0x0024a880:	rts
EffectParticle::GetEffectType()
000109:0x0024a888:	imove	#return, 0x000002
000109:0x0024a898:	rts
000109:0x0024a8a0:	rts
EffectParticle::IsParticle()
000118:0x0024a8a8:	imove	#return, 0x000001
000118:0x0024a8b8:	rts
000118:0x0024a8c0:	rts
EffectParticle::SetParticle()
000137:0x0024aa68:	cmpcm	m_ParticleObj, null
000137:0x0024aa78:	beq	0x24ab40
000139:0x0024aa80:	movefm	[0xb5b33950], m_ParticleObj
000139:0x0024aa90:	call	
000139:0x0024aaa0:	movem	ope, #return
000139:0x0024aab0:	release	#return
000140:0x0024aab8:	movefm	@c00, ope
000140:0x0024aac8:	movefm	@c01, Event_OnParticleStart
000140:0x0024aad8:	icall	SetInstance([0xb5d48958], this)
000140:0x0024aae8:	icall	
000141:0x0024aaf8:	movefm	@c00, ope
000141:0x0024ab08:	movefm	@c01, Event_OnParticleStop
000141:0x0024ab18:	icall	SetInstance([0xb5d48998], this)
000141:0x0024ab28:	icall	
000141:0x0024ab38:	release	ope
000145:0x0024ab40:	movem	m_ParticleObj, p
000148:0x0024ab50:	cmpcm	m_ParticleObj, null
000148:0x0024ab60:	beq	0x24ac28
000150:0x0024ab68:	movefm	[0xb5b33950], m_ParticleObj
000150:0x0024ab78:	call	
000150:0x0024ab88:	movem	npe, #return
000150:0x0024ab98:	release	#return
000151:0x0024aba0:	movefm	@c00, npe
000151:0x0024abb0:	movefm	@c01, Event_OnParticleStart
000151:0x0024abc0:	icall	SetInstance([0xb5d48a28], this)
000151:0x0024abd0:	icall	
000154:0x0024abe0:	movefm	@c00, npe
000154:0x0024abf0:	movefm	@c01, Event_OnParticleStop
000154:0x0024ac00:	icall	SetInstance([0xb5d48a68], this)
000154:0x0024ac10:	icall	
000154:0x0024ac20:	release	npe
000154:0x0024ac28:	rts
EffectParticle::GetParticle()
000164:0x0024ac30:	movem	#return, m_ParticleObj
000164:0x0024ac40:	rts
000164:0x0024ac48:	rts
EffectParticle::Start()
000183:0x0024acc0:	cmpi	m_ParticleID, _i0
000183:0x0024acd0:	ble	0x24ae00
000185:0x0024acd8:	call	
000185:0x0024ace8:	movev	pos, #return
000186:0x0024acf8:	call	
000186:0x0024ad08:	movev	ori, #return
000188:0x0024ad18:	cmpcm	m_ParentObject, null
000188:0x0024ad28:	beq	0x24ad70
000190:0x0024ad30:	call	
000190:0x0024ad40:	movev	pos, #return
000191:0x0024ad50:	call	
000191:0x0024ad60:	movev	ori, #return
000194:0x0024ad70:	call	GetInstance()
000194:0x0024ad80:	move	id, m_ParticleID
000194:0x0024ad90:	call	
000194:0x0024ada0:	call	
000194:0x0024adb0:	call	
000194:0x0024add8:	call	
000194:0x0024ade8:	release	#return
000194:0x0024adf0:	release	#return
000194:0x0024adf8:	release	#return
000197:0x0024ae00:	call	
000197:0x0024ae10:	rts
EffectParticle::Stop()
000206:0x0024ae18:	call	
000206:0x0024ae28:	cmpcm	#return, null
000206:0x0024ae38:	beq	0x24ae88
000208:0x0024ae40:	call	
000208:0x0024ae50:	call	
000208:0x0024ae60:	release	#return
000209:0x0024ae68:	movetm	p, null
000209:0x0024ae78:	call	
000209:0x0024ae88:	release	#return
000212:0x0024ae90:	call	
000212:0x0024aea0:	rts
EffectParticle::AttachTo()
000230:0x0024aea8:	call	
000231:0x0024aeb8:	call	
000232:0x0024aec8:	call	
000233:0x0024aed8:	call	
000236:0x0024aee8:	call	
000236:0x0024af08:	rts
EffectParticle::ReAttach()
000245:0x0024af10:	call	
000245:0x0024af20:	call	
000245:0x0024af30:	call	
000245:0x0024af40:	call	
000245:0x0024af50:	call	
000245:0x0024af70:	release	#return
000245:0x0024af78:	rts
EffectParticle::AddAsChild()
000253:0x0024afa8:	call	
000253:0x0024afb8:	movem	p, #return
000253:0x0024afc8:	release	#return
000254:0x0024afd0:	cmpcm	p, null
000254:0x0024afe0:	beq	0x24b008
000256:0x0024afe8:	call	
000256:0x0024b008:	release	p
000256:0x0024b010:	rts
EffectParticle::SetParticleID()
000305:0x0024b018:	move	m_ParticleID, id
000305:0x0024b028:	rts
EffectParticle::GetParticleID()
000315:0x0024b030:	move	#return, m_ParticleID
000315:0x0024b040:	rts
000315:0x0024b048:	rts
EffectParticle::SetCurrentParticleID()
000325:0x0024b078:	move	m_ParticleID, id
000327:0x0024b088:	call	
000327:0x0024b098:	movem	p, #return
000327:0x0024b0a8:	release	#return
000328:0x0024b0b0:	cmpcm	p, null
000328:0x0024b0c0:	beq	0x24b0d8
000330:0x0024b0c8:	call	
000330:0x0024b0d8:	release	p
000330:0x0024b0e0:	rts
EffectParticle::GetCurrentParticleID()
000340:0x0024b110:	call	
000340:0x0024b120:	movem	p, #return
000340:0x0024b130:	release	#return
000341:0x0024b138:	cmpcm	p, null
000341:0x0024b148:	beq	0x24b188
000343:0x0024b150:	call	
000343:0x0024b160:	move	#return, #return
000343:0x0024b170:	release	p
000343:0x0024b178:	rts
000343:0x0024b180:	jump	0x24b1a8
000347:0x0024b188:	imove	#return, 0xffffffff
000347:0x0024b198:	release	p
000347:0x0024b1a0:	rts
000347:0x0024b1a8:	release	p
000347:0x0024b1b0:	rts
EffectParticle::SetCurrentParent()
000358:0x0024b1b8:	call	
000360:0x0024b1d0:	call	
000360:0x0024b1e0:	rts
EffectParticle::GetCurrentParent()
000369:0x0024b210:	call	
000369:0x0024b220:	movem	p, #return
000369:0x0024b230:	release	#return
000371:0x0024b238:	cmpcm	p, null
000371:0x0024b248:	beq	0x24b298
000372:0x0024b250:	ncalli	Particle.GetParent()
000372:0x0024b258:	icall	SafeCastType([0xb5b006f0], @c01, #return)
000372:0x0024b270:	movetm	#return, @c01
000372:0x0024b280:	release	p
000372:0x0024b288:	rts
000372:0x0024b290:	jump	0x24b2d0
000374:0x0024b298:	call	
000374:0x0024b2a8:	movem	#return, #return
000374:0x0024b2b8:	release	p
000374:0x0024b2c0:	release	#return
000374:0x0024b2c8:	rts
000374:0x0024b2d0:	release	p
000374:0x0024b2d8:	rts
EffectParticle::SetCurrentPosition()
000384:0x0024b308:	call	
000386:0x0024b320:	call	
000386:0x0024b330:	movem	p, #return
000386:0x0024b340:	release	#return
000388:0x0024b348:	cmpcm	p, null
000388:0x0024b358:	beq	0x24b370
000389:0x0024b360:	ncalli	Particle.SetPosition(pos)
000389:0x0024b370:	release	p
000389:0x0024b378:	rts
EffectParticle::GetCurrentPosition()
000398:0x0024b3a8:	call	
000398:0x0024b3b8:	movem	p, #return
000398:0x0024b3c8:	release	#return
000400:0x0024b3d0:	cmpcm	p, null
000400:0x0024b3e0:	beq	0x24b418
000401:0x0024b3e8:	ncalli	Particle.GetPosition()
000401:0x0024b3f0:	movev	#return, #return
000401:0x0024b400:	release	p
000401:0x0024b408:	rts
000401:0x0024b410:	jump	0x24b448
000403:0x0024b418:	call	
000403:0x0024b428:	movev	#return, #return
000403:0x0024b438:	release	p
000403:0x0024b440:	rts
000403:0x0024b448:	release	p
000403:0x0024b450:	rts
EffectParticle::SetCurrentLocalPosition()
000413:0x0024b4a8:	call	
000415:0x0024b4c0:	call	
000415:0x0024b4d0:	movem	p, #return
000415:0x0024b4e0:	release	#return
000416:0x0024b4e8:	cmpcm	p, null
000416:0x0024b4f8:	beq	0x24b570
000418:0x0024b500:	call	
000418:0x0024b510:	movem	parent, #return
000418:0x0024b520:	release	#return
000420:0x0024b528:	cmpcm	parent, null
000420:0x0024b538:	beq	0x24b558
000421:0x0024b540:	call	
000421:0x0024b550:	jump	0x24b568
000423:0x0024b558:	ncalli	Particle.SetPosition(pos)
000423:0x0024b568:	release	parent
000423:0x0024b570:	release	p
000423:0x0024b578:	rts
EffectParticle::GetCurrentLocalPosition()
000433:0x0024b5d0:	call	
000433:0x0024b5e0:	movem	p, #return
000433:0x0024b5f0:	release	#return
000435:0x0024b5f8:	cmpcm	p, null
000435:0x0024b608:	beq	0x24b6d8
000437:0x0024b610:	call	
000437:0x0024b620:	movem	parent, #return
000437:0x0024b630:	release	#return
000439:0x0024b638:	cmpcm	parent, null
000439:0x0024b648:	beq	0x24b698
000440:0x0024b650:	ncalli	Particle.GetPosition()
000440:0x0024b658:	call	
000440:0x0024b668:	movev	#return, #return
000440:0x0024b678:	release	parent
000440:0x0024b680:	release	p
000440:0x0024b688:	rts
000440:0x0024b690:	jump	0x24b6c8
000442:0x0024b698:	ncalli	Particle.GetPosition()
000442:0x0024b6a0:	movev	#return, #return
000442:0x0024b6b0:	release	parent
000442:0x0024b6b8:	release	p
000442:0x0024b6c0:	rts
000442:0x0024b6c8:	release	parent
000442:0x0024b6d0:	jump	0x24b708
000445:0x0024b6d8:	call	
000445:0x0024b6e8:	movev	#return, #return
000445:0x0024b6f8:	release	p
000445:0x0024b700:	rts
000445:0x0024b708:	release	p
000445:0x0024b710:	rts
EffectParticle::SetOrientation()
000455:0x0024b718:	movev	m_Orientation, ori
000455:0x0024b728:	rts
EffectParticle::GetOrientation()
000465:0x0024b730:	movev	#return, m_Orientation
000465:0x0024b740:	rts
000465:0x0024b748:	rts
EffectParticle::SetCurrentOrientation()
000474:0x0024b778:	cmpi	updateCached, _i0
000474:0x0024b788:	beq	0x24b7a0
000475:0x0024b790:	call	
000477:0x0024b7a0:	call	
000477:0x0024b7b0:	movem	p, #return
000477:0x0024b7c0:	release	#return
000479:0x0024b7c8:	cmpcm	p, null
000479:0x0024b7d8:	beq	0x24b7f0
000480:0x0024b7e0:	ncalli	Particle.SetOrientation(ori)
000480:0x0024b7f0:	release	p
000480:0x0024b7f8:	rts
EffectParticle::GetCurrentOrientation()
000489:0x0024b828:	call	
000489:0x0024b838:	movem	p, #return
000489:0x0024b848:	release	#return
000491:0x0024b850:	cmpcm	p, null
000491:0x0024b860:	beq	0x24b898
000492:0x0024b868:	ncalli	Particle.GetOrientation()
000492:0x0024b870:	movev	#return, #return
000492:0x0024b880:	release	p
000492:0x0024b888:	rts
000492:0x0024b890:	jump	0x24b8b8
000494:0x0024b898:	movev	#return, Zero
000494:0x0024b8a8:	release	p
000494:0x0024b8b0:	rts
000494:0x0024b8b8:	release	p
000494:0x0024b8c0:	rts
EffectParticle::ForceParticleRotationRelativeToWorld()
000505:0x0024b8c8:	move	m_ForceRotationRelativeToWorld, state
000505:0x0024b8d8:	rts
EffectParticle::IsParticleRotationRelativeToWorld()
000515:0x0024b908:	call	
000515:0x0024b918:	movem	p, #return
000515:0x0024b928:	release	#return
000517:0x0024b930:	cmpcm	p, null
000517:0x0024b940:	beq	0x24b978
000518:0x0024b948:	ncalli	Particle.IsHierarchyPositionOnly()
000518:0x0024b950:	move	#return, #return
000518:0x0024b960:	release	p
000518:0x0024b968:	rts
000518:0x0024b970:	jump	0x24b998
000520:0x0024b978:	move	#return, m_ForceRotationRelativeToWorld
000520:0x0024b988:	release	p
000520:0x0024b990:	rts
000520:0x0024b998:	release	p
000520:0x0024b9a0:	rts
EffectParticle::IsParticleCurrentRotationRelativeToWorld()
000529:0x0024b9d0:	call	
000529:0x0024b9e0:	movem	p, #return
000529:0x0024b9f0:	release	#return
000531:0x0024b9f8:	cmpcm	p, null
000531:0x0024ba08:	beq	0x24ba40
000532:0x0024ba10:	ncalli	Particle.IsHierarchyPositionOnly()
000532:0x0024ba18:	move	#return, #return
000532:0x0024ba28:	release	p
000532:0x0024ba30:	rts
000532:0x0024ba38:	jump	0x24ba60
000534:0x0024ba40:	imove	#return, 0x000000
000534:0x0024ba50:	release	p
000534:0x0024ba58:	rts
000534:0x0024ba60:	release	p
000534:0x0024ba68:	rts
EffectParticle::SetDecalOwner()
000564:0x0024ba70:	movem	m_Object, o
000564:0x0024ba80:	rts
EconomyMapStrings::Category()
//scripts/3_Game/ce\centraleconomy.c
000114:0x0024bab0:	icall	Format(_s'category:%1', category, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000114:0x0024bae0:	moves	#return, #return
000114:0x0024baf0:	rts
000114:0x0024baf8:	rts
EconomyMapStrings::Tag()
000129:0x0024bb28:	icall	Format(_s'tag:%1', tag, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000129:0x0024bb58:	moves	#return, #return
000129:0x0024bb68:	rts
000129:0x0024bb70:	rts
Hit_Gravel::Hit_Gravel()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_gravel.c
000005:0x0024bb78:	call	
000006:0x0024bb88:	call	
000007:0x0024bb98:	call	
000007:0x0024bba8:	rts
Selection::GetVertexPosition()
//scripts/3_Game/gameplay.c
000189:0x0024bc30:	ncalli	Selection.GetLODVertexIndex(index)
000189:0x0024bc40:	move	lodIndex, #return
000190:0x0024bc50:	cmpi	lodIndex, _i-1
000190:0x0024bc60:	bne	0x24bc90
000192:0x0024bc68:	call	Error(_s'Vertex doesn't exist')
000193:0x0024bc78:	movev	#return, Zero
000193:0x0024bc88:	rts
000196:0x0024bc90:	ncalli	LOD.GetVertexPosition(lodIndex)
000196:0x0024bca0:	movev	#return, #return
000196:0x0024bcb0:	rts
000196:0x0024bcb8:	rts
LOD::GetSelectionByName()
000223:0x0024bd38:	new	selections, array<Selection>
000224:0x0024bd58:	movefm	[0xb5c1bf40], selections
000224:0x0024bd68:	ncalli	LOD.GetSelections([0xb5c1bf40])
000226:0x0024bd78:	imove	i, 0x000000
000226:0x0024bd88:	jump	0x24bd98
000226:0x0024bd90:	inc	i
000226:0x0024bd98:	ncalli	array<Selection>.Count()
000226:0x0024bda0:	cmpi	i, #return
000226:0x0024bdb0:	bge	0x24be50
000228:0x0024bdb8:	icall	
000228:0x0024bdc8:	ncalli	Selection.GetName()
000228:0x0024bdd0:	moves	selection_name, #return
000229:0x0024bde0:	icall	ToLower(selection_name)
000230:0x0024bdf0:	icall	ToLower(name)
000231:0x0024be00:	cmps	selection_name, name
000231:0x0024be10:	bne	0x24be48
000233:0x0024be18:	icall	
000233:0x0024be28:	movec	#return, #return
000233:0x0024be38:	release	selections
000233:0x0024be40:	rts
000233:0x0024be48:	jump	0x24bd90
000237:0x0024be50:	movec	#return, null
000237:0x0024be60:	release	selections
000237:0x0024be68:	rts
000237:0x0024be70:	release	selections
000237:0x0024be78:	rts
Mission::GetHud()
000699:0x0024be80:	movetm	#return, NULL
000699:0x0024be90:	rts
000699:0x0024be98:	rts
Mission::GetInventoryDropCallback()
000704:0x0024bea0:	movetm	#return, NULL
000704:0x0024beb0:	rts
000704:0x0024beb8:	rts
Mission::CreateScriptedMenu()
000711:0x0024bec0:	movetm	#return, NULL
000711:0x0024bed0:	rts
000711:0x0024bed8:	rts
Mission::CreateScriptedWindow()
000716:0x0024bee0:	movetm	#return, NULL
000716:0x0024bef0:	rts
000716:0x0024bef8:	rts
Mission::GetWorldData()
000721:0x0024bf00:	movetm	#return, NULL
000721:0x0024bf10:	rts
000721:0x0024bf18:	rts
Mission::GetWorldLighting()
000726:0x0024bf20:	movetm	#return, NULL
000726:0x0024bf30:	rts
000726:0x0024bf38:	rts
Mission::IsPaused()
000731:0x0024bf40:	imove	#return, 0x000000
000731:0x0024bf50:	rts
000731:0x0024bf58:	rts
Mission::IsGame()
000736:0x0024bf60:	imove	#return, 0x000000
000736:0x0024bf70:	rts
000736:0x0024bf78:	rts
Mission::IsServer()
000741:0x0024bf80:	imove	#return, 0x000000
000741:0x0024bf90:	rts
000741:0x0024bf98:	rts
Mission::IsMissionGameplay()
000760:0x0024bfa0:	imove	#return, 0x000000
000760:0x0024bfb0:	rts
000760:0x0024bfb8:	rts
Mission::InsertCorpse()
000791:0x0024bfc0:	imove	#return, 0x000000
000791:0x0024bfd0:	rts
000791:0x0024bfd8:	rts
Mission::GetRespawnModeClient()
000805:0x0024bfe0:	imove	#return, 0xffffffff
000805:0x0024bff0:	rts
000805:0x0024bff8:	rts
Mission::GetMicrophoneIcon()
000812:0x0024c000:	movetm	#return, null
000812:0x0024c010:	rts
000812:0x0024c018:	rts
Mission::GetOnInputDeviceChanged()
000825:0x0024c020:	cmpcm	m_OnInputDeviceChanged, null
000825:0x0024c030:	bne	0x24c058
000827:0x0024c038:	new	m_OnInputDeviceChanged, ScriptInvoker
000830:0x0024c058:	movem	#return, m_OnInputDeviceChanged
000830:0x0024c068:	rts
000830:0x0024c070:	rts
Mission::GetOnInputPresetChanged()
000835:0x0024c078:	cmpcm	m_OnInputPresetChanged, null
000835:0x0024c088:	bne	0x24c0b0
000837:0x0024c090:	new	m_OnInputPresetChanged, ScriptInvoker
000840:0x0024c0b0:	movem	#return, m_OnInputPresetChanged
000840:0x0024c0c0:	rts
000840:0x0024c0c8:	rts
Mission::GetOnInputDeviceConnected()
000845:0x0024c0d0:	cmpcm	m_OnInputDeviceConnected, null
000845:0x0024c0e0:	bne	0x24c108
000847:0x0024c0e8:	new	m_OnInputDeviceConnected, ScriptInvoker
000850:0x0024c108:	movem	#return, m_OnInputDeviceConnected
000850:0x0024c118:	rts
000850:0x0024c120:	rts
Mission::GetOnInputDeviceDisconnected()
000855:0x0024c128:	cmpcm	m_OnInputDeviceDisconnected, null
000855:0x0024c138:	bne	0x24c160
000857:0x0024c140:	new	m_OnInputDeviceDisconnected, ScriptInvoker
000860:0x0024c160:	movem	#return, m_OnInputDeviceDisconnected
000860:0x0024c170:	rts
000860:0x0024c178:	rts
Mission::Mission()
000669:0x0024c180:	new	m_OnInputDeviceChanged, ScriptInvoker
000669:0x0024c1a0:	new	m_OnInputPresetChanged, ScriptInvoker
000669:0x0024c1c0:	new	m_OnInputDeviceConnected, ScriptInvoker
000669:0x0024c1e0:	new	m_OnInputDeviceDisconnected, ScriptInvoker
000669:0x0024c200:	rts
MenuData::OnSetDefaultCharacter()
000889:0x0024c230:	call	
000889:0x0024c240:	cmpcm	#return, null
000889:0x0024c250:	bne	0x24c278
000891:0x0024c258:	call	Error(_s'MenuData | OnSetDefaultCharacter - failed to get data class!')
000892:0x0024c268:	release	#return
000892:0x0024c270:	rts
000892:0x0024c278:	release	#return
000895:0x0024c280:	call	
000895:0x0024c290:	call	
000895:0x0024c2a0:	release	#return
000896:0x0024c2a8:	ncalli	MenuData.SaveCharactersLocal()
000896:0x0024c2b0:	rts
MenuData::OnGetDefaultCharacter()
000902:0x0024c2e0:	call	
000902:0x0024c2f0:	cmpcm	#return, null
000902:0x0024c300:	bne	0x24c338
000904:0x0024c308:	call	Error(_s'MenuData | OnGetDefaultCharacter - failed to get data class!')
000905:0x0024c318:	imove	#return, 0x000000
000905:0x0024c328:	release	#return
000905:0x0024c330:	rts
000905:0x0024c338:	release	#return
000908:0x0024c340:	call	
000908:0x0024c350:	call	
000908:0x0024c360:	cmpi	#return, _i0
000908:0x0024c370:	beq	0x24c398
000910:0x0024c378:	imove	#return, 0x000001
000910:0x0024c388:	release	#return
000910:0x0024c390:	rts
000910:0x0024c398:	release	#return
000912:0x0024c3a0:	imove	#return, 0x000000
000912:0x0024c3b0:	rts
000912:0x0024c3b8:	rts
MenuData::GetMenuDefaultCharacterDataInstance()
000929:0x0024c3c0:	ncall	GetGame()
000929:0x0024c3c8:	call	
000929:0x0024c3d8:	movem	#return, #return
000929:0x0024c3e8:	release	#return
000929:0x0024c3f0:	rts
000929:0x0024c3f8:	rts
MenuDefaultCharacterData::MenuDefaultCharacterData()
000949:0x0024c400:	call	
000949:0x0024c410:	rts
MenuDefaultCharacterData::Init()
000954:0x0024c418:	ncall	GetGame()
000954:0x0024c420:	ncalli	CGame.IsDedicatedServer()
000954:0x0024c428:	cmpi	#return, _i0
000954:0x0024c438:	bne	0x24c458
000956:0x0024c440:	ncall	GetGame()
000956:0x0024c448:	ncalli	CGame.GetMenuData()
000956:0x0024c450:	ncalli	MenuData.LoadCharactersLocal()
000958:0x0024c458:	new	m_AttachmentsMap, map<int,string>
000958:0x0024c478:	rts
MenuDefaultCharacterData::ClearAttachmentsMap()
000963:0x0024c480:	movefm	[0xd3158338], m_AttachmentsMap
000963:0x0024c490:	ncalli	map<int,string>.Clear()
000963:0x0024c498:	rts
MenuDefaultCharacterData::SetDefaultAttachment()
000968:0x0024c4a0:	movefm	[0xd3158338], m_AttachmentsMap
000968:0x0024c4b0:	icall	
000968:0x0024c4c0:	rts
MenuDefaultCharacterData::GenerateRandomEquip()
000973:0x0024c570:	call	
000977:0x0024c580:	imove	i, 0x000000
000977:0x0024c590:	jump	0x24c5b0
000977:0x0024c598:	move	@m00, i
000977:0x0024c5a8:	inc	i
000977:0x0024c5b0:	call	GetAttachmentSlotsArray()
000977:0x0024c5c0:	ncalli	array<int>.Count()
000977:0x0024c5c8:	cmpi	i, #return
000977:0x0024c5d8:	bge	0x24c6b0
000979:0x0024c5e0:	call	GetAttachmentSlotsArray()
000979:0x0024c5f0:	icall	
000979:0x0024c600:	move	slot_ID, #return
000979:0x0024c610:	release	#return
000980:0x0024c618:	call	GetConfigArrayCountFromSlotID(slot_ID)
000980:0x0024c628:	move	@m00, #return
000980:0x0024c638:	cmpi	@m00, _i0
000980:0x0024c648:	ble	0x24c6a0
000982:0x0024c650:	call	GetConfigAttachmentTypes(slot_ID)
000982:0x0024c660:	call	
000982:0x0024c670:	moves	attachment_type, #return
000982:0x0024c680:	release	#return
000984:0x0024c688:	call	
000984:0x0024c6a0:	jump	0x24c598
000984:0x0024c6a8:	release	#return
000984:0x0024c6b0:	rts
MenuDefaultCharacterData::EquipDefaultCharacter()
000991:0x0024c820:	cmpcm	player, null
000991:0x0024c830:	bne	0x24c850
000993:0x0024c838:	icall	ErrorEx(_s'WARNING - trying to equip non-existent object! | MenuDefaultCharacterData::EquipDefaultCharacter', _i2)
000994:0x0024c848:	rts
001002:0x0024c850:	imove	i, 0x000000
001002:0x0024c860:	jump	0x24c880
001002:0x0024c868:	move	@m00, i
001002:0x0024c878:	inc	i
001002:0x0024c880:	movefm	[0xd3158338], m_AttachmentsMap
001002:0x0024c890:	ncalli	map<int,string>.Count()
001002:0x0024c898:	cmpi	i, #return
001002:0x0024c8a8:	bge	0x24ca18
001004:0x0024c8b0:	moves	attachment_type, _s''
001005:0x0024c8c0:	moves	current_attachment_type, _s''
001006:0x0024c8d0:	movefm	[0xd3158338], m_AttachmentsMap
001006:0x0024c8e0:	icall	
001006:0x0024c8f0:	move	slot_ID, #return
001007:0x0024c900:	movefm	[0xd3158338], m_AttachmentsMap
001007:0x0024c910:	icall	
001007:0x0024c920:	moves	attachment_type, #return
001008:0x0024c930:	ncalli	Man.GetInventory()
001008:0x0024c938:	ncalli	GameInventory.FindAttachment(slot_ID)
001008:0x0024c948:	movetm	current_attachment_object, #return
001010:0x0024c958:	cmpcm	current_attachment_object, null
001010:0x0024c968:	beq	0x24c990
001012:0x0024c970:	call	
001012:0x0024c980:	moves	current_attachment_type, #return
001014:0x0024c990:	cmps	current_attachment_type, attachment_type
001014:0x0024c9a0:	beq	0x24ca10
001016:0x0024c9a8:	cmpcm	current_attachment_object, null
001016:0x0024c9b8:	beq	0x24c9e0
001017:0x0024c9c0:	movefm	[0xb5bdac60], current_attachment_object
001017:0x0024c9d0:	ncalli	DayZGame.ObjectDelete([0xb5bdac60])
001018:0x0024c9e0:	cmps	attachment_type, _s''
001018:0x0024c9f0:	beq	0x24ca10
001019:0x0024c9f8:	ncalli	Man.GetInventory()
001019:0x0024ca00:	ncalli	GameInventory.CreateAttachmentEx(attachment_type, slot_ID)
001019:0x0024ca10:	jump	0x24c868
001019:0x0024ca18:	release	current_attachment_object
001019:0x0024ca20:	rts
MenuDefaultCharacterData::SerializeCharacterData()
001027:0x0024ca28:	icall	
001028:0x0024ca38:	icall	
001029:0x0024ca48:	icall	
001030:0x0024ca58:	icall	
001030:0x0024ca68:	rts
MenuDefaultCharacterData::DeserializeCharacterData()
001036:0x0024ca70:	icall	
001036:0x0024ca80:	cmpi	#return, _i0
001036:0x0024ca90:	bne	0x24cab0
001037:0x0024ca98:	imove	#return, 0x000000
001037:0x0024caa8:	rts
001038:0x0024cab0:	icall	
001038:0x0024cac0:	cmpi	#return, _i0
001038:0x0024cad0:	bne	0x24caf0
001039:0x0024cad8:	imove	#return, 0x000000
001039:0x0024cae8:	rts
001040:0x0024caf0:	icall	
001040:0x0024cb00:	cmpi	#return, _i0
001040:0x0024cb10:	bne	0x24cb30
001041:0x0024cb18:	imove	#return, 0x000000
001041:0x0024cb28:	rts
001042:0x0024cb30:	icall	
001042:0x0024cb40:	cmpi	#return, _i0
001042:0x0024cb50:	bne	0x24cb70
001043:0x0024cb58:	imove	#return, 0x000000
001043:0x0024cb68:	rts
001046:0x0024cb70:	imove	#return, 0x000001
001046:0x0024cb80:	rts
001046:0x0024cb88:	rts
MenuDefaultCharacterData::SetCharacterName()
001051:0x0024cb90:	moves	m_CharacterName, name
001051:0x0024cba0:	rts
MenuDefaultCharacterData::GetCharacterName()
001056:0x0024cba8:	moves	#return, m_CharacterName
001056:0x0024cbb8:	rts
001056:0x0024cbc0:	rts
MenuDefaultCharacterData::SetCharacterType()
001061:0x0024cbc8:	moves	m_CharacterType, character_type
001061:0x0024cbd8:	rts
MenuDefaultCharacterData::GetCharacterType()
001066:0x0024cbe0:	moves	#return, m_CharacterType
001066:0x0024cbf0:	rts
001066:0x0024cbf8:	rts
MenuDefaultCharacterData::SetRandomCharacterForced()
001071:0x0024cc00:	move	m_ForceRandomCharacter, state
001071:0x0024cc10:	rts
MenuDefaultCharacterData::IsRandomCharacterForced()
001076:0x0024cc18:	move	#return, m_ForceRandomCharacter
001076:0x0024cc28:	rts
001076:0x0024cc30:	rts
MenuDefaultCharacterData::GetAttachmentMap()
001081:0x0024cc38:	movem	#return, m_AttachmentsMap
001081:0x0024cc48:	rts
001081:0x0024cc50:	rts
MenuDefaultCharacterData::DumpAttMapContents()
001089:0x0024cdf0:	icall	Print(_s'-----------')
001090:0x0024ce00:	icall	Print(_s'm_AttachmentsMap contents:')
001091:0x0024ce10:	imove	j, 0x000000
001091:0x0024ce20:	jump	0x24ce40
001091:0x0024ce28:	move	@m00, j
001091:0x0024ce38:	inc	j
001091:0x0024ce40:	movefm	[0xd3158338], m_AttachmentsMap
001091:0x0024ce50:	ncalli	map<int,string>.Count()
001091:0x0024ce58:	cmpi	j, #return
001091:0x0024ce68:	bge	0x24cf88
001093:0x0024ce70:	movefm	[0xd3158338], m_AttachmentsMap
001093:0x0024ce80:	icall	
001093:0x0024ce90:	move	debugID, #return
001094:0x0024cea0:	movefm	[0xd3158338], m_AttachmentsMap
001094:0x0024ceb0:	icall	
001094:0x0024cec0:	moves	debugType, #return
001095:0x0024ced0:	icall	ToString(j)
001095:0x0024cee0:	adds	@s01, _s'index ', #return
001095:0x0024cef0:	moves	@s00, @s01
001095:0x0024cf00:	icall	Print(@s00)
001096:0x0024cf10:	icall	ToString(debugID)
001096:0x0024cf20:	adds	@s01, _s'debugID: ', #return
001096:0x0024cf30:	moves	@s00, @s01
001096:0x0024cf40:	icall	Print(@s00)
001097:0x0024cf50:	adds	@s01, _s'debugType: ', debugType
001097:0x0024cf60:	moves	@s00, @s01
001097:0x0024cf70:	icall	Print(@s00)
001097:0x0024cf80:	jump	0x24ce28
001099:0x0024cf88:	icall	Print(_s'-----------')
001099:0x0024cf98:	rts
DefaultCharacterCreationMethods::GetPathFromSlotID()
001142:0x0024cff0:	icall	
001142:0x0024d000:	move	idx, #return
001143:0x0024d010:	adds	@s02, _s'', m_Path
001143:0x0024d020:	moves	@s01, @s02
001143:0x0024d030:	adds	@s01, @s01, _s' '
001143:0x0024d040:	moves	@s00, @s01
001143:0x0024d050:	icall	
001143:0x0024d060:	adds	path, @s00, #return
001144:0x0024d070:	moves	#return, path
001144:0x0024d080:	rts
001144:0x0024d088:	rts
DefaultCharacterCreationMethods::GetConfigArrayCountFromSlotID()
001150:0x0024d0b8:	new	types, array<string>
001151:0x0024d0d8:	ncall	GetGame()
001151:0x0024d0e0:	call	GetPathFromSlotID(slot_ID)
001151:0x0024d0f0:	movefm	[0xb5bda188], types
001151:0x0024d100:	ncalli	CGame.ConfigGetTextArray(#return, [0xb5bda188])
001152:0x0024d110:	ncalli	array<string>.Count()
001152:0x0024d118:	move	#return, #return
001152:0x0024d128:	release	types
001152:0x0024d130:	rts
001152:0x0024d138:	release	types
001152:0x0024d140:	rts
DefaultCharacterCreationMethods::GetConfigAttachmentTypes()
001158:0x0024d170:	new	types, array<string>
001159:0x0024d190:	ncall	GetGame()
001159:0x0024d198:	call	GetPathFromSlotID(slot_ID)
001159:0x0024d1a8:	movefm	[0xb5bda188], types
001159:0x0024d1b8:	ncalli	CGame.ConfigGetTextArray(#return, [0xb5bda188])
001160:0x0024d1c8:	movem	#return, types
001160:0x0024d1d8:	release	types
001160:0x0024d1e0:	rts
001160:0x0024d1e8:	release	types
001160:0x0024d1f0:	rts
DefaultCharacterCreationMethods::GetAttachmentSlotsArray()
001166:0x0024d1f8:	movem	#return, m_AttachmentSlots
001166:0x0024d208:	rts
001166:0x0024d210:	rts
DefaultCharacterCreationMethods::GetConfigArrayNames()
001172:0x0024d218:	movem	#return, m_ConfigArrayNames
001172:0x0024d228:	rts
001172:0x0024d230:	rts
OptionsAccess::GetEvents()
001341:0x0024d238:	icall	
001341:0x0024d240:	icall	SafeCastType([0xb5b3ab78], @c01, #return)
001341:0x0024d258:	movetm	#return, @c01
001341:0x0024d268:	rts
001341:0x0024d270:	rts
OptionsAccess::OnRevert()
001355:0x0024d278:	call	
001355:0x0024d288:	movefm	@c00, #return
001355:0x0024d298:	movefm	@c01, Event_OnRevert
001355:0x0024d2a8:	icall	
001355:0x0024d2d8:	release	#return
001355:0x0024d2e0:	rts
OptionsAccessEvents::OptionsAccessEvents()
001362:0x0024d2e8:	new	Event_OnRevert, ScriptInvoker
001362:0x0024d308:	rts
SpawnEntity()
001465:0x0024d310:	movefm	[0xb5bad558], inv_loc
001465:0x0024d320:	ncall	LocationCreateEntity([0xb5bad558], object_name, iSetupFlags, iRotation)
001465:0x0024d338:	movetm	#return, #return
001465:0x0024d348:	rts
001465:0x0024d350:	rts
CargoBase::CanReceiveItemIntoCargo()
//scripts/3_Game/systems\inventory\cargo.c
000065:0x0024d358:	imove	#return, 0x000001
000065:0x0024d368:	rts
000065:0x0024d370:	rts
CargoBase::CanSwapItemInCargo()
000071:0x0024d378:	imove	#return, 0x000001
000071:0x0024d388:	rts
000071:0x0024d390:	rts
AmmoCamParams::Load()
//scripts/3_Game/ammocamparams.c
000005:0x0024d4d8:	adds	@s02, _s'CfgAmmo ', ammoType
000005:0x0024d4e8:	moves	@s01, @s02
000005:0x0024d4f8:	adds	@s01, @s01, _s' Effects'
000005:0x0024d508:	moves	@s00, @s01
000005:0x0024d518:	adds	cfgPath, @s00, _s' CameraShake '
000007:0x0024d528:	ncall	GetGame()
000007:0x0024d530:	adds	@s01, cfgPath, _s'radius'
000007:0x0024d540:	moves	@s00, @s01
000007:0x0024d550:	ncalli	CGame.ConfigGetFloat(@s00)
000007:0x0024d560:	move	m_Radius, #return
000008:0x0024d570:	ncall	GetGame()
000008:0x0024d578:	adds	@s01, cfgPath, _s'strength'
000008:0x0024d588:	moves	@s00, @s01
000008:0x0024d598:	ncalli	CGame.ConfigGetFloat(@s00)
000008:0x0024d5a8:	move	m_Strength, #return
000009:0x0024d5b8:	ncall	GetGame()
000009:0x0024d5c0:	adds	@s01, cfgPath, _s'modifierClose'
000009:0x0024d5d0:	moves	@s00, @s01
000009:0x0024d5e0:	ncalli	CGame.ConfigGetFloat(@s00)
000009:0x0024d5f0:	move	m_ModifierClose, #return
000010:0x0024d600:	ncall	GetGame()
000010:0x0024d608:	adds	@s01, cfgPath, _s'modifierFar'
000010:0x0024d618:	moves	@s00, @s01
000010:0x0024d628:	ncalli	CGame.ConfigGetFloat(@s00)
000010:0x0024d638:	move	m_ModifierFar, #return
000010:0x0024d648:	rts
AmmoCamParams::AmmoCamParams()
000001:0x0024d650:	imove	m_Radius, 40.00000
000001:0x0024d660:	imove	m_Strength, 4.00000
000001:0x0024d670:	imove	m_ModifierClose, 1.00000
000001:0x0024d680:	imove	m_ModifierFar, 0.00000
000001:0x0024d690:	rts
StatsEventData::StatsEventData()
//scripts/3_Game/analytics\scriptanalytics.c
000080:0x0024d698:	moves	m_eventName, eventName
000081:0x0024d6a8:	new	m_valuesBool, map<string,int>
000082:0x0024d6c8:	new	m_valuesInt, map<string,int>
000083:0x0024d6e8:	new	m_valuesFloat, map<string,float>
000084:0x0024d708:	new	m_valuesString, map<string,string>
000085:0x0024d728:	new	m_valuesVector, map<string,vector>
000085:0x0024d748:	rts
StatsEventData::AddBool()
000090:0x0024d750:	movefm	[0xd3157f58], m_valuesBool
000090:0x0024d760:	icall	
000090:0x0024d770:	rts
StatsEventData::AddInt()
000095:0x0024d778:	movefm	[0xd3157f58], m_valuesInt
000095:0x0024d788:	icall	
000095:0x0024d798:	rts
StatsEventData::AddFloat()
000100:0x0024d7a0:	movefm	[0xd3157fe8], m_valuesFloat
000100:0x0024d7b0:	icall	
000100:0x0024d7c0:	rts
StatsEventData::AddString()
000105:0x0024d7c8:	movefm	[0xd3157ec8], m_valuesString
000105:0x0024d7d8:	icall	
000105:0x0024d7e8:	rts
StatsEventData::AddVector()
000110:0x0024d7f0:	movefm	[0xd3157bd8], m_valuesVector
000110:0x0024d800:	icall	
000110:0x0024d810:	rts
Analytics::PlayerDeath()
000150:0x0024d818:	movefm	[0xb5bc57f8], data
000150:0x0024d828:	ncall	SendPlayerDeath([0xb5bc57f8])
000150:0x0024d838:	rts
Analytics::PlayerScoredKill()
000156:0x0024d840:	movefm	[0xb5bc5820], data
000156:0x0024d850:	ncall	SendPlayerScoredKill([0xb5bc5820])
000156:0x0024d860:	rts
Analytics::PlayerDisconnected()
000162:0x0024d868:	movefm	[0xb5bc5848], data
000162:0x0024d878:	ncall	SendPlayerDisconnected([0xb5bc5848])
000162:0x0024d888:	rts
Analytics::PlayerMeasures()
000168:0x0024d890:	movefm	[0xb5bc5870], data
000168:0x0024d8a0:	ncall	SendPlayerMeasures([0xb5bc5870])
000168:0x0024d8b0:	rts
Analytics::PlayerSpawned()
000174:0x0024d8b8:	movefm	[0xb5bc5898], data
000174:0x0024d8c8:	ncall	SendPlayerSpawned([0xb5bc5898])
000174:0x0024d8d8:	rts
HumanInventory::CreateInInventory()
//scripts/3_Game/systems\inventory\humaninventory.c
000067:0x0024d938:	call	
000067:0x0024d948:	movem	newEntity, #return
000067:0x0024d958:	release	#return
000068:0x0024d960:	cmpcm	newEntity, null
000068:0x0024d970:	bne	0x24d998
000069:0x0024d978:	ncalli	HumanInventory.CreateInHands(type)
000069:0x0024d988:	movetm	newEntity, #return
000070:0x0024d998:	movem	#return, newEntity
000070:0x0024d9a8:	release	newEntity
000070:0x0024d9b0:	rts
000070:0x0024d9b8:	release	newEntity
000070:0x0024d9c0:	rts
HumanInventory::ClearUserReservedLocationSynced()
000075:0x0024d9c8:	ncall	GetGame()
000075:0x0024d9d0:	ncalli	CGame.IsClient()
000075:0x0024d9d8:	cmpi	#return, _i0
000075:0x0024d9e8:	beq	0x24da28
000076:0x0024d9f0:	movefm	[0xb5bfb4d0], eai
000076:0x0024da00:	ncalli	HumanInventory.FindUserReservedLocationIndex([0xb5bfb4d0])
000076:0x0024da10:	move	m_syncClearUserReservationindex, #return
000076:0x0024da20:	jump	0x24dab8
000077:0x0024da28:	ncall	GetGame()
000077:0x0024da30:	ncalli	CGame.IsMultiplayer()
000077:0x0024da38:	cmpi	#return, _i0
000077:0x0024da48:	bne	0x24dab8
000079:0x0024da50:	movefm	[0xb5bfb660], eai
000079:0x0024da60:	ncalli	HumanInventory.ClearUserReservedLocation([0xb5bfb660])
000080:0x0024da70:	call	
000080:0x0024da80:	icall	
000080:0x0024dab0:	release	#return
000080:0x0024dab8:	rts
HumanInventory::ClearUserReservedLocationAtIndexSynced()
000087:0x0024db10:	ncall	GetGame()
000087:0x0024db18:	ncalli	CGame.IsClient()
000087:0x0024db20:	cmpi	#return, _i0
000087:0x0024db30:	beq	0x24db50
000088:0x0024db38:	move	m_syncClearUserReservationindex, index
000088:0x0024db48:	jump	0x24dc38
000089:0x0024db50:	ncall	GetGame()
000089:0x0024db58:	ncalli	CGame.IsMultiplayer()
000089:0x0024db60:	cmpi	#return, _i0
000089:0x0024db70:	bne	0x24dc38
000091:0x0024db78:	ncalli	HumanInventory.ClearUserReservedLocationAtIndex(index)
000093:0x0024db88:	new	il, InventoryLocation
000095:0x0024dba8:	movefm	[0xb5bfb598], il
000095:0x0024dbb8:	ncalli	HumanInventory.GetUserReservedLocation(index, [0xb5bfb598])
000096:0x0024dbc8:	ncalli	InventoryLocation.GetItem()
000096:0x0024dbd0:	movetm	item, #return
000097:0x0024dbe0:	call	
000097:0x0024dbf0:	icall	
000097:0x0024dc20:	release	#return
000097:0x0024dc28:	release	il
000097:0x0024dc30:	release	item
000097:0x0024dc38:	rts
HumanInventory::GetManOwner()
000102:0x0024dc40:	ncalli	HumanInventory.GetInventoryOwner()
000102:0x0024dc48:	icall	SafeCastType([0xb5b266d0], @c01, #return)
000102:0x0024dc60:	movetm	#return, @c01
000102:0x0024dc70:	rts
000102:0x0024dc78:	rts
HumanInventory::HasEntityInHands()
000104:0x0024dc80:	ncalli	HumanInventory.GetEntityInHands()
000104:0x0024dc88:	cmpcm	e, #return
000104:0x0024dc98:	bne	0x24dcb8
000104:0x0024dca0:	imove	#return, 0x000001
000104:0x0024dcb0:	jump	0x24dcc8
000104:0x0024dcb8:	imove	#return, 0x000000
000104:0x0024dcc8:	rts
000104:0x0024dcd0:	rts
HumanInventory::OnEntityInHandsCreated()
000114:0x0024dd50:	new	cpy, InventoryLocation
000115:0x0024dd70:	movefm	[0xb5b9f5b8], src
000115:0x0024dd80:	ncalli	InventoryLocation.Copy([0xb5b9f5b8])
000116:0x0024dd90:	call	DumpToStringNullSafe(cpy)
000116:0x0024dda0:	adds	@s01, _s'[inv] OnEntityInHandsCreated src=', #return
000116:0x0024ddb0:	moves	@s00, @s01
000116:0x0024ddc0:	call	hndDebugPrint(@s00)
000117:0x0024ddd0:	call	
000117:0x0024dde0:	new	@c00, HandEventCreated
000117:0x0024de08:	pushc	@c00
000117:0x0024de10:	call	
000117:0x0024de20:	popc	@c00
000117:0x0024de28:	release	@c00
000117:0x0024de30:	release	#return
000117:0x0024de38:	release	cpy
000117:0x0024de40:	rts
HumanInventory::OnEntityInHandsDestroyed()
000122:0x0024de98:	new	cpy, InventoryLocation
000123:0x0024deb8:	movefm	[0xb5b9f5b8], src
000123:0x0024dec8:	ncalli	InventoryLocation.Copy([0xb5b9f5b8])
000124:0x0024ded8:	call	DumpToStringNullSafe(cpy)
000124:0x0024dee8:	adds	@s01, _s'[inv] OnEntityInHandsDestroyed src=', #return
000124:0x0024def8:	moves	@s00, @s01
000124:0x0024df08:	call	hndDebugPrint(@s00)
000125:0x0024df18:	call	
000125:0x0024df28:	new	@c00, HandEventDestroyed
000125:0x0024df50:	pushc	@c00
000125:0x0024df58:	call	
000125:0x0024df68:	popc	@c00
000125:0x0024df70:	release	@c00
000125:0x0024df78:	release	#return
000125:0x0024df80:	release	cpy
000125:0x0024df88:	rts
HumanInventory::HandEvent()
000130:0x0024df90:	imove	#return, 0x000001
000130:0x0024dfa0:	rts
000130:0x0024dfa8:	rts
HumanInventory::DropEntity()
000135:0x0024e0a0:	new	src, InventoryLocation
000136:0x0024e0c0:	cmpcm	item, null
000136:0x0024e0d0:	beq	0x24e2d8
000136:0x0024e0d8:	ncalli	EntityAI.GetInventory()
000136:0x0024e0e0:	cmpm	#return, null
000136:0x0024e0f0:	beq	0x24e2d8
000136:0x0024e0f8:	ncalli	EntityAI.GetInventory()
000136:0x0024e100:	movefm	[0xb5bad1f8], src
000136:0x0024e110:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000136:0x0024e120:	cmpi	#return, _i0
000136:0x0024e130:	beq	0x24e2d8
000138:0x0024e138:	ncalli	InventoryLocation.GetType()
000138:0x0024e140:	move	#switch, #return
000138:0x0024e150:	imove	@m00, 0x000004
000138:0x0024e160:	cmpi	@m00, #switch
000138:0x0024e170:	bne	0x24e2a0
000141:0x0024e178:	call	EnumToString(_T(InventoryMode), mode)
000141:0x0024e190:	adds	@s03, _s'[inv] HumanInventory::DropEntity(', #return
000141:0x0024e1a0:	moves	@s02, @s03
000141:0x0024e1b0:	adds	@s02, @s02, _s') item='
000141:0x0024e1c0:	moves	@s01, @s02
000141:0x0024e1d0:	icall	ToString(item)
000141:0x0024e1e0:	adds	@s01, @s01, #return
000141:0x0024e1f0:	moves	@s00, @s01
000141:0x0024e200:	call	hndDebugPrint(@s00)
000142:0x0024e210:	call	
000142:0x0024e220:	new	@c00, HandEventDrop
000142:0x0024e248:	pushc	@c00
000142:0x0024e250:	call	
000142:0x0024e268:	popc	@c00
000142:0x0024e270:	release	@c00
000142:0x0024e278:	release	#return
000143:0x0024e280:	imove	#return, 0x000001
000143:0x0024e290:	release	src
000143:0x0024e298:	rts
000145:0x0024e2a0:	call	
000145:0x0024e2b8:	move	#return, #return
000145:0x0024e2c8:	release	src
000145:0x0024e2d0:	rts
000148:0x0024e2d8:	call	Error(_s'No inventory location')
000149:0x0024e2e8:	imove	#return, 0x000000
000149:0x0024e2f8:	release	src
000149:0x0024e300:	rts
000149:0x0024e308:	release	src
000149:0x0024e310:	rts
HumanInventory::ThrowEntity()
000154:0x0024e430:	ncall	GetGame()
000154:0x0024e438:	ncalli	CGame.IsServer()
000154:0x0024e440:	cmpi	#return, _i0
000154:0x0024e450:	beq	0x24e498
000154:0x0024e458:	ncall	GetGame()
000154:0x0024e460:	ncalli	CGame.IsMultiplayer()
000154:0x0024e468:	cmpi	#return, _i0
000154:0x0024e478:	beq	0x24e498
000155:0x0024e480:	imove	#return, 0x000000
000155:0x0024e490:	rts
000157:0x0024e498:	ncalli	EntityAI.GetHierarchyRootPlayer()
000157:0x0024e4a0:	icall	SafeCastType([0xb5b2afc0], @c01, #return)
000157:0x0024e4b8:	movetm	player, @c01
000158:0x0024e4c8:	imove	invMode, 0x000000
000160:0x0024e4d8:	ncalli	EntityAI.GetHierarchyParent()
000160:0x0024e4e0:	movetm	newParent, null
000160:0x0024e4f0:	call	
000160:0x0024e508:	cmpi	#return, _i0
000160:0x0024e518:	beq	0x24e530
000161:0x0024e520:	imove	invMode, 0x000002
000163:0x0024e530:	new	src, InventoryLocation
000164:0x0024e550:	cmpcm	item, null
000164:0x0024e560:	beq	0x24e750
000164:0x0024e568:	ncalli	EntityAI.GetInventory()
000164:0x0024e570:	cmpm	#return, null
000164:0x0024e580:	beq	0x24e750
000164:0x0024e588:	ncalli	EntityAI.GetInventory()
000164:0x0024e590:	movefm	[0xb5bad1f8], src
000164:0x0024e5a0:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000164:0x0024e5b0:	cmpi	#return, _i0
000164:0x0024e5c0:	beq	0x24e750
000166:0x0024e5c8:	ncalli	InventoryLocation.GetType()
000166:0x0024e5d0:	move	#switch, #return
000166:0x0024e5e0:	imove	@m00, 0x000004
000166:0x0024e5f0:	cmpi	@m00, #switch
000166:0x0024e600:	bne	0x24e700
000169:0x0024e608:	icall	ToString(item)
000169:0x0024e618:	adds	@s01, _s'[inv] HumanInventory::ThrowEntity item=', #return
000169:0x0024e628:	moves	@s00, @s01
000169:0x0024e638:	call	hndDebugPrint(@s00)
000170:0x0024e648:	call	
000170:0x0024e658:	new	throwEvent, HandEventThrow
000170:0x0024e680:	release	#return
000171:0x0024e688:	scalev	@v01, dir, force
000171:0x0024e698:	movev	@v00, @v01
000171:0x0024e6a8:	call	
000172:0x0024e6b8:	call	
000173:0x0024e6d0:	imove	#return, 0x000001
000173:0x0024e6e0:	release	throwEvent
000173:0x0024e6e8:	release	player
000173:0x0024e6f0:	release	src
000173:0x0024e6f8:	rts
000177:0x0024e700:	call	
000178:0x0024e718:	imove	#return, 0x000001
000178:0x0024e728:	release	throwEvent
000178:0x0024e730:	release	player
000178:0x0024e738:	release	src
000178:0x0024e740:	rts
000178:0x0024e748:	release	throwEvent
000181:0x0024e750:	call	Error(_s'No inventory location')
000182:0x0024e760:	imove	#return, 0x000000
000182:0x0024e770:	release	player
000182:0x0024e778:	release	src
000182:0x0024e780:	rts
000182:0x0024e788:	release	player
000182:0x0024e790:	release	src
000182:0x0024e798:	rts
HumanInventory::RedirectToHandEvent()
000187:0x0024e9a8:	ncalli	InventoryLocation.GetType()
000187:0x0024e9b0:	move	@m00, #return
000187:0x0024e9c0:	cmpi	@m00, _i4
000187:0x0024e9d0:	bne	0x24ec90
000189:0x0024e9d8:	ncalli	InventoryLocation.GetParent()
000189:0x0024e9e0:	icall	SafeCastType([0xb5b266d0], @c01, #return)
000189:0x0024e9f8:	movetm	man_src, @c01
000190:0x0024ea08:	call	hndDebugPrint(_s'[inv] HI::RedirectToHandEvent - source location == HANDS, player has to handle this')
000192:0x0024ea18:	ncalli	InventoryLocation.GetItem()
000192:0x0024ea20:	movetm	item, #return
000194:0x0024ea30:	movefm	[0xb5bfb4d0], item
000194:0x0024ea40:	ncalli	HumanInventory.FindUserReservedLocationIndex([0xb5bfb4d0])
000194:0x0024ea50:	move	r_index, #return
000196:0x0024ea60:	cmpi	r_index, _i0
000196:0x0024ea70:	blt	0x24ebe0
000198:0x0024ea78:	new	r_il, InventoryLocation
000199:0x0024ea98:	movefm	[0xb5bfb598], r_il
000199:0x0024eaa8:	ncalli	HumanInventory.GetUserReservedLocation(r_index, [0xb5bfb598])
000201:0x0024eab8:	ncalli	HumanInventory.ClearUserReservedLocationAtIndex(r_index)
000202:0x0024eac8:	ncalli	InventoryLocation.GetType()
000202:0x0024ead0:	move	r_type, #return
000203:0x0024eae0:	cmpi	r_type, _i3
000203:0x0024eaf0:	beq	0x24eb10
000203:0x0024eaf8:	cmpi	r_type, _i5
000203:0x0024eb08:	bne	0x24eb68
000205:0x0024eb10:	ncalli	InventoryLocation.GetParent()
000205:0x0024eb18:	call	
000205:0x0024eb28:	icall	
000205:0x0024eb58:	release	#return
000205:0x0024eb60:	jump	0x24ebd8
000207:0x0024eb68:	cmpi	r_type, _i2
000207:0x0024eb78:	bne	0x24ebd8
000209:0x0024eb80:	ncalli	InventoryLocation.GetParent()
000209:0x0024eb88:	call	
000209:0x0024eb98:	ncalli	InventoryLocation.GetSlot()
000209:0x0024eba0:	icall	
000209:0x0024ebd0:	release	#return
000209:0x0024ebd8:	release	r_il
000213:0x0024ebe0:	call	
000213:0x0024ebf0:	new	@c00, HandEventMoveTo
000213:0x0024ec20:	pushc	@c00
000213:0x0024ec28:	call	
000213:0x0024ec40:	popc	@c00
000213:0x0024ec48:	release	@c00
000213:0x0024ec50:	release	#return
000214:0x0024ec58:	imove	#return, 0x000001
000214:0x0024ec68:	release	man_src
000214:0x0024ec70:	release	item
000214:0x0024ec78:	rts
000214:0x0024ec80:	release	man_src
000214:0x0024ec88:	release	item
000217:0x0024ec90:	ncalli	InventoryLocation.GetType()
000217:0x0024ec98:	move	@m00, #return
000217:0x0024eca8:	cmpi	@m00, _i4
000217:0x0024ecb8:	bne	0x24ed98
000219:0x0024ecc0:	call	hndDebugPrint(_s'[inv] HI::RedirectToHandEvent - dst location == HANDS, player has to handle this')
000221:0x0024ecd0:	ncalli	InventoryLocation.GetParent()
000221:0x0024ecd8:	icall	SafeCastType([0xb5b266d0], @c01, #return)
000221:0x0024ecf0:	movetm	man_dst, @c01
000222:0x0024ed00:	call	
000222:0x0024ed10:	new	@c00, HandEventTake
000222:0x0024ed38:	pushc	@c00
000222:0x0024ed40:	call	
000222:0x0024ed58:	popc	@c00
000222:0x0024ed60:	release	@c00
000222:0x0024ed68:	release	#return
000223:0x0024ed70:	imove	#return, 0x000001
000223:0x0024ed80:	release	man_dst
000223:0x0024ed88:	rts
000223:0x0024ed90:	release	man_dst
000225:0x0024ed98:	imove	#return, 0x000000
000225:0x0024eda8:	rts
000225:0x0024edb0:	rts
HumanInventory::TakeToDst()
000230:0x0024ee08:	call	EnumToString(_T(InventoryMode), mode)
000230:0x0024ee20:	adds	@s05, _s'[inv] Take2Dst(', #return
000230:0x0024ee30:	moves	@s04, @s05
000230:0x0024ee40:	adds	@s04, @s04, _s') src='
000230:0x0024ee50:	moves	@s03, @s04
000230:0x0024ee60:	call	DumpToStringNullSafe(src)
000230:0x0024ee70:	adds	@s03, @s03, #return
000230:0x0024ee80:	moves	@s02, @s03
000230:0x0024ee90:	adds	@s02, @s02, _s' dst='
000230:0x0024eea0:	moves	@s01, @s02
000230:0x0024eeb0:	call	DumpToStringNullSafe(dst)
000230:0x0024eec0:	adds	@s01, @s01, #return
000230:0x0024eed0:	moves	@s00, @s01
000230:0x0024eee0:	call	hndDebugPrint(@s00)
000232:0x0024eef0:	call	
000232:0x0024ef00:	call	
000232:0x0024ef10:	cmpi	#return, _i0
000232:0x0024ef20:	beq	0x24ef78
000232:0x0024ef28:	call	
000232:0x0024ef40:	cmpi	#return, _i0
000232:0x0024ef50:	beq	0x24ef78
000233:0x0024ef58:	imove	#return, 0x000001
000233:0x0024ef68:	release	#return
000233:0x0024ef70:	rts
000233:0x0024ef78:	release	#return
000235:0x0024ef80:	call	
000235:0x0024ef98:	move	#return, #return
000235:0x0024efa8:	rts
000235:0x0024efb0:	rts
HumanInventory::TakeEntityToInventory()
000240:0x0024f058:	new	src, InventoryLocation
000241:0x0024f078:	ncalli	EntityAI.GetInventory()
000241:0x0024f080:	movefm	[0xb5bad1f8], src
000241:0x0024f090:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000241:0x0024f0a0:	cmpi	#return, _i0
000241:0x0024f0b0:	beq	0x24f290
000243:0x0024f0b8:	new	dst, InventoryLocation
000244:0x0024f0d8:	movefm	[0xb5bad248], item
000244:0x0024f0e8:	movefm	[0xb5bad298], dst
000244:0x0024f0f8:	ncalli	HumanInventory.FindFreeLocationFor([0xb5bad248], flags, [0xb5bad298])
000244:0x0024f110:	cmpi	#return, _i0
000244:0x0024f120:	beq	0x24f260
000246:0x0024f128:	call	
000246:0x0024f140:	cmpi	#return, _i0
000246:0x0024f150:	beq	0x24f180
000247:0x0024f158:	imove	#return, 0x000001
000247:0x0024f168:	release	dst
000247:0x0024f170:	release	src
000247:0x0024f178:	rts
000249:0x0024f180:	call	EnumToString(_T(InventoryMode), mode)
000249:0x0024f198:	adds	@s03, _s'[inv] HumanInventory::Take2Inv(', #return
000249:0x0024f1a8:	moves	@s02, @s03
000249:0x0024f1b8:	adds	@s02, @s02, _s') item='
000249:0x0024f1c8:	moves	@s01, @s02
000249:0x0024f1d8:	icall	ToString(item)
000249:0x0024f1e8:	adds	@s01, @s01, #return
000249:0x0024f1f8:	moves	@s00, @s01
000249:0x0024f208:	call	hndDebugPrint(@s00)
000250:0x0024f218:	call	
000250:0x0024f230:	move	#return, #return
000250:0x0024f240:	release	dst
000250:0x0024f248:	release	src
000250:0x0024f250:	rts
000250:0x0024f258:	jump	0x24f288
000255:0x0024f260:	imove	#return, 0x000000
000255:0x0024f270:	release	dst
000255:0x0024f278:	release	src
000255:0x0024f280:	rts
000255:0x0024f288:	release	dst
000258:0x0024f290:	call	Error(_s'HumanInventory::TakeEntityToInventory: No inventory location')
000259:0x0024f2a0:	imove	#return, 0x000000
000259:0x0024f2b0:	release	src
000259:0x0024f2b8:	rts
000259:0x0024f2c0:	release	src
000259:0x0024f2c8:	rts
HumanInventory::TakeEntityToCargoEx()
000267:0x0024f398:	new	src, InventoryLocation
000268:0x0024f3b8:	ncalli	EntityAI.GetInventory()
000268:0x0024f3c0:	movefm	[0xb5bad1f8], src
000268:0x0024f3d0:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000268:0x0024f3e0:	cmpi	#return, _i0
000268:0x0024f3f0:	beq	0x24f730
000270:0x0024f3f8:	ncalli	InventoryLocation.GetType()
000270:0x0024f400:	move	#switch, #return
000270:0x0024f410:	imove	@m00, 0x000004
000270:0x0024f420:	cmpi	@m00, #switch
000270:0x0024f430:	bne	0x24f6f0
000274:0x0024f438:	ncalli	HumanInventory.GetInventoryOwner()
000274:0x0024f440:	call	
000274:0x0024f450:	cmpi	#return, _i0
000274:0x0024f460:	beq	0x24f6b0
000276:0x0024f468:	call	EnumToString(_T(InventoryMode), mode)
000276:0x0024f480:	adds	@s07, _s'[inv] HumanInventory::Take2Cgo(', #return
000276:0x0024f490:	moves	@s06, @s07
000276:0x0024f4a0:	adds	@s06, @s06, _s') item='
000276:0x0024f4b0:	moves	@s05, @s06
000276:0x0024f4c0:	icall	ToString(item)
000276:0x0024f4d0:	adds	@s05, @s05, #return
000276:0x0024f4e0:	moves	@s04, @s05
000276:0x0024f4f0:	adds	@s04, @s04, _s' row='
000276:0x0024f500:	moves	@s03, @s04
000276:0x0024f510:	icall	ToString(row)
000276:0x0024f520:	adds	@s03, @s03, #return
000276:0x0024f530:	moves	@s02, @s03
000276:0x0024f540:	adds	@s02, @s02, _s' col='
000276:0x0024f550:	moves	@s01, @s02
000276:0x0024f560:	icall	ToString(col)
000276:0x0024f570:	adds	@s01, @s01, #return
000276:0x0024f580:	moves	@s00, @s01
000276:0x0024f590:	call	hndDebugPrint(@s00)
000277:0x0024f5a0:	new	dst, InventoryLocation
000278:0x0024f5c0:	ncalli	HumanInventory.GetInventoryOwner()
000278:0x0024f5c8:	movefm	[0xb5b9f1d0], item
000278:0x0024f5d8:	ncalli	EntityAI.GetInventory()
000278:0x0024f5e0:	ncalli	GameInventory.GetFlipCargo()
000278:0x0024f5e8:	ncalli	InventoryLocation.SetCargo(#return, [0xb5b9f1d0], idx, row, col, #return)
000280:0x0024f608:	call	
000280:0x0024f618:	new	@c00, HandEventMoveTo
000280:0x0024f648:	pushc	@c00
000280:0x0024f650:	call	
000280:0x0024f668:	popc	@c00
000280:0x0024f670:	release	@c00
000280:0x0024f678:	release	#return
000281:0x0024f680:	imove	#return, 0x000001
000281:0x0024f690:	release	dst
000281:0x0024f698:	release	src
000281:0x0024f6a0:	rts
000281:0x0024f6a8:	release	dst
000283:0x0024f6b0:	call	
000283:0x0024f6d0:	move	#return, #return
000283:0x0024f6e0:	release	src
000283:0x0024f6e8:	rts
000285:0x0024f6f0:	call	
000285:0x0024f710:	move	#return, #return
000285:0x0024f720:	release	src
000285:0x0024f728:	rts
000288:0x0024f730:	call	Error(_s'HumanInventory::TakeEntityToCargoEx: No inventory location')
000289:0x0024f740:	imove	#return, 0x000000
000289:0x0024f750:	release	src
000289:0x0024f758:	rts
000289:0x0024f760:	release	src
000289:0x0024f768:	rts
HumanInventory::TakeEntityAsAttachmentEx()
000294:0x0024f890:	new	src, InventoryLocation
000295:0x0024f8b0:	ncalli	EntityAI.GetInventory()
000295:0x0024f8b8:	movefm	[0xb5bad1f8], src
000295:0x0024f8c8:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000295:0x0024f8d8:	cmpi	#return, _i0
000295:0x0024f8e8:	beq	0x24fbe0
000297:0x0024f8f0:	ncalli	InventoryLocation.GetType()
000297:0x0024f8f8:	move	#switch, #return
000297:0x0024f908:	imove	@m00, 0x000004
000297:0x0024f918:	cmpi	@m00, #switch
000297:0x0024f928:	bne	0x24fba8
000301:0x0024f930:	ncalli	HumanInventory.GetInventoryOwner()
000301:0x0024f938:	call	
000301:0x0024f948:	cmpi	#return, _i0
000301:0x0024f958:	beq	0x24fb70
000303:0x0024f960:	call	EnumToString(_T(InventoryMode), mode)
000303:0x0024f978:	adds	@s05, _s'[inv] HumanInventory::Take2Att(', #return
000303:0x0024f988:	moves	@s04, @s05
000303:0x0024f998:	adds	@s04, @s04, _s') item='
000303:0x0024f9a8:	moves	@s03, @s04
000303:0x0024f9b8:	icall	ToString(item)
000303:0x0024f9c8:	adds	@s03, @s03, #return
000303:0x0024f9d8:	moves	@s02, @s03
000303:0x0024f9e8:	adds	@s02, @s02, _s' slot='
000303:0x0024f9f8:	moves	@s01, @s02
000303:0x0024fa08:	icall	ToString(slot)
000303:0x0024fa18:	adds	@s01, @s01, #return
000303:0x0024fa28:	moves	@s00, @s01
000303:0x0024fa38:	call	hndDebugPrint(@s00)
000304:0x0024fa48:	new	dst, InventoryLocation
000305:0x0024fa68:	ncalli	HumanInventory.GetInventoryOwner()
000305:0x0024fa70:	movetm	src_entity, #return
000306:0x0024fa80:	movefm	[0xb5b9f068], src_entity
000306:0x0024fa90:	movefm	[0xb5b9f090], item
000306:0x0024faa0:	ncalli	InventoryLocation.SetAttachment([0xb5b9f068], [0xb5b9f090], slot)
000308:0x0024fab8:	call	
000308:0x0024fac8:	new	@c00, HandEventMoveTo
000308:0x0024faf8:	pushc	@c00
000308:0x0024fb00:	call	
000308:0x0024fb18:	popc	@c00
000308:0x0024fb20:	release	@c00
000308:0x0024fb28:	release	#return
000309:0x0024fb30:	imove	#return, 0x000001
000309:0x0024fb40:	release	dst
000309:0x0024fb48:	release	src_entity
000309:0x0024fb50:	release	src
000309:0x0024fb58:	rts
000309:0x0024fb60:	release	dst
000309:0x0024fb68:	release	src_entity
000311:0x0024fb70:	call	
000311:0x0024fb88:	move	#return, #return
000311:0x0024fb98:	release	src
000311:0x0024fba0:	rts
000313:0x0024fba8:	call	
000313:0x0024fbc0:	move	#return, #return
000313:0x0024fbd0:	release	src
000313:0x0024fbd8:	rts
000316:0x0024fbe0:	call	Error(_s'HumanInventory::TakeEntityAsAttachmentEx: No inventory location')
000317:0x0024fbf0:	imove	#return, 0x000000
000317:0x0024fc00:	release	src
000317:0x0024fc08:	rts
000317:0x0024fc10:	release	src
000317:0x0024fc18:	rts
HumanInventory::SwapEntities()
000323:0x0024fef8:	call	MakeSrcAndDstForSwap(item1, item2, src1, src2, dst1, dst2)
000323:0x0024ff20:	movem	src1, src1
000323:0x0024ff30:	movem	src2, src2
000323:0x0024ff40:	movem	dst1, dst1
000323:0x0024ff50:	movem	dst2, dst2
000323:0x0024ff60:	release	src1
000323:0x0024ff68:	release	src2
000323:0x0024ff70:	release	dst1
000323:0x0024ff78:	release	dst2
000323:0x0024ff80:	cmpi	#return, _i0
000323:0x0024ff90:	beq	0x2505a8
000325:0x0024ff98:	imove	handled, 0x000000
000326:0x0024ffa8:	ncalli	InventoryLocation.GetType()
000326:0x0024ffb0:	move	#switch, #return
000326:0x0024ffc0:	imove	@m00, 0x000004
000326:0x0024ffd0:	cmpi	@m00, #switch
000326:0x0024ffe0:	bne	0x250340
000331:0x0024ffe8:	new	fswap_dst2, InventoryLocation
000332:0x00250008:	call	
000332:0x00250020:	movem	fswap_dst2, dst
000332:0x00250030:	release	dst
000332:0x00250038:	cmpi	#return, _i0
000332:0x00250048:	beq	0x2501c0
000334:0x00250050:	call	EnumToString(_T(InventoryMode), mode)
000334:0x00250068:	adds	@s05, _s'[inv] HumanInventory::Swap HandEventForceSwap(', #return
000334:0x00250078:	moves	@s04, @s05
000334:0x00250088:	adds	@s04, @s04, _s') IH=src1='
000334:0x00250098:	moves	@s03, @s04
000334:0x002500a8:	call	DumpToStringNullSafe(src1)
000334:0x002500b8:	adds	@s03, @s03, #return
000334:0x002500c8:	moves	@s02, @s03
000334:0x002500d8:	adds	@s02, @s02, _s' src2='
000334:0x002500e8:	moves	@s01, @s02
000334:0x002500f8:	call	DumpToStringNullSafe(src2)
000334:0x00250108:	adds	@s01, @s01, #return
000334:0x00250118:	moves	@s00, @s01
000334:0x00250128:	call	hndDebugPrint(@s00)
000335:0x00250138:	call	
000335:0x00250148:	new	@c00, HandEventForceSwap
000335:0x00250180:	pushc	@c00
000335:0x00250188:	call	
000335:0x002501a0:	popc	@c00
000335:0x002501a8:	release	@c00
000335:0x002501b0:	release	#return
000335:0x002501b8:	jump	0x250328
000339:0x002501c0:	call	EnumToString(_T(InventoryMode), mode)
000339:0x002501d8:	adds	@s05, _s'[inv] HumanInventory::Swap HandEventSwap(', #return
000339:0x002501e8:	moves	@s04, @s05
000339:0x002501f8:	adds	@s04, @s04, _s') src1='
000339:0x00250208:	moves	@s03, @s04
000339:0x00250218:	call	DumpToStringNullSafe(src1)
000339:0x00250228:	adds	@s03, @s03, #return
000339:0x00250238:	moves	@s02, @s03
000339:0x00250248:	adds	@s02, @s02, _s'src2='
000339:0x00250258:	moves	@s01, @s02
000339:0x00250268:	call	DumpToStringNullSafe(src2)
000339:0x00250278:	adds	@s01, @s01, #return
000339:0x00250288:	moves	@s00, @s01
000339:0x00250298:	call	hndDebugPrint(@s00)
000340:0x002502a8:	call	
000340:0x002502b8:	new	@c00, HandEventSwap
000340:0x002502f0:	pushc	@c00
000340:0x002502f8:	call	
000340:0x00250310:	popc	@c00
000340:0x00250318:	release	@c00
000340:0x00250320:	release	#return
000342:0x00250328:	imove	handled, 0x000001
000343:0x00250338:	jump	0x250348
000343:0x00250340:	release	fswap_dst2
000347:0x00250348:	ncalli	InventoryLocation.GetType()
000347:0x00250350:	move	#switch, #return
000347:0x00250360:	imove	@m00, 0x000004
000347:0x00250370:	cmpi	@m00, #switch
000347:0x00250380:	bne	0x250508
000351:0x00250388:	call	EnumToString(_T(InventoryMode), mode)
000351:0x002503a0:	adds	@s05, _s'[inv] HumanInventory::Swap HandEventSwap2(', #return
000351:0x002503b0:	moves	@s04, @s05
000351:0x002503c0:	adds	@s04, @s04, _s') src1='
000351:0x002503d0:	moves	@s03, @s04
000351:0x002503e0:	call	DumpToStringNullSafe(src1)
000351:0x002503f0:	adds	@s03, @s03, #return
000351:0x00250400:	moves	@s02, @s03
000351:0x00250410:	adds	@s02, @s02, _s' IH=src2='
000351:0x00250420:	moves	@s01, @s02
000351:0x00250430:	call	DumpToStringNullSafe(src2)
000351:0x00250440:	adds	@s01, @s01, #return
000351:0x00250450:	moves	@s00, @s01
000351:0x00250460:	call	hndDebugPrint(@s00)
000352:0x00250470:	call	
000352:0x00250480:	new	@c00, HandEventSwap
000352:0x002504b8:	pushc	@c00
000352:0x002504c0:	call	
000352:0x002504d8:	popc	@c00
000352:0x002504e0:	release	@c00
000352:0x002504e8:	release	#return
000353:0x002504f0:	imove	handled, 0x000001
000354:0x00250500:	jump	0x250508
000358:0x00250508:	cmpi	handled, _i0
000358:0x00250518:	bne	0x250570
000359:0x00250520:	call	
000359:0x00250538:	move	#return, #return
000359:0x00250548:	release	src1
000359:0x00250550:	release	src2
000359:0x00250558:	release	dst1
000359:0x00250560:	release	dst2
000359:0x00250568:	rts
000360:0x00250570:	imove	#return, 0x000001
000360:0x00250580:	release	src1
000360:0x00250588:	release	src2
000360:0x00250590:	release	dst1
000360:0x00250598:	release	dst2
000360:0x002505a0:	rts
000362:0x002505a8:	call	Error(_s'HumanInventory::SwapEntities: cannot create src1, src2, dst1, dst2')
000363:0x002505b8:	imove	#return, 0x000000
000363:0x002505c8:	release	src1
000363:0x002505d0:	release	src2
000363:0x002505d8:	release	dst1
000363:0x002505e0:	release	dst2
000363:0x002505e8:	rts
000363:0x002505f0:	release	src1
000363:0x002505f8:	release	src2
000363:0x00250600:	release	dst1
000363:0x00250608:	release	dst2
000363:0x00250610:	rts
HumanInventory::ForceSwapEntities()
000369:0x00250950:	call	MakeSrcAndDstForForceSwap(item1, item2, src1, src2, dst1, item2_dst)
000369:0x00250978:	movem	src1, src1
000369:0x00250988:	movem	src2, src2
000369:0x00250998:	movem	dst1, dst1
000369:0x002509a8:	release	src1
000369:0x002509b0:	release	src2
000369:0x002509b8:	release	dst1
000369:0x002509c0:	cmpi	#return, _i0
000369:0x002509d0:	beq	0x2512d8
000371:0x002509d8:	call	
000371:0x002509e8:	ncalli	Man.GetInventory()
000371:0x002509f0:	movetm	manOwnerInventory, #return
000371:0x00250a00:	release	#return
000373:0x00250a08:	call	EnumToString(_T(InventoryMode), mode)
000373:0x00250a20:	adds	@s05, _s'[inv] HumanInventory::FSwap(', #return
000373:0x00250a30:	moves	@s04, @s05
000373:0x00250a40:	adds	@s04, @s04, _s') dst1='
000373:0x00250a50:	moves	@s03, @s04
000373:0x00250a60:	call	DumpToStringNullSafe(dst1)
000373:0x00250a70:	adds	@s03, @s03, #return
000373:0x00250a80:	moves	@s02, @s03
000373:0x00250a90:	adds	@s02, @s02, _s' dst2='
000373:0x00250aa0:	moves	@s01, @s02
000373:0x00250ab0:	call	DumpToStringNullSafe(item2_dst)
000373:0x00250ac0:	adds	@s01, @s01, #return
000373:0x00250ad0:	moves	@s00, @s01
000373:0x00250ae0:	call	hndDebugPrint(@s00)
000374:0x00250af0:	imove	handled, 0x000000
000375:0x00250b00:	ncalli	InventoryLocation.GetType()
000375:0x00250b08:	move	#switch, #return
000375:0x00250b18:	imove	@m00, 0x000004
000375:0x00250b28:	cmpi	@m00, #switch
000375:0x00250b38:	bne	0x250d58
000379:0x00250b40:	call	EnumToString(_T(InventoryMode), mode)
000379:0x00250b58:	adds	@s09, _s'[inv] HumanInventory::FSwap-HND@1(', #return
000379:0x00250b68:	moves	@s08, @s09
000379:0x00250b78:	adds	@s08, @s08, _s') src1='
000379:0x00250b88:	moves	@s07, @s08
000379:0x00250b98:	call	DumpToStringNullSafe(src1)
000379:0x00250ba8:	adds	@s07, @s07, #return
000379:0x00250bb8:	moves	@s06, @s07
000379:0x00250bc8:	adds	@s06, @s06, _s' src2='
000379:0x00250bd8:	moves	@s05, @s06
000379:0x00250be8:	call	DumpToStringNullSafe(src2)
000379:0x00250bf8:	adds	@s05, @s05, #return
000379:0x00250c08:	moves	@s04, @s05
000379:0x00250c18:	adds	@s04, @s04, _s' dst1='
000379:0x00250c28:	moves	@s03, @s04
000379:0x00250c38:	call	DumpToStringNullSafe(dst1)
000379:0x00250c48:	adds	@s03, @s03, #return
000379:0x00250c58:	moves	@s02, @s03
000379:0x00250c68:	adds	@s02, @s02, _s' item2_dst='
000379:0x00250c78:	moves	@s01, @s02
000379:0x00250c88:	call	DumpToStringNullSafe(item2_dst)
000379:0x00250c98:	adds	@s01, @s01, #return
000379:0x00250ca8:	moves	@s00, @s01
000379:0x00250cb8:	call	hndDebugPrint(@s00)
000380:0x00250cc8:	call	
000380:0x00250cd8:	new	e, HandEventForceSwap
000380:0x00250d10:	release	#return
000381:0x00250d18:	call	
000382:0x00250d28:	call	
000383:0x00250d40:	imove	handled, 0x000001
000384:0x00250d50:	jump	0x250d60
000384:0x00250d58:	release	e
000388:0x00250d60:	ncalli	InventoryLocation.GetType()
000388:0x00250d68:	move	#switch, #return
000388:0x00250d78:	imove	@m00, 0x000004
000388:0x00250d88:	cmpi	@m00, #switch
000388:0x00250d98:	bne	0x251238
000393:0x00250da0:	new	fswap_dst2, InventoryLocation
000394:0x00250dc0:	call	
000394:0x00250dd8:	movem	fswap_dst2, dst
000394:0x00250de8:	release	dst
000394:0x00250df0:	cmpi	#return, _i0
000394:0x00250e00:	beq	0x251018
000396:0x00250e08:	call	EnumToString(_T(InventoryMode), mode)
000396:0x00250e20:	adds	@s09, _s'[inv] HumanInventory::FSwap-PREV(', #return
000396:0x00250e30:	moves	@s08, @s09
000396:0x00250e40:	adds	@s08, @s08, _s') src1='
000396:0x00250e50:	moves	@s07, @s08
000396:0x00250e60:	call	DumpToStringNullSafe(src1)
000396:0x00250e70:	adds	@s07, @s07, #return
000396:0x00250e80:	moves	@s06, @s07
000396:0x00250e90:	adds	@s06, @s06, _s' src2='
000396:0x00250ea0:	moves	@s05, @s06
000396:0x00250eb0:	call	DumpToStringNullSafe(src2)
000396:0x00250ec0:	adds	@s05, @s05, #return
000396:0x00250ed0:	moves	@s04, @s05
000396:0x00250ee0:	adds	@s04, @s04, _s' dst1='
000396:0x00250ef0:	moves	@s03, @s04
000396:0x00250f00:	call	DumpToStringNullSafe(dst1)
000396:0x00250f10:	adds	@s03, @s03, #return
000396:0x00250f20:	moves	@s02, @s03
000396:0x00250f30:	adds	@s02, @s02, _s' fswap_dst2='
000396:0x00250f40:	moves	@s01, @s02
000396:0x00250f50:	call	DumpToStringNullSafe(fswap_dst2)
000396:0x00250f60:	adds	@s01, @s01, #return
000396:0x00250f70:	moves	@s00, @s01
000396:0x00250f80:	call	hndDebugPrint(@s00)
000397:0x00250f90:	call	
000397:0x00250fa0:	new	@c00, HandEventForceSwap
000397:0x00250fd8:	pushc	@c00
000397:0x00250fe0:	call	
000397:0x00250ff8:	popc	@c00
000397:0x00251000:	release	@c00
000397:0x00251008:	release	#return
000397:0x00251010:	jump	0x251220
000401:0x00251018:	call	EnumToString(_T(InventoryMode), mode)
000401:0x00251030:	adds	@s09, _s'[inv] HumanInventory::FSwap-HND@2(', #return
000401:0x00251040:	moves	@s08, @s09
000401:0x00251050:	adds	@s08, @s08, _s') src1='
000401:0x00251060:	moves	@s07, @s08
000401:0x00251070:	call	DumpToStringNullSafe(src1)
000401:0x00251080:	adds	@s07, @s07, #return
000401:0x00251090:	moves	@s06, @s07
000401:0x002510a0:	adds	@s06, @s06, _s' src2='
000401:0x002510b0:	moves	@s05, @s06
000401:0x002510c0:	call	DumpToStringNullSafe(src2)
000401:0x002510d0:	adds	@s05, @s05, #return
000401:0x002510e0:	moves	@s04, @s05
000401:0x002510f0:	adds	@s04, @s04, _s' dst1='
000401:0x00251100:	moves	@s03, @s04
000401:0x00251110:	call	DumpToStringNullSafe(dst1)
000401:0x00251120:	adds	@s03, @s03, #return
000401:0x00251130:	moves	@s02, @s03
000401:0x00251140:	adds	@s02, @s02, _s' item2_dst='
000401:0x00251150:	moves	@s01, @s02
000401:0x00251160:	call	DumpToStringNullSafe(item2_dst)
000401:0x00251170:	adds	@s01, @s01, #return
000401:0x00251180:	moves	@s00, @s01
000401:0x00251190:	call	hndDebugPrint(@s00)
000402:0x002511a0:	call	
000402:0x002511b0:	new	@c00, HandEventForceSwap
000402:0x002511e8:	pushc	@c00
000402:0x002511f0:	call	
000402:0x00251208:	popc	@c00
000402:0x00251210:	release	@c00
000402:0x00251218:	release	#return
000404:0x00251220:	imove	handled, 0x000001
000405:0x00251230:	jump	0x251240
000405:0x00251238:	release	fswap_dst2
000409:0x00251240:	imove	returnValue, 0x000001
000411:0x00251250:	cmpi	handled, _i0
000411:0x00251260:	bne	0x251298
000412:0x00251268:	call	
000412:0x00251288:	move	returnValue, #return
000414:0x00251298:	move	#return, returnValue
000414:0x002512a8:	release	manOwnerInventory
000414:0x002512b0:	release	src1
000414:0x002512b8:	release	src2
000414:0x002512c0:	release	dst1
000414:0x002512c8:	rts
000414:0x002512d0:	release	manOwnerInventory
000416:0x002512d8:	call	Error(_s'HumanInventory::ForceSwapEntities: No inventory location')
000417:0x002512e8:	imove	#return, 0x000000
000417:0x002512f8:	release	src1
000417:0x00251300:	release	src2
000417:0x00251308:	release	dst1
000417:0x00251310:	rts
000417:0x00251318:	release	src1
000417:0x00251320:	release	src2
000417:0x00251328:	release	dst1
000417:0x00251330:	rts
HumanInventory::LocalDestroyEntity()
000422:0x002513d8:	new	src, InventoryLocation
000423:0x002513f8:	ncalli	EntityAI.GetInventory()
000423:0x00251400:	movefm	[0xb5bad1f8], src
000423:0x00251410:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000423:0x00251420:	cmpi	#return, _i0
000423:0x00251430:	beq	0x2515d8
000425:0x00251438:	ncalli	InventoryLocation.GetType()
000425:0x00251440:	move	#switch, #return
000425:0x00251450:	imove	@m00, 0x000004
000425:0x00251460:	cmpi	@m00, #switch
000425:0x00251470:	bne	0x2515a8
000429:0x00251478:	ncalli	HumanInventory.GetInventoryOwner()
000429:0x00251480:	call	
000429:0x00251490:	cmpi	#return, _i0
000429:0x002514a0:	beq	0x251578
000431:0x002514a8:	icall	ToString(item)
000431:0x002514b8:	adds	@s01, _s'[inv] HumanInventory::LocalDestroy inv item=', #return
000431:0x002514c8:	moves	@s00, @s01
000431:0x002514d8:	call	hndDebugPrint(@s00)
000432:0x002514e8:	call	
000432:0x002514f8:	new	@c00, HandEventDestroy
000432:0x00251520:	pushc	@c00
000432:0x00251528:	call	
000432:0x00251540:	popc	@c00
000432:0x00251548:	release	@c00
000432:0x00251550:	release	#return
000433:0x00251558:	imove	#return, 0x000001
000433:0x00251568:	release	src
000433:0x00251570:	rts
000435:0x00251578:	call	
000435:0x00251588:	move	#return, #return
000435:0x00251598:	release	src
000435:0x002515a0:	rts
000437:0x002515a8:	call	
000437:0x002515b8:	move	#return, #return
000437:0x002515c8:	release	src
000437:0x002515d0:	rts
000440:0x002515d8:	call	Error(_s'LocalDestroyEntity: No inventory location')
000441:0x002515e8:	imove	#return, 0x000000
000441:0x002515f8:	release	src
000441:0x00251600:	rts
000441:0x00251608:	release	src
000441:0x00251610:	rts
HumanInventory::ReplaceItemWithNew()
000446:0x00251640:	ncalli	HumanInventory.GetEntityInHands()
000446:0x00251648:	movetm	itemInHands, #return
000447:0x00251658:	movefm	@c01, lambda
000447:0x00251668:	cmpm	itemInHands, m_OldItem
000447:0x00251678:	bne	0x2516b8
000448:0x00251680:	call	
000448:0x00251698:	move	#return, #return
000448:0x002516a8:	release	itemInHands
000448:0x002516b0:	rts
000449:0x002516b8:	call	
000449:0x002516d0:	move	#return, #return
000449:0x002516e0:	release	itemInHands
000449:0x002516e8:	rts
000449:0x002516f0:	release	itemInHands
000449:0x002516f8:	rts
HumanInventory::ReplaceItemElsewhereWithNewInHands()
000454:0x00251700:	call	
000454:0x00251710:	movetm	src, null
000454:0x00251720:	new	@c00, HandEventDestroyElsewhereAndReplaceWithNewInHands
000454:0x00251750:	pushc	@c00
000454:0x00251758:	call	
000454:0x00251770:	move	#return, #return
000454:0x00251780:	release	#return
000454:0x00251788:	rts
000454:0x00251790:	popc	@c00
000454:0x00251798:	release	@c00
000454:0x002517a0:	rts
HumanInventory::ReplaceItemInElsewhereWithNewinHandsImpl()
000459:0x002518e8:	ncalli	HumanInventory.GetEntityInHands()
000459:0x002518f0:	cmpm	#return, null
000459:0x00251900:	beq	0x251960
000461:0x00251908:	call	
000461:0x00251918:	adds	@s01, _s'[inv] HumanInventory::ReplaceItemInElsewhereWithNewinHandsImpl Item in hands, event=', #return
000461:0x00251928:	moves	@s00, @s01
000461:0x00251938:	call	Error(@s00)
000462:0x00251948:	imove	#return, 0x000000
000462:0x00251958:	rts
000465:0x00251960:	call	
000465:0x00251970:	movem	dst, #return
000465:0x00251980:	release	#return
000466:0x00251988:	cmpcm	dst, null
000466:0x00251998:	beq	0x251ba8
000468:0x002519a0:	ncalli	InventoryLocation.GetType()
000468:0x002519a8:	move	#switch, #return
000468:0x002519b8:	imove	@m00, 0x000004
000468:0x002519c8:	cmpi	@m00, #switch
000468:0x002519d8:	bne	0x251b78
000472:0x002519e0:	ncalli	HumanInventory.GetInventoryOwner()
000472:0x002519e8:	call	
000472:0x002519f8:	cmpi	#return, _i0
000472:0x00251a08:	beq	0x251a88
000474:0x00251a10:	icall	ToString(e)
000474:0x00251a20:	adds	@s01, _s'[inv] HumanInventory::ReplaceItemInElsewhereWithNewinHandsImpl event=', #return
000474:0x00251a30:	moves	@s00, @s01
000474:0x00251a40:	call	hndDebugPrint(@s00)
000475:0x00251a50:	call	
000476:0x00251a68:	imove	#return, 0x000001
000476:0x00251a78:	release	dst
000476:0x00251a80:	rts
000479:0x00251a88:	ncalli	HumanInventory.GetInventoryOwner()
000479:0x00251a90:	ncall	GetName(#return)
000479:0x00251aa0:	adds	@s03, _s'[inv] HumanInventory::ReplaceItemInElsewhereWithNewinHandsImpl DEAD_owner=', #return
000479:0x00251ab0:	moves	@s02, @s03
000479:0x00251ac0:	adds	@s02, @s02, _s'='
000479:0x00251ad0:	moves	@s01, @s02
000479:0x00251ae0:	pushc	#return
000479:0x00251ae8:	ncalli	HumanInventory.GetInventoryOwner()
000479:0x00251af0:	movec	@c00, #return
000479:0x00251b00:	popc	#return
000479:0x00251b08:	icall	ToString(@c00)
000479:0x00251b18:	adds	@s01, @s01, #return
000479:0x00251b28:	moves	@s00, @s01
000479:0x00251b38:	call	hndDebugPrint(@s00)
000480:0x00251b48:	call	Error(_s'HumanInventory::ReplaceItemInElsewhereWithNewinHandsImpl TODO')
000481:0x00251b58:	imove	#return, 0x000000
000481:0x00251b68:	release	dst
000481:0x00251b70:	rts
000484:0x00251b78:	call	Error(_s'[inv] HumanInventory::ReplaceItemInElsewhereWithNewinHandsImpl src has to be hands')
000485:0x00251b88:	imove	#return, 0x000000
000485:0x00251b98:	release	dst
000485:0x00251ba0:	rts
000488:0x00251ba8:	call	
000488:0x00251bb8:	adds	@s01, _s'[inv] HumanInventory::ReplaceItemInElsewhereWithNewinHandsImpl no dst in event, event=', #return
000488:0x00251bc8:	moves	@s00, @s01
000488:0x00251bd8:	call	Error(@s00)
000489:0x00251be8:	imove	#return, 0x000000
000489:0x00251bf8:	release	dst
000489:0x00251c00:	rts
000489:0x00251c08:	release	dst
000489:0x00251c10:	rts
HumanInventory::ReplaceItemInHandsWithNewImpl()
000494:0x00251d30:	ncalli	HumanInventory.GetEntityInHands()
000494:0x00251d38:	movetm	itemInHands, #return
000495:0x00251d48:	new	src, InventoryLocation
000496:0x00251d68:	cmpcm	itemInHands, null
000496:0x00251d78:	beq	0x252000
000496:0x00251d80:	ncalli	EntityAI.GetInventory()
000496:0x00251d88:	movefm	[0xb5bad1f8], src
000496:0x00251d98:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000496:0x00251da8:	cmpi	#return, _i0
000496:0x00251db8:	beq	0x252000
000498:0x00251dc0:	ncalli	InventoryLocation.GetType()
000498:0x00251dc8:	move	#switch, #return
000498:0x00251dd8:	imove	@m00, 0x000004
000498:0x00251de8:	cmpi	@m00, #switch
000498:0x00251df8:	bne	0x251fc8
000502:0x00251e00:	cmpi	mode, SERVER
000502:0x00251e10:	beq	0x251ec8
000502:0x00251e18:	ncalli	HumanInventory.GetInventoryOwner()
000502:0x00251e20:	call	
000502:0x00251e30:	cmpi	#return, _i0
000502:0x00251e40:	beq	0x251ec8
000504:0x00251e48:	icall	ToString(e)
000504:0x00251e58:	adds	@s01, _s'[inv] HumanInventory::ReplaceItemInHandsWithNewImpl event=', #return
000504:0x00251e68:	moves	@s00, @s01
000504:0x00251e78:	call	hndDebugPrint(@s00)
000505:0x00251e88:	call	
000506:0x00251ea0:	imove	#return, 0x000001
000506:0x00251eb0:	release	itemInHands
000506:0x00251eb8:	release	src
000506:0x00251ec0:	rts
000509:0x00251ec8:	ncalli	HumanInventory.GetInventoryOwner()
000509:0x00251ed0:	ncall	GetName(#return)
000509:0x00251ee0:	adds	@s03, _s'[inv] HumanInventory::ReplaceItemInHandsWithNewImpl DEAD_owner=', #return
000509:0x00251ef0:	moves	@s02, @s03
000509:0x00251f00:	adds	@s02, @s02, _s'='
000509:0x00251f10:	moves	@s01, @s02
000509:0x00251f20:	pushc	#return
000509:0x00251f28:	ncalli	HumanInventory.GetInventoryOwner()
000509:0x00251f30:	movec	@c00, #return
000509:0x00251f40:	popc	#return
000509:0x00251f48:	icall	ToString(@c00)
000509:0x00251f58:	adds	@s01, @s01, #return
000509:0x00251f68:	moves	@s00, @s01
000509:0x00251f78:	call	hndDebugPrint(@s00)
000511:0x00251f88:	call	
000512:0x00251fa0:	imove	#return, 0x000001
000512:0x00251fb0:	release	itemInHands
000512:0x00251fb8:	release	src
000512:0x00251fc0:	rts
000515:0x00251fc8:	call	Error(_s'[inv] HumanInventory::ReplaceItemInHandsWithNewImpl src has to be hands')
000516:0x00251fd8:	imove	#return, 0x000000
000516:0x00251fe8:	release	itemInHands
000516:0x00251ff0:	release	src
000516:0x00251ff8:	rts
000519:0x00252000:	call	
000519:0x00252010:	adds	@s01, _s'[inv] HumanInventory::ReplaceItemInHandsWithNewImpl No item in hands, event=', #return
000519:0x00252020:	moves	@s00, @s01
000519:0x00252030:	call	Error(@s00)
000520:0x00252040:	imove	#return, 0x000000
000520:0x00252050:	release	itemInHands
000520:0x00252058:	release	src
000520:0x00252060:	rts
000520:0x00252068:	release	itemInHands
000520:0x00252070:	release	src
000520:0x00252078:	rts
HumanInventory::ReplaceItemInHandsWithNew()
000525:0x00252080:	call	
000525:0x00252090:	movetm	src, null
000525:0x002520a0:	new	@c00, HandEventDestroyAndReplaceWithNew
000525:0x002520d0:	pushc	@c00
000525:0x002520d8:	call	
000525:0x002520f0:	move	#return, #return
000525:0x00252100:	release	#return
000525:0x00252108:	rts
000525:0x00252110:	popc	@c00
000525:0x00252118:	release	@c00
000525:0x00252120:	rts
HumanInventory::ReplaceItemInHandsWithNewElsewhere()
000530:0x00252128:	call	
000530:0x00252138:	movetm	src, null
000530:0x00252148:	new	@c00, HandEventDestroyAndReplaceWithNewElsewhere
000530:0x00252178:	pushc	@c00
000530:0x00252180:	call	
000530:0x00252198:	move	#return, #return
000530:0x002521a8:	release	#return
000530:0x002521b0:	rts
000530:0x002521b8:	popc	@c00
000530:0x002521c0:	release	@c00
000530:0x002521c8:	rts
HumanInventory::SwappingToPreviousLocation()
000535:0x002522f0:	imove	SwapToPrevious, 0x000001
000536:0x00252300:	new	src1, InventoryLocation
000537:0x00252320:	new	src2, InventoryLocation
000538:0x00252340:	new	dst, InventoryLocation
000539:0x00252360:	ncalli	EntityAI.GetInventory()
000539:0x00252368:	movefm	[0xb5bad1f8], src1
000539:0x00252378:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000539:0x00252388:	cmpi	#return, _i0
000539:0x00252398:	beq	0x2527b8
000539:0x002523a0:	ncalli	EntityAI.GetInventory()
000539:0x002523a8:	movefm	[0xb5bad1f8], src2
000539:0x002523b8:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000539:0x002523c8:	cmpi	#return, _i0
000539:0x002523d8:	beq	0x2527b8
000541:0x002523e0:	movefm	@c00, item1
000541:0x002523f0:	cmpcm	m_OldLocation, null
000541:0x00252400:	beq	0x2527b8
000541:0x00252408:	movefm	@c00, item1
000541:0x00252418:	movefm	[0xb5b18280], m_OldLocation
000541:0x00252428:	ncalli	InventoryLocation.IsValid()
000541:0x00252430:	cmpi	#return, _i0
000541:0x00252440:	beq	0x2527b8
000541:0x00252448:	movefm	@c00, item1
000541:0x00252458:	movefm	@c01, m_OldLocation
000541:0x00252468:	movefm	[0xb5b9f568], src2
000541:0x00252478:	ncalli	InventoryLocation.CollidesWith([0xb5b9f568])
000541:0x00252488:	cmpi	#return, _i0
000541:0x00252498:	bne	0x2527b8
000541:0x002524a0:	movefm	@c00, item1
000541:0x002524b0:	movefm	[0xb5b18280], m_OldLocation
000541:0x002524c0:	ncalli	InventoryLocation.GetParent()
000541:0x002524c8:	cmpm	#return, null
000541:0x002524d8:	beq	0x2527b8
000541:0x002524e0:	movefm	@c00, item1
000541:0x002524f0:	movefm	[0xb5b18280], m_OldLocation
000541:0x00252500:	ncalli	InventoryLocation.GetParent()
000541:0x00252508:	ncalli	EntityAI.GetHierarchyRootPlayer()
000541:0x00252510:	cmpm	#return, null
000541:0x00252520:	beq	0x2527b8
000543:0x00252528:	movefm	@c01, item1
000543:0x00252538:	movefm	[0xb5b9f5b8], m_OldLocation
000543:0x00252548:	ncalli	InventoryLocation.Copy([0xb5b9f5b8])
000545:0x00252558:	ncalli	EntityAI.GetInventory()
000545:0x00252560:	ncalli	GameInventory.GetSlotIdCount()
000545:0x00252568:	move	count, #return
000546:0x00252578:	cmpi	count, _i0
000546:0x00252588:	ble	0x2526a0
000546:0x00252590:	ncalli	InventoryLocation.GetType()
000546:0x00252598:	move	@m00, #return
000546:0x002525a8:	cmpi	@m00, _i2
000546:0x002525b8:	bne	0x2526a0
000549:0x002525c0:	imove	i, 0x000000
000549:0x002525d0:	jump	0x2525f0
000549:0x002525d8:	move	@m00, i
000549:0x002525e8:	inc	i
000549:0x002525f0:	cmpi	i, count
000549:0x00252600:	bge	0x2526a0
000551:0x00252608:	ncalli	EntityAI.GetInventory()
000551:0x00252610:	ncalli	GameInventory.GetSlotId(i)
000551:0x00252620:	move	slotID, #return
000553:0x00252630:	ncalli	InventoryLocation.GetSlot()
000553:0x00252638:	move	@m00, #return
000553:0x00252648:	cmpi	@m00, slotID
000553:0x00252658:	bne	0x252698
000554:0x00252660:	imove	#return, 0x000000
000554:0x00252670:	release	src1
000554:0x00252678:	release	src2
000554:0x00252680:	movem	dst, dst
000554:0x00252690:	rts
000554:0x00252698:	jump	0x2525d8
000560:0x002526a0:	movefm	@c00, item1
000560:0x002526b0:	movefm	[0xb5b18280], m_OldLocation
000560:0x002526c0:	ncalli	InventoryLocation.GetParent()
000560:0x002526c8:	ncalli	EntityAI.GetInventory()
000560:0x002526d0:	movefm	@c02, item1
000560:0x002526e0:	movefm	[0xb5bad6e8], m_OldLocation
000560:0x002526f0:	ncall	LocationCanAddEntity([0xb5bad6e8])
000560:0x00252700:	cmpi	#return, _i0
000560:0x00252710:	bne	0x252728
000563:0x00252718:	imove	SwapToPrevious, 0x000000
000565:0x00252728:	call	CanSwapEntitiesEx(item1, item2)
000565:0x00252740:	cmpi	#return, _i0
000565:0x00252750:	beq	0x252768
000567:0x00252758:	imove	SwapToPrevious, 0x000000
000571:0x00252768:	cmpi	SwapToPrevious, _i0
000571:0x00252778:	beq	0x2527b8
000572:0x00252780:	imove	#return, 0x000001
000572:0x00252790:	release	src1
000572:0x00252798:	release	src2
000572:0x002527a0:	movem	dst, dst
000572:0x002527b0:	rts
000576:0x002527b8:	imove	#return, 0x000000
000576:0x002527c8:	release	src1
000576:0x002527d0:	release	src2
000576:0x002527d8:	movem	dst, dst
000576:0x002527e8:	rts
000576:0x002527f0:	release	src1
000576:0x002527f8:	release	src2
000576:0x00252800:	movem	dst, dst
000576:0x00252810:	rts
HumanInventory::Update()
000584:0x00252890:	call	
000585:0x002528a0:	cmpi	m_syncClearUserReservationindex, _i-1
000585:0x002528b0:	beq	0x252a28
000585:0x002528b8:	ncall	CanStoreInputUserData()
000585:0x002528c0:	cmpi	#return, _i0
000585:0x002528d0:	beq	0x252a28
000587:0x002528d8:	new	ctx, ScriptInputUserData
000588:0x002528f8:	icall	
000589:0x00252908:	icall	
000590:0x00252918:	icall	
000591:0x00252928:	ncalli	ScriptInputUserData.Send()
000593:0x00252930:	new	il, InventoryLocation
000595:0x00252950:	move	[0xb5bfb570], m_syncClearUserReservationindex
000595:0x00252960:	movefm	[0xb5bfb598], il
000595:0x00252970:	ncalli	HumanInventory.GetUserReservedLocation([0xb5bfb570], [0xb5bfb598])
000596:0x00252980:	move	[0xb5bfb6b0], m_syncClearUserReservationindex
000596:0x00252990:	ncalli	HumanInventory.ClearUserReservedLocationAtIndex([0xb5bfb6b0])
000597:0x002529a0:	ncalli	InventoryLocation.GetItem()
000597:0x002529a8:	movetm	item, #return
000598:0x002529b8:	call	
000598:0x002529c8:	icall	
000598:0x002529f8:	release	#return
000599:0x00252a00:	imove	m_syncClearUserReservationindex, 0xffffffff
000599:0x00252a10:	release	ctx
000599:0x00252a18:	release	il
000599:0x00252a20:	release	item
000599:0x00252a28:	rts
HumanInventory::ValidateUserReservationCancel()
000611:0x00252a58:	movefm	@c00, validation
000611:0x00252a68:	imove	m_Result, 0x000002
000613:0x00252a78:	imove	index, 0xffffffff
000614:0x00252a88:	icall	
000614:0x00252a98:	cmpi	#return, _i0
000614:0x00252aa8:	bne	0x252ad8
000617:0x00252ab0:	imove	#return, 0x000001
000617:0x00252ac0:	movem	ctx, ctx
000617:0x00252ad0:	rts
000620:0x00252ad8:	ncalli	HumanInventory.ClearUserReservedLocationAtIndex(index)
000623:0x00252ae8:	imove	#return, 0x000001
000623:0x00252af8:	movem	ctx, ctx
000623:0x00252b08:	rts
000623:0x00252b10:	movem	ctx, ctx
000623:0x00252b20:	rts
HumanInventory::HumanInventory()
000009:0x00252b28:	imove	m_syncClearUserReservationindex, 0xffffffff
000009:0x00252b38:	rts
DamageSystem::GetDamageZoneMap()
//scripts/3_Game/damagesystem.c
000032:0x00252c88:	call	
000032:0x00252c98:	cmpi	#return, _i0
000032:0x00252ca8:	beq	0x252cc8
000034:0x00252cb0:	moves	path_base, CFG_WEAPONSPATH
000034:0x00252cc0:	jump	0x252d18
000036:0x00252cc8:	call	
000036:0x00252cd8:	cmpi	#return, _i0
000036:0x00252ce8:	beq	0x252d08
000038:0x00252cf0:	moves	path_base, CFG_MAGAZINESPATH
000038:0x00252d00:	jump	0x252d18
000042:0x00252d08:	moves	path_base, CFG_VEHICLESPATH
000045:0x00252d18:	call	
000045:0x00252d28:	icall	Format(_s'%1 %2 DamageSystem DamageZones', path_base, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000045:0x00252d58:	moves	path_base, #return
000047:0x00252d68:	ncall	GetGame()
000047:0x00252d70:	ncalli	CGame.ConfigIsExisting(path_base)
000047:0x00252d80:	cmpi	#return, _i0
000047:0x00252d90:	bne	0x252dc8
000049:0x00252d98:	imove	#return, 0x000000
000049:0x00252da8:	movem	zoneMap, zoneMap
000049:0x00252db8:	rts
000049:0x00252dc0:	jump	0x252fa0
000054:0x00252dc8:	new	zone_names, array<string>
000057:0x00252de8:	movefm	[0xb5b6a438], zone_names
000057:0x00252df8:	ncalli	EntityAI.GetDamageZones([0xb5b6a438])
000058:0x00252e08:	imove	i, 0x000000
000058:0x00252e18:	jump	0x252e38
000058:0x00252e20:	move	@m00, i
000058:0x00252e30:	inc	i
000058:0x00252e38:	ncalli	array<string>.Count()
000058:0x00252e40:	cmpi	i, #return
000058:0x00252e50:	bge	0x252f58
000060:0x00252e58:	new	component_names, array<string>
000061:0x00252e78:	icall	
000061:0x00252e88:	moves	zone, #return
000063:0x00252e98:	icall	Format(_s'%1 %2 componentNames ', path_base, zone, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000063:0x00252ec8:	moves	path, #return
000064:0x00252ed8:	ncall	GetGame()
000064:0x00252ee0:	ncalli	CGame.ConfigIsExisting(path)
000064:0x00252ef0:	cmpi	#return, _i0
000064:0x00252f00:	beq	0x252f30
000066:0x00252f08:	ncall	GetGame()
000066:0x00252f10:	movefm	[0xb5bda188], component_names
000066:0x00252f20:	ncalli	CGame.ConfigGetTextArray(path, [0xb5bda188])
000068:0x00252f30:	movefm	@c00, component_names
000068:0x00252f40:	icall	
000068:0x00252f50:	jump	0x252e20
000071:0x00252f58:	imove	#return, 0x000001
000071:0x00252f68:	release	zone_names
000071:0x00252f70:	release	component_names
000071:0x00252f78:	movem	zoneMap, zoneMap
000071:0x00252f88:	rts
000071:0x00252f90:	release	zone_names
000071:0x00252f98:	release	component_names
000071:0x00252fa0:	movem	zoneMap, zoneMap
000071:0x00252fb0:	rts
DamageSystem::GetDamageZoneFromComponentName()
000078:0x00253138:	call	
000078:0x00253148:	movem	zoneMap, #return
000078:0x00253158:	release	#return
000080:0x00253160:	call	
000080:0x00253170:	movem	components, #return
000080:0x00253180:	release	#return
000081:0x00253188:	imove	i, 0x000000
000081:0x00253198:	jump	0x2531b8
000081:0x002531a0:	move	@m00, i
000081:0x002531b0:	inc	i
000081:0x002531b8:	ncalli	array<array<string>>.Count()
000081:0x002531c0:	cmpi	i, #return
000081:0x002531d0:	bge	0x253328
000083:0x002531d8:	icall	
000083:0x002531e8:	movetm	inner, #return
000084:0x002531f8:	imove	j, 0x000000
000084:0x00253208:	jump	0x253228
000084:0x00253210:	move	@m00, j
000084:0x00253220:	inc	j
000084:0x00253228:	ncalli	array<string>.Count()
000084:0x00253230:	cmpi	j, #return
000084:0x00253240:	bge	0x253318
000086:0x00253248:	icall	
000086:0x00253258:	moves	innerComponentName, #return
000087:0x00253268:	icall	ToLower(innerComponentName)
000090:0x00253278:	cmps	innerComponentName, _s''
000090:0x00253288:	bne	0x253298
000091:0x00253290:	jump	0x253318
000093:0x00253298:	cmps	innerComponentName, component
000093:0x002532a8:	bne	0x253310
000095:0x002532b0:	icall	
000095:0x002532c0:	moves	damageZone, #return
000096:0x002532d0:	imove	#return, 0x000001
000096:0x002532e0:	release	inner
000096:0x002532e8:	release	zoneMap
000096:0x002532f0:	release	components
000096:0x002532f8:	moves	damageZone, damageZone
000096:0x00253308:	rts
000096:0x00253310:	jump	0x253210
000096:0x00253318:	release	inner
000096:0x00253320:	jump	0x2531a0
000100:0x00253328:	moves	damageZone, _s''
000101:0x00253338:	imove	#return, 0x000000
000101:0x00253348:	release	zoneMap
000101:0x00253350:	release	components
000101:0x00253358:	moves	damageZone, damageZone
000101:0x00253368:	rts
000101:0x00253370:	release	zoneMap
000101:0x00253378:	release	components
000101:0x00253380:	moves	damageZone, damageZone
000101:0x00253390:	rts
DamageSystem::GetComponentNamesFromDamageZone()
000108:0x002533e8:	call	
000108:0x002533f8:	cmpi	#return, _i0
000108:0x00253408:	beq	0x253428
000110:0x00253410:	moves	path, CFG_WEAPONSPATH
000110:0x00253420:	jump	0x253478
000112:0x00253428:	call	
000112:0x00253438:	cmpi	#return, _i0
000112:0x00253448:	beq	0x253468
000114:0x00253450:	moves	path, CFG_MAGAZINESPATH
000114:0x00253460:	jump	0x253478
000118:0x00253468:	moves	path, CFG_VEHICLESPATH
000121:0x00253478:	call	
000121:0x00253488:	icall	Format(_s'%1 %2 DamageSystem DamageZones %3 componentNames', path, #return, damageZone, _c0, _c0, _c0, _c0, _c0, _c0)
000121:0x002534b8:	moves	path, #return
000122:0x002534c8:	ncall	GetGame()
000122:0x002534d0:	ncalli	CGame.ConfigIsExisting(path)
000122:0x002534e0:	cmpi	#return, _i0
000122:0x002534f0:	beq	0x253548
000124:0x002534f8:	ncall	GetGame()
000124:0x00253500:	movefm	[0xb5bda188], componentNames
000124:0x00253510:	ncalli	CGame.ConfigGetTextArray(path, [0xb5bda188])
000125:0x00253520:	imove	#return, 0x000001
000125:0x00253530:	movem	componentNames, componentNames
000125:0x00253540:	rts
000128:0x00253548:	imove	#return, 0x000000
000128:0x00253558:	movem	componentNames, componentNames
000128:0x00253568:	rts
000128:0x00253570:	movem	componentNames, componentNames
000128:0x00253580:	rts
DamageSystem::GetDamageDisplayName()
000134:0x002535b0:	call	
000134:0x002535c0:	ncall	Hash(zone)
000134:0x002535d0:	icall	
000134:0x002535e0:	release	#return
000135:0x002535e8:	icall	TranslateString(component_name)
000135:0x002535f8:	moves	component_name, #return
000136:0x00253608:	moves	#return, component_name
000136:0x00253618:	rts
000136:0x00253620:	rts
UIScriptedWindow::AddToActiveWindows()
//scripts/3_Game/tools\uiscriptedwindow.c
000011:0x00253628:	cmpcm	m_ActiveWindows, NULL
000011:0x00253638:	bne	0x253660
000013:0x00253640:	new	m_ActiveWindows, map<int,UIScriptedWindow>
000016:0x00253660:	movefm	@c00, window
000016:0x00253670:	icall	
000016:0x00253680:	rts
UIScriptedWindow::RemoveFromActiveWindows()
000021:0x00253688:	cmpcm	m_ActiveWindows, null
000021:0x00253698:	beq	0x2536b0
000023:0x002536a0:	icall	
000023:0x002536b0:	rts
UIScriptedWindow::GetWindow()
000029:0x002536b8:	cmpcm	m_ActiveWindows, null
000029:0x002536c8:	beq	0x2536f8
000031:0x002536d0:	icall	
000031:0x002536e0:	movetm	#return, #return
000031:0x002536f0:	rts
000034:0x002536f8:	movetm	#return, NULL
000034:0x00253708:	rts
000034:0x00253710:	rts
UIScriptedWindow::GetActiveWindows()
000039:0x00253718:	movem	#return, m_ActiveWindows
000039:0x00253728:	rts
000039:0x00253730:	rts
UIScriptedWindow::UIScriptedWindow()
000046:0x00253738:	move	m_Id, id
000046:0x00253748:	rts
UIScriptedWindow::~UIScriptedWindow()
000051:0x00253750:	call	
000051:0x00253760:	ncalli	Widget.Show(false, _i1)
000051:0x00253770:	release	#return
000052:0x00253778:	call	
000052:0x00253788:	delete	#return
000052:0x00253790:	release	#return
000052:0x00253798:	rts
UIScriptedWindow::GetWidgetRoot()
000057:0x002537a0:	movem	#return, m_WgtRoot
000057:0x002537b0:	rts
000057:0x002537b8:	rts
UIScriptedWindow::ShowWindow()
000066:0x002537c0:	call	
000066:0x002537d0:	ncalli	Widget.Show(true, _i1)
000066:0x002537e0:	release	#return
000066:0x002537e8:	rts
UIScriptedWindow::HideWindow()
000071:0x002537f0:	call	
000071:0x00253800:	ncalli	Widget.Show(false, _i1)
000071:0x00253810:	release	#return
000071:0x00253818:	rts
UIScriptedWindow::CloseWindow()
000076:0x00253820:	ncall	GetGame()
000076:0x00253828:	ncalli	CGame.GetUIManager()
000076:0x00253830:	move	id, m_Id
000076:0x00253840:	call	
000076:0x00253850:	rts
UIScriptedWindow::OnClick()
000082:0x00253858:	imove	#return, 0x000000
000082:0x00253868:	rts
000082:0x00253870:	rts
UIScriptedWindow::OnModalResult()
000087:0x00253878:	imove	#return, 0x000000
000087:0x00253888:	rts
000087:0x00253890:	rts
UIScriptedWindow::OnDoubleClick()
000092:0x00253898:	imove	#return, 0x000000
000092:0x002538a8:	rts
000092:0x002538b0:	rts
UIScriptedWindow::OnSelect()
000097:0x002538b8:	imove	#return, 0x000000
000097:0x002538c8:	rts
000097:0x002538d0:	rts
UIScriptedWindow::OnItemSelected()
000102:0x002538d8:	imove	#return, 0x000000
000102:0x002538e8:	rts
000102:0x002538f0:	rts
UIScriptedWindow::OnFocus()
000107:0x002538f8:	imove	#return, 0x000000
000107:0x00253908:	rts
000107:0x00253910:	rts
UIScriptedWindow::OnFocusLost()
000112:0x00253918:	imove	#return, 0x000000
000112:0x00253928:	rts
000112:0x00253930:	rts
UIScriptedWindow::OnMouseEnter()
000117:0x00253938:	imove	#return, 0x000000
000117:0x00253948:	rts
000117:0x00253950:	rts
UIScriptedWindow::OnMouseLeave()
000122:0x00253958:	imove	#return, 0x000000
000122:0x00253968:	rts
000122:0x00253970:	rts
UIScriptedWindow::OnMouseButtonDown()
000127:0x00253978:	imove	#return, 0x000000
000127:0x00253988:	rts
000127:0x00253990:	rts
UIScriptedWindow::OnMouseButtonUp()
000132:0x00253998:	imove	#return, 0x000000
000132:0x002539a8:	rts
000132:0x002539b0:	rts
UIScriptedWindow::OnMouseWheel()
000137:0x002539b8:	imove	#return, 0x000000
000137:0x002539c8:	rts
000137:0x002539d0:	rts
UIScriptedWindow::OnController()
000142:0x002539d8:	imove	#return, 0x000000
000142:0x002539e8:	rts
000142:0x002539f0:	rts
UIScriptedWindow::OnKeyDown()
000147:0x002539f8:	imove	#return, 0x000000
000147:0x00253a08:	rts
000147:0x00253a10:	rts
UIScriptedWindow::OnKeyUp()
000152:0x00253a18:	imove	#return, 0x000000
000152:0x00253a28:	rts
000152:0x00253a30:	rts
UIScriptedWindow::OnKeyPress()
000157:0x00253a38:	imove	#return, 0x000000
000157:0x00253a48:	rts
000157:0x00253a50:	rts
UIScriptedWindow::OnChange()
000162:0x00253a58:	imove	#return, 0x000000
000162:0x00253a68:	rts
000162:0x00253a70:	rts
UIScriptedWindow::OnDrag()
000167:0x00253a78:	imove	#return, 0x000000
000167:0x00253a88:	rts
000167:0x00253a90:	rts
UIScriptedWindow::OnDragging()
000172:0x00253a98:	imove	#return, 0x000000
000172:0x00253aa8:	rts
000172:0x00253ab0:	rts
UIScriptedWindow::OnDraggingOver()
000177:0x00253ab8:	imove	#return, 0x000000
000177:0x00253ac8:	rts
000177:0x00253ad0:	rts
UIScriptedWindow::OnDrop()
000182:0x00253ad8:	imove	#return, 0x000000
000182:0x00253ae8:	rts
000182:0x00253af0:	rts
UIScriptedWindow::OnDropReceived()
000187:0x00253af8:	imove	#return, 0x000000
000187:0x00253b08:	rts
000187:0x00253b10:	rts
UIScriptedWindow::OnEvent()
000192:0x00253b18:	imove	#return, 0x000000
000192:0x00253b28:	rts
000192:0x00253b30:	rts
SoundLookupTable::SoundLookupTable()
//scripts/3_Game/dayzanimeventmaps.c
000006:0x00253b38:	new	m_soundBuilders, map<int,@array<SoundObjectBuilder>>
000006:0x00253b58:	rts
SoundLookupTable::InitTable()
000011:0x00253b60:	moves	m_tableCategoryName, tableCategoryName
000012:0x00253b70:	moves	m_parameterName, parameterName
000012:0x00253b80:	rts
SoundLookupTable::LoadTable()
000017:0x00253e80:	adds	@s02, _s'CfgSoundTables ', m_tableCategoryName
000017:0x00253e90:	moves	@s01, @s02
000017:0x00253ea0:	adds	@s01, @s01, _s' '
000017:0x00253eb0:	moves	@s00, @s01
000017:0x00253ec0:	adds	path, @s00, soundLookupTableName
000020:0x00253ed0:	ncall	GetGame()
000020:0x00253ed8:	ncalli	CGame.ConfigGetChildrenCount(path)
000020:0x00253ee8:	move	soundCount, #return
000022:0x00253ef8:	imove	i, 0x000000
000022:0x00253f08:	jump	0x253f28
000022:0x00253f10:	move	@m00, i
000022:0x00253f20:	inc	i
000022:0x00253f28:	cmpi	i, soundCount
000022:0x00253f38:	bge	0x2541f8
000025:0x00253f40:	ncall	GetGame()
000025:0x00253f48:	icall	
000026:0x00253f60:	adds	@s02, path, _s' '
000026:0x00253f70:	moves	@s01, @s02
000026:0x00253f80:	adds	@s01, @s01, soundClassName
000026:0x00253f90:	moves	@s00, @s01
000026:0x00253fa0:	adds	soundClassPath, @s00, _s' '
000029:0x00253fb0:	ncall	GetGame()
000029:0x00253fb8:	adds	@s01, soundClassPath, m_parameterName
000029:0x00253fc8:	moves	@s00, @s01
000029:0x00253fd8:	icall	
000031:0x00253fe8:	new	soundSetNames, array<string>
000032:0x00254008:	ncall	GetGame()
000032:0x00254010:	adds	@s01, soundClassPath, _s'soundSets'
000032:0x00254020:	moves	@s00, @s01
000032:0x00254030:	movefm	[0xb5bda188], soundSetNames
000032:0x00254040:	ncalli	CGame.ConfigGetTextArray(@s00, [0xb5bda188])
000035:0x00254050:	new	soundObjectBuilders, array<SoundObjectBuilder>
000036:0x00254070:	imove	j, 0x000000
000036:0x00254080:	jump	0x2540a0
000036:0x00254088:	move	@m00, j
000036:0x00254098:	inc	j
000036:0x002540a0:	ncalli	array<string>.Count()
000036:0x002540a8:	cmpi	j, #return
000036:0x002540b8:	bge	0x254170
000038:0x002540c0:	call	GetInstance()
000038:0x002540d0:	movem	bank, #return
000038:0x002540e0:	release	#return
000039:0x002540e8:	icall	
000039:0x002540f8:	call	
000039:0x00254108:	movem	soundObjectBuilder, #return
000039:0x00254118:	release	#return
000041:0x00254120:	cmpcm	soundObjectBuilder, NULL
000041:0x00254130:	beq	0x254158
000042:0x00254138:	movefm	@c00, soundObjectBuilder
000042:0x00254148:	icall	
000042:0x00254158:	release	bank
000042:0x00254160:	release	soundObjectBuilder
000042:0x00254168:	jump	0x254088
000045:0x00254170:	ncalli	array<SoundObjectBuilder>.Count()
000045:0x00254178:	move	@m00, #return
000045:0x00254188:	cmpi	@m00, _i0
000045:0x00254198:	ble	0x2541e0
000048:0x002541a0:	ncall	Hash(parameter)
000048:0x002541b0:	movefm	@c00, soundObjectBuilders
000048:0x002541c0:	movefm	[0xb5bf7090], m_soundBuilders
000048:0x002541d0:	icall	
000048:0x002541e0:	release	soundSetNames
000048:0x002541e8:	release	soundObjectBuilders
000048:0x002541f0:	jump	0x253f10
000048:0x002541f8:	rts
SoundLookupTable::GetSoundBuilder()
000055:0x00254280:	movefm	[0xb5bf7090], m_soundBuilders
000055:0x00254290:	icall	
000055:0x002542a0:	movetm	soundObjects, #return
000057:0x002542b0:	cmpcm	soundObjects, NULL
000057:0x002542c0:	beq	0x2542f8
000057:0x002542c8:	ncalli	array<SoundObjectBuilder>.Count()
000057:0x002542d0:	move	@m00, #return
000057:0x002542e0:	cmpi	@m00, _i0
000057:0x002542f0:	bne	0x254320
000059:0x002542f8:	movetm	#return, NULL
000059:0x00254308:	release	soundObjects
000059:0x00254310:	rts
000059:0x00254318:	jump	0x2543e0
000061:0x00254320:	ncalli	array<SoundObjectBuilder>.Count()
000061:0x00254328:	move	@m00, #return
000061:0x00254338:	cmpi	@m00, _i1
000061:0x00254348:	bne	0x254388
000063:0x00254350:	icall	
000063:0x00254360:	movetm	#return, #return
000063:0x00254370:	release	soundObjects
000063:0x00254378:	rts
000063:0x00254380:	jump	0x2543e0
000067:0x00254388:	ncalli	array<SoundObjectBuilder>.Count()
000067:0x00254390:	icall	RandomInt(_i0, #return)
000067:0x002543a0:	move	index, #return
000068:0x002543b0:	icall	
000068:0x002543c0:	movetm	#return, #return
000068:0x002543d0:	release	soundObjects
000068:0x002543d8:	rts
000068:0x002543e0:	release	soundObjects
000068:0x002543e8:	rts
StepSoundLookupTable::StepSoundLookupTable()
000083:0x00254440:	call	
000083:0x00254458:	rts
AttachmentSoundLookupTable::AttachmentSoundLookupTable()
000091:0x002544b0:	call	
000091:0x002544c8:	rts
PlayerVoiceLookupTable::PlayerVoiceLookupTable()
000101:0x002544f8:	call	
000101:0x00254510:	rts
PlayerVoiceLookupTable::SetNoiseParam()
000106:0x00254518:	movem	m_NoiseParams, param
000106:0x00254528:	rts
PlayerVoiceLookupTable::GetNoiseParam()
000111:0x00254530:	movem	#return, m_NoiseParams
000111:0x00254540:	rts
000111:0x00254548:	rts
ImpactSoundLookupTable::ImpactSoundLookupTable()
000120:0x00254578:	call	
000120:0x00254590:	rts
ActionSoundLookupTable::ActionSoundLookupTable()
000128:0x002545c0:	call	
000128:0x002545d8:	rts
AnimSoundObjectBuilderBank::AnimSoundObjectBuilderBank()
000137:0x002545e0:	new	m_pBuilders, map<int,@SoundObjectBuilder>
000137:0x00254600:	rts
AnimSoundObjectBuilderBank::GetInstance()
000143:0x00254608:	cmpcm	m_instance, NULL
000143:0x00254618:	bne	0x254640
000144:0x00254620:	new	m_instance, AnimSoundObjectBuilderBank
000146:0x00254640:	movem	#return, m_instance
000146:0x00254650:	rts
000146:0x00254658:	rts
AnimSoundObjectBuilderBank::GetBuilder()
000152:0x00254788:	ncall	Hash(soundSetName)
000152:0x00254798:	move	soundSetNameHash, #return
000154:0x002547a8:	movefm	[0xb5bb8838], m_pBuilders
000154:0x002547b8:	icall	
000154:0x002547c8:	movetm	builder, #return
000155:0x002547d8:	cmpcm	builder, NULL
000155:0x002547e8:	bne	0x254918
000157:0x002547f0:	new	params, SoundParams
000158:0x00254818:	ncalli	SoundParams.IsValid()
000158:0x00254820:	cmpi	#return, _i0
000158:0x00254830:	beq	0x254898
000160:0x00254838:	new	builder, SoundObjectBuilder
000161:0x00254860:	movefm	@c00, builder
000161:0x00254870:	movefm	[0xb5bb8838], m_pBuilders
000161:0x00254880:	icall	
000161:0x00254890:	jump	0x254910
000165:0x00254898:	adds	@s01, _s'AnimSoundObjectBuilderBank: Invalid sound set "', soundSetName
000165:0x002548a8:	moves	@s00, @s01
000165:0x002548b8:	adds	@s00, @s00, _s'".'
000165:0x002548c8:	moves	@s01, @s00
000165:0x002548d8:	icall	Print(@s01)
000166:0x002548e8:	movetm	#return, NULL
000166:0x002548f8:	release	params
000166:0x00254900:	release	builder
000166:0x00254908:	rts
000166:0x00254910:	release	params
000169:0x00254918:	movem	#return, builder
000169:0x00254928:	release	builder
000169:0x00254930:	rts
000169:0x00254938:	release	builder
000169:0x00254940:	rts
AnimSoundLookupTableBank::AnimSoundLookupTableBank()
000181:0x00254948:	new	m_pTables, map<int,@SoundLookupTable>
000181:0x00254968:	rts
AnimSoundLookupTableBank::GetInstance()
000187:0x00254970:	cmpcm	m_instance, NULL
000187:0x00254980:	bne	0x2549a8
000188:0x00254988:	new	m_instance, AnimSoundLookupTableBank
000190:0x002549a8:	movem	#return, m_instance
000190:0x002549b8:	rts
000190:0x002549c0:	rts
AnimSoundLookupTableBank::GetStepTable()
000196:0x00254a70:	ncall	Hash(tableName)
000196:0x00254a80:	move	tableNameHash, #return
000198:0x00254a90:	movefm	[0xb5bb9c70], m_pTables
000198:0x00254aa0:	icall	
000198:0x00254ab0:	movetm	table, #return
000199:0x00254ac0:	cmpcm	table, NULL
000199:0x00254ad0:	bne	0x254b38
000201:0x00254ad8:	new	table, StepSoundLookupTable
000202:0x00254af8:	call	
000203:0x00254b08:	movefm	@c00, table
000203:0x00254b18:	movefm	[0xb5bb9c70], m_pTables
000203:0x00254b28:	icall	
000205:0x00254b38:	movem	#return, table
000205:0x00254b48:	release	table
000205:0x00254b50:	rts
000205:0x00254b58:	release	table
000205:0x00254b60:	rts
AnimSoundLookupTableBank::GetImpactTable()
000210:0x00254bb8:	ncall	Hash(tableName)
000210:0x00254bc8:	move	tableNameHash, #return
000212:0x00254bd8:	movefm	[0xb5bb9c70], m_pTables
000212:0x00254be8:	icall	
000212:0x00254bf8:	movetm	table, #return
000213:0x00254c08:	cmpcm	table, NULL
000213:0x00254c18:	bne	0x254c80
000215:0x00254c20:	new	table, ImpactSoundLookupTable
000216:0x00254c40:	call	
000217:0x00254c50:	movefm	@c00, table
000217:0x00254c60:	movefm	[0xb5bb9c70], m_pTables
000217:0x00254c70:	icall	
000219:0x00254c80:	movem	#return, table
000219:0x00254c90:	release	table
000219:0x00254c98:	rts
000219:0x00254ca0:	release	table
000219:0x00254ca8:	rts
AnimSoundLookupTableBank::GetActionTable()
000224:0x00254d00:	ncall	Hash(tableName)
000224:0x00254d10:	move	tableNameHash, #return
000226:0x00254d20:	movefm	[0xb5bb9c70], m_pTables
000226:0x00254d30:	icall	
000226:0x00254d40:	movetm	table, #return
000227:0x00254d50:	cmpcm	table, NULL
000227:0x00254d60:	bne	0x254dc8
000229:0x00254d68:	new	table, ActionSoundLookupTable
000230:0x00254d88:	call	
000231:0x00254d98:	movefm	@c00, table
000231:0x00254da8:	movefm	[0xb5bb9c70], m_pTables
000231:0x00254db8:	icall	
000233:0x00254dc8:	movem	#return, table
000233:0x00254dd8:	release	table
000233:0x00254de0:	rts
000233:0x00254de8:	release	table
000233:0x00254df0:	rts
EffBreathVapourHeavy::EffBreathVapourHeavy()
//scripts/3_Game/effects\effectparticle\player\effbreathvapourheavy.c
000005:0x00254df8:	call	
000005:0x00254e08:	rts
Bouncer::Bouncer()
//scripts/3_Game/gui\effects\bouncer.c
000015:0x00254e10:	new	m_anim, AnimatorTimer
000015:0x00254e30:	rts
Bouncer::Update()
000021:0x00254e60:	icall	Print(_s'Update')
000023:0x00254e70:	cmpcm	m_root, null
000023:0x00254e80:	beq	0x254f60
000025:0x00254e88:	movefm	[0xb5b3c880], m_anim
000025:0x00254e98:	call	
000025:0x00254ea8:	mulf	p, amount, #return
000026:0x00254eb8:	mulf	@f02, m_orginal_width, p
000026:0x00254ec8:	move	@f01, @f02
000026:0x00254ed8:	addf	@f01, m_orginal_width, @f01
000026:0x00254ee8:	move	@f00, @f01
000026:0x00254ef8:	mulf	@f03, m_orginal_height, p
000026:0x00254f08:	move	@f02, @f03
000026:0x00254f18:	subf	@f02, m_orginal_height, @f02
000026:0x00254f28:	move	@f01, @f02
000026:0x00254f38:	movefm	[0xd31345a8], m_root
000026:0x00254f48:	ncalli	Widget.SetSize(@f00, @f01, _i1)
000026:0x00254f60:	rts
Bouncer::OnWidgetScriptInit()
000033:0x00254f68:	movem	m_root, w
000034:0x00254f78:	movefm	[0xd31345a8], m_root
000034:0x00254f88:	icall	
000035:0x00254f98:	move	speed, speed
000035:0x00254fa8:	movefm	[0xb5b3c880], m_anim
000035:0x00254fb8:	call	
000035:0x00254fc8:	rts
PPEDepthOfField::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppedepthoffield.c
000017:0x00254fd0:	imove	#return, 0x000003
000017:0x00254fe0:	rts
000017:0x00254fe8:	rts
PPEDepthOfField::GetDefaultMaterialPath()
000022:0x00255040:	moves	ret, _s'Graphics/Materials/postprocess/depthoffieldTest2'
000046:0x00255050:	moves	#return, ret
000046:0x00255060:	rts
000046:0x00255068:	rts
PPEDepthOfField::RegisterMaterialParameters()
000051:0x00255200:	call	
000052:0x00255218:	call	
000053:0x00255238:	call	
000054:0x00255258:	call	
000055:0x00255278:	call	
000056:0x00255298:	call	
000057:0x002552b0:	call	
000058:0x002552d0:	call	
000059:0x002552f0:	call	
000059:0x00255310:	rts
GetServersResultRow::GetIpPort()
//scripts/3_Game/services\bioslobbyservice.c
000084:0x00255318:	moves	#return, m_Id
000084:0x00255328:	rts
000084:0x00255330:	rts
GetServersResultRow::GetIP()
000094:0x00255388:	new	parts, array<string>
000095:0x002553a8:	moves	value, m_Id
000095:0x002553b8:	call	Split(value, _s':', parts)
000095:0x002553d0:	moves	m_Id, value
000095:0x002553e0:	movem	parts, output
000095:0x002553f0:	release	output
000096:0x002553f8:	icall	
000096:0x00255408:	moves	#return, #return
000096:0x00255418:	release	parts
000096:0x00255420:	rts
000096:0x00255428:	release	parts
000096:0x00255430:	rts
GetServersResultRow::IsSelected()
000104:0x00255438:	move	#return, m_IsSelected
000104:0x00255448:	rts
000104:0x00255450:	rts
GetServersResultRow::GetValueStr()
000109:0x00255480:	move	#switch, sort_type
000109:0x00255490:	imove	@m00, 0x000000
000109:0x002554a0:	cmpi	@m00, #switch
000109:0x002554b0:	bne	0x2554d0
000113:0x002554b8:	moves	#return, m_Name
000113:0x002554c8:	rts
000117:0x002554d0:	moves	#return, _s''
000117:0x002554e0:	rts
000117:0x002554e8:	rts
GetServersResultRow::GetValueInt()
000122:0x00255518:	move	#switch, sort_type
000122:0x00255528:	imove	@m00, 0x000001
000122:0x00255538:	cmpi	@m00, #switch
000122:0x00255548:	bne	0x255570
000126:0x00255550:	move	#return, m_SortTime
000126:0x00255560:	rts
000126:0x00255568:	jump	0x255598
000126:0x00255570:	imove	@m00, 0x000002
000126:0x00255580:	cmpi	@m00, #switch
000126:0x00255590:	bne	0x2555b8
000130:0x00255598:	move	#return, m_CurrentNumberPlayers
000130:0x002555a8:	rts
000130:0x002555b0:	jump	0x2555e0
000130:0x002555b8:	imove	@m00, 0x000003
000130:0x002555c8:	cmpi	@m00, #switch
000130:0x002555d8:	bne	0x255600
000134:0x002555e0:	move	#return, m_MaxPlayers
000134:0x002555f0:	rts
000134:0x002555f8:	jump	0x255628
000134:0x00255600:	imove	@m00, 0x000004
000134:0x00255610:	cmpi	@m00, #switch
000134:0x00255620:	bne	0x255648
000138:0x00255628:	move	#return, m_Ping
000138:0x00255638:	rts
000138:0x00255640:	jump	0x255670
000138:0x00255648:	imove	@m00, 0x000005
000138:0x00255658:	cmpi	@m00, #switch
000138:0x00255668:	bne	0x255678
000138:0x00255670:	jump	0x2556a0
000138:0x00255678:	imove	@m00, 0x000006
000138:0x00255688:	cmpi	@m00, #switch
000138:0x00255698:	bne	0x2556a0
000150:0x002556a0:	imove	#return, 0x000000
000150:0x002556b0:	rts
000150:0x002556b8:	rts
GetFirstServerWithEmptySlotInput::SetOfficial()
000175:0x002556c0:	move	m_Official, Official
000176:0x002556d0:	imove	m_UseOfficial, 0x000001
000176:0x002556e0:	rts
GetFirstServerWithEmptySlotInput::SetGameVersion()
000181:0x002556e8:	moves	m_GameVersion, GameVersion
000182:0x002556f8:	imove	m_UseGameVersion, 0x000001
000182:0x00255708:	rts
GetFirstServerWithEmptySlotInput::SetRegionId()
000187:0x00255710:	move	m_RegionId, RegionId
000188:0x00255720:	imove	m_UseRegionId, 0x000001
000188:0x00255730:	rts
GetServersInput::SetAntiCheatFilter()
000258:0x00255738:	move	m_AntiCheat, anti_cheat
000259:0x00255748:	imove	m_UseAntiCheat, 0x000001
000259:0x00255758:	rts
GetServersInput::SetNameFilter()
000264:0x00255760:	moves	m_Name, name
000265:0x00255770:	imove	m_UseName, 0x000001
000265:0x00255780:	rts
GetServersInput::SetGameTypeFilter()
000270:0x00255788:	moves	m_GameType, game_type
000271:0x00255798:	imove	m_UseGameType, 0x000001
000271:0x002557a8:	rts
GetServersInput::SetModeIdFilter()
000276:0x002557b0:	move	m_ModeId, mode_id
000277:0x002557c0:	imove	m_UseModeId, 0x000001
000277:0x002557d0:	rts
GetServersInput::SetGameVersionFilter()
000282:0x002557d8:	moves	m_GameVersion, game_version
000283:0x002557e8:	imove	m_UseGameVersion, 0x000001
000283:0x002557f8:	rts
GetServersInput::SetOfficialFilter()
000288:0x00255800:	move	m_Official, official
000289:0x00255810:	imove	m_UseOfficial, 0x000001
000289:0x00255820:	rts
GetServersInput::SetJoinableFilter()
000294:0x00255828:	move	m_Joinable, joinable
000295:0x00255838:	imove	m_UseJoinable, 0x000001
000295:0x00255848:	rts
GetServersInput::SetMapNameToRun()
000300:0x00255850:	moves	m_MapNameToRun, mapNameToRun
000301:0x00255860:	imove	m_UseMapNameToRun, 0x000001
000301:0x00255870:	rts
GetServersInput::SetIsModdedFilter()
000306:0x00255878:	move	m_IsModded, is_modded
000307:0x00255888:	imove	m_UseIsModded, 0x000001
000307:0x00255898:	rts
GetServersInput::SetMinPlayersFilter()
000312:0x002558a0:	move	m_MinPlayers, min_players
000313:0x002558b0:	imove	m_UseMinPlayers, 0x000001
000313:0x002558c0:	rts
GetServersInput::SetMaxPlayersFilter()
000318:0x002558c8:	move	m_MaxPlayers, max_players
000319:0x002558d8:	imove	m_UseMaxPlayers, 0x000001
000319:0x002558e8:	rts
GetServersInput::SetIsPasswordProtectedFilter()
000324:0x002558f0:	move	m_IsPasswordProtected, password_protected
000325:0x00255900:	imove	m_UseIsPasswordProtected, 0x000001
000325:0x00255910:	rts
GetServersInput::SetRegionIdFilter()
000330:0x00255918:	move	m_RegionId, region
000331:0x00255928:	imove	m_UseRegionId, 0x000001
000331:0x00255938:	rts
GetServersInput::SetPriorityFilter()
000336:0x00255940:	move	m_Priority, priority
000337:0x00255950:	imove	m_UsePriority, 0x000001
000337:0x00255960:	rts
GetServersInput::SetFreeSlotsMin()
000342:0x00255968:	move	m_FreeSlotsMin, freeSlotsMin
000343:0x00255978:	imove	m_UseFreeSlotsMin, 0x000001
000343:0x00255988:	rts
GetServersInput::SetFreeSlotsMax()
000348:0x00255990:	move	m_FreeSlotsMax, freeSlotsMax
000349:0x002559a0:	imove	m_UseFreeSlotsMax, 0x000001
000349:0x002559b0:	rts
GetServersInput::SetHostIp()
000354:0x002559b8:	moves	m_HostIp, hostIp
000355:0x002559c8:	imove	m_UseHostIp, 0x000001
000355:0x002559d8:	rts
GetServersInput::SetHostPort()
000360:0x002559e0:	move	m_HostPort, hostPort
000361:0x002559f0:	imove	m_UseHostPort, 0x000001
000361:0x00255a00:	rts
GetServersInput::SetMouseAndKeyboardEnabled()
000366:0x00255a08:	move	m_MouseAndKeyboardEnabled, enabledMouseAndKeyboard
000367:0x00255a18:	imove	m_UseMouseAndKeyboardEnabled, 0x000001
000367:0x00255a28:	rts
GetServersInput::SetFavorited()
000372:0x00255a30:	moves	@s00, _s'F'
000372:0x00255a40:	adds	m_SortBy, m_SortBy, @s00
000373:0x00255a50:	call	
000373:0x00255a60:	rts
GetServersInput::SetFriendsPlaying()
000379:0x00255a68:	moves	@s00, _s'P'
000379:0x00255a78:	adds	m_SortBy, m_SortBy, @s00
000380:0x00255a88:	call	
000380:0x00255a98:	rts
GetServersInput::SetPreviouslyPlayed()
000385:0x00255aa0:	moves	@s00, _s'R'
000385:0x00255ab0:	adds	m_SortBy, m_SortBy, @s00
000386:0x00255ac0:	call	
000386:0x00255ad0:	rts
GetServersInput::SetProperVersionMatch()
000391:0x00255ad8:	moves	@s00, _s'V'
000391:0x00255ae8:	adds	m_SortBy, m_SortBy, @s00
000392:0x00255af8:	call	
000392:0x00255b08:	rts
GetServersInput::SetFullServer()
000397:0x00255b10:	moves	@s00, _s'S'
000397:0x00255b20:	adds	m_SortBy, m_SortBy, @s00
000398:0x00255b30:	call	
000398:0x00255b40:	rts
GetServersInput::SetThirdPerson()
000403:0x00255b48:	moves	@s00, _s'3'
000403:0x00255b58:	adds	m_SortBy, m_SortBy, @s00
000404:0x00255b68:	call	
000404:0x00255b78:	rts
GetServersInput::SetPublic()
000409:0x00255b80:	moves	@s00, _s'L'
000409:0x00255b90:	adds	m_SortBy, m_SortBy, @s00
000410:0x00255ba0:	call	
000410:0x00255bb0:	rts
GetServersInput::SetAcceleratedTime()
000415:0x00255bb8:	moves	@s00, _s'A'
000415:0x00255bc8:	adds	m_SortBy, m_SortBy, @s00
000416:0x00255bd8:	call	
000416:0x00255be8:	rts
GetServersInput::SetAllowedFilePatching()
000421:0x00255bf0:	moves	@s00, _s'7'
000421:0x00255c00:	adds	m_SortBy, m_SortBy, @s00
000422:0x00255c10:	call	
000422:0x00255c20:	rts
GetServersInput::SetLAN()
000427:0x00255c28:	moves	@s00, _s'N'
000427:0x00255c38:	adds	m_SortBy, m_SortBy, @s00
000427:0x00255c48:	rts
GetServersInput::SetPingFilter()
000432:0x00255c50:	icall	ToString(pingMaxValue)
000432:0x00255c60:	adds	@s02, _s'M', #return
000432:0x00255c70:	moves	@s01, @s02
000432:0x00255c80:	adds	@s00, @s01, _s';'
000432:0x00255c90:	adds	m_SortBy, m_SortBy, @s00
000432:0x00255ca0:	rts
GetServersInput::SetBattleyeProtection()
000437:0x00255ca8:	moves	@s00, _s'B'
000437:0x00255cb8:	adds	m_SortBy, m_SortBy, @s00
000438:0x00255cc8:	call	
000438:0x00255cd8:	rts
GetServersInput::SetPassworded()
000443:0x00255ce0:	moves	@s00, _s'C'
000443:0x00255cf0:	adds	m_SortBy, m_SortBy, @s00
000444:0x00255d00:	call	
000444:0x00255d10:	rts
GetServersInput::AddShow()
000449:0x00255d40:	cmpi	show, _i0
000449:0x00255d50:	beq	0x255d80
000450:0x00255d58:	moves	@s00, _s'+'
000450:0x00255d68:	adds	m_SortBy, m_SortBy, @s00
000450:0x00255d78:	jump	0x255da0
000452:0x00255d80:	moves	@s00, _s'-'
000452:0x00255d90:	adds	m_SortBy, m_SortBy, @s00
000452:0x00255da0:	rts
GetServersInput::AddFavourite()
000457:0x00255da8:	adds	@s03, ip, _s';'
000457:0x00255db8:	moves	@s02, @s03
000457:0x00255dc8:	icall	ToString(port)
000457:0x00255dd8:	adds	@s02, @s02, #return
000457:0x00255de8:	moves	@s01, @s02
000457:0x00255df8:	adds	@s00, @s01, _s';'
000457:0x00255e08:	adds	m_FavoriteServers, m_FavoriteServers, @s00
000457:0x00255e18:	rts
GetServersInput::SetWhitelistEnabled()
000462:0x00255e20:	move	m_WhitelistEnabled, whitelistEnabled
000463:0x00255e30:	imove	m_UseWhitelistEnabled, 0x000001
000465:0x00255e40:	moves	@s00, _s'W'
000465:0x00255e50:	adds	m_SortBy, m_SortBy, @s00
000466:0x00255e60:	call	
000466:0x00255e70:	rts
GetServersInput::SetIsDLC()
000471:0x00255e78:	move	m_IsDLC, isDLC
000472:0x00255e88:	imove	m_UseIsDLC, 0x000001
000474:0x00255e98:	moves	@s00, _s'D'
000474:0x00255ea8:	adds	m_SortBy, m_SortBy, @s00
000475:0x00255eb8:	call	
000475:0x00255ec8:	rts
BiosLobbyService::OnDoneAsync()
000528:0x00255ed0:	call	OnLoadServersAsync(result_list, error, response)
000528:0x00255ee8:	rts
BiosLobbyService::OnGetFirstServerWithEmptySlot()
000533:0x00255ef0:	call	OnAutoConnectToEmptyServer(result_list, error)
000533:0x00255f08:	rts
BiosLobbyService::OnServerModList()
000539:0x00255f10:	call	OnGetServerModList(result_list, error)
000539:0x00255f28:	rts
Hit_Plaster::Hit_Plaster()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_plaster.c
000005:0x00255f30:	call	
000006:0x00255f40:	call	
000007:0x00255f50:	call	
000007:0x00255f60:	rts
UIManager::CreateScriptedMenu()
//scripts/3_Game/tools\uimanager.c
000019:0x00255f90:	movefm	[0xb5c1aac0], parent
000019:0x00255fa0:	ncalli	UIManager.EnterScriptedMenu(id, [0xb5c1aac0])
000019:0x00255fb0:	movetm	menu, #return
000020:0x00255fc0:	movefm	[0xb5c1ab88], menu
000020:0x00255fd0:	ncalli	UIManager.HideScriptedMenu([0xb5c1ab88])
000021:0x00255fe0:	movem	#return, menu
000021:0x00255ff0:	release	menu
000021:0x00255ff8:	rts
000021:0x00256000:	release	menu
000021:0x00256008:	rts
UIManager::Back()
000066:0x00256038:	ncalli	UIManager.IsDialogVisible()
000066:0x00256040:	move	@m00, #return
000066:0x00256050:	cmpi	@m00, false
000066:0x00256060:	bne	0x2560c8
000068:0x00256068:	ncalli	UIManager.GetMenu()
000068:0x00256070:	movetm	menu, #return
000069:0x00256080:	cmpcm	menu, null
000069:0x00256090:	beq	0x2560c0
000071:0x00256098:	ncalli	UIMenuPanel.Close()
000072:0x002560a0:	imove	#return, 0x000001
000072:0x002560b0:	release	menu
000072:0x002560b8:	rts
000072:0x002560c0:	release	menu
000076:0x002560c8:	imove	#return, 0x000000
000076:0x002560d8:	rts
000076:0x002560e0:	rts
UIManager::CloseAll()
000082:0x00256110:	ncalli	UIManager.GetMenu()
000082:0x00256118:	movetm	menu, #return
000083:0x00256128:	cmpcm	menu, null
000083:0x00256138:	beq	0x2561b0
000085:0x00256140:	ncalli	UIMenuPanel.GetParentMenu()
000085:0x00256148:	cmpm	#return, null
000085:0x00256158:	beq	0x256180
000087:0x00256160:	ncalli	UIMenuPanel.GetParentMenu()
000087:0x00256168:	movetm	menu, #return
000087:0x00256178:	jump	0x2561a8
000091:0x00256180:	ncalli	UIMenuPanel.Close()
000092:0x00256188:	imove	#return, 0x000001
000092:0x00256198:	release	menu
000092:0x002561a0:	rts
000092:0x002561a8:	jump	0x256128
000096:0x002561b0:	imove	#return, 0x000000
000096:0x002561c0:	release	menu
000096:0x002561c8:	rts
000096:0x002561d0:	release	menu
000096:0x002561d8:	rts
UIManager::CloseAllSubmenus()
000102:0x00256208:	ncalli	UIManager.GetMenu()
000102:0x00256210:	movetm	menu, #return
000104:0x00256220:	cmpcm	menu, null
000104:0x00256230:	beq	0x2562c0
000104:0x00256238:	ncalli	UIMenuPanel.GetParentMenu()
000104:0x00256240:	cmpm	#return, null
000104:0x00256250:	beq	0x2562c0
000104:0x00256258:	ncalli	UIMenuPanel.GetParentMenu()
000104:0x00256260:	pushc	#return
000104:0x00256268:	ncalli	UIMenuPanel.GetParentMenu()
000104:0x00256270:	movec	@c00, #return
000104:0x00256280:	popc	#return
000104:0x00256288:	cmpm	@c00, null
000104:0x00256298:	beq	0x2562c0
000106:0x002562a0:	ncalli	UIMenuPanel.GetParentMenu()
000106:0x002562a8:	movetm	menu, #return
000106:0x002562b8:	jump	0x256220
000109:0x002562c0:	cmpcm	menu, null
000109:0x002562d0:	beq	0x256320
000109:0x002562d8:	ncalli	UIMenuPanel.GetParentMenu()
000109:0x002562e0:	cmpm	#return, null
000109:0x002562f0:	beq	0x256320
000111:0x002562f8:	ncalli	UIMenuPanel.Close()
000112:0x00256300:	imove	#return, 0x000001
000112:0x00256310:	release	menu
000112:0x00256318:	rts
000115:0x00256320:	imove	#return, 0x000000
000115:0x00256330:	release	menu
000115:0x00256338:	rts
000115:0x00256340:	release	menu
000115:0x00256348:	rts
UIManager::CloseMenu()
000121:0x00256378:	ncalli	UIManager.GetMenu()
000121:0x00256380:	movetm	menu, #return
000123:0x00256390:	cmpcm	menu, null
000123:0x002563a0:	beq	0x256428
000124:0x002563a8:	call	
000124:0x002563b8:	move	@m00, #return
000124:0x002563c8:	cmpi	@m00, id
000124:0x002563d8:	bne	0x256408
000126:0x002563e0:	ncalli	UIMenuPanel.Close()
000127:0x002563e8:	imove	#return, 0x000001
000127:0x002563f8:	release	menu
000127:0x00256400:	rts
000130:0x00256408:	ncalli	UIMenuPanel.GetParentMenu()
000130:0x00256410:	movetm	menu, #return
000130:0x00256420:	jump	0x256390
000133:0x00256428:	imove	#return, 0x000000
000133:0x00256438:	release	menu
000133:0x00256440:	rts
000133:0x00256448:	release	menu
000133:0x00256450:	rts
UIManager::HideMenu()
000138:0x00256480:	ncalli	UIManager.GetMenu()
000138:0x00256488:	movetm	menu, #return
000140:0x00256498:	cmpcm	menu, null
000140:0x002564a8:	beq	0x256560
000142:0x002564b0:	call	
000142:0x002564c0:	move	@m00, #return
000142:0x002564d0:	cmpi	@m00, id
000142:0x002564e0:	bne	0x256528
000144:0x002564e8:	movefm	[0xb5c1ab88], menu
000144:0x002564f8:	ncalli	UIManager.HideScriptedMenu([0xb5c1ab88])
000145:0x00256508:	imove	#return, 0x000001
000145:0x00256518:	release	menu
000145:0x00256520:	rts
000148:0x00256528:	ncalli	UIScriptedMenu.GetParentMenu()
000148:0x00256530:	icall	SafeCastType([0xb5b22a10], @c01, #return)
000148:0x00256548:	movetm	menu, @c01
000148:0x00256558:	jump	0x256498
000151:0x00256560:	imove	#return, 0x000000
000151:0x00256570:	release	menu
000151:0x00256578:	rts
000151:0x00256580:	release	menu
000151:0x00256588:	rts
UIManager::IsMenuOpen()
000157:0x00256590:	call	
000157:0x002565a0:	movefm	@c00, #return
000157:0x002565b0:	cmpc	@c00, null
000157:0x002565c0:	beq	0x2565e0
000157:0x002565c8:	imove	#return, 0x000001
000157:0x002565d8:	jump	0x2565f0
000157:0x002565e0:	imove	#return, 0x000000
000157:0x002565f0:	release	#return
000157:0x002565f8:	rts
000157:0x00256600:	rts
UIManager::FindMenu()
000163:0x00256630:	ncalli	UIManager.GetMenu()
000163:0x00256638:	movetm	menu, #return
000165:0x00256648:	cmpcm	menu, null
000165:0x00256658:	beq	0x2566f0
000167:0x00256660:	call	
000167:0x00256670:	move	@m00, #return
000167:0x00256680:	cmpi	@m00, id
000167:0x00256690:	bne	0x2566b8
000169:0x00256698:	movem	#return, menu
000169:0x002566a8:	release	menu
000169:0x002566b0:	rts
000172:0x002566b8:	ncalli	UIScriptedMenu.GetParentMenu()
000172:0x002566c0:	icall	SafeCastType([0xb5b22a10], @c01, #return)
000172:0x002566d8:	movetm	menu, @c01
000172:0x002566e8:	jump	0x256648
000175:0x002566f0:	movetm	#return, NULL
000175:0x00256700:	release	menu
000175:0x00256708:	rts
000175:0x00256710:	release	menu
000175:0x00256718:	rts
UIManager::OpenWindow()
000181:0x00256770:	call	GetWindow(id)
000181:0x00256780:	movem	window, #return
000181:0x00256790:	release	#return
000184:0x00256798:	cmpcm	window, null
000184:0x002567a8:	beq	0x2567d0
000186:0x002567b0:	call	
000188:0x002567c0:	release	window
000188:0x002567c8:	rts
000192:0x002567d0:	move	#switch, id
000192:0x002567e0:	imove	@m00, 0x000001
000192:0x002567f0:	cmpi	@m00, #switch
000192:0x00256800:	bne	0x256848
000195:0x00256808:	ncall	GetGame()
000195:0x00256810:	ncalli	CGame.GetMission()
000195:0x00256818:	call	
000195:0x00256828:	movem	window, #return
000195:0x00256838:	release	#return
000196:0x00256840:	jump	0x256848
000201:0x00256848:	cmpcm	window, null
000201:0x00256858:	beq	0x256890
000203:0x00256860:	call	
000203:0x00256870:	release	#return
000206:0x00256878:	call	AddToActiveWindows(id, window)
000206:0x00256890:	release	window
000206:0x00256898:	rts
UIManager::CloseWindow()
000212:0x00256908:	call	GetWindow(id)
000212:0x00256918:	movem	window, #return
000212:0x00256928:	release	#return
000214:0x00256930:	cmpcm	window, null
000214:0x00256940:	beq	0x2569d8
000216:0x00256948:	call	RemoveFromActiveWindows(id)
000217:0x00256958:	call	
000220:0x00256968:	ncall	GetGame()
000220:0x00256970:	call	
000220:0x00256980:	movec	@c00, this
000220:0x00256990:	icall	SetInstance([0xb5d54908], @c00)
000220:0x002569a0:	icall	
000220:0x002569d0:	release	#return
000220:0x002569d8:	release	window
000220:0x002569e0:	rts
UIManager::DeleteWindow()
000232:0x002569e8:	delete	window
000232:0x002569f0:	rts
UIManager::IsWindowOpened()
000237:0x002569f8:	call	GetWindow(id)
000237:0x00256a08:	cmpcm	#return, null
000237:0x00256a18:	beq	0x256a40
000239:0x00256a20:	imove	#return, 0x000001
000239:0x00256a30:	release	#return
000239:0x00256a38:	rts
000239:0x00256a40:	release	#return
000242:0x00256a48:	imove	#return, 0x000000
000242:0x00256a58:	rts
000242:0x00256a60:	rts
UIManager::ShowUICursor()
000248:0x00256a68:	ncalli	UIManager.ShowCursor(visible)
000248:0x00256a78:	rts
GetRandomLoadingBackground()
000256:0x00256b30:	icall	Randomize(_i-1)
000257:0x00256b40:	icall	RandomInt(_i0, _i100)
000257:0x00256b50:	modi	index, #return, _i2
000258:0x00256b60:	cfv	@s00, images[index]
000258:0x00256b70:	moves	#return, @s00
000258:0x00256b80:	rts
000258:0x00256b88:	rts
PPERequester_IntroChromAbb::OnStart()
//scripts/3_Game/ppemanager\requesters\pperintrochromabb.c
000005:0x00256bb8:	call	
000007:0x00256bc8:	call	
000008:0x00256bf0:	call	
000008:0x00256c18:	rts
HandStartHidingAnimated::OnEntry()
//scripts/3_Game/systems\inventory\handanimatedmovingtoatt.c
000008:0x00256c20:	call	
000008:0x00256c30:	rts
HandStartHidingAnimated::OnAbort()
000013:0x00256c38:	call	
000013:0x00256c48:	rts
HandStartHidingAnimated::OnExit()
000018:0x00256c50:	call	
000018:0x00256c60:	rts
HandStartHidingAnimated::IsWaitingForActionFinish()
000021:0x00256c68:	cmpi	m_ActionType, _i-1
000021:0x00256c78:	bne	0x256c98
000021:0x00256c80:	imove	#return, 0x000001
000021:0x00256c90:	jump	0x256ca8
000021:0x00256c98:	imove	#return, 0x000000
000021:0x00256ca8:	rts
000021:0x00256cb0:	rts
HandAnimatedMoveToDst_W4T::OnEntry()
000032:0x00256df8:	movefm	@c01, e
000032:0x00256e08:	movem	player, m_Player
000033:0x00256e18:	cmpcm	m_Dst, null
000033:0x00256e28:	beq	0x257118
000033:0x00256e30:	movefm	[0xb5b18280], m_Dst
000033:0x00256e40:	ncalli	InventoryLocation.IsValid()
000033:0x00256e48:	cmpi	#return, _i0
000033:0x00256e58:	beq	0x257118
000035:0x00256e60:	movefm	[0xb5b18280], m_Dst
000035:0x00256e70:	ncalli	InventoryLocation.GetItem()
000035:0x00256e78:	movetm	item, #return
000036:0x00256e88:	new	src, InventoryLocation
000037:0x00256ea8:	ncalli	EntityAI.GetInventory()
000037:0x00256eb0:	movefm	[0xb5bad1f8], src
000037:0x00256ec0:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000037:0x00256ed0:	cmpi	#return, _i0
000037:0x00256ee0:	beq	0x256f80
000039:0x00256ee8:	movefm	[0xb5bad978], src
000039:0x00256ef8:	movefm	[0xb5bad9a0], m_Dst
000039:0x00256f08:	ncall	LocationCanMoveEntity([0xb5bad978], [0xb5bad9a0])
000039:0x00256f18:	cmpi	#return, _i0
000039:0x00256f28:	beq	0x256f78
000041:0x00256f30:	movefm	[0xb5badea8], src
000041:0x00256f40:	movefm	[0xb5baded0], m_Dst
000041:0x00256f50:	ncall	LocationSyncMoveEntity([0xb5badea8], [0xb5baded0])
000042:0x00256f60:	call	
000042:0x00256f70:	jump	0x256f78
000042:0x00256f78:	jump	0x257100
000055:0x00256f80:	movefm	@c00, e
000055:0x00256f90:	movem	o, m_Player
000055:0x00256fa0:	call	GetDebugName#206374(o)
000055:0x00256fb0:	adds	@s07, _s'[hndfsm] ', #return
000055:0x00256fc0:	moves	@s06, @s07
000055:0x00256fd0:	adds	@s06, @s06, _s' STS = '
000055:0x00256fe0:	moves	@s05, @s06
000055:0x00256ff0:	movefm	@c01, e
000055:0x00257000:	movefm	[0xb5b2afc0], m_Player
000055:0x00257010:	ncalli	DayZPlayer.GetSimulationTimeStamp()
000055:0x00257018:	icall	ToString(#return)
000055:0x00257028:	adds	@s05, @s05, #return
000055:0x00257038:	moves	@s04, @s05
000055:0x00257048:	adds	@s04, @s04, _s' HandAnimatedMoveToDst_W4T - item '
000055:0x00257058:	moves	@s03, @s04
000055:0x00257068:	icall	ToString(item)
000055:0x00257078:	adds	@s03, @s03, #return
000055:0x00257088:	moves	@s02, @s03
000055:0x00257098:	adds	@s02, @s02, _s' has no Inventory or Location, inv='
000055:0x002570a8:	moves	@s01, @s02
000055:0x002570b8:	ncalli	EntityAI.GetInventory()
000055:0x002570c0:	icall	ToString(#return)
000055:0x002570d0:	adds	@s01, @s01, #return
000055:0x002570e0:	moves	@s00, @s01
000055:0x002570f0:	call	Error(@s00)
000055:0x00257100:	release	item
000055:0x00257108:	release	src
000055:0x00257110:	jump	0x257128
000058:0x00257118:	call	Error(_s'[hndfsm] HandAnimatedMoveToDst_W4T - event has no valid m_Dst')
000060:0x00257128:	call	
000060:0x00257138:	release	player
000060:0x00257140:	rts
HandAnimatedMoveToDst_W4T::OnAbort()
000065:0x00257148:	movetm	m_Dst, null
000066:0x00257158:	call	
000066:0x00257168:	rts
HandAnimatedMoveToDst_W4T::OnExit()
000071:0x00257170:	movetm	m_Dst, null
000072:0x00257180:	call	
000072:0x00257190:	rts
HandAnimatedMoveToDst_W4T::IsWaitingForActionFinish()
000075:0x00257198:	imove	#return, 0x000001
000075:0x002571a8:	rts
000075:0x002571b0:	rts
HandAnimatedMovingToAtt::HandAnimatedMovingToAtt()
000090:0x00257230:	new	m_Hide, HandStartHidingAnimated
000091:0x00257260:	new	m_Show, HandAnimatedMoveToDst_W4T
000094:0x00257290:	new	_fin_, HandEventHumanCommandActionFinished
000095:0x002572b8:	new	_AEh_, HandAnimEventChanged
000097:0x002572e0:	new	m_FSM, HandFSM
000099:0x00257308:	movem	src, m_Hide
000099:0x00257318:	movem	dst, m_Show
000099:0x00257328:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000099:0x00257360:	pushc	@c00
000099:0x00257368:	movefm	[0xb5b3f2a8], m_FSM
000099:0x00257378:	call	
000099:0x00257388:	popc	@c00
000099:0x00257390:	release	@c00
000100:0x00257398:	movem	src, m_Show
000100:0x002573a8:	movetm	dst, null
000100:0x002573b8:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000100:0x002573f0:	pushc	@c00
000100:0x002573f8:	movefm	[0xb5b3f2a8], m_FSM
000100:0x00257408:	call	
000100:0x00257418:	popc	@c00
000100:0x00257420:	release	@c00
000102:0x00257428:	movem	initial_state, m_Hide
000102:0x00257438:	movefm	[0xb5b3f2a8], m_FSM
000102:0x00257448:	call	
000102:0x00257458:	release	_fin_
000102:0x00257460:	release	_AEh_
000102:0x00257468:	rts
HandAnimatedMovingToAtt::OnEntry()
000107:0x002574c0:	call	
000107:0x002574d0:	movem	m_Entity, #return
000107:0x002574e0:	release	#return
000108:0x002574e8:	movefm	@c02, e
000108:0x002574f8:	icall	SafeCastType([0xb5b3a1a0], @c01, @c02)
000108:0x00257510:	movetm	ev_move, @c01
000109:0x00257520:	cmpcm	ev_move, null
000109:0x00257530:	beq	0x2576a0
000111:0x00257538:	movefm	[0xb5b393d0], m_Show
000111:0x00257548:	movec	@c00, [0xb5b393d0]
000111:0x00257558:	call	
000111:0x00257568:	movem	m_Dst, #return
000111:0x00257578:	release	#return
000112:0x00257580:	movefm	[0xb5b3c9b0], m_Hide
000112:0x00257590:	movec	@c00, [0xb5b3c9b0]
000112:0x002575a0:	call	
000112:0x002575b0:	move	m_ActionType, #return
000113:0x002575c0:	movefm	[0xb5b393d0], m_Show
000113:0x002575d0:	movec	@c00, [0xb5b393d0]
000113:0x002575e0:	call	
000113:0x002575f0:	move	m_ActionType, #return
000115:0x00257600:	movefm	[0xb5b393d0], m_Show
000115:0x00257610:	movec	@c01, [0xb5b393d0]
000115:0x00257620:	movem	m_ilEntity, m_Dst
000117:0x00257630:	movefm	@c00, e
000117:0x00257640:	movefm	[0xb5b2afc0], m_Player
000117:0x00257650:	call	
000117:0x00257660:	movem	item, m_Entity
000117:0x00257670:	movem	dst, m_ilEntity
000117:0x00257680:	call	
000117:0x00257698:	release	#return
000120:0x002576a0:	call	
000120:0x002576b0:	release	ev_move
000120:0x002576b8:	rts
HandAnimatedMovingToAtt::OnAbort()
000125:0x002576c0:	ncall	GetGame()
000125:0x002576c8:	ncalli	CGame.IsDedicatedServer()
000125:0x002576d0:	cmpi	#return, _i0
000125:0x002576e0:	bne	0x257760
000127:0x002576e8:	movefm	@c00, e
000127:0x002576f8:	movefm	[0xb5b2afc0], m_Player
000127:0x00257708:	call	
000127:0x00257718:	movem	item, m_Entity
000127:0x00257728:	movem	dst, m_ilEntity
000127:0x00257738:	call	
000127:0x00257750:	release	#return
000127:0x00257758:	jump	0x2577a8
000131:0x00257760:	ncall	GetGame()
000131:0x00257768:	movefm	@c01, e
000131:0x00257778:	movefm	[0xb5bdb770], m_Player
000131:0x00257788:	movefm	[0xb5bdb798], m_Entity
000131:0x00257798:	ncalli	CGame.ClearJuncture([0xb5bdb770], [0xb5bdb798])
000134:0x002577a8:	movetm	m_Entity, null
000135:0x002577b8:	movetm	m_ilEntity, null
000137:0x002577c8:	call	
000137:0x002577d8:	rts
HandAnimatedMovingToAtt::OnExit()
000142:0x002577e0:	ncall	GetGame()
000142:0x002577e8:	ncalli	CGame.IsDedicatedServer()
000142:0x002577f0:	cmpi	#return, _i0
000142:0x00257800:	bne	0x257878
000144:0x00257808:	movefm	@c00, e
000144:0x00257818:	movefm	[0xb5b2afc0], m_Player
000144:0x00257828:	call	
000144:0x00257838:	movem	item, m_Entity
000144:0x00257848:	movem	dst, m_ilEntity
000144:0x00257858:	call	
000144:0x00257870:	release	#return
000147:0x00257878:	movetm	m_Entity, null
000148:0x00257888:	movetm	m_ilEntity, null
000150:0x00257898:	call	
000150:0x002578a8:	rts
Vector2::Vector2()
//scripts/3_Game/tools\vector2.c
000005:0x002578b0:	move	x, value_x
000006:0x002578c0:	move	y, value_y
000006:0x002578d0:	rts
PPESunMask::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppesunmask.c
000014:0x002578d8:	imove	#return, 0x000013
000014:0x002578e8:	rts
000014:0x002578f0:	rts
PPESunMask::GetDefaultMaterialPath()
000019:0x002578f8:	moves	#return, _s''
000019:0x00257908:	rts
000019:0x00257910:	rts
AnimSoundEvent::AnimSoundEvent()
//scripts/3_Game/dayzanimevents.c
000144:0x00257a60:	imove	m_IsValid, 0x000000
000146:0x00257a70:	ncall	GetGame()
000146:0x00257a78:	adds	@s01, soundPath, _s'id'
000146:0x00257a88:	moves	@s00, @s01
000146:0x00257a98:	ncalli	CGame.ConfigGetInt(@s00)
000146:0x00257aa8:	move	m_iID, #return
000151:0x00257ab8:	ncall	GetGame()
000151:0x00257ac0:	adds	@s01, soundPath, _s'soundSet'
000151:0x00257ad0:	moves	@s00, @s01
000151:0x00257ae0:	icall	
000151:0x00257af0:	cmpi	#return, _i0
000151:0x00257b00:	beq	0x257ba8
000153:0x00257b08:	new	m_SoundParams, SoundParams
000154:0x00257b30:	movefm	[0xb5b066e8], m_SoundParams
000154:0x00257b40:	ncalli	SoundParams.IsValid()
000154:0x00257b48:	cmpi	#return, _i0
000154:0x00257b58:	beq	0x257ba8
000156:0x00257b60:	movem	soundParams, m_SoundParams
000156:0x00257b70:	new	m_SoundObjectBuilder, SoundObjectBuilder
000157:0x00257b98:	imove	m_IsValid, 0x000001
000162:0x00257ba8:	ncall	GetGame()
000162:0x00257bb0:	adds	@s01, soundPath, _s'soundLookupTable'
000162:0x00257bc0:	moves	@s00, @s01
000162:0x00257bd0:	icall	
000162:0x00257be0:	cmpi	#return, _i0
000162:0x00257bf0:	beq	0x257c60
000164:0x00257bf8:	call	GetInstance()
000164:0x00257c08:	call	
000164:0x00257c18:	movem	m_Table, #return
000164:0x00257c28:	release	#return
000164:0x00257c30:	release	#return
000165:0x00257c38:	cmpcm	m_Table, null
000165:0x00257c48:	beq	0x257c60
000167:0x00257c50:	imove	m_IsValid, 0x000001
000176:0x00257c60:	ncall	GetGame()
000176:0x00257c68:	ncalli	CGame.IsServer()
000176:0x00257c70:	cmpi	#return, _i0
000176:0x00257c80:	beq	0x257d30
000179:0x00257c88:	ncall	GetGame()
000179:0x00257c90:	adds	@s01, soundPath, _s'noise'
000179:0x00257ca0:	moves	@s00, @s01
000179:0x00257cb0:	icall	
000179:0x00257cc0:	cmpi	#return, _i0
000179:0x00257cd0:	beq	0x257d30
000181:0x00257cd8:	new	m_NoiseParams, NoiseParams
000182:0x00257cf8:	movefm	[0xb5b222e8], m_NoiseParams
000182:0x00257d08:	ncalli	NoiseParams.Load(noiseName)
000183:0x00257d18:	imove	m_IsValid, 0x000001
000183:0x00257d28:	jump	0x257d30
000183:0x00257d30:	rts
AnimSoundEvent::IsValid()
000194:0x00257d38:	move	#return, m_IsValid
000194:0x00257d48:	rts
000194:0x00257d50:	rts
AnimSoundEvent::GetSoundBuilder()
000199:0x00257d58:	movem	#return, m_SoundObjectBuilder
000199:0x00257d68:	rts
000199:0x00257d70:	rts
AnimSoundEvent::GetSoundBuilderEx()
000204:0x00257d78:	cmpcm	m_Table, null
000204:0x00257d88:	beq	0x257de8
000204:0x00257d90:	cmpi	paramHash, _i0
000204:0x00257da0:	beq	0x257de8
000206:0x00257da8:	movefm	[0xb5b3afe8], m_Table
000206:0x00257db8:	call	
000206:0x00257dc8:	movem	#return, #return
000206:0x00257dd8:	release	#return
000206:0x00257de0:	rts
000208:0x00257de8:	movem	#return, m_SoundObjectBuilder
000208:0x00257df8:	rts
000208:0x00257e00:	rts
AnimSoundEvent::GetSoundObject()
000213:0x00257e08:	call	
000213:0x00257e18:	ncalli	SoundObjectBuilder.UpdateEnvSoundControllers(position)
000213:0x00257e28:	release	#return
000214:0x00257e30:	call	
000214:0x00257e40:	call	
000214:0x00257e50:	movem	#return, #return
000214:0x00257e60:	release	#return
000214:0x00257e68:	release	#return
000214:0x00257e70:	rts
000214:0x00257e78:	rts
AnimSoundVoiceEvent::AnimSoundVoiceEvent()
000226:0x00257ed0:	imove	m_IsValid, 0x000000
000228:0x00257ee0:	ncall	GetGame()
000228:0x00257ee8:	adds	@s01, soundPath, _s'id'
000228:0x00257ef8:	moves	@s00, @s01
000228:0x00257f08:	ncalli	CGame.ConfigGetInt(@s00)
000228:0x00257f18:	move	m_iID, #return
000230:0x00257f28:	ncall	GetGame()
000230:0x00257f30:	ncalli	CGame.IsDedicatedServer()
000230:0x00257f38:	cmpi	#return, _i0
000230:0x00257f48:	bne	0x258028
000233:0x00257f50:	ncall	GetGame()
000233:0x00257f58:	adds	@s01, soundPath, _s'soundSet'
000233:0x00257f68:	moves	@s00, @s01
000233:0x00257f78:	icall	
000234:0x00257f88:	new	m_SoundParams, SoundParams
000235:0x00257fb0:	movefm	[0xb5b066e8], m_SoundParams
000235:0x00257fc0:	ncalli	SoundParams.IsValid()
000235:0x00257fc8:	cmpi	#return, _i0
000235:0x00257fd8:	beq	0x258028
000237:0x00257fe0:	movem	soundParams, m_SoundParams
000237:0x00257ff0:	new	m_SoundObjectBuilder, SoundObjectBuilder
000238:0x00258018:	imove	m_IsValid, 0x000001
000242:0x00258028:	ncall	GetGame()
000242:0x00258030:	ncalli	CGame.IsServer()
000242:0x00258038:	cmpi	#return, _i0
000242:0x00258048:	beq	0x2580f8
000245:0x00258050:	ncall	GetGame()
000245:0x00258058:	adds	@s01, soundPath, _s'noise'
000245:0x00258068:	moves	@s00, @s01
000245:0x00258078:	icall	
000245:0x00258088:	cmpi	#return, _i0
000245:0x00258098:	beq	0x2580f8
000247:0x002580a0:	new	m_NoiseParams, NoiseParams
000248:0x002580c0:	movefm	[0xb5b222e8], m_NoiseParams
000248:0x002580d0:	ncalli	NoiseParams.Load(noiseName)
000249:0x002580e0:	imove	m_IsValid, 0x000001
000249:0x002580f0:	jump	0x2580f8
000249:0x002580f8:	rts
AnimSoundVoiceEvent::IsValid()
000260:0x00258100:	move	#return, m_IsValid
000260:0x00258110:	rts
000260:0x00258118:	rts
AnimSoundVoiceEvent::GetSoundBuilder()
000265:0x00258120:	movem	#return, m_SoundObjectBuilder
000265:0x00258130:	rts
000265:0x00258138:	rts
AnimSoundVoiceEvent::GetSoundObject()
000270:0x00258140:	movefm	[0xb5b06798], m_SoundObjectBuilder
000270:0x00258150:	ncalli	SoundObjectBuilder.UpdateEnvSoundControllers(position)
000271:0x00258160:	movefm	[0xb5b06798], m_SoundObjectBuilder
000271:0x00258170:	call	
000271:0x00258180:	movem	#return, #return
000271:0x00258190:	release	#return
000271:0x00258198:	rts
000271:0x002581a0:	rts
AnimStepEvent::AnimStepEvent()
000284:0x002581d0:	ncall	GetGame()
000284:0x002581d8:	adds	@s01, stepPath, _s'id'
000284:0x002581e8:	moves	@s00, @s01
000284:0x002581f8:	ncalli	CGame.ConfigGetInt(@s00)
000284:0x00258208:	move	m_iID, #return
000286:0x00258218:	ncall	GetGame()
000286:0x00258220:	ncalli	CGame.IsDedicatedServer()
000286:0x00258228:	cmpi	#return, _i0
000286:0x00258238:	bne	0x2582f0
000288:0x00258240:	ncall	GetGame()
000288:0x00258248:	adds	@s01, stepPath, _s'soundLookupTable'
000288:0x00258258:	moves	@s00, @s01
000288:0x00258268:	icall	
000289:0x00258278:	call	GetInstance()
000289:0x00258288:	moves	tableName, m_sSoundLookupTableName
000289:0x00258298:	call	
000289:0x002582a8:	movefm	@c02, #return
000289:0x002582b8:	icall	SafeCastType([0xb5b3c608], @c01, @c02)
000289:0x002582d0:	movetm	m_soundLookupTable, @c01
000289:0x002582e0:	release	#return
000289:0x002582e8:	release	#return
000292:0x002582f0:	ncall	GetGame()
000292:0x002582f8:	ncalli	CGame.IsServer()
000292:0x00258300:	cmpi	#return, _i0
000292:0x00258310:	beq	0x2583a8
000295:0x00258318:	ncall	GetGame()
000295:0x00258320:	adds	@s01, stepPath, _s'noise'
000295:0x00258330:	moves	@s00, @s01
000295:0x00258340:	icall	
000295:0x00258350:	cmpi	#return, _i0
000295:0x00258360:	beq	0x2583a8
000297:0x00258368:	new	m_NoiseParams, NoiseParams
000298:0x00258388:	movefm	[0xb5b222e8], m_NoiseParams
000298:0x00258398:	ncalli	NoiseParams.Load(noiseName)
000298:0x002583a8:	rts
AnimStepEvent::GetSoundBuilder()
000305:0x002583b0:	movefm	[0xb5b3c608], m_soundLookupTable
000305:0x002583c0:	call	
000305:0x002583d0:	movem	#return, #return
000305:0x002583e0:	release	#return
000305:0x002583e8:	rts
000305:0x002583f0:	rts
AnimDamageEvent::AnimDamageEvent()
000316:0x00258448:	ncall	GetGame()
000316:0x00258450:	adds	@s01, damagePath, _s'id'
000316:0x00258460:	moves	@s00, @s01
000316:0x00258470:	ncalli	CGame.ConfigGetInt(@s00)
000316:0x00258480:	move	m_iID, #return
000319:0x00258490:	ncall	GetGame()
000319:0x00258498:	adds	@s01, damagePath, _s'damage'
000319:0x002584a8:	moves	@s00, @s01
000319:0x002584b8:	icall	
000320:0x002584c8:	new	m_DamageParams, AnimDamageParams
000320:0x002584f0:	rts
AnimDamageParams::AnimDamageParams()
000336:0x00258648:	moves	m_sName, damageName
000337:0x00258658:	adds	@s01, DAMAGE_CFG_CLASS, damageName
000337:0x00258668:	moves	@s00, @s01
000337:0x00258678:	adds	damagePath, @s00, _s' '
000339:0x00258688:	ncall	GetGame()
000339:0x00258690:	adds	@s01, damagePath, _s'bone'
000339:0x002586a0:	moves	@s00, @s01
000339:0x002586b0:	icall	
000340:0x002586c0:	ncall	GetGame()
000340:0x002586c8:	adds	@s01, damagePath, _s'ammo'
000340:0x002586d8:	moves	@s00, @s01
000340:0x002586e8:	icall	
000341:0x002586f8:	ncall	GetGame()
000341:0x00258700:	adds	@s01, damagePath, _s'radius'
000341:0x00258710:	moves	@s00, @s01
000341:0x00258720:	ncalli	CGame.ConfigGetFloat(@s00)
000341:0x00258730:	move	m_fRadius, #return
000342:0x00258740:	ncall	GetGame()
000342:0x00258748:	adds	@s01, damagePath, _s'duration'
000342:0x00258758:	moves	@s00, @s01
000342:0x00258768:	ncalli	CGame.ConfigGetFloat(@s00)
000342:0x00258778:	move	m_fDuration, #return
000344:0x00258788:	imove	m_bInvertTeams, 0x000000
000346:0x00258798:	ncall	GetGame()
000346:0x002587a0:	adds	@s01, damagePath, _s'invertTeams'
000346:0x002587b0:	moves	@s00, @s01
000346:0x002587c0:	icall	
000347:0x002587d0:	icall	ToLower(str_invert_teams_cfg)
000348:0x002587e0:	cmps	str_invert_teams_cfg, _s'true'
000348:0x002587f0:	bne	0x258808
000350:0x002587f8:	imove	m_bInvertTeams, 0x000001
000350:0x00258808:	rts
AnimEffectParams::AnimEffectParams()
000362:0x00258868:	moves	m_sName, effectName
000363:0x00258878:	adds	@s01, EFFECT_CFG_CLASS, effectName
000363:0x00258888:	moves	@s00, @s01
000363:0x00258898:	adds	effectPath, @s00, _s' '
000363:0x002588a8:	rts
ErrorHandlerModule::GetClientMessage()
//scripts/3_Game/global\errormodulehandler\errorhandlermodule.c
000024:0x002588b0:	call	
000024:0x002588c8:	moves	#return, #return
000024:0x002588d8:	rts
000024:0x002588e0:	rts
ErrorHandlerModule::GetLastClientMessage()
000030:0x002588e8:	call	
000030:0x00258900:	moves	#return, #return
000030:0x00258910:	rts
000030:0x00258918:	rts
ErrorHandlerModule::GetServerMessage()
000036:0x00258920:	call	
000036:0x00258938:	moves	#return, #return
000036:0x00258948:	rts
000036:0x00258950:	rts
ErrorHandlerModule::GetLastServerMessage()
000042:0x00258958:	call	
000042:0x00258970:	moves	#return, #return
000042:0x00258980:	rts
000042:0x00258988:	rts
ErrorHandlerModule::GetSimpleMessage()
000048:0x002589b8:	icall	GetErrorHex(errorCode)
000048:0x002589c8:	icall	Format(_s'[%1]: %2', #return, additionalInfo, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000048:0x002589f8:	moves	#return, #return
000048:0x00258a08:	rts
000048:0x00258a10:	rts
ErrorHandlerModuleScript::ErrorHandlerModuleScript()
000081:0x00258a18:	moves	m_Header, _s''
000081:0x00258a28:	moves	m_Prefix, _s''
000081:0x00258a38:	movetm	m_UIHandler, null
000081:0x00258a48:	imove	m_LastErrorThrown, 0x000000
000081:0x00258a58:	moves	m_LastAdditionalInfo, _s''
000081:0x00258a68:	new	m_ErrorDataMap, map<int,@ErrorProperties>
000083:0x00258a88:	call	
000084:0x00258a98:	call	
000084:0x00258aa8:	rts
ErrorHandlerModuleScript::~ErrorHandlerModuleScript()
000089:0x00258ab0:	cmpcm	m_UIHandler, null
000089:0x00258ac0:	beq	0x258ad0
000091:0x00258ac8:	delete	m_UIHandler
000091:0x00258ad0:	rts
ErrorHandlerModuleScript::FillErrorDataMap()
000104:0x00258b00:	call	
000104:0x00258b28:	rts
ErrorHandlerModuleScript::GetProperties()
000114:0x00258ba8:	icall	GetCodeFromError(errorCode)
000114:0x00258bb8:	move	error, #return
000115:0x00258bc8:	movetm	properties, null
000117:0x00258bd8:	movefm	[0xb5bf8ef8], m_ErrorDataMap
000117:0x00258be8:	icall	
000117:0x00258bf8:	cmpi	#return, _i0
000117:0x00258c08:	bne	0x258c60
000119:0x00258c10:	icall	GetErrorHex(errorCode)
000119:0x00258c20:	icall	Format(_s'[EHM] Could not find any properties for error %1(%2) in %3', errorCode, #return, this, _c0, _c0, _c0, _c0, _c0, _c0)
000119:0x00258c50:	call	Error(#return)
000122:0x00258c60:	movem	#return, properties
000122:0x00258c70:	release	properties
000122:0x00258c78:	rts
000122:0x00258c80:	release	properties
000122:0x00258c88:	rts
ErrorHandlerModuleScript::GetClientMessage()
000132:0x00258cb8:	call	
000132:0x00258cc8:	movem	properties, #return
000132:0x00258cd8:	release	#return
000134:0x00258ce0:	cmpcm	properties, null
000134:0x00258cf0:	beq	0x258d30
000136:0x00258cf8:	call	
000136:0x00258d08:	moves	#return, #return
000136:0x00258d18:	release	properties
000136:0x00258d20:	rts
000136:0x00258d28:	jump	0x258d50
000140:0x00258d30:	moves	#return, additionalInfo
000140:0x00258d40:	release	properties
000140:0x00258d48:	rts
000140:0x00258d50:	release	properties
000140:0x00258d58:	rts
ErrorHandlerModuleScript::GetLastClientMessage()
000151:0x00258d88:	cmpi	errorCode, m_LastErrorThrown
000151:0x00258d98:	bne	0x258de8
000153:0x00258da0:	moves	additionalInfo, m_LastAdditionalInfo
000153:0x00258db0:	call	
000153:0x00258dc8:	moves	#return, #return
000153:0x00258dd8:	rts
000153:0x00258de0:	jump	0x258e98
000157:0x00258de8:	icall	GetErrorHex(errorCode)
000157:0x00258df8:	pushs	#return
000157:0x00258e00:	icall	GetErrorHex(m_LastErrorThrown)
000157:0x00258e10:	moves	@s01, #return
000157:0x00258e20:	pops	#return
000157:0x00258e28:	icall	Format(_s'Was unable to get the information on the last error as another has already occurred. (%1 != %2)', #return, @s01, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000157:0x00258e58:	icall	ErrorEx(#return, _i2)
000158:0x00258e68:	call	
000158:0x00258e80:	moves	#return, #return
000158:0x00258e90:	rts
000158:0x00258e98:	rts
ErrorHandlerModuleScript::GetServerMessage()
000169:0x00258ec8:	call	
000169:0x00258ed8:	movem	properties, #return
000169:0x00258ee8:	release	#return
000171:0x00258ef0:	cmpcm	properties, null
000171:0x00258f00:	beq	0x258f40
000173:0x00258f08:	call	
000173:0x00258f18:	moves	#return, #return
000173:0x00258f28:	release	properties
000173:0x00258f30:	rts
000173:0x00258f38:	jump	0x258f60
000177:0x00258f40:	moves	#return, additionalInfo
000177:0x00258f50:	release	properties
000177:0x00258f58:	rts
000177:0x00258f60:	release	properties
000177:0x00258f68:	rts
ErrorHandlerModuleScript::GetLastServerMessage()
000188:0x00258f70:	cmpi	errorCode, m_LastErrorThrown
000188:0x00258f80:	bne	0x258fd0
000190:0x00258f88:	moves	additionalInfo, m_LastAdditionalInfo
000190:0x00258f98:	call	
000190:0x00258fb0:	moves	#return, #return
000190:0x00258fc0:	rts
000190:0x00258fc8:	jump	0x259080
000194:0x00258fd0:	icall	GetErrorHex(errorCode)
000194:0x00258fe0:	pushs	#return
000194:0x00258fe8:	icall	GetErrorHex(m_LastErrorThrown)
000194:0x00258ff8:	moves	@s01, #return
000194:0x00259008:	pops	#return
000194:0x00259010:	icall	Format(_s'Was unable to get the information on the last error as another has already occurred. (%1 != %2)', #return, @s01, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000194:0x00259040:	icall	ErrorEx(#return, _i1)
000195:0x00259050:	call	
000195:0x00259068:	moves	#return, #return
000195:0x00259078:	rts
000195:0x00259080:	rts
ErrorHandlerModuleScript::OnErrorThrown()
000208:0x002590d8:	call	
000210:0x002590f0:	move	m_LastErrorThrown, errorCode
000211:0x00259100:	moves	m_LastAdditionalInfo, additionalInfo
000213:0x00259110:	call	
000213:0x00259120:	movem	properties, #return
000213:0x00259130:	release	#return
000215:0x00259138:	cmpcm	properties, null
000215:0x00259148:	beq	0x259170
000217:0x00259150:	call	
000217:0x00259168:	jump	0x259228
000221:0x00259170:	icall	GetErrorHex(errorCode)
000221:0x00259180:	ncalli	ErrorHandlerModuleScript.GetCategory()
000221:0x00259188:	icall	ToString(#return)
000221:0x00259198:	icall	Format(_s'Error code %1(%2) was thrown but no ErrorProperties was found for it in category %3.', errorCode, #return, #return, _c0, _c0, _c0, _c0, _c0, _c0)
000221:0x002591c8:	icall	ErrorEx(#return, _i2)
000222:0x002591d8:	movefm	[0xb5bf8ef8], m_ErrorDataMap
000222:0x002591e8:	icall	
000222:0x002591f8:	cmpi	#return, _i0
000222:0x00259208:	beq	0x259228
000224:0x00259210:	call	
000224:0x00259228:	release	properties
000224:0x00259230:	rts
ErrorHandlerModuleScript::InsertDialogueErrorProperties()
000235:0x00259260:	icall	Format(_s'%1%2', m_Prefix, message, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000235:0x00259290:	moves	header, m_Header
000235:0x002592a0:	movem	handler, m_UIHandler
000235:0x002592b0:	new	@c00, DialogueErrorProperties
000235:0x002592f0:	pushc	@c00
000235:0x002592f8:	movefm	[0xb5bf8ef8], m_ErrorDataMap
000235:0x00259308:	icall	
000235:0x00259318:	popc	@c00
000235:0x00259320:	release	@c00
000235:0x00259328:	rts
ErrorHandlerModuleScript::InsertHeaderDialogueErrorProperties()
000241:0x00259330:	icall	Format(_s'%1%2', m_Prefix, message, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000241:0x00259360:	movem	handler, m_UIHandler
000241:0x00259370:	new	@c00, DialogueErrorProperties
000241:0x002593b0:	pushc	@c00
000241:0x002593b8:	movefm	[0xb5bf8ef8], m_ErrorDataMap
000241:0x002593c8:	icall	
000241:0x002593d8:	popc	@c00
000241:0x002593e0:	release	@c00
000241:0x002593e8:	rts
ErrorHandlerModuleScript::InsertPrefixDialogueErrorProperties()
000247:0x002593f0:	icall	Format(_s'%1%2', prefix, message, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000247:0x00259420:	moves	header, m_Header
000247:0x00259430:	movem	handler, m_UIHandler
000247:0x00259440:	new	@c00, DialogueErrorProperties
000247:0x00259480:	pushc	@c00
000247:0x00259488:	movefm	[0xb5bf8ef8], m_ErrorDataMap
000247:0x00259498:	icall	
000247:0x002594a8:	popc	@c00
000247:0x002594b0:	release	@c00
000247:0x002594b8:	rts
ErrorHandlerModuleScript::InsertExtendedPrefixDialogueErrorProperties()
000253:0x002594e8:	icall	Format(_s'%1%2%3', m_Prefix, prefix, message, _c0, _c0, _c0, _c0, _c0, _c0)
000253:0x00259518:	moves	header, m_Header
000253:0x00259528:	movem	handler, m_UIHandler
000253:0x00259538:	new	@c00, DialogueErrorProperties
000253:0x00259578:	pushc	@c00
000253:0x00259580:	movefm	[0xb5bf8ef8], m_ErrorDataMap
000253:0x00259590:	icall	
000253:0x002595a0:	popc	@c00
000253:0x002595a8:	release	@c00
000253:0x002595b0:	rts
ErrorHandlerModuleScript::InsertExtendedPrefixSplitDialogueErrorProperties()
000259:0x002595b8:	icall	Format(_s'%1%2%3', m_Prefix, prefix, message, _c0, _c0, _c0, _c0, _c0, _c0)
000259:0x002595e8:	moves	header, m_Header
000259:0x002595f8:	movem	handler, m_UIHandler
000259:0x00259608:	new	@c00, DialogueErrorProperties
000259:0x00259648:	pushc	@c00
000259:0x00259650:	movefm	[0xb5bf8ef8], m_ErrorDataMap
000259:0x00259660:	icall	
000259:0x00259670:	popc	@c00
000259:0x00259678:	release	@c00
000259:0x00259680:	rts
ErrorHandlerModuleScript::InsertSplitDialogueErrorProperties()
000265:0x00259688:	icall	Format(_s'%1%2', m_Prefix, message, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000265:0x002596b8:	moves	header, m_Header
000265:0x002596c8:	movem	handler, m_UIHandler
000265:0x002596d8:	new	@c00, DialogueErrorProperties
000265:0x00259718:	pushc	@c00
000265:0x00259720:	movefm	[0xb5bf8ef8], m_ErrorDataMap
000265:0x00259730:	icall	
000265:0x00259740:	popc	@c00
000265:0x00259748:	release	@c00
000265:0x00259750:	rts
ErrorHandlerModuleScript::InsertErrorProperties()
000271:0x00259758:	new	@c00, ErrorProperties
000271:0x00259780:	pushc	@c00
000271:0x00259788:	movefm	[0xb5bf8ef8], m_ErrorDataMap
000271:0x00259798:	icall	
000271:0x002597a8:	popc	@c00
000271:0x002597b0:	release	@c00
000271:0x002597b8:	rts
MainMenuButtonEffect::MainMenuButtonEffect()
//scripts/3_Game/gui\effects\mainmenubuttoneffect.c
000013:0x00259800:	ncall	GetGame()
000013:0x00259808:	cmpc	#return, null
000013:0x00259818:	beq	0x259870
000015:0x00259820:	ncall	GetGame()
000015:0x00259828:	call	
000015:0x00259838:	movec	@c00, this
000015:0x00259848:	icall	SetInstance([0xb5d57800], @c00)
000015:0x00259858:	icall	
000015:0x00259868:	release	#return
000017:0x00259870:	new	m_anim, AnimatorTimer
000017:0x00259890:	rts
MainMenuButtonEffect::~MainMenuButtonEffect()
000023:0x002598d8:	ncall	GetGame()
000023:0x002598e0:	cmpc	#return, null
000023:0x002598f0:	beq	0x259978
000023:0x002598f8:	ncall	GetGame()
000023:0x00259900:	call	
000023:0x00259910:	cmpcm	#return, null
000023:0x00259920:	beq	0x259978
000025:0x00259928:	ncall	GetGame()
000025:0x00259930:	call	
000025:0x00259940:	movec	@c00, this
000025:0x00259950:	icall	SetInstance([0xb5d578d8], @c00)
000025:0x00259960:	icall	
000025:0x00259970:	release	#return
000025:0x00259978:	release	#return
000025:0x00259980:	rts
MainMenuButtonEffect::OnWidgetScriptInit()
000032:0x00259988:	movem	m_root, w
000033:0x00259998:	movefm	[0xd31362c0], m_root
000033:0x002599a8:	ncalli	ButtonWidget.SetHandler(this)
000033:0x002599b8:	rts
MainMenuButtonEffect::Update()
000039:0x00259a10:	movefm	[0xb5b3c880], m_anim
000039:0x00259a20:	call	
000040:0x00259a30:	movefm	[0xb5b3c880], m_anim
000040:0x00259a40:	call	
000040:0x00259a50:	mulf	p, amount, #return
000042:0x00259a60:	mulf	@f01, p, _f4.000000
000042:0x00259a70:	move	@f00, @f01
000042:0x00259a80:	movefm	[0xd31362c0], m_root
000042:0x00259a90:	ncalli	ButtonWidget.SetTextOffset(@f00, _f0.000000)
000044:0x00259aa0:	movefm	[0xb5b3c880], m_anim
000044:0x00259ab0:	call	
000044:0x00259ac0:	subf	c, _f1.000000, #return
000045:0x00259ad0:	call	ARGBF(_f1.000000, _f1.000000, c, c)
000045:0x00259af0:	movefm	[0xd31362c0], m_root
000045:0x00259b00:	ncalli	ButtonWidget.SetTextColor(#return)
000045:0x00259b10:	rts
MainMenuButtonEffect::OnFocus()
000052:0x00259b18:	movefm	[0xb5b3c880], m_anim
000052:0x00259b28:	call	
000052:0x00259b38:	cmpi	#return, _i0
000052:0x00259b48:	bne	0x259b70
000054:0x00259b50:	movefm	[0xd31362c0], m_root
000054:0x00259b60:	icall	
000056:0x00259b70:	move	speed, speed
000056:0x00259b80:	movefm	[0xb5b3c880], m_anim
000056:0x00259b90:	call	
000058:0x00259ba8:	imove	#return, 0x000000
000058:0x00259bb8:	rts
000058:0x00259bc0:	rts
MainMenuButtonEffect::OnFocusLost()
000064:0x00259bc8:	move	speed, speed
000064:0x00259bd8:	movefm	[0xb5b3c880], m_anim
000064:0x00259be8:	call	
000065:0x00259c00:	imove	#return, 0x000000
000065:0x00259c10:	rts
000065:0x00259c18:	rts
BiosFriendInfo::Compare()
//scripts/3_Game/services\biossocialservice.c
000013:0x00259c20:	movefm	@c00, a
000013:0x00259c30:	movefm	@c01, b
000013:0x00259c40:	cmps	m_Uid, m_Uid
000013:0x00259c50:	bne	0x259d18
000013:0x00259c58:	movefm	@c02, a
000013:0x00259c68:	movefm	@c03, b
000013:0x00259c78:	cmps	m_DisplayName, m_DisplayName
000013:0x00259c88:	bne	0x259d18
000013:0x00259c90:	movefm	@c04, a
000013:0x00259ca0:	movefm	@c05, b
000013:0x00259cb0:	cmpi	m_IsFavorite, m_IsFavorite
000013:0x00259cc0:	bne	0x259d18
000013:0x00259cc8:	movefm	@c06, a
000013:0x00259cd8:	movefm	@c07, b
000013:0x00259ce8:	cmpi	m_IsFollowed, m_IsFollowed
000013:0x00259cf8:	bne	0x259d18
000013:0x00259d00:	imove	#return, 0x000001
000013:0x00259d10:	jump	0x259d28
000013:0x00259d18:	imove	#return, 0x000000
000013:0x00259d28:	rts
000013:0x00259d30:	rts
BiosSocialService::OnUserProfileAsync()
000050:0x00259d38:	call	OnUserProfileAsync(error)
000050:0x00259d48:	rts
BiosSocialService::OnFriendsAsync()
000060:0x00259d50:	call	OnFriendsAsync(friend_list, error)
000060:0x00259d68:	rts
EnProfilerTests::EnProfilerTests()
//scripts/3_Game/systems\tftests\enprofilertests.c
000011:0x00259f00:	call	IsEnabledC()
000011:0x00259f10:	move	m_bWasProfilerEnabled, #return
000013:0x00259f20:	call	
000014:0x00259f30:	call	
000015:0x00259f40:	call	
000016:0x00259f50:	call	
000017:0x00259f60:	call	
000018:0x00259f70:	call	
000019:0x00259f80:	call	
000020:0x00259f90:	call	
000021:0x00259fa0:	call	
000022:0x00259fb0:	call	
000022:0x00259fc0:	rts
EnProfilerTests::~EnProfilerTests()
000030:0x00259fc8:	icall	Enable(m_bWasProfilerEnabled, true, _i1)
000030:0x00259fe0:	rts
EnProfilerTests::TestToggling()
000039:0x0025a048:	call	IsEnabledP()
000039:0x0025a058:	move	currentlyEnabled, #return
000040:0x0025a068:	cmpi	currentlyEnabled, _i0
000040:0x0025a078:	beq	0x25a098
000040:0x0025a080:	imove	@m00, 0x000000
000040:0x0025a090:	jump	0x25a0a8
000040:0x0025a098:	imove	@m00, 0x000001
000040:0x0025a0a8:	icall	Enable(@m00, _i0, _i1)
000041:0x0025a0c0:	call	IsEnabledP()
000041:0x0025a0d0:	cmpi	currentlyEnabled, #return
000041:0x0025a0e0:	beq	0x25a100
000041:0x0025a0e8:	imove	@m00, 0x000001
000041:0x0025a0f8:	jump	0x25a110
000041:0x0025a100:	imove	@m00, 0x000000
000041:0x0025a110:	call	
000041:0x0025a120:	cmpi	#return, _i0
000041:0x0025a130:	beq	0x25a1e0
000043:0x0025a138:	icall	Enable(currentlyEnabled, _i0, _i1)
000044:0x0025a150:	call	IsEnabledP()
000044:0x0025a160:	cmpi	currentlyEnabled, #return
000044:0x0025a170:	bne	0x25a190
000044:0x0025a178:	imove	@m00, 0x000001
000044:0x0025a188:	jump	0x25a1a0
000044:0x0025a190:	imove	@m00, 0x000000
000044:0x0025a1a0:	call	
000044:0x0025a1b0:	call	
000044:0x0025a1c0:	movem	#return, #return
000044:0x0025a1d0:	release	#return
000044:0x0025a1d8:	rts
000047:0x0025a1e0:	call	
000047:0x0025a1f0:	movem	#return, #return
000047:0x0025a200:	release	#return
000047:0x0025a208:	rts
000047:0x0025a210:	rts
EnProfilerTests::TestTogglingImmediate()
000054:0x0025a240:	call	IsEnabledC()
000054:0x0025a250:	move	currentlyEnabled, #return
000055:0x0025a260:	cmpi	currentlyEnabled, _i0
000055:0x0025a270:	beq	0x25a290
000055:0x0025a278:	imove	@m00, 0x000000
000055:0x0025a288:	jump	0x25a2a0
000055:0x0025a290:	imove	@m00, 0x000001
000055:0x0025a2a0:	icall	Enable(@m00, true, _i1)
000056:0x0025a2b8:	call	IsEnabledC()
000056:0x0025a2c8:	cmpi	currentlyEnabled, #return
000056:0x0025a2d8:	beq	0x25a2f8
000056:0x0025a2e0:	imove	@m00, 0x000001
000056:0x0025a2f0:	jump	0x25a308
000056:0x0025a2f8:	imove	@m00, 0x000000
000056:0x0025a308:	call	
000056:0x0025a318:	cmpi	#return, _i0
000056:0x0025a328:	beq	0x25a3d8
000058:0x0025a330:	icall	Enable(currentlyEnabled, true, _i1)
000059:0x0025a348:	call	IsEnabledC()
000059:0x0025a358:	cmpi	currentlyEnabled, #return
000059:0x0025a368:	bne	0x25a388
000059:0x0025a370:	imove	@m00, 0x000001
000059:0x0025a380:	jump	0x25a398
000059:0x0025a388:	imove	@m00, 0x000000
000059:0x0025a398:	call	
000059:0x0025a3a8:	call	
000059:0x0025a3b8:	movem	#return, #return
000059:0x0025a3c8:	release	#return
000059:0x0025a3d0:	rts
000062:0x0025a3d8:	call	
000062:0x0025a3e8:	movem	#return, #return
000062:0x0025a3f8:	release	#return
000062:0x0025a400:	rts
000062:0x0025a408:	rts
EnProfilerTests::TestSetFlags()
000069:0x0025a5b0:	icall	GetFlags()
000069:0x0025a5b8:	move	currentFlags, #return
000071:0x0025a5c8:	imove	i, 0x000000
000071:0x0025a5d8:	jump	0x25a5e8
000071:0x0025a5e0:	inc	i
000071:0x0025a5e8:	call	GetEnumSize(_T(EnProfilerFlags))
000071:0x0025a5f8:	cmpi	i, #return
000071:0x0025a608:	bge	0x25a868
000073:0x0025a610:	call	GetEnumValue(_T(EnProfilerFlags), i)
000073:0x0025a628:	move	flags, #return
000074:0x0025a638:	icall	SetFlags(flags, _i1)
000076:0x0025a648:	icall	GetFlags()
000076:0x0025a650:	move	@m01, #return
000076:0x0025a660:	cmpi	@m01, flags
000076:0x0025a670:	bne	0x25a690
000076:0x0025a678:	imove	@m00, 0x000001
000076:0x0025a688:	jump	0x25a6a0
000076:0x0025a690:	imove	@m00, 0x000000
000076:0x0025a6a0:	call	
000076:0x0025a6b0:	cmpi	#return, _i0
000076:0x0025a6c0:	bne	0x25a708
000078:0x0025a6c8:	icall	SetFlags(currentFlags, _i1)
000079:0x0025a6d8:	call	
000079:0x0025a6e8:	movem	#return, #return
000079:0x0025a6f8:	release	#return
000079:0x0025a700:	rts
000082:0x0025a708:	imove	j, 0x000000
000082:0x0025a718:	jump	0x25a728
000082:0x0025a720:	inc	j
000082:0x0025a728:	call	GetEnumSize(_T(EnProfilerFlags))
000082:0x0025a738:	cmpi	j, #return
000082:0x0025a748:	bge	0x25a860
000084:0x0025a750:	call	GetEnumValue(_T(EnProfilerFlags), j)
000084:0x0025a768:	move	@m00, #return
000084:0x0025a778:	ori	flags, flags, @m00
000085:0x0025a788:	icall	SetFlags(flags, _i1)
000087:0x0025a798:	icall	GetFlags()
000087:0x0025a7a0:	move	@m01, #return
000087:0x0025a7b0:	cmpi	@m01, flags
000087:0x0025a7c0:	bne	0x25a7e0
000087:0x0025a7c8:	imove	@m00, 0x000001
000087:0x0025a7d8:	jump	0x25a7f0
000087:0x0025a7e0:	imove	@m00, 0x000000
000087:0x0025a7f0:	call	
000087:0x0025a800:	cmpi	#return, _i0
000087:0x0025a810:	bne	0x25a858
000089:0x0025a818:	icall	SetFlags(currentFlags, _i1)
000090:0x0025a828:	call	
000090:0x0025a838:	movem	#return, #return
000090:0x0025a848:	release	#return
000090:0x0025a850:	rts
000090:0x0025a858:	jump	0x25a720
000090:0x0025a860:	jump	0x25a5e0
000096:0x0025a868:	icall	SetFlags(_i-333, _i1)
000097:0x0025a878:	icall	GetFlags()
000097:0x0025a880:	move	bogusFlags, #return
000098:0x0025a890:	noti	@m01, ALL
000098:0x0025a8a0:	move	@m00, @m01
000098:0x0025a8b0:	andi	bogusFlags, bogusFlags, @m00
000099:0x0025a8c0:	cmpi	bogusFlags, _i0
000099:0x0025a8d0:	bne	0x25a8f0
000099:0x0025a8d8:	imove	@m00, 0x000001
000099:0x0025a8e8:	jump	0x25a900
000099:0x0025a8f0:	imove	@m00, 0x000000
000099:0x0025a900:	call	
000099:0x0025a910:	cmpi	#return, _i0
000099:0x0025a920:	bne	0x25a968
000101:0x0025a928:	icall	SetFlags(currentFlags, _i1)
000102:0x0025a938:	call	
000102:0x0025a948:	movem	#return, #return
000102:0x0025a958:	release	#return
000102:0x0025a960:	rts
000105:0x0025a968:	icall	SetFlags(_i6003, _i1)
000105:0x0025a978:	move	bogusFlags, #return
000106:0x0025a988:	noti	@m01, ALL
000106:0x0025a998:	move	@m00, @m01
000106:0x0025a9a8:	andi	bogusFlags, bogusFlags, @m00
000107:0x0025a9b8:	cmpi	bogusFlags, _i0
000107:0x0025a9c8:	bne	0x25a9e8
000107:0x0025a9d0:	imove	@m00, 0x000001
000107:0x0025a9e0:	jump	0x25a9f8
000107:0x0025a9e8:	imove	@m00, 0x000000
000107:0x0025a9f8:	call	
000107:0x0025aa08:	cmpi	#return, _i0
000107:0x0025aa18:	bne	0x25aa60
000109:0x0025aa20:	icall	SetFlags(currentFlags, _i1)
000110:0x0025aa30:	call	
000110:0x0025aa40:	movem	#return, #return
000110:0x0025aa50:	release	#return
000110:0x0025aa58:	rts
000114:0x0025aa60:	icall	SetFlags(currentFlags, _i1)
000115:0x0025aa70:	call	
000115:0x0025aa80:	movem	#return, #return
000115:0x0025aa90:	release	#return
000115:0x0025aa98:	rts
000115:0x0025aaa0:	rts
EnProfilerTests::TestClearFlags()
000122:0x0025aad0:	icall	GetFlags()
000122:0x0025aad8:	move	currentFlags, #return
000124:0x0025aae8:	icall	SetFlags(RECURSIVE, _i1)
000126:0x0025aaf8:	icall	RemoveFlags(RECURSIVE, _i1)
000126:0x0025ab08:	move	@m01, #return
000126:0x0025ab18:	cmpi	@m01, NONE
000126:0x0025ab28:	bne	0x25ab48
000126:0x0025ab30:	imove	@m00, 0x000001
000126:0x0025ab40:	jump	0x25ab58
000126:0x0025ab48:	imove	@m00, 0x000000
000126:0x0025ab58:	call	
000126:0x0025ab68:	cmpi	#return, _i0
000126:0x0025ab78:	bne	0x25abc0
000128:0x0025ab80:	icall	SetFlags(currentFlags, _i1)
000129:0x0025ab90:	call	
000129:0x0025aba0:	movem	#return, #return
000129:0x0025abb0:	release	#return
000129:0x0025abb8:	rts
000132:0x0025abc0:	imove	@m01, 0x000003
000132:0x0025abd0:	move	@m00, @m01
000132:0x0025abe0:	icall	SetFlags(@m00, _i1)
000133:0x0025abf0:	imove	@m01, 0x000003
000133:0x0025ac00:	move	@m00, @m01
000133:0x0025ac10:	icall	RemoveFlags(@m00, _i1)
000135:0x0025ac20:	icall	GetFlags()
000135:0x0025ac28:	move	@m01, #return
000135:0x0025ac38:	cmpi	@m01, NONE
000135:0x0025ac48:	bne	0x25ac68
000135:0x0025ac50:	imove	@m00, 0x000001
000135:0x0025ac60:	jump	0x25ac78
000135:0x0025ac68:	imove	@m00, 0x000000
000135:0x0025ac78:	call	
000135:0x0025ac88:	cmpi	#return, _i0
000135:0x0025ac98:	bne	0x25ace0
000137:0x0025aca0:	icall	SetFlags(currentFlags, _i1)
000138:0x0025acb0:	call	
000138:0x0025acc0:	movem	#return, #return
000138:0x0025acd0:	release	#return
000138:0x0025acd8:	rts
000141:0x0025ace0:	imove	@m01, 0x000003
000141:0x0025acf0:	move	@m00, @m01
000141:0x0025ad00:	icall	SetFlags(@m00, _i1)
000142:0x0025ad10:	icall	ClearFlags(_i1)
000144:0x0025ad20:	icall	GetFlags()
000144:0x0025ad28:	move	@m01, #return
000144:0x0025ad38:	cmpi	@m01, NONE
000144:0x0025ad48:	bne	0x25ad68
000144:0x0025ad50:	imove	@m00, 0x000001
000144:0x0025ad60:	jump	0x25ad78
000144:0x0025ad68:	imove	@m00, 0x000000
000144:0x0025ad78:	call	
000144:0x0025ad88:	cmpi	#return, _i0
000144:0x0025ad98:	bne	0x25ade0
000146:0x0025ada0:	icall	SetFlags(currentFlags, _i1)
000147:0x0025adb0:	call	
000147:0x0025adc0:	movem	#return, #return
000147:0x0025add0:	release	#return
000147:0x0025add8:	rts
000151:0x0025ade0:	icall	SetFlags(currentFlags, _i1)
000152:0x0025adf0:	call	
000152:0x0025ae00:	movem	#return, #return
000152:0x0025ae10:	release	#return
000152:0x0025ae18:	rts
000152:0x0025ae20:	rts
EnProfilerTests::TestAddFlags()
000159:0x0025ae50:	icall	GetFlags()
000159:0x0025ae58:	move	currentFlags, #return
000161:0x0025ae68:	icall	ClearFlags(_i1)
000164:0x0025ae78:	icall	AddFlags(RESET, _i1)
000164:0x0025ae88:	move	@m01, #return
000164:0x0025ae98:	icall	GetFlags()
000164:0x0025aea0:	cmpi	@m01, #return
000164:0x0025aeb0:	bne	0x25aed0
000164:0x0025aeb8:	imove	@m00, 0x000001
000164:0x0025aec8:	jump	0x25aee0
000164:0x0025aed0:	imove	@m00, 0x000000
000164:0x0025aee0:	call	
000164:0x0025aef0:	cmpi	#return, _i0
000164:0x0025af00:	bne	0x25af48
000166:0x0025af08:	icall	SetFlags(currentFlags, _i1)
000167:0x0025af18:	call	
000167:0x0025af28:	movem	#return, #return
000167:0x0025af38:	release	#return
000167:0x0025af40:	rts
000170:0x0025af48:	icall	GetFlags()
000170:0x0025af50:	move	@m01, #return
000170:0x0025af60:	cmpi	@m01, RESET
000170:0x0025af70:	bne	0x25af90
000170:0x0025af78:	imove	@m00, 0x000001
000170:0x0025af88:	jump	0x25afa0
000170:0x0025af90:	imove	@m00, 0x000000
000170:0x0025afa0:	call	
000170:0x0025afb0:	cmpi	#return, _i0
000170:0x0025afc0:	bne	0x25b008
000172:0x0025afc8:	icall	SetFlags(currentFlags, _i1)
000173:0x0025afd8:	call	
000173:0x0025afe8:	movem	#return, #return
000173:0x0025aff8:	release	#return
000173:0x0025b000:	rts
000176:0x0025b008:	icall	AddFlags(RECURSIVE, _i1)
000176:0x0025b018:	move	@m01, #return
000176:0x0025b028:	imove	@m03, 0x000003
000176:0x0025b038:	move	@m02, @m03
000176:0x0025b048:	cmpi	@m01, @m02
000176:0x0025b058:	bne	0x25b078
000176:0x0025b060:	imove	@m00, 0x000001
000176:0x0025b070:	jump	0x25b088
000176:0x0025b078:	imove	@m00, 0x000000
000176:0x0025b088:	call	
000176:0x0025b098:	cmpi	#return, _i0
000176:0x0025b0a8:	bne	0x25b0f0
000178:0x0025b0b0:	icall	SetFlags(currentFlags, _i1)
000179:0x0025b0c0:	call	
000179:0x0025b0d0:	movem	#return, #return
000179:0x0025b0e0:	release	#return
000179:0x0025b0e8:	rts
000183:0x0025b0f0:	icall	SetFlags(currentFlags, _i1)
000184:0x0025b100:	call	
000184:0x0025b110:	movem	#return, #return
000184:0x0025b120:	release	#return
000184:0x0025b128:	rts
000184:0x0025b130:	rts
EnProfilerTests::TestModule()
000195:0x0025b9d0:	ncall	Type(this)
000195:0x0025b9e0:	icall	GetModule(#return)
000195:0x0025b9f0:	moves	nameOfCurrentModule, #return
000196:0x0025ba00:	cmps	nameOfCurrentModule, _s''
000196:0x0025ba10:	beq	0x25ba30
000196:0x0025ba18:	imove	@m00, 0x000001
000196:0x0025ba28:	jump	0x25ba40
000196:0x0025ba30:	imove	@m00, 0x000000
000196:0x0025ba40:	call	
000196:0x0025ba50:	cmpi	#return, _i0
000196:0x0025ba60:	bne	0x25ba98
000198:0x0025ba68:	call	
000198:0x0025ba78:	movem	#return, #return
000198:0x0025ba88:	release	#return
000198:0x0025ba90:	rts
000203:0x0025ba98:	icall	NameToModule(nameOfCurrentModule, currentModule)
000203:0x0025baa8:	call	
000203:0x0025bab8:	cmpi	#return, _i0
000203:0x0025bac8:	bne	0x25bb00
000205:0x0025bad0:	call	
000205:0x0025bae0:	movem	#return, #return
000205:0x0025baf0:	release	#return
000205:0x0025baf8:	rts
000208:0x0025bb00:	cmpi	currentModule, eptModule
000208:0x0025bb10:	bne	0x25bb30
000208:0x0025bb18:	imove	@m00, 0x000001
000208:0x0025bb28:	jump	0x25bb40
000208:0x0025bb30:	imove	@m00, 0x000000
000208:0x0025bb40:	call	
000208:0x0025bb50:	cmpi	#return, _i0
000208:0x0025bb60:	bne	0x25bb98
000210:0x0025bb68:	call	
000210:0x0025bb78:	movem	#return, #return
000210:0x0025bb88:	release	#return
000210:0x0025bb90:	rts
000214:0x0025bb98:	icall	GetModule()
000214:0x0025bba0:	move	currentlyProfiledModule, #return
000215:0x0025bbb0:	icall	SetModule(eptModule, _i1)
000217:0x0025bbc0:	icall	GetModule()
000217:0x0025bbc8:	move	@m01, #return
000217:0x0025bbd8:	cmpi	@m01, eptModule
000217:0x0025bbe8:	bne	0x25bc08
000217:0x0025bbf0:	imove	@m00, 0x000001
000217:0x0025bc00:	jump	0x25bc18
000217:0x0025bc08:	imove	@m00, 0x000000
000217:0x0025bc18:	call	
000217:0x0025bc28:	cmpi	#return, _i0
000217:0x0025bc38:	bne	0x25bc80
000219:0x0025bc40:	icall	SetModule(currentlyProfiledModule, _i1)
000220:0x0025bc50:	call	
000220:0x0025bc60:	movem	#return, #return
000220:0x0025bc70:	release	#return
000220:0x0025bc78:	rts
000224:0x0025bc80:	icall	GetFlags()
000224:0x0025bc88:	move	currentFlags, #return
000225:0x0025bc98:	call	RequestImmediateData()
000225:0x0025bca8:	move	wasEnabled, #return
000229:0x0025bcb8:	icall	RemoveFlags(RECURSIVE, _i1)
000232:0x0025bcc8:	icall	GetTimeResolution()
000232:0x0025bcd0:	move	resolution, #return
000233:0x0025bce0:	icall	SetTimeResolution(_i1)
000236:0x0025bcf0:	ncall	Type(this)
000236:0x0025bd00:	icall	GetTimeOfFunc(_s'Sleep', #return, true)
000236:0x0025bd18:	move	previousTime, #return
000237:0x0025bd28:	call	
000237:0x0025bd38:	move	timeSlept, #return
000238:0x0025bd48:	ncall	Type(this)
000238:0x0025bd58:	icall	GetTimeOfFunc(_s'Sleep', #return, true)
000238:0x0025bd70:	move	postTime, #return
000239:0x0025bd80:	subf	@f01, postTime, previousTime
000239:0x0025bd90:	move	@f00, @f01
000239:0x0025bda0:	subf	diff, @f00, timeSlept
000242:0x0025bdb0:	icall	SetTimeResolution(resolution)
000245:0x0025bdc0:	cmpf	postTime, _f0.000000
000245:0x0025bdd0:	ble	0x25bdf0
000245:0x0025bdd8:	imove	@m00, 0x000001
000245:0x0025bde8:	jump	0x25be00
000245:0x0025bdf0:	imove	@m00, 0x000000
000245:0x0025be00:	call	
000245:0x0025be10:	cmpi	#return, _i0
000245:0x0025be20:	bne	0x25bea8
000247:0x0025be28:	icall	SetFlags(currentFlags, _i1)
000249:0x0025be38:	cmpi	wasEnabled, _i0
000249:0x0025be48:	bne	0x25be68
000250:0x0025be50:	icall	Enable(false, true, _i1)
000252:0x0025be68:	icall	SetModule(currentlyProfiledModule, _i1)
000254:0x0025be78:	call	
000254:0x0025be88:	movem	#return, #return
000254:0x0025be98:	release	#return
000254:0x0025bea0:	rts
000257:0x0025bea8:	cmpf	diff, _f0.000010
000257:0x0025beb8:	bge	0x25bed8
000257:0x0025bec0:	imove	@m00, 0x000001
000257:0x0025bed0:	jump	0x25bee8
000257:0x0025bed8:	imove	@m00, 0x000000
000257:0x0025bee8:	call	
000257:0x0025bef8:	cmpi	#return, _i0
000257:0x0025bf08:	bne	0x25bf90
000259:0x0025bf10:	icall	SetFlags(currentFlags, _i1)
000261:0x0025bf20:	cmpi	wasEnabled, _i0
000261:0x0025bf30:	bne	0x25bf50
000262:0x0025bf38:	icall	Enable(false, true, _i1)
000264:0x0025bf50:	icall	SetModule(currentlyProfiledModule, _i1)
000266:0x0025bf60:	call	
000266:0x0025bf70:	movem	#return, #return
000266:0x0025bf80:	release	#return
000266:0x0025bf88:	rts
000270:0x0025bf90:	icall	ResetSession(true)
000273:0x0025bfa0:	imove	i, 0x000000
000273:0x0025bfb0:	jump	0x25bfc0
000273:0x0025bfb8:	inc	i
000273:0x0025bfc0:	cmpi	i, _i1000
000273:0x0025bfd0:	bge	0x25bff8
000275:0x0025bfd8:	call	StringToEnum(_T(EnProfilerModule), _s'MISSION_CUSTOM')
000275:0x0025bff0:	jump	0x25bfb8
000279:0x0025bff8:	icall	SortData()
000280:0x0025c000:	new	timePerFunc, array<@Param2<float,string>>
000281:0x0025c020:	icall	GetTimePerFunc(timePerFunc, _i2147483647)
000283:0x0025c030:	call	TFLog(_s'Game fncs:', this, _s'TestModule')
000285:0x0025c048:	ncalli	array<@Param2<float,string>>.Count()
000285:0x0025c050:	move	funcCount, #return
000286:0x0025c060:	imove	j, 0x000000
000286:0x0025c070:	jump	0x25c080
000286:0x0025c078:	inc	j
000286:0x0025c080:	cmpi	j, funcCount
000286:0x0025c090:	bge	0x25c238
000288:0x0025c098:	icall	
000288:0x0025c0a8:	movetm	tfp, #return
000289:0x0025c0b8:	movefm	@c00, tfp
000289:0x0025c0c8:	movefm	@c01, tfp
000289:0x0025c0d8:	icall	Format(_s'	time: %1 | fnc: %2', param1, param2, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000289:0x0025c108:	call	TFLog(#return, this, _s'TestModule')
000291:0x0025c120:	movefm	@c00, tfp
000291:0x0025c130:	cmps	param2, _s'EnumTools::StringToEnum'
000291:0x0025c140:	beq	0x25c160
000291:0x0025c148:	imove	@m00, 0x000001
000291:0x0025c158:	jump	0x25c170
000291:0x0025c160:	imove	@m00, 0x000000
000291:0x0025c170:	call	
000291:0x0025c180:	cmpi	#return, _i0
000291:0x0025c190:	bne	0x25c228
000293:0x0025c198:	icall	SetFlags(currentFlags, _i1)
000295:0x0025c1a8:	cmpi	wasEnabled, _i0
000295:0x0025c1b8:	bne	0x25c1d8
000296:0x0025c1c0:	icall	Enable(false, true, _i1)
000298:0x0025c1d8:	icall	SetModule(currentlyProfiledModule, _i1)
000300:0x0025c1e8:	call	
000300:0x0025c1f8:	movem	#return, #return
000300:0x0025c208:	release	tfp
000300:0x0025c210:	release	timePerFunc
000300:0x0025c218:	release	#return
000300:0x0025c220:	rts
000300:0x0025c228:	release	tfp
000300:0x0025c230:	jump	0x25c078
000304:0x0025c238:	new	timePerClass, array<@Param2<float,typename>>
000305:0x0025c258:	icall	GetTimePerClass(timePerClass, _i2147483647)
000307:0x0025c268:	ncalli	array<@Param2<float,typename>>.Count()
000307:0x0025c270:	move	classCount, #return
000308:0x0025c280:	imove	k, 0x000000
000308:0x0025c290:	jump	0x25c2a0
000308:0x0025c298:	inc	k
000308:0x0025c2a0:	cmpi	k, classCount
000308:0x0025c2b0:	bge	0x25c4c0
000310:0x0025c2b8:	icall	
000310:0x0025c2c8:	movec	@c00, #return
000310:0x0025c2d8:	movea	type, param2
000312:0x0025c2e8:	icall	GetModule(type)
000312:0x0025c2f8:	icall	NameToModule(#return, classModule)
000312:0x0025c308:	call	
000312:0x0025c318:	cmpi	#return, _i0
000312:0x0025c328:	bne	0x25c3c0
000314:0x0025c330:	icall	SetFlags(currentFlags, _i1)
000316:0x0025c340:	cmpi	wasEnabled, _i0
000316:0x0025c350:	bne	0x25c370
000317:0x0025c358:	icall	Enable(false, true, _i1)
000319:0x0025c370:	icall	SetModule(currentlyProfiledModule, _i1)
000321:0x0025c380:	call	
000321:0x0025c390:	movem	#return, #return
000321:0x0025c3a0:	release	timePerFunc
000321:0x0025c3a8:	release	timePerClass
000321:0x0025c3b0:	release	#return
000321:0x0025c3b8:	rts
000325:0x0025c3c0:	cmpi	classModule, eptModule
000325:0x0025c3d0:	bne	0x25c3f0
000325:0x0025c3d8:	imove	@m00, 0x000001
000325:0x0025c3e8:	jump	0x25c400
000325:0x0025c3f0:	imove	@m00, 0x000000
000325:0x0025c400:	call	
000325:0x0025c410:	cmpi	#return, _i0
000325:0x0025c420:	bne	0x25c4b8
000327:0x0025c428:	icall	SetFlags(currentFlags, _i1)
000329:0x0025c438:	cmpi	wasEnabled, _i0
000329:0x0025c448:	bne	0x25c468
000330:0x0025c450:	icall	Enable(false, true, _i1)
000332:0x0025c468:	icall	SetModule(currentlyProfiledModule, _i1)
000334:0x0025c478:	call	
000334:0x0025c488:	movem	#return, #return
000334:0x0025c498:	release	timePerFunc
000334:0x0025c4a0:	release	timePerClass
000334:0x0025c4a8:	release	#return
000334:0x0025c4b0:	rts
000334:0x0025c4b8:	jump	0x25c298
000339:0x0025c4c0:	icall	SetModule(CORE, false)
000340:0x0025c4d0:	icall	SortData()
000341:0x0025c4d8:	ncalli	array<@Param2<float,string>>.Clear()
000342:0x0025c4e0:	icall	GetTimePerFunc(timePerFunc, _i2147483647)
000344:0x0025c4f0:	imove	found, 0x000000
000346:0x0025c500:	call	TFLog(_s'Core fncs:', this, _s'TestModule')
000348:0x0025c518:	ncalli	array<@Param2<float,string>>.Count()
000348:0x0025c520:	move	funcCount, #return
000349:0x0025c530:	imove	l, 0x000000
000349:0x0025c540:	jump	0x25c550
000349:0x0025c548:	inc	l
000349:0x0025c550:	cmpi	l, funcCount
000349:0x0025c560:	bge	0x25c640
000351:0x0025c568:	icall	
000351:0x0025c578:	movetm	tfpc, #return
000352:0x0025c588:	movefm	@c00, tfpc
000352:0x0025c598:	movefm	@c01, tfpc
000352:0x0025c5a8:	icall	Format(_s'	time: %1 | fnc: %2', param1, param2, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000352:0x0025c5d8:	call	TFLog(#return, this, _s'TestModule')
000354:0x0025c5f0:	movefm	@c00, tfpc
000354:0x0025c600:	cmps	param2, _s'EnumTools::StringToEnum'
000354:0x0025c610:	bne	0x25c630
000356:0x0025c618:	imove	found, 0x000001
000357:0x0025c628:	jump	0x25c640
000357:0x0025c630:	release	tfpc
000357:0x0025c638:	jump	0x25c548
000361:0x0025c640:	call	
000364:0x0025c650:	icall	GetModule()
000364:0x0025c658:	move	mod, #return
000365:0x0025c668:	icall	SetModule(_i-333, _i1)
000366:0x0025c678:	icall	GetModule()
000366:0x0025c680:	move	@m01, #return
000366:0x0025c690:	cmpi	@m01, mod
000366:0x0025c6a0:	bne	0x25c6c0
000366:0x0025c6a8:	imove	@m00, 0x000001
000366:0x0025c6b8:	jump	0x25c6d0
000366:0x0025c6c0:	imove	@m00, 0x000000
000366:0x0025c6d0:	call	
000366:0x0025c6e0:	move	success, #return
000367:0x0025c6f0:	icall	SetModule(_i6003, _i1)
000368:0x0025c700:	icall	GetModule()
000368:0x0025c708:	move	@m02, #return
000368:0x0025c718:	cmpi	@m02, mod
000368:0x0025c728:	bne	0x25c748
000368:0x0025c730:	imove	@m01, 0x000001
000368:0x0025c740:	jump	0x25c758
000368:0x0025c748:	imove	@m01, 0x000000
000368:0x0025c758:	call	
000368:0x0025c768:	move	@m00, #return
000368:0x0025c778:	andi	success, success, @m00
000370:0x0025c788:	icall	SetFlags(currentFlags, _i1)
000371:0x0025c798:	icall	SetModule(currentlyProfiledModule, _i1)
000373:0x0025c7a8:	cmpi	wasEnabled, _i0
000373:0x0025c7b8:	bne	0x25c7d8
000374:0x0025c7c0:	icall	Enable(false, true, _i1)
000376:0x0025c7d8:	cmpi	success, _i0
000376:0x0025c7e8:	beq	0x25c820
000376:0x0025c7f0:	cmpi	found, _i0
000376:0x0025c800:	beq	0x25c820
000376:0x0025c808:	imove	@m00, 0x000001
000376:0x0025c818:	jump	0x25c830
000376:0x0025c820:	imove	@m00, 0x000000
000376:0x0025c830:	call	
000376:0x0025c840:	movem	#return, #return
000376:0x0025c850:	release	timePerFunc
000376:0x0025c858:	release	timePerClass
000376:0x0025c860:	release	#return
000376:0x0025c868:	rts
000376:0x0025c870:	release	timePerFunc
000376:0x0025c878:	release	timePerClass
000376:0x0025c880:	rts
EnProfilerTests::TestClassTimeData()
000384:0x0025caf8:	icall	GetTimeResolution()
000384:0x0025cb00:	move	resolution, #return
000385:0x0025cb10:	call	RequestImmediateData()
000385:0x0025cb20:	move	wasEnabled, #return
000388:0x0025cb30:	icall	SetTimeResolution(_i1)
000391:0x0025cb40:	new	clss, EPTHelperClass
000394:0x0025cb60:	movefm	[0xd315b998], clss
000394:0x0025cb70:	ncall	Type([0xd315b998])
000394:0x0025cb80:	icall	GetTimeOfClass(#return, true)
000394:0x0025cb90:	move	previousTime, #return
000395:0x0025cba0:	call	
000395:0x0025cbb0:	move	timeStressed, #return
000396:0x0025cbc0:	movefm	[0xd315b998], clss
000396:0x0025cbd0:	ncall	Type([0xd315b998])
000396:0x0025cbe0:	icall	GetTimeOfClass(#return, true)
000396:0x0025cbf0:	move	postTime, #return
000397:0x0025cc00:	call	StaticGetType(_T(EPTHelperClass))
000397:0x0025cc10:	icall	GetTimeOfClass(#return, true)
000397:0x0025cc20:	move	postTimeStatic, #return
000398:0x0025cc30:	subf	timeProfiled, postTime, previousTime
000399:0x0025cc40:	subf	@f02, timeProfiled, timeStressed
000399:0x0025cc50:	move	@f01, @f02
000399:0x0025cc60:	icall	AbsFloat(@f01)
000399:0x0025cc70:	move	diff, #return
000401:0x0025cc80:	icall	Format(_s'Profiling result: stressed: %1 | profiled: %2 | diff: %3', timeStressed, timeProfiled, diff, _c0, _c0, _c0, _c0, _c0, _c0)
000401:0x0025ccb0:	call	TFLog(#return, this, _s'TestClassTimeData')
000404:0x0025ccc8:	icall	SetTimeResolution(resolution)
000405:0x0025ccd8:	cmpi	wasEnabled, _i0
000405:0x0025cce8:	bne	0x25cd08
000406:0x0025ccf0:	icall	Enable(false, true, _i1)
000409:0x0025cd08:	cmpf	postTime, _f0.000000
000409:0x0025cd18:	ble	0x25cd38
000409:0x0025cd20:	imove	@m00, 0x000001
000409:0x0025cd30:	jump	0x25cd48
000409:0x0025cd38:	imove	@m00, 0x000000
000409:0x0025cd48:	call	
000409:0x0025cd58:	cmpi	#return, _i0
000409:0x0025cd68:	bne	0x25cda8
000411:0x0025cd70:	call	
000411:0x0025cd80:	movem	#return, #return
000411:0x0025cd90:	release	clss
000411:0x0025cd98:	release	#return
000411:0x0025cda0:	rts
000414:0x0025cda8:	cmpf	postTime, postTimeStatic
000414:0x0025cdb8:	bne	0x25cdd8
000414:0x0025cdc0:	imove	@m00, 0x000001
000414:0x0025cdd0:	jump	0x25cde8
000414:0x0025cdd8:	imove	@m00, 0x000000
000414:0x0025cde8:	call	
000414:0x0025cdf8:	cmpi	#return, _i0
000414:0x0025ce08:	bne	0x25ce48
000416:0x0025ce10:	call	
000416:0x0025ce20:	movem	#return, #return
000416:0x0025ce30:	release	clss
000416:0x0025ce38:	release	#return
000416:0x0025ce40:	rts
000419:0x0025ce48:	cmpf	diff, _f0.001000
000419:0x0025ce58:	bge	0x25ce78
000419:0x0025ce60:	imove	@m00, 0x000001
000419:0x0025ce70:	jump	0x25ce88
000419:0x0025ce78:	imove	@m00, 0x000000
000419:0x0025ce88:	call	
000419:0x0025ce98:	cmpi	#return, _i0
000419:0x0025cea8:	bne	0x25cee8
000421:0x0025ceb0:	call	
000421:0x0025cec0:	movem	#return, #return
000421:0x0025ced0:	release	clss
000421:0x0025ced8:	release	#return
000421:0x0025cee0:	rts
000424:0x0025cee8:	call	
000424:0x0025cef8:	movem	#return, #return
000424:0x0025cf08:	release	clss
000424:0x0025cf10:	release	#return
000424:0x0025cf18:	rts
000424:0x0025cf20:	release	clss
000424:0x0025cf28:	rts
array<EPTHelperClass>::InsertAll()
//scripts/1_Core/proto\enscript.c
000427:0x0025d9a8:	imove	i, 0x000000
000427:0x0025d9b8:	jump	0x25d9d8
000427:0x0025d9c0:	move	@m00, i
000427:0x0025d9d0:	inc	i
000427:0x0025d9d8:	ncalli	array<EPTHelperClass>.Count()
000427:0x0025d9e0:	cmpi	i, #return
000427:0x0025d9f0:	bge	0x25da20
000429:0x0025d9f8:	icall	
000429:0x0025da08:	icall	
000429:0x0025da18:	jump	0x25d9c0
000429:0x0025da20:	rts
array<EPTHelperClass>::RemoveItem()
000479:0x0025da50:	movefm	@c00, value
000479:0x0025da60:	icall	
000479:0x0025da70:	move	remove_index, #return
000481:0x0025da80:	cmpi	remove_index, _i0
000481:0x0025da90:	blt	0x25daa8
000483:0x0025da98:	ncalli	array<EPTHelperClass>.RemoveOrdered(remove_index)
000483:0x0025daa8:	rts
array<EPTHelperClass>::RemoveItemUnOrdered()
000489:0x0025dad8:	movefm	@c00, value
000489:0x0025dae8:	icall	
000489:0x0025daf8:	move	remove_index, #return
000491:0x0025db08:	cmpi	remove_index, _i0
000491:0x0025db18:	blt	0x25db30
000493:0x0025db20:	ncalli	array<EPTHelperClass>.Remove(remove_index)
000493:0x0025db30:	rts
array<EPTHelperClass>::IsValidIndex()
000499:0x0025db38:	cmpi	index, _i-1
000499:0x0025db48:	ble	0x25db88
000499:0x0025db50:	ncalli	array<EPTHelperClass>.Count()
000499:0x0025db58:	cmpi	index, #return
000499:0x0025db68:	bge	0x25db88
000499:0x0025db70:	imove	#return, 0x000001
000499:0x0025db80:	jump	0x25db98
000499:0x0025db88:	imove	#return, 0x000000
000499:0x0025db98:	rts
000499:0x0025dba0:	rts
array<EPTHelperClass>::Debug()
000525:0x0025dbf8:	ncalli	array<EPTHelperClass>.Count()
000525:0x0025dc00:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0025dc30:	icall	Print(#return)
000526:0x0025dc40:	imove	i, 0x000000
000526:0x0025dc50:	jump	0x25dc70
000526:0x0025dc58:	move	@m00, i
000526:0x0025dc68:	inc	i
000526:0x0025dc70:	ncalli	array<EPTHelperClass>.Count()
000526:0x0025dc78:	cmpi	i, #return
000526:0x0025dc88:	bge	0x25dd00
000528:0x0025dc90:	icall	
000528:0x0025dca0:	movetm	item, #return
000529:0x0025dcb0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0025dce0:	icall	Print(#return)
000529:0x0025dcf0:	release	item
000529:0x0025dcf8:	jump	0x25dc58
000529:0x0025dd00:	rts
array<EPTHelperClass>::GetRandomIndex()
000544:0x0025dd08:	ncalli	array<EPTHelperClass>.Count()
000544:0x0025dd10:	move	@m00, #return
000544:0x0025dd20:	cmpi	@m00, _i0
000544:0x0025dd30:	ble	0x25dd68
000546:0x0025dd38:	ncalli	array<EPTHelperClass>.Count()
000546:0x0025dd40:	icall	RandomInt(_i0, #return)
000546:0x0025dd50:	move	#return, #return
000546:0x0025dd60:	rts
000549:0x0025dd68:	imove	#return, 0xffffffff
000549:0x0025dd78:	rts
000549:0x0025dd80:	rts
array<EPTHelperClass>::GetRandomElement()
000563:0x0025dd88:	call	
000563:0x0025dd98:	icall	
000563:0x0025dda8:	movetm	#return, #return
000563:0x0025ddb8:	rts
000563:0x0025ddc0:	rts
array<EPTHelperClass>::SwapItems()
000568:0x0025ddf0:	icall	
000568:0x0025de00:	movetm	item1, #return
000569:0x0025de10:	icall	
000569:0x0025de20:	icall	
000570:0x0025de30:	movefm	@c00, item1
000570:0x0025de40:	icall	
000570:0x0025de50:	release	item1
000570:0x0025de58:	rts
array<EPTHelperClass>::InsertArray()
000575:0x0025deb0:	imove	i, 0x000000
000575:0x0025dec0:	jump	0x25dee0
000575:0x0025dec8:	move	@m00, i
000575:0x0025ded8:	inc	i
000575:0x0025dee0:	ncalli	array<EPTHelperClass>.Count()
000575:0x0025dee8:	cmpi	i, #return
000575:0x0025def8:	bge	0x25df50
000577:0x0025df00:	icall	
000577:0x0025df10:	movetm	item, #return
000578:0x0025df20:	movefm	@c00, item
000578:0x0025df30:	icall	
000578:0x0025df40:	release	item
000578:0x0025df48:	jump	0x25dec8
000578:0x0025df50:	rts
array<EPTHelperClass>::Invert()
000584:0x0025dfd0:	imove	left, 0x000000
000585:0x0025dfe0:	ncalli	array<EPTHelperClass>.Count()
000585:0x0025dfe8:	subi	right, #return, _i1
000586:0x0025dff8:	cmpi	right, _i0
000586:0x0025e008:	ble	0x25e0c8
000588:0x0025e010:	cmpi	left, right
000588:0x0025e020:	bge	0x25e0c8
000590:0x0025e028:	icall	
000590:0x0025e038:	movetm	temp, #return
000591:0x0025e048:	move	@m00, left
000591:0x0025e058:	inc	left
000591:0x0025e060:	icall	
000591:0x0025e070:	icall	
000592:0x0025e080:	move	@m00, right
000592:0x0025e090:	dec	right
000592:0x0025e098:	movefm	@c00, temp
000592:0x0025e0a8:	icall	
000592:0x0025e0b8:	release	temp
000592:0x0025e0c0:	jump	0x25e010
000592:0x0025e0c8:	rts
array<EPTHelperClass>::MoveIndex()
000612:0x0025e120:	ncalli	array<EPTHelperClass>.Count()
000612:0x0025e128:	move	count, #return
000613:0x0025e138:	move	new_index, curr_index
000615:0x0025e148:	cmpi	move_number, _i0
000615:0x0025e158:	ble	0x25e180
000617:0x0025e160:	addi	@m00, curr_index, move_number
000617:0x0025e170:	move	new_index, @m00
000620:0x0025e180:	cmpi	move_number, _i0
000620:0x0025e190:	bge	0x25e238
000622:0x0025e198:	subi	@m00, curr_index, move_number
000622:0x0025e1a8:	move	new_index, @m00
000624:0x0025e1b8:	cmpi	new_index, _i0
000624:0x0025e1c8:	bge	0x25e238
000626:0x0025e1d0:	subi	@m01, _i0, count
000626:0x0025e1e0:	cmpi	new_index, @m01
000626:0x0025e1f0:	bgt	0x25e218
000628:0x0025e1f8:	modi	@m00, new_index, count
000628:0x0025e208:	move	new_index, @m00
000631:0x0025e218:	addi	@m00, new_index, count
000631:0x0025e228:	move	new_index, @m00
000635:0x0025e238:	cmpi	new_index, count
000635:0x0025e248:	blt	0x25e270
000637:0x0025e250:	modi	@m00, new_index, count
000637:0x0025e260:	move	new_index, @m00
000641:0x0025e270:	move	#return, new_index
000641:0x0025e280:	rts
000641:0x0025e288:	rts
array<EPTHelperClass>::ShuffleArray()
000646:0x0025e2b8:	imove	i, 0x000000
000646:0x0025e2c8:	jump	0x25e2e8
000646:0x0025e2d0:	move	@m00, i
000646:0x0025e2e0:	inc	i
000646:0x0025e2e8:	ncalli	array<EPTHelperClass>.Count()
000646:0x0025e2f0:	cmpi	i, #return
000646:0x0025e300:	bge	0x25e338
000648:0x0025e308:	call	
000648:0x0025e318:	call	
000648:0x0025e330:	jump	0x25e2d0
000648:0x0025e338:	rts
array<EPTHelperClass>::DifferentAtPosition()
000666:0x0025e368:	ncalli	array<EPTHelperClass>.Count()
000666:0x0025e370:	move	@m00, #return
000666:0x0025e380:	push	#return
000666:0x0025e388:	ncalli	array<EPTHelperClass>.Count()
000666:0x0025e390:	move	@m02, #return
000666:0x0025e3a0:	pop	#return
000666:0x0025e3a8:	cmpi	@m00, @m02
000666:0x0025e3b8:	beq	0x25e3e8
000668:0x0025e3c0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0025e3d0:	imove	#return, 0xffffffff
000669:0x0025e3e0:	rts
000672:0x0025e3e8:	imove	i, 0x000000
000672:0x0025e3f8:	jump	0x25e408
000672:0x0025e400:	inc	i
000672:0x0025e408:	ncalli	array<EPTHelperClass>.Count()
000672:0x0025e410:	cmpi	i, #return
000672:0x0025e420:	bge	0x25e4b0
000674:0x0025e428:	icall	
000674:0x0025e438:	movec	@c00, #return
000674:0x0025e448:	pushc	#return
000674:0x0025e450:	icall	
000674:0x0025e460:	movec	@c02, #return
000674:0x0025e470:	popc	#return
000674:0x0025e478:	cmpc	@c00, @c02
000674:0x0025e488:	beq	0x25e4a8
000676:0x0025e490:	move	#return, i
000676:0x0025e4a0:	rts
000676:0x0025e4a8:	jump	0x25e400
000680:0x0025e4b0:	imove	#return, 0xffffffff
000680:0x0025e4c0:	rts
000680:0x0025e4c8:	rts
array<@EPTHelperClass>::InsertAll()
000427:0x0025e8e0:	imove	i, 0x000000
000427:0x0025e8f0:	jump	0x25e910
000427:0x0025e8f8:	move	@m00, i
000427:0x0025e908:	inc	i
000427:0x0025e910:	ncalli	array<EPTHelperClass>.Count()
000427:0x0025e918:	cmpi	i, #return
000427:0x0025e928:	bge	0x25e958
000429:0x0025e930:	icall	
000429:0x0025e940:	icall	
000429:0x0025e950:	jump	0x25e8f8
000429:0x0025e958:	rts
array<@EPTHelperClass>::RemoveItem()
000479:0x0025e988:	movefm	@c00, value
000479:0x0025e998:	icall	
000479:0x0025e9a8:	move	remove_index, #return
000481:0x0025e9b8:	cmpi	remove_index, _i0
000481:0x0025e9c8:	blt	0x25e9e0
000483:0x0025e9d0:	ncalli	array<@EPTHelperClass>.RemoveOrdered(remove_index)
000483:0x0025e9e0:	rts
array<@EPTHelperClass>::RemoveItemUnOrdered()
000489:0x0025ea10:	movefm	@c00, value
000489:0x0025ea20:	icall	
000489:0x0025ea30:	move	remove_index, #return
000491:0x0025ea40:	cmpi	remove_index, _i0
000491:0x0025ea50:	blt	0x25ea68
000493:0x0025ea58:	ncalli	array<@EPTHelperClass>.Remove(remove_index)
000493:0x0025ea68:	rts
array<@EPTHelperClass>::IsValidIndex()
000499:0x0025ea70:	cmpi	index, _i-1
000499:0x0025ea80:	ble	0x25eac0
000499:0x0025ea88:	ncalli	array<@EPTHelperClass>.Count()
000499:0x0025ea90:	cmpi	index, #return
000499:0x0025eaa0:	bge	0x25eac0
000499:0x0025eaa8:	imove	#return, 0x000001
000499:0x0025eab8:	jump	0x25ead0
000499:0x0025eac0:	imove	#return, 0x000000
000499:0x0025ead0:	rts
000499:0x0025ead8:	rts
array<@EPTHelperClass>::Debug()
000525:0x0025eb30:	ncalli	array<@EPTHelperClass>.Count()
000525:0x0025eb38:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0025eb68:	icall	Print(#return)
000526:0x0025eb78:	imove	i, 0x000000
000526:0x0025eb88:	jump	0x25eba8
000526:0x0025eb90:	move	@m00, i
000526:0x0025eba0:	inc	i
000526:0x0025eba8:	ncalli	array<@EPTHelperClass>.Count()
000526:0x0025ebb0:	cmpi	i, #return
000526:0x0025ebc0:	bge	0x25ec38
000528:0x0025ebc8:	icall	
000528:0x0025ebd8:	movetm	item, #return
000529:0x0025ebe8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0025ec18:	icall	Print(#return)
000529:0x0025ec28:	release	item
000529:0x0025ec30:	jump	0x25eb90
000529:0x0025ec38:	rts
array<@EPTHelperClass>::GetRandomIndex()
000544:0x0025ec40:	ncalli	array<@EPTHelperClass>.Count()
000544:0x0025ec48:	move	@m00, #return
000544:0x0025ec58:	cmpi	@m00, _i0
000544:0x0025ec68:	ble	0x25eca0
000546:0x0025ec70:	ncalli	array<@EPTHelperClass>.Count()
000546:0x0025ec78:	icall	RandomInt(_i0, #return)
000546:0x0025ec88:	move	#return, #return
000546:0x0025ec98:	rts
000549:0x0025eca0:	imove	#return, 0xffffffff
000549:0x0025ecb0:	rts
000549:0x0025ecb8:	rts
array<@EPTHelperClass>::GetRandomElement()
000563:0x0025ecc0:	call	
000563:0x0025ecd0:	icall	
000563:0x0025ece0:	movetm	#return, #return
000563:0x0025ecf0:	rts
000563:0x0025ecf8:	rts
array<@EPTHelperClass>::SwapItems()
000568:0x0025ed28:	icall	
000568:0x0025ed38:	movetm	item1, #return
000569:0x0025ed48:	icall	
000569:0x0025ed58:	icall	
000570:0x0025ed68:	movefm	@c00, item1
000570:0x0025ed78:	icall	
000570:0x0025ed88:	release	item1
000570:0x0025ed90:	rts
array<@EPTHelperClass>::InsertArray()
000575:0x0025ede8:	imove	i, 0x000000
000575:0x0025edf8:	jump	0x25ee18
000575:0x0025ee00:	move	@m00, i
000575:0x0025ee10:	inc	i
000575:0x0025ee18:	ncalli	array<EPTHelperClass>.Count()
000575:0x0025ee20:	cmpi	i, #return
000575:0x0025ee30:	bge	0x25ee88
000577:0x0025ee38:	icall	
000577:0x0025ee48:	movetm	item, #return
000578:0x0025ee58:	movefm	@c00, item
000578:0x0025ee68:	icall	
000578:0x0025ee78:	release	item
000578:0x0025ee80:	jump	0x25ee00
000578:0x0025ee88:	rts
array<@EPTHelperClass>::Invert()
000584:0x0025ef08:	imove	left, 0x000000
000585:0x0025ef18:	ncalli	array<@EPTHelperClass>.Count()
000585:0x0025ef20:	subi	right, #return, _i1
000586:0x0025ef30:	cmpi	right, _i0
000586:0x0025ef40:	ble	0x25f000
000588:0x0025ef48:	cmpi	left, right
000588:0x0025ef58:	bge	0x25f000
000590:0x0025ef60:	icall	
000590:0x0025ef70:	movetm	temp, #return
000591:0x0025ef80:	move	@m00, left
000591:0x0025ef90:	inc	left
000591:0x0025ef98:	icall	
000591:0x0025efa8:	icall	
000592:0x0025efb8:	move	@m00, right
000592:0x0025efc8:	dec	right
000592:0x0025efd0:	movefm	@c00, temp
000592:0x0025efe0:	icall	
000592:0x0025eff0:	release	temp
000592:0x0025eff8:	jump	0x25ef48
000592:0x0025f000:	rts
array<@EPTHelperClass>::MoveIndex()
000612:0x0025f058:	ncalli	array<@EPTHelperClass>.Count()
000612:0x0025f060:	move	count, #return
000613:0x0025f070:	move	new_index, curr_index
000615:0x0025f080:	cmpi	move_number, _i0
000615:0x0025f090:	ble	0x25f0b8
000617:0x0025f098:	addi	@m00, curr_index, move_number
000617:0x0025f0a8:	move	new_index, @m00
000620:0x0025f0b8:	cmpi	move_number, _i0
000620:0x0025f0c8:	bge	0x25f170
000622:0x0025f0d0:	subi	@m00, curr_index, move_number
000622:0x0025f0e0:	move	new_index, @m00
000624:0x0025f0f0:	cmpi	new_index, _i0
000624:0x0025f100:	bge	0x25f170
000626:0x0025f108:	subi	@m01, _i0, count
000626:0x0025f118:	cmpi	new_index, @m01
000626:0x0025f128:	bgt	0x25f150
000628:0x0025f130:	modi	@m00, new_index, count
000628:0x0025f140:	move	new_index, @m00
000631:0x0025f150:	addi	@m00, new_index, count
000631:0x0025f160:	move	new_index, @m00
000635:0x0025f170:	cmpi	new_index, count
000635:0x0025f180:	blt	0x25f1a8
000637:0x0025f188:	modi	@m00, new_index, count
000637:0x0025f198:	move	new_index, @m00
000641:0x0025f1a8:	move	#return, new_index
000641:0x0025f1b8:	rts
000641:0x0025f1c0:	rts
array<@EPTHelperClass>::ShuffleArray()
000646:0x0025f1f0:	imove	i, 0x000000
000646:0x0025f200:	jump	0x25f220
000646:0x0025f208:	move	@m00, i
000646:0x0025f218:	inc	i
000646:0x0025f220:	ncalli	array<@EPTHelperClass>.Count()
000646:0x0025f228:	cmpi	i, #return
000646:0x0025f238:	bge	0x25f270
000648:0x0025f240:	call	
000648:0x0025f250:	call	
000648:0x0025f268:	jump	0x25f208
000648:0x0025f270:	rts
array<@EPTHelperClass>::DifferentAtPosition()
000666:0x0025f2a0:	ncalli	array<@EPTHelperClass>.Count()
000666:0x0025f2a8:	move	@m00, #return
000666:0x0025f2b8:	ncalli	array<EPTHelperClass>.Count()
000666:0x0025f2c0:	cmpi	@m00, #return
000666:0x0025f2d0:	beq	0x25f300
000668:0x0025f2d8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0025f2e8:	imove	#return, 0xffffffff
000669:0x0025f2f8:	rts
000672:0x0025f300:	imove	i, 0x000000
000672:0x0025f310:	jump	0x25f320
000672:0x0025f318:	inc	i
000672:0x0025f320:	ncalli	array<EPTHelperClass>.Count()
000672:0x0025f328:	cmpi	i, #return
000672:0x0025f338:	bge	0x25f3a8
000674:0x0025f340:	icall	
000674:0x0025f350:	movec	@c00, #return
000674:0x0025f360:	icall	
000674:0x0025f370:	cmpc	@c00, #return
000674:0x0025f380:	beq	0x25f3a0
000676:0x0025f388:	move	#return, i
000676:0x0025f398:	rts
000676:0x0025f3a0:	jump	0x25f318
000680:0x0025f3a8:	imove	#return, 0xffffffff
000680:0x0025f3b8:	rts
000680:0x0025f3c0:	rts
EnProfilerTests::TestClassCountData()
//scripts/3_Game/systems\tftests\enprofilertests.c
000433:0x0025f5c0:	imove	remainingAmount, 0x000003
000436:0x0025f5d0:	call	RequestImmediateData()
000436:0x0025f5e0:	move	wasEnabled, #return
000439:0x0025f5f0:	call	StaticGetType(_T(EPTHelperClass))
000439:0x0025f600:	icall	GetAllocationsOfClass(#return, true)
000439:0x0025f610:	move	previousAlloc, #return
000440:0x0025f620:	call	StaticGetType(_T(EPTHelperClass))
000440:0x0025f630:	icall	GetInstancesOfClass(#return, true)
000440:0x0025f640:	move	previousInstances, #return
000442:0x0025f650:	new	instanceArr, array<@EPTHelperClass>
000443:0x0025f670:	imove	i, 0x000000
000443:0x0025f680:	jump	0x25f690
000443:0x0025f688:	inc	i
000443:0x0025f690:	cmpi	i, allocAmount
000443:0x0025f6a0:	bge	0x25f6f8
000445:0x0025f6a8:	new	@c00, EPTHelperClass
000445:0x0025f6c8:	pushc	@c00
000445:0x0025f6d0:	icall	
000445:0x0025f6e0:	popc	@c00
000445:0x0025f6e8:	release	@c00
000445:0x0025f6f0:	jump	0x25f688
000448:0x0025f6f8:	imove	j, 0x000000
000448:0x0025f708:	jump	0x25f718
000448:0x0025f710:	inc	j
000448:0x0025f718:	cmpi	j, releaseAmount
000448:0x0025f728:	bge	0x25f750
000450:0x0025f730:	icall	
000450:0x0025f740:	delete	#return
000450:0x0025f748:	jump	0x25f710
000453:0x0025f750:	call	StaticGetType(_T(EPTHelperClass))
000453:0x0025f760:	icall	GetAllocationsOfClass(#return, true)
000453:0x0025f770:	move	postAlloc, #return
000454:0x0025f780:	call	StaticGetType(_T(EPTHelperClass))
000454:0x0025f790:	icall	GetInstancesOfClass(#return, true)
000454:0x0025f7a0:	move	postInstances, #return
000456:0x0025f7b0:	subi	alloced, postAlloc, previousAlloc
000457:0x0025f7c0:	subi	instances, postInstances, previousInstances
000459:0x0025f7d0:	icall	Format(_s'Profiling result: alloc: %1 | instances: %2', alloced, instances, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000459:0x0025f800:	call	TFLog(#return, this, _s'TestClassCountData')
000462:0x0025f818:	cmpi	wasEnabled, _i0
000462:0x0025f828:	bne	0x25f848
000463:0x0025f830:	icall	Enable(false, true, _i1)
000466:0x0025f848:	cmpi	alloced, allocAmount
000466:0x0025f858:	bne	0x25f878
000466:0x0025f860:	imove	@m00, 0x000001
000466:0x0025f870:	jump	0x25f888
000466:0x0025f878:	imove	@m00, 0x000000
000466:0x0025f888:	call	
000466:0x0025f898:	cmpi	#return, _i0
000466:0x0025f8a8:	bne	0x25f8e8
000468:0x0025f8b0:	call	
000468:0x0025f8c0:	movem	#return, #return
000468:0x0025f8d0:	release	instanceArr
000468:0x0025f8d8:	release	#return
000468:0x0025f8e0:	rts
000471:0x0025f8e8:	cmpi	instances, remainingAmount
000471:0x0025f8f8:	bne	0x25f918
000471:0x0025f900:	imove	@m00, 0x000001
000471:0x0025f910:	jump	0x25f928
000471:0x0025f918:	imove	@m00, 0x000000
000471:0x0025f928:	call	
000471:0x0025f938:	cmpi	#return, _i0
000471:0x0025f948:	bne	0x25f988
000473:0x0025f950:	call	
000473:0x0025f960:	movem	#return, #return
000473:0x0025f970:	release	instanceArr
000473:0x0025f978:	release	#return
000473:0x0025f980:	rts
000476:0x0025f988:	call	
000476:0x0025f998:	movem	#return, #return
000476:0x0025f9a8:	release	instanceArr
000476:0x0025f9b0:	release	#return
000476:0x0025f9b8:	rts
000476:0x0025f9c0:	release	instanceArr
000476:0x0025f9c8:	rts
EnProfilerTests::TestFuncTimeData()
000484:0x0025fd10:	icall	GetTimeResolution()
000484:0x0025fd18:	move	resolution, #return
000485:0x0025fd28:	call	RequestImmediateData()
000485:0x0025fd38:	move	wasEnabled, #return
000488:0x0025fd48:	icall	SetTimeResolution(_i1)
000491:0x0025fd58:	ncall	Type(this)
000491:0x0025fd68:	icall	GetTimeOfFunc(_s'StringFormat', #return, true)
000491:0x0025fd80:	move	previousTime, #return
000492:0x0025fd90:	call	
000492:0x0025fda0:	move	timeStressed, #return
000493:0x0025fdb0:	ncall	Type(this)
000493:0x0025fdc0:	icall	GetTimeOfFunc(_s'StringFormat', #return, true)
000493:0x0025fdd8:	move	postTime, #return
000494:0x0025fde8:	subf	timeProfiled, postTime, previousTime
000495:0x0025fdf8:	subf	@f02, timeProfiled, timeStressed
000495:0x0025fe08:	move	@f01, @f02
000495:0x0025fe18:	icall	AbsFloat(@f01)
000495:0x0025fe28:	move	diff, #return
000497:0x0025fe38:	ncall	Type(this)
000497:0x0025fe48:	icall	GetTimeOfFunc(_s'StringConcat', #return, true)
000497:0x0025fe60:	move	previousTime2, #return
000498:0x0025fe70:	call	
000498:0x0025fe80:	move	timeStressed2, #return
000499:0x0025fe90:	ncall	Type(this)
000499:0x0025fea0:	icall	GetTimeOfFunc(_s'StringConcat', #return, true)
000499:0x0025feb8:	move	postTime2, #return
000500:0x0025fec8:	subf	timeProfiled2, postTime2, previousTime2
000501:0x0025fed8:	subf	@f02, timeProfiled2, timeStressed2
000501:0x0025fee8:	move	@f01, @f02
000501:0x0025fef8:	icall	AbsFloat(@f01)
000501:0x0025ff08:	move	diff2, #return
000503:0x0025ff18:	icall	Format(_s'Profiling result: StringFormat: %1 | StringConcat: %2', timeProfiled, timeProfiled2, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000503:0x0025ff48:	call	TFLog(#return, this, _s'TestFuncTimeData')
000506:0x0025ff60:	icall	SetTimeResolution(resolution)
000507:0x0025ff70:	cmpi	wasEnabled, _i0
000507:0x0025ff80:	bne	0x25ffa0
000509:0x0025ff88:	icall	Enable(false, true, _i1)
000513:0x0025ffa0:	cmpf	postTime, _f0.000000
000513:0x0025ffb0:	ble	0x25ffd0
000513:0x0025ffb8:	imove	@m00, 0x000001
000513:0x0025ffc8:	jump	0x25ffe0
000513:0x0025ffd0:	imove	@m00, 0x000000
000513:0x0025ffe0:	call	
000513:0x0025fff0:	cmpi	#return, _i0
000513:0x00260000:	bne	0x260038
000515:0x00260008:	call	
000515:0x00260018:	movem	#return, #return
000515:0x00260028:	release	#return
000515:0x00260030:	rts
000518:0x00260038:	cmpf	diff, _f0.001000
000518:0x00260048:	bge	0x260068
000518:0x00260050:	imove	@m00, 0x000001
000518:0x00260060:	jump	0x260078
000518:0x00260068:	imove	@m00, 0x000000
000518:0x00260078:	call	
000518:0x00260088:	cmpi	#return, _i0
000518:0x00260098:	bne	0x2600d0
000520:0x002600a0:	call	
000520:0x002600b0:	movem	#return, #return
000520:0x002600c0:	release	#return
000520:0x002600c8:	rts
000523:0x002600d0:	cmpf	postTime2, _f0.000000
000523:0x002600e0:	ble	0x260100
000523:0x002600e8:	imove	@m00, 0x000001
000523:0x002600f8:	jump	0x260110
000523:0x00260100:	imove	@m00, 0x000000
000523:0x00260110:	call	
000523:0x00260120:	cmpi	#return, _i0
000523:0x00260130:	bne	0x260168
000525:0x00260138:	call	
000525:0x00260148:	movem	#return, #return
000525:0x00260158:	release	#return
000525:0x00260160:	rts
000528:0x00260168:	cmpf	diff2, _f0.001000
000528:0x00260178:	bge	0x260198
000528:0x00260180:	imove	@m00, 0x000001
000528:0x00260190:	jump	0x2601a8
000528:0x00260198:	imove	@m00, 0x000000
000528:0x002601a8:	call	
000528:0x002601b8:	cmpi	#return, _i0
000528:0x002601c8:	bne	0x260200
000530:0x002601d0:	call	
000530:0x002601e0:	movem	#return, #return
000530:0x002601f0:	release	#return
000530:0x002601f8:	rts
000534:0x00260200:	cmpf	timeProfiled, timeProfiled2
000534:0x00260210:	bge	0x260230
000534:0x00260218:	imove	@m00, 0x000001
000534:0x00260228:	jump	0x260240
000534:0x00260230:	imove	@m00, 0x000000
000534:0x00260240:	call	
000534:0x00260250:	cmpi	#return, _i0
000534:0x00260260:	bne	0x260298
000536:0x00260268:	call	
000536:0x00260278:	movem	#return, #return
000536:0x00260288:	release	#return
000536:0x00260290:	rts
000539:0x00260298:	call	
000539:0x002602a8:	movem	#return, #return
000539:0x002602b8:	release	#return
000539:0x002602c0:	rts
000539:0x002602c8:	rts
EnProfilerTests::TestFuncCountData()
000547:0x00260d48:	call	RequestImmediateData()
000547:0x00260d58:	move	wasEnabled, #return
000552:0x00260d68:	ncall	Type(this)
000552:0x00260d78:	icall	GetCountOfFunc(_s'TestFuncCountDataHelper', #return, true)
000552:0x00260d90:	move	previousCountCF, #return
000553:0x00260da0:	ncall	GetGame()
000553:0x00260da8:	movec	@c00, #return
000553:0x00260db8:	movec	@c01, GameScript
000553:0x00260dc8:	icall	
000554:0x00260de0:	ncall	Type(this)
000554:0x00260df0:	icall	GetCountOfFunc(_s'TestFuncCountDataHelper', #return, true)
000554:0x00260e08:	move	postCountCF, #return
000556:0x00260e18:	subi	callCountCF, postCountCF, previousCountCF
000559:0x00260e28:	ncall	Type(this)
000559:0x00260e38:	icall	GetCountOfFunc(_s'TestFuncCountDataHelper', #return, true)
000559:0x00260e50:	move	previousCountCFP, #return
000560:0x00260e60:	ncall	GetGame()
000560:0x00260e68:	movec	@c00, #return
000560:0x00260e78:	movec	@c01, GameScript
000560:0x00260e88:	icall	
000561:0x00260ea0:	ncall	Type(this)
000561:0x00260eb0:	icall	GetCountOfFunc(_s'TestFuncCountDataHelper', #return, true)
000561:0x00260ec8:	move	postCountCFP, #return
000563:0x00260ed8:	subi	callCountCFP, postCountCFP, previousCountCFP
000566:0x00260ee8:	ncall	Type(this)
000566:0x00260ef8:	icall	GetCountOfFunc(_s'TestFuncCountDataHelper', #return, true)
000566:0x00260f10:	move	previousCountRG, #return
000567:0x00260f20:	call	
000568:0x00260f30:	ncall	Type(this)
000568:0x00260f40:	icall	GetCountOfFunc(_s'TestFuncCountDataHelper', #return, true)
000568:0x00260f58:	move	postCountRG, #return
000570:0x00260f68:	subi	callCountRG, postCountRG, previousCountRG
000573:0x00260f78:	ncall	Type(this)
000573:0x00260f88:	icall	GetCountOfFunc(_s'TestFuncCountDataHelper', #return, true)
000573:0x00260fa0:	move	previousCountC, #return
000574:0x00260fb0:	ncall	GetGame()
000574:0x00260fb8:	movec	@c00, #return
000574:0x00260fc8:	movec	@c01, GameScript
000574:0x00260fd8:	icall	
000575:0x00260ff0:	ncall	Type(this)
000575:0x00261000:	icall	GetCountOfFunc(_s'TestFuncCountDataHelper', #return, true)
000575:0x00261018:	move	postCountC, #return
000577:0x00261028:	subi	callCountC, postCountC, previousCountC
000580:0x00261038:	ncall	Type(this)
000580:0x00261048:	icall	GetCountOfFunc(_s'Non Existing Method', #return, true)
000580:0x00261060:	move	callCountNon, #return
000583:0x00261070:	ncall	Type(this)
000583:0x00261080:	icall	GetCountOfFunc(_s'TestFuncCountDataHelperStatic', #return, true)
000583:0x00261098:	move	previousCountS, #return
000584:0x002610a8:	call	TestFuncCountDataHelperStatic()
000585:0x002610b8:	ncall	Type(this)
000585:0x002610c8:	icall	GetCountOfFunc(_s'TestFuncCountDataHelperStatic', #return, true)
000585:0x002610e0:	move	postCountS, #return
000587:0x002610f0:	subi	callCountS, postCountS, previousCountS
000590:0x00261100:	icall	GetCountOfFuncG(_s'GetDayZGame', true)
000590:0x00261110:	move	previousCountG, #return
000591:0x00261120:	call	GetDayZGame()
000592:0x00261130:	icall	GetCountOfFuncG(_s'GetDayZGame', true)
000592:0x00261140:	move	postCountG, #return
000594:0x00261150:	subi	callCountG, postCountG, previousCountG
000598:0x00261160:	icall	ErrorEx(_s'Testing global proto call', _i0)
000599:0x00261170:	icall	GetCountOfFuncG(_s'ErrorEx', true)
000599:0x00261180:	move	callCountGP, #return
000603:0x00261190:	call	StaticGetType(_T(EnProfiler))
000603:0x002611a0:	icall	GetCountOfFunc(_s'GetCountOfFunc', #return, true)
000603:0x002611b8:	move	callCountSP, #return
000607:0x002611c8:	ncall	GetGame()
000607:0x002611d0:	icall	
000608:0x002611d8:	ncall	GetGame()
000608:0x002611e0:	ncall	Type(#return)
000608:0x002611f0:	icall	GetCountOfFunc(_s'GetHostName', #return, true)
000608:0x00261208:	move	callCountP, #return
000612:0x00261218:	ncall	GetGame()
000612:0x00261220:	ncalli	CGame.IsServer()
000613:0x00261228:	ncall	GetGame()
000613:0x00261230:	ncall	Type(#return)
000613:0x00261240:	icall	GetCountOfFunc(_s'IsServer', #return, true)
000613:0x00261258:	move	callCountPN, #return
000617:0x00261268:	ncall	GetInstance()
000618:0x00261270:	call	StaticGetType(_T(ErrorModuleHandler))
000618:0x00261280:	icall	GetCountOfFunc(_s'GetInstance', #return, true)
000618:0x00261298:	move	callCountSPN, #return
000621:0x002612a8:	cmpi	wasEnabled, _i0
000621:0x002612b8:	bne	0x2612d8
000623:0x002612c0:	icall	Enable(false, true, _i1)
000629:0x002612d8:	cmpi	callCountCF, _i1
000629:0x002612e8:	bne	0x261308
000629:0x002612f0:	imove	@m00, 0x000001
000629:0x00261300:	jump	0x261318
000629:0x00261308:	imove	@m00, 0x000000
000629:0x00261318:	call	
000629:0x00261328:	cmpi	#return, _i0
000629:0x00261338:	bne	0x261370
000631:0x00261340:	call	
000631:0x00261350:	movem	#return, #return
000631:0x00261360:	release	#return
000631:0x00261368:	rts
000635:0x00261370:	cmpi	callCountCFP, _i1
000635:0x00261380:	bne	0x2613a0
000635:0x00261388:	imove	@m00, 0x000001
000635:0x00261398:	jump	0x2613b0
000635:0x002613a0:	imove	@m00, 0x000000
000635:0x002613b0:	call	
000635:0x002613c0:	cmpi	#return, _i0
000635:0x002613d0:	bne	0x261408
000637:0x002613d8:	call	
000637:0x002613e8:	movem	#return, #return
000637:0x002613f8:	release	#return
000637:0x00261400:	rts
000641:0x00261408:	cmpi	callCountRG, _i1
000641:0x00261418:	bne	0x261438
000641:0x00261420:	imove	@m00, 0x000001
000641:0x00261430:	jump	0x261448
000641:0x00261438:	imove	@m00, 0x000000
000641:0x00261448:	call	
000641:0x00261458:	cmpi	#return, _i0
000641:0x00261468:	bne	0x2614a0
000643:0x00261470:	call	
000643:0x00261480:	movem	#return, #return
000643:0x00261490:	release	#return
000643:0x00261498:	rts
000647:0x002614a0:	cmpi	callCountC, _i1
000647:0x002614b0:	bne	0x2614d0
000647:0x002614b8:	imove	@m00, 0x000001
000647:0x002614c8:	jump	0x2614e0
000647:0x002614d0:	imove	@m00, 0x000000
000647:0x002614e0:	call	
000647:0x002614f0:	cmpi	#return, _i0
000647:0x00261500:	bne	0x261538
000649:0x00261508:	call	
000649:0x00261518:	movem	#return, #return
000649:0x00261528:	release	#return
000649:0x00261530:	rts
000653:0x00261538:	cmpi	callCountNon, _i-1
000653:0x00261548:	bne	0x261568
000653:0x00261550:	imove	@m00, 0x000001
000653:0x00261560:	jump	0x261578
000653:0x00261568:	imove	@m00, 0x000000
000653:0x00261578:	call	
000653:0x00261588:	cmpi	#return, _i0
000653:0x00261598:	bne	0x2615d0
000655:0x002615a0:	call	
000655:0x002615b0:	movem	#return, #return
000655:0x002615c0:	release	#return
000655:0x002615c8:	rts
000659:0x002615d0:	cmpi	callCountS, _i1
000659:0x002615e0:	bne	0x261600
000659:0x002615e8:	imove	@m00, 0x000001
000659:0x002615f8:	jump	0x261610
000659:0x00261600:	imove	@m00, 0x000000
000659:0x00261610:	call	
000659:0x00261620:	cmpi	#return, _i0
000659:0x00261630:	bne	0x261668
000661:0x00261638:	call	
000661:0x00261648:	movem	#return, #return
000661:0x00261658:	release	#return
000661:0x00261660:	rts
000665:0x00261668:	cmpi	callCountG, _i1
000665:0x00261678:	bne	0x261698
000665:0x00261680:	imove	@m00, 0x000001
000665:0x00261690:	jump	0x2616a8
000665:0x00261698:	imove	@m00, 0x000000
000665:0x002616a8:	call	
000665:0x002616b8:	cmpi	#return, _i0
000665:0x002616c8:	bne	0x261700
000667:0x002616d0:	call	
000667:0x002616e0:	movem	#return, #return
000667:0x002616f0:	release	#return
000667:0x002616f8:	rts
000671:0x00261700:	cmpi	callCountGP, _i0
000671:0x00261710:	bne	0x261730
000671:0x00261718:	imove	@m00, 0x000001
000671:0x00261728:	jump	0x261740
000671:0x00261730:	imove	@m00, 0x000000
000671:0x00261740:	call	
000671:0x00261750:	cmpi	#return, _i0
000671:0x00261760:	bne	0x261798
000673:0x00261768:	call	
000673:0x00261778:	movem	#return, #return
000673:0x00261788:	release	#return
000673:0x00261790:	rts
000677:0x00261798:	cmpi	callCountSP, _i0
000677:0x002617a8:	bne	0x2617c8
000677:0x002617b0:	imove	@m00, 0x000001
000677:0x002617c0:	jump	0x2617d8
000677:0x002617c8:	imove	@m00, 0x000000
000677:0x002617d8:	call	
000677:0x002617e8:	cmpi	#return, _i0
000677:0x002617f8:	bne	0x261830
000679:0x00261800:	call	
000679:0x00261810:	movem	#return, #return
000679:0x00261820:	release	#return
000679:0x00261828:	rts
000683:0x00261830:	cmpi	callCountP, _i0
000683:0x00261840:	bne	0x261860
000683:0x00261848:	imove	@m00, 0x000001
000683:0x00261858:	jump	0x261870
000683:0x00261860:	imove	@m00, 0x000000
000683:0x00261870:	call	
000683:0x00261880:	cmpi	#return, _i0
000683:0x00261890:	bne	0x2618c8
000685:0x00261898:	call	
000685:0x002618a8:	movem	#return, #return
000685:0x002618b8:	release	#return
000685:0x002618c0:	rts
000689:0x002618c8:	cmpi	callCountPN, _i0
000689:0x002618d8:	bne	0x2618f8
000689:0x002618e0:	imove	@m00, 0x000001
000689:0x002618f0:	jump	0x261908
000689:0x002618f8:	imove	@m00, 0x000000
000689:0x00261908:	call	
000689:0x00261918:	cmpi	#return, _i0
000689:0x00261928:	bne	0x261960
000691:0x00261930:	call	
000691:0x00261940:	movem	#return, #return
000691:0x00261950:	release	#return
000691:0x00261958:	rts
000695:0x00261960:	cmpi	callCountSPN, _i0
000695:0x00261970:	bne	0x261990
000695:0x00261978:	imove	@m00, 0x000001
000695:0x00261988:	jump	0x2619a0
000695:0x00261990:	imove	@m00, 0x000000
000695:0x002619a0:	call	
000695:0x002619b0:	cmpi	#return, _i0
000695:0x002619c0:	bne	0x2619f8
000697:0x002619c8:	call	
000697:0x002619d8:	movem	#return, #return
000697:0x002619e8:	release	#return
000697:0x002619f0:	rts
000700:0x002619f8:	call	
000700:0x00261a08:	movem	#return, #return
000700:0x00261a18:	release	#return
000700:0x00261a20:	rts
000700:0x00261a28:	rts
EnProfilerTests::Sleep()
000709:0x00261a88:	ncall	GetGame()
000709:0x00261a90:	ncalli	CGame.GetTickTime()
000709:0x00261a98:	move	startTime, #return
000710:0x00261aa8:	ncall	GetGame()
000710:0x00261ab0:	ncalli	CGame.GetTickTime()
000710:0x00261ab8:	subf	@f01, #return, startTime
000710:0x00261ac8:	move	@f00, @f01
000710:0x00261ad8:	cmpf	@f00, timeS
000710:0x00261ae8:	bge	0x261af8
000710:0x00261af0:	jump	0x261aa8
000715:0x00261af8:	ncall	GetGame()
000715:0x00261b00:	ncalli	CGame.GetTickTime()
000715:0x00261b08:	subf	#return, #return, startTime
000715:0x00261b18:	rts
000715:0x00261b20:	rts
EnProfilerTests::StringFormat()
000722:0x00261c18:	ncall	GetGame()
000722:0x00261c20:	ncalli	CGame.GetTickTime()
000722:0x00261c28:	move	startTime, #return
000724:0x00261c38:	imove	i, 0x000000
000724:0x00261c48:	jump	0x261c58
000724:0x00261c50:	inc	i
000724:0x00261c58:	cmpi	i, _i1000
000724:0x00261c68:	bge	0x261cc8
000726:0x00261c70:	ncall	Type(this)
000726:0x00261c80:	icall	Format(_s'This %1 is %2 just %3 an %4 example %5', i, #return, this, startTime, _s'lorem ipsum 1 2 3', _c0, _c0, _c0, _c0)
000726:0x00261cb0:	moves	example, #return
000726:0x00261cc0:	jump	0x261c50
000729:0x00261cc8:	ncall	GetGame()
000729:0x00261cd0:	ncalli	CGame.GetTickTime()
000729:0x00261cd8:	subf	#return, #return, startTime
000729:0x00261ce8:	rts
000729:0x00261cf0:	rts
EnProfilerTests::StringConcat()
000736:0x00261e38:	ncall	GetGame()
000736:0x00261e40:	ncalli	CGame.GetTickTime()
000736:0x00261e48:	move	startTime, #return
000738:0x00261e58:	imove	i, 0x000000
000738:0x00261e68:	jump	0x261e78
000738:0x00261e70:	inc	i
000738:0x00261e78:	cmpi	i, _i1000
000738:0x00261e88:	bge	0x261ff8
000740:0x00261e90:	icall	ToString(i)
000740:0x00261ea0:	adds	@s08, _s'This ', #return
000740:0x00261eb0:	moves	@s07, @s08
000740:0x00261ec0:	adds	@s07, @s07, _s' is '
000740:0x00261ed0:	moves	@s06, @s07
000740:0x00261ee0:	ncall	Type(this)
000740:0x00261ef0:	ncall	ToString(#return)
000740:0x00261f00:	adds	@s06, @s06, #return
000740:0x00261f10:	moves	@s05, @s06
000740:0x00261f20:	adds	@s05, @s05, _s' just '
000740:0x00261f30:	moves	@s04, @s05
000740:0x00261f40:	icall	ToString(this)
000740:0x00261f50:	adds	@s04, @s04, #return
000740:0x00261f60:	moves	@s03, @s04
000740:0x00261f70:	adds	@s03, @s03, _s' an '
000740:0x00261f80:	moves	@s02, @s03
000740:0x00261f90:	icall	ToString(startTime)
000740:0x00261fa0:	adds	@s02, @s02, #return
000740:0x00261fb0:	moves	@s01, @s02
000740:0x00261fc0:	adds	@s01, @s01, _s' example '
000740:0x00261fd0:	moves	@s00, @s01
000740:0x00261fe0:	adds	example, @s00, _s'lorem ipsum 1 2 3'
000740:0x00261ff0:	jump	0x261e70
000743:0x00261ff8:	ncall	GetGame()
000743:0x00262000:	ncalli	CGame.GetTickTime()
000743:0x00262008:	subf	#return, #return, startTime
000743:0x00262018:	rts
000743:0x00262020:	rts
EnProfilerTests::TestFuncCountDataHelper()
000750:0x00262050:	imove	dummy, 0x000003
000750:0x00262060:	rts
EnProfilerTests::TestFuncCountDataHelperStatic()
000757:0x00262090:	imove	dummy, 0x000003
000757:0x002620a0:	rts
EPTHelperClass::Sleep2()
000765:0x002620d0:	ncall	GetGame()
000765:0x002620d8:	ncalli	CGame.GetTickTime()
000765:0x002620e0:	move	startTime, #return
000766:0x002620f0:	ncall	GetGame()
000766:0x002620f8:	ncalli	CGame.GetTickTime()
000766:0x00262100:	subf	@f01, #return, startTime
000766:0x00262110:	move	@f00, @f01
000766:0x00262120:	cmpf	@f00, timeS
000766:0x00262130:	bge	0x262140
000766:0x00262138:	jump	0x2620f0
000771:0x00262140:	ncall	GetGame()
000771:0x00262148:	ncalli	CGame.GetTickTime()
000771:0x00262150:	subf	#return, #return, startTime
000771:0x00262160:	rts
000771:0x00262168:	rts
EPTHelperClass::SleepAgain()
000775:0x00262198:	ncall	GetGame()
000775:0x002621a0:	ncalli	CGame.GetTickTime()
000775:0x002621a8:	move	startTime, #return
000776:0x002621b8:	ncall	GetGame()
000776:0x002621c0:	ncalli	CGame.GetTickTime()
000776:0x002621c8:	subf	@f01, #return, startTime
000776:0x002621d8:	move	@f00, @f01
000776:0x002621e8:	cmpf	@f00, timeS
000776:0x002621f8:	bge	0x262208
000776:0x00262200:	jump	0x2621b8
000781:0x00262208:	ncall	GetGame()
000781:0x00262210:	ncalli	CGame.GetTickTime()
000781:0x00262218:	subf	#return, #return, startTime
000781:0x00262228:	rts
000781:0x00262230:	rts
EPTHelperClass::DoEverything()
000786:0x00262260:	ncall	GetGame()
000786:0x00262268:	ncalli	CGame.GetTickTime()
000786:0x00262270:	move	startTime, #return
000788:0x00262280:	call	
000789:0x00262290:	call	
000791:0x002622a0:	ncall	GetGame()
000791:0x002622a8:	ncalli	CGame.GetTickTime()
000791:0x002622b0:	subf	#return, #return, startTime
000791:0x002622c0:	rts
000791:0x002622c8:	rts
ComponentEntityDebug::DebugBBoxDraw()
//scripts/3_Game/tools\component\componententitydebug.c
000012:0x002623a0:	movec	#return, null
000012:0x002623b0:	rts
000015:0x002623b8:	cmpc	m_DebugShapeBBox, null
000015:0x002623c8:	beq	0x2623e8
000016:0x002623d0:	movec	[0xd3136b20], m_DebugShapeBBox
000016:0x002623e0:	ncalli	Shape.Destroy()
000020:0x002623e8:	movefm	[0xb5b25dc0], m_ThisEntityAI
000020:0x002623f8:	ncalli	EntityAI.GetCollisionBox(min_max)
000020:0x00262408:	cmpi	#return, _i0
000020:0x00262418:	bne	0x262438
000021:0x00262420:	movec	#return, null
000021:0x00262430:	rts
000023:0x00262438:	cfv	@v00, min_max[_i0]
000023:0x00262448:	cfv	@v01, min_max[_i1]
000023:0x00262458:	call	DrawBox(@v00, @v01, _i536838015)
000023:0x00262470:	movec	m_DebugShapeBBox, #return
000025:0x00262480:	ncall	GetGame()
000025:0x00262488:	call	
000025:0x00262498:	icall	SetInstance([0xb5d60378], this)
000025:0x002624a8:	icall	
000025:0x002624e0:	release	#return
000027:0x002624e8:	movefm	[0xd3173d08], m_ThisEntityAI
000027:0x002624f8:	ncall	SetEventMask([0xd3173d08], _i16)
000029:0x00262508:	movec	#return, null
000029:0x00262518:	rts
000029:0x00262520:	rts
ComponentEntityDebug::DebugBBoxSetColor()
000035:0x00262528:	cmpc	m_DebugShapeBBox, null
000035:0x00262538:	beq	0x262560
000037:0x00262540:	movec	[0xd3136b20], m_DebugShapeBBox
000037:0x00262550:	ncalli	Shape.SetColor(color)
000037:0x00262560:	rts
ComponentEntityDebug::DebugBBoxDelete()
000045:0x002625a8:	rts
000048:0x002625b0:	cmpc	m_DebugShapeBBox, null
000048:0x002625c0:	beq	0x2625f0
000050:0x002625c8:	movec	[0xd3136b20], m_DebugShapeBBox
000050:0x002625d8:	ncalli	Shape.Destroy()
000051:0x002625e0:	movec	m_DebugShapeBBox, null
000054:0x002625f0:	cmpc	m_DebugShapeDirection, null
000054:0x00262600:	bne	0x262660
000054:0x00262608:	cmpc	m_DebugShapeBBox, null
000054:0x00262618:	bne	0x262660
000056:0x00262620:	ncall	GetGame()
000056:0x00262628:	call	
000056:0x00262638:	icall	SetInstance([0xb5d605a8], this)
000056:0x00262648:	icall	
000056:0x00262658:	release	#return
000056:0x00262660:	rts
ComponentEntityDebug::DebugDirectionDraw()
000064:0x00262750:	movec	#return, null
000064:0x00262760:	rts
000067:0x00262768:	cmpc	m_DebugShapeDirection, null
000067:0x00262778:	beq	0x262798
000069:0x00262780:	movec	[0xd3136b20], m_DebugShapeDirection
000069:0x00262790:	ncalli	Shape.Destroy()
000072:0x00262798:	movev	p1, _v<0.000000,0.000000,0.000000>
000073:0x002627a8:	movefm	[0xb5b25dc0], m_ThisEntityAI
000073:0x002627b8:	ncalli	EntityAI.GetDirection()
000073:0x002627c0:	scalev	p2, #return, m_DebugShapeDirectionDist
000074:0x002627d0:	move	m_DebugShapeDirectionDist, distance
000075:0x002627e0:	call	DrawArrow(p1, p2, _f0.500000, _i-1, _i0)
000075:0x00262800:	movec	m_DebugShapeDirection, #return
000077:0x00262810:	ncall	GetGame()
000077:0x00262818:	call	
000077:0x00262828:	icall	SetInstance([0xb5d60750], this)
000077:0x00262838:	icall	
000077:0x00262870:	release	#return
000079:0x00262878:	movefm	[0xd3173d08], m_ThisEntityAI
000079:0x00262888:	ncall	SetEventMask([0xd3173d08], _i16)
000080:0x00262898:	movec	#return, null
000080:0x002628a8:	rts
000080:0x002628b0:	rts
ComponentEntityDebug::DebugDirectionDelete()
000087:0x002628f8:	rts
000090:0x00262900:	cmpc	m_DebugShapeDirection, null
000090:0x00262910:	beq	0x262940
000092:0x00262918:	movec	[0xd3136b20], m_DebugShapeDirection
000092:0x00262928:	ncalli	Shape.Destroy()
000093:0x00262930:	movec	m_DebugShapeDirection, null
000096:0x00262940:	cmpc	m_DebugShapeDirection, null
000096:0x00262950:	bne	0x2629b0
000096:0x00262958:	cmpc	m_DebugShapeBBox, null
000096:0x00262968:	bne	0x2629b0
000098:0x00262970:	ncall	GetGame()
000098:0x00262978:	call	
000098:0x00262988:	icall	SetInstance([0xb5d608f8], this)
000098:0x00262998:	icall	
000098:0x002629a8:	release	#return
000098:0x002629b0:	rts
ComponentEntityDebug::OnDrawing()
000105:0x00262a10:	rts
000108:0x00262a18:	cmpc	m_DebugShapeBBox, null
000108:0x00262a28:	bne	0x262a48
000108:0x00262a30:	cmpc	m_DebugShapeDirection, null
000108:0x00262a40:	beq	0x262ac8
000111:0x00262a48:	icall	GetTransform(m_ThisEntityAI, mat)
000113:0x00262a58:	cmpc	m_DebugShapeBBox, null
000113:0x00262a68:	beq	0x262a90
000115:0x00262a70:	movec	[0xd3136b20], m_DebugShapeBBox
000115:0x00262a80:	ncalli	Shape.SetMatrix(mat)
000118:0x00262a90:	cmpc	m_DebugShapeDirection, null
000118:0x00262aa0:	beq	0x262ac8
000120:0x00262aa8:	movec	[0xd3136b20], m_DebugShapeDirection
000120:0x00262ab8:	ncalli	Shape.SetMatrix(mat)
000120:0x00262ac8:	rts
HandTakingAnimated_Show::HandTakingAnimated_Show()
//scripts/3_Game/systems\inventory\handanimatedtakingfromatt.c
000011:0x00262ad0:	movetm	m_Src, null
000012:0x00262ae0:	movetm	m_Dst, null
000012:0x00262af0:	rts
HandTakingAnimated_Show::OnEntry()
000017:0x00262b48:	call	
000019:0x00262b58:	cmpcm	m_Src, null
000019:0x00262b68:	beq	0x262d08
000021:0x00262b70:	movefm	[0xb5b18280], m_Src
000021:0x00262b80:	ncalli	InventoryLocation.IsValid()
000021:0x00262b88:	cmpi	#return, _i0
000021:0x00262b98:	beq	0x262c08
000032:0x00262ba0:	movefm	[0xb5badea8], m_Src
000032:0x00262bb0:	movefm	[0xb5baded0], m_Dst
000032:0x00262bc0:	ncall	LocationSyncMoveEntity([0xb5badea8], [0xb5baded0])
000033:0x00262bd0:	movefm	@c00, e
000033:0x00262be0:	movefm	[0xb5b2afc0], m_Player
000033:0x00262bf0:	call	
000033:0x00262c00:	jump	0x262d00
000042:0x00262c08:	movefm	@c00, e
000042:0x00262c18:	movem	o, m_Player
000042:0x00262c28:	call	GetDebugName#206374(o)
000042:0x00262c38:	adds	@s04, _s'[hndfsm] ', #return
000042:0x00262c48:	moves	@s03, @s04
000042:0x00262c58:	adds	@s03, @s03, _s' STS = '
000042:0x00262c68:	moves	@s02, @s03
000042:0x00262c78:	movefm	@c01, e
000042:0x00262c88:	movefm	[0xb5b2afc0], m_Player
000042:0x00262c98:	ncalli	DayZPlayer.GetSimulationTimeStamp()
000042:0x00262ca0:	icall	ToString(#return)
000042:0x00262cb0:	adds	@s02, @s02, #return
000042:0x00262cc0:	moves	@s01, @s02
000042:0x00262cd0:	adds	@s01, @s01, _s' HandTakingAnimated_Show m_Src=invalid, item not in bubble?'
000042:0x00262ce0:	moves	@s00, @s01
000042:0x00262cf0:	call	Error(@s00)
000042:0x00262d00:	jump	0x262d18
000046:0x00262d08:	call	Error(_s'[hndfsm] HandTakingAnimated_Show, error - m_Src not configured')
000046:0x00262d18:	rts
HandTakingAnimated_Show::OnAbort()
000051:0x00262d20:	movetm	m_Src, null
000052:0x00262d30:	movetm	m_Dst, null
000053:0x00262d40:	call	
000053:0x00262d50:	rts
HandTakingAnimated_Show::OnExit()
000058:0x00262d58:	movetm	m_Src, null
000059:0x00262d68:	movetm	m_Dst, null
000060:0x00262d78:	call	
000060:0x00262d88:	rts
HandTakingAnimated_Show::IsWaitingForActionFinish()
000063:0x00262d90:	imove	#return, 0x000001
000063:0x00262da0:	rts
000063:0x00262da8:	rts
HandAnimatedTakingFromAtt::HandAnimatedTakingFromAtt()
000077:0x00262e50:	new	m_Hide, HandTakingAnimated_Hide
000078:0x00262e80:	new	m_Show, HandTakingAnimated_Show
000081:0x00262eb0:	new	_fin_, HandEventHumanCommandActionFinished
000082:0x00262ed8:	new	_AEh_, HandAnimEventChanged
000083:0x00262f00:	new	__Xd_, HandEventDestroyed
000085:0x00262f28:	new	m_FSM, HandFSM
000087:0x00262f50:	movem	src, m_Hide
000087:0x00262f60:	movem	dst, m_Show
000087:0x00262f70:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000087:0x00262fa8:	pushc	@c00
000087:0x00262fb0:	movefm	[0xb5b3f2a8], m_FSM
000087:0x00262fc0:	call	
000087:0x00262fd0:	popc	@c00
000087:0x00262fd8:	release	@c00
000088:0x00262fe0:	movem	src, m_Hide
000088:0x00262ff0:	movetm	dst, null
000088:0x00263000:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000088:0x00263038:	pushc	@c00
000088:0x00263040:	movefm	[0xb5b3f2a8], m_FSM
000088:0x00263050:	call	
000088:0x00263060:	popc	@c00
000088:0x00263068:	release	@c00
000089:0x00263070:	movem	src, m_Show
000089:0x00263080:	movetm	dst, null
000089:0x00263090:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000089:0x002630c8:	pushc	@c00
000089:0x002630d0:	movefm	[0xb5b3f2a8], m_FSM
000089:0x002630e0:	call	
000089:0x002630f0:	popc	@c00
000089:0x002630f8:	release	@c00
000090:0x00263100:	movem	src, m_Show
000090:0x00263110:	movetm	dst, null
000090:0x00263120:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000090:0x00263158:	pushc	@c00
000090:0x00263160:	movefm	[0xb5b3f2a8], m_FSM
000090:0x00263170:	call	
000090:0x00263180:	popc	@c00
000090:0x00263188:	release	@c00
000092:0x00263190:	movem	initial_state, m_Hide
000092:0x002631a0:	movefm	[0xb5b3f2a8], m_FSM
000092:0x002631b0:	call	
000092:0x002631c0:	release	_fin_
000092:0x002631c8:	release	_AEh_
000092:0x002631d0:	release	__Xd_
000092:0x002631d8:	rts
HandAnimatedTakingFromAtt::OnEntry()
000097:0x002631e0:	call	
000097:0x002631f0:	movem	m_Dst, #return
000097:0x00263200:	release	#return
000098:0x00263208:	movefm	[0xb5b36140], m_Show
000098:0x00263218:	movec	@c00, [0xb5b36140]
000098:0x00263228:	call	
000098:0x00263238:	movem	m_Src, #return
000098:0x00263248:	release	#return
000099:0x00263250:	movefm	[0xb5b36140], m_Show
000099:0x00263260:	movec	@c00, [0xb5b36140]
000099:0x00263270:	call	
000099:0x00263280:	movem	m_Dst, #return
000099:0x00263290:	release	#return
000101:0x00263298:	movefm	[0xb5b3d768], m_Hide
000101:0x002632a8:	movec	@c00, [0xb5b3d768]
000101:0x002632b8:	call	
000101:0x002632c8:	move	m_ActionType, #return
000102:0x002632d8:	movefm	[0xb5b36140], m_Show
000102:0x002632e8:	movec	@c00, [0xb5b36140]
000102:0x002632f8:	call	
000102:0x00263308:	move	m_ActionType, #return
000104:0x00263318:	movefm	@c00, e
000104:0x00263328:	movefm	[0xb5b2afc0], m_Player
000104:0x00263338:	call	
000104:0x00263348:	movefm	[0xb5b18280], m_Dst
000104:0x00263358:	ncalli	InventoryLocation.GetItem()
000104:0x00263360:	movem	dst, m_Dst
000104:0x00263370:	call	
000104:0x00263388:	release	#return
000106:0x00263390:	call	
000106:0x002633a0:	rts
HandAnimatedTakingFromAtt::OnAbort()
000117:0x002633a8:	movefm	@c00, e
000117:0x002633b8:	movefm	[0xb5b2afc0], m_Player
000117:0x002633c8:	call	
000117:0x002633d8:	movefm	[0xb5b18280], m_Dst
000117:0x002633e8:	ncalli	InventoryLocation.GetItem()
000117:0x002633f0:	movem	dst, m_Dst
000117:0x00263400:	call	
000117:0x00263418:	release	#return
000118:0x00263420:	ncall	GetGame()
000118:0x00263428:	ncalli	CGame.IsServer()
000118:0x00263430:	cmpi	#return, _i0
000118:0x00263440:	beq	0x263498
000119:0x00263448:	ncall	GetGame()
000119:0x00263450:	movefm	@c01, e
000119:0x00263460:	movefm	[0xb5bdb770], m_Player
000119:0x00263470:	movefm	[0xb5b18280], m_Dst
000119:0x00263480:	ncalli	InventoryLocation.GetItem()
000119:0x00263488:	ncalli	CGame.ClearJuncture([0xb5bdb770], #return)
000120:0x00263498:	movetm	m_Dst, null
000122:0x002634a8:	call	
000122:0x002634b8:	rts
HandAnimatedTakingFromAtt::OnExit()
000127:0x002634c0:	movefm	@c00, e
000127:0x002634d0:	movefm	[0xb5b2afc0], m_Player
000127:0x002634e0:	call	
000127:0x002634f0:	movefm	[0xb5b18280], m_Dst
000127:0x00263500:	ncalli	InventoryLocation.GetItem()
000127:0x00263508:	movem	dst, m_Dst
000127:0x00263518:	call	
000127:0x00263530:	release	#return
000128:0x00263538:	movetm	m_Dst, null
000130:0x00263548:	call	
000130:0x00263558:	rts
InventoryItemType::InventoryItemType()
//scripts/3_Game/inventoryitemtype.c
000007:0x00263560:	call	
000007:0x00263570:	rts
InventoryItemType::LoadSoundEvents()
000014:0x002636b8:	ncalli	InventoryItemType.GetName()
000014:0x002636c0:	adds	@s01, _s'CfgVehicles ', #return
000014:0x002636d0:	moves	@s00, @s01
000014:0x002636e0:	adds	cfgPath, @s00, _s' AnimEvents SoundWeapon'
000016:0x002636f0:	new	m_animSoundEvents, array<@AnimSoundEvent>
000018:0x00263710:	ncall	GetGame()
000018:0x00263718:	ncalli	CGame.ConfigGetChildrenCount(cfgPath)
000018:0x00263728:	move	soundCount, #return
000020:0x00263738:	cmpi	soundCount, _i0
000020:0x00263748:	bgt	0x2637c0
000022:0x00263750:	ncalli	InventoryItemType.GetName()
000022:0x00263758:	adds	@s01, _s'CfgWeapons ', #return
000022:0x00263768:	moves	@s00, @s01
000022:0x00263778:	adds	@s00, @s00, _s' AnimEvents SoundWeapon'
000022:0x00263788:	moves	cfgPath, @s00
000023:0x00263798:	ncall	GetGame()
000023:0x002637a0:	ncalli	CGame.ConfigGetChildrenCount(cfgPath)
000023:0x002637b0:	move	soundCount, #return
000026:0x002637c0:	cmpi	soundCount, _i0
000026:0x002637d0:	bgt	0x263848
000028:0x002637d8:	ncalli	InventoryItemType.GetName()
000028:0x002637e0:	adds	@s01, _s'CfgMagazines ', #return
000028:0x002637f0:	moves	@s00, @s01
000028:0x00263800:	adds	@s00, @s00, _s' AnimEvents SoundWeapon'
000028:0x00263810:	moves	cfgPath, @s00
000029:0x00263820:	ncall	GetGame()
000029:0x00263828:	ncalli	CGame.ConfigGetChildrenCount(cfgPath)
000029:0x00263838:	move	soundCount, #return
000032:0x00263848:	cmpi	soundCount, _i0
000032:0x00263858:	bgt	0x2638d0
000034:0x00263860:	ncalli	InventoryItemType.GetName()
000034:0x00263868:	adds	@s01, _s'CfgAmmo ', #return
000034:0x00263878:	moves	@s00, @s01
000034:0x00263888:	adds	@s00, @s00, _s' AnimEvents SoundWeapon'
000034:0x00263898:	moves	cfgPath, @s00
000035:0x002638a8:	ncall	GetGame()
000035:0x002638b0:	ncalli	CGame.ConfigGetChildrenCount(cfgPath)
000035:0x002638c0:	move	soundCount, #return
000038:0x002638d0:	imove	i, 0x000000
000038:0x002638e0:	jump	0x263900
000038:0x002638e8:	move	@m00, i
000038:0x002638f8:	inc	i
000038:0x00263900:	cmpi	i, soundCount
000038:0x00263910:	bge	0x263a18
000041:0x00263918:	ncall	GetGame()
000041:0x00263920:	icall	
000042:0x00263938:	adds	@s02, cfgPath, _s' '
000042:0x00263948:	moves	@s01, @s02
000042:0x00263958:	adds	@s01, @s01, soundName
000042:0x00263968:	moves	@s00, @s01
000042:0x00263978:	adds	soundPath, @s00, _s' '
000043:0x00263988:	new	soundEvent, AnimSoundEvent
000044:0x002639b0:	call	
000044:0x002639c0:	cmpi	#return, _i0
000044:0x002639d0:	beq	0x263a08
000045:0x002639d8:	movefm	@c00, soundEvent
000045:0x002639e8:	movefm	[0xb5b8df98], m_animSoundEvents
000045:0x002639f8:	icall	
000045:0x00263a08:	release	soundEvent
000045:0x00263a10:	jump	0x2638e8
000045:0x00263a18:	rts
InventoryItemType::GetSoundEvent()
000052:0x00263ac0:	movem	#array, m_animSoundEvents
000052:0x00263ad0:	ncalli	array<@AnimSoundEvent>.Count()
000052:0x00263ad8:	move	#cnt, #return
000052:0x00263ae8:	imove	#key, 0x000000
000052:0x00263af8:	jump	0x263b08
000052:0x00263b00:	inc	#key
000052:0x00263b08:	cmpi	#key, #cnt
000052:0x00263b18:	bge	0x263b98
000052:0x00263b20:	icall	
000052:0x00263b30:	movetm	soundEvent, #return
000054:0x00263b40:	movefm	@c00, soundEvent
000054:0x00263b50:	cmpi	m_iID, event_id
000054:0x00263b60:	bne	0x263b90
000055:0x00263b68:	movem	#return, soundEvent
000055:0x00263b78:	release	#array
000055:0x00263b80:	release	soundEvent
000055:0x00263b88:	rts
000055:0x00263b90:	jump	0x263b00
000055:0x00263b98:	release	#array
000055:0x00263ba0:	release	soundEvent
000058:0x00263ba8:	movetm	#return, null
000058:0x00263bb8:	rts
000058:0x00263bc0:	rts
Hit_MeatBones::Hit_MeatBones()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_meatbones.c
000007:0x00263bf0:	call	
000008:0x00263c00:	call	
000009:0x00263c10:	call	
000011:0x00263c20:	imove	m_AngledEnter, 10.00000
000012:0x00263c30:	imove	m_EnterSplashCoef, 0.00200
000013:0x00263c40:	imove	m_ExitSplashCoef, 0.00600
000014:0x00263c50:	imove	m_ScalingByDistance, 0.05000
000016:0x00263c60:	imove	MIN_SCALING_PARAM, 0.20000
000016:0x00263c70:	rts
Hit_MeatBones::CalculateStoppingForce()
000021:0x00263d58:	cmpi	m_ImpactType, MELEE
000021:0x00263d68:	bne	0x263d88
000023:0x00263d70:	imove	#return, 400.00000
000023:0x00263d80:	rts
000026:0x00263d88:	divf	projectile_weight_coef, weight, DEFAULT_PROJECTILE_WEIGHT
000028:0x00263d98:	mulf	stopping_force, in_speedf, projectile_weight_coef
000030:0x00263da8:	cmpcm	m_DirectHit, null
000030:0x00263db8:	beq	0x263dc0
000048:0x00263dc0:	move	#return, stopping_force
000048:0x00263dd0:	rts
000048:0x00263dd8:	rts
Hit_MeatBones::Event_OnStarted()
000053:0x00263e48:	call	
000055:0x00263e58:	cmpi	m_ImpactType, MELEE
000055:0x00263e68:	beq	0x263f28
000057:0x00263e70:	scalev	in_speed, m_InSpeed, _f-1.000000
000059:0x00263e80:	call	
000059:0x00263e90:	call	
000061:0x00263ea8:	movev	[0xd315e360], m_OutSpeed
000061:0x00263eb8:	ncall	Length([0xd315e360])
000061:0x00263ec8:	move	@f00, #return
000061:0x00263ed8:	cmpf	@f00, _f0.000000
000061:0x00263ee8:	ble	0x263f28
000063:0x00263ef0:	movev	start_pos, m_ExitPos
000063:0x00263f00:	movev	speed_vector, m_OutSpeed
000063:0x00263f10:	call	
000063:0x00263f28:	rts
Hit_MeatBones::BloodSplatGround()
000070:0x00264198:	movev	pos, start_pos
000071:0x002641a8:	move	power, m_StoppingForce
000072:0x002641b8:	imove	upscale, 1.00000
000073:0x002641c8:	imove	rnd_offset, 0.50000
000074:0x002641d8:	mulf	rnd_offset_2, rnd_offset, _f0.500000
000076:0x002641e8:	cmpf	power, _f200.000000
000076:0x002641f8:	ble	0x2644e0
000078:0x00264200:	scalev	@v01, speed_vector, _f0.001000
000078:0x00264210:	movev	@v00, @v01
000078:0x00264220:	addv	@v00, pos, @v00
000078:0x00264230:	movev	pos, @v00
000079:0x00264240:	icall	RandomFloat(_f0.000000, rnd_offset)
000079:0x00264250:	subf	@f01, rnd_offset_2, #return
000079:0x00264260:	move	@f00, @f01
000079:0x00264270:	icall	RandomFloat(_f0.000000, rnd_offset)
000079:0x00264280:	subf	@f02, rnd_offset_2, #return
000079:0x00264290:	move	@f01, @f02
000079:0x002642a0:	ncall	Vector(@f00, _f0.000000, @f01)
000079:0x002642b8:	addv	@v00, pos, #return
000079:0x002642c8:	movev	pos, @v00
000080:0x002642d8:	ncall	GetGame()
000080:0x002642e0:	ifv	@f01, pos[0x000000]
000080:0x002642f0:	ifv	@f02, pos[0x000002]
000080:0x00264300:	ncalli	CGame.SurfaceY(@f01, @f02)
000080:0x00264310:	itv	pos[0x000001], #return
000082:0x00264320:	new	eff, BloodSplatter
000083:0x00264340:	call	
000084:0x00264350:	call	PlayInWorld(eff, pos)
000086:0x00264368:	call	
000086:0x00264378:	movem	blood, #return
000086:0x00264388:	release	#return
000088:0x00264390:	ncall	GetGame()
000088:0x00264398:	ifv	@f00, pos[0x000000]
000088:0x002643a8:	ifv	@f01, pos[0x000002]
000088:0x002643b8:	call	
000088:0x002643d0:	movev	ori, #return
000090:0x002643e0:	ncalli	Particle.SetOrientation(ori)
000091:0x002643f0:	call	
000093:0x00264408:	call	GetInstance()
000093:0x00264418:	call	
000093:0x00264430:	movem	blood_chunks, #return
000093:0x00264440:	release	#return
000093:0x00264448:	release	#return
000094:0x00264450:	ncalli	Particle.SetOrientation(ori)
000096:0x00264460:	mulf	@f00, power, decay_coef
000096:0x00264470:	move	power, @f00
000097:0x00264480:	icall	RandomFloat(_f0.100000, _f1.000000)
000097:0x00264490:	addf	@f00, upscale, #return
000097:0x002644a0:	move	upscale, @f00
000099:0x002644b0:	call	
000099:0x002644c0:	release	eff
000099:0x002644c8:	release	blood
000099:0x002644d0:	release	blood_chunks
000099:0x002644d8:	jump	0x2641e8
000099:0x002644e0:	rts
Hit_MeatBones::OnEnterCalculations()
000131:0x002648f0:	mulf	@f01, m_StoppingForce, m_EnterSplashCoef
000131:0x00264900:	move	@f00, @f01
000131:0x00264910:	addf	velocity_min, MIN_SCALING_PARAM, @f00
000132:0x00264920:	mulf	@f01, m_StoppingForce, m_EnterSplashCoef
000132:0x00264930:	move	@f00, @f01
000132:0x00264940:	addf	velocity_max, MIN_SCALING_PARAM, @f00
000133:0x00264950:	mulf	@f01, m_StoppingForce, m_EnterSplashCoef
000133:0x00264960:	move	@f00, @f01
000133:0x00264970:	addf	size, MIN_SCALING_PARAM, @f00
000134:0x00264980:	mulf	@f02, m_StoppingForce, m_EnterSplashCoef
000134:0x00264990:	move	@f01, @f02
000134:0x002649a0:	divf	@f01, @f01, _f2.000000
000134:0x002649b0:	move	@f00, @f01
000134:0x002649c0:	addf	birth_rate, MIN_SCALING_PARAM, @f00
000136:0x002649d0:	cmps	m_AmmoType, _s'Bullet_12GaugePellets'
000136:0x002649e0:	bne	0x264a48
000138:0x002649e8:	imove	@f00, 0.50000
000138:0x002649f8:	mulf	birth_rate, birth_rate, @f00
000139:0x00264a08:	imove	@f00, 2.00000
000139:0x00264a18:	mulf	velocity_min, velocity_min, @f00
000140:0x00264a28:	imove	@f00, 2.00000
000140:0x00264a38:	mulf	velocity_max, velocity_max, @f00
000144:0x00264a48:	ncall	GetGame()
000144:0x00264a50:	ncalli	CGame.GetCurrentCameraPosition()
000144:0x00264a58:	movev	camera_pos, #return
000145:0x00264a68:	movev	[0xd315e4b8], m_Pos
000145:0x00264a78:	ncall	Distance(camera_pos, [0xd315e4b8])
000145:0x00264a88:	move	distance, #return
000146:0x00264a98:	mulf	@f01, distance, _f1.200000
000146:0x00264aa8:	move	@f00, @f01
000146:0x00264ab8:	mulf	scaling_by_distance, @f00, m_ScalingByDistance
000149:0x00264ac8:	ncall	GetCurrentFOV()
000149:0x00264ad0:	move	current_FOV, #return
000150:0x00264ae0:	call	GetDayZGame()
000150:0x00264af0:	call	GetUserFOVFromConfig()
000150:0x00264b00:	move	config_FOV, #return
000151:0x00264b10:	divf	FOV_scale, current_FOV, config_FOV
000152:0x00264b20:	mulf	@f00, scaling_by_distance, FOV_scale
000152:0x00264b30:	move	scaling_by_distance, @f00
000154:0x00264b40:	cmpf	scaling_by_distance, _f5.000000
000154:0x00264b50:	ble	0x264b68
000155:0x00264b58:	imove	scaling_by_distance, 5.00000
000157:0x00264b68:	addf	@f00, size, scaling_by_distance
000157:0x00264b78:	move	size, @f00
000158:0x00264b88:	addf	@f00, velocity_min, scaling_by_distance
000158:0x00264b98:	move	velocity_min, @f00
000159:0x00264ba8:	addf	@f00, velocity_max, scaling_by_distance
000159:0x00264bb8:	move	velocity_max, @f00
000161:0x00264bc8:	cmpf	velocity_min, MIN_SCALING_PARAM
000161:0x00264bd8:	bge	0x264bf0
000162:0x00264be0:	move	velocity_min, MIN_SCALING_PARAM
000164:0x00264bf0:	mulf	@f01, MIN_SCALING_PARAM, _f2.000000
000164:0x00264c00:	move	@f00, @f01
000164:0x00264c10:	cmpf	velocity_max, @f00
000164:0x00264c20:	bge	0x264c48
000165:0x00264c28:	mulf	@f00, MIN_SCALING_PARAM, _f2.000000
000165:0x00264c38:	move	velocity_max, @f00
000167:0x00264c48:	cmpf	size, MIN_SCALING_PARAM
000167:0x00264c58:	bge	0x264c70
000168:0x00264c60:	move	size, MIN_SCALING_PARAM
000170:0x00264c70:	cmpf	birth_rate, MIN_SCALING_PARAM
000170:0x00264c80:	bge	0x264c98
000171:0x00264c88:	move	birth_rate, MIN_SCALING_PARAM
000173:0x00264c98:	call	
000174:0x00264cb0:	call	
000175:0x00264cc8:	call	
000176:0x00264ce0:	call	
000176:0x00264cf8:	rts
Hit_MeatBones::OnExitCalculations()
000181:0x00264de0:	mulf	velocity_rnd, outSpeedf, m_ExitSplashCoef
000182:0x00264df0:	mulf	birth_rate_rnd_def, outSpeedf, m_ExitSplashCoef
000183:0x00264e00:	mulf	size, outSpeedf, m_ExitSplashCoef
000185:0x00264e10:	cmpf	velocity_rnd, MIN_SCALING_PARAM
000185:0x00264e20:	bge	0x264e38
000186:0x00264e28:	move	velocity_rnd, MIN_SCALING_PARAM
000188:0x00264e38:	cmpf	size, MIN_SCALING_PARAM
000188:0x00264e48:	bge	0x264e60
000189:0x00264e50:	move	size, MIN_SCALING_PARAM
000191:0x00264e60:	cmpf	size, _f1.000000
000191:0x00264e70:	ble	0x264e88
000192:0x00264e78:	imove	size, 1.00000
000194:0x00264e88:	cmpf	birth_rate_rnd_def, MIN_SCALING_PARAM
000194:0x00264e98:	bge	0x264eb0
000195:0x00264ea0:	move	birth_rate_rnd_def, MIN_SCALING_PARAM
000197:0x00264eb0:	call	
000198:0x00264ec8:	call	
000199:0x00264ee0:	call	
000199:0x00264ef8:	rts
UiHintPanel::UiHintPanel()
//scripts/3_Game/gui\hints\uihintpanel.c
000031:0x00264f78:	imove	m_SlideShowDelay, 0x0061a8
000031:0x00264f88:	moves	m_RootPath, _s'Gui/layouts/new_ui/hints/in_game_hints.layout'
000031:0x00264f98:	imove	m_PageIndex, 0x80000000
000031:0x00264fa8:	imove	m_PreviousRandomIndex, 0x80000000
000033:0x00264fb8:	ncall	GetGame()
000033:0x00264fc0:	icall	SafeCastType([0xb5b39920], @c01, #return)
000033:0x00264fd8:	movec	game, @c01
000034:0x00264fe8:	movem	m_ParentWidget, parent_widget
000035:0x00264ff8:	call	
000035:0x00265008:	rts
UiHintPanel::~UiHintPanel()
000040:0x00265010:	call	
000042:0x00265020:	cmpcm	m_RootFrame, null
000042:0x00265030:	beq	0x265050
000043:0x00265038:	movefm	[0xd31345a8], m_RootFrame
000043:0x00265048:	ncalli	Widget.Unlink()
000043:0x00265050:	rts
UiHintPanel::Init()
000053:0x00265080:	cmpi	m_Initialized, _i0
000053:0x00265090:	beq	0x2650a0
000054:0x00265098:	rts
000055:0x002650a0:	cmpc	game, null
000055:0x002650b0:	bne	0x2650c0
000056:0x002650b8:	rts
000057:0x002650c0:	imove	m_Initialized, 0x000001
000059:0x002650d0:	movec	m_Game, game
000061:0x002650e0:	call	
000063:0x002650f0:	cmpcm	m_ContentList, null
000063:0x00265100:	beq	0x265160
000066:0x00265108:	movem	parent_widget, m_ParentWidget
000066:0x00265118:	call	
000068:0x00265128:	call	
000070:0x00265138:	call	
000072:0x00265148:	call	
000072:0x00265158:	jump	0x265170
000076:0x00265160:	icall	Print(_s'ERROR: UiHintPanel - Could not create the hint panel. The data are missing!')
000076:0x00265170:	rts
JsonFileLoader<array<@HintPage>>::JsonLoadFile()
//scripts/3_Game/tools\jsonfileloader.c
000007:0x00265408:	icall	FileExist(filename)
000007:0x00265418:	cmpi	#return, _i0
000007:0x00265428:	beq	0x265568
000013:0x00265430:	icall	OpenFile(filename, _i1)
000013:0x00265440:	movea	handle, #return
000014:0x00265450:	cmpc	handle, _i0
000014:0x00265460:	bne	0x265480
000015:0x00265468:	movem	data, data
000015:0x00265478:	rts
000018:0x00265480:	icall	FGets(handle, line_content)
000018:0x00265490:	move	@m00, #return
000018:0x002654a0:	cmpi	@m00, _i0
000018:0x002654b0:	blt	0x2654e0
000020:0x002654b8:	moves	@s00, line_content
000020:0x002654c8:	adds	file_content, file_content, @s00
000020:0x002654d8:	jump	0x265480
000023:0x002654e0:	icall	CloseFile(handle)
000025:0x002654f0:	cmpcm	m_Serializer, null
000025:0x00265500:	bne	0x265528
000026:0x00265508:	new	m_Serializer, JsonSerializer
000028:0x00265528:	icall	
000028:0x00265540:	cmpi	#return, _i0
000028:0x00265550:	bne	0x265568
000029:0x00265558:	call	Error(error)
000029:0x00265568:	movem	data, data
000029:0x00265578:	rts
JsonFileLoader<array<@HintPage>>::JsonSaveFile()
000036:0x002655d0:	cmpcm	m_Serializer, null
000036:0x002655e0:	bne	0x265608
000037:0x002655e8:	new	m_Serializer, JsonSerializer
000039:0x00265608:	icall	
000041:0x00265620:	icall	OpenFile(filename, _i4)
000041:0x00265630:	movea	handle, #return
000042:0x00265640:	cmpc	handle, _i0
000042:0x00265650:	bne	0x265660
000043:0x00265658:	rts
000045:0x00265660:	icall	FPrint(handle, file_content)
000047:0x00265670:	icall	CloseFile(handle)
000047:0x00265680:	rts
JsonFileLoader<array<@HintPage>>::JsonLoadData()
000053:0x002656b0:	cmpcm	m_Serializer, null
000053:0x002656c0:	bne	0x2656e8
000054:0x002656c8:	new	m_Serializer, JsonSerializer
000056:0x002656e8:	icall	
000056:0x00265700:	cmpi	#return, _i0
000056:0x00265710:	bne	0x265728
000057:0x00265718:	call	Error(error)
000057:0x00265728:	movem	data, data
000057:0x00265738:	rts
JsonFileLoader<array<@HintPage>>::JsonMakeData()
000063:0x00265768:	cmpcm	m_Serializer, null
000063:0x00265778:	bne	0x2657a0
000064:0x00265780:	new	m_Serializer, JsonSerializer
000066:0x002657a0:	icall	
000067:0x002657b8:	moves	#return, string_data
000067:0x002657c8:	rts
000067:0x002657d0:	rts
UiHintPanel::LoadContentList()
//scripts/3_Game/gui\hints\uihintpanel.c
000085:0x002657d8:	movem	data, m_ContentList
000085:0x002657e8:	call	JsonLoadFile(m_DataPath, data)
000085:0x00265800:	movem	m_ContentList, data
000085:0x00265810:	release	data
000085:0x00265818:	rts
UiHintPanel::BuildLayout()
000092:0x00265938:	movec	[0xb5b39920], m_Game
000092:0x00265948:	ncalli	DayZGame.GetWorkspace()
000092:0x00265950:	moves	[0xd316bc98], m_RootPath
000092:0x00265960:	movefm	[0xd316bcc0], parent_widget
000092:0x00265970:	ncall	CreateWidgets(#return, [0xd316bc98], [0xd316bcc0], _i1)
000092:0x00265988:	movetm	m_RootFrame, #return
000094:0x00265998:	cmpcm	m_RootFrame, null
000094:0x002659a8:	beq	0x265bb0
000097:0x002659b0:	movefm	[0xd31345a8], m_RootFrame
000097:0x002659c0:	ncalli	Widget.FindAnyWidget(_s'GridSpacerWidget1')
000097:0x002659d0:	movetm	m_SpacerFrame, #return
000098:0x002659e0:	movefm	[0xd31345a8], m_RootFrame
000098:0x002659f0:	ncalli	Widget.FindAnyWidget(_s'LeftButton')
000098:0x00265a00:	icall	SafeCastType([0xd31362c0], @c01, #return)
000098:0x00265a18:	movetm	m_UiLeftButton, @c01
000099:0x00265a28:	movefm	[0xd31345a8], m_RootFrame
000099:0x00265a38:	ncalli	Widget.FindAnyWidget(_s'RightButton')
000099:0x00265a48:	icall	SafeCastType([0xd31362c0], @c01, #return)
000099:0x00265a60:	movetm	m_UiRightButton, @c01
000100:0x00265a70:	movefm	[0xd31345a8], m_RootFrame
000100:0x00265a80:	ncalli	Widget.FindAnyWidget(_s'HeadlineLabel')
000100:0x00265a90:	icall	SafeCastType([0xd3134da0], @c01, #return)
000100:0x00265aa8:	movetm	m_UiHeadlineLabel, @c01
000101:0x00265ab8:	movefm	[0xd31345a8], m_RootFrame
000101:0x00265ac8:	ncalli	Widget.FindAnyWidget(_s'HintDescLabel')
000101:0x00265ad8:	icall	SafeCastType([0xd3135258], @c01, #return)
000101:0x00265af0:	movetm	m_UiDescLabel, @c01
000102:0x00265b00:	movefm	[0xd31345a8], m_RootFrame
000102:0x00265b10:	ncalli	Widget.FindAnyWidget(_s'HintImage')
000102:0x00265b20:	icall	SafeCastType([0xd3135420], @c01, #return)
000102:0x00265b38:	movetm	m_UiHintImage, @c01
000103:0x00265b48:	movefm	[0xd31345a8], m_RootFrame
000103:0x00265b58:	ncalli	Widget.FindAnyWidget(_s'PageInfoLabel')
000103:0x00265b68:	icall	SafeCastType([0xd3134da0], @c01, #return)
000103:0x00265b80:	movetm	m_UiPageingLabel, @c01
000105:0x00265b90:	movefm	[0xd31345a8], m_RootFrame
000105:0x00265ba0:	ncalli	Widget.SetHandler(this)
000105:0x00265bb0:	rts
UiHintPanel::PopulateLayout()
000112:0x00265bb8:	cmpcm	m_RootFrame, null
000112:0x00265bc8:	beq	0x265c10
000114:0x00265bd0:	call	
000115:0x00265be0:	call	
000116:0x00265bf0:	call	
000117:0x00265c00:	call	
000117:0x00265c10:	rts
UiHintPanel::SetHintHeadline()
000125:0x00265c18:	movefm	[0xb5bc9500], m_ContentList
000125:0x00265c28:	icall	
000125:0x00265c38:	call	
000125:0x00265c48:	movefm	[0xd3134da0], m_UiHeadlineLabel
000125:0x00265c58:	ncalli	TextWidget.SetText(#return, _i1)
000125:0x00265c68:	rts
UiHintPanel::SetHintDescription()
000132:0x00265c70:	movefm	[0xb5bc9500], m_ContentList
000132:0x00265c80:	icall	
000132:0x00265c90:	call	
000132:0x00265ca0:	movefm	[0xd3135258], m_UiDescLabel
000132:0x00265cb0:	ncalli	RichTextWidget.SetText(#return, _i1)
000133:0x00265cc0:	movefm	[0xd3135258], m_UiDescLabel
000133:0x00265cd0:	ncalli	RichTextWidget.Update()
000134:0x00265cd8:	movefm	[0xd31345a8], m_SpacerFrame
000134:0x00265ce8:	ncalli	Widget.Update()
000134:0x00265cf0:	rts
UiHintPanel::SetHintImage()
000138:0x00265d50:	movefm	[0xb5bc9500], m_ContentList
000138:0x00265d60:	icall	
000138:0x00265d70:	call	
000138:0x00265d80:	moves	image_path, #return
000141:0x00265d90:	cmps	image_path, _s''
000141:0x00265da0:	beq	0x265df8
000144:0x00265da8:	movefm	[0xd3135420], m_UiHintImage
000144:0x00265db8:	ncalli	ImageWidget.Show(true, _i1)
000146:0x00265dc8:	movefm	[0xd3135420], m_UiHintImage
000146:0x00265dd8:	ncalli	ImageWidget.LoadImageFile(_i0, image_path, _i0)
000146:0x00265df0:	jump	0x265e18
000151:0x00265df8:	movefm	[0xd3135420], m_UiHintImage
000151:0x00265e08:	ncalli	ImageWidget.Show(false, _i1)
000151:0x00265e18:	rts
UiHintPanel::SetHintPaging()
000156:0x00265e48:	cmpcm	m_UiPageingLabel, null
000156:0x00265e58:	beq	0x265ee8
000157:0x00265e60:	addi	@m01, m_PageIndex, _i1
000157:0x00265e70:	move	@m00, @m01
000157:0x00265e80:	movefm	[0xb5bc9500], m_ContentList
000157:0x00265e90:	ncalli	array<@HintPage>.Count()
000157:0x00265e98:	icall	Format(_s'%1 / %2', @m00, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000157:0x00265ec8:	movefm	[0xd3134da0], m_UiPageingLabel
000157:0x00265ed8:	ncalli	TextWidget.SetText(#return, _i1)
000157:0x00265ee8:	rts
UiHintPanel::ShowRandomPage()
000162:0x00265ef0:	call	
000163:0x00265f00:	call	
000163:0x00265f10:	rts
UiHintPanel::RandomizePageIndex()
000169:0x00265f18:	movec	[0xb5b39920], m_Game
000169:0x00265f28:	icall	
000169:0x00265f30:	icall	Randomize(#return)
000170:0x00265f40:	call	RandomFloat01()
000171:0x00265f50:	cmpi	m_PageIndex, m_PreviousRandomIndex
000171:0x00265f60:	bne	0x265fd0
000172:0x00265f68:	movefm	[0xb5bc9500], m_ContentList
000172:0x00265f78:	ncalli	array<@HintPage>.Count()
000172:0x00265f80:	subi	@m02, #return, _i1
000172:0x00265f90:	move	@m01, @m02
000172:0x00265fa0:	call	RandomIntInclusive(_i0, @m01)
000172:0x00265fb8:	move	m_PageIndex, #return
000172:0x00265fc8:	jump	0x265f50
000173:0x00265fd0:	move	m_PreviousRandomIndex, m_PageIndex
000173:0x00265fe0:	rts
UiHintPanel::ShowNextPage()
000180:0x00265fe8:	movefm	[0xb5bc9500], m_ContentList
000180:0x00265ff8:	ncalli	array<@HintPage>.Count()
000180:0x00266000:	subi	@m01, #return, _i1
000180:0x00266010:	move	@m00, @m01
000180:0x00266020:	cmpi	m_PageIndex, @m00
000180:0x00266030:	bge	0x266058
000182:0x00266038:	move	@m00, m_PageIndex
000182:0x00266048:	inc	m_PageIndex
000182:0x00266050:	jump	0x266068
000186:0x00266058:	imove	m_PageIndex, 0x000000
000190:0x00266068:	call	
000190:0x00266078:	rts
UiHintPanel::ShowPreviousPage()
000196:0x00266080:	cmpi	m_PageIndex, _i0
000196:0x00266090:	bne	0x2660d8
000198:0x00266098:	movefm	[0xb5bc9500], m_ContentList
000198:0x002660a8:	ncalli	array<@HintPage>.Count()
000198:0x002660b0:	subi	@m00, #return, _i1
000198:0x002660c0:	move	m_PageIndex, @m00
000198:0x002660d0:	jump	0x2660f0
000202:0x002660d8:	move	@m00, m_PageIndex
000202:0x002660e8:	dec	m_PageIndex
000206:0x002660f0:	call	
000206:0x00266100:	rts
UiHintPanel::StartSlideshow()
000215:0x00266148:	movec	[0xb5b39920], m_Game
000215:0x00266158:	call	
000215:0x00266168:	icall	SetInstance([0xb5d64148], this)
000215:0x00266178:	icall	
000215:0x002661b0:	release	#return
000215:0x002661b8:	rts
UiHintPanel::SlideshowThread()
000220:0x002661c0:	call	
000220:0x002661d0:	rts
UiHintPanel::StopSlideShow()
000225:0x00266218:	movec	[0xb5b39920], m_Game
000225:0x00266228:	call	
000225:0x00266238:	icall	SetInstance([0xb5d64218], this)
000225:0x00266248:	icall	
000225:0x00266258:	release	#return
000225:0x00266260:	rts
UiHintPanel::RestartSlideShow()
000230:0x00266268:	call	
000231:0x00266278:	call	
000231:0x00266288:	rts
UiHintPanel::OnClick()
000239:0x002662b8:	cmpi	button, _i0
000239:0x002662c8:	bne	0x2663a0
000241:0x002662d0:	movem	#switch, w
000241:0x002662e0:	movefm	@c00, m_UiLeftButton
000241:0x002662f0:	cmpmc	@c00, #switch
000241:0x00266300:	bne	0x266340
000245:0x00266308:	call	
000246:0x00266318:	imove	#return, 0x000001
000246:0x00266328:	release	#switch
000246:0x00266330:	rts
000246:0x00266338:	jump	0x266368
000246:0x00266340:	movefm	@c00, m_UiRightButton
000246:0x00266350:	cmpmc	@c00, #switch
000246:0x00266360:	bne	0x266398
000250:0x00266368:	call	
000251:0x00266378:	imove	#return, 0x000001
000251:0x00266388:	release	#switch
000251:0x00266390:	rts
000251:0x00266398:	release	#switch
000255:0x002663a0:	imove	#return, 0x000000
000255:0x002663b0:	rts
000255:0x002663b8:	rts
UiHintPanel::OnMouseEnter()
000259:0x002663c0:	cmpm	w, m_RootPath
000259:0x002663d0:	beq	0x266408
000259:0x002663d8:	cmpm	w, m_UiLeftButton
000259:0x002663e8:	beq	0x266408
000259:0x002663f0:	cmpm	w, m_UiRightButton
000259:0x00266400:	bne	0x266430
000261:0x00266408:	call	
000262:0x00266418:	imove	#return, 0x000001
000262:0x00266428:	rts
000264:0x00266430:	imove	#return, 0x000000
000264:0x00266440:	rts
000264:0x00266448:	rts
UiHintPanel::OnMouseLeave()
000268:0x00266450:	cmpm	w, m_RootPath
000268:0x00266460:	beq	0x266498
000268:0x00266468:	cmpm	w, m_UiLeftButton
000268:0x00266478:	beq	0x266498
000268:0x00266480:	cmpm	w, m_UiRightButton
000268:0x00266490:	bne	0x2664c0
000270:0x00266498:	call	
000271:0x002664a8:	imove	#return, 0x000001
000271:0x002664b8:	rts
000273:0x002664c0:	imove	#return, 0x000000
000273:0x002664d0:	rts
000273:0x002664d8:	rts
UiHintPanelLoading::Init()
000282:0x00266508:	moves	m_RootPath, _s'Gui/layouts/new_ui/hints/in_game_hints_load.layout'
000283:0x00266518:	call	
000283:0x00266528:	rts
SyncPlayerList::CreatePlayerList()
//scripts/3_Game/client\syncplayerlist.c
000007:0x00266680:	ncall	GetGame()
000007:0x00266688:	ncalli	CGame.IsServer()
000007:0x00266690:	cmpi	#return, _i0
000007:0x002666a0:	beq	0x266888
000009:0x002666a8:	new	m_PlayerList, array<@SyncPlayer>
000011:0x002666c8:	new	players, array<Man>
000012:0x002666e8:	ncall	GetGame()
000012:0x002666f0:	ncalli	CGame.GetWorld()
000012:0x002666f8:	movefm	[0xb5b9ff30], players
000012:0x00266708:	ncalli	World.GetPlayerList([0xb5b9ff30])
000014:0x00266718:	imove	i, 0x000000
000014:0x00266728:	jump	0x266738
000014:0x00266730:	inc	i
000014:0x00266738:	ncalli	array<Man>.Count()
000014:0x00266740:	cmpi	i, #return
000014:0x00266750:	bge	0x266880
000016:0x00266758:	icall	
000016:0x00266768:	movetm	player, #return
000017:0x00266778:	ncalli	Man.GetIdentity()
000017:0x00266780:	movetm	p_identity, #return
000019:0x00266790:	cmpcm	p_identity, null
000019:0x002667a0:	beq	0x266858
000021:0x002667a8:	new	sync_player, SyncPlayer
000022:0x002667c8:	movefm	@c00, sync_player
000022:0x002667d8:	icall	
000022:0x002667e0:	moves	m_UID, #return
000023:0x002667f0:	movefm	@c00, sync_player
000023:0x00266800:	icall	
000023:0x00266808:	moves	m_PlayerName, #return
000024:0x00266818:	movefm	@c00, sync_player
000024:0x00266828:	movefm	[0xb5c2c6a8], m_PlayerList
000024:0x00266838:	icall	
000024:0x00266848:	release	sync_player
000024:0x00266850:	jump	0x266868
000028:0x00266858:	call	LogErrorAndTrace(_s'No Identity in Server Player List')
000028:0x00266868:	release	player
000028:0x00266870:	release	p_identity
000028:0x00266878:	jump	0x266730
000028:0x00266880:	release	players
000028:0x00266888:	rts
SyncPlayerList::Compare()
000036:0x00266c28:	new	new_list, SyncPlayerList
000037:0x00266c48:	movefm	@c00, new_list
000037:0x00266c58:	new	m_PlayerList, array<@SyncPlayer>
000039:0x00266c78:	cmpcm	a, null
000039:0x00266c88:	bne	0x266dc0
000039:0x00266c90:	cmpcm	b, null
000039:0x00266ca0:	beq	0x266dc0
000039:0x00266ca8:	movefm	@c00, b
000039:0x00266cb8:	cmpcm	m_PlayerList, null
000039:0x00266cc8:	beq	0x266dc0
000041:0x00266cd0:	movefm	@c00, b
000041:0x00266ce0:	movem	#array, m_PlayerList
000041:0x00266cf0:	ncalli	array<@SyncPlayer>.Count()
000041:0x00266cf8:	move	#cnt, #return
000041:0x00266d08:	imove	#key, 0x000000
000041:0x00266d18:	jump	0x266d28
000041:0x00266d20:	inc	#key
000041:0x00266d28:	cmpi	#key, #cnt
000041:0x00266d38:	bge	0x266da8
000041:0x00266d40:	icall	
000041:0x00266d50:	movetm	player3, #return
000043:0x00266d60:	movefm	@c01, new_list
000043:0x00266d70:	movefm	@c02, m_PlayerList
000043:0x00266d80:	movefm	@c03, player3
000043:0x00266d90:	icall	
000043:0x00266da0:	jump	0x266d20
000043:0x00266da8:	release	#array
000043:0x00266db0:	release	player3
000043:0x00266db8:	jump	0x267190
000046:0x00266dc0:	cmpcm	a, null
000046:0x00266dd0:	beq	0x266f08
000046:0x00266dd8:	movefm	@c00, a
000046:0x00266de8:	cmpcm	m_PlayerList, null
000046:0x00266df8:	beq	0x266f08
000046:0x00266e00:	cmpcm	b, null
000046:0x00266e10:	bne	0x266f08
000048:0x00266e18:	movefm	@c00, a
000048:0x00266e28:	movem	#array, m_PlayerList
000048:0x00266e38:	ncalli	array<@SyncPlayer>.Count()
000048:0x00266e40:	move	#cnt, #return
000048:0x00266e50:	imove	#key, 0x000000
000048:0x00266e60:	jump	0x266e70
000048:0x00266e68:	inc	#key
000048:0x00266e70:	cmpi	#key, #cnt
000048:0x00266e80:	bge	0x266ef0
000048:0x00266e88:	icall	
000048:0x00266e98:	movetm	player4, #return
000050:0x00266ea8:	movefm	@c01, new_list
000050:0x00266eb8:	movefm	@c02, m_PlayerList
000050:0x00266ec8:	movefm	@c03, player4
000050:0x00266ed8:	icall	
000050:0x00266ee8:	jump	0x266e68
000050:0x00266ef0:	release	#array
000050:0x00266ef8:	release	player4
000050:0x00266f00:	jump	0x267190
000053:0x00266f08:	cmpcm	a, null
000053:0x00266f18:	beq	0x267190
000053:0x00266f20:	movefm	@c00, a
000053:0x00266f30:	cmpcm	m_PlayerList, null
000053:0x00266f40:	beq	0x267190
000053:0x00266f48:	cmpcm	b, null
000053:0x00266f58:	beq	0x267190
000053:0x00266f60:	movefm	@c00, b
000053:0x00266f70:	cmpcm	m_PlayerList, null
000053:0x00266f80:	beq	0x267190
000055:0x00266f88:	movefm	@c01, a
000055:0x00266f98:	movem	array_a, m_PlayerList
000056:0x00266fa8:	movefm	@c01, b
000056:0x00266fb8:	movem	array_b, m_PlayerList
000058:0x00266fc8:	ncalli	array<@SyncPlayer>.Count()
000058:0x00266fd0:	move	#cnt, #return
000058:0x00266fe0:	imove	#key, 0x000000
000058:0x00266ff0:	jump	0x267000
000058:0x00266ff8:	inc	#key
000058:0x00267000:	cmpi	#key, #cnt
000058:0x00267010:	bge	0x267178
000058:0x00267018:	icall	
000058:0x00267028:	movetm	player, #return
000060:0x00267038:	imove	found, 0x000000
000061:0x00267048:	ncalli	array<@SyncPlayer>.Count()
000061:0x00267050:	move	#cnt, #return
000061:0x00267060:	imove	#key, 0x000000
000061:0x00267070:	jump	0x267080
000061:0x00267078:	inc	#key
000061:0x00267080:	cmpi	#key, #cnt
000061:0x00267090:	bge	0x267110
000061:0x00267098:	icall	
000061:0x002670a8:	movetm	player2, #return
000063:0x002670b8:	movefm	@c00, player
000063:0x002670c8:	movefm	@c01, player2
000063:0x002670d8:	cmps	m_UID, m_UID
000063:0x002670e8:	bne	0x267108
000065:0x002670f0:	imove	found, 0x000001
000066:0x00267100:	jump	0x267110
000066:0x00267108:	jump	0x267078
000066:0x00267110:	release	player2
000070:0x00267118:	cmpi	found, _i0
000070:0x00267128:	bne	0x267170
000072:0x00267130:	movefm	@c00, new_list
000072:0x00267140:	movefm	@c01, m_PlayerList
000072:0x00267150:	movefm	@c02, player
000072:0x00267160:	icall	
000072:0x00267170:	jump	0x266ff8
000072:0x00267178:	release	player
000072:0x00267180:	release	array_a
000072:0x00267188:	release	array_b
000076:0x00267190:	movem	#return, new_list
000076:0x002671a0:	release	new_list
000076:0x002671a8:	rts
000076:0x002671b0:	release	new_list
000076:0x002671b8:	rts
WorldLighting::WorldLighting()
//scripts/3_Game/worldlighting.c
000006:0x00267210:	moves	lighting_default, _s'dz\data\lighting\lighting_default.txt'
000006:0x00267220:	moves	lighting_darknight, _s'dz\data\lighting\lighting_darknight.txt'
000006:0x00267230:	rts
WorldLighting::SetGlobalLighting()
000012:0x00267260:	move	#switch, lightingID
000012:0x00267270:	imove	@m00, 0x000000
000012:0x00267280:	cmpi	@m00, #switch
000012:0x00267290:	bne	0x2672d8
000015:0x00267298:	ncall	GetGame()
000015:0x002672a0:	ncalli	CGame.GetWorld()
000015:0x002672a8:	moves	[0xb5ba0680], lighting_default
000015:0x002672b8:	ncalli	World.LoadNewLightingCfg([0xb5ba0680])
000016:0x002672c8:	jump	0x267338
000016:0x002672d0:	jump	0x267300
000016:0x002672d8:	imove	@m00, 0x000001
000016:0x002672e8:	cmpi	@m00, #switch
000016:0x002672f8:	bne	0x267338
000019:0x00267300:	ncall	GetGame()
000019:0x00267308:	ncalli	CGame.GetWorld()
000019:0x00267310:	moves	[0xb5ba0680], lighting_darknight
000019:0x00267320:	ncalli	World.LoadNewLightingCfg([0xb5ba0680])
000020:0x00267330:	jump	0x267338
000020:0x00267338:	rts
HumanItemBehaviorCfg::SetIK()
//scripts/3_Game/humanitems.c
000046:0x00267368:	imove	val, 0x000000
000047:0x00267378:	cmpi	pAim, _i0
000047:0x00267388:	beq	0x2673b0
000047:0x00267390:	move	@m00, IKSETTING_AIMING
000047:0x002673a0:	ori	val, val, @m00
000048:0x002673b0:	cmpi	pRArm, _i0
000048:0x002673c0:	beq	0x2673e8
000048:0x002673c8:	move	@m00, IKSETTING_RHAND
000048:0x002673d8:	ori	val, val, @m00
000049:0x002673e8:	cmpi	pLArm, _i0
000049:0x002673f8:	beq	0x267420
000049:0x00267400:	move	@m00, IKSETTING_LHAND
000049:0x00267410:	ori	val, val, @m00
000052:0x00267420:	muli	@m00, pStance, _i4
000052:0x00267430:	move	pStance, @m00
000053:0x00267440:	addi	@m00, pStance, pMovement
000053:0x00267450:	move	pStance, @m00
000056:0x00267460:	ftv	m_IKSettings[pStance], val
000056:0x00267470:	rts
HumanItemBehaviorCfg::SetIKStance()
000061:0x00267518:	imove	val, 0x000000
000062:0x00267528:	cmpi	pAim, _i0
000062:0x00267538:	beq	0x267560
000062:0x00267540:	move	@m00, IKSETTING_AIMING
000062:0x00267550:	ori	val, val, @m00
000063:0x00267560:	cmpi	pRArm, _i0
000063:0x00267570:	beq	0x267598
000063:0x00267578:	move	@m00, IKSETTING_RHAND
000063:0x00267588:	ori	val, val, @m00
000064:0x00267598:	cmpi	pLArm, _i0
000064:0x002675a8:	beq	0x2675d0
000064:0x002675b0:	move	@m00, IKSETTING_LHAND
000064:0x002675c0:	ori	val, val, @m00
000066:0x002675d0:	muli	bo, pStance, _i4
000068:0x002675e0:	imove	i, 0x000000
000068:0x002675f0:	jump	0x267610
000068:0x002675f8:	move	@m00, i
000068:0x00267608:	inc	i
000068:0x00267610:	cmpi	i, _i4
000068:0x00267620:	bge	0x267660
000070:0x00267628:	addi	@m01, bo, i
000070:0x00267638:	move	@m00, @m01
000070:0x00267648:	ftv	m_IKSettings[@m00], val
000070:0x00267658:	jump	0x2675f8
000070:0x00267660:	rts
HumanItemBehaviorCfg::SetIKMelee()
000076:0x00267690:	imove	val, 0x000000
000077:0x002676a0:	cmpi	pAim, _i0
000077:0x002676b0:	beq	0x2676d8
000077:0x002676b8:	move	@m00, IKSETTING_AIMING
000077:0x002676c8:	ori	val, val, @m00
000078:0x002676d8:	cmpi	pRArm, _i0
000078:0x002676e8:	beq	0x267710
000078:0x002676f0:	move	@m00, IKSETTING_RHAND
000078:0x00267700:	ori	val, val, @m00
000079:0x00267710:	cmpi	pLArm, _i0
000079:0x00267720:	beq	0x267748
000079:0x00267728:	move	@m00, IKSETTING_LHAND
000079:0x00267738:	ori	val, val, @m00
000081:0x00267748:	ftv	m_IKSettingsMelee[pHitType], val
000081:0x00267758:	rts
HumanItemBehaviorCfg::SetIKAll()
000086:0x002677d8:	imove	val, 0x000000
000087:0x002677e8:	cmpi	pAim, _i0
000087:0x002677f8:	beq	0x267820
000087:0x00267800:	move	@m00, IKSETTING_AIMING
000087:0x00267810:	ori	val, val, @m00
000088:0x00267820:	cmpi	pRArm, _i0
000088:0x00267830:	beq	0x267858
000088:0x00267838:	move	@m00, IKSETTING_RHAND
000088:0x00267848:	ori	val, val, @m00
000089:0x00267858:	cmpi	pLArm, _i0
000089:0x00267868:	beq	0x267890
000089:0x00267870:	move	@m00, IKSETTING_LHAND
000089:0x00267880:	ori	val, val, @m00
000092:0x00267890:	imove	i, 0x000000
000092:0x002678a0:	jump	0x2678c0
000092:0x002678a8:	move	@m00, i
000092:0x002678b8:	inc	i
000092:0x002678c0:	cmpi	i, _i24
000092:0x002678d0:	bge	0x2678f0
000094:0x002678d8:	ftv	m_IKSettings[i], val
000094:0x002678e8:	jump	0x2678a8
000097:0x002678f0:	imove	i, 0x000000
000097:0x00267900:	jump	0x267920
000097:0x00267908:	move	@m00, i
000097:0x00267918:	inc	i
000097:0x00267920:	cmpi	i, _i2
000097:0x00267930:	bge	0x267950
000099:0x00267938:	ftv	m_IKSettingsMelee[i], val
000099:0x00267948:	jump	0x267908
000099:0x00267950:	rts
EffSwarmingFlies::EffSwarmingFlies()
//scripts/3_Game/effects\effectparticle\swarmingflies.c
000005:0x00267958:	call	
000005:0x00267968:	rts
Particle::Particle()
//scripts/3_Game/particles\particle.c
000063:0x00267970:	call	
000063:0x00267980:	rts
Particle::ParticleInit()
000069:0x002679d8:	ncall	SetFlags(this, _i1, true)
000070:0x002679f0:	ncall	SetEventMask(this, _i2)
000071:0x00267a00:	ncall	SetEventMask(this, _i16)
000071:0x00267a10:	rts
Particle::CreateOnObject()
000090:0x00267aa0:	cmpcm	parent_obj, null
000090:0x00267ab0:	bne	0x267ac8
000091:0x00267ab8:	call	Error(_s'ERROR when creating a particle! Parameter parent_obj is NULL!')
000093:0x00267ac8:	ncalli	Object.GetPosition()
000093:0x00267ad0:	movev	global_pos, #return
000094:0x00267ae0:	ncall	Vector(_f0.000000, _f0.000000, _f0.000000)
000094:0x00267af8:	call	CreateInWorld(particle_id, global_pos, #return, force_world_rotation)
000094:0x00267b18:	movem	p, #return
000094:0x00267b28:	release	#return
000095:0x00267b30:	call	
000096:0x00267b50:	movefm	@c00, p
000096:0x00267b60:	movev	m_DefaultOri, local_ori
000098:0x00267b70:	movem	#return, p
000098:0x00267b80:	release	p
000098:0x00267b88:	rts
000098:0x00267b90:	release	p
000098:0x00267b98:	rts
Particle::Create()
000106:0x00267ba0:	call	CreateOnObject(particle_id, parent_obj, local_pos, local_ori, _i0)
000106:0x00267bc0:	movem	#return, #return
000106:0x00267bd0:	release	#return
000106:0x00267bd8:	rts
000106:0x00267be0:	rts
Particle::CreateInWorld()
000119:0x00267c38:	ncall	GetGame()
000119:0x00267c40:	ncalli	CGame.CreateObjectEx(_s'Particle', global_pos, ECE_LOCAL, _i512)
000119:0x00267c58:	icall	SafeCastType([0xb5b33950], @c01, #return)
000119:0x00267c70:	movetm	p, @c01
000120:0x00267c80:	call	
000121:0x00267c90:	ncalli	Particle.SetOrientation(global_ori)
000122:0x00267ca0:	movefm	@c00, p
000122:0x00267cb0:	move	m_ForceOrientationRelativeToWorld, force_world_rotation
000123:0x00267cc0:	movem	#return, p
000123:0x00267cd0:	release	p
000123:0x00267cd8:	rts
000123:0x00267ce0:	release	p
000123:0x00267ce8:	rts
Particle::Create#109489()
000131:0x00267cf0:	call	CreateInWorld(particle_id, global_pos, global_ori, _i0)
000131:0x00267d10:	movem	#return, #return
000131:0x00267d20:	release	#return
000131:0x00267d28:	rts
000131:0x00267d30:	rts
Particle::PlayOnObject()
000154:0x00267d60:	call	CreateOnObject(particle_id, parent_obj, local_pos, local_ori, force_world_rotation)
000154:0x00267d80:	movem	p, #return
000154:0x00267d90:	release	#return
000155:0x00267d98:	call	
000157:0x00267da8:	movem	#return, p
000157:0x00267db8:	release	p
000157:0x00267dc0:	rts
000157:0x00267dc8:	release	p
000157:0x00267dd0:	rts
Particle::Play()
000165:0x00267dd8:	call	PlayOnObject(particle_id, parent_obj, local_pos, local_ori, _i0)
000165:0x00267df8:	movem	#return, #return
000165:0x00267e08:	release	#return
000165:0x00267e10:	rts
000165:0x00267e18:	rts
Particle::PlayInWorld()
000176:0x00267e80:	call	CreateInWorld(particle_id, global_pos, _v<0.000000,0.000000,0.000000>, _i0)
000176:0x00267ea0:	movem	p, #return
000176:0x00267eb0:	release	#return
000177:0x00267eb8:	call	
000179:0x00267ec8:	movem	#return, p
000179:0x00267ed8:	release	p
000179:0x00267ee0:	rts
000179:0x00267ee8:	release	p
000179:0x00267ef0:	rts
Particle::Play#109633()
000187:0x00267ef8:	call	PlayInWorld(particle_id, global_pos)
000187:0x00267f10:	movem	#return, #return
000187:0x00267f20:	release	#return
000187:0x00267f28:	rts
000187:0x00267f30:	rts
Particle::PlayParticle()
000205:0x00267f38:	call	
000205:0x00267f50:	rts
Particle::PlayParticleEx()
000217:0x00267f58:	cmpi	particle_id, _i-1
000217:0x00267f68:	ble	0x267f80
000219:0x00267f70:	call	
000222:0x00267f80:	call	
000224:0x00267f90:	call	
000226:0x00267fa0:	imove	#return, 0x000001
000226:0x00267fb0:	rts
000226:0x00267fb8:	rts
Particle::Play#109711()
000235:0x00267fc0:	call	
000235:0x00267fd0:	rts
Particle::StopParticle()
000247:0x00268068:	call	
000250:0x00268078:	ncalli	Particle.GetParent()
000250:0x00268080:	icall	SafeCastType([0xb5b006f0], @c01, #return)
000250:0x00268098:	movetm	parent, @c01
000251:0x002680a8:	cmpcm	parent, null
000251:0x002680b8:	beq	0x268130
000251:0x002680c0:	ncalli	Particle.ToDelete()
000251:0x002680c8:	cmpi	#return, _i0
000251:0x002680d8:	bne	0x268130
000253:0x002680e0:	ncalli	Particle.GetPosition()
000253:0x002680e8:	movev	world_pos, #return
000254:0x002680f8:	movefm	[0xd3173818], parent
000254:0x00268108:	ncall	RemoveChild([0xd3173818], this, _i0)
000255:0x00268120:	ncalli	Particle.SetPosition(world_pos)
000258:0x00268130:	call	
000260:0x00268140:	imove	#return, 0x000001
000260:0x00268150:	release	parent
000260:0x00268158:	rts
000260:0x00268160:	release	parent
000260:0x00268168:	rts
Particle::Stop()
000268:0x00268170:	call	
000268:0x00268180:	rts
Particle::SetSource()
000287:0x00268188:	move	m_ParticleID, particle_id
000287:0x00268198:	rts
Particle::GetParticleID()
000299:0x002681a0:	move	#return, m_ParticleID
000299:0x002681b0:	rts
000299:0x002681b8:	rts
Particle::GetDirectParticleEffect()
000309:0x002681c0:	movem	#return, m_ParticleEffect
000309:0x002681d0:	rts
000309:0x002681d8:	rts
Particle::GetParticleParent()
000318:0x002681e0:	movem	#return, m_ParentObject
000318:0x002681f0:	rts
000318:0x002681f8:	rts
Particle::HasActiveParticle()
000327:0x00268200:	cmpcm	m_ParticleEffect, null
000327:0x00268210:	beq	0x268260
000329:0x00268218:	movefm	@c00, m_ParticleEffect
000329:0x00268228:	movefm	[0xb5b006f0], m_ParticleEffect
000329:0x00268238:	icall	HasActiveParticle(@c00)
000329:0x00268248:	move	#return, #return
000329:0x00268258:	rts
000332:0x00268260:	imove	#return, 0x000000
000332:0x00268270:	rts
000332:0x00268278:	rts
Particle::GetParticleCount()
000342:0x00268280:	cmpcm	m_ParticleEffect, null
000342:0x00268290:	beq	0x2682e0
000344:0x00268298:	movefm	[0xd3176410], m_ParticleEffect
000344:0x002682a8:	movefm	[0xb5b006f0], m_ParticleEffect
000344:0x002682b8:	ncall	GetParticleCount([0xd3176410])
000344:0x002682c8:	move	#return, #return
000344:0x002682d8:	rts
000347:0x002682e0:	imove	#return, 0x000000
000347:0x002682f0:	rts
000347:0x002682f8:	rts
Particle::IsRepeat()
000356:0x002683a0:	cmpcm	m_ParticleEffect, null
000356:0x002683b0:	beq	0x268490
000358:0x002683b8:	imove	repeat, 0x000000
000360:0x002683c8:	movefm	@c00, m_ParticleEffect
000360:0x002683d8:	icall	GetParticleEmitorCount(@c00)
000360:0x002683e8:	move	emitors, #return
000362:0x002683f8:	imove	i, 0x000000
000362:0x00268408:	jump	0x268418
000362:0x00268410:	inc	i
000362:0x00268418:	cmpi	i, emitors
000362:0x00268428:	bge	0x268490
000364:0x00268430:	movefm	@c00, m_ParticleEffect
000364:0x00268440:	icall	GetParticleParm(@c00, i, _i24, repeat)
000366:0x00268458:	cmpi	repeat, _i0
000366:0x00268468:	beq	0x268488
000368:0x00268470:	imove	#return, 0x000001
000368:0x00268480:	rts
000368:0x00268488:	jump	0x268410
000373:0x00268490:	imove	#return, 0x000000
000373:0x002684a0:	rts
000373:0x002684a8:	rts
Particle::GetMaxLifetime()
000382:0x00268748:	imove	lifetime_return, 0.00000
000384:0x00268758:	cmpcm	m_ParticleEffect, null
000384:0x00268768:	beq	0x268900
000386:0x00268770:	imove	lifetime_min, 0.00000
000387:0x00268780:	imove	lifetime_random, 0.00000
000388:0x00268790:	imove	effect_time, 0.00000
000390:0x002687a0:	imove	lifetime_sum, 0.00000
000392:0x002687b0:	movefm	@c00, m_ParticleEffect
000392:0x002687c0:	icall	GetParticleEmitorCount(@c00)
000392:0x002687d0:	move	emitors, #return
000394:0x002687e0:	imove	i, 0x000000
000394:0x002687f0:	jump	0x268800
000394:0x002687f8:	inc	i
000394:0x00268800:	cmpi	i, emitors
000394:0x00268810:	bge	0x268900
000396:0x00268818:	movefm	@c00, m_ParticleEffect
000396:0x00268828:	icall	GetParticleParm(@c00, i, _i18, lifetime_min)
000397:0x00268840:	movefm	@c00, m_ParticleEffect
000397:0x00268850:	icall	GetParticleParm(@c00, i, _i19, lifetime_random)
000398:0x00268868:	movefm	@c00, m_ParticleEffect
000398:0x00268878:	icall	GetParticleParm(@c00, i, _i23, effect_time)
000400:0x00268890:	addf	@f01, lifetime_min, lifetime_random
000400:0x002688a0:	move	@f00, @f01
000400:0x002688b0:	addf	@f00, @f00, effect_time
000400:0x002688c0:	move	lifetime_sum, @f00
000402:0x002688d0:	cmpf	lifetime_sum, lifetime_return
000402:0x002688e0:	ble	0x2688f8
000404:0x002688e8:	move	lifetime_return, lifetime_sum
000404:0x002688f8:	jump	0x2687f8
000409:0x00268900:	move	#return, lifetime_return
000409:0x00268910:	rts
000409:0x00268918:	rts
Particle::UpdateState()
000427:0x00268920:	cmpi	m_IsPlaying, false
000427:0x00268930:	bne	0x268968
000427:0x00268938:	cmpcm	m_ParticleEffect, null
000427:0x00268948:	beq	0x268968
000429:0x00268950:	call	
000429:0x00268960:	jump	0x2689a8
000431:0x00268968:	cmpi	m_IsPlaying, true
000431:0x00268978:	bne	0x2689a8
000431:0x00268980:	cmpcm	m_ParticleEffect, null
000431:0x00268990:	bne	0x2689a8
000433:0x00268998:	call	
000433:0x002689a8:	rts
Particle::CreateParticleEffect()
000442:0x00268aa8:	ncall	GetGame()
000442:0x00268ab0:	ncalli	CGame.IsServer()
000442:0x00268ab8:	cmpi	#return, _i0
000442:0x00268ac8:	beq	0x268af8
000442:0x00268ad0:	ncall	GetGame()
000442:0x00268ad8:	ncalli	CGame.IsMultiplayer()
000442:0x00268ae0:	cmpi	#return, _i0
000442:0x00268af0:	bne	0x268c80
000444:0x00268af8:	move	particle_id, m_ParticleID
000444:0x00268b08:	call	GetParticleFullPath(particle_id)
000444:0x00268b18:	moves	fullPath, #return
000445:0x00268b28:	cmps	fullPath, _s''
000445:0x00268b38:	bne	0x268b68
000447:0x00268b40:	icall	ErrorEx(_s'Could not play Particle as there is no valid particle id assigned.', _i2)
000448:0x00268b50:	imove	m_IsPlaying, 0x000000
000449:0x00268b60:	rts
000452:0x00268b68:	cmpcm	m_ParticleEffect, null
000452:0x00268b78:	bne	0x268bb0
000454:0x00268b80:	ncall	GetGame()
000454:0x00268b88:	ncalli	CGame.CreateObjectEx(_s'#particlesourceenf', Zero, ECE_LOCAL, _i512)
000454:0x00268ba0:	movetm	m_ParticleEffect, #return
000457:0x00268bb0:	movefm	[0xd3173778], m_ParticleEffect
000457:0x00268bc0:	move	[0xd31737c8], m_ForceOrientationRelativeToWorld
000457:0x00268bd0:	ncall	AddChild(this, [0xd3173778], _i-1, [0xd31737c8])
000459:0x00268be8:	ncall	GetObject(fullPath)
000459:0x00268bf8:	movea	vobj, #return
000460:0x00268c08:	movefm	[0xd3173e70], m_ParticleEffect
000460:0x00268c18:	ncall	SetObject([0xd3173e70], vobj, _s'')
000461:0x00268c30:	ncall	ReleaseObject(vobj, _i0)
000463:0x00268c40:	call	
000463:0x00268c50:	move	m_IsRepeat, #return
000464:0x00268c60:	call	
000464:0x00268c70:	move	m_Lifetime, #return
000464:0x00268c80:	rts
Particle::DestroyParticleEffect()
000476:0x00268c88:	cmpcm	m_ParticleEffect, null
000476:0x00268c98:	beq	0x268d18
000476:0x00268ca0:	ncall	GetGame()
000476:0x00268ca8:	cmpc	#return, null
000476:0x00268cb8:	beq	0x268d18
000478:0x00268cc0:	call	
000479:0x00268cd8:	call	
000480:0x00268cf0:	call	
000482:0x00268d08:	imove	m_IsRepeat, 0x000000
000482:0x00268d18:	rts
Particle::EOnFrame()
000491:0x00268d20:	move	@f00, timeSlice
000491:0x00268d30:	subf	m_Lifetime, m_Lifetime, @f00
000492:0x00268d40:	call	
000492:0x00268d50:	rts
Particle::OnCheckAutoDelete()
000500:0x00268d58:	cmpf	m_Lifetime, _f0.000000
000500:0x00268d68:	bgt	0x268ed8
000502:0x00268d70:	cmpi	m_MarkedForDeletion, _i0
000502:0x00268d80:	bne	0x268e68
000504:0x00268d88:	call	
000504:0x00268d98:	move	m_IsRepeat, #return
000506:0x00268da8:	cmpi	m_IsRepeat, _i0
000506:0x00268db8:	beq	0x268de8
000508:0x00268dc0:	call	
000508:0x00268dd0:	move	m_Lifetime, #return
000508:0x00268de0:	jump	0x268e60
000512:0x00268de8:	call	
000514:0x00268df8:	call	
000514:0x00268e08:	move	@m00, #return
000514:0x00268e18:	cmpi	@m00, _i0
000514:0x00268e28:	bne	0x268e60
000516:0x00268e30:	imove	m_MarkedForDeletion, 0x000001
000517:0x00268e40:	call	
000518:0x00268e50:	call	
000518:0x00268e60:	jump	0x268ed8
000524:0x00268e68:	cmpi	m_MarkedForDeletion, _i0
000524:0x00268e78:	beq	0x268ed8
000526:0x00268e80:	cmpcm	m_ParticleEffect, null
000526:0x00268e90:	beq	0x268ec8
000528:0x00268e98:	movefm	[0xb5b006f0], m_ParticleEffect
000528:0x00268ea8:	call	
000529:0x00268eb8:	movetm	m_ParticleEffect, null
000532:0x00268ec8:	call	
000532:0x00268ed8:	rts
Particle::AddAsChild()
000565:0x00268ee0:	ncalli	Particle.ToDelete()
000565:0x00268ee8:	cmpi	#return, _i0
000565:0x00268ef8:	beq	0x268f08
000566:0x00268f00:	rts
000568:0x00268f08:	cmpcm	parent, null
000568:0x00268f18:	beq	0x269010
000573:0x00268f20:	ncalli	Object.ToDelete()
000573:0x00268f28:	cmpi	#return, _i0
000573:0x00268f38:	bne	0x269008
000575:0x00268f40:	ncalli	Particle.SetPosition(local_pos)
000576:0x00268f50:	ncalli	Particle.SetOrientation(local_ori)
000577:0x00268f60:	movem	m_ParentObject, parent
000578:0x00268f70:	movev	m_DefaultPos, local_pos
000579:0x00268f80:	move	m_ForceOrientationRelativeToWorld, force_rotation_to_world
000581:0x00268f90:	cmpcm	m_ParticleEffect, null
000581:0x00268fa0:	beq	0x268fe0
000582:0x00268fa8:	movefm	[0xd3173778], m_ParticleEffect
000582:0x00268fb8:	move	[0xd31737c8], m_ForceOrientationRelativeToWorld
000582:0x00268fc8:	ncall	AddChild(this, [0xd3173778], _i-1, [0xd31737c8])
000584:0x00268fe0:	movefm	[0xd3173750], parent
000584:0x00268ff0:	ncall	AddChild([0xd3173750], this, _i-1, false)
000584:0x00269008:	jump	0x269090
000589:0x00269010:	cmpcm	m_ParentObject, null
000589:0x00269020:	beq	0x269090
000589:0x00269028:	movefm	[0xb5b006f0], m_ParentObject
000589:0x00269038:	ncalli	Object.ToDelete()
000589:0x00269040:	cmpi	#return, _i0
000589:0x00269050:	bne	0x269090
000591:0x00269058:	movefm	[0xd3173818], m_ParentObject
000591:0x00269068:	ncall	RemoveChild([0xd3173818], this, true)
000592:0x00269080:	movetm	m_ParentObject, null
000592:0x00269090:	rts
Particle::SetParticleParam()
000613:0x00269098:	cmpcm	m_ParticleEffect, null
000613:0x002690a8:	bne	0x2690b8
000614:0x002690b0:	rts
000616:0x002690b8:	movefm	@c00, m_ParticleEffect
000616:0x002690c8:	icall	SetParticleParm(@c00, _i-1, parameter_id, value)
000616:0x002690e0:	rts
Particle::SetParameter()
000627:0x002690e8:	cmpcm	m_ParticleEffect, null
000627:0x002690f8:	bne	0x269108
000628:0x00269100:	rts
000630:0x00269108:	movefm	@c00, m_ParticleEffect
000630:0x00269118:	icall	SetParticleParm(@c00, emitter, parameter, value)
000630:0x00269130:	rts
Particle::GetParameter()
000641:0x00269138:	cmpcm	m_ParticleEffect, null
000641:0x00269148:	bne	0x269168
000642:0x00269150:	move	value, value
000642:0x00269160:	rts
000644:0x00269168:	movefm	@c00, m_ParticleEffect
000644:0x00269178:	icall	GetParticleParm(@c00, emitter, parameter, value)
000644:0x00269190:	move	value, value
000644:0x002691a0:	rts
Particle::GetParameterEx()
000655:0x002691d0:	cmpcm	m_ParticleEffect, null
000655:0x002691e0:	bne	0x269200
000656:0x002691e8:	imove	#return, 0.00000
000656:0x002691f8:	rts
000659:0x00269200:	movefm	@c00, m_ParticleEffect
000659:0x00269210:	icall	GetParticleParm(@c00, emitter, parameter, value)
000660:0x00269228:	move	#return, value
000660:0x00269238:	rts
000660:0x00269240:	rts
Particle::ScaleParticleParamFromOriginal()
000670:0x002692c0:	cmpcm	m_ParticleEffect, null
000670:0x002692d0:	bne	0x2692e0
000671:0x002692d8:	rts
000673:0x002692e0:	movefm	@c00, m_ParticleEffect
000673:0x002692f0:	icall	GetParticleEmitorCount(@c00)
000673:0x00269300:	move	emitors, #return
000674:0x00269310:	imove	i, 0x000000
000674:0x00269320:	jump	0x269330
000674:0x00269328:	inc	i
000674:0x00269330:	cmpi	i, emitors
000674:0x00269340:	bge	0x2693c0
000677:0x00269348:	movefm	@c00, m_ParticleEffect
000677:0x00269358:	icall	GetParticleParmOriginal(@c00, i, parameter_id, value)
000678:0x00269370:	movefm	@c00, m_ParticleEffect
000678:0x00269380:	mulf	@f01, value, coef
000678:0x00269390:	move	@f00, @f01
000678:0x002693a0:	icall	SetParticleParm(@c00, i, parameter_id, @f00)
000678:0x002693b8:	jump	0x269328
000678:0x002693c0:	rts
Particle::ScaleParticleParam()
000689:0x00269440:	cmpcm	m_ParticleEffect, null
000689:0x00269450:	bne	0x269460
000690:0x00269458:	rts
000692:0x00269460:	movefm	@c00, m_ParticleEffect
000692:0x00269470:	icall	GetParticleEmitorCount(@c00)
000692:0x00269480:	move	emitors, #return
000693:0x00269490:	imove	i, 0x000000
000693:0x002694a0:	jump	0x2694b0
000693:0x002694a8:	inc	i
000693:0x002694b0:	cmpi	i, emitors
000693:0x002694c0:	bge	0x269540
000696:0x002694c8:	movefm	@c00, m_ParticleEffect
000696:0x002694d8:	icall	GetParticleParm(@c00, i, parameter_id, value)
000697:0x002694f0:	movefm	@c00, m_ParticleEffect
000697:0x00269500:	mulf	@f01, value, coef
000697:0x00269510:	move	@f00, @f01
000697:0x00269520:	icall	SetParticleParm(@c00, i, parameter_id, @f00)
000697:0x00269538:	jump	0x2694a8
000697:0x00269540:	rts
Particle::IncrementParticleParamFromOriginal()
000709:0x002695c0:	cmpcm	m_ParticleEffect, null
000709:0x002695d0:	bne	0x2695e0
000710:0x002695d8:	rts
000712:0x002695e0:	movefm	@c00, m_ParticleEffect
000712:0x002695f0:	icall	GetParticleEmitorCount(@c00)
000712:0x00269600:	move	emitors, #return
000713:0x00269610:	imove	i, 0x000000
000713:0x00269620:	jump	0x269630
000713:0x00269628:	inc	i
000713:0x00269630:	cmpi	i, emitors
000713:0x00269640:	bge	0x2696c0
000716:0x00269648:	movefm	@c00, m_ParticleEffect
000716:0x00269658:	icall	GetParticleParmOriginal(@c00, i, parameter_id, param)
000717:0x00269670:	movefm	@c00, m_ParticleEffect
000717:0x00269680:	addf	@f01, param, value
000717:0x00269690:	move	@f00, @f01
000717:0x002696a0:	icall	SetParticleParm(@c00, i, parameter_id, @f00)
000717:0x002696b8:	jump	0x269628
000717:0x002696c0:	rts
Particle::IncrementParticleParam()
000729:0x00269740:	cmpcm	m_ParticleEffect, null
000729:0x00269750:	bne	0x269760
000730:0x00269758:	rts
000732:0x00269760:	movefm	@c00, m_ParticleEffect
000732:0x00269770:	icall	GetParticleEmitorCount(@c00)
000732:0x00269780:	move	emitors, #return
000733:0x00269790:	imove	i, 0x000000
000733:0x002697a0:	jump	0x2697b0
000733:0x002697a8:	inc	i
000733:0x002697b0:	cmpi	i, emitors
000733:0x002697c0:	bge	0x269840
000736:0x002697c8:	movefm	@c00, m_ParticleEffect
000736:0x002697d8:	icall	GetParticleParm(@c00, i, parameter_id, param)
000737:0x002697f0:	movefm	@c00, m_ParticleEffect
000737:0x00269800:	addf	@f01, param, value
000737:0x00269810:	move	@f00, @f01
000737:0x00269820:	icall	SetParticleParm(@c00, i, parameter_id, @f00)
000737:0x00269838:	jump	0x2697a8
000737:0x00269840:	rts
Particle::IsWiggling()
000755:0x00269848:	cmpcm	m_RandomizeOri, null
000755:0x00269858:	beq	0x2698b0
000755:0x00269860:	movefm	[0xb5b3c700], m_RandomizeOri
000755:0x00269870:	call	
000755:0x00269880:	cmpi	#return, _i0
000755:0x00269890:	beq	0x2698b0
000755:0x00269898:	imove	#return, 0x000001
000755:0x002698a8:	jump	0x2698c0
000755:0x002698b0:	imove	#return, 0x000000
000755:0x002698c0:	rts
000755:0x002698c8:	rts
Particle::SetWiggle()
000767:0x002698d0:	cmpf	random_angle, _f0.000000
000767:0x002698e0:	bne	0x269900
000767:0x002698e8:	cmpf	random_interval, _f0.000000
000767:0x002698f8:	beq	0x2699f0
000769:0x00269900:	move	m_MaxOriWiggle, random_angle
000770:0x00269910:	move	m_MaxOriInterval, random_interval
000772:0x00269920:	cmpcm	m_RandomizeOri, null
000772:0x00269930:	bne	0x269960
000773:0x00269938:	new	m_RandomizeOri, Timer
000775:0x00269960:	movefm	[0xb5b3c700], m_RandomizeOri
000775:0x00269970:	call	
000775:0x00269980:	cmpi	#return, _i0
000775:0x00269990:	bne	0x2699e8
000776:0x00269998:	icall	RandomFloat(_f0.000000, m_MaxOriInterval)
000776:0x002699a8:	movetm	params, null
000776:0x002699b8:	movefm	[0xb5b3c700], m_RandomizeOri
000776:0x002699c8:	call	
000776:0x002699e8:	jump	0x269a00
000780:0x002699f0:	call	
000780:0x00269a00:	rts
Particle::StopWiggle()
000789:0x00269a08:	cmpcm	m_RandomizeOri, null
000789:0x00269a18:	beq	0x269a40
000791:0x00269a20:	movefm	[0xb5b3c700], m_RandomizeOri
000791:0x00269a30:	call	
000794:0x00269a40:	imove	m_MaxOriWiggle, 0.00000
000795:0x00269a50:	imove	m_MaxOriInterval, 0.00000
000795:0x00269a60:	rts
Particle::RandomizeOrientation()
000803:0x00269b30:	imove	m_WiggleProcessing, 0x000001
000805:0x00269b40:	cmpcm	m_ParentObject, null
000805:0x00269b50:	beq	0x269c88
000807:0x00269b58:	movefm	[0xb5b3c700], m_RandomizeOri
000807:0x00269b68:	call	
000807:0x00269b78:	cmpi	#return, _i0
000807:0x00269b88:	bne	0x269be0
000809:0x00269b90:	icall	RandomFloat(_f0.000000, m_MaxOriInterval)
000809:0x00269ba0:	movetm	params, NULL
000809:0x00269bb0:	movefm	[0xb5b3c700], m_RandomizeOri
000809:0x00269bc0:	call	
000812:0x00269be0:	movem	old_parent, m_ParentObject
000813:0x00269bf0:	movetm	parent, null
000813:0x00269c00:	call	
000814:0x00269c20:	movev	local_pos, m_DefaultPos
000814:0x00269c30:	call	
000814:0x00269c40:	addv	@v01, m_DefaultOri, #return
000814:0x00269c50:	movev	@v00, @v01
000814:0x00269c60:	call	
000814:0x00269c80:	release	old_parent
000817:0x00269c88:	imove	m_WiggleProcessing, 0x000000
000817:0x00269c98:	rts
Particle::RandWiggleVector()
000825:0x00269ca0:	call	
000825:0x00269cb0:	push	#return
000825:0x00269cb8:	call	
000825:0x00269cc8:	move	@f00, #return
000825:0x00269cd8:	pop	#return
000825:0x00269ce0:	push	#return
000825:0x00269ce8:	call	
000825:0x00269cf8:	move	@f01, #return
000825:0x00269d08:	pop	#return
000825:0x00269d10:	ncall	Vector(#return, @f00, @f01)
000825:0x00269d28:	movev	#return, #return
000825:0x00269d38:	rts
000825:0x00269d40:	rts
Particle::RandWiggleFloat()
000833:0x00269d48:	subf	@f02, _f0.000000, m_MaxOriWiggle
000833:0x00269d58:	move	max, m_MaxOriWiggle
000833:0x00269d68:	call	RandomFloatInclusive(@f02, max)
000833:0x00269d80:	move	#return, #return
000833:0x00269d90:	rts
000833:0x00269d98:	rts
EffectSound::EffectSound()
//scripts/3_Game/effects\effectsound.c
000062:0x00269dd0:	new	Event_OnSoundWaveStarted, ScriptInvoker
000062:0x00269df0:	new	Event_OnSoundWaveEnded, ScriptInvoker
000062:0x00269e10:	new	Event_OnSoundFadeInStopped, ScriptInvoker
000062:0x00269e30:	new	Event_OnSoundFadeOutStarted, ScriptInvoker
000064:0x00269e50:	imove	m_SoundWaveKind, 0x000001
000065:0x00269e60:	imove	m_SoundWaveVolume, 0.00000
000066:0x00269e70:	imove	m_SoundWaveVolumeMax, 1.00000
000067:0x00269e80:	imove	m_SoundAutodestroy, 0x000000
000068:0x00269e90:	imove	m_SoundWaveStopping, 0x000000
000068:0x00269ea0:	rts
EffectSound::InitEffect()
000084:0x00269f28:	call	
000087:0x00269f38:	icall	SetInstance([0xb5d67ee8], this)
000087:0x00269f48:	movefm	[0xb425b340], Event_OnStarted
000087:0x00269f58:	icall	
000088:0x00269f68:	icall	SetInstance([0xb5d67f28], this)
000088:0x00269f78:	movefm	[0xb425b340], Event_OnStopped
000088:0x00269f88:	icall	
000088:0x00269f98:	rts
EffectSound::GetDebugName()
000097:0x0026a018:	cmps	m_SoundSetName, _s''
000097:0x0026a028:	beq	0x26a048
000099:0x0026a030:	moves	identifier, m_SoundSetName
000099:0x0026a040:	jump	0x26a058
000103:0x0026a048:	moves	identifier, _s'NO_SOUNDSET'
000106:0x0026a058:	call	
000106:0x0026a068:	icall	Format(_s'%1:%2', #return, identifier, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000106:0x0026a098:	moves	#return, #return
000106:0x0026a0a8:	rts
000106:0x0026a0b0:	rts
EffectSound::GetEffectType()
000122:0x0026a0b8:	imove	#return, 0x000001
000122:0x0026a0c8:	rts
000122:0x0026a0d0:	rts
EffectSound::IsSound()
000131:0x0026a0d8:	imove	#return, 0x000001
000131:0x0026a0e8:	rts
000131:0x0026a0f0:	rts
EffectSound::SoundPlayEx()
000151:0x0026a160:	call	
000153:0x0026a170:	cmps	m_SoundSetName, _s''
000153:0x0026a180:	beq	0x26a450
000155:0x0026a188:	call	
000155:0x0026a198:	movem	params, params
000155:0x0026a1a8:	release	params
000155:0x0026a1b0:	cmpi	#return, _i0
000155:0x0026a1c0:	beq	0x26a450
000157:0x0026a1c8:	cmpi	m_SetEnvVariables, _i0
000157:0x0026a1d8:	beq	0x26a290
000157:0x0026a1e0:	cmpcm	m_SoundParams, null
000157:0x0026a1f0:	beq	0x26a290
000159:0x0026a1f8:	call	
000159:0x0026a208:	movefm	[0xb5b06798], m_SoundObjectBuilder
000159:0x0026a218:	ncalli	SoundObjectBuilder.UpdateEnvSoundControllers(#return)
000160:0x0026a228:	movefm	[0xb5b06798], m_SoundObjectBuilder
000160:0x0026a238:	call	
000160:0x0026a248:	movem	m_SoundObject, #return
000160:0x0026a258:	release	#return
000161:0x0026a260:	move	[0xb5bc3210], m_SoundWaveKind
000161:0x0026a270:	movefm	[0xb5b06ba8], m_SoundObject
000161:0x0026a280:	ncalli	SoundObject.SetKind([0xb5bc3210])
000164:0x0026a290:	cmpcm	m_SoundObject, null
000164:0x0026a2a0:	beq	0x26a440
000166:0x0026a2a8:	call	
000166:0x0026a2b8:	call	
000167:0x0026a2d0:	ncall	GetGame()
000167:0x0026a2d8:	ncalli	CGame.GetSoundScene()
000167:0x0026a2e0:	movefm	[0xb5c2ca40], m_SoundObject
000167:0x0026a2f0:	movefm	[0xb5c2ca68], m_SoundObjectBuilder
000167:0x0026a300:	ncalli	AbstractSoundScene.Play3D([0xb5c2ca40], [0xb5c2ca68])
000167:0x0026a310:	movetm	m_SoundWaveObject, #return
000168:0x0026a320:	cmpcm	m_SoundWaveObject, null
000168:0x0026a330:	bne	0x26a360
000169:0x0026a338:	imove	#return, 0x000000
000169:0x0026a348:	movem	params, params
000169:0x0026a358:	rts
000172:0x0026a360:	movefm	[0xb5b06090], m_SoundWaveObject
000172:0x0026a370:	icall	
000172:0x0026a378:	cmpi	#return, _i0
000172:0x0026a388:	beq	0x26a3a8
000173:0x0026a390:	call	
000173:0x0026a3a0:	jump	0x26a410
000175:0x0026a3a8:	movefm	[0xb5b06090], m_SoundWaveObject
000175:0x0026a3b8:	call	
000175:0x0026a3c8:	movefm	@c00, #return
000175:0x0026a3d8:	movefm	@c01, Event_OnSoundWaveHeaderLoaded
000175:0x0026a3e8:	icall	SetInstance([0xb5d68138], this)
000175:0x0026a3f8:	icall	
000175:0x0026a408:	release	#return
000177:0x0026a410:	imove	#return, 0x000001
000177:0x0026a420:	movem	params, params
000177:0x0026a430:	rts
000177:0x0026a438:	jump	0x26a450
000181:0x0026a440:	call	
000186:0x0026a450:	imove	#return, 0x000000
000186:0x0026a460:	movem	params, params
000186:0x0026a470:	rts
000186:0x0026a478:	movem	params, params
000186:0x0026a488:	rts
EffectSound::SoundPlay()
000196:0x0026a4b8:	call	
000196:0x0026a4c8:	movem	params, params
000196:0x0026a4d8:	release	params
000196:0x0026a4e0:	move	#return, #return
000196:0x0026a4f0:	release	params
000196:0x0026a4f8:	rts
000196:0x0026a500:	release	params
000196:0x0026a508:	rts
EffectSound::Start()
000204:0x0026a510:	call	
000204:0x0026a520:	rts
EffectSound::SoundStop()
000213:0x0026a528:	call	
000215:0x0026a538:	call	
000215:0x0026a548:	cmpi	#return, _i0
000215:0x0026a558:	beq	0x26a5e8
000217:0x0026a560:	cmpf	m_SoundFadeOutDuration, _f0.000000
000217:0x0026a570:	ble	0x26a5c8
000217:0x0026a578:	cmpi	m_SoundWaveStopping, _i0
000217:0x0026a588:	bne	0x26a5c8
000219:0x0026a590:	imove	m_SoundWaveStopping, 0x000001
000220:0x0026a5a0:	imove	m_SoundWaveStarting, 0x000000
000221:0x0026a5b0:	move	m_SoundFadeOutStartTime, m_SoundWaveTime
000221:0x0026a5c0:	jump	0x26a5e0
000225:0x0026a5c8:	movefm	[0xb5b06090], m_SoundWaveObject
000225:0x0026a5d8:	icall	
000225:0x0026a5e0:	jump	0x26a5f8
000230:0x0026a5e8:	call	
000230:0x0026a5f8:	rts
EffectSound::Stop()
000239:0x0026a600:	call	
000239:0x0026a610:	rts
EffectSound::SoundReset()
000247:0x0026a618:	imove	m_IsPlaying, 0x000000
000248:0x0026a628:	imove	m_SoundWaveIsPlaying, 0x000000
000249:0x0026a638:	move	m_SoundWaveVolume, m_SoundWaveVolumeMax
000250:0x0026a648:	imove	m_SoundWaveTime, 0.00000
000251:0x0026a658:	imove	m_SoundFadeOutInitVolume, 0.00000
000252:0x0026a668:	imove	m_SoundFadeOutStartTime, 0.00000
000254:0x0026a678:	cmpcm	m_SoundWaveObject, null
000254:0x0026a688:	beq	0x26a6c8
000256:0x0026a690:	movefm	[0xb5b06090], m_SoundWaveObject
000256:0x0026a6a0:	icall	
000257:0x0026a6a8:	movefm	[0xb5b06090], m_SoundWaveObject
000257:0x0026a6b8:	icall	
000257:0x0026a6c8:	rts
EffectSound::IsSoundPlaying()
000267:0x0026a6d0:	move	#return, m_SoundWaveIsPlaying
000267:0x0026a6e0:	rts
000267:0x0026a6e8:	rts
EffectSound::IsPlaying()
000275:0x0026a6f0:	call	
000275:0x0026a700:	move	#return, #return
000275:0x0026a710:	rts
000275:0x0026a718:	rts
EffectSound::SoundLoadEx()
000293:0x0026a748:	cmpcm	m_SoundParams, null
000293:0x0026a758:	beq	0x26a790
000293:0x0026a760:	movefm	[0xb5b066e8], m_SoundParams
000293:0x0026a770:	ncalli	SoundParams.IsValid()
000293:0x0026a778:	cmpi	#return, _i0
000293:0x0026a788:	bne	0x26a978
000295:0x0026a790:	cmpcm	params, null
000295:0x0026a7a0:	bne	0x26a7e0
000297:0x0026a7a8:	moves	name, m_SoundSetName
000297:0x0026a7b8:	new	params, SoundParams
000301:0x0026a7e0:	movem	m_SoundParams, params
000302:0x0026a7f0:	movefm	[0xb5b066e8], m_SoundParams
000302:0x0026a800:	ncalli	SoundParams.IsValid()
000302:0x0026a808:	cmpi	#return, _i0
000302:0x0026a818:	bne	0x26a858
000304:0x0026a820:	call	
000305:0x0026a830:	imove	#return, 0x000000
000305:0x0026a840:	movem	params, params
000305:0x0026a850:	rts
000308:0x0026a858:	movem	soundParams, m_SoundParams
000308:0x0026a868:	new	m_SoundObjectBuilder, SoundObjectBuilder
000309:0x0026a890:	cmpi	m_SetEnvVariables, _i0
000309:0x0026a8a0:	beq	0x26a8d8
000311:0x0026a8a8:	call	
000311:0x0026a8b8:	movefm	[0xb5b06798], m_SoundObjectBuilder
000311:0x0026a8c8:	ncalli	SoundObjectBuilder.UpdateEnvSoundControllers(#return)
000314:0x0026a8d8:	movefm	[0xb5b06798], m_SoundObjectBuilder
000314:0x0026a8e8:	call	
000314:0x0026a8f8:	movem	m_SoundObject, #return
000314:0x0026a908:	release	#return
000316:0x0026a910:	cmpcm	m_SoundObject, null
000316:0x0026a920:	beq	0x26a960
000318:0x0026a928:	move	[0xb5bc3210], m_SoundWaveKind
000318:0x0026a938:	movefm	[0xb5b06ba8], m_SoundObject
000318:0x0026a948:	ncalli	SoundObject.SetKind([0xb5bc3210])
000318:0x0026a958:	jump	0x26a970
000322:0x0026a960:	call	
000322:0x0026a970:	jump	0x26a978
000330:0x0026a978:	imove	#return, 0x000001
000330:0x0026a988:	movem	params, params
000330:0x0026a998:	rts
000330:0x0026a9a0:	movem	params, params
000330:0x0026a9b0:	rts
EffectSound::SoundLoad()
000340:0x0026a9e0:	call	
000340:0x0026a9f0:	movem	params, params
000340:0x0026aa00:	release	params
000340:0x0026aa08:	move	#return, #return
000340:0x0026aa18:	release	params
000340:0x0026aa20:	rts
000340:0x0026aa28:	release	params
000340:0x0026aa30:	rts
EffectSound::IsSoundValid()
000348:0x0026aa38:	movefm	[0xb5b066e8], m_SoundParams
000348:0x0026aa48:	ncalli	SoundParams.IsValid()
000348:0x0026aa50:	move	#return, #return
000348:0x0026aa60:	rts
000348:0x0026aa68:	rts
EffectSound::ValidateSoundWave()
000357:0x0026ab40:	movefm	[0xb5b06090], m_SoundWaveObject
000357:0x0026ab50:	icall	
000357:0x0026ab58:	move	m_SoundWaveLenght, #return
000359:0x0026ab68:	call	
000359:0x0026ab78:	cmpi	#return, _i0
000359:0x0026ab88:	beq	0x26acf0
000361:0x0026ab90:	cmpf	m_SoundFadeInDuration, _f0.000000
000361:0x0026aba0:	ble	0x26abe8
000363:0x0026aba8:	movefm	[0xb5b06090], m_SoundWaveObject
000363:0x0026abb8:	icall	
000364:0x0026abc8:	subf	@f00, m_SoundWaveLenght, m_SoundFadeInDuration
000364:0x0026abd8:	move	m_SoundFadeOutStartTime, @f00
000367:0x0026abe8:	move	loop, m_SoundLoop
000367:0x0026abf8:	call	
000369:0x0026ac08:	imove	m_SoundWaveStarting, 0x000001
000371:0x0026ac18:	movefm	[0xb5b06090], m_SoundWaveObject
000371:0x0026ac28:	call	
000371:0x0026ac38:	movem	events, #return
000371:0x0026ac48:	release	#return
000372:0x0026ac50:	movefm	@c00, events
000372:0x0026ac60:	movefm	@c01, Event_OnSoundWaveStarted
000372:0x0026ac70:	icall	SetInstance([0xb5d68b00], this)
000372:0x0026ac80:	icall	
000373:0x0026ac90:	movefm	@c00, events
000373:0x0026aca0:	movefm	@c01, Event_OnSoundWaveEnded
000373:0x0026acb0:	icall	SetInstance([0xb5d68b40], this)
000373:0x0026acc0:	icall	
000375:0x0026acd0:	call	
000375:0x0026ace0:	release	events
000375:0x0026ace8:	jump	0x26ad08
000379:0x0026acf0:	movefm	[0xb5b06090], m_SoundWaveObject
000379:0x0026ad00:	icall	
000379:0x0026ad08:	rts
EffectSound::SoundWaveValidation()
000389:0x0026add8:	imove	valid, 0x000001
000391:0x0026ade8:	call	
000391:0x0026adf8:	cmpf	m_SoundFadeInDuration, #return
000391:0x0026ae08:	ble	0x26ae30
000393:0x0026ae10:	call	
000394:0x0026ae20:	imove	valid, 0x000000
000397:0x0026ae30:	call	
000397:0x0026ae40:	cmpf	m_SoundFadeOutDuration, #return
000397:0x0026ae50:	ble	0x26ae78
000399:0x0026ae58:	call	
000400:0x0026ae68:	imove	valid, 0x000000
000403:0x0026ae78:	addf	@f01, m_SoundFadeOutDuration, m_SoundFadeInDuration
000403:0x0026ae88:	move	@f00, @f01
000403:0x0026ae98:	call	
000403:0x0026aea8:	cmpf	@f00, #return
000403:0x0026aeb8:	ble	0x26aee0
000405:0x0026aec0:	call	
000406:0x0026aed0:	imove	valid, 0x000000
000409:0x0026aee0:	move	#return, valid
000409:0x0026aef0:	rts
000409:0x0026aef8:	rts
EffectSound::UpdateEvents()
000419:0x0026af00:	cmpcm	m_SoundWaveObject, null
000419:0x0026af10:	beq	0x26af30
000421:0x0026af18:	call	
000421:0x0026af28:	jump	0x26af40
000425:0x0026af30:	call	
000425:0x0026af40:	rts
EffectSound::Event_OnFrameUpdate()
000446:0x0026af48:	call	
000446:0x0026af58:	cmpi	#return, _i0
000446:0x0026af68:	beq	0x26b2a8
000449:0x0026af70:	cmpcm	m_SoundParent, null
000449:0x0026af80:	beq	0x26afd0
000451:0x0026af88:	call	
000451:0x0026af98:	movefm	[0xb5b006f0], m_SoundParent
000451:0x0026afa8:	call	
000451:0x0026afb8:	call	
000455:0x0026afd0:	cmpi	m_SoundWaveStarting, _i0
000455:0x0026afe0:	beq	0x26b110
000457:0x0026afe8:	cmpf	m_SoundFadeInDuration, _f0.000000
000457:0x0026aff8:	ble	0x26b0e0
000459:0x0026b000:	call	
000459:0x0026b010:	divf	@f02, time_delta, m_SoundFadeInDuration
000459:0x0026b020:	move	@f01, @f02
000459:0x0026b030:	addf	@f01, #return, @f01
000459:0x0026b040:	move	@f00, @f01
000459:0x0026b050:	call	
000461:0x0026b060:	call	
000461:0x0026b070:	move	@f00, #return
000461:0x0026b080:	cmpf	@f00, m_SoundWaveVolumeMax
000461:0x0026b090:	blt	0x26b0d8
000463:0x0026b098:	call	
000464:0x0026b0a8:	move	volume, m_SoundWaveVolumeMax
000464:0x0026b0b8:	call	
000465:0x0026b0c8:	imove	m_SoundWaveStarting, 0x000000
000465:0x0026b0d8:	jump	0x26b110
000470:0x0026b0e0:	move	volume, m_SoundWaveVolumeMax
000470:0x0026b0f0:	call	
000471:0x0026b100:	imove	m_SoundWaveStarting, 0x000000
000476:0x0026b110:	cmpi	m_SoundWaveStopping, _i0
000476:0x0026b120:	beq	0x26b288
000478:0x0026b128:	cmpf	m_SoundFadeOutDuration, _f0.000000
000478:0x0026b138:	ble	0x26b210
000480:0x0026b140:	cmpf	m_SoundFadeOutInitVolume, _f0.000000
000480:0x0026b150:	bne	0x26b188
000482:0x0026b158:	call	
000482:0x0026b168:	move	m_SoundFadeOutInitVolume, #return
000483:0x0026b178:	call	
000485:0x0026b188:	call	
000485:0x0026b198:	divf	@f03, m_SoundFadeOutInitVolume, m_SoundFadeOutDuration
000485:0x0026b1a8:	move	@f02, @f03
000485:0x0026b1b8:	mulf	@f02, @f02, time_delta
000485:0x0026b1c8:	move	@f01, @f02
000485:0x0026b1d8:	subf	@f01, #return, @f01
000485:0x0026b1e8:	move	@f00, @f01
000485:0x0026b1f8:	call	
000485:0x0026b208:	jump	0x26b220
000489:0x0026b210:	call	
000492:0x0026b220:	call	
000492:0x0026b230:	move	@f00, #return
000492:0x0026b240:	cmpf	@f00, _f0.000000
000492:0x0026b250:	bgt	0x26b288
000494:0x0026b258:	cmpcm	m_SoundWaveObject, null
000494:0x0026b268:	beq	0x26b288
000496:0x0026b270:	movefm	[0xb5b06090], m_SoundWaveObject
000496:0x0026b280:	icall	
000502:0x0026b288:	move	@f00, time_delta
000502:0x0026b298:	addf	m_SoundWaveTime, m_SoundWaveTime, @f00
000502:0x0026b2a8:	rts
EffectSound::Event_OnRegistered()
000513:0x0026b2f0:	call	
000515:0x0026b300:	movefm	[0xb425b340], Event_OnSoundWaveEnded
000515:0x0026b310:	icall	
000515:0x0026b320:	rts
EffectSound::Event_OnUnregistered()
000524:0x0026b368:	call	
000526:0x0026b378:	movefm	[0xb425b340], Event_OnSoundWaveEnded
000526:0x0026b388:	icall	
000526:0x0026b398:	rts
EffectSound::Event_OnSoundWaveStarted()
000535:0x0026b3a0:	imove	m_SoundWaveIsPlaying, 0x000001
000537:0x0026b3b0:	movefm	[0xb425b340], Event_OnSoundWaveStarted
000537:0x0026b3c0:	icall	
000539:0x0026b3f0:	call	
000539:0x0026b400:	rts
EffectSound::Event_OnSoundWaveEnded()
000548:0x0026b408:	imove	m_SoundWaveIsPlaying, 0x000000
000550:0x0026b418:	movefm	[0xb425b340], Event_OnSoundWaveEnded
000550:0x0026b428:	icall	
000552:0x0026b458:	call	
000552:0x0026b468:	rts
EffectSound::Event_OnSoundFadeInStopped()
000561:0x0026b470:	movefm	[0xb425b340], Event_OnSoundFadeInStopped
000561:0x0026b480:	icall	
000561:0x0026b4b0:	rts
EffectSound::Event_OnSoundFadeOutStarted()
000570:0x0026b4b8:	movefm	[0xb425b340], Event_OnSoundFadeOutStarted
000570:0x0026b4c8:	icall	
000570:0x0026b4f8:	rts
EffectSound::SetAutodestroy()
000589:0x0026b500:	call	
000590:0x0026b510:	move	m_SoundAutodestroy, auto_destroy
000590:0x0026b520:	rts
EffectSound::IsAutodestroy()
000599:0x0026b528:	call	
000599:0x0026b538:	move	#return, #return
000599:0x0026b548:	rts
000599:0x0026b550:	rts
EffectSound::SetSoundAutodestroy()
000608:0x0026b558:	call	
000608:0x0026b568:	rts
EffectSound::IsSoundAutodestroy()
000617:0x0026b570:	move	#return, m_SoundAutodestroy
000617:0x0026b580:	rts
000617:0x0026b588:	rts
EffectSound::SetParent()
000637:0x0026b590:	call	
000638:0x0026b5a0:	movem	m_SoundParent, parent_obj
000638:0x0026b5b0:	rts
EffectSound::GetParent()
000648:0x0026b5b8:	cmpcm	m_SoundParent, null
000648:0x0026b5c8:	beq	0x26b5f0
000649:0x0026b5d0:	movem	#return, m_SoundParent
000649:0x0026b5e0:	rts
000649:0x0026b5e8:	jump	0x26b618
000651:0x0026b5f0:	call	
000651:0x0026b600:	movem	#return, #return
000651:0x0026b610:	rts
000651:0x0026b618:	rts
EffectSound::SetCurrentParent()
000663:0x0026b620:	call	
000664:0x0026b638:	movem	m_SoundParent, parent_obj
000664:0x0026b648:	rts
EffectSound::GetCurrentParent()
000675:0x0026b650:	cmpcm	m_SoundParent, null
000675:0x0026b660:	beq	0x26b688
000676:0x0026b668:	movem	#return, m_SoundParent
000676:0x0026b678:	rts
000676:0x0026b680:	jump	0x26b6b8
000678:0x0026b688:	call	
000678:0x0026b698:	movem	#return, #return
000678:0x0026b6a8:	release	#return
000678:0x0026b6b0:	rts
000678:0x0026b6b8:	rts
EffectSound::SetCurrentPosition()
000688:0x0026b6c0:	call	
000690:0x0026b6d8:	cmpcm	m_SoundObject, null
000690:0x0026b6e8:	beq	0x26b710
000691:0x0026b6f0:	movefm	[0xb5b06ba8], m_SoundObject
000691:0x0026b700:	ncalli	SoundObject.SetPosition(pos)
000691:0x0026b710:	rts
EffectSound::GetCurrentPosition()
000700:0x0026b718:	cmpcm	m_SoundObject, null
000700:0x0026b728:	beq	0x26b768
000701:0x0026b730:	movefm	[0xb5b06ba8], m_SoundObject
000701:0x0026b740:	ncalli	SoundObject.GetPosition()
000701:0x0026b748:	movev	#return, #return
000701:0x0026b758:	rts
000701:0x0026b760:	jump	0x26b790
000703:0x0026b768:	call	
000703:0x0026b778:	movev	#return, #return
000703:0x0026b788:	rts
000703:0x0026b790:	rts
EffectSound::SetCurrentLocalPosition()
000713:0x0026b7c0:	call	
000715:0x0026b7d8:	cmpcm	m_SoundObject, null
000715:0x0026b7e8:	beq	0x26b890
000717:0x0026b7f0:	call	
000717:0x0026b800:	movem	parent, #return
000717:0x0026b810:	release	#return
000719:0x0026b818:	cmpcm	parent, null
000719:0x0026b828:	beq	0x26b868
000720:0x0026b830:	call	
000720:0x0026b840:	movefm	[0xb5b06ba8], m_SoundObject
000720:0x0026b850:	ncalli	SoundObject.SetPosition(#return)
000720:0x0026b860:	jump	0x26b888
000722:0x0026b868:	movefm	[0xb5b06ba8], m_SoundObject
000722:0x0026b878:	ncalli	SoundObject.SetPosition(pos)
000722:0x0026b888:	release	parent
000722:0x0026b890:	rts
EffectSound::GetCurrentLocalPosition()
000732:0x0026b8c0:	cmpcm	m_SoundObject, null
000732:0x0026b8d0:	beq	0x26b9b0
000734:0x0026b8d8:	call	
000734:0x0026b8e8:	movem	parent, #return
000734:0x0026b8f8:	release	#return
000736:0x0026b900:	cmpcm	parent, null
000736:0x0026b910:	beq	0x26b968
000737:0x0026b918:	movefm	[0xb5b06ba8], m_SoundObject
000737:0x0026b928:	ncalli	SoundObject.GetPosition()
000737:0x0026b930:	call	
000737:0x0026b940:	movev	#return, #return
000737:0x0026b950:	release	parent
000737:0x0026b958:	rts
000737:0x0026b960:	jump	0x26b9a0
000739:0x0026b968:	movefm	[0xb5b06ba8], m_SoundObject
000739:0x0026b978:	ncalli	SoundObject.GetPosition()
000739:0x0026b980:	movev	#return, #return
000739:0x0026b990:	release	parent
000739:0x0026b998:	rts
000739:0x0026b9a0:	release	parent
000739:0x0026b9a8:	jump	0x26b9d8
000742:0x0026b9b0:	call	
000742:0x0026b9c0:	movev	#return, #return
000742:0x0026b9d0:	rts
000742:0x0026b9d8:	rts
EffectSound::SetSoundWaveKind()
000752:0x0026b9e0:	move	m_SoundWaveKind, wave_kind
000752:0x0026b9f0:	rts
EffectSound::SetSoundSet()
000762:0x0026b9f8:	moves	m_SoundSetName, snd
000762:0x0026ba08:	rts
EffectSound::GetSoundSet()
000771:0x0026ba10:	moves	#return, m_SoundSetName
000771:0x0026ba20:	rts
000771:0x0026ba28:	rts
EffectSound::SetSoundLoop()
000780:0x0026ba30:	move	m_SoundLoop, loop
000782:0x0026ba40:	cmpcm	m_SoundWaveObject, null
000782:0x0026ba50:	beq	0x26ba78
000783:0x0026ba58:	movefm	[0xb5b06090], m_SoundWaveObject
000783:0x0026ba68:	icall	
000783:0x0026ba78:	rts
EffectSound::SetEnviromentVariables()
000792:0x0026ba80:	move	m_SetEnvVariables, setEnvVariables
000792:0x0026ba90:	rts
EffectSound::GetSoundWaveLenght()
000802:0x0026ba98:	call	
000802:0x0026baa8:	move	#return, #return
000802:0x0026bab8:	rts
000802:0x0026bac0:	rts
EffectSound::GetSoundWaveLength()
000811:0x0026bac8:	move	#return, m_SoundWaveLenght
000811:0x0026bad8:	rts
000811:0x0026bae0:	rts
EffectSound::SetSoundVolume()
000820:0x0026bae8:	move	m_SoundWaveVolume, volume
000821:0x0026baf8:	cmpcm	m_SoundWaveObject, null
000821:0x0026bb08:	beq	0x26bb30
000822:0x0026bb10:	movefm	[0xb5b06090], m_SoundWaveObject
000822:0x0026bb20:	icall	
000822:0x0026bb30:	rts
EffectSound::GetSoundVolume()
000831:0x0026bb38:	move	#return, m_SoundWaveVolume
000831:0x0026bb48:	rts
000831:0x0026bb50:	rts
EffectSound::SetSoundMaxVolume()
000842:0x0026bb58:	move	m_SoundWaveVolumeMax, volume
000843:0x0026bb68:	cmpcm	m_SoundWaveObject, null
000843:0x0026bb78:	beq	0x26bba0
000844:0x0026bb80:	movefm	[0xb5b06090], m_SoundWaveObject
000844:0x0026bb90:	icall	
000844:0x0026bba0:	rts
EffectSound::GetSoundWaveTime()
000854:0x0026bba8:	move	#return, m_SoundWaveTime
000854:0x0026bbb8:	rts
000854:0x0026bbc0:	rts
EffectSound::SetSoundFadeIn()
000863:0x0026bbc8:	move	m_SoundFadeInDuration, fade_in
000863:0x0026bbd8:	rts
EffectSound::SetSoundFadeOut()
000872:0x0026bbe0:	move	m_SoundFadeOutDuration, fade_out
000872:0x0026bbf0:	rts
EffectSound::SoundError()
000884:0x0026bc20:	icall	Format(_s'%1: SoundSetName: '%2' :: %3', this, m_SoundSetName, err_msg, _c0, _c0, _c0, _c0, _c0, _c0)
000884:0x0026bc50:	icall	ErrorEx(#return, _i2)
000884:0x0026bc60:	rts
InventoryValidation::IsAuthoritative()
//scripts/3_Game/systems\inventory\inventory.c
000051:0x0026bc68:	cmpi	m_IsJuncture, _i0
000051:0x0026bc78:	bne	0x26bcb0
000051:0x0026bc80:	cmpi	m_IsRemote, _i0
000051:0x0026bc90:	bne	0x26bcb0
000051:0x0026bc98:	imove	#return, 0x000001
000051:0x0026bca8:	jump	0x26bcc0
000051:0x0026bcb0:	imove	#return, 0x000000
000051:0x0026bcc0:	rts
000051:0x0026bcc8:	rts
InventoryValidation::InventoryValidation()
000041:0x0026bcd0:	imove	m_IsJuncture, 0x000000
000041:0x0026bce0:	imove	m_IsRemote, 0x000000
000041:0x0026bcf0:	imove	m_Result, 0x000000
000041:0x0026bd00:	imove	m_Reason, 0x000000
000041:0x0026bd10:	rts
GameInventory::LocationCanAddEntityEx()
000335:0x0026bd18:	movefm	[0xb5bad6e8], inv_loc
000335:0x0026bd28:	ncall	LocationCanAddEntity([0xb5bad6e8])
000335:0x0026bd38:	move	#return, #return
000335:0x0026bd48:	rts
000335:0x0026bd50:	rts
GameInventory::GetInventoryCheckContext()
000360:0x0026bd58:	move	#return, m_inventory_check_context
000360:0x0026bd68:	rts
000360:0x0026bd70:	rts
GameInventory::LocationCanMoveEntitySyncCheck()
000365:0x0026bda0:	imove	m_inventory_check_context, 0x000001
000366:0x0026bdb0:	movefm	[0xb5bad978], src
000366:0x0026bdc0:	movefm	[0xb5bad9a0], dst
000366:0x0026bdd0:	ncall	LocationCanMoveEntity([0xb5bad978], [0xb5bad9a0])
000366:0x0026bde0:	move	result, #return
000367:0x0026bdf0:	imove	m_inventory_check_context, 0x000000
000368:0x0026be00:	move	#return, result
000368:0x0026be10:	rts
000368:0x0026be18:	rts
GameInventory::IsInCargo()
000382:0x0026be48:	new	lcn, InventoryLocation
000383:0x0026be68:	movefm	[0xb5bad1f8], lcn
000383:0x0026be78:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000384:0x0026be88:	ncalli	InventoryLocation.GetType()
000384:0x0026be90:	move	@m00, #return
000384:0x0026bea0:	cmpi	@m00, _i3
000384:0x0026beb0:	bne	0x26bed8
000386:0x0026beb8:	imove	#return, 0x000001
000386:0x0026bec8:	release	lcn
000386:0x0026bed0:	rts
000389:0x0026bed8:	imove	#return, 0x000000
000389:0x0026bee8:	release	lcn
000389:0x0026bef0:	rts
000389:0x0026bef8:	release	lcn
000389:0x0026bf00:	rts
GameInventory::IsAttachment()
000395:0x0026bf30:	new	lcn, InventoryLocation
000396:0x0026bf50:	movefm	[0xb5bad1f8], lcn
000396:0x0026bf60:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000397:0x0026bf70:	ncalli	InventoryLocation.GetType()
000397:0x0026bf78:	move	@m00, #return
000397:0x0026bf88:	cmpi	@m00, _i2
000397:0x0026bf98:	bne	0x26bfc0
000399:0x0026bfa0:	imove	#return, 0x000001
000399:0x0026bfb0:	release	lcn
000399:0x0026bfb8:	rts
000402:0x0026bfc0:	imove	#return, 0x000000
000402:0x0026bfd0:	release	lcn
000402:0x0026bfd8:	rts
000402:0x0026bfe0:	release	lcn
000402:0x0026bfe8:	rts
GameInventory::IsCargoInHiearchy()
000408:0x0026c040:	new	lcn, InventoryLocation
000409:0x0026c060:	movefm	[0xb5bad1f8], lcn
000409:0x0026c070:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000410:0x0026c080:	ncalli	InventoryLocation.GetParent()
000410:0x0026c088:	movetm	parent, #return
000412:0x0026c098:	cmpcm	parent, null
000412:0x0026c0a8:	beq	0x26c180
000414:0x0026c0b0:	ncalli	InventoryLocation.GetType()
000414:0x0026c0b8:	move	@m00, #return
000414:0x0026c0c8:	cmpi	@m00, _i3
000414:0x0026c0d8:	beq	0x26c110
000414:0x0026c0e0:	ncalli	InventoryLocation.GetType()
000414:0x0026c0e8:	move	@m00, #return
000414:0x0026c0f8:	cmpi	@m00, _i5
000414:0x0026c108:	bne	0x26c138
000416:0x0026c110:	imove	#return, 0x000001
000416:0x0026c120:	release	lcn
000416:0x0026c128:	release	parent
000416:0x0026c130:	rts
000419:0x0026c138:	ncalli	EntityAI.GetInventory()
000419:0x0026c140:	movefm	[0xb5bad1f8], lcn
000419:0x0026c150:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000420:0x0026c160:	ncalli	InventoryLocation.GetParent()
000420:0x0026c168:	movetm	parent, #return
000420:0x0026c178:	jump	0x26c098
000423:0x0026c180:	imove	#return, 0x000000
000423:0x0026c190:	release	lcn
000423:0x0026c198:	release	parent
000423:0x0026c1a0:	rts
000423:0x0026c1a8:	release	lcn
000423:0x0026c1b0:	release	parent
000423:0x0026c1b8:	rts
GameInventory::GetCurrentAttachmentSlotInfo()
000429:0x0026c1e8:	imove	slot_id, 0xffffffff
000430:0x0026c1f8:	moves	slot_name, _s''
000431:0x0026c208:	new	lcn, InventoryLocation
000432:0x0026c228:	movefm	[0xb5bad1f8], lcn
000432:0x0026c238:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000433:0x0026c248:	ncalli	InventoryLocation.GetType()
000433:0x0026c250:	move	@m00, #return
000433:0x0026c260:	cmpi	@m00, _i2
000433:0x0026c270:	bne	0x26c2f0
000435:0x0026c278:	ncalli	InventoryLocation.GetSlot()
000435:0x0026c280:	move	slot_id, #return
000436:0x0026c290:	ncall	GetSlotName(slot_id)
000436:0x0026c2a0:	moves	slot_name, #return
000437:0x0026c2b0:	imove	#return, 0x000001
000437:0x0026c2c0:	release	lcn
000437:0x0026c2c8:	move	slot_id, slot_id
000437:0x0026c2d8:	moves	slot_name, slot_name
000437:0x0026c2e8:	rts
000439:0x0026c2f0:	imove	#return, 0x000000
000439:0x0026c300:	release	lcn
000439:0x0026c308:	move	slot_id, slot_id
000439:0x0026c318:	moves	slot_name, slot_name
000439:0x0026c328:	rts
000439:0x0026c330:	release	lcn
000439:0x0026c338:	move	slot_id, slot_id
000439:0x0026c348:	moves	slot_name, slot_name
000439:0x0026c358:	rts
GameInventory::OnServerInventoryCommandStatic()
000444:0x0026c608:	imove	tmp, 0xffffffff
000445:0x0026c618:	icall	
000447:0x0026c628:	imove	type, 0xffffffff
000448:0x0026c638:	icall	
000448:0x0026c648:	cmpi	#return, _i0
000448:0x0026c658:	bne	0x26c668
000449:0x0026c660:	rts
000451:0x0026c668:	move	#switch, type
000451:0x0026c678:	imove	@m00, 0x000001
000451:0x0026c688:	cmpi	@m00, #switch
000451:0x0026c698:	bne	0x26c8e8
000455:0x0026c6a0:	new	src, InventoryLocation
000456:0x0026c6c0:	new	dst, InventoryLocation
000458:0x0026c6e0:	call	
000459:0x0026c6f0:	call	
000460:0x0026c700:	ncall	GetGame()
000460:0x0026c708:	icall	
000460:0x0026c710:	icall	ToString(#return)
000460:0x0026c720:	adds	@s07, _s'[syncinv] t=', #return
000460:0x0026c730:	moves	@s06, @s07
000460:0x0026c740:	adds	@s06, @s06, _s'ms ServerInventoryCommand cmd='
000460:0x0026c750:	moves	@s05, @s06
000460:0x0026c760:	call	EnumToString(_T(InventoryCommandType), type)
000460:0x0026c778:	adds	@s05, @s05, #return
000460:0x0026c788:	moves	@s04, @s05
000460:0x0026c798:	adds	@s04, @s04, _s' src='
000460:0x0026c7a8:	moves	@s03, @s04
000460:0x0026c7b8:	call	DumpToStringNullSafe(src)
000460:0x0026c7c8:	adds	@s03, @s03, #return
000460:0x0026c7d8:	moves	@s02, @s03
000460:0x0026c7e8:	adds	@s02, @s02, _s' dst='
000460:0x0026c7f8:	moves	@s01, @s02
000460:0x0026c808:	call	DumpToStringNullSafe(dst)
000460:0x0026c818:	adds	@s01, @s01, #return
000460:0x0026c828:	moves	@s00, @s01
000460:0x0026c838:	call	syncDebugPrint(@s00)
000462:0x0026c848:	ncalli	InventoryLocation.GetItem()
000462:0x0026c850:	cmpm	#return, null
000462:0x0026c860:	beq	0x26c888
000462:0x0026c868:	ncalli	InventoryLocation.GetItem()
000462:0x0026c870:	cmpm	#return, null
000462:0x0026c880:	bne	0x26c8a8
000464:0x0026c888:	call	LogError(_s'[syncinv] ServerInventoryCommand (cmd=SYNC_MOVE) dropped, item not in bubble', _i0)
000465:0x0026c8a0:	jump	0x26cfc8
000468:0x0026c8a8:	movefm	[0xb5badea8], src
000468:0x0026c8b8:	movefm	[0xb5baded0], dst
000468:0x0026c8c8:	ncall	LocationSyncMoveEntity([0xb5badea8], [0xb5baded0])
000469:0x0026c8d8:	jump	0x26cfc8
000469:0x0026c8e0:	jump	0x26c910
000469:0x0026c8e8:	imove	@m00, 0x000002
000469:0x0026c8f8:	cmpi	@m00, #switch
000469:0x0026c908:	bne	0x26cad0
000474:0x0026c910:	call	CreateHandEventFromContext(ctx)
000474:0x0026c920:	movem	e, #return
000474:0x0026c930:	release	#return
000475:0x0026c938:	ncall	GetGame()
000475:0x0026c940:	icall	
000475:0x0026c948:	icall	ToString(#return)
000475:0x0026c958:	adds	@s05, _s'[syncinv] t=', #return
000475:0x0026c968:	moves	@s04, @s05
000475:0x0026c978:	adds	@s04, @s04, _s'ms ServerInventoryCommand cmd='
000475:0x0026c988:	moves	@s03, @s04
000475:0x0026c998:	call	EnumToString(_T(InventoryCommandType), type)
000475:0x0026c9b0:	adds	@s03, @s03, #return
000475:0x0026c9c0:	moves	@s02, @s03
000475:0x0026c9d0:	adds	@s02, @s02, _s' event='
000475:0x0026c9e0:	moves	@s01, @s02
000475:0x0026c9f0:	call	
000475:0x0026ca00:	adds	@s01, @s01, #return
000475:0x0026ca10:	moves	@s00, @s01
000475:0x0026ca20:	call	syncDebugPrint(@s00)
000477:0x0026ca30:	call	
000477:0x0026ca40:	cmpcm	#return, null
000477:0x0026ca50:	bne	0x26ca70
000479:0x0026ca58:	call	Error(_s'[syncinv] ServerInventoryCommand (cmd=HAND_EVENT) dropped, item not in bubble')
000480:0x0026ca68:	jump	0x26cfc8
000480:0x0026ca70:	release	#return
000482:0x0026ca78:	movefm	@c00, e
000482:0x0026ca88:	movefm	[0xb5b2afc0], m_Player
000482:0x0026ca98:	call	
000482:0x0026caa8:	call	
000482:0x0026cab8:	release	#return
000483:0x0026cac0:	jump	0x26cfc8
000483:0x0026cac8:	jump	0x26caf8
000483:0x0026cad0:	imove	@m00, 0x000004
000483:0x0026cae0:	cmpi	@m00, #switch
000483:0x0026caf0:	bne	0x26cb00
000483:0x0026caf8:	jump	0x26cb28
000483:0x0026cb00:	imove	@m00, 0x000003
000483:0x0026cb10:	cmpi	@m00, #switch
000483:0x0026cb20:	bne	0x26cf90
000489:0x0026cb28:	new	src1, InventoryLocation
000490:0x0026cb48:	new	src2, InventoryLocation
000491:0x0026cb68:	new	dst1, InventoryLocation
000492:0x0026cb88:	new	dst2, InventoryLocation
000493:0x0026cba8:	call	
000494:0x0026cbb8:	call	
000495:0x0026cbc8:	call	
000496:0x0026cbd8:	call	
000498:0x0026cbe8:	ncalli	InventoryLocation.IsValid()
000498:0x0026cbf0:	cmpi	#return, _i0
000498:0x0026cc00:	beq	0x26ce58
000498:0x0026cc08:	ncalli	InventoryLocation.IsValid()
000498:0x0026cc10:	cmpi	#return, _i0
000498:0x0026cc20:	beq	0x26ce58
000498:0x0026cc28:	ncalli	InventoryLocation.IsValid()
000498:0x0026cc30:	cmpi	#return, _i0
000498:0x0026cc40:	beq	0x26ce58
000498:0x0026cc48:	ncalli	InventoryLocation.IsValid()
000498:0x0026cc50:	cmpi	#return, _i0
000498:0x0026cc60:	beq	0x26ce58
000500:0x0026cc68:	ncall	GetGame()
000500:0x0026cc70:	icall	
000500:0x0026cc78:	icall	ToString(#return)
000500:0x0026cc88:	adds	@s09, _s'[syncinv] t=', #return
000500:0x0026cc98:	moves	@s08, @s09
000500:0x0026cca8:	adds	@s08, @s08, _s'ms ServerInventoryCommand Swap src1='
000500:0x0026ccb8:	moves	@s07, @s08
000500:0x0026ccc8:	call	DumpToStringNullSafe(src1)
000500:0x0026ccd8:	adds	@s07, @s07, #return
000500:0x0026cce8:	moves	@s06, @s07
000500:0x0026ccf8:	adds	@s06, @s06, _s' src2='
000500:0x0026cd08:	moves	@s05, @s06
000500:0x0026cd18:	call	DumpToStringNullSafe(src2)
000500:0x0026cd28:	adds	@s05, @s05, #return
000500:0x0026cd38:	moves	@s04, @s05
000500:0x0026cd48:	adds	@s04, @s04, _s' dst1='
000500:0x0026cd58:	moves	@s03, @s04
000500:0x0026cd68:	call	DumpToStringNullSafe(dst1)
000500:0x0026cd78:	adds	@s03, @s03, #return
000500:0x0026cd88:	moves	@s02, @s03
000500:0x0026cd98:	adds	@s02, @s02, _s' dst2='
000500:0x0026cda8:	moves	@s01, @s02
000500:0x0026cdb8:	call	DumpToStringNullSafe(dst2)
000500:0x0026cdc8:	adds	@s01, @s01, #return
000500:0x0026cdd8:	moves	@s00, @s01
000500:0x0026cde8:	call	syncDebugPrint(@s00)
000502:0x0026cdf8:	movefm	[0xb5badf20], src1
000502:0x0026ce08:	movefm	[0xb5badf48], src2
000502:0x0026ce18:	movefm	[0xb5badf70], dst1
000502:0x0026ce28:	movefm	[0xb5badf98], dst2
000502:0x0026ce38:	ncall	LocationSwap([0xb5badf20], [0xb5badf48], [0xb5badf70], [0xb5badf98])
000502:0x0026ce50:	jump	0x26cf88
000505:0x0026ce58:	call	DumpToStringNullSafe(src1)
000505:0x0026ce68:	adds	@s07, _s'ServerInventoryCommand - cannot swap, invalid location input: src1=', #return
000505:0x0026ce78:	moves	@s06, @s07
000505:0x0026ce88:	adds	@s06, @s06, _s' src2='
000505:0x0026ce98:	moves	@s05, @s06
000505:0x0026cea8:	call	DumpToStringNullSafe(src2)
000505:0x0026ceb8:	adds	@s05, @s05, #return
000505:0x0026cec8:	moves	@s04, @s05
000505:0x0026ced8:	adds	@s04, @s04, _s' dst1='
000505:0x0026cee8:	moves	@s03, @s04
000505:0x0026cef8:	call	DumpToStringNullSafe(dst1)
000505:0x0026cf08:	adds	@s03, @s03, #return
000505:0x0026cf18:	moves	@s02, @s03
000505:0x0026cf28:	adds	@s02, @s02, _s' dst2='
000505:0x0026cf38:	moves	@s01, @s02
000505:0x0026cf48:	call	DumpToStringNullSafe(dst2)
000505:0x0026cf58:	adds	@s01, @s01, #return
000505:0x0026cf68:	moves	@s00, @s01
000505:0x0026cf78:	call	Error(@s00)
000507:0x0026cf88:	jump	0x26cfc8
000507:0x0026cf90:	release	src
000507:0x0026cf98:	release	dst
000507:0x0026cfa0:	release	e
000507:0x0026cfa8:	release	src1
000507:0x0026cfb0:	release	src2
000507:0x0026cfb8:	release	dst1
000507:0x0026cfc0:	release	dst2
000507:0x0026cfc8:	rts
GameInventory::CanSwapEntitiesEx()
000604:0x0026d098:	new	il1, InventoryLocation
000605:0x0026d0b8:	new	il2, InventoryLocation
000607:0x0026d0d8:	ncalli	EntityAI.GetInventory()
000607:0x0026d0e0:	movefm	[0xb5bad1f8], il2
000607:0x0026d0f0:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000608:0x0026d100:	ncalli	InventoryLocation.GetSlot()
000608:0x0026d108:	move	slot, #return
000610:0x0026d118:	call	
000610:0x0026d128:	move	@f00, #return
000610:0x0026d138:	call	
000610:0x0026d148:	citf	@f01, #return
000610:0x0026d158:	cmpf	@f00, @f01
000610:0x0026d168:	ble	0x26d198
000611:0x0026d170:	imove	#return, 0x000000
000611:0x0026d180:	release	il1
000611:0x0026d188:	release	il2
000611:0x0026d190:	rts
000614:0x0026d198:	ncalli	EntityAI.GetInventory()
000614:0x0026d1a0:	movefm	[0xb5bad1f8], il1
000614:0x0026d1b0:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000615:0x0026d1c0:	ncalli	InventoryLocation.GetSlot()
000615:0x0026d1c8:	move	slot, #return
000617:0x0026d1d8:	call	
000617:0x0026d1e8:	move	@f00, #return
000617:0x0026d1f8:	call	
000617:0x0026d208:	citf	@f01, #return
000617:0x0026d218:	cmpf	@f00, @f01
000617:0x0026d228:	ble	0x26d258
000618:0x0026d230:	imove	#return, 0x000000
000618:0x0026d240:	release	il1
000618:0x0026d248:	release	il2
000618:0x0026d250:	rts
000620:0x0026d258:	call	
000620:0x0026d270:	cmpi	#return, _i0
000620:0x0026d280:	beq	0x26d2b8
000620:0x0026d288:	call	
000620:0x0026d2a0:	cmpi	#return, _i0
000620:0x0026d2b0:	bne	0x26d2e0
000622:0x0026d2b8:	imove	#return, 0x000000
000622:0x0026d2c8:	release	il1
000622:0x0026d2d0:	release	il2
000622:0x0026d2d8:	rts
000625:0x0026d2e0:	movefm	[0xb5bae4d0], item1
000625:0x0026d2f0:	movefm	[0xb5bae4f8], item2
000625:0x0026d300:	ncall	CanSwapEntities([0xb5bae4d0], [0xb5bae4f8])
000625:0x0026d310:	move	#return, #return
000625:0x0026d320:	release	il1
000625:0x0026d328:	release	il2
000625:0x0026d330:	rts
000625:0x0026d338:	release	il1
000625:0x0026d340:	release	il2
000625:0x0026d348:	rts
GameInventory::CanForceSwapEntitiesEx()
000640:0x0026d3a0:	movefm	[0xb5bae5f8], item1
000640:0x0026d3b0:	movefm	[0xb5bae620], item1_dst
000640:0x0026d3c0:	movefm	[0xb5bae648], item2
000640:0x0026d3d0:	movefm	[0xb5bae670], item2_dst
000640:0x0026d3e0:	ncall	CanForceSwapEntities([0xb5bae5f8], [0xb5bae620], [0xb5bae648], [0xb5bae670])
000640:0x0026d3f8:	cmpi	#return, _i0
000640:0x0026d408:	bne	0x26d438
000641:0x0026d410:	imove	#return, 0x000000
000641:0x0026d420:	movem	item2_dst, item2_dst
000641:0x0026d430:	rts
000644:0x0026d438:	new	il, InventoryLocation
000646:0x0026d458:	cmpcm	item1_dst, null
000646:0x0026d468:	bne	0x26d4b8
000648:0x0026d470:	ncalli	EntityAI.GetInventory()
000648:0x0026d478:	movefm	[0xb5bad1f8], il
000648:0x0026d488:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000649:0x0026d498:	ncalli	InventoryLocation.GetSlot()
000649:0x0026d4a0:	move	slot, #return
000649:0x0026d4b0:	jump	0x26d4d0
000653:0x0026d4b8:	ncalli	InventoryLocation.GetSlot()
000653:0x0026d4c0:	move	slot, #return
000656:0x0026d4d0:	call	
000656:0x0026d4e0:	move	@f00, #return
000656:0x0026d4f0:	call	
000656:0x0026d500:	citf	@f01, #return
000656:0x0026d510:	cmpf	@f00, @f01
000656:0x0026d520:	ble	0x26d558
000657:0x0026d528:	imove	#return, 0x000000
000657:0x0026d538:	release	il
000657:0x0026d540:	movem	item2_dst, item2_dst
000657:0x0026d550:	rts
000659:0x0026d558:	cmpcm	item2_dst, null
000659:0x0026d568:	bne	0x26d5b8
000661:0x0026d570:	ncalli	EntityAI.GetInventory()
000661:0x0026d578:	movefm	[0xb5bad1f8], il
000661:0x0026d588:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000662:0x0026d598:	ncalli	InventoryLocation.GetSlot()
000662:0x0026d5a0:	move	slot, #return
000662:0x0026d5b0:	jump	0x26d5d0
000666:0x0026d5b8:	ncalli	InventoryLocation.GetSlot()
000666:0x0026d5c0:	move	slot, #return
000669:0x0026d5d0:	call	
000669:0x0026d5e8:	cmpi	#return, _i0
000669:0x0026d5f8:	beq	0x26d630
000669:0x0026d600:	call	
000669:0x0026d618:	cmpi	#return, _i0
000669:0x0026d628:	bne	0x26d660
000671:0x0026d630:	imove	#return, 0x000000
000671:0x0026d640:	release	il
000671:0x0026d648:	movem	item2_dst, item2_dst
000671:0x0026d658:	rts
000674:0x0026d660:	call	
000674:0x0026d670:	move	@f00, #return
000674:0x0026d680:	call	
000674:0x0026d690:	citf	@f01, #return
000674:0x0026d6a0:	cmpf	@f00, @f01
000674:0x0026d6b0:	ble	0x26d6e8
000675:0x0026d6b8:	imove	#return, 0x000000
000675:0x0026d6c8:	release	il
000675:0x0026d6d0:	movem	item2_dst, item2_dst
000675:0x0026d6e0:	rts
000677:0x0026d6e8:	imove	#return, 0x000001
000677:0x0026d6f8:	release	il
000677:0x0026d700:	movem	item2_dst, item2_dst
000677:0x0026d710:	rts
000677:0x0026d718:	release	il
000677:0x0026d720:	movem	item2_dst, item2_dst
000677:0x0026d730:	rts
GameInventory::AddInventoryReservationEx()
000689:0x0026d788:	ncall	GetGame()
000689:0x0026d790:	ncalli	CGame.IsMultiplayer()
000689:0x0026d798:	cmpi	#return, _i0
000689:0x0026d7a8:	beq	0x26d7f0
000689:0x0026d7b0:	ncall	GetGame()
000689:0x0026d7b8:	ncalli	CGame.IsServer()
000689:0x0026d7c0:	cmpi	#return, _i0
000689:0x0026d7d0:	beq	0x26d7f0
000690:0x0026d7d8:	imove	#return, 0x000001
000690:0x0026d7e8:	rts
000692:0x0026d7f0:	movefm	[0xb5bae9c0], item
000692:0x0026d800:	movefm	[0xb5bae9e8], dst
000692:0x0026d810:	ncall	AddInventoryReservation([0xb5bae9c0], [0xb5bae9e8], timeout_ms)
000692:0x0026d828:	move	ret_val, #return
000706:0x0026d838:	move	#return, ret_val
000706:0x0026d848:	rts
000706:0x0026d850:	rts
GameInventory::ExtendInventoryReservationEx()
000712:0x0026d880:	ncall	GetGame()
000712:0x0026d888:	ncalli	CGame.IsMultiplayer()
000712:0x0026d890:	cmpi	#return, _i0
000712:0x0026d8a0:	beq	0x26d8e8
000712:0x0026d8a8:	ncall	GetGame()
000712:0x0026d8b0:	ncalli	CGame.IsServer()
000712:0x0026d8b8:	cmpi	#return, _i0
000712:0x0026d8c8:	beq	0x26d8e8
000713:0x0026d8d0:	imove	#return, 0x000001
000713:0x0026d8e0:	rts
000715:0x0026d8e8:	movefm	[0xb5baeb70], item
000715:0x0026d8f8:	movefm	[0xb5baeb98], dst
000715:0x0026d908:	ncall	ExtendInventoryReservation([0xb5baeb70], [0xb5baeb98], timeout_ms)
000715:0x0026d920:	move	ret_val, #return
000729:0x0026d930:	move	#return, ret_val
000729:0x0026d940:	rts
000729:0x0026d948:	rts
GameInventory::ClearInventoryReservationEx()
000735:0x0026d978:	ncall	GetGame()
000735:0x0026d980:	ncalli	CGame.IsMultiplayer()
000735:0x0026d988:	cmpi	#return, _i0
000735:0x0026d998:	beq	0x26d9e0
000735:0x0026d9a0:	ncall	GetGame()
000735:0x0026d9a8:	ncalli	CGame.IsServer()
000735:0x0026d9b0:	cmpi	#return, _i0
000735:0x0026d9c0:	beq	0x26d9e0
000736:0x0026d9c8:	imove	#return, 0x000001
000736:0x0026d9d8:	rts
000738:0x0026d9e0:	movefm	[0xb5baecf0], item
000738:0x0026d9f0:	movefm	[0xb5baed18], dst
000738:0x0026da00:	ncall	ClearInventoryReservation([0xb5baecf0], [0xb5baed18])
000738:0x0026da10:	move	ret_val, #return
000752:0x0026da20:	move	#return, ret_val
000752:0x0026da30:	rts
000752:0x0026da38:	rts
GameInventory::Init()
000801:0x0026da40:	ncalli	GameInventory.GetInventoryOwner()
000801:0x0026da48:	call	
000801:0x0026da58:	rts
GameInventory::OnStoreLoad()
000807:0x0026da60:	imove	#return, 0x000001
000807:0x0026da70:	rts
000807:0x0026da78:	rts
GameInventory::EEInit()
000815:0x0026db20:	new	src, InventoryLocation
000816:0x0026db40:	movefm	[0xb5bad1f8], src
000816:0x0026db50:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000816:0x0026db60:	cmpi	#return, _i0
000816:0x0026db70:	beq	0x26dcb0
000818:0x0026db78:	ncalli	InventoryLocation.GetType()
000818:0x0026db80:	move	@m00, #return
000818:0x0026db90:	cmpi	@m00, _i4
000818:0x0026dba0:	bne	0x26dcb0
000820:0x0026dba8:	ncalli	InventoryLocation.GetParent()
000820:0x0026dbb0:	icall	SafeCastType([0xb5b266d0], @c01, #return)
000820:0x0026dbc8:	movetm	man, @c01
000821:0x0026dbd8:	cmpcm	man, null
000821:0x0026dbe8:	beq	0x26dca8
000823:0x0026dbf0:	icall	ToString(man)
000823:0x0026dc00:	adds	@s03, _s'Inventory::EEInit - Man=', #return
000823:0x0026dc10:	moves	@s02, @s03
000823:0x0026dc20:	adds	@s02, @s02, _s' item='
000823:0x0026dc30:	moves	@s01, @s02
000823:0x0026dc40:	icall	ToString(this)
000823:0x0026dc50:	adds	@s01, @s01, #return
000823:0x0026dc60:	moves	@s00, @s01
000823:0x0026dc70:	call	inventoryDebugPrint(@s00)
000824:0x0026dc80:	call	
000824:0x0026dc90:	call	
000824:0x0026dca0:	release	#return
000824:0x0026dca8:	release	man
000824:0x0026dcb0:	release	src
000824:0x0026dcb8:	rts
GameInventory::EEDelete()
000832:0x0026dd10:	ncalli	GameInventory.GetInventoryOwner()
000832:0x0026dd18:	movetm	item, #return
000833:0x0026dd28:	ncalli	EntityAI.GetHierarchyRootPlayer()
000833:0x0026dd30:	movetm	player, #return
000834:0x0026dd40:	cmpcm	player, null
000834:0x0026dd50:	beq	0x26dd88
000835:0x0026dd58:	ncalli	Man.GetInventory()
000835:0x0026dd60:	movetm	dst, null
000835:0x0026dd70:	call	
000835:0x0026dd88:	release	item
000835:0x0026dd90:	release	player
000835:0x0026dd98:	rts
GameInventory::CreateInInventory()
000846:0x0026de18:	new	loc, InventoryLocation
000847:0x0026de38:	imove	@m01, 0x00000c
000847:0x0026de48:	move	@m00, @m01
000847:0x0026de58:	movefm	[0xb5bad400], loc
000847:0x0026de68:	ncalli	GameInventory.FindFirstFreeLocationForNewEntity(type, @m00, [0xb5bad400])
000847:0x0026de80:	cmpi	#return, _i0
000847:0x0026de90:	beq	0x26dfe8
000849:0x0026de98:	ncalli	InventoryLocation.GetType()
000849:0x0026dea0:	move	#switch, #return
000849:0x0026deb0:	imove	@m00, 0x000002
000849:0x0026dec0:	cmpi	@m00, #switch
000849:0x0026ded0:	bne	0x26df30
000851:0x0026ded8:	ncalli	InventoryLocation.GetParent()
000851:0x0026dee0:	ncalli	EntityAI.GetInventory()
000851:0x0026dee8:	ncalli	InventoryLocation.GetSlot()
000851:0x0026def0:	ncalli	GameInventory.CreateAttachmentEx(type, #return)
000851:0x0026df00:	movetm	#return, #return
000851:0x0026df10:	release	loc
000851:0x0026df18:	rts
000851:0x0026df20:	jump	0x26dfe8
000851:0x0026df28:	jump	0x26df58
000851:0x0026df30:	imove	@m00, 0x000003
000851:0x0026df40:	cmpi	@m00, #switch
000851:0x0026df50:	bne	0x26dfd0
000852:0x0026df58:	ncalli	InventoryLocation.GetParent()
000852:0x0026df60:	ncalli	EntityAI.GetInventory()
000852:0x0026df68:	ncalli	InventoryLocation.GetIdx()
000852:0x0026df70:	ncalli	InventoryLocation.GetRow()
000852:0x0026df78:	ncalli	InventoryLocation.GetCol()
000852:0x0026df80:	ncalli	InventoryLocation.GetFlip()
000852:0x0026df88:	ncalli	GameInventory.CreateEntityInCargoEx(type, #return, #return, #return, #return)
000852:0x0026dfa8:	movetm	#return, #return
000852:0x0026dfb8:	release	loc
000852:0x0026dfc0:	rts
000852:0x0026dfc8:	jump	0x26dfe8
000853:0x0026dfd0:	call	Error(_s'CreateInInventory: unknown location for item')
000853:0x0026dfe0:	jump	0x26dfe8
000856:0x0026dfe8:	movetm	#return, null
000856:0x0026dff8:	release	loc
000856:0x0026e000:	rts
000856:0x0026e008:	release	loc
000856:0x0026e010:	rts
GameInventory::CanAddEntityToInventory()
000871:0x0026e068:	new	il, InventoryLocation
000872:0x0026e088:	movefm	[0xb5bad248], item
000872:0x0026e098:	movefm	[0xb5bad298], il
000872:0x0026e0a8:	ncalli	GameInventory.FindFreeLocationFor([0xb5bad248], flag, [0xb5bad298])
000872:0x0026e0c0:	move	result, #return
000873:0x0026e0d0:	move	#return, result
000873:0x0026e0e0:	release	il
000873:0x0026e0e8:	rts
000873:0x0026e0f0:	release	il
000873:0x0026e0f8:	rts
GameInventory::AddEntityToInventory()
000891:0x0026e178:	new	il, InventoryLocation
000892:0x0026e198:	movefm	[0xb5bad248], item
000892:0x0026e1a8:	movefm	[0xb5bad298], il
000892:0x0026e1b8:	ncalli	GameInventory.FindFreeLocationFor([0xb5bad248], _i60, [0xb5bad298])
000892:0x0026e1d0:	move	result, #return
000893:0x0026e1e0:	cmpi	result, _i0
000893:0x0026e1f0:	beq	0x26e238
000894:0x0026e1f8:	movefm	[0xb5badd90], il
000894:0x0026e208:	ncall	LocationAddEntity([0xb5badd90])
000894:0x0026e218:	move	#return, #return
000894:0x0026e228:	release	il
000894:0x0026e230:	rts
000895:0x0026e238:	move	#return, result
000895:0x0026e248:	release	il
000895:0x0026e250:	rts
000895:0x0026e258:	release	il
000895:0x0026e260:	rts
GameInventory::CanRemoveEntity()
000903:0x0026e290:	new	il, InventoryLocation
000904:0x0026e2b0:	movefm	[0xb5bad1f8], il
000904:0x0026e2c0:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000904:0x0026e2d0:	cmpi	#return, _i0
000904:0x0026e2e0:	beq	0x26e328
000905:0x0026e2e8:	movefm	[0xb5bad928], il
000905:0x0026e2f8:	ncall	LocationCanRemoveEntity([0xb5bad928])
000905:0x0026e308:	move	#return, #return
000905:0x0026e318:	release	il
000905:0x0026e320:	rts
000906:0x0026e328:	imove	#return, 0x000000
000906:0x0026e338:	release	il
000906:0x0026e340:	rts
000906:0x0026e348:	release	il
000906:0x0026e350:	rts
GameInventory::CanAddEntityInto()
000924:0x0026e380:	new	loc, InventoryLocation
000925:0x0026e3a0:	movefm	[0xb5bad248], item
000925:0x0026e3b0:	movefm	[0xb5bad298], loc
000925:0x0026e3c0:	ncalli	GameInventory.FindFreeLocationFor([0xb5bad248], flags, [0xb5bad298])
000925:0x0026e3d8:	cmpi	#return, _i0
000925:0x0026e3e8:	beq	0x26e430
000925:0x0026e3f0:	call	
000925:0x0026e400:	cmpi	#return, _i0
000925:0x0026e410:	bne	0x26e430
000925:0x0026e418:	imove	#return, 0x000001
000925:0x0026e428:	jump	0x26e440
000925:0x0026e430:	imove	#return, 0x000000
000925:0x0026e440:	release	loc
000925:0x0026e448:	rts
000925:0x0026e450:	release	loc
000925:0x0026e458:	rts
GameInventory::CanAddEntityIntoInventory()
000933:0x0026e490:	imove	@m01, 0x00002c
000933:0x0026e4a0:	move	@m00, @m01
000933:0x0026e4b0:	call	
000933:0x0026e4c8:	move	#return, #return
000933:0x0026e4d8:	rts
000933:0x0026e4e0:	rts
GameInventory::CanAddEntityIntoHands()
000941:0x0026e4e8:	call	
000941:0x0026e500:	move	#return, #return
000941:0x0026e510:	rts
000941:0x0026e518:	rts
GameInventory::TakeEntityToInventory()
000976:0x0026e5e8:	call	EnumToString(_T(InventoryMode), mode)
000976:0x0026e600:	adds	@s03, _s'[inv] I::Take2Inv(', #return
000976:0x0026e610:	moves	@s02, @s03
000976:0x0026e620:	adds	@s02, @s02, _s') item='
000976:0x0026e630:	moves	@s01, @s02
000976:0x0026e640:	icall	ToString(item)
000976:0x0026e650:	adds	@s01, @s01, #return
000976:0x0026e660:	moves	@s00, @s01
000976:0x0026e670:	call	inventoryDebugPrint(@s00)
000978:0x0026e680:	new	src, InventoryLocation
000979:0x0026e6a0:	ncalli	EntityAI.GetInventory()
000979:0x0026e6a8:	movefm	[0xb5bad1f8], src
000979:0x0026e6b8:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000979:0x0026e6c8:	cmpi	#return, _i0
000979:0x0026e6d8:	beq	0x26e878
000981:0x0026e6e0:	new	dst, InventoryLocation
000982:0x0026e700:	movefm	[0xb5bad248], item
000982:0x0026e710:	movefm	[0xb5bad298], dst
000982:0x0026e720:	ncalli	GameInventory.FindFreeLocationFor([0xb5bad248], flags, [0xb5bad298])
000982:0x0026e738:	cmpi	#return, _i0
000982:0x0026e748:	beq	0x26e790
000983:0x0026e750:	call	
000983:0x0026e768:	move	#return, #return
000983:0x0026e778:	release	dst
000983:0x0026e780:	release	src
000983:0x0026e788:	rts
000985:0x0026e790:	call	EnumToString(_T(InventoryMode), mode)
000985:0x0026e7a8:	adds	@s04, _s'[inv] I::Take2Inv(', #return
000985:0x0026e7b8:	moves	@s03, @s04
000985:0x0026e7c8:	adds	@s03, @s03, _s') item='
000985:0x0026e7d8:	moves	@s02, @s03
000985:0x0026e7e8:	icall	ToString(item)
000985:0x0026e7f8:	adds	@s02, @s02, #return
000985:0x0026e808:	moves	@s01, @s02
000985:0x0026e818:	adds	@s01, @s01, _s' Warning - no room for item'
000985:0x0026e828:	moves	@s00, @s01
000985:0x0026e838:	call	inventoryDebugPrint(@s00)
000986:0x0026e848:	imove	#return, 0x000000
000986:0x0026e858:	release	dst
000986:0x0026e860:	release	src
000986:0x0026e868:	rts
000986:0x0026e870:	release	dst
000988:0x0026e878:	call	EnumToString(_T(InventoryMode), mode)
000988:0x0026e890:	adds	@s04, _s'[inv] I::Take2Inv(', #return
000988:0x0026e8a0:	moves	@s03, @s04
000988:0x0026e8b0:	adds	@s03, @s03, _s') item='
000988:0x0026e8c0:	moves	@s02, @s03
000988:0x0026e8d0:	icall	ToString(item)
000988:0x0026e8e0:	adds	@s02, @s02, #return
000988:0x0026e8f0:	moves	@s01, @s02
000988:0x0026e900:	adds	@s01, @s01, _s' Error - src has no inventory location'
000988:0x0026e910:	moves	@s00, @s01
000988:0x0026e920:	call	Error(@s00)
000989:0x0026e930:	imove	#return, 0x000000
000989:0x0026e940:	release	src
000989:0x0026e948:	rts
000989:0x0026e950:	release	src
000989:0x0026e958:	rts
GameInventory::TakeEntityToTargetInventory()
000995:0x0026ea28:	call	EnumToString(_T(InventoryMode), mode)
000995:0x0026ea40:	adds	@s03, _s'[inv] I::Take2Target(', #return
000995:0x0026ea50:	moves	@s02, @s03
000995:0x0026ea60:	adds	@s02, @s02, _s') item='
000995:0x0026ea70:	moves	@s01, @s02
000995:0x0026ea80:	icall	ToString(item)
000995:0x0026ea90:	adds	@s01, @s01, #return
000995:0x0026eaa0:	moves	@s00, @s01
000995:0x0026eab0:	call	inventoryDebugPrint(@s00)
000997:0x0026eac0:	new	src, InventoryLocation
000998:0x0026eae0:	ncalli	EntityAI.GetInventory()
000998:0x0026eae8:	movefm	[0xb5bad1f8], src
000998:0x0026eaf8:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000998:0x0026eb08:	cmpi	#return, _i0
000998:0x0026eb18:	beq	0x26ed10
001000:0x0026eb20:	new	dst, InventoryLocation
001002:0x0026eb40:	ncalli	EntityAI.GetInventory()
001002:0x0026eb48:	movefm	[0xb5bad248], item
001002:0x0026eb58:	movefm	[0xb5bad298], dst
001002:0x0026eb68:	ncalli	GameInventory.FindFreeLocationFor([0xb5bad248], flags, [0xb5bad298])
001002:0x0026eb80:	cmpi	#return, _i0
001002:0x0026eb90:	beq	0x26ebd8
001003:0x0026eb98:	call	
001003:0x0026ebb0:	move	#return, #return
001003:0x0026ebc0:	release	dst
001003:0x0026ebc8:	release	src
001003:0x0026ebd0:	rts
001005:0x0026ebd8:	call	EnumToString(_T(InventoryMode), mode)
001005:0x0026ebf0:	adds	@s06, _s'[inv] I::Take2Target(', #return
001005:0x0026ec00:	moves	@s05, @s06
001005:0x0026ec10:	adds	@s05, @s05, _s') target='
001005:0x0026ec20:	moves	@s04, @s05
001005:0x0026ec30:	icall	ToString(target)
001005:0x0026ec40:	adds	@s04, @s04, #return
001005:0x0026ec50:	moves	@s03, @s04
001005:0x0026ec60:	adds	@s03, @s03, _s' item='
001005:0x0026ec70:	moves	@s02, @s03
001005:0x0026ec80:	icall	ToString(item)
001005:0x0026ec90:	adds	@s02, @s02, #return
001005:0x0026eca0:	moves	@s01, @s02
001005:0x0026ecb0:	adds	@s01, @s01, _s' Warning - no room for item in target'
001005:0x0026ecc0:	moves	@s00, @s01
001005:0x0026ecd0:	call	inventoryDebugPrint(@s00)
001006:0x0026ece0:	imove	#return, 0x000000
001006:0x0026ecf0:	release	dst
001006:0x0026ecf8:	release	src
001006:0x0026ed00:	rts
001006:0x0026ed08:	release	dst
001008:0x0026ed10:	call	EnumToString(_T(InventoryMode), mode)
001008:0x0026ed28:	adds	@s06, _s'[inv] I::Take2Target(', #return
001008:0x0026ed38:	moves	@s05, @s06
001008:0x0026ed48:	adds	@s05, @s05, _s') target='
001008:0x0026ed58:	moves	@s04, @s05
001008:0x0026ed68:	icall	ToString(target)
001008:0x0026ed78:	adds	@s04, @s04, #return
001008:0x0026ed88:	moves	@s03, @s04
001008:0x0026ed98:	adds	@s03, @s03, _s' item='
001008:0x0026eda8:	moves	@s02, @s03
001008:0x0026edb8:	icall	ToString(item)
001008:0x0026edc8:	adds	@s02, @s02, #return
001008:0x0026edd8:	moves	@s01, @s02
001008:0x0026ede8:	adds	@s01, @s01, _s' Error - src has no inventory location'
001008:0x0026edf8:	moves	@s00, @s01
001008:0x0026ee08:	call	Error(@s00)
001009:0x0026ee18:	imove	#return, 0x000000
001009:0x0026ee28:	release	src
001009:0x0026ee30:	rts
001009:0x0026ee38:	release	src
001009:0x0026ee40:	rts
GameInventory::TakeToDst()
001021:0x0026ee98:	move	#switch, mode
001021:0x0026eea8:	imove	@m00, 0x000003
001021:0x0026eeb8:	cmpi	@m00, #switch
001021:0x0026eec8:	bne	0x26ef98
001024:0x0026eed0:	movefm	[0xb5badea8], src
001024:0x0026eee0:	movefm	[0xb5baded0], dst
001024:0x0026eef0:	ncall	LocationSyncMoveEntity([0xb5badea8], [0xb5baded0])
001024:0x0026ef00:	move	ret, #return
001025:0x0026ef10:	cmpi	ret, _i0
001025:0x0026ef20:	beq	0x26ef78
001025:0x0026ef28:	ncalli	InventoryLocation.IsValid()
001025:0x0026ef30:	cmpi	#return, _i0
001025:0x0026ef40:	beq	0x26ef78
001026:0x0026ef48:	movetm	player, null
001026:0x0026ef58:	call	SendServerMove(player, SYNC_MOVE, src, dst)
001027:0x0026ef78:	move	#return, ret
001027:0x0026ef88:	rts
001027:0x0026ef90:	jump	0x26efc0
001027:0x0026ef98:	imove	@m00, 0x000001
001027:0x0026efa8:	cmpi	@m00, #switch
001027:0x0026efb8:	bne	0x26f018
001029:0x0026efc0:	movefm	[0xb5badea8], src
001029:0x0026efd0:	movefm	[0xb5baded0], dst
001029:0x0026efe0:	ncall	LocationSyncMoveEntity([0xb5badea8], [0xb5baded0])
001029:0x0026eff0:	move	ret, #return
001032:0x0026f000:	move	#return, ret
001032:0x0026f010:	rts
001034:0x0026f018:	imove	#return, 0x000000
001034:0x0026f028:	rts
001036:0x0026f030:	imove	#return, 0x000000
001036:0x0026f040:	rts
001036:0x0026f048:	rts
GameInventory::TakeEntityToCargo()
001046:0x0026f078:	call	EnumToString(_T(InventoryMode), mode)
001046:0x0026f090:	adds	@s03, _s'[inv] I::Take2Cgo(', #return
001046:0x0026f0a0:	moves	@s02, @s03
001046:0x0026f0b0:	adds	@s02, @s02, _s') item='
001046:0x0026f0c0:	moves	@s01, @s02
001046:0x0026f0d0:	icall	ToString(item)
001046:0x0026f0e0:	adds	@s01, @s01, #return
001046:0x0026f0f0:	moves	@s00, @s01
001046:0x0026f100:	call	inventoryDebugPrint(@s00)
001047:0x0026f110:	call	
001047:0x0026f128:	move	#return, #return
001047:0x0026f138:	rts
001047:0x0026f140:	rts
GameInventory::TakeEntityToTargetCargo()
001053:0x0026f198:	call	EnumToString(_T(InventoryMode), mode)
001053:0x0026f1b0:	adds	@s05, _s'[inv] I::Take2TargetCgo(', #return
001053:0x0026f1c0:	moves	@s04, @s05
001053:0x0026f1d0:	adds	@s04, @s04, _s') item='
001053:0x0026f1e0:	moves	@s03, @s04
001053:0x0026f1f0:	icall	ToString(item)
001053:0x0026f200:	adds	@s03, @s03, #return
001053:0x0026f210:	moves	@s02, @s03
001053:0x0026f220:	adds	@s02, @s02, _s'to cargo of target='
001053:0x0026f230:	moves	@s01, @s02
001053:0x0026f240:	icall	ToString(target)
001053:0x0026f250:	adds	@s01, @s01, #return
001053:0x0026f260:	moves	@s00, @s01
001053:0x0026f270:	call	inventoryDebugPrint(@s00)
001054:0x0026f280:	call	
001054:0x0026f2a0:	move	#return, #return
001054:0x0026f2b0:	rts
001054:0x0026f2b8:	rts
GameInventory::TakeEntityToCargoEx()
001064:0x0026f310:	call	EnumToString(_T(InventoryMode), mode)
001064:0x0026f328:	adds	@s07, _s'[inv] I::Take2Cgo(', #return
001064:0x0026f338:	moves	@s06, @s07
001064:0x0026f348:	adds	@s06, @s06, _s') item='
001064:0x0026f358:	moves	@s05, @s06
001064:0x0026f368:	icall	ToString(item)
001064:0x0026f378:	adds	@s05, @s05, #return
001064:0x0026f388:	moves	@s04, @s05
001064:0x0026f398:	adds	@s04, @s04, _s' row='
001064:0x0026f3a8:	moves	@s03, @s04
001064:0x0026f3b8:	icall	ToString(row)
001064:0x0026f3c8:	adds	@s03, @s03, #return
001064:0x0026f3d8:	moves	@s02, @s03
001064:0x0026f3e8:	adds	@s02, @s02, _s' col='
001064:0x0026f3f8:	moves	@s01, @s02
001064:0x0026f408:	icall	ToString(col)
001064:0x0026f418:	adds	@s01, @s01, #return
001064:0x0026f428:	moves	@s00, @s01
001064:0x0026f438:	call	inventoryDebugPrint(@s00)
001065:0x0026f448:	new	src, InventoryLocation
001066:0x0026f468:	ncalli	EntityAI.GetInventory()
001066:0x0026f470:	movefm	[0xb5bad1f8], src
001066:0x0026f480:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001066:0x0026f490:	cmpi	#return, _i0
001066:0x0026f4a0:	beq	0x26f558
001068:0x0026f4a8:	new	dst, InventoryLocation
001069:0x0026f4c8:	ncalli	GameInventory.GetInventoryOwner()
001069:0x0026f4d0:	movefm	[0xb5b9f1d0], item
001069:0x0026f4e0:	ncalli	EntityAI.GetInventory()
001069:0x0026f4e8:	ncalli	GameInventory.GetFlipCargo()
001069:0x0026f4f0:	ncalli	InventoryLocation.SetCargo(#return, [0xb5b9f1d0], idx, row, col, #return)
001071:0x0026f510:	call	
001071:0x0026f528:	move	#return, #return
001071:0x0026f538:	release	dst
001071:0x0026f540:	release	src
001071:0x0026f548:	rts
001071:0x0026f550:	release	dst
001073:0x0026f558:	call	EnumToString(_T(InventoryMode), mode)
001073:0x0026f570:	adds	@s08, _s'[inv] I::Take2Cgo(', #return
001073:0x0026f580:	moves	@s07, @s08
001073:0x0026f590:	adds	@s07, @s07, _s') item='
001073:0x0026f5a0:	moves	@s06, @s07
001073:0x0026f5b0:	icall	ToString(item)
001073:0x0026f5c0:	adds	@s06, @s06, #return
001073:0x0026f5d0:	moves	@s05, @s06
001073:0x0026f5e0:	adds	@s05, @s05, _s' row='
001073:0x0026f5f0:	moves	@s04, @s05
001073:0x0026f600:	icall	ToString(row)
001073:0x0026f610:	adds	@s04, @s04, #return
001073:0x0026f620:	moves	@s03, @s04
001073:0x0026f630:	adds	@s03, @s03, _s' col='
001073:0x0026f640:	moves	@s02, @s03
001073:0x0026f650:	icall	ToString(col)
001073:0x0026f660:	adds	@s02, @s02, #return
001073:0x0026f670:	moves	@s01, @s02
001073:0x0026f680:	adds	@s01, @s01, _s' Error - src has no inventory location'
001073:0x0026f690:	moves	@s00, @s01
001073:0x0026f6a0:	call	Error(@s00)
001074:0x0026f6b0:	imove	#return, 0x000000
001074:0x0026f6c0:	release	src
001074:0x0026f6c8:	rts
001074:0x0026f6d0:	release	src
001074:0x0026f6d8:	rts
GameInventory::TakeEntityToTargetCargoEx()
001080:0x0026f758:	call	EnumToString(_T(InventoryMode), mode)
001080:0x0026f770:	adds	@s09, _s'[inv] I::Take2TargetCgoEx(', #return
001080:0x0026f780:	moves	@s08, @s09
001080:0x0026f790:	adds	@s08, @s08, _s') item='
001080:0x0026f7a0:	moves	@s07, @s08
001080:0x0026f7b0:	icall	ToString(item)
001080:0x0026f7c0:	adds	@s07, @s07, #return
001080:0x0026f7d0:	moves	@s06, @s07
001080:0x0026f7e0:	adds	@s06, @s06, _s'to cargo of target='
001080:0x0026f7f0:	moves	@s05, @s06
001080:0x0026f800:	ncalli	CargoBase.GetCargoOwner()
001080:0x0026f808:	icall	ToString(#return)
001080:0x0026f818:	adds	@s05, @s05, #return
001080:0x0026f828:	moves	@s04, @s05
001080:0x0026f838:	adds	@s04, @s04, _s' row='
001080:0x0026f848:	moves	@s03, @s04
001080:0x0026f858:	icall	ToString(row)
001080:0x0026f868:	adds	@s03, @s03, #return
001080:0x0026f878:	moves	@s02, @s03
001080:0x0026f888:	adds	@s02, @s02, _s' col='
001080:0x0026f898:	moves	@s01, @s02
001080:0x0026f8a8:	icall	ToString(col)
001080:0x0026f8b8:	adds	@s01, @s01, #return
001080:0x0026f8c8:	moves	@s00, @s01
001080:0x0026f8d8:	call	inventoryDebugPrint(@s00)
001081:0x0026f8e8:	new	src, InventoryLocation
001082:0x0026f908:	ncalli	EntityAI.GetInventory()
001082:0x0026f910:	movefm	[0xb5bad1f8], src
001082:0x0026f920:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001082:0x0026f930:	cmpi	#return, _i0
001082:0x0026f940:	beq	0x26fa00
001084:0x0026f948:	new	dst, InventoryLocation
001085:0x0026f968:	movefm	[0xb5b9f0e0], cargo
001085:0x0026f978:	movefm	[0xb5b9f108], item
001085:0x0026f988:	ncalli	EntityAI.GetInventory()
001085:0x0026f990:	ncalli	GameInventory.GetFlipCargo()
001085:0x0026f998:	ncalli	InventoryLocation.SetCargoAuto([0xb5b9f0e0], [0xb5b9f108], row, col, #return)
001087:0x0026f9b8:	call	
001087:0x0026f9d0:	move	#return, #return
001087:0x0026f9e0:	release	dst
001087:0x0026f9e8:	release	src
001087:0x0026f9f0:	rts
001087:0x0026f9f8:	release	dst
001089:0x0026fa00:	call	EnumToString(_T(InventoryMode), mode)
001089:0x0026fa18:	adds	@s09, _s'[inv] I::Take2TargetCgoEx(', #return
001089:0x0026fa28:	moves	@s08, @s09
001089:0x0026fa38:	adds	@s08, @s08, _s') item='
001089:0x0026fa48:	moves	@s07, @s08
001089:0x0026fa58:	icall	ToString(item)
001089:0x0026fa68:	adds	@s07, @s07, #return
001089:0x0026fa78:	moves	@s06, @s07
001089:0x0026fa88:	adds	@s06, @s06, _s'to cargo of target='
001089:0x0026fa98:	moves	@s05, @s06
001089:0x0026faa8:	ncalli	CargoBase.GetCargoOwner()
001089:0x0026fab0:	icall	ToString(#return)
001089:0x0026fac0:	adds	@s05, @s05, #return
001089:0x0026fad0:	moves	@s04, @s05
001089:0x0026fae0:	adds	@s04, @s04, _s' row='
001089:0x0026faf0:	moves	@s03, @s04
001089:0x0026fb00:	icall	ToString(row)
001089:0x0026fb10:	adds	@s03, @s03, #return
001089:0x0026fb20:	moves	@s02, @s03
001089:0x0026fb30:	adds	@s02, @s02, _s' col='
001089:0x0026fb40:	moves	@s01, @s02
001089:0x0026fb50:	icall	ToString(col)
001089:0x0026fb60:	adds	@s01, @s01, #return
001089:0x0026fb70:	moves	@s00, @s01
001089:0x0026fb80:	call	Error(@s00)
001090:0x0026fb90:	imove	#return, 0x000000
001090:0x0026fba0:	release	src
001090:0x0026fba8:	rts
001090:0x0026fbb0:	release	src
001090:0x0026fbb8:	rts
GameInventory::TakeEntityAsAttachmentEx()
001095:0x0026fbe8:	call	EnumToString(_T(InventoryMode), mode)
001095:0x0026fc00:	adds	@s05, _s'[inv] I::Take2AttEx(', #return
001095:0x0026fc10:	moves	@s04, @s05
001095:0x0026fc20:	adds	@s04, @s04, _s') item='
001095:0x0026fc30:	moves	@s03, @s04
001095:0x0026fc40:	icall	ToString(item)
001095:0x0026fc50:	adds	@s03, @s03, #return
001095:0x0026fc60:	moves	@s02, @s03
001095:0x0026fc70:	adds	@s02, @s02, _s' slot='
001095:0x0026fc80:	moves	@s01, @s02
001095:0x0026fc90:	icall	ToString(slot)
001095:0x0026fca0:	adds	@s01, @s01, #return
001095:0x0026fcb0:	moves	@s00, @s01
001095:0x0026fcc0:	call	inventoryDebugPrint(@s00)
001096:0x0026fcd0:	ncalli	GameInventory.GetInventoryOwner()
001096:0x0026fcd8:	call	
001096:0x0026fcf8:	move	#return, #return
001096:0x0026fd08:	rts
001096:0x0026fd10:	rts
GameInventory::TakeEntityAsTargetAttachmentEx()
001102:0x0026fde0:	call	EnumToString(_T(InventoryMode), mode)
001102:0x0026fdf8:	adds	@s07, _s'[inv] I::Take2TargetAttEx(', #return
001102:0x0026fe08:	moves	@s06, @s07
001102:0x0026fe18:	adds	@s06, @s06, _s') as ATT of target='
001102:0x0026fe28:	moves	@s05, @s06
001102:0x0026fe38:	icall	ToString(target)
001102:0x0026fe48:	adds	@s05, @s05, #return
001102:0x0026fe58:	moves	@s04, @s05
001102:0x0026fe68:	adds	@s04, @s04, _s' item='
001102:0x0026fe78:	moves	@s03, @s04
001102:0x0026fe88:	icall	ToString(item)
001102:0x0026fe98:	adds	@s03, @s03, #return
001102:0x0026fea8:	moves	@s02, @s03
001102:0x0026feb8:	adds	@s02, @s02, _s' slot='
001102:0x0026fec8:	moves	@s01, @s02
001102:0x0026fed8:	icall	ToString(slot)
001102:0x0026fee8:	adds	@s01, @s01, #return
001102:0x0026fef8:	moves	@s00, @s01
001102:0x0026ff08:	call	inventoryDebugPrint(@s00)
001103:0x0026ff18:	new	src, InventoryLocation
001104:0x0026ff38:	ncalli	EntityAI.GetInventory()
001104:0x0026ff40:	movefm	[0xb5bad1f8], src
001104:0x0026ff50:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001104:0x0026ff60:	cmpi	#return, _i0
001104:0x0026ff70:	beq	0x2700b0
001107:0x0026ff78:	ncalli	EntityAI.GetInventory()
001107:0x0026ff80:	ncalli	GameInventory.FindAttachment(slot)
001107:0x0026ff90:	movetm	att, #return
001109:0x0026ffa0:	cmpcm	att, null
001109:0x0026ffb0:	beq	0x270000
001111:0x0026ffb8:	call	
001112:0x0026ffd0:	imove	#return, 0x000001
001112:0x0026ffe0:	release	att
001112:0x0026ffe8:	release	src
001112:0x0026fff0:	rts
001112:0x0026fff8:	jump	0x2700a8
001116:0x00270000:	new	dst, InventoryLocation
001117:0x00270020:	movefm	[0xb5b9f068], target
001117:0x00270030:	movefm	[0xb5b9f090], item
001117:0x00270040:	ncalli	InventoryLocation.SetAttachment([0xb5b9f068], [0xb5b9f090], slot)
001118:0x00270058:	call	
001118:0x00270070:	move	#return, #return
001118:0x00270080:	release	dst
001118:0x00270088:	release	att
001118:0x00270090:	release	src
001118:0x00270098:	rts
001118:0x002700a0:	release	dst
001118:0x002700a8:	release	att
001121:0x002700b0:	call	EnumToString(_T(InventoryMode), mode)
001121:0x002700c8:	adds	@s04, _s'[inv] I::Take2AttEx(', #return
001121:0x002700d8:	moves	@s03, @s04
001121:0x002700e8:	adds	@s03, @s03, _s') item='
001121:0x002700f8:	moves	@s02, @s03
001121:0x00270108:	icall	ToString(item)
001121:0x00270118:	adds	@s02, @s02, #return
001121:0x00270128:	moves	@s01, @s02
001121:0x00270138:	adds	@s01, @s01, _s' Error - src has no inventory location'
001121:0x00270148:	moves	@s00, @s01
001121:0x00270158:	call	Error(@s00)
001122:0x00270168:	imove	#return, 0x000000
001122:0x00270178:	release	src
001122:0x00270180:	rts
001122:0x00270188:	release	src
001122:0x00270190:	rts
GameInventory::TakeEntityAsAttachment()
001127:0x002701c0:	call	EnumToString(_T(InventoryMode), mode)
001127:0x002701d8:	adds	@s03, _s'[inv] I::Take2Att(', #return
001127:0x002701e8:	moves	@s02, @s03
001127:0x002701f8:	adds	@s02, @s02, _s') item='
001127:0x00270208:	moves	@s01, @s02
001127:0x00270218:	icall	ToString(item)
001127:0x00270228:	adds	@s01, @s01, #return
001127:0x00270238:	moves	@s00, @s01
001127:0x00270248:	call	inventoryDebugPrint(@s00)
001128:0x00270258:	call	
001128:0x00270270:	move	#return, #return
001128:0x00270280:	rts
001128:0x00270288:	rts
GameInventory::TakeEntityAsTargetAttachment()
001133:0x00270290:	call	EnumToString(_T(InventoryMode), mode)
001133:0x002702a8:	adds	@s03, _s'[inv] I::Take2AttEx(', #return
001133:0x002702b8:	moves	@s02, @s03
001133:0x002702c8:	adds	@s02, @s02, _s') item='
001133:0x002702d8:	moves	@s01, @s02
001133:0x002702e8:	icall	ToString(item)
001133:0x002702f8:	adds	@s01, @s01, #return
001133:0x00270308:	moves	@s00, @s01
001133:0x00270318:	call	inventoryDebugPrint(@s00)
001134:0x00270328:	call	
001134:0x00270348:	move	#return, #return
001134:0x00270358:	rts
001134:0x00270360:	rts
GameInventory::MakeDstForSwap()
001140:0x00270368:	cmpcm	dst1, null
001140:0x00270378:	bne	0x2703a0
001141:0x00270380:	new	dst1, InventoryLocation
001142:0x002703a0:	movefm	[0xb5b9f5b8], src1
001142:0x002703b0:	ncalli	InventoryLocation.Copy([0xb5b9f5b8])
001143:0x002703c0:	movefm	[0xb5b9f608], src2
001143:0x002703d0:	ncalli	InventoryLocation.CopyLocationFrom([0xb5b9f608], false)
001144:0x002703e0:	ncalli	InventoryLocation.GetItem()
001144:0x002703e8:	ncalli	EntityAI.GetInventory()
001144:0x002703f0:	ncalli	GameInventory.GetFlipCargo()
001144:0x002703f8:	ncalli	InventoryLocation.SetFlip(#return)
001146:0x00270408:	cmpcm	dst2, null
001146:0x00270418:	bne	0x270440
001147:0x00270420:	new	dst2, InventoryLocation
001148:0x00270440:	movefm	[0xb5b9f5b8], src2
001148:0x00270450:	ncalli	InventoryLocation.Copy([0xb5b9f5b8])
001149:0x00270460:	movefm	[0xb5b9f608], src1
001149:0x00270470:	ncalli	InventoryLocation.CopyLocationFrom([0xb5b9f608], false)
001150:0x00270480:	ncalli	InventoryLocation.GetItem()
001150:0x00270488:	ncalli	EntityAI.GetInventory()
001150:0x00270490:	ncalli	GameInventory.GetFlipCargo()
001150:0x00270498:	ncalli	InventoryLocation.SetFlip(#return)
001151:0x002704a8:	imove	#return, 0x000001
001151:0x002704b8:	movem	dst1, dst1
001151:0x002704c8:	movem	dst2, dst2
001151:0x002704d8:	rts
001151:0x002704e0:	movem	dst1, dst1
001151:0x002704f0:	movem	dst2, dst2
001151:0x00270500:	rts
GameInventory::MakeSrcAndDstForSwap()
001157:0x00270508:	cmpcm	src1, null
001157:0x00270518:	bne	0x270540
001158:0x00270520:	new	src1, InventoryLocation
001159:0x00270540:	cmpcm	src2, null
001159:0x00270550:	bne	0x270578
001160:0x00270558:	new	src2, InventoryLocation
001161:0x00270578:	ncalli	EntityAI.GetInventory()
001161:0x00270580:	movefm	[0xb5bad1f8], src1
001161:0x00270590:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001161:0x002705a0:	cmpi	#return, _i0
001161:0x002705b0:	beq	0x2706a0
001161:0x002705b8:	ncalli	EntityAI.GetInventory()
001161:0x002705c0:	movefm	[0xb5bad1f8], src2
001161:0x002705d0:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001161:0x002705e0:	cmpi	#return, _i0
001161:0x002705f0:	beq	0x2706a0
001162:0x002705f8:	call	MakeDstForSwap(src1, src2, dst1, dst2)
001162:0x00270618:	movem	dst1, dst1
001162:0x00270628:	movem	dst2, dst2
001162:0x00270638:	release	dst1
001162:0x00270640:	release	dst2
001162:0x00270648:	move	#return, #return
001162:0x00270658:	movem	src1, src1
001162:0x00270668:	movem	src2, src2
001162:0x00270678:	movem	dst1, dst1
001162:0x00270688:	movem	dst2, dst2
001162:0x00270698:	rts
001163:0x002706a0:	imove	#return, 0x000000
001163:0x002706b0:	movem	src1, src1
001163:0x002706c0:	movem	src2, src2
001163:0x002706d0:	movem	dst1, dst1
001163:0x002706e0:	movem	dst2, dst2
001163:0x002706f0:	rts
001163:0x002706f8:	movem	src1, src1
001163:0x00270708:	movem	src2, src2
001163:0x00270718:	movem	dst1, dst1
001163:0x00270728:	movem	dst2, dst2
001163:0x00270738:	rts
GameInventory::MakeSrcAndDstForForceSwap()
001169:0x00270740:	cmpcm	src1, null
001169:0x00270750:	bne	0x270778
001170:0x00270758:	new	src1, InventoryLocation
001171:0x00270778:	cmpcm	src2, null
001171:0x00270788:	bne	0x2707b0
001172:0x00270790:	new	src2, InventoryLocation
001173:0x002707b0:	ncalli	EntityAI.GetInventory()
001173:0x002707b8:	movefm	[0xb5bad1f8], src1
001173:0x002707c8:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001173:0x002707d8:	cmpi	#return, _i0
001173:0x002707e8:	beq	0x270918
001173:0x002707f0:	ncalli	EntityAI.GetInventory()
001173:0x002707f8:	movefm	[0xb5bad1f8], src2
001173:0x00270808:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001173:0x00270818:	cmpi	#return, _i0
001173:0x00270828:	beq	0x270918
001176:0x00270830:	cmpcm	dst1, null
001176:0x00270840:	bne	0x270868
001177:0x00270848:	new	dst1, InventoryLocation
001178:0x00270868:	movefm	[0xb5b9f5b8], src1
001178:0x00270878:	ncalli	InventoryLocation.Copy([0xb5b9f5b8])
001179:0x00270888:	movefm	[0xb5b9f608], src2
001179:0x00270898:	ncalli	InventoryLocation.CopyLocationFrom([0xb5b9f608], false)
001180:0x002708a8:	ncalli	InventoryLocation.GetItem()
001180:0x002708b0:	ncalli	EntityAI.GetInventory()
001180:0x002708b8:	ncalli	GameInventory.GetFlipCargo()
001180:0x002708c0:	ncalli	InventoryLocation.SetFlip(#return)
001183:0x002708d0:	imove	#return, 0x000001
001183:0x002708e0:	movem	src1, src1
001183:0x002708f0:	movem	src2, src2
001183:0x00270900:	movem	dst1, dst1
001183:0x00270910:	rts
001186:0x00270918:	imove	#return, 0x000000
001186:0x00270928:	movem	src1, src1
001186:0x00270938:	movem	src2, src2
001186:0x00270948:	movem	dst1, dst1
001186:0x00270958:	rts
001186:0x00270960:	movem	src1, src1
001186:0x00270970:	movem	src2, src2
001186:0x00270980:	movem	dst1, dst1
001186:0x00270990:	rts
GameInventory::SwapEntities()
001191:0x00270998:	imove	#return, 0x000000
001191:0x002709a8:	rts
001191:0x002709b0:	rts
GameInventory::ForceSwapEntities()
001196:0x002709b8:	imove	#return, 0x000000
001196:0x002709c8:	rts
001196:0x002709d0:	rts
GameInventory::SetGroundPosByOwner()
001202:0x00270a58:	call	MatrixIdentity4(m4)
001203:0x00270a68:	movefm	[0xb5bae290], owner
001203:0x00270a78:	movefm	[0xb5bae2b8], item
001203:0x00270a88:	ncall	PrepareDropEntityPos([0xb5bae290], [0xb5bae2b8], m4, false, INVENTORY_ENTITY_DROP_OVERLAP_DEPTH)
001203:0x00270aa8:	move	success, #return
001204:0x00270ab8:	movefm	[0xb5b9ef50], item
001204:0x00270ac8:	ncalli	InventoryLocation.SetGround([0xb5b9ef50], m4)
001205:0x00270ad8:	move	#return, success
001205:0x00270ae8:	movem	ground, ground
001205:0x00270af8:	rts
001205:0x00270b00:	movem	ground, ground
001205:0x00270b10:	rts
GameInventory::DropEntity()
001210:0x00270bb8:	call	EnumToString(_T(InventoryMode), mode)
001210:0x00270bd0:	adds	@s03, _s'[inv] I::Drop(', #return
001210:0x00270be0:	moves	@s02, @s03
001210:0x00270bf0:	adds	@s02, @s02, _s') item='
001210:0x00270c00:	moves	@s01, @s02
001210:0x00270c10:	icall	ToString(item)
001210:0x00270c20:	adds	@s01, @s01, #return
001210:0x00270c30:	moves	@s00, @s01
001210:0x00270c40:	call	inventoryDebugPrint(@s00)
001211:0x00270c50:	new	src, InventoryLocation
001212:0x00270c70:	ncalli	EntityAI.GetInventory()
001212:0x00270c78:	movefm	[0xb5bad1f8], src
001212:0x00270c88:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001212:0x00270c98:	cmpi	#return, _i0
001212:0x00270ca8:	beq	0x270da8
001214:0x00270cb0:	new	dst, InventoryLocation
001215:0x00270cd0:	call	SetGroundPosByOwner(owner, item, dst)
001215:0x00270ce8:	movem	dst, ground
001215:0x00270cf8:	release	ground
001215:0x00270d00:	cmpi	#return, _i0
001215:0x00270d10:	bne	0x270d60
001217:0x00270d18:	call	
001218:0x00270d38:	imove	#return, 0x000000
001218:0x00270d48:	release	dst
001218:0x00270d50:	release	src
001218:0x00270d58:	rts
001221:0x00270d60:	call	
001221:0x00270d78:	move	#return, #return
001221:0x00270d88:	release	dst
001221:0x00270d90:	release	src
001221:0x00270d98:	rts
001221:0x00270da0:	release	dst
001224:0x00270da8:	call	Error(_s'DropEntity - No inventory location')
001225:0x00270db8:	imove	#return, 0x000000
001225:0x00270dc8:	release	src
001225:0x00270dd0:	rts
001225:0x00270dd8:	release	src
001225:0x00270de0:	rts
GameInventory::SetGroundPosByTransform()
001230:0x00270e10:	movefm	[0xb5bae290], owner
001230:0x00270e20:	movefm	[0xb5bae2b8], item
001230:0x00270e30:	ncall	PrepareDropEntityPos([0xb5bae290], [0xb5bae2b8], transform, true, INVENTORY_ENTITY_DROP_OVERLAP_DEPTH)
001230:0x00270e50:	move	success, #return
001231:0x00270e60:	movefm	[0xb5b9ef50], item
001231:0x00270e70:	ncalli	InventoryLocation.SetGround([0xb5b9ef50], transform)
001232:0x00270e80:	move	#return, success
001232:0x00270e90:	movem	ground, ground
001232:0x00270ea0:	rts
001232:0x00270ea8:	movem	ground, ground
001232:0x00270eb8:	rts
GameInventory::DropEntityWithTransform()
001237:0x00270f38:	call	EnumToString(_T(InventoryMode), mode)
001237:0x00270f50:	adds	@s03, _s'[inv] I::Drop(', #return
001237:0x00270f60:	moves	@s02, @s03
001237:0x00270f70:	adds	@s02, @s02, _s') item='
001237:0x00270f80:	moves	@s01, @s02
001237:0x00270f90:	icall	ToString(item)
001237:0x00270fa0:	adds	@s01, @s01, #return
001237:0x00270fb0:	moves	@s00, @s01
001237:0x00270fc0:	call	inventoryDebugPrint(@s00)
001238:0x00270fd0:	new	src, InventoryLocation
001239:0x00270ff0:	ncalli	EntityAI.GetInventory()
001239:0x00270ff8:	movefm	[0xb5bad1f8], src
001239:0x00271008:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001239:0x00271018:	cmpi	#return, _i0
001239:0x00271028:	beq	0x271130
001241:0x00271030:	new	dst, InventoryLocation
001242:0x00271050:	call	SetGroundPosByTransform(owner, item, dst, transform)
001242:0x00271070:	movem	dst, ground
001242:0x00271080:	release	ground
001242:0x00271088:	cmpi	#return, _i0
001242:0x00271098:	bne	0x2710e8
001244:0x002710a0:	call	
001245:0x002710c0:	imove	#return, 0x000000
001245:0x002710d0:	release	dst
001245:0x002710d8:	release	src
001245:0x002710e0:	rts
001248:0x002710e8:	call	
001248:0x00271100:	move	#return, #return
001248:0x00271110:	release	dst
001248:0x00271118:	release	src
001248:0x00271120:	rts
001248:0x00271128:	release	dst
001251:0x00271130:	call	Error(_s'DropEntityWithTransform - No inventory location')
001252:0x00271140:	imove	#return, 0x000000
001252:0x00271150:	release	src
001252:0x00271158:	rts
001252:0x00271160:	release	src
001252:0x00271168:	rts
GameInventory::SetGroundPosByOwnerBounds()
001258:0x00271258:	icall	GetTransform(owner, m4)
001260:0x00271268:	ifv	@f02, halfExtents[0x000000]
001260:0x00271278:	subf	@f02, _f0.000000, @f02
001260:0x00271288:	ifv	@f01, halfExtents[0x000000]
001260:0x00271298:	icall	RandomFloat(@f02, @f01)
001260:0x002712a8:	ifv	@f04, halfExtents[0x000002]
001260:0x002712b8:	subf	@f04, _f0.000000, @f04
001260:0x002712c8:	ifv	@f03, halfExtents[0x000002]
001260:0x002712d8:	push	#return
001260:0x002712e0:	icall	RandomFloat(@f04, @f03)
001260:0x002712f0:	move	@f05, #return
001260:0x00271300:	pop	#return
001260:0x00271308:	ncall	Vector(#return, _f0.000000, @f05)
001260:0x00271320:	movev	randomPos, #return
001261:0x00271330:	call	RotateAroundZero(randomPos, Up, cosAngle, sinAngle)
001261:0x00271350:	movev	randomPos, #return
001263:0x00271360:	ifv	@f02, randomPos[0x000000]
001263:0x00271370:	ifv	@f03, m4[0x000003]
001263:0x00271380:	mulf	@f02, @f02, @f03
001263:0x00271390:	move	@f01, @f02
001263:0x002713a0:	ifv	@f03, randomPos[0x000001]
001263:0x002713b0:	ifv	@f04, m4[0x000004]
001263:0x002713c0:	mulf	@f03, @f03, @f04
001263:0x002713d0:	move	@f02, @f03
001263:0x002713e0:	addf	@f01, @f01, @f02
001263:0x002713f0:	move	@f00, @f01
001263:0x00271400:	ifv	@f02, randomPos[0x000002]
001263:0x00271410:	ifv	@f03, m4[0x000005]
001263:0x00271420:	mulf	@f02, @f02, @f03
001263:0x00271430:	move	@f01, @f02
001263:0x00271440:	addf	dist, @f00, @f01
001265:0x00271450:	ifv	@f00, m4[0x000009]
001265:0x00271460:	ifv	@f01, randomPos[0x000000]
001265:0x00271470:	addf	@f00, @f00, @f01
001265:0x00271480:	itv	m4[0x000009], @f00
001265:0x00271490:	ifv	@f00, m4[0x000009]
001266:0x002714a0:	imove	@m00, 0x00000a
001266:0x002714b0:	imove	@m01, 0x00000a
001266:0x002714c0:	ffv	@f01, m4[@m01]
001266:0x002714d0:	subf	@f01, @f01, dist
001266:0x002714e0:	move	@f00, @f01
001266:0x002714f0:	ifv	@f01, halfExtents[0x000001]
001266:0x00271500:	addf	@f00, @f00, @f01
001266:0x00271510:	ftv	m4[@m00], @f00
001266:0x00271520:	ffv	@f00, m4[@m00]
001267:0x00271530:	imove	@m00, 0x00000b
001267:0x00271540:	imove	@m01, 0x00000b
001267:0x00271550:	ffv	@f00, m4[@m01]
001267:0x00271560:	ifv	@f01, randomPos[0x000002]
001267:0x00271570:	addf	@f00, @f00, @f01
001267:0x00271580:	ftv	m4[@m00], @f00
001267:0x00271590:	ffv	@f00, m4[@m00]
001269:0x002715a0:	ifv	@f00, m4[0x000009]
001269:0x002715b0:	imove	@m00, 0x00000a
001269:0x002715c0:	ffv	@f01, m4[@m00]
001269:0x002715d0:	imove	@m00, 0x00000b
001269:0x002715e0:	ffv	@f02, m4[@m00]
001269:0x002715f0:	ncall	Vector(@f00, @f01, @f02)
001269:0x00271608:	ncalli	EntityAI.PlaceOnSurfaceRotated(m4, #return, _f0.000000, _f0.000000, _f0.000000, _i0)
001271:0x00271628:	movefm	[0xb5b9ef50], item
001271:0x00271638:	ncalli	InventoryLocation.SetGround([0xb5b9ef50], m4)
001271:0x00271648:	movem	ground, ground
001271:0x00271658:	rts
GameInventory::DropEntityInBounds()
001276:0x002716d8:	call	EnumToString(_T(InventoryMode), mode)
001276:0x002716f0:	adds	@s03, _s'[inv] I::Drop(', #return
001276:0x00271700:	moves	@s02, @s03
001276:0x00271710:	adds	@s02, @s02, _s') item='
001276:0x00271720:	moves	@s01, @s02
001276:0x00271730:	icall	ToString(item)
001276:0x00271740:	adds	@s01, @s01, #return
001276:0x00271750:	moves	@s00, @s01
001276:0x00271760:	call	inventoryDebugPrint(@s00)
001278:0x00271770:	new	src, InventoryLocation
001279:0x00271790:	ncalli	EntityAI.GetInventory()
001279:0x00271798:	movefm	[0xb5bad1f8], src
001279:0x002717a8:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001279:0x002717b8:	cmpi	#return, _i0
001279:0x002717c8:	beq	0x271878
001281:0x002717d0:	new	dst, InventoryLocation
001283:0x002717f0:	call	SetGroundPosByOwnerBounds(owner, item, dst, halfExtents, angle, cosAngle, sinAngle)
001283:0x00271818:	movem	dst, ground
001283:0x00271828:	release	ground
001285:0x00271830:	call	
001285:0x00271848:	move	#return, #return
001285:0x00271858:	release	dst
001285:0x00271860:	release	src
001285:0x00271868:	rts
001285:0x00271870:	release	dst
001288:0x00271878:	call	Error(_s'DropEntityInBounds - No inventory location')
001289:0x00271888:	imove	#return, 0x000000
001289:0x00271898:	release	src
001289:0x002718a0:	rts
001289:0x002718a8:	release	src
001289:0x002718b0:	rts
GameInventory::LocalDestroyEntity()
001294:0x00271930:	icall	ToString(item)
001294:0x00271940:	adds	@s01, _s'[inv] I::LocalDestroyEntity inv item=', #return
001294:0x00271950:	moves	@s00, @s01
001294:0x00271960:	call	inventoryDebugPrint(@s00)
001295:0x00271970:	new	src, InventoryLocation
001296:0x00271990:	ncalli	EntityAI.GetInventory()
001296:0x00271998:	movefm	[0xb5bad1f8], src
001296:0x002719a8:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001296:0x002719b8:	cmpi	#return, _i0
001296:0x002719c8:	beq	0x271a50
001298:0x002719d0:	ncalli	InventoryLocation.GetType()
001298:0x002719d8:	move	@m00, #return
001298:0x002719e8:	cmpi	@m00, _i4
001298:0x002719f8:	bne	0x271a10
001299:0x00271a00:	call	Error(_s'[inv] Source location == HANDS, player has to handle this')
001301:0x00271a10:	ncall	GetGame()
001301:0x00271a18:	ncalli	InventoryLocation.GetItem()
001301:0x00271a20:	ncalli	CGame.ObjectDelete(#return)
001302:0x00271a30:	imove	#return, 0x000001
001302:0x00271a40:	release	src
001302:0x00271a48:	rts
001305:0x00271a50:	call	Error(_s'LocalDestroyEntity: No inventory location')
001306:0x00271a60:	imove	#return, 0x000000
001306:0x00271a70:	release	src
001306:0x00271a78:	rts
001306:0x00271a80:	release	src
001306:0x00271a88:	rts
GameInventory::ReplaceItemWithNew()
001311:0x00271b30:	new	src, InventoryLocation
001312:0x00271b50:	movefm	@c00, lambda
001312:0x00271b60:	movefm	[0xb5b25dc0], m_OldItem
001312:0x00271b70:	ncalli	EntityAI.GetInventory()
001312:0x00271b78:	movefm	[0xb5bad1f8], src
001312:0x00271b88:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
001312:0x00271b98:	cmpi	#return, _i0
001312:0x00271ba8:	beq	0x271c80
001314:0x00271bb0:	icall	ToString(lambda)
001314:0x00271bc0:	adds	@s03, _s'[inv] I::ReplaceItemWithNew executing lambda=', #return
001314:0x00271bd0:	moves	@s02, @s03
001314:0x00271be0:	adds	@s02, @s02, _s'on old_item='
001314:0x00271bf0:	moves	@s01, @s02
001314:0x00271c00:	movefm	@c00, lambda
001314:0x00271c10:	icall	ToString(m_OldItem)
001314:0x00271c20:	adds	@s01, @s01, #return
001314:0x00271c30:	moves	@s00, @s01
001314:0x00271c40:	call	inventoryDebugPrint(@s00)
001315:0x00271c50:	call	
001316:0x00271c60:	imove	#return, 0x000001
001316:0x00271c70:	release	src
001316:0x00271c78:	rts
001319:0x00271c80:	call	Error(_s'[inv] I::ReplaceItemWithNew - no inventory location')
001320:0x00271c90:	imove	#return, 0x000000
001320:0x00271ca0:	release	src
001320:0x00271ca8:	rts
001320:0x00271cb0:	release	src
001320:0x00271cb8:	rts
BloodSplatter::BloodSplatter()
//scripts/3_Game/effects\effectparticle\bloodsplatter.c
000005:0x00271cc0:	call	
000005:0x00271cd0:	rts
ComponentsBank::ComponentsBank()
//scripts/3_Game/tools\componentsbank.c
000008:0x00271cd8:	movem	m_EntityParent, entity_parent
000008:0x00271ce8:	rts
ComponentsBank::GetComponent()
000013:0x00271d18:	call	IsTypeExist(comp_type)
000013:0x00271d28:	cmpi	#return, _i0
000013:0x00271d38:	bne	0x271d70
000015:0x00271d40:	call	LogErrorBadCompType(comp_type, _s'EntityAI.GetComponent(int comp_type)')
000016:0x00271d58:	movetm	#return, NULL
000016:0x00271d68:	rts
000019:0x00271d70:	call	
000019:0x00271d80:	cmpi	#return, _i0
000019:0x00271d90:	bne	0x271db8
000021:0x00271d98:	call	
000021:0x00271db0:	release	#return
000024:0x00271db8:	cfv	@c00, m_Components[comp_type]
000024:0x00271dc8:	movetm	#return, @c00
000024:0x00271dd8:	rts
000024:0x00271de0:	rts
ComponentsBank::DeleteComponent()
000029:0x00271de8:	call	
000029:0x00271df8:	cmpi	#return, _i0
000029:0x00271e08:	beq	0x271e38
000031:0x00271e10:	ctv	m_Components[comp_type], NULL
000032:0x00271e20:	imove	#return, 0x000001
000032:0x00271e30:	rts
000035:0x00271e38:	imove	#return, 0x000000
000035:0x00271e48:	rts
000035:0x00271e50:	rts
ComponentsBank::CreateComponent()
000040:0x00271f28:	call	IsTypeExist(comp_type)
000040:0x00271f38:	cmpi	#return, _i0
000040:0x00271f48:	bne	0x271f80
000042:0x00271f50:	call	LogErrorBadCompType(comp_type, _s'EntityAI->CreateComponent(int comp_type)')
000043:0x00271f68:	movetm	#return, NULL
000043:0x00271f78:	rts
000046:0x00271f80:	call	
000046:0x00271f90:	cmpi	#return, _i0
000046:0x00271fa0:	beq	0x271fe8
000048:0x00271fa8:	call	LogWarningAlredyExist(comp_type, _s'EntityAI->CreateComponent(int comp_type)')
000049:0x00271fc0:	cfv	@c00, m_Components[comp_type]
000049:0x00271fd0:	movetm	#return, @c00
000049:0x00271fe0:	rts
000053:0x00271fe8:	moves	clas_name, extended_class_name
000055:0x00271ff8:	cmps	clas_name, Empty
000055:0x00272008:	bne	0x272030
000057:0x00272010:	call	GetNameByType(comp_type)
000057:0x00272020:	moves	clas_name, #return
000060:0x00272030:	ncall	ToType(clas_name)
000060:0x00272040:	icall	Spawn(#return)
000060:0x00272050:	icall	SafeCastType([0xb5b36500], @c01, #return)
000060:0x00272068:	movetm	comp, @c01
000062:0x00272078:	movem	e, m_EntityParent
000062:0x00272088:	call	
000063:0x00272098:	call	
000065:0x002720a8:	ctv	m_Components[comp_type], comp
000067:0x002720b8:	call	
000069:0x002720c8:	movem	#return, comp
000069:0x002720d8:	release	comp
000069:0x002720e0:	rts
000069:0x002720e8:	release	comp
000069:0x002720f0:	rts
ComponentsBank::IsComponentAlreadyExist()
000074:0x002720f8:	cfv	@c00, m_Components[comp_type]
000074:0x00272108:	cmpc	@c00, NULL
000074:0x00272118:	beq	0x272138
000076:0x00272120:	imove	#return, 0x000001
000076:0x00272130:	rts
000079:0x00272138:	imove	#return, 0x000000
000079:0x00272148:	rts
000079:0x00272150:	rts
CachedObjectsParams::Init()
//scripts/3_Game/tools\utilityclasses.c
000025:0x00272158:	new	PARAM1_INT, Param1<int>
000026:0x00272180:	new	PARAM1_BOOL, Param1<bool>
000027:0x002721a8:	new	PARAM1_FLOAT, Param1<float>
000028:0x002721d0:	new	PARAM1_STRING, Param1<string>
000030:0x002721f8:	new	PARAM2_INT_INT, Param2<int,int>
000031:0x00272220:	new	PARAM2_INT_FLOAT, Param2<int,float>
000032:0x00272248:	new	PARAM2_INT_STRING, Param2<int,string>
000033:0x00272270:	new	PARAM2_STRING_FLOAT, Param2<string,float>
000034:0x00272298:	new	PARAM2_STRING_STRING, Param2<string,string>
000035:0x002722c0:	new	PARAM2_FLOAT_FLOAT, Param2<float,float>
000035:0x002722e8:	rts
CachedObjectsArrays::Init()
000044:0x002722f0:	new	ARRAY_STRING, array<string>
000045:0x00272310:	new	ARRAY_FLOAT, array<float>
000046:0x00272330:	new	ARRAY_INT, array<int>
000046:0x00272350:	rts
Hit_Foliage::Hit_Foliage()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_foliage.c
000005:0x00272358:	call	
000006:0x00272368:	call	
000007:0x00272378:	call	
000007:0x00272388:	rts
Hit_Foliage::CalculateStoppingForce()
000012:0x00272408:	cmpi	m_ImpactType, MELEE
000012:0x00272418:	bne	0x272438
000014:0x00272420:	imove	#return, 500.00000
000014:0x00272430:	rts
000017:0x00272438:	divf	projectile_weight_coef, weight, DEFAULT_PROJECTILE_WEIGHT
000019:0x00272448:	mulf	@f01, in_speedf, projectile_weight_coef
000019:0x00272458:	move	@f00, @f01
000019:0x00272468:	mulf	stopping_force, @f00, _f0.500000
000021:0x00272478:	move	#return, stopping_force
000021:0x00272488:	rts
000021:0x00272490:	rts
PPERequester_ServerBrowserBlur::OnStart()
//scripts/3_Game/ppemanager\requesters\pperserverbrowser.c
000007:0x00272498:	call	
000009:0x002724a8:	movefm	@c01, par
000009:0x002724b8:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000009:0x002724d0:	movec	@c02, @c00
000009:0x002724e0:	move	m_Gauss, param1
000011:0x002724f0:	move	val, m_Gauss
000011:0x00272500:	call	
000011:0x00272528:	rts
InputUtils::GetButtonNameFromInput()
//scripts/3_Game/tools\inpututils.c
000019:0x00272580:	ncall	GetUApi()
000019:0x00272588:	ncalli	UAInputAPI.GetInputByName(pInputName)
000019:0x00272598:	movec	inp, #return
000020:0x002725a8:	imove	i, 0x000000
000020:0x002725b8:	jump	0x2725d8
000020:0x002725c0:	move	@m00, i
000020:0x002725d0:	inc	i
000020:0x002725d8:	ncalli	UAInput.AlternativeCount()
000020:0x002725e0:	cmpi	i, #return
000020:0x002725f0:	bge	0x272678
000022:0x002725f8:	ncalli	UAInput.SelectAlternative(i)
000023:0x00272608:	ncalli	UAInput.CheckBindDevice(_i0, pInputDeviceType)
000023:0x00272618:	cmpi	#return, _i0
000023:0x00272628:	beq	0x272670
000025:0x00272630:	ncall	GetUApi()
000025:0x00272638:	ncalli	UAInput.GetBindKey(_i0)
000025:0x00272648:	ncalli	UAInputAPI.GetButtonName(#return)
000025:0x00272658:	moves	#return, #return
000025:0x00272668:	rts
000025:0x00272670:	jump	0x2725c0
000029:0x00272678:	moves	#return, _s''
000029:0x00272688:	rts
000029:0x00272690:	rts
InputUtils::GetComboButtonNamesFromInput()
000035:0x00272788:	ncall	GetUApi()
000035:0x00272790:	ncalli	UAInputAPI.GetInputByName(pInputName)
000035:0x002727a0:	movec	inp, #return
000038:0x002727b0:	imove	i, 0x000000
000038:0x002727c0:	jump	0x2727e0
000038:0x002727c8:	move	@m00, i
000038:0x002727d8:	inc	i
000038:0x002727e0:	ncalli	UAInput.AlternativeCount()
000038:0x002727e8:	cmpi	i, #return
000038:0x002727f8:	bge	0x272ad8
000040:0x00272800:	ncalli	UAInput.SelectAlternative(i)
000041:0x00272810:	ncalli	UAInput.BindingCount()
000041:0x00272818:	move	@m00, #return
000041:0x00272828:	cmpi	@m00, _i0
000041:0x00272838:	ble	0x272ad0
000041:0x00272840:	ncalli	UAInput.Binding(_i0)
000041:0x00272850:	move	@m00, #return
000041:0x00272860:	cmpi	@m00, _i0
000041:0x00272870:	beq	0x272ad0
000041:0x00272878:	ncalli	UAInput.CheckBindDevice(_i0, pInputDeviceType)
000041:0x00272888:	cmpi	#return, _i0
000041:0x00272898:	beq	0x272ad0
000043:0x002728a0:	new	buttons, array<string>
000044:0x002728c0:	ncalli	UAInput.IsCombo()
000044:0x002728c8:	cmpi	#return, _i0
000044:0x002728d8:	beq	0x272a10
000046:0x002728e0:	ncall	GetUApi()
000046:0x002728e8:	ncalli	UAInput.Binding(_i0)
000046:0x002728f8:	ncalli	UAInputAPI.GetButtonName(#return)
000046:0x00272908:	icall	
000048:0x00272918:	imove	j, 0x000001
000048:0x00272928:	jump	0x272948
000048:0x00272930:	move	@m00, j
000048:0x00272940:	inc	j
000048:0x00272948:	ncalli	UAInput.BindingCount()
000048:0x00272950:	cmpi	j, #return
000048:0x00272960:	bge	0x272a08
000050:0x00272968:	ncalli	UAInput.Binding(j)
000050:0x00272978:	move	@m00, #return
000050:0x00272988:	cmpi	@m00, _i0
000050:0x00272998:	beq	0x272a00
000050:0x002729a0:	ncalli	UAInput.CheckBindDevice(j, pInputDeviceType)
000050:0x002729b0:	cmpi	#return, _i0
000050:0x002729c0:	beq	0x272a00
000052:0x002729c8:	ncall	GetUApi()
000052:0x002729d0:	ncalli	UAInput.Binding(j)
000052:0x002729e0:	ncalli	UAInputAPI.GetButtonName(#return)
000052:0x002729f0:	icall	
000052:0x00272a00:	jump	0x272930
000052:0x00272a08:	jump	0x272a48
000059:0x00272a10:	ncall	GetUApi()
000059:0x00272a18:	ncalli	UAInput.GetBindKey(_i0)
000059:0x00272a28:	ncalli	UAInputAPI.GetButtonName(#return)
000059:0x00272a38:	icall	
000063:0x00272a48:	ncalli	array<string>.Count()
000063:0x00272a50:	move	@m00, #return
000063:0x00272a60:	cmpi	@m00, _i0
000063:0x00272a70:	ble	0x272ad0
000065:0x00272a78:	cmpcm	output, null
000065:0x00272a88:	bne	0x272ab0
000067:0x00272a90:	new	output, map<int,@array<string>>
000069:0x00272ab0:	movefm	@c00, buttons
000069:0x00272ac0:	icall	
000069:0x00272ad0:	jump	0x2727c8
000074:0x00272ad8:	movem	#return, output
000074:0x00272ae8:	release	buttons
000074:0x00272af0:	release	output
000074:0x00272af8:	rts
000074:0x00272b00:	release	buttons
000074:0x00272b08:	release	output
000074:0x00272b10:	rts
InputUtils::GetButtonIconPathFromInput()
000079:0x00272c38:	new	buttonIcons, array<string>
000081:0x00272c58:	imove	i, 0x000000
000081:0x00272c68:	jump	0x272c88
000081:0x00272c70:	move	@m00, i
000081:0x00272c80:	inc	i
000081:0x00272c88:	ncalli	UAInput.AlternativeCount()
000081:0x00272c90:	cmpi	i, #return
000081:0x00272ca0:	bge	0x272e20
000083:0x00272ca8:	ncalli	UAInput.SelectAlternative(i)
000084:0x00272cb8:	imove	done, 0x000000
000085:0x00272cc8:	imove	bk, 0x000000
000085:0x00272cd8:	jump	0x272cf8
000085:0x00272ce0:	move	@m00, bk
000085:0x00272cf0:	inc	bk
000085:0x00272cf8:	ncalli	UAInput.BindKeyCount()
000085:0x00272d00:	cmpi	bk, #return
000085:0x00272d10:	bge	0x272dd0
000087:0x00272d18:	ncalli	UAInput.CheckBindDevice(_i0, pInputDeviceType)
000087:0x00272d28:	cmpi	#return, _i0
000087:0x00272d38:	beq	0x272dc8
000089:0x00272d40:	ncall	GetUApi()
000089:0x00272d48:	ncalli	UAInput.Binding(bk)
000089:0x00272d58:	ncalli	UAInputAPI.GetButtonIcon(#return)
000089:0x00272d68:	icall	
000091:0x00272d78:	ncalli	UAInput.BindKeyCount()
000091:0x00272d80:	subi	@m01, #return, _i1
000091:0x00272d90:	move	@m00, @m01
000091:0x00272da0:	cmpi	bk, @m00
000091:0x00272db0:	bne	0x272dc8
000093:0x00272db8:	imove	done, 0x000001
000093:0x00272dc8:	jump	0x272ce0
000098:0x00272dd0:	cmpi	done, _i0
000098:0x00272de0:	beq	0x272e18
000100:0x00272de8:	call	
000101:0x00272df8:	movem	#return, buttonIcons
000101:0x00272e08:	release	buttonIcons
000101:0x00272e10:	rts
000101:0x00272e18:	jump	0x272c70
000105:0x00272e20:	movem	#return, buttonIcons
000105:0x00272e30:	release	buttonIcons
000105:0x00272e38:	rts
000105:0x00272e40:	release	buttonIcons
000105:0x00272e48:	rts
InputUtils::GetButtonIconPathFromInput#119707()
000110:0x00272ea0:	ncall	GetUApi()
000110:0x00272ea8:	ncalli	UAInputAPI.GetInputByName(pInputName)
000110:0x00272eb8:	movec	inp, #return
000112:0x00272ec8:	new	buttonIcons, array<string>
000113:0x00272ee8:	call	GetButtonIconPathFromInput(inp, pInputDeviceType)
000113:0x00272f00:	movem	buttonIcons, #return
000113:0x00272f10:	release	#return
000115:0x00272f18:	movem	#return, buttonIcons
000115:0x00272f28:	release	buttonIcons
000115:0x00272f30:	rts
000115:0x00272f38:	release	buttonIcons
000115:0x00272f40:	rts
InputUtils::GetImagesetAndIconFromInputAction()
000120:0x00272fc0:	call	GetButtonIconPathFromInput(pInput, pInputDeviceType)
000120:0x00272fd8:	movem	buttons, #return
000120:0x00272fe8:	release	#return
000121:0x00272ff0:	ncalli	array<string>.Count()
000121:0x00272ff8:	move	@m00, #return
000121:0x00273008:	cmpi	@m00, _i0
000121:0x00273018:	bne	0x273050
000123:0x00273020:	release	buttons
000123:0x00273028:	movem	pImageSet, pImageSet
000123:0x00273038:	movem	pIconName, pIconName
000123:0x00273048:	rts
000126:0x00273050:	imove	i, 0x000000
000126:0x00273060:	jump	0x273080
000126:0x00273068:	move	@m00, i
000126:0x00273078:	inc	i
000126:0x00273080:	ncalli	array<string>.Count()
000126:0x00273088:	cmpi	i, #return
000126:0x00273098:	bge	0x2732c8
000128:0x002730a0:	new	parts, array<string>
000129:0x002730c0:	icall	
000129:0x002730d0:	call	Split(#return, _s':', parts)
000129:0x002730e8:	movem	parts, output
000129:0x002730f8:	release	output
000131:0x00273100:	ncalli	array<string>.Count()
000131:0x00273108:	move	@m00, #return
000131:0x00273118:	cmpi	@m00, _i2
000131:0x00273128:	bge	0x273168
000133:0x00273130:	release	parts
000133:0x00273138:	release	buttons
000133:0x00273140:	movem	pImageSet, pImageSet
000133:0x00273150:	movem	pIconName, pIconName
000133:0x00273160:	rts
000136:0x00273168:	icall	
000136:0x00273178:	pushs	#return
000136:0x00273180:	icall	
000136:0x00273190:	moves	@s02, #return
000136:0x002731a0:	pops	#return
000136:0x002731a8:	pushs	#return
000136:0x002731b0:	icall	
000136:0x002731c0:	moves	@s01, #return
000136:0x002731d0:	pops	#return
000136:0x002731d8:	ncall	Length(@s01)
000136:0x002731e8:	subi	@m01, #return, _i6
000136:0x002731f8:	move	@m00, @m01
000136:0x00273208:	pushs	#return
000136:0x00273210:	icall	
000136:0x00273220:	moves	@s03, #return
000136:0x00273230:	pops	#return
000136:0x00273238:	push	#return
000136:0x00273240:	ncall	Length(@s03)
000136:0x00273250:	move	@m02, #return
000136:0x00273260:	pop	#return
000136:0x00273268:	call	SubstringInverted(#return, @s02, @m00, @m02)
000136:0x00273288:	icall	
000156:0x00273298:	icall	
000156:0x002732a8:	icall	
000156:0x002732b8:	release	parts
000156:0x002732c0:	jump	0x273068
000156:0x002732c8:	release	buttons
000156:0x002732d0:	movem	pImageSet, pImageSet
000156:0x002732e0:	movem	pIconName, pIconName
000156:0x002732f0:	rts
InputUtils::GetImagesetAndIconFromInputAction#119926()
000162:0x00273320:	ncall	GetUApi()
000162:0x00273328:	ncalli	UAInputAPI.GetInputByName(pInputAction)
000162:0x00273338:	movec	inp, #return
000164:0x00273348:	call	GetImagesetAndIconFromInputAction(inp, pInputDeviceType, pImageSet, pIconName)
000164:0x00273368:	movem	pImageSet, pImageSet
000164:0x00273378:	movem	pIconName, pIconName
000164:0x00273388:	release	pImageSet
000164:0x00273390:	release	pIconName
000164:0x00273398:	movem	pImageSet, pImageSet
000164:0x002733a8:	movem	pIconName, pIconName
000164:0x002733b8:	rts
InputUtils::GetRichtextButtonIconFromInputAction()
000169:0x00273580:	new	imageSets, array<string>
000170:0x002735a0:	new	iconNames, array<string>
000171:0x002735c0:	call	GetImagesetAndIconFromInputAction(pInput, pInputDeviceType, imageSets, iconNames)
000171:0x002735e0:	movem	imageSets, pImageSet
000171:0x002735f0:	movem	iconNames, pIconName
000171:0x00273600:	release	pImageSet
000171:0x00273608:	release	pIconName
000173:0x00273610:	ncalli	array<string>.Count()
000173:0x00273618:	move	@m00, #return
000173:0x00273628:	cmpi	@m00, _i0
000173:0x00273638:	bne	0x273668
000175:0x00273640:	moves	#return, _s''
000175:0x00273650:	release	imageSets
000175:0x00273658:	release	iconNames
000175:0x00273660:	rts
000178:0x00273668:	icall	
000178:0x00273678:	pushs	#return
000178:0x00273680:	icall	
000178:0x00273690:	moves	@s01, #return
000178:0x002736a0:	pops	#return
000178:0x002736a8:	icall	Format(_s'<image set="%1" name="%2" scale="%3" />', #return, @s01, pScale, _c0, _c0, _c0, _c0, _c0, _c0)
000178:0x002736d8:	moves	result, #return
000180:0x002736e8:	moves	divider, _s' '
000181:0x002736f8:	cmpi	pVertical, _i0
000181:0x00273708:	beq	0x273750
000183:0x00273710:	icall	Format(_s'
%1
', divider, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000183:0x00273740:	moves	divider, #return
000186:0x00273750:	ncalli	array<string>.Count()
000186:0x00273758:	move	@m00, #return
000186:0x00273768:	cmpi	@m00, _i1
000186:0x00273778:	ble	0x273858
000189:0x00273780:	imove	i, 0x000001
000189:0x00273790:	jump	0x2737b0
000189:0x00273798:	move	@m00, i
000189:0x002737a8:	inc	i
000189:0x002737b0:	ncalli	array<string>.Count()
000189:0x002737b8:	cmpi	i, #return
000189:0x002737c8:	bge	0x273858
000191:0x002737d0:	icall	
000191:0x002737e0:	pushs	#return
000191:0x002737e8:	icall	
000191:0x002737f8:	moves	@s01, #return
000191:0x00273808:	pops	#return
000191:0x00273810:	icall	Format(_s'%1%2<image set="%3" name="%4" scale="%5" />', result, divider, #return, @s01, pScale, _c0, _c0, _c0, _c0)
000191:0x00273840:	moves	result, #return
000191:0x00273850:	jump	0x273798
000195:0x00273858:	icall	Format(_s'%1 %2', result, pLocalizedDescription, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000195:0x00273888:	moves	#return, #return
000195:0x00273898:	release	imageSets
000195:0x002738a0:	release	iconNames
000195:0x002738a8:	rts
000195:0x002738b0:	release	imageSets
000195:0x002738b8:	release	iconNames
000195:0x002738c0:	rts
InputUtils::GetRichtextButtonIconFromInputAction#120182()
000200:0x00273940:	ncall	GetUApi()
000200:0x00273948:	ncalli	UAInputAPI.GetInputByName(pInputAction)
000200:0x00273958:	movec	inp, #return
000202:0x00273968:	new	imageSets, array<string>
000203:0x00273988:	new	iconNames, array<string>
000204:0x002739a8:	call	GetImagesetAndIconFromInputAction(inp, pInputDeviceType, imageSets, iconNames)
000204:0x002739c8:	movem	imageSets, pImageSet
000204:0x002739d8:	movem	iconNames, pIconName
000204:0x002739e8:	release	pImageSet
000204:0x002739f0:	release	pIconName
000206:0x002739f8:	call	GetRichtextButtonIconFromInputAction(inp, pLocalizedDescription, pInputDeviceType, pScale, pVertical)
000206:0x00273a18:	moves	#return, #return
000206:0x00273a28:	release	imageSets
000206:0x00273a30:	release	iconNames
000206:0x00273a38:	rts
000206:0x00273a40:	release	imageSets
000206:0x00273a48:	release	iconNames
000206:0x00273a50:	rts
InputUtils::UpdateConsolePresetID()
000212:0x00273ab0:	ncall	GetGame()
000212:0x00273ab8:	ncalli	CGame.GetInput()
000212:0x00273ac0:	ncall	GetUApi()
000212:0x00273ac8:	ncalli	UAInputAPI.PresetCurrent()
000212:0x00273ad0:	icall	
000214:0x00273ae0:	cmps	profile_name, PRESET_OLD
000214:0x00273af0:	bne	0x273b10
000216:0x00273af8:	imove	m_CurrentPresetIDConsole, 0x000000
000216:0x00273b08:	jump	0x273b20
000220:0x00273b10:	imove	m_CurrentPresetIDConsole, 0x000001
000220:0x00273b20:	rts
InputUtils::GetConsolePresetID()
000226:0x00273b28:	move	#return, m_CurrentPresetIDConsole
000226:0x00273b38:	rts
000226:0x00273b40:	rts
InputUtils::GetInputActionSortingMap()
000231:0x00273b48:	movem	#return, m_InputActionSortingMap
000231:0x00273b58:	rts
000231:0x00273b60:	rts
InputUtils::GetUnsortedInputActions()
000236:0x00273b68:	movem	#return, m_UnsortedInputActions
000236:0x00273b78:	rts
000236:0x00273b80:	rts
InputUtils::InitInputMetadata()
000241:0x00273d30:	cmpcm	m_InputActionSortingMap, null
000241:0x00273d40:	bne	0x274068
000243:0x00273d48:	new	m_InputActionSortingMap, map<int,@array<int>>
000245:0x00273d68:	new	sorted_actions, array<int>
000246:0x00273d88:	cmpcm	m_UnsortedInputActions, null
000246:0x00273d98:	bne	0x273dc0
000248:0x00273da0:	new	m_UnsortedInputActions, array<int>
000250:0x00273dc0:	ncall	GetUApi()
000250:0x00273dc8:	movefm	[0xb5bcb1a0], m_UnsortedInputActions
000250:0x00273dd8:	ncalli	UAInputAPI.GetActiveInputs([0xb5bcb1a0])
000254:0x00273de8:	imove	i, 0x000000
000254:0x00273df8:	jump	0x273e18
000254:0x00273e00:	move	@m00, i
000254:0x00273e10:	inc	i
000254:0x00273e18:	ncall	GetUApi()
000254:0x00273e20:	ncalli	UAInputAPI.SortingCount()
000254:0x00273e28:	cmpi	i, #return
000254:0x00273e38:	bge	0x273fb8
000257:0x00273e40:	new	sorting_content, array<int>
000258:0x00273e60:	imove	j, 0x000000
000258:0x00273e70:	jump	0x273e90
000258:0x00273e78:	move	@m00, j
000258:0x00273e88:	inc	j
000258:0x00273e90:	ncalli	array<int>.Count()
000258:0x00273e98:	cmpi	j, #return
000258:0x00273ea8:	bge	0x273f48
000260:0x00273eb0:	icall	
000260:0x00273ec0:	move	input_id, #return
000261:0x00273ed0:	ncall	GetUApi()
000261:0x00273ed8:	ncalli	UAInputAPI.GetInputByID(input_id)
000261:0x00273ee8:	movec	inp, #return
000262:0x00273ef8:	ncalli	UAInput.HasSorting(i)
000262:0x00273f08:	cmpi	#return, _i0
000262:0x00273f18:	beq	0x273f40
000264:0x00273f20:	icall	
000265:0x00273f30:	icall	
000265:0x00273f40:	jump	0x273e78
000269:0x00273f48:	ncalli	array<int>.Count()
000269:0x00273f50:	move	@m00, #return
000269:0x00273f60:	cmpi	@m00, _i0
000269:0x00273f70:	ble	0x273fa8
000271:0x00273f78:	ncalli	array<int>.Sort(_i0)
000272:0x00273f88:	movefm	@c00, sorting_content
000272:0x00273f98:	icall	
000272:0x00273fa8:	release	sorting_content
000272:0x00273fb0:	jump	0x273e00
000277:0x00273fb8:	ncalli	array<int>.Count()
000277:0x00273fc0:	move	count, #return
000278:0x00273fd0:	imove	i, 0x000000
000278:0x00273fe0:	jump	0x274000
000278:0x00273fe8:	move	@m00, i
000278:0x00273ff8:	inc	i
000278:0x00274000:	cmpi	i, count
000278:0x00274010:	bge	0x274040
000280:0x00274018:	icall	
000280:0x00274028:	call	
000280:0x00274038:	jump	0x273fe8
000282:0x00274040:	imove	#return, 0x000001
000282:0x00274050:	release	sorted_actions
000282:0x00274058:	rts
000282:0x00274060:	release	sorted_actions
000284:0x00274068:	imove	#return, 0x000000
000284:0x00274078:	rts
000284:0x00274080:	rts
ScrollBarContainer::ScrollFixedAmount()
//scripts/3_Game/gui\containers\scrollbarcontainer.c
000026:0x002741b0:	movefm	[0xd31345a8], m_root
000026:0x002741c0:	ncalli	Widget.Update()
000027:0x002741c8:	movefm	[0xd31345a8], Content
000027:0x002741d8:	ncalli	Widget.Update()
000030:0x002741e0:	movefm	[0xd31345a8], m_root
000030:0x002741f0:	icall	
000031:0x00274200:	movefm	[0xd31345a8], Content
000031:0x00274210:	icall	
000033:0x00274220:	divf	diff, m_root_height, m_content_height
000034:0x00274230:	divf	one_percent, diff, _f100.000000
000035:0x00274240:	divf	percents, amount, m_content_height
000037:0x00274250:	divf	step, percents, _f100.000000
000038:0x00274260:	cmpi	down, _i0
000038:0x00274270:	beq	0x2742c0
000039:0x00274278:	addf	@f02, percents, _f0.050000
000039:0x00274288:	move	@f01, @f02
000039:0x00274298:	mulf	@f00, _f1.000000, @f01
000039:0x002742a8:	addf	m_position, m_position, @f00
000039:0x002742b8:	jump	0x274300
000041:0x002742c0:	addf	@f02, percents, _f0.050000
000041:0x002742d0:	move	@f01, @f02
000041:0x002742e0:	mulf	@f00, _f1.000000, @f01
000041:0x002742f0:	subf	m_position, m_position, @f00
000043:0x00274300:	cmpf	m_position, _f0.000000
000043:0x00274310:	bge	0x274328
000043:0x00274318:	imove	m_position, 0.00000
000044:0x00274328:	subf	@f01, _f1.000000, diff
000044:0x00274338:	move	@f00, @f01
000044:0x00274348:	cmpf	m_position, @f00
000044:0x00274358:	ble	0x274380
000044:0x00274360:	subf	@f00, _f1.000000, diff
000044:0x00274370:	move	m_position, @f00
000045:0x00274380:	call	
000045:0x00274390:	rts
ScrollBarContainer::ScrollToPos()
000050:0x00274410:	movefm	[0xd31345a8], m_root
000050:0x00274420:	ncalli	Widget.Update()
000051:0x00274428:	movefm	[0xd31345a8], Content
000051:0x00274438:	ncalli	Widget.Update()
000054:0x00274440:	movefm	[0xd31345a8], m_root
000054:0x00274450:	icall	
000055:0x00274460:	movefm	[0xd31345a8], Content
000055:0x00274470:	icall	
000057:0x00274480:	divf	diff, m_root_height, m_content_height
000058:0x00274490:	divf	percents, pos, m_content_height
000060:0x002744a0:	move	m_position, percents
000062:0x002744b0:	cmpf	m_position, _f0.000000
000062:0x002744c0:	bge	0x2744d8
000063:0x002744c8:	imove	m_position, 0.00000
000064:0x002744d8:	subf	@f01, _f1.000000, diff
000064:0x002744e8:	move	@f00, @f01
000064:0x002744f8:	cmpf	m_position, @f00
000064:0x00274508:	ble	0x274530
000065:0x00274510:	subf	@f00, _f1.000000, diff
000065:0x00274520:	move	m_position, @f00
000066:0x00274530:	call	
000066:0x00274540:	rts
ScrollBarContainer::ScrollToBottom()
000071:0x00274598:	movefm	[0xd31345a8], m_root
000071:0x002745a8:	ncalli	Widget.Update()
000072:0x002745b0:	movefm	[0xd31345a8], Content
000072:0x002745c0:	ncalli	Widget.Update()
000075:0x002745c8:	movefm	[0xd31345a8], m_root
000075:0x002745d8:	icall	
000076:0x002745e8:	movefm	[0xd31345a8], Content
000076:0x002745f8:	icall	
000078:0x00274608:	divf	diff, m_root_height, m_content_height
000079:0x00274618:	subf	@f00, _f1.000000, diff
000079:0x00274628:	move	m_position, @f00
000080:0x00274638:	call	
000080:0x00274648:	rts
ScrollBarContainer::ScrollToTop()
000085:0x00274650:	cmpf	m_position, _f0.000000
000085:0x00274660:	beq	0x274688
000087:0x00274668:	imove	m_position, 0.00000
000088:0x00274678:	call	
000088:0x00274688:	rts
ScrollBarContainer::GetContentYPos()
000095:0x002746e0:	movefm	[0xd31345a8], Content
000095:0x002746f0:	icall	
000096:0x00274700:	move	#return, y
000096:0x00274710:	rts
000096:0x00274718:	rts
ScrollBarContainer::GetRootHeight()
000101:0x00274720:	move	#return, m_root_height
000101:0x00274730:	rts
000101:0x00274738:	rts
ScrollBarContainer::UpdateScroller()
000106:0x00274838:	movefm	[0xd31345a8], m_root
000106:0x00274848:	ncalli	Widget.Update()
000107:0x00274850:	movefm	[0xd31345a8], Content
000107:0x00274860:	ncalli	Widget.Update()
000113:0x00274868:	movefm	[0xd31345a8], m_root
000113:0x00274878:	icall	
000114:0x00274888:	movefm	[0xd31345a8], Content
000114:0x00274898:	icall	
000116:0x002748a8:	subf	@f00, m_content_height, m_root_height
000116:0x002748b8:	move	diff, @f00
000117:0x002748c8:	cmpf	diff, _f0.000000
000117:0x002748d8:	bgt	0x274960
000119:0x002748e0:	movefm	[0xd31345a8], Content
000119:0x002748f0:	ncalli	Widget.SetPos(_f0.000000, _f0.000000, _i1)
000120:0x00274908:	movefm	[0xd31345a8], Scroller
000120:0x00274918:	ncalli	Widget.Show(false, _i1)
000121:0x00274928:	movefm	[0xd31345a8], ScrollBar
000121:0x00274938:	ncalli	Widget.Show(false, _i1)
000122:0x00274948:	imove	m_position, 0.00000
000123:0x00274958:	rts
000126:0x00274960:	divf	@f01, m_root_height, m_content_height
000126:0x00274970:	move	@f00, @f01
000126:0x00274980:	mulf	@f00, @f00, m_root_height
000126:0x00274990:	move	scroller_height, @f00
000128:0x002749a0:	movefm	[0xd31345a8], ScrollBar
000128:0x002749b0:	ncalli	Widget.Show(true, _i1)
000129:0x002749c0:	movefm	[0xd31345a8], Scroller
000129:0x002749d0:	ncalli	Widget.Show(true, _i1)
000130:0x002749e0:	movefm	[0xd31345a8], Scroller
000130:0x002749f0:	icall	
000131:0x00274a00:	movefm	[0xd31345a8], Scroller
000131:0x00274a10:	ncalli	Widget.SetSize(width, scroller_height, _i1)
000133:0x00274a28:	subf	@f01, _f0.000000, m_content_height
000133:0x00274a38:	mulf	pos, @f01, m_position
000135:0x00274a48:	subf	@f01, _f0.000000, diff
000135:0x00274a58:	cmpf	pos, @f01
000135:0x00274a68:	bgt	0x274a90
000136:0x00274a70:	subf	@f01, _f0.000000, diff
000136:0x00274a80:	move	pos, @f01
000138:0x00274a90:	subf	@f01, _f0.000000, pos
000138:0x00274aa0:	movefm	[0xd31345a8], Scroller
000138:0x00274ab0:	ncalli	Widget.SetPos(_f0.000000, @f01, _i1)
000140:0x00274ac8:	cmpi	Invert, _i0
000140:0x00274ad8:	beq	0x274b70
000141:0x00274ae0:	subf	@f04, _f0.000000, diff
000141:0x00274af0:	mulf	@f03, @f04, m_position
000141:0x00274b00:	move	@f02, @f03
000141:0x00274b10:	addf	@f02, diff, @f02
000141:0x00274b20:	move	@f01, @f02
000141:0x00274b30:	subf	@f01, _f0.000000, @f01
000141:0x00274b40:	movefm	[0xd31345a8], Content
000141:0x00274b50:	ncalli	Widget.SetPos(_f0.000000, @f01, _i1)
000141:0x00274b68:	jump	0x274b98
000143:0x00274b70:	movefm	[0xd31345a8], Content
000143:0x00274b80:	ncalli	Widget.SetPos(_f0.000000, pos, _i1)
000143:0x00274b98:	rts
ScrollBarContainer::OnWidgetScriptInit()
000148:0x00274ba0:	movem	m_root, w
000149:0x00274bb0:	movefm	[0xd31345a8], m_root
000149:0x00274bc0:	ncalli	Widget.SetHandler(this)
000150:0x00274bd0:	movefm	[0xd31345a8], m_root
000150:0x00274be0:	ncalli	Widget.SetFlags(_i8, _i1)
000151:0x00274bf0:	imove	m_scrolling, 0x000000
000152:0x00274c00:	call	
000152:0x00274c10:	rts
ScrollBarContainer::StopScrolling()
000157:0x00274c18:	cmpi	m_scrolling, _i0
000157:0x00274c28:	beq	0x274c70
000159:0x00274c30:	ncall	GetGame()
000159:0x00274c38:	call	
000159:0x00274c48:	call	
000159:0x00274c58:	release	#return
000160:0x00274c60:	imove	m_scrolling, 0x000000
000160:0x00274c70:	rts
ScrollBarContainer::UpdateScroll()
000166:0x00274cf0:	movefm	[0xd31345a8], m_root
000166:0x00274d00:	ncalli	Widget.Update()
000167:0x00274d08:	movefm	[0xd31345a8], Content
000167:0x00274d18:	ncalli	Widget.Update()
000170:0x00274d20:	movefm	[0xd31345a8], m_root
000170:0x00274d30:	icall	
000171:0x00274d40:	movefm	[0xd31345a8], Content
000171:0x00274d50:	icall	
000173:0x00274d60:	cmpi	m_scrolling, _i0
000173:0x00274d70:	beq	0x274ec8
000175:0x00274d78:	cmpi	is_dragging, _i0
000175:0x00274d88:	beq	0x274ea8
000177:0x00274d90:	citf	@f00, mouse_y
000177:0x00274da0:	citf	@f01, m_scrolling_mouse_pos
000177:0x00274db0:	subf	diff, @f00, @f01
000178:0x00274dc0:	divf	@f01, m_root_height, m_content_height
000178:0x00274dd0:	move	@f00, @f01
000178:0x00274de0:	mulf	scroller_height, @f00, m_root_height
000179:0x00274df0:	subf	@f02, m_root_height, scroller_height
000179:0x00274e00:	move	@f01, @f02
000179:0x00274e10:	divf	@f01, diff, @f01
000179:0x00274e20:	move	@f00, @f01
000179:0x00274e30:	addf	@f00, m_scrolling_start_pos, @f00
000179:0x00274e40:	move	m_position, @f00
000180:0x00274e50:	cmpf	m_position, _f0.000000
000180:0x00274e60:	bge	0x274e78
000180:0x00274e68:	imove	m_position, 0.00000
000181:0x00274e78:	cmpf	m_position, _f1.000000
000181:0x00274e88:	ble	0x274ea0
000181:0x00274e90:	imove	m_position, 1.00000
000181:0x00274ea0:	jump	0x274ec8
000185:0x00274ea8:	imove	m_scrolling, 0x000000
000186:0x00274eb8:	call	
000190:0x00274ec8:	call	
000190:0x00274ed8:	rts
ScrollBarContainer::OnMouseButtonDown()
000199:0x00274f30:	cmpi	button, _i0
000199:0x00274f40:	bne	0x274ff8
000199:0x00274f48:	cmpm	w, Scroller
000199:0x00274f58:	bne	0x274ff8
000199:0x00274f60:	cmpi	m_scrolling, _i0
000199:0x00274f70:	bne	0x274ff8
000201:0x00274f78:	imove	m_scrolling, 0x000001
000202:0x00274f88:	move	m_scrolling_start_pos, m_position
000204:0x00274f98:	icall	GetMousePos(mouse_x, m_scrolling_mouse_pos)
000205:0x00274fa8:	ncall	GetGame()
000205:0x00274fb0:	call	
000205:0x00274fc0:	call	
000205:0x00274fd8:	release	#return
000206:0x00274fe0:	imove	#return, 0x000001
000206:0x00274ff0:	rts
000209:0x00274ff8:	imove	#return, 0x000000
000209:0x00275008:	rts
000209:0x00275010:	rts
ScrollBarContainer::OnMouseButtonUp()
000215:0x00275018:	call	
000216:0x00275028:	imove	#return, 0x000000
000216:0x00275038:	rts
000216:0x00275040:	rts
ScrollBarContainer::OnMouseWheel()
000222:0x00275070:	cmpi	m_scrolling, _i0
000222:0x00275080:	bne	0x2750a0
000222:0x00275088:	cmpf	m_content_height, m_root_height
000222:0x00275098:	bgt	0x2750b8
000222:0x002750a0:	imove	#return, 0x000000
000222:0x002750b0:	rts
000224:0x002750b8:	subf	@f02, m_content_height, m_root_height
000224:0x002750c8:	move	@f01, @f02
000224:0x002750d8:	divf	@f01, _f1.000000, @f01
000224:0x002750e8:	move	@f00, @f01
000224:0x002750f8:	citf	@f01, WHEEL_STEP
000224:0x00275108:	mulf	step, @f00, @f01
000225:0x00275118:	citf	@f01, wheel
000225:0x00275128:	mulf	@f00, @f01, step
000225:0x00275138:	subf	m_position, m_position, @f00
000227:0x00275148:	cmpf	m_position, _f0.000000
000227:0x00275158:	bge	0x275170
000227:0x00275160:	imove	m_position, 0.00000
000228:0x00275170:	cmpf	m_position, _f1.000000
000228:0x00275180:	ble	0x275198
000228:0x00275188:	imove	m_position, 1.00000
000229:0x00275198:	call	
000230:0x002751a8:	imove	#return, 0x000001
000230:0x002751b8:	rts
000230:0x002751c0:	rts
ScrollBarContainer::OnResize()
000234:0x002751c8:	cmpm	w, m_root
000234:0x002751d8:	beq	0x2751f8
000234:0x002751e0:	cmpm	w, Content
000234:0x002751f0:	bne	0x275208
000236:0x002751f8:	call	
000238:0x00275208:	imove	#return, 0x000000
000238:0x00275218:	rts
000238:0x00275220:	rts
JsonFileLoader<@JsonDataCredits>::JsonLoadFile()
//scripts/3_Game/tools\jsonfileloader.c
000007:0x00275850:	icall	FileExist(filename)
000007:0x00275860:	cmpi	#return, _i0
000007:0x00275870:	beq	0x2759b0
000013:0x00275878:	icall	OpenFile(filename, _i1)
000013:0x00275888:	movea	handle, #return
000014:0x00275898:	cmpc	handle, _i0
000014:0x002758a8:	bne	0x2758c8
000015:0x002758b0:	movem	data, data
000015:0x002758c0:	rts
000018:0x002758c8:	icall	FGets(handle, line_content)
000018:0x002758d8:	move	@m00, #return
000018:0x002758e8:	cmpi	@m00, _i0
000018:0x002758f8:	blt	0x275928
000020:0x00275900:	moves	@s00, line_content
000020:0x00275910:	adds	file_content, file_content, @s00
000020:0x00275920:	jump	0x2758c8
000023:0x00275928:	icall	CloseFile(handle)
000025:0x00275938:	cmpcm	m_Serializer, null
000025:0x00275948:	bne	0x275970
000026:0x00275950:	new	m_Serializer, JsonSerializer
000028:0x00275970:	icall	
000028:0x00275988:	cmpi	#return, _i0
000028:0x00275998:	bne	0x2759b0
000029:0x002759a0:	call	Error(error)
000029:0x002759b0:	movem	data, data
000029:0x002759c0:	rts
JsonFileLoader<@JsonDataCredits>::JsonSaveFile()
000036:0x00275a18:	cmpcm	m_Serializer, null
000036:0x00275a28:	bne	0x275a50
000037:0x00275a30:	new	m_Serializer, JsonSerializer
000039:0x00275a50:	icall	
000041:0x00275a68:	icall	OpenFile(filename, _i4)
000041:0x00275a78:	movea	handle, #return
000042:0x00275a88:	cmpc	handle, _i0
000042:0x00275a98:	bne	0x275aa8
000043:0x00275aa0:	rts
000045:0x00275aa8:	icall	FPrint(handle, file_content)
000047:0x00275ab8:	icall	CloseFile(handle)
000047:0x00275ac8:	rts
JsonFileLoader<@JsonDataCredits>::JsonLoadData()
000053:0x00275af8:	cmpcm	m_Serializer, null
000053:0x00275b08:	bne	0x275b30
000054:0x00275b10:	new	m_Serializer, JsonSerializer
000056:0x00275b30:	icall	
000056:0x00275b48:	cmpi	#return, _i0
000056:0x00275b58:	bne	0x275b70
000057:0x00275b60:	call	Error(error)
000057:0x00275b70:	movem	data, data
000057:0x00275b80:	rts
JsonFileLoader<@JsonDataCredits>::JsonMakeData()
000063:0x00275bb0:	cmpcm	m_Serializer, null
000063:0x00275bc0:	bne	0x275be8
000064:0x00275bc8:	new	m_Serializer, JsonSerializer
000066:0x00275be8:	icall	
000067:0x00275c00:	moves	#return, string_data
000067:0x00275c10:	rts
000067:0x00275c18:	rts
CreditsLoader::CreateTestJson()
//scripts/3_Game/gui\credits\creditsloader.c
000007:0x00275c20:	moves	test_name_department, _s'Department'
000008:0x00275c30:	moves	test_name_setion, _s'Section'
000009:0x00275c40:	moves	test_name_line, _s'Line'
000011:0x00275c50:	new	data, JsonDataCredits
000012:0x00275c70:	movefm	@c00, data
000012:0x00275c80:	new	Departments, array<@JsonDataCreditsDepartment>
000014:0x00275ca0:	imove	index_dep, 0x000000
000014:0x00275cb0:	jump	0x275cc0
000014:0x00275cb8:	inc	index_dep
000014:0x00275cc0:	cmpi	index_dep, _i3
000014:0x00275cd0:	bge	0x275ff0
000016:0x00275cd8:	new	data_department, JsonDataCreditsDepartment
000017:0x00275cf8:	movefm	@c00, data_department
000017:0x00275d08:	new	Sections, array<@JsonDataCreditsSection>
000018:0x00275d28:	movefm	@c00, data_department
000018:0x00275d38:	adds	@s01, test_name_department, _s' '
000018:0x00275d48:	moves	@s00, @s01
000018:0x00275d58:	icall	ToString(index_dep)
000018:0x00275d68:	adds	@s00, @s00, #return
000018:0x00275d78:	moves	DepartmentName, @s00
000020:0x00275d88:	imove	index_sec, 0x000000
000020:0x00275d98:	jump	0x275da8
000020:0x00275da0:	inc	index_sec
000020:0x00275da8:	cmpi	index_sec, _i4
000020:0x00275db8:	bge	0x275fa0
000022:0x00275dc0:	new	data_section, JsonDataCreditsSection
000023:0x00275de0:	movefm	@c00, data_section
000023:0x00275df0:	new	SectionLines, array<string>
000024:0x00275e10:	movefm	@c00, data_section
000024:0x00275e20:	adds	@s01, test_name_setion, _s' '
000024:0x00275e30:	moves	@s00, @s01
000024:0x00275e40:	icall	ToString(index_sec)
000024:0x00275e50:	adds	@s00, @s00, #return
000024:0x00275e60:	moves	SectionName, @s00
000026:0x00275e70:	icall	RandomInt(_i3, _i10)
000026:0x00275e80:	move	lines_count, #return
000027:0x00275e90:	imove	i, 0x000000
000027:0x00275ea0:	jump	0x275eb0
000027:0x00275ea8:	inc	i
000027:0x00275eb0:	cmpi	i, lines_count
000027:0x00275ec0:	bge	0x275f50
000029:0x00275ec8:	movefm	@c00, data_section
000029:0x00275ed8:	movefm	@c01, SectionLines
000029:0x00275ee8:	adds	@s02, test_name_line, _s' '
000029:0x00275ef8:	moves	@s01, @s02
000029:0x00275f08:	icall	ToString(i)
000029:0x00275f18:	adds	@s01, @s01, #return
000029:0x00275f28:	moves	@s00, @s01
000029:0x00275f38:	icall	
000029:0x00275f48:	jump	0x275ea8
000032:0x00275f50:	movefm	@c00, data_department
000032:0x00275f60:	movefm	@c01, Sections
000032:0x00275f70:	movefm	@c02, data_section
000032:0x00275f80:	icall	
000032:0x00275f90:	release	data_section
000032:0x00275f98:	jump	0x275da0
000035:0x00275fa0:	movefm	@c00, data
000035:0x00275fb0:	movefm	@c01, Departments
000035:0x00275fc0:	movefm	@c02, data_department
000035:0x00275fd0:	icall	
000035:0x00275fe0:	release	data_department
000035:0x00275fe8:	jump	0x275cb8
000038:0x00275ff0:	call	JsonSaveFile(JSON_FILE_PATH, data)
000038:0x00276008:	release	data
000038:0x00276010:	rts
CreditsLoader::GetData()
000044:0x00276040:	call	JsonLoadFile(JSON_FILE_PATH, data)
000044:0x00276058:	movem	data, data
000044:0x00276068:	release	data
000046:0x00276070:	movem	#return, data
000046:0x00276080:	release	data
000046:0x00276088:	rts
000046:0x00276090:	release	data
000046:0x00276098:	rts
Building::IsBuilding()
//scripts/3_Game/entities\building.c
000020:0x002760a0:	imove	#return, 0x000001
000020:0x002760b0:	rts
000020:0x002760b8:	rts
Building::CanObstruct()
000025:0x002760c0:	imove	#return, 0x000001
000025:0x002760d0:	rts
000025:0x002760d8:	rts
Building::IsHealthVisible()
000030:0x002760e0:	imove	#return, 0x000000
000030:0x002760f0:	rts
000030:0x002760f8:	rts
Building::Building()
000037:0x00276128:	new	m_InteractActions, array<int>
000038:0x00276148:	call	
000038:0x00276158:	adds	@s02, _s'cfgVehicles ', #return
000038:0x00276168:	moves	@s01, @s02
000038:0x00276178:	adds	@s01, @s01, _s' InteractActions'
000038:0x00276188:	moves	@s00, @s01
000038:0x00276198:	movefm	[0xb5bda278], m_InteractActions
000038:0x002761a8:	ncalli	DayZGame.ConfigGetIntArray(@s00, [0xb5bda278])
000038:0x002761b8:	rts
Building::IsInventoryVisible()
000043:0x002761c0:	imove	#return, 0x000000
000043:0x002761d0:	rts
000043:0x002761d8:	rts
Building::GetMeleeTargetType()
000048:0x002761e0:	imove	#return, 0x000001
000048:0x002761f0:	rts
000048:0x002761f8:	rts
PPEMatClassParameterVector::GetParameterVarType()
//scripts/3_Game/ppemanager\materials\matparameters\ppematclassparametervector.c
000005:0x00276200:	imove	#return, 0x000010
000005:0x00276210:	rts
000005:0x00276218:	rts
JsonObject::JsonObject()
//scripts/3_Game/tools\jsonobject.c
000011:0x00276220:	new	m_Strings, map<string,string>
000012:0x00276240:	new	m_Ints, map<string,int>
000013:0x00276260:	new	m_Floats, map<string,float>
000014:0x00276280:	new	m_Bools, map<string,bool>
000015:0x002762a0:	new	m_Vectors2, map<string,@Vector2>
000015:0x002762c0:	rts
JsonObject::~JsonObject()
000020:0x002762c8:	call	
000020:0x002762d8:	rts
JsonObject::Clear()
000025:0x002762e0:	movefm	[0xd3157ec8], m_Strings
000025:0x002762f0:	ncalli	map<string,string>.Clear()
000026:0x002762f8:	movefm	[0xd3157f58], m_Ints
000026:0x00276308:	ncalli	map<string,int>.Clear()
000027:0x00276310:	movefm	[0xd3157fe8], m_Floats
000027:0x00276320:	ncalli	map<string,float>.Clear()
000028:0x00276328:	movefm	[0xb5b9c4b8], m_Bools
000028:0x00276338:	ncalli	map<string,bool>.Clear()
000029:0x00276340:	movefm	[0xb5b9c580], m_Vectors2
000029:0x00276350:	ncalli	map<string,@Vector2>.Clear()
000029:0x00276358:	rts
JsonObject::AddString()
000034:0x002764a8:	new	strgs, array<string>
000035:0x002764c8:	call	Split(value, _s'"', strgs)
000035:0x002764e0:	moves	value, value
000035:0x002764f0:	movem	strgs, output
000035:0x00276500:	release	output
000037:0x00276508:	ncalli	array<string>.Count()
000037:0x00276510:	move	@m00, #return
000037:0x00276520:	cmpi	@m00, _i1
000037:0x00276530:	ble	0x2766e8
000039:0x00276538:	moves	value, _s''
000040:0x00276548:	ncalli	array<string>.Count()
000040:0x00276550:	move	str_count, #return
000042:0x00276560:	imove	i, 0x000000
000042:0x00276570:	jump	0x276580
000042:0x00276578:	inc	i
000042:0x00276580:	cmpi	i, str_count
000042:0x00276590:	bge	0x2766e8
000044:0x00276598:	icall	
000044:0x002765a8:	moves	s, #return
000046:0x002765b8:	ncall	Length(s)
000046:0x002765c8:	move	length, #return
000048:0x002765d8:	subi	@m01, length, _i1
000048:0x002765e8:	move	@m00, @m01
000048:0x002765f8:	call	Get(s, @m00)
000048:0x00276610:	moves	s, value
000048:0x00276620:	moves	@s00, #return
000048:0x00276630:	cmps	@s00, _s'\'
000048:0x00276640:	beq	0x2766e0
000050:0x00276648:	moves	@s00, s
000050:0x00276658:	adds	value, value, @s00
000052:0x00276668:	subi	@m01, str_count, _i1
000052:0x00276678:	move	@m00, @m01
000052:0x00276688:	cmpi	i, @m00
000052:0x00276698:	bge	0x2766e0
000054:0x002766a0:	moves	@s00, _s'\'
000054:0x002766b0:	adds	value, value, @s00
000055:0x002766c0:	moves	@s00, _s'"'
000055:0x002766d0:	adds	value, value, @s00
000055:0x002766e0:	jump	0x276578
000061:0x002766e8:	movefm	[0xd3157ec8], m_Strings
000061:0x002766f8:	icall	
000061:0x00276708:	release	strgs
000061:0x00276710:	rts
JsonObject::AddInt()
000066:0x00276718:	movefm	[0xd3157f58], m_Ints
000066:0x00276728:	icall	
000066:0x00276738:	rts
JsonObject::AddFloat()
000071:0x00276740:	movefm	[0xd3157fe8], m_Floats
000071:0x00276750:	icall	
000071:0x00276760:	rts
JsonObject::AddBool()
000076:0x00276768:	movefm	[0xb5b9c4b8], m_Bools
000076:0x00276778:	icall	
000076:0x00276788:	rts
JsonObject::AddVector2()
000081:0x002767e0:	new	v, Vector2
000082:0x00276808:	movefm	@c00, v
000082:0x00276818:	movefm	[0xb5b9c580], m_Vectors2
000082:0x00276828:	icall	
000082:0x00276838:	release	v
000082:0x00276840:	rts
JsonObject::GetJson()
000090:0x00276b88:	moves	jsn, _s''
000091:0x00276b98:	moves	@s00, _s'{'
000091:0x00276ba8:	adds	jsn, jsn, @s00
000094:0x00276bb8:	imove	i, 0x000000
000094:0x00276bc8:	jump	0x276bd8
000094:0x00276bd0:	inc	i
000094:0x00276bd8:	movefm	[0xd3157ec8], m_Strings
000094:0x00276be8:	ncalli	map<string,string>.Count()
000094:0x00276bf0:	cmpi	i, #return
000094:0x00276c00:	bge	0x276d48
000096:0x00276c08:	ncall	Length(jsn)
000096:0x00276c18:	move	@m00, #return
000096:0x00276c28:	cmpi	@m00, _i1
000096:0x00276c38:	ble	0x276c60
000098:0x00276c40:	moves	@s00, _s','
000098:0x00276c50:	adds	jsn, jsn, @s00
000101:0x00276c60:	movefm	[0xd3157ec8], m_Strings
000101:0x00276c70:	icall	
000101:0x00276c80:	moves	name, #return
000102:0x00276c90:	movefm	[0xd3157ec8], m_Strings
000102:0x00276ca0:	icall	
000102:0x00276cb0:	moves	value_str, #return
000104:0x00276cc0:	adds	@s04, _s'"', name
000104:0x00276cd0:	moves	@s03, @s04
000104:0x00276ce0:	adds	@s03, @s03, _s'":"'
000104:0x00276cf0:	moves	@s02, @s03
000104:0x00276d00:	adds	@s02, @s02, value_str
000104:0x00276d10:	moves	@s01, @s02
000104:0x00276d20:	adds	@s00, @s01, _s'"'
000104:0x00276d30:	adds	jsn, jsn, @s00
000104:0x00276d40:	jump	0x276bd0
000108:0x00276d48:	imove	i, 0x000000
000108:0x00276d58:	jump	0x276d68
000108:0x00276d60:	inc	i
000108:0x00276d68:	movefm	[0xd3157f58], m_Ints
000108:0x00276d78:	ncalli	map<string,int>.Count()
000108:0x00276d80:	cmpi	i, #return
000108:0x00276d90:	bge	0x276ec8
000110:0x00276d98:	ncall	Length(jsn)
000110:0x00276da8:	move	@m00, #return
000110:0x00276db8:	cmpi	@m00, _i1
000110:0x00276dc8:	ble	0x276df0
000112:0x00276dd0:	moves	@s00, _s','
000112:0x00276de0:	adds	jsn, jsn, @s00
000115:0x00276df0:	movefm	[0xd3157f58], m_Ints
000115:0x00276e00:	icall	
000115:0x00276e10:	moves	name, #return
000116:0x00276e20:	movefm	[0xd3157f58], m_Ints
000116:0x00276e30:	icall	
000116:0x00276e40:	move	value_int, #return
000118:0x00276e50:	adds	@s03, _s'"', name
000118:0x00276e60:	moves	@s02, @s03
000118:0x00276e70:	adds	@s02, @s02, _s'":'
000118:0x00276e80:	moves	@s01, @s02
000118:0x00276e90:	icall	ToString(value_int)
000118:0x00276ea0:	adds	@s00, @s01, #return
000118:0x00276eb0:	adds	jsn, jsn, @s00
000118:0x00276ec0:	jump	0x276d60
000122:0x00276ec8:	imove	i, 0x000000
000122:0x00276ed8:	jump	0x276ee8
000122:0x00276ee0:	inc	i
000122:0x00276ee8:	movefm	[0xd3157fe8], m_Floats
000122:0x00276ef8:	ncalli	map<string,float>.Count()
000122:0x00276f00:	cmpi	i, #return
000122:0x00276f10:	bge	0x277048
000124:0x00276f18:	ncall	Length(jsn)
000124:0x00276f28:	move	@m00, #return
000124:0x00276f38:	cmpi	@m00, _i1
000124:0x00276f48:	ble	0x276f70
000126:0x00276f50:	moves	@s00, _s','
000126:0x00276f60:	adds	jsn, jsn, @s00
000129:0x00276f70:	movefm	[0xd3157fe8], m_Floats
000129:0x00276f80:	icall	
000129:0x00276f90:	moves	name, #return
000130:0x00276fa0:	movefm	[0xd3157fe8], m_Floats
000130:0x00276fb0:	icall	
000130:0x00276fc0:	move	value_flt, #return
000132:0x00276fd0:	adds	@s03, _s'"', name
000132:0x00276fe0:	moves	@s02, @s03
000132:0x00276ff0:	adds	@s02, @s02, _s'":'
000132:0x00277000:	moves	@s01, @s02
000132:0x00277010:	icall	ToString(value_flt)
000132:0x00277020:	adds	@s00, @s01, #return
000132:0x00277030:	adds	jsn, jsn, @s00
000132:0x00277040:	jump	0x276ee0
000136:0x00277048:	imove	i, 0x000000
000136:0x00277058:	jump	0x277068
000136:0x00277060:	inc	i
000136:0x00277068:	movefm	[0xb5b9c4b8], m_Bools
000136:0x00277078:	ncalli	map<string,bool>.Count()
000136:0x00277080:	cmpi	i, #return
000136:0x00277090:	bge	0x2771e8
000138:0x00277098:	ncall	Length(jsn)
000138:0x002770a8:	move	@m00, #return
000138:0x002770b8:	cmpi	@m00, _i1
000138:0x002770c8:	ble	0x2770f0
000140:0x002770d0:	moves	@s00, _s','
000140:0x002770e0:	adds	jsn, jsn, @s00
000143:0x002770f0:	movefm	[0xb5b9c4b8], m_Bools
000143:0x00277100:	icall	
000143:0x00277110:	moves	name, #return
000145:0x00277120:	movefm	[0xb5b9c4b8], m_Bools
000145:0x00277130:	icall	
000145:0x00277140:	cmpi	#return, _i0
000145:0x00277150:	beq	0x2771a0
000147:0x00277158:	adds	@s02, _s'"', name
000147:0x00277168:	moves	@s01, @s02
000147:0x00277178:	adds	@s00, @s01, _s'":true'
000147:0x00277188:	adds	jsn, jsn, @s00
000147:0x00277198:	jump	0x2771e0
000151:0x002771a0:	adds	@s02, _s'"', name
000151:0x002771b0:	moves	@s01, @s02
000151:0x002771c0:	adds	@s00, @s01, _s'":false'
000151:0x002771d0:	adds	jsn, jsn, @s00
000151:0x002771e0:	jump	0x277060
000156:0x002771e8:	imove	i, 0x000000
000156:0x002771f8:	jump	0x277208
000156:0x00277200:	inc	i
000156:0x00277208:	movefm	[0xb5b9c580], m_Vectors2
000156:0x00277218:	ncalli	map<string,@Vector2>.Count()
000156:0x00277220:	cmpi	i, #return
000156:0x00277230:	bge	0x277400
000158:0x00277238:	ncall	Length(jsn)
000158:0x00277248:	move	@m00, #return
000158:0x00277258:	cmpi	@m00, _i1
000158:0x00277268:	ble	0x277290
000160:0x00277270:	moves	@s00, _s','
000160:0x00277280:	adds	jsn, jsn, @s00
000163:0x00277290:	movefm	[0xb5b9c580], m_Vectors2
000163:0x002772a0:	icall	
000163:0x002772b0:	moves	name, #return
000164:0x002772c0:	movefm	[0xb5b9c580], m_Vectors2
000164:0x002772d0:	icall	
000164:0x002772e0:	movetm	value_vct, #return
000166:0x002772f0:	adds	@s06, _s'"', name
000166:0x00277300:	moves	@s05, @s06
000166:0x00277310:	adds	@s05, @s05, _s'":{"x":'
000166:0x00277320:	moves	@s04, @s05
000166:0x00277330:	movefm	@c00, value_vct
000166:0x00277340:	icall	ToString(x)
000166:0x00277350:	adds	@s04, @s04, #return
000166:0x00277360:	moves	@s03, @s04
000166:0x00277370:	adds	@s03, @s03, _s',"y":'
000166:0x00277380:	moves	@s02, @s03
000166:0x00277390:	movefm	@c01, value_vct
000166:0x002773a0:	icall	ToString(y)
000166:0x002773b0:	adds	@s02, @s02, #return
000166:0x002773c0:	moves	@s01, @s02
000166:0x002773d0:	adds	@s00, @s01, _s'}'
000166:0x002773e0:	adds	jsn, jsn, @s00
000166:0x002773f0:	release	value_vct
000166:0x002773f8:	jump	0x277200
000169:0x00277400:	moves	@s00, _s'}'
000169:0x00277410:	adds	jsn, jsn, @s00
000171:0x00277420:	moves	#return, jsn
000171:0x00277430:	rts
000171:0x00277438:	rts
PPERequester_Drowning::OnStart()
//scripts/3_Game/ppemanager\requesters\pperdrowningeffect.c
000012:0x00277440:	call	
000014:0x00277450:	imove	m_EffectPhase, 0.00000
000015:0x00277460:	imove	m_Magnitude, 0.00000
000015:0x00277470:	rts
PPERequester_Drowning::OnUpdate()
000020:0x002774f8:	call	
000022:0x00277508:	cmpi	m_IsRunning, _i0
000022:0x00277518:	bne	0x277528
000023:0x00277520:	rts
000025:0x00277528:	mulf	@f02, delta, m_Frequency
000025:0x00277538:	move	@f01, @f02
000025:0x00277548:	addf	@f03, m_Stamina01, _f1.000000
000025:0x00277558:	move	@f02, @f03
000025:0x00277568:	divf	@f00, @f01, @f02
000025:0x00277578:	addf	m_EffectPhase, m_EffectPhase, @f00
000027:0x00277588:	icall	Sin(m_EffectPhase)
000027:0x00277598:	addf	@f01, #return, _f1.000000
000027:0x002775a8:	move	@f00, @f01
000027:0x002775b8:	divf	currentVal, @f00, _f2.000000
000028:0x002775c8:	call	EaseInExpo(currentVal)
000028:0x002775d8:	move	currentVal, #return
000029:0x002775e8:	mulf	@f00, currentVal, m_MaxMagnitude
000029:0x002775f8:	mulf	currentVal, currentVal, @f00
000030:0x00277608:	move	@f00, m_MinMagnitude
000030:0x00277618:	addf	currentVal, currentVal, @f00
000031:0x00277628:	mulf	@f02, delta, m_Frequency
000031:0x00277638:	move	@f01, @f02
000031:0x00277648:	icall	Lerp(m_Magnitude, currentVal, @f01)
000031:0x00277660:	move	m_Magnitude, #return
000033:0x00277670:	move	val, m_Magnitude
000033:0x00277680:	call	
000034:0x002776a8:	new	@c01, array<float>
000034:0x002776c8:	pushc	@c01
000034:0x002776d0:	icall	
000034:0x002776e0:	icall	
000034:0x002776f0:	icall	
000034:0x00277700:	icall	
000034:0x00277710:	call	
000034:0x00277730:	popc	@c01
000034:0x00277738:	release	@c01
000034:0x00277740:	rts
PPERequester_Drowning::SetStamina01()
000039:0x00277748:	move	m_Stamina01, stamina01
000039:0x00277758:	rts
PPERequester_Drowning::PPERequester_Drowning()
000001:0x00277760:	imove	m_EffectPhase, 0.00000
000001:0x00277770:	imove	m_Magnitude, 0.00000
000001:0x00277780:	imove	m_MinMagnitude, 0.30000
000001:0x00277790:	imove	m_MaxMagnitude, 0.30000
000001:0x002777a0:	imove	m_Frequency, 5.00000
000001:0x002777b0:	rts
ParticleManagerEvents::ParticleManagerEvents()
//scripts/3_Game/particles\particlemanager\particlemanager.c
000046:0x002777b8:	new	Event_OnAllocation, ScriptInvoker
000046:0x002777d8:	new	Event_OnAllocationEnd, ScriptInvoker
000046:0x002777f8:	rts
ParticleManager::GetInstance()
000061:0x00277828:	cmpcm	g_ParticleManager, null
000061:0x00277838:	bne	0x2778e0
000061:0x00277840:	ncall	GetGame()
000061:0x00277848:	ncalli	CGame.IsDedicatedServer()
000061:0x00277850:	cmpi	#return, _i0
000061:0x00277860:	bne	0x2778e0
000066:0x00277868:	new	@c00, ParticleManagerSettings
000066:0x00277890:	pushc	@c00
000066:0x00277898:	new	g_ParticleManager, ParticleManager
000066:0x002778c0:	popc	@c00
000066:0x002778c8:	release	@c00
000067:0x002778d0:	ncalli	ParticleManager.SetName(_s'GlobalParticleManager')
000070:0x002778e0:	movem	#return, g_ParticleManager
000070:0x002778f0:	rts
000070:0x002778f8:	rts
ParticleManager::CleanupInstance()
000076:0x00277900:	cmpcm	g_ParticleManager, null
000076:0x00277910:	beq	0x277920
000077:0x00277918:	delete	g_ParticleManager
000077:0x00277920:	rts
ParticleManager::CreateParticle()
000113:0x00277950:	imove	flags, 0x000000
000115:0x00277960:	cmpi	playOnCreation, _i0
000115:0x00277970:	beq	0x277998
000117:0x00277978:	ori	@m00, flags, _i1
000117:0x00277988:	move	flags, @m00
000120:0x00277998:	cmpi	forceWorldRotation, _i0
000120:0x002779a8:	beq	0x2779d0
000122:0x002779b0:	ori	@m00, flags, _i2
000122:0x002779c0:	move	flags, @m00
000125:0x002779d0:	call	
000125:0x002779f8:	movem	#return, #return
000125:0x00277a08:	release	#return
000125:0x00277a10:	rts
000125:0x00277a18:	rts
ParticleManager::CreateParticleEx()
000140:0x00277a98:	call	GetParticleFullPath(id)
000140:0x00277aa8:	moves	particlePath, #return
000141:0x00277ab8:	cmps	particlePath, _s''
000141:0x00277ac8:	bne	0x277b28
000143:0x00277ad0:	icall	Format(_s'Could not create ParticleSource as particle id %1 is invalid.', id, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000143:0x00277b00:	icall	ErrorEx(#return, _i2)
000144:0x00277b10:	movetm	#return, null
000144:0x00277b20:	rts
000147:0x00277b28:	new	props, ParticleProperties
000148:0x00277b60:	call	
000148:0x00277b78:	movem	p, #return
000148:0x00277b88:	release	#return
000149:0x00277b90:	movem	#return, p
000149:0x00277ba0:	release	props
000149:0x00277ba8:	release	p
000149:0x00277bb0:	rts
000149:0x00277bb8:	release	props
000149:0x00277bc0:	release	p
000149:0x00277bc8:	rts
ParticleManager::CreateOnObject()
000168:0x00277bd0:	call	
000168:0x00277bf8:	movem	#return, #return
000168:0x00277c08:	release	#return
000168:0x00277c10:	rts
000168:0x00277c18:	rts
ParticleManager::Create()
000176:0x00277c20:	call	
000176:0x00277c40:	movem	#return, #return
000176:0x00277c50:	release	#return
000176:0x00277c58:	rts
000176:0x00277c60:	rts
ParticleManager::CreateInWorld()
000189:0x00277c68:	movetm	parent, null
000189:0x00277c78:	call	
000189:0x00277ca0:	movem	#return, #return
000189:0x00277cb0:	release	#return
000189:0x00277cb8:	rts
000189:0x00277cc0:	rts
ParticleManager::Create#123629()
000197:0x00277cc8:	call	
000197:0x00277ce8:	movem	#return, #return
000197:0x00277cf8:	release	#return
000197:0x00277d00:	rts
000197:0x00277d08:	rts
ParticleManager::PlayOnObject()
000220:0x00277d10:	call	
000220:0x00277d38:	movem	#return, #return
000220:0x00277d48:	release	#return
000220:0x00277d50:	rts
000220:0x00277d58:	rts
ParticleManager::Play()
000228:0x00277d60:	call	
000228:0x00277d80:	movem	#return, #return
000228:0x00277d90:	release	#return
000228:0x00277d98:	rts
000228:0x00277da0:	rts
ParticleManager::PlayInWorld()
000239:0x00277de0:	movetm	parent_obj, null
000239:0x00277df0:	call	
000239:0x00277e10:	movem	#return, #return
000239:0x00277e20:	release	#return
000239:0x00277e28:	rts
000239:0x00277e30:	rts
ParticleManager::PlayInWorldEx()
000244:0x00277e38:	call	
000244:0x00277e60:	movem	#return, #return
000244:0x00277e70:	release	#return
000244:0x00277e78:	rts
000244:0x00277e80:	rts
ParticleManager::Play#123791()
000253:0x00277e88:	call	
000253:0x00277ea0:	movem	#return, #return
000253:0x00277eb0:	release	#return
000253:0x00277eb8:	rts
000253:0x00277ec0:	rts
ParticleManager::CreateParticleByPath()
000283:0x00277f18:	new	tempArr, array<ParticleSource>
000284:0x00277f38:	movefm	[0xb5be9228], tempArr
000284:0x00277f48:	new	@c01, array<@ParticleProperties>
000284:0x00277f68:	pushc	@c01
000284:0x00277f70:	movefm	@c02, properties
000284:0x00277f80:	icall	
000284:0x00277f90:	ncalli	ParticleManager.CreateParticles([0xb5be9228], path, @c01, _i1)
000284:0x00277fa8:	popc	@c01
000284:0x00277fb0:	release	@c01
000286:0x00277fb8:	ncalli	array<ParticleSource>.Count()
000286:0x00277fc0:	move	@m00, #return
000286:0x00277fd0:	cmpi	@m00, _i0
000286:0x00277fe0:	ble	0x278020
000287:0x00277fe8:	icall	
000287:0x00277ff8:	movetm	#return, #return
000287:0x00278008:	release	tempArr
000287:0x00278010:	rts
000287:0x00278018:	jump	0x278040
000289:0x00278020:	movetm	#return, null
000289:0x00278030:	release	tempArr
000289:0x00278038:	rts
000289:0x00278040:	release	tempArr
000289:0x00278048:	rts
ParticleManager::CreateParticlesById()
000301:0x00278050:	movec	[0xb5be9228], null
000301:0x00278060:	call	GetParticleFullPath(id)
000301:0x00278070:	movefm	[0xb5be9278], properties
000301:0x00278080:	ncalli	ParticleManager.CreateParticles([0xb5be9228], #return, [0xb5be9278], count)
000301:0x00278098:	move	#return, #return
000301:0x002780a8:	rts
000301:0x002780b0:	rts
ParticleManager::CreateParticlesByIdArr()
000313:0x00278108:	new	outArr, array<ParticleSource>
000314:0x00278128:	movefm	[0xb5be9228], outArr
000314:0x00278138:	call	GetParticleFullPath(id)
000314:0x00278148:	movefm	[0xb5be9278], properties
000314:0x00278158:	ncalli	ParticleManager.CreateParticles([0xb5be9228], #return, [0xb5be9278], count)
000315:0x00278170:	movem	#return, outArr
000315:0x00278180:	release	outArr
000315:0x00278188:	rts
000315:0x00278190:	release	outArr
000315:0x00278198:	rts
ParticleManager::CreateParticleById()
000326:0x002781c8:	new	tempArr, array<ParticleSource>
000327:0x002781e8:	movefm	[0xb5be9228], tempArr
000327:0x002781f8:	call	GetParticleFullPath(id)
000327:0x00278208:	new	@c01, array<@ParticleProperties>
000327:0x00278228:	pushc	@c01
000327:0x00278230:	movefm	@c02, properties
000327:0x00278240:	icall	
000327:0x00278250:	ncalli	ParticleManager.CreateParticles([0xb5be9228], #return, @c01, _i1)
000327:0x00278268:	popc	@c01
000327:0x00278270:	release	@c01
000329:0x00278278:	ncalli	array<ParticleSource>.Count()
000329:0x00278280:	move	@m00, #return
000329:0x00278290:	cmpi	@m00, _i0
000329:0x002782a0:	ble	0x2782e0
000330:0x002782a8:	icall	
000330:0x002782b8:	movetm	#return, #return
000330:0x002782c8:	release	tempArr
000330:0x002782d0:	rts
000330:0x002782d8:	jump	0x278300
000332:0x002782e0:	movetm	#return, null
000332:0x002782f0:	release	tempArr
000332:0x002782f8:	rts
000332:0x00278300:	release	tempArr
000332:0x00278308:	rts
ParticleManager::PlayParticlesById()
000354:0x00278338:	new	outArr, array<ParticleSource>
000355:0x00278358:	movefm	[0xb5be9600], outArr
000355:0x00278368:	call	GetParticleFullPath(id)
000355:0x00278378:	movefm	[0xb5be9650], positions
000355:0x00278388:	ncalli	ParticleManager.PlayParticles([0xb5be9600], #return, [0xb5be9650], count)
000356:0x002783a0:	movem	#return, outArr
000356:0x002783b0:	release	outArr
000356:0x002783b8:	rts
000356:0x002783c0:	release	outArr
000356:0x002783c8:	rts
ParticleManager::PlayParticleById()
000367:0x002783f8:	new	tempArr, array<ParticleSource>
000368:0x00278418:	movefm	[0xb5be9600], tempArr
000368:0x00278428:	call	GetParticleFullPath(id)
000368:0x00278438:	movefm	[0xb5be9650], position
000368:0x00278448:	ncalli	ParticleManager.PlayParticles([0xb5be9600], #return, [0xb5be9650], _i1)
000370:0x00278460:	ncalli	array<ParticleSource>.Count()
000370:0x00278468:	move	@m00, #return
000370:0x00278478:	cmpi	@m00, _i0
000370:0x00278488:	ble	0x2784c8
000371:0x00278490:	icall	
000371:0x002784a0:	movetm	#return, #return
000371:0x002784b0:	release	tempArr
000371:0x002784b8:	rts
000371:0x002784c0:	jump	0x2784e8
000373:0x002784c8:	movetm	#return, null
000373:0x002784d8:	release	tempArr
000373:0x002784e0:	rts
000373:0x002784e8:	release	tempArr
000373:0x002784f0:	rts
ParticleManager::GetParticlesEx()
000400:0x00278520:	new	outArr, array<ParticleSource>
000401:0x00278540:	movefm	[0xb5be98a0], outArr
000401:0x00278550:	ncalli	ParticleManager.GetParticles([0xb5be98a0], startIndex, count)
000402:0x00278568:	movem	#return, outArr
000402:0x00278578:	release	outArr
000402:0x00278580:	rts
000402:0x00278588:	release	outArr
000402:0x00278590:	rts
ParticleManager::GetDebugName()
000438:0x00278598:	icall	
000438:0x002785a0:	moves	#return, #return
000438:0x002785b0:	rts
000438:0x002785b8:	rts
ParticleManager::GetEvents()
000525:0x002785c0:	icall	
000525:0x002785c8:	icall	SafeCastType([0xb5b36c98], @c01, #return)
000525:0x002785e0:	movetm	#return, @c01
000525:0x002785f0:	rts
000525:0x002785f8:	rts
ParticleManager::OnAllocation()
000539:0x00278600:	call	
000539:0x00278610:	movefm	@c00, #return
000539:0x00278620:	movefm	@c01, Event_OnAllocation
000539:0x00278630:	icall	
000539:0x00278660:	release	#return
000539:0x00278668:	rts
ParticleManager::OnAllocationEnd()
000544:0x00278670:	call	
000544:0x00278680:	movefm	@c00, #return
000544:0x00278690:	movefm	@c01, Event_OnAllocationEnd
000544:0x002786a0:	icall	
000544:0x002786d0:	release	#return
000544:0x002786d8:	rts
PPEMatClassParameterResource::GetParameterVarType()
//scripts/3_Game/ppemanager\materials\matparameters\ppematclassparameterresource.c
000005:0x002786e0:	imove	#return, 0x000040
000005:0x002786f0:	rts
000005:0x002786f8:	rts
HumanInventoryWithFSM::HumanInventoryWithFSM()
//scripts/3_Game/systems\inventory\humaninventorywithfsm.c
000013:0x00278728:	new	m_FSM, HandFSM
000013:0x00278750:	rts
HumanInventoryWithFSM::CreateStableStates()
000020:0x00278758:	cmpcm	m_Empty, null
000020:0x00278768:	bne	0x2787b8
000021:0x00278770:	call	
000021:0x00278780:	new	m_Empty, HandStateEmpty
000021:0x002787b0:	release	#return
000022:0x002787b8:	cmpcm	m_Equipped, null
000022:0x002787c8:	bne	0x278818
000023:0x002787d0:	call	
000023:0x002787e0:	new	m_Equipped, HandStateEquipped
000023:0x00278810:	release	#return
000023:0x00278818:	rts
HumanInventoryWithFSM::Init()
000029:0x00278de8:	call	hndDebugPrint(_s'[hndfsm] Initializing Human Inventory FSM')
000032:0x00278df8:	call	
000035:0x00278e08:	new	__T__, HandEventTake
000036:0x00278e30:	new	__D__, HandEventDrop
000037:0x00278e58:	new	__Tw_, HandEventThrow
000038:0x00278e80:	new	__M__, HandEventMoveTo
000039:0x00278eb0:	new	__W__, HandEventSwap
000040:0x00278ee8:	new	__F__, HandEventForceSwap
000041:0x00278f20:	new	__X__, HandEventDestroy
000042:0x00278f48:	new	__Xd_, HandEventDestroyed
000043:0x00278f70:	new	__R__, HandEventDestroyAndReplaceWithNew
000044:0x00278fa0:	new	__Re_, HandEventDestroyAndReplaceWithNewElsewhere
000045:0x00278fd0:	new	__Rh_, HandEventDestroyElsewhereAndReplaceWithNewInHands
000046:0x00279000:	new	__Rd_, HandEventReplaced
000047:0x00279028:	new	__Cd_, HandEventCreated
000048:0x00279050:	new	_fin_, HandEventHumanCommandActionFinished
000049:0x00279078:	new	_abt_, HandEventHumanCommandActionAborted
000052:0x002790a0:	call	
000052:0x002790b0:	new	replacing, HandReplacingItemInHands
000052:0x002790d8:	release	#return
000053:0x002790e0:	call	
000053:0x002790f0:	new	replacingElsewhere, HandReplacingItemInHands
000053:0x00279118:	release	#return
000054:0x00279120:	call	
000054:0x00279130:	new	replacingElsewhere3, HandReplacingItemElsewhereWithNewInHands
000054:0x00279158:	release	#return
000057:0x00279160:	movem	src, m_Empty
000057:0x00279170:	movem	dst, m_Equipped
000057:0x00279180:	new	@c00, HandActionTake
000057:0x002791a0:	pushc	@c00
000057:0x002791a8:	call	
000057:0x002791b8:	new	@c01, HandGuardHasItemInEvent
000057:0x002791e0:	pushc	@c01
000057:0x002791e8:	new	@c02, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000057:0x00279220:	pushc	@c02
000057:0x00279228:	movefm	[0xb5b3f2a8], m_FSM
000057:0x00279238:	call	
000057:0x00279248:	popc	@c00
000057:0x00279250:	release	@c00
000057:0x00279258:	popc	@c01
000057:0x00279260:	release	@c01
000057:0x00279268:	popc	@c02
000057:0x00279270:	release	@c02
000057:0x00279278:	release	#return
000058:0x00279280:	movem	src, m_Empty
000058:0x00279290:	movem	dst, m_Equipped
000058:0x002792a0:	new	@c00, HandActionCreated
000058:0x002792c0:	pushc	@c00
000058:0x002792c8:	call	
000058:0x002792d8:	new	@c01, HandGuardHasItemInEvent
000058:0x00279300:	pushc	@c01
000058:0x00279308:	new	@c02, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000058:0x00279340:	pushc	@c02
000058:0x00279348:	movefm	[0xb5b3f2a8], m_FSM
000058:0x00279358:	call	
000058:0x00279368:	popc	@c00
000058:0x00279370:	release	@c00
000058:0x00279378:	popc	@c01
000058:0x00279380:	release	@c01
000058:0x00279388:	popc	@c02
000058:0x00279390:	release	@c02
000058:0x00279398:	release	#return
000060:0x002793a0:	movem	src, m_Equipped
000060:0x002793b0:	movem	dst, m_Empty
000060:0x002793c0:	new	@c00, HandActionDrop
000060:0x002793e0:	pushc	@c00
000060:0x002793e8:	movetm	g, null
000060:0x002793f8:	new	@c01, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000060:0x00279430:	pushc	@c01
000060:0x00279438:	movefm	[0xb5b3f2a8], m_FSM
000060:0x00279448:	call	
000060:0x00279458:	popc	@c00
000060:0x00279460:	release	@c00
000060:0x00279468:	popc	@c01
000060:0x00279470:	release	@c01
000061:0x00279478:	movem	src, m_Equipped
000061:0x00279488:	movem	dst, m_Empty
000061:0x00279498:	new	@c00, HandActionThrow
000061:0x002794b8:	pushc	@c00
000061:0x002794c0:	movetm	g, null
000061:0x002794d0:	new	@c01, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000061:0x00279508:	pushc	@c01
000061:0x00279510:	movefm	[0xb5b3f2a8], m_FSM
000061:0x00279520:	call	
000061:0x00279530:	popc	@c00
000061:0x00279538:	release	@c00
000061:0x00279540:	popc	@c01
000061:0x00279548:	release	@c01
000062:0x00279550:	movem	src, m_Equipped
000062:0x00279560:	movem	dst, m_Empty
000062:0x00279570:	new	@c00, HandActionMoveTo
000062:0x00279590:	pushc	@c00
000062:0x00279598:	call	
000062:0x002795a8:	new	@c01, HandGuardHasItemInHands
000062:0x002795d0:	pushc	@c01
000062:0x002795d8:	pushc	#return
000062:0x002795e0:	call	
000062:0x002795f0:	movefm	@c02, #return
000062:0x00279600:	popc	#return
000062:0x00279608:	new	@c03, HandGuardCanMove
000062:0x00279630:	pushc	@c03
000062:0x00279638:	new	@c04, HandGuardAnd
000062:0x00279660:	pushc	@c04
000062:0x00279668:	new	@c05, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000062:0x002796a0:	pushc	@c05
000062:0x002796a8:	movefm	[0xb5b3f2a8], m_FSM
000062:0x002796b8:	call	
000062:0x002796c8:	popc	@c00
000062:0x002796d0:	release	@c00
000062:0x002796d8:	popc	@c01
000062:0x002796e0:	release	@c01
000062:0x002796e8:	popc	@c03
000062:0x002796f0:	release	@c03
000062:0x002796f8:	popc	@c04
000062:0x00279700:	release	@c04
000062:0x00279708:	popc	@c05
000062:0x00279710:	release	@c05
000062:0x00279718:	release	#return
000063:0x00279720:	movem	src, m_Equipped
000063:0x00279730:	movem	dst, m_Empty
000063:0x00279740:	new	@c00, HandActionDestroy
000063:0x00279760:	pushc	@c00
000063:0x00279768:	call	
000063:0x00279778:	new	@c01, HandGuardHasItemInHands
000063:0x002797a0:	pushc	@c01
000063:0x002797a8:	new	@c02, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000063:0x002797e0:	pushc	@c02
000063:0x002797e8:	movefm	[0xb5b3f2a8], m_FSM
000063:0x002797f8:	call	
000063:0x00279808:	popc	@c00
000063:0x00279810:	release	@c00
000063:0x00279818:	popc	@c01
000063:0x00279820:	release	@c01
000063:0x00279828:	popc	@c02
000063:0x00279830:	release	@c02
000063:0x00279838:	release	#return
000064:0x00279840:	movem	src, m_Equipped
000064:0x00279850:	movem	dst, m_Empty
000064:0x00279860:	new	@c00, HandActionDestroyed
000064:0x00279880:	pushc	@c00
000064:0x00279888:	call	
000064:0x00279898:	new	@c01, HandGuardHasDestroyedItemInHands
000064:0x002798c0:	pushc	@c01
000064:0x002798c8:	new	@c02, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000064:0x00279900:	pushc	@c02
000064:0x00279908:	movefm	[0xb5b3f2a8], m_FSM
000064:0x00279918:	call	
000064:0x00279928:	popc	@c00
000064:0x00279930:	release	@c00
000064:0x00279938:	popc	@c01
000064:0x00279940:	release	@c01
000064:0x00279948:	popc	@c02
000064:0x00279950:	release	@c02
000064:0x00279958:	release	#return
000065:0x00279960:	movem	src, m_Equipped
000065:0x00279970:	movem	dst, m_Equipped
000065:0x00279980:	new	@c00, HandActionDestroyed
000065:0x002799a0:	pushc	@c00
000065:0x002799a8:	call	
000065:0x002799b8:	new	@c01, HandGuardHasDestroyedItemInHands
000065:0x002799e0:	pushc	@c01
000065:0x002799e8:	new	@c02, HandGuardNot
000065:0x00279a10:	pushc	@c02
000065:0x00279a18:	new	@c03, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000065:0x00279a50:	pushc	@c03
000065:0x00279a58:	movefm	[0xb5b3f2a8], m_FSM
000065:0x00279a68:	call	
000065:0x00279a78:	popc	@c00
000065:0x00279a80:	release	@c00
000065:0x00279a88:	popc	@c01
000065:0x00279a90:	release	@c01
000065:0x00279a98:	popc	@c02
000065:0x00279aa0:	release	@c02
000065:0x00279aa8:	popc	@c03
000065:0x00279ab0:	release	@c03
000065:0x00279ab8:	release	#return
000067:0x00279ac0:	movem	src, m_Equipped
000067:0x00279ad0:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000067:0x00279b08:	pushc	@c00
000067:0x00279b10:	movefm	[0xb5b3f2a8], m_FSM
000067:0x00279b20:	call	
000067:0x00279b30:	popc	@c00
000067:0x00279b38:	release	@c00
000068:0x00279b40:	movem	dst, m_Equipped
000068:0x00279b50:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000068:0x00279b88:	pushc	@c00
000068:0x00279b90:	movefm	[0xb5b3f2a8], m_FSM
000068:0x00279ba0:	call	
000068:0x00279bb0:	popc	@c00
000068:0x00279bb8:	release	@c00
000069:0x00279bc0:	movefm	@c01, replacing
000069:0x00279bd0:	movem	src, m_Replacing
000069:0x00279be0:	movem	dst, m_Equipped
000069:0x00279bf0:	new	@c02, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000069:0x00279c28:	pushc	@c02
000069:0x00279c30:	call	
000069:0x00279c40:	popc	@c02
000069:0x00279c48:	release	@c02
000071:0x00279c50:	movem	src, m_Equipped
000071:0x00279c60:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000071:0x00279c98:	pushc	@c00
000071:0x00279ca0:	movefm	[0xb5b3f2a8], m_FSM
000071:0x00279cb0:	call	
000071:0x00279cc0:	popc	@c00
000071:0x00279cc8:	release	@c00
000072:0x00279cd0:	movem	dst, m_Empty
000072:0x00279ce0:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000072:0x00279d18:	pushc	@c00
000072:0x00279d20:	movefm	[0xb5b3f2a8], m_FSM
000072:0x00279d30:	call	
000072:0x00279d40:	popc	@c00
000072:0x00279d48:	release	@c00
000073:0x00279d50:	movefm	@c01, replacingElsewhere
000073:0x00279d60:	movem	src, m_Replacing
000073:0x00279d70:	movem	dst, m_Equipped
000073:0x00279d80:	new	@c02, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000073:0x00279db8:	pushc	@c02
000073:0x00279dc0:	call	
000073:0x00279dd0:	popc	@c02
000073:0x00279dd8:	release	@c02
000075:0x00279de0:	movem	src, m_Empty
000075:0x00279df0:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000075:0x00279e28:	pushc	@c00
000075:0x00279e30:	movefm	[0xb5b3f2a8], m_FSM
000075:0x00279e40:	call	
000075:0x00279e50:	popc	@c00
000075:0x00279e58:	release	@c00
000076:0x00279e60:	movem	dst, m_Equipped
000076:0x00279e70:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000076:0x00279ea8:	pushc	@c00
000076:0x00279eb0:	movefm	[0xb5b3f2a8], m_FSM
000076:0x00279ec0:	call	
000076:0x00279ed0:	popc	@c00
000076:0x00279ed8:	release	@c00
000077:0x00279ee0:	movefm	@c01, replacingElsewhere3
000077:0x00279ef0:	movem	src, m_Replacing
000077:0x00279f00:	movem	dst, m_Empty
000077:0x00279f10:	new	@c02, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000077:0x00279f48:	pushc	@c02
000077:0x00279f50:	call	
000077:0x00279f60:	popc	@c02
000077:0x00279f68:	release	@c02
000079:0x00279f70:	movem	src, m_Equipped
000079:0x00279f80:	movem	dst, m_Equipped
000079:0x00279f90:	new	@c00, HandActionReplaced
000079:0x00279fb0:	pushc	@c00
000079:0x00279fb8:	movetm	g, null
000079:0x00279fc8:	new	@c01, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000079:0x0027a000:	pushc	@c01
000079:0x0027a008:	movefm	[0xb5b3f2a8], m_FSM
000079:0x0027a018:	call	
000079:0x0027a028:	popc	@c00
000079:0x0027a030:	release	@c00
000079:0x0027a038:	popc	@c01
000079:0x0027a040:	release	@c01
000080:0x0027a048:	movem	src, m_Equipped
000080:0x0027a058:	movem	dst, m_Equipped
000080:0x0027a068:	new	@c00, HandActionSwap
000080:0x0027a088:	pushc	@c00
000080:0x0027a090:	call	
000080:0x0027a0a0:	new	@c01, HandGuardHasItemInHands
000080:0x0027a0c8:	pushc	@c01
000080:0x0027a0d0:	pushc	#return
000080:0x0027a0d8:	call	
000080:0x0027a0e8:	movefm	@c02, #return
000080:0x0027a0f8:	popc	#return
000080:0x0027a100:	new	@c03, HandGuardCanSwap
000080:0x0027a128:	pushc	@c03
000080:0x0027a130:	new	@c04, HandGuardAnd
000080:0x0027a158:	pushc	@c04
000080:0x0027a160:	new	@c05, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000080:0x0027a198:	pushc	@c05
000080:0x0027a1a0:	movefm	[0xb5b3f2a8], m_FSM
000080:0x0027a1b0:	call	
000080:0x0027a1c0:	popc	@c00
000080:0x0027a1c8:	release	@c00
000080:0x0027a1d0:	popc	@c01
000080:0x0027a1d8:	release	@c01
000080:0x0027a1e0:	popc	@c03
000080:0x0027a1e8:	release	@c03
000080:0x0027a1f0:	popc	@c04
000080:0x0027a1f8:	release	@c04
000080:0x0027a200:	popc	@c05
000080:0x0027a208:	release	@c05
000080:0x0027a210:	release	#return
000081:0x0027a218:	movem	src, m_Equipped
000081:0x0027a228:	movem	dst, m_Equipped
000081:0x0027a238:	new	@c00, HandActionForceSwap
000081:0x0027a258:	pushc	@c00
000081:0x0027a260:	call	
000081:0x0027a270:	new	@c01, HandGuardHasItemInHands
000081:0x0027a298:	pushc	@c01
000081:0x0027a2a0:	pushc	#return
000081:0x0027a2a8:	call	
000081:0x0027a2b8:	movefm	@c02, #return
000081:0x0027a2c8:	popc	#return
000081:0x0027a2d0:	new	@c03, HandGuardCanForceSwap
000081:0x0027a2f8:	pushc	@c03
000081:0x0027a300:	new	@c04, HandGuardAnd
000081:0x0027a328:	pushc	@c04
000081:0x0027a330:	new	@c05, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000081:0x0027a368:	pushc	@c05
000081:0x0027a370:	movefm	[0xb5b3f2a8], m_FSM
000081:0x0027a380:	call	
000081:0x0027a390:	popc	@c00
000081:0x0027a398:	release	@c00
000081:0x0027a3a0:	popc	@c01
000081:0x0027a3a8:	release	@c01
000081:0x0027a3b0:	popc	@c03
000081:0x0027a3b8:	release	@c03
000081:0x0027a3c0:	popc	@c04
000081:0x0027a3c8:	release	@c04
000081:0x0027a3d0:	popc	@c05
000081:0x0027a3d8:	release	@c05
000081:0x0027a3e0:	release	#return
000084:0x0027a3e8:	movem	initial_state, m_Empty
000084:0x0027a3f8:	movefm	[0xb5b3f2a8], m_FSM
000084:0x0027a408:	call	
000085:0x0027a418:	movefm	[0xb5b3f2a8], m_FSM
000085:0x0027a428:	call	
000087:0x0027a440:	call	
000087:0x0027a450:	release	__T__
000087:0x0027a458:	release	__D__
000087:0x0027a460:	release	__Tw_
000087:0x0027a468:	release	__M__
000087:0x0027a470:	release	__W__
000087:0x0027a478:	release	__F__
000087:0x0027a480:	release	__X__
000087:0x0027a488:	release	__Xd_
000087:0x0027a490:	release	__R__
000087:0x0027a498:	release	__Re_
000087:0x0027a4a0:	release	__Rh_
000087:0x0027a4a8:	release	__Rd_
000087:0x0027a4b0:	release	__Cd_
000087:0x0027a4b8:	release	_fin_
000087:0x0027a4c0:	release	_abt_
000087:0x0027a4c8:	release	replacing
000087:0x0027a4d0:	release	replacingElsewhere
000087:0x0027a4d8:	release	replacingElsewhere3
000087:0x0027a4e0:	rts
HumanInventoryWithFSM::CanProcessHandEvents()
000090:0x0027a4e8:	cmpcm	m_FSM, null
000090:0x0027a4f8:	beq	0x27a550
000090:0x0027a500:	movefm	[0xb5b3f2a8], m_FSM
000090:0x0027a510:	call	
000090:0x0027a520:	cmpi	#return, _i0
000090:0x0027a530:	beq	0x27a550
000090:0x0027a538:	imove	#return, 0x000001
000090:0x0027a548:	jump	0x27a560
000090:0x0027a550:	imove	#return, 0x000000
000090:0x0027a560:	rts
000090:0x0027a568:	rts
HumanInventoryWithFSM::ProcessHandEvent()
000099:0x0027a570:	movefm	[0xb5b3f2a8], m_FSM
000099:0x0027a580:	call	
000099:0x0027a590:	move	@m00, #return
000099:0x0027a5a0:	cmpi	@m00, FSM_OK
000099:0x0027a5b0:	bne	0x27a5d8
000107:0x0027a5b8:	imove	#return, 0x000001
000107:0x0027a5c8:	rts
000107:0x0027a5d0:	jump	0x27a5f0
000112:0x0027a5d8:	imove	#return, 0x000000
000112:0x0027a5e8:	rts
000112:0x0027a5f0:	rts
HumanInventoryWithFSM::ProcessHandAbortEvent()
000120:0x0027a698:	movefm	[0xb5b3f2a8], m_FSM
000120:0x0027a6a8:	call	
000120:0x0027a6c0:	move	aa, result
000120:0x0027a6d0:	release	#return
000121:0x0027a6d8:	cmpi	aa, FSM_OK
000121:0x0027a6e8:	bne	0x27a7c0
000123:0x0027a6f0:	call	
000123:0x0027a700:	ncalli	Man.GetSimulationTimeStamp()
000123:0x0027a708:	icall	ToString(#return)
000123:0x0027a718:	adds	@s03, _s'[hndfsm]  STS = ', #return
000123:0x0027a728:	moves	@s02, @s03
000123:0x0027a738:	adds	@s02, @s02, _s' Processed event e='
000123:0x0027a748:	moves	@s01, @s02
000123:0x0027a758:	icall	ToString(e)
000123:0x0027a768:	adds	@s01, @s01, #return
000123:0x0027a778:	moves	@s00, @s01
000123:0x0027a788:	call	hndDebugSpam(@s00)
000123:0x0027a798:	release	#return
000124:0x0027a7a0:	imove	#return, 0x000001
000124:0x0027a7b0:	rts
000124:0x0027a7b8:	jump	0x27a7d8
000129:0x0027a7c0:	imove	#return, 0x000000
000129:0x0027a7d0:	rts
000129:0x0027a7d8:	rts
HumanInventoryWithFSM::OnStoreLoad()
000135:0x0027a7e0:	call	
000135:0x0027a7f8:	cmpi	#return, _i0
000135:0x0027a808:	bne	0x27a828
000136:0x0027a810:	imove	#return, 0x000000
000136:0x0027a820:	rts
000141:0x0027a828:	imove	#return, 0x000001
000141:0x0027a838:	rts
000141:0x0027a840:	rts
HumanInventoryWithFSM::OnStoreSave()
000146:0x0027a848:	call	
000146:0x0027a858:	rts
HumanInventoryWithFSM::GetCurrentStateID()
000154:0x0027a860:	movefm	[0xb5b3f2a8], m_FSM
000154:0x0027a870:	call	
000154:0x0027a880:	move	#return, #return
000154:0x0027a890:	rts
000154:0x0027a898:	rts
HumanInventoryWithFSM::IsIdle()
000156:0x0027a8a0:	movefm	[0xb5b3f2a8], m_FSM
000156:0x0027a8b0:	call	
000156:0x0027a8c0:	call	
000156:0x0027a8d0:	move	#return, #return
000156:0x0027a8e0:	release	#return
000156:0x0027a8e8:	rts
000156:0x0027a8f0:	rts
HumanInventoryWithFSM::NetSyncCurrentStateID()
000163:0x0027a8f8:	movefm	[0xb5b3f2a8], m_FSM
000163:0x0027a908:	call	
000163:0x0027a918:	rts
UIMenuPanel::UseMouse()
//scripts/3_Game/tools\uiscriptedmenu.c
000031:0x0027a920:	imove	#return, 0x000001
000031:0x0027a930:	rts
000031:0x0027a938:	rts
UIMenuPanel::UseKeyboard()
000039:0x0027a940:	imove	#return, 0x000001
000039:0x0027a950:	rts
000039:0x0027a958:	rts
UIMenuPanel::UseGamepad()
000044:0x0027a960:	imove	#return, 0x000001
000044:0x0027a970:	rts
000044:0x0027a978:	rts
UIMenuPanel::GetID()
000049:0x0027a980:	imove	#return, 0x000004
000049:0x0027a990:	rts
000049:0x0027a998:	rts
UIScriptedMenu::GetLayoutRoot()
000070:0x0027a9a0:	movem	#return, layoutRoot
000070:0x0027a9b0:	rts
000070:0x0027a9b8:	rts
UIScriptedMenu::LockControls()
000075:0x0027a9c0:	call	
000075:0x0027a9d0:	cmpi	#return, _i0
000075:0x0027a9e0:	beq	0x27aa28
000077:0x0027a9e8:	ncall	GetGame()
000077:0x0027a9f0:	ncalli	CGame.GetInput()
000077:0x0027a9f8:	ncalli	Input.ChangeGameFocus(_i1, INPUT_DEVICE_MOUSE)
000078:0x0027aa08:	ncall	GetGame()
000078:0x0027aa10:	ncalli	CGame.GetUIManager()
000078:0x0027aa18:	call	
000081:0x0027aa28:	call	
000081:0x0027aa38:	cmpi	#return, _i0
000081:0x0027aa48:	beq	0x27aa70
000083:0x0027aa50:	ncall	GetGame()
000083:0x0027aa58:	ncalli	CGame.GetInput()
000083:0x0027aa60:	ncalli	Input.ChangeGameFocus(_i1, INPUT_DEVICE_KEYBOARD)
000086:0x0027aa70:	call	
000086:0x0027aa80:	cmpi	#return, _i0
000086:0x0027aa90:	beq	0x27aab8
000088:0x0027aa98:	ncall	GetGame()
000088:0x0027aaa0:	ncalli	CGame.GetInput()
000088:0x0027aaa8:	ncalli	Input.ChangeGameFocus(_i1, INPUT_DEVICE_GAMEPAD)
000088:0x0027aab8:	rts
UIScriptedMenu::UnlockControls()
000094:0x0027aac0:	call	
000094:0x0027aad0:	cmpi	#return, _i0
000094:0x0027aae0:	beq	0x27ab08
000096:0x0027aae8:	ncall	GetGame()
000096:0x0027aaf0:	ncalli	CGame.GetInput()
000096:0x0027aaf8:	ncalli	Input.ChangeGameFocus(_i-1, INPUT_DEVICE_MOUSE)
000099:0x0027ab08:	ncalli	UIScriptedMenu.GetParentMenu()
000099:0x0027ab10:	cmpm	#return, null
000099:0x0027ab20:	beq	0x27ab80
000099:0x0027ab28:	ncalli	UIScriptedMenu.GetParentMenu()
000099:0x0027ab30:	call	
000099:0x0027ab40:	cmpi	#return, _i0
000099:0x0027ab50:	beq	0x27ab80
000101:0x0027ab58:	ncall	GetGame()
000101:0x0027ab60:	ncalli	CGame.GetUIManager()
000101:0x0027ab68:	call	
000101:0x0027ab78:	jump	0x27aba0
000105:0x0027ab80:	ncall	GetGame()
000105:0x0027ab88:	ncalli	CGame.GetUIManager()
000105:0x0027ab90:	call	
000108:0x0027aba0:	call	
000108:0x0027abb0:	cmpi	#return, _i0
000108:0x0027abc0:	beq	0x27abe8
000110:0x0027abc8:	ncall	GetGame()
000110:0x0027abd0:	ncalli	CGame.GetInput()
000110:0x0027abd8:	ncalli	Input.ChangeGameFocus(_i-1, INPUT_DEVICE_KEYBOARD)
000113:0x0027abe8:	call	
000113:0x0027abf8:	cmpi	#return, _i0
000113:0x0027ac08:	beq	0x27ac30
000115:0x0027ac10:	ncall	GetGame()
000115:0x0027ac18:	ncalli	CGame.GetInput()
000115:0x0027ac20:	ncalli	Input.ChangeGameFocus(_i-1, INPUT_DEVICE_GAMEPAD)
000115:0x0027ac30:	rts
UIScriptedMenu::UIScriptedMenu()
000121:0x0027ac38:	imove	m_id, 0x000004
000121:0x0027ac48:	rts
UIScriptedMenu::SetID()
000130:0x0027ac50:	move	m_id, id
000130:0x0027ac60:	rts
UIScriptedMenu::GetID()
000135:0x0027ac68:	move	#return, m_id
000135:0x0027ac78:	rts
000135:0x0027ac80:	rts
UIScriptedMenu::SetWidgetAnimAlpha()
000140:0x0027ac88:	imove	m_AnimAlphaValue, 0.30000
000141:0x0027ac98:	movem	m_AnimAlphaWidget, widget
000141:0x0027aca8:	rts
UIScriptedMenu::Init()
000148:0x0027acb0:	movetm	#return, NULL
000148:0x0027acc0:	rts
000148:0x0027acc8:	rts
UIScriptedMenu::OnShow()
000158:0x0027acd0:	call	
000158:0x0027ace0:	rts
UIScriptedMenu::OnHide()
000164:0x0027ace8:	call	
000164:0x0027acf8:	rts
UIScriptedMenu::OnClick()
000213:0x0027ad28:	call	GetActiveWindows()
000213:0x0027ad38:	cmpcm	#return, null
000213:0x0027ad48:	beq	0x27ae50
000215:0x0027ad50:	imove	i, 0x000000
000215:0x0027ad60:	jump	0x27ad80
000215:0x0027ad68:	move	@m00, i
000215:0x0027ad78:	inc	i
000215:0x0027ad80:	call	GetActiveWindows()
000215:0x0027ad90:	ncalli	map<int,UIScriptedWindow>.Count()
000215:0x0027ad98:	cmpi	i, #return
000215:0x0027ada8:	bge	0x27ae50
000217:0x0027adb0:	call	GetActiveWindows()
000217:0x0027adc0:	icall	
000217:0x0027add0:	call	
000217:0x0027adf0:	cmpi	#return, _i0
000217:0x0027ae00:	beq	0x27ae38
000219:0x0027ae08:	imove	#return, 0x000001
000219:0x0027ae18:	release	#return
000219:0x0027ae20:	release	#return
000219:0x0027ae28:	release	#return
000219:0x0027ae30:	rts
000219:0x0027ae38:	release	#return
000219:0x0027ae40:	jump	0x27ad68
000219:0x0027ae48:	release	#return
000219:0x0027ae50:	release	#return
000224:0x0027ae58:	imove	#return, 0x000000
000224:0x0027ae68:	rts
000224:0x0027ae70:	rts
UIScriptedMenu::OnModalResult()
000228:0x0027aea0:	call	GetActiveWindows()
000228:0x0027aeb0:	cmpcm	#return, null
000228:0x0027aec0:	beq	0x27afc8
000230:0x0027aec8:	imove	i, 0x000000
000230:0x0027aed8:	jump	0x27aef8
000230:0x0027aee0:	move	@m00, i
000230:0x0027aef0:	inc	i
000230:0x0027aef8:	call	GetActiveWindows()
000230:0x0027af08:	ncalli	map<int,UIScriptedWindow>.Count()
000230:0x0027af10:	cmpi	i, #return
000230:0x0027af20:	bge	0x27afc8
000232:0x0027af28:	call	GetActiveWindows()
000232:0x0027af38:	icall	
000232:0x0027af48:	call	
000232:0x0027af68:	cmpi	#return, _i0
000232:0x0027af78:	beq	0x27afb0
000234:0x0027af80:	imove	#return, 0x000001
000234:0x0027af90:	release	#return
000234:0x0027af98:	release	#return
000234:0x0027afa0:	release	#return
000234:0x0027afa8:	rts
000234:0x0027afb0:	release	#return
000234:0x0027afb8:	jump	0x27aee0
000234:0x0027afc0:	release	#return
000234:0x0027afc8:	release	#return
000239:0x0027afd0:	imove	#return, 0x000000
000239:0x0027afe0:	rts
000239:0x0027afe8:	rts
UIScriptedMenu::OnDoubleClick()
000243:0x0027b018:	call	GetActiveWindows()
000243:0x0027b028:	cmpcm	#return, null
000243:0x0027b038:	beq	0x27b140
000245:0x0027b040:	imove	i, 0x000000
000245:0x0027b050:	jump	0x27b070
000245:0x0027b058:	move	@m00, i
000245:0x0027b068:	inc	i
000245:0x0027b070:	call	GetActiveWindows()
000245:0x0027b080:	ncalli	map<int,UIScriptedWindow>.Count()
000245:0x0027b088:	cmpi	i, #return
000245:0x0027b098:	bge	0x27b140
000247:0x0027b0a0:	call	GetActiveWindows()
000247:0x0027b0b0:	icall	
000247:0x0027b0c0:	call	
000247:0x0027b0e0:	cmpi	#return, _i0
000247:0x0027b0f0:	beq	0x27b128
000249:0x0027b0f8:	imove	#return, 0x000001
000249:0x0027b108:	release	#return
000249:0x0027b110:	release	#return
000249:0x0027b118:	release	#return
000249:0x0027b120:	rts
000249:0x0027b128:	release	#return
000249:0x0027b130:	jump	0x27b058
000249:0x0027b138:	release	#return
000249:0x0027b140:	release	#return
000254:0x0027b148:	imove	#return, 0x000000
000254:0x0027b158:	rts
000254:0x0027b160:	rts
UIScriptedMenu::OnSelect()
000258:0x0027b190:	call	GetActiveWindows()
000258:0x0027b1a0:	cmpcm	#return, null
000258:0x0027b1b0:	beq	0x27b2b0
000260:0x0027b1b8:	imove	i, 0x000000
000260:0x0027b1c8:	jump	0x27b1e8
000260:0x0027b1d0:	move	@m00, i
000260:0x0027b1e0:	inc	i
000260:0x0027b1e8:	call	GetActiveWindows()
000260:0x0027b1f8:	ncalli	map<int,UIScriptedWindow>.Count()
000260:0x0027b200:	cmpi	i, #return
000260:0x0027b210:	bge	0x27b2b0
000262:0x0027b218:	call	GetActiveWindows()
000262:0x0027b228:	icall	
000262:0x0027b238:	call	
000262:0x0027b250:	cmpi	#return, _i0
000262:0x0027b260:	beq	0x27b298
000264:0x0027b268:	imove	#return, 0x000001
000264:0x0027b278:	release	#return
000264:0x0027b280:	release	#return
000264:0x0027b288:	release	#return
000264:0x0027b290:	rts
000264:0x0027b298:	release	#return
000264:0x0027b2a0:	jump	0x27b1d0
000264:0x0027b2a8:	release	#return
000264:0x0027b2b0:	release	#return
000269:0x0027b2b8:	imove	#return, 0x000000
000269:0x0027b2c8:	rts
000269:0x0027b2d0:	rts
UIScriptedMenu::OnItemSelected()
000273:0x0027b300:	call	GetActiveWindows()
000273:0x0027b310:	cmpcm	#return, null
000273:0x0027b320:	beq	0x27b430
000275:0x0027b328:	imove	i, 0x000000
000275:0x0027b338:	jump	0x27b358
000275:0x0027b340:	move	@m00, i
000275:0x0027b350:	inc	i
000275:0x0027b358:	call	GetActiveWindows()
000275:0x0027b368:	ncalli	map<int,UIScriptedWindow>.Count()
000275:0x0027b370:	cmpi	i, #return
000275:0x0027b380:	bge	0x27b430
000277:0x0027b388:	call	GetActiveWindows()
000277:0x0027b398:	icall	
000277:0x0027b3a8:	call	
000277:0x0027b3d0:	cmpi	#return, _i0
000277:0x0027b3e0:	beq	0x27b418
000279:0x0027b3e8:	imove	#return, 0x000001
000279:0x0027b3f8:	release	#return
000279:0x0027b400:	release	#return
000279:0x0027b408:	release	#return
000279:0x0027b410:	rts
000279:0x0027b418:	release	#return
000279:0x0027b420:	jump	0x27b340
000279:0x0027b428:	release	#return
000279:0x0027b430:	release	#return
000284:0x0027b438:	imove	#return, 0x000000
000284:0x0027b448:	rts
000284:0x0027b450:	rts
UIScriptedMenu::OnFocus()
000288:0x0027b480:	call	GetActiveWindows()
000288:0x0027b490:	cmpcm	#return, null
000288:0x0027b4a0:	beq	0x27b5a0
000290:0x0027b4a8:	imove	i, 0x000000
000290:0x0027b4b8:	jump	0x27b4d8
000290:0x0027b4c0:	move	@m00, i
000290:0x0027b4d0:	inc	i
000290:0x0027b4d8:	call	GetActiveWindows()
000290:0x0027b4e8:	ncalli	map<int,UIScriptedWindow>.Count()
000290:0x0027b4f0:	cmpi	i, #return
000290:0x0027b500:	bge	0x27b5a0
000292:0x0027b508:	call	GetActiveWindows()
000292:0x0027b518:	icall	
000292:0x0027b528:	call	
000292:0x0027b540:	cmpi	#return, _i0
000292:0x0027b550:	beq	0x27b588
000294:0x0027b558:	imove	#return, 0x000001
000294:0x0027b568:	release	#return
000294:0x0027b570:	release	#return
000294:0x0027b578:	release	#return
000294:0x0027b580:	rts
000294:0x0027b588:	release	#return
000294:0x0027b590:	jump	0x27b4c0
000294:0x0027b598:	release	#return
000294:0x0027b5a0:	release	#return
000299:0x0027b5a8:	imove	#return, 0x000000
000299:0x0027b5b8:	rts
000299:0x0027b5c0:	rts
UIScriptedMenu::OnFocusLost()
000303:0x0027b5f0:	call	GetActiveWindows()
000303:0x0027b600:	cmpcm	#return, null
000303:0x0027b610:	beq	0x27b710
000305:0x0027b618:	imove	i, 0x000000
000305:0x0027b628:	jump	0x27b648
000305:0x0027b630:	move	@m00, i
000305:0x0027b640:	inc	i
000305:0x0027b648:	call	GetActiveWindows()
000305:0x0027b658:	ncalli	map<int,UIScriptedWindow>.Count()
000305:0x0027b660:	cmpi	i, #return
000305:0x0027b670:	bge	0x27b710
000307:0x0027b678:	call	GetActiveWindows()
000307:0x0027b688:	icall	
000307:0x0027b698:	call	
000307:0x0027b6b0:	cmpi	#return, _i0
000307:0x0027b6c0:	beq	0x27b6f8
000309:0x0027b6c8:	imove	#return, 0x000001
000309:0x0027b6d8:	release	#return
000309:0x0027b6e0:	release	#return
000309:0x0027b6e8:	release	#return
000309:0x0027b6f0:	rts
000309:0x0027b6f8:	release	#return
000309:0x0027b700:	jump	0x27b630
000309:0x0027b708:	release	#return
000309:0x0027b710:	release	#return
000314:0x0027b718:	imove	#return, 0x000000
000314:0x0027b728:	rts
000314:0x0027b730:	rts
UIScriptedMenu::OnMouseEnter()
000318:0x0027b760:	call	GetActiveWindows()
000318:0x0027b770:	cmpcm	#return, null
000318:0x0027b780:	beq	0x27b880
000320:0x0027b788:	imove	i, 0x000000
000320:0x0027b798:	jump	0x27b7b8
000320:0x0027b7a0:	move	@m00, i
000320:0x0027b7b0:	inc	i
000320:0x0027b7b8:	call	GetActiveWindows()
000320:0x0027b7c8:	ncalli	map<int,UIScriptedWindow>.Count()
000320:0x0027b7d0:	cmpi	i, #return
000320:0x0027b7e0:	bge	0x27b880
000322:0x0027b7e8:	call	GetActiveWindows()
000322:0x0027b7f8:	icall	
000322:0x0027b808:	call	
000322:0x0027b820:	cmpi	#return, _i0
000322:0x0027b830:	beq	0x27b868
000324:0x0027b838:	imove	#return, 0x000001
000324:0x0027b848:	release	#return
000324:0x0027b850:	release	#return
000324:0x0027b858:	release	#return
000324:0x0027b860:	rts
000324:0x0027b868:	release	#return
000324:0x0027b870:	jump	0x27b7a0
000324:0x0027b878:	release	#return
000324:0x0027b880:	release	#return
000329:0x0027b888:	imove	#return, 0x000000
000329:0x0027b898:	rts
000329:0x0027b8a0:	rts
UIScriptedMenu::OnMouseLeave()
000333:0x0027b8d0:	call	GetActiveWindows()
000333:0x0027b8e0:	cmpcm	#return, null
000333:0x0027b8f0:	beq	0x27b9f8
000335:0x0027b8f8:	imove	i, 0x000000
000335:0x0027b908:	jump	0x27b928
000335:0x0027b910:	move	@m00, i
000335:0x0027b920:	inc	i
000335:0x0027b928:	call	GetActiveWindows()
000335:0x0027b938:	ncalli	map<int,UIScriptedWindow>.Count()
000335:0x0027b940:	cmpi	i, #return
000335:0x0027b950:	bge	0x27b9f8
000337:0x0027b958:	call	GetActiveWindows()
000337:0x0027b968:	icall	
000337:0x0027b978:	call	
000337:0x0027b998:	cmpi	#return, _i0
000337:0x0027b9a8:	beq	0x27b9e0
000339:0x0027b9b0:	imove	#return, 0x000001
000339:0x0027b9c0:	release	#return
000339:0x0027b9c8:	release	#return
000339:0x0027b9d0:	release	#return
000339:0x0027b9d8:	rts
000339:0x0027b9e0:	release	#return
000339:0x0027b9e8:	jump	0x27b910
000339:0x0027b9f0:	release	#return
000339:0x0027b9f8:	release	#return
000344:0x0027ba00:	imove	#return, 0x000000
000344:0x0027ba10:	rts
000344:0x0027ba18:	rts
UIScriptedMenu::OnMouseButtonDown()
000348:0x0027ba48:	call	GetActiveWindows()
000348:0x0027ba58:	cmpcm	#return, null
000348:0x0027ba68:	beq	0x27bb70
000350:0x0027ba70:	imove	i, 0x000000
000350:0x0027ba80:	jump	0x27baa0
000350:0x0027ba88:	move	@m00, i
000350:0x0027ba98:	inc	i
000350:0x0027baa0:	call	GetActiveWindows()
000350:0x0027bab0:	ncalli	map<int,UIScriptedWindow>.Count()
000350:0x0027bab8:	cmpi	i, #return
000350:0x0027bac8:	bge	0x27bb70
000352:0x0027bad0:	call	GetActiveWindows()
000352:0x0027bae0:	icall	
000352:0x0027baf0:	call	
000352:0x0027bb10:	cmpi	#return, _i0
000352:0x0027bb20:	beq	0x27bb58
000354:0x0027bb28:	imove	#return, 0x000001
000354:0x0027bb38:	release	#return
000354:0x0027bb40:	release	#return
000354:0x0027bb48:	release	#return
000354:0x0027bb50:	rts
000354:0x0027bb58:	release	#return
000354:0x0027bb60:	jump	0x27ba88
000354:0x0027bb68:	release	#return
000354:0x0027bb70:	release	#return
000359:0x0027bb78:	imove	#return, 0x000000
000359:0x0027bb88:	rts
000359:0x0027bb90:	rts
UIScriptedMenu::OnMouseButtonUp()
000363:0x0027bbc0:	call	GetActiveWindows()
000363:0x0027bbd0:	cmpcm	#return, null
000363:0x0027bbe0:	beq	0x27bce8
000365:0x0027bbe8:	imove	i, 0x000000
000365:0x0027bbf8:	jump	0x27bc18
000365:0x0027bc00:	move	@m00, i
000365:0x0027bc10:	inc	i
000365:0x0027bc18:	call	GetActiveWindows()
000365:0x0027bc28:	ncalli	map<int,UIScriptedWindow>.Count()
000365:0x0027bc30:	cmpi	i, #return
000365:0x0027bc40:	bge	0x27bce8
000367:0x0027bc48:	call	GetActiveWindows()
000367:0x0027bc58:	icall	
000367:0x0027bc68:	call	
000367:0x0027bc88:	cmpi	#return, _i0
000367:0x0027bc98:	beq	0x27bcd0
000369:0x0027bca0:	imove	#return, 0x000001
000369:0x0027bcb0:	release	#return
000369:0x0027bcb8:	release	#return
000369:0x0027bcc0:	release	#return
000369:0x0027bcc8:	rts
000369:0x0027bcd0:	release	#return
000369:0x0027bcd8:	jump	0x27bc00
000369:0x0027bce0:	release	#return
000369:0x0027bce8:	release	#return
000374:0x0027bcf0:	imove	#return, 0x000000
000374:0x0027bd00:	rts
000374:0x0027bd08:	rts
UIScriptedMenu::OnMouseWheel()
000378:0x0027bd38:	call	GetActiveWindows()
000378:0x0027bd48:	cmpcm	#return, null
000378:0x0027bd58:	beq	0x27be60
000380:0x0027bd60:	imove	i, 0x000000
000380:0x0027bd70:	jump	0x27bd90
000380:0x0027bd78:	move	@m00, i
000380:0x0027bd88:	inc	i
000380:0x0027bd90:	call	GetActiveWindows()
000380:0x0027bda0:	ncalli	map<int,UIScriptedWindow>.Count()
000380:0x0027bda8:	cmpi	i, #return
000380:0x0027bdb8:	bge	0x27be60
000382:0x0027bdc0:	call	GetActiveWindows()
000382:0x0027bdd0:	icall	
000382:0x0027bde0:	call	
000382:0x0027be00:	cmpi	#return, _i0
000382:0x0027be10:	beq	0x27be48
000384:0x0027be18:	imove	#return, 0x000001
000384:0x0027be28:	release	#return
000384:0x0027be30:	release	#return
000384:0x0027be38:	release	#return
000384:0x0027be40:	rts
000384:0x0027be48:	release	#return
000384:0x0027be50:	jump	0x27bd78
000384:0x0027be58:	release	#return
000384:0x0027be60:	release	#return
000389:0x0027be68:	imove	#return, 0x000000
000389:0x0027be78:	rts
000389:0x0027be80:	rts
UIScriptedMenu::OnController()
000393:0x0027beb0:	call	GetActiveWindows()
000393:0x0027bec0:	cmpcm	#return, null
000393:0x0027bed0:	beq	0x27bfd0
000395:0x0027bed8:	imove	i, 0x000000
000395:0x0027bee8:	jump	0x27bf08
000395:0x0027bef0:	move	@m00, i
000395:0x0027bf00:	inc	i
000395:0x0027bf08:	call	GetActiveWindows()
000395:0x0027bf18:	ncalli	map<int,UIScriptedWindow>.Count()
000395:0x0027bf20:	cmpi	i, #return
000395:0x0027bf30:	bge	0x27bfd0
000397:0x0027bf38:	call	GetActiveWindows()
000397:0x0027bf48:	icall	
000397:0x0027bf58:	call	
000397:0x0027bf70:	cmpi	#return, _i0
000397:0x0027bf80:	beq	0x27bfb8
000399:0x0027bf88:	imove	#return, 0x000001
000399:0x0027bf98:	release	#return
000399:0x0027bfa0:	release	#return
000399:0x0027bfa8:	release	#return
000399:0x0027bfb0:	rts
000399:0x0027bfb8:	release	#return
000399:0x0027bfc0:	jump	0x27bef0
000399:0x0027bfc8:	release	#return
000399:0x0027bfd0:	release	#return
000404:0x0027bfd8:	imove	#return, 0x000000
000404:0x0027bfe8:	rts
000404:0x0027bff0:	rts
UIScriptedMenu::OnKeyDown()
000408:0x0027c020:	call	GetActiveWindows()
000408:0x0027c030:	cmpcm	#return, null
000408:0x0027c040:	beq	0x27c148
000410:0x0027c048:	imove	i, 0x000000
000410:0x0027c058:	jump	0x27c078
000410:0x0027c060:	move	@m00, i
000410:0x0027c070:	inc	i
000410:0x0027c078:	call	GetActiveWindows()
000410:0x0027c088:	ncalli	map<int,UIScriptedWindow>.Count()
000410:0x0027c090:	cmpi	i, #return
000410:0x0027c0a0:	bge	0x27c148
000412:0x0027c0a8:	call	GetActiveWindows()
000412:0x0027c0b8:	icall	
000412:0x0027c0c8:	call	
000412:0x0027c0e8:	cmpi	#return, _i0
000412:0x0027c0f8:	beq	0x27c130
000414:0x0027c100:	imove	#return, 0x000001
000414:0x0027c110:	release	#return
000414:0x0027c118:	release	#return
000414:0x0027c120:	release	#return
000414:0x0027c128:	rts
000414:0x0027c130:	release	#return
000414:0x0027c138:	jump	0x27c060
000414:0x0027c140:	release	#return
000414:0x0027c148:	release	#return
000419:0x0027c150:	imove	#return, 0x000000
000419:0x0027c160:	rts
000419:0x0027c168:	rts
UIScriptedMenu::OnKeyUp()
000423:0x0027c198:	call	GetActiveWindows()
000423:0x0027c1a8:	cmpcm	#return, null
000423:0x0027c1b8:	beq	0x27c2c0
000425:0x0027c1c0:	imove	i, 0x000000
000425:0x0027c1d0:	jump	0x27c1f0
000425:0x0027c1d8:	move	@m00, i
000425:0x0027c1e8:	inc	i
000425:0x0027c1f0:	call	GetActiveWindows()
000425:0x0027c200:	ncalli	map<int,UIScriptedWindow>.Count()
000425:0x0027c208:	cmpi	i, #return
000425:0x0027c218:	bge	0x27c2c0
000427:0x0027c220:	call	GetActiveWindows()
000427:0x0027c230:	icall	
000427:0x0027c240:	call	
000427:0x0027c260:	cmpi	#return, _i0
000427:0x0027c270:	beq	0x27c2a8
000429:0x0027c278:	imove	#return, 0x000001
000429:0x0027c288:	release	#return
000429:0x0027c290:	release	#return
000429:0x0027c298:	release	#return
000429:0x0027c2a0:	rts
000429:0x0027c2a8:	release	#return
000429:0x0027c2b0:	jump	0x27c1d8
000429:0x0027c2b8:	release	#return
000429:0x0027c2c0:	release	#return
000434:0x0027c2c8:	imove	#return, 0x000000
000434:0x0027c2d8:	rts
000434:0x0027c2e0:	rts
UIScriptedMenu::OnKeyPress()
000438:0x0027c310:	call	GetActiveWindows()
000438:0x0027c320:	cmpcm	#return, null
000438:0x0027c330:	beq	0x27c438
000440:0x0027c338:	imove	i, 0x000000
000440:0x0027c348:	jump	0x27c368
000440:0x0027c350:	move	@m00, i
000440:0x0027c360:	inc	i
000440:0x0027c368:	call	GetActiveWindows()
000440:0x0027c378:	ncalli	map<int,UIScriptedWindow>.Count()
000440:0x0027c380:	cmpi	i, #return
000440:0x0027c390:	bge	0x27c438
000442:0x0027c398:	call	GetActiveWindows()
000442:0x0027c3a8:	icall	
000442:0x0027c3b8:	call	
000442:0x0027c3d8:	cmpi	#return, _i0
000442:0x0027c3e8:	beq	0x27c420
000444:0x0027c3f0:	imove	#return, 0x000001
000444:0x0027c400:	release	#return
000444:0x0027c408:	release	#return
000444:0x0027c410:	release	#return
000444:0x0027c418:	rts
000444:0x0027c420:	release	#return
000444:0x0027c428:	jump	0x27c350
000444:0x0027c430:	release	#return
000444:0x0027c438:	release	#return
000449:0x0027c440:	imove	#return, 0x000000
000449:0x0027c450:	rts
000449:0x0027c458:	rts
UIScriptedMenu::OnChange()
000453:0x0027c488:	call	GetActiveWindows()
000453:0x0027c498:	cmpcm	#return, null
000453:0x0027c4a8:	beq	0x27c5b0
000455:0x0027c4b0:	imove	i, 0x000000
000455:0x0027c4c0:	jump	0x27c4e0
000455:0x0027c4c8:	move	@m00, i
000455:0x0027c4d8:	inc	i
000455:0x0027c4e0:	call	GetActiveWindows()
000455:0x0027c4f0:	ncalli	map<int,UIScriptedWindow>.Count()
000455:0x0027c4f8:	cmpi	i, #return
000455:0x0027c508:	bge	0x27c5b0
000457:0x0027c510:	call	GetActiveWindows()
000457:0x0027c520:	icall	
000457:0x0027c530:	call	
000457:0x0027c550:	cmpi	#return, _i0
000457:0x0027c560:	beq	0x27c598
000459:0x0027c568:	imove	#return, 0x000001
000459:0x0027c578:	release	#return
000459:0x0027c580:	release	#return
000459:0x0027c588:	release	#return
000459:0x0027c590:	rts
000459:0x0027c598:	release	#return
000459:0x0027c5a0:	jump	0x27c4c8
000459:0x0027c5a8:	release	#return
000459:0x0027c5b0:	release	#return
000464:0x0027c5b8:	imove	#return, 0x000000
000464:0x0027c5c8:	rts
000464:0x0027c5d0:	rts
UIScriptedMenu::OnDrag()
000468:0x0027c600:	call	GetActiveWindows()
000468:0x0027c610:	cmpcm	#return, null
000468:0x0027c620:	beq	0x27c720
000470:0x0027c628:	imove	i, 0x000000
000470:0x0027c638:	jump	0x27c658
000470:0x0027c640:	move	@m00, i
000470:0x0027c650:	inc	i
000470:0x0027c658:	call	GetActiveWindows()
000470:0x0027c668:	ncalli	map<int,UIScriptedWindow>.Count()
000470:0x0027c670:	cmpi	i, #return
000470:0x0027c680:	bge	0x27c720
000472:0x0027c688:	call	GetActiveWindows()
000472:0x0027c698:	icall	
000472:0x0027c6a8:	call	
000472:0x0027c6c0:	cmpi	#return, _i0
000472:0x0027c6d0:	beq	0x27c708
000474:0x0027c6d8:	imove	#return, 0x000001
000474:0x0027c6e8:	release	#return
000474:0x0027c6f0:	release	#return
000474:0x0027c6f8:	release	#return
000474:0x0027c700:	rts
000474:0x0027c708:	release	#return
000474:0x0027c710:	jump	0x27c640
000474:0x0027c718:	release	#return
000474:0x0027c720:	release	#return
000479:0x0027c728:	imove	#return, 0x000000
000479:0x0027c738:	rts
000479:0x0027c740:	rts
UIScriptedMenu::OnDragging()
000483:0x0027c770:	call	GetActiveWindows()
000483:0x0027c780:	cmpcm	#return, null
000483:0x0027c790:	beq	0x27c898
000485:0x0027c798:	imove	i, 0x000000
000485:0x0027c7a8:	jump	0x27c7c8
000485:0x0027c7b0:	move	@m00, i
000485:0x0027c7c0:	inc	i
000485:0x0027c7c8:	call	GetActiveWindows()
000485:0x0027c7d8:	ncalli	map<int,UIScriptedWindow>.Count()
000485:0x0027c7e0:	cmpi	i, #return
000485:0x0027c7f0:	bge	0x27c898
000487:0x0027c7f8:	call	GetActiveWindows()
000487:0x0027c808:	icall	
000487:0x0027c818:	call	
000487:0x0027c838:	cmpi	#return, _i0
000487:0x0027c848:	beq	0x27c880
000489:0x0027c850:	imove	#return, 0x000001
000489:0x0027c860:	release	#return
000489:0x0027c868:	release	#return
000489:0x0027c870:	release	#return
000489:0x0027c878:	rts
000489:0x0027c880:	release	#return
000489:0x0027c888:	jump	0x27c7b0
000489:0x0027c890:	release	#return
000489:0x0027c898:	release	#return
000494:0x0027c8a0:	imove	#return, 0x000000
000494:0x0027c8b0:	rts
000494:0x0027c8b8:	rts
UIScriptedMenu::OnDraggingOver()
000498:0x0027c8e8:	call	GetActiveWindows()
000498:0x0027c8f8:	cmpcm	#return, null
000498:0x0027c908:	beq	0x27ca10
000500:0x0027c910:	imove	i, 0x000000
000500:0x0027c920:	jump	0x27c940
000500:0x0027c928:	move	@m00, i
000500:0x0027c938:	inc	i
000500:0x0027c940:	call	GetActiveWindows()
000500:0x0027c950:	ncalli	map<int,UIScriptedWindow>.Count()
000500:0x0027c958:	cmpi	i, #return
000500:0x0027c968:	bge	0x27ca10
000502:0x0027c970:	call	GetActiveWindows()
000502:0x0027c980:	icall	
000502:0x0027c990:	call	
000502:0x0027c9b0:	cmpi	#return, _i0
000502:0x0027c9c0:	beq	0x27c9f8
000504:0x0027c9c8:	imove	#return, 0x000001
000504:0x0027c9d8:	release	#return
000504:0x0027c9e0:	release	#return
000504:0x0027c9e8:	release	#return
000504:0x0027c9f0:	rts
000504:0x0027c9f8:	release	#return
000504:0x0027ca00:	jump	0x27c928
000504:0x0027ca08:	release	#return
000504:0x0027ca10:	release	#return
000509:0x0027ca18:	imove	#return, 0x000000
000509:0x0027ca28:	rts
000509:0x0027ca30:	rts
UIScriptedMenu::OnDrop()
000513:0x0027ca60:	call	GetActiveWindows()
000513:0x0027ca70:	cmpcm	#return, null
000513:0x0027ca80:	beq	0x27cb88
000515:0x0027ca88:	imove	i, 0x000000
000515:0x0027ca98:	jump	0x27cab8
000515:0x0027caa0:	move	@m00, i
000515:0x0027cab0:	inc	i
000515:0x0027cab8:	call	GetActiveWindows()
000515:0x0027cac8:	ncalli	map<int,UIScriptedWindow>.Count()
000515:0x0027cad0:	cmpi	i, #return
000515:0x0027cae0:	bge	0x27cb88
000517:0x0027cae8:	call	GetActiveWindows()
000517:0x0027caf8:	icall	
000517:0x0027cb08:	call	
000517:0x0027cb28:	cmpi	#return, _i0
000517:0x0027cb38:	beq	0x27cb70
000519:0x0027cb40:	imove	#return, 0x000001
000519:0x0027cb50:	release	#return
000519:0x0027cb58:	release	#return
000519:0x0027cb60:	release	#return
000519:0x0027cb68:	rts
000519:0x0027cb70:	release	#return
000519:0x0027cb78:	jump	0x27caa0
000519:0x0027cb80:	release	#return
000519:0x0027cb88:	release	#return
000524:0x0027cb90:	imove	#return, 0x000000
000524:0x0027cba0:	rts
000524:0x0027cba8:	rts
UIScriptedMenu::OnDropReceived()
000528:0x0027cbd8:	call	GetActiveWindows()
000528:0x0027cbe8:	cmpcm	#return, null
000528:0x0027cbf8:	beq	0x27cd00
000530:0x0027cc00:	imove	i, 0x000000
000530:0x0027cc10:	jump	0x27cc30
000530:0x0027cc18:	move	@m00, i
000530:0x0027cc28:	inc	i
000530:0x0027cc30:	call	GetActiveWindows()
000530:0x0027cc40:	ncalli	map<int,UIScriptedWindow>.Count()
000530:0x0027cc48:	cmpi	i, #return
000530:0x0027cc58:	bge	0x27cd00
000532:0x0027cc60:	call	GetActiveWindows()
000532:0x0027cc70:	icall	
000532:0x0027cc80:	call	
000532:0x0027cca0:	cmpi	#return, _i0
000532:0x0027ccb0:	beq	0x27cce8
000534:0x0027ccb8:	imove	#return, 0x000001
000534:0x0027ccc8:	release	#return
000534:0x0027ccd0:	release	#return
000534:0x0027ccd8:	release	#return
000534:0x0027cce0:	rts
000534:0x0027cce8:	release	#return
000534:0x0027ccf0:	jump	0x27cc18
000534:0x0027ccf8:	release	#return
000534:0x0027cd00:	release	#return
000539:0x0027cd08:	imove	#return, 0x000000
000539:0x0027cd18:	rts
000539:0x0027cd20:	rts
UIScriptedMenu::OnEvent()
000544:0x0027cd50:	call	GetActiveWindows()
000544:0x0027cd60:	cmpcm	#return, null
000544:0x0027cd70:	beq	0x27ce78
000546:0x0027cd78:	imove	i, 0x000000
000546:0x0027cd88:	jump	0x27cda8
000546:0x0027cd90:	move	@m00, i
000546:0x0027cda0:	inc	i
000546:0x0027cda8:	call	GetActiveWindows()
000546:0x0027cdb8:	ncalli	map<int,UIScriptedWindow>.Count()
000546:0x0027cdc0:	cmpi	i, #return
000546:0x0027cdd0:	bge	0x27ce78
000548:0x0027cdd8:	call	GetActiveWindows()
000548:0x0027cde8:	icall	
000548:0x0027cdf8:	call	
000548:0x0027ce18:	cmpi	#return, _i0
000548:0x0027ce28:	beq	0x27ce60
000550:0x0027ce30:	imove	#return, 0x000001
000550:0x0027ce40:	release	#return
000550:0x0027ce48:	release	#return
000550:0x0027ce50:	release	#return
000550:0x0027ce58:	rts
000550:0x0027ce60:	release	#return
000550:0x0027ce68:	jump	0x27cd90
000550:0x0027ce70:	release	#return
000550:0x0027ce78:	release	#return
000555:0x0027ce80:	imove	#return, 0x000000
000555:0x0027ce90:	rts
000555:0x0027ce98:	rts
UIScriptedMenu::GetContextMenu()
000560:0x0027cea0:	movetm	#return, null
000560:0x0027ceb0:	rts
000560:0x0027ceb8:	rts
UIScriptedMenu::OnXboxEvent()
000565:0x0027cec0:	imove	#return, 0x000001
000565:0x0027ced0:	rts
000565:0x0027ced8:	rts
PMTPlayback::PMTPlayback()
//scripts/3_Game/particles\tests\pmtplayback.c
000029:0x0027cf08:	new	m_ParticleSources, array<ParticleSource>
000029:0x0027cf28:	imove	m_bOnePlayingTestSuccess, 0x000000
000029:0x0027cf38:	imove	m_bOnePlayingSAADEnded, 0x000000
000029:0x0027cf48:	imove	m_bOnePlayingSAEnded, 0x000000
000029:0x0027cf58:	imove	m_bStopWasStopped, 0x000000
000029:0x0027cf68:	imove	m_bStopWasResumed, 0x000000
000029:0x0027cf78:	imove	m_bStopEnded, 0x000000
000035:0x0027cf88:	call	
000035:0x0027cf98:	rts
PMTPlayback::TestOnePlaying()
000044:0x0027d0b8:	call	
000044:0x0027d0c8:	movem	pm, #return
000044:0x0027d0d8:	release	#return
000045:0x0027d0e0:	call	
000045:0x0027d0f0:	move	m_OnePlayingManagerID, #return
000047:0x0027d100:	ncall	GetGame()
000047:0x0027d108:	ncalli	CGame.GetPlayer()
000047:0x0027d110:	movetm	player, #return
000049:0x0027d120:	ncalli	DayZPlayer.GetPosition()
000049:0x0027d128:	ncalli	DayZPlayer.GetDirection()
000049:0x0027d130:	scalev	@v02, #return, _f3.000000
000049:0x0027d140:	movev	@v01, @v02
000049:0x0027d150:	addv	@v01, #return, @v01
000049:0x0027d160:	movev	@v00, @v01
000049:0x0027d170:	imove	flags, 0x000001
000049:0x0027d180:	new	@c01, ParticleProperties
000049:0x0027d1b8:	pushc	@c01
000049:0x0027d1c0:	call	
000049:0x0027d1d8:	movem	p, #return
000049:0x0027d1e8:	popc	@c01
000049:0x0027d1f0:	release	@c01
000049:0x0027d1f8:	release	#return
000050:0x0027d200:	call	
000050:0x0027d210:	movefm	@c00, #return
000050:0x0027d220:	movefm	@c01, Event_OnParticleEnd
000050:0x0027d230:	icall	SetInstance([0xb5d7b090], this)
000050:0x0027d240:	icall	
000050:0x0027d250:	release	#return
000052:0x0027d258:	call	
000054:0x0027d268:	call	
000054:0x0027d278:	call	
000054:0x0027d288:	movem	#return, #return
000054:0x0027d298:	release	pm
000054:0x0027d2a0:	release	player
000054:0x0027d2a8:	release	p
000054:0x0027d2b0:	release	#return
000054:0x0027d2b8:	rts
000054:0x0027d2c0:	release	pm
000054:0x0027d2c8:	release	player
000054:0x0027d2d0:	release	p
000054:0x0027d2d8:	rts
PMTPlayback::TestOnePlayingStandAloneAutoDestroy()
000061:0x0027d3d0:	ncall	GetGame()
000061:0x0027d3d8:	ncalli	CGame.GetPlayer()
000061:0x0027d3e0:	movetm	player, #return
000063:0x0027d3f0:	ncalli	DayZPlayer.GetPosition()
000063:0x0027d3f8:	ncalli	DayZPlayer.GetDirection()
000063:0x0027d400:	scalev	@v03, #return, _f3.000000
000063:0x0027d410:	movev	@v02, @v03
000063:0x0027d420:	addv	@v02, #return, @v02
000063:0x0027d430:	movev	@v01, @v02
000063:0x0027d440:	ncalli	DayZPlayer.GetDirectionAside()
000063:0x0027d448:	scalev	@v03, #return, _f3.000000
000063:0x0027d458:	movev	@v02, @v03
000063:0x0027d468:	addv	@v01, @v01, @v02
000063:0x0027d478:	movev	@v00, @v01
000063:0x0027d488:	call	CreateParticle(EXPLOSION_LANDMINE, @v00, true, _c0, _v<0.000000,0.000000,0.000000>, _i0, _c0)
000063:0x0027d4b0:	movem	p, #return
000063:0x0027d4c0:	release	#return
000064:0x0027d4c8:	call	
000064:0x0027d4d8:	movefm	@c00, #return
000064:0x0027d4e8:	movefm	@c01, Event_OnParticleEnd
000064:0x0027d4f8:	icall	SetInstance([0xb5d7b3a8], this)
000064:0x0027d508:	icall	
000064:0x0027d518:	release	#return
000066:0x0027d520:	movefm	@c00, p
000066:0x0027d530:	movefm	[0xb5b339b0], m_ParticleSources
000066:0x0027d540:	icall	
000066:0x0027d550:	move	m_OnePlayingSAADPSID, #return
000068:0x0027d560:	call	
000070:0x0027d570:	call	
000070:0x0027d580:	call	
000070:0x0027d590:	movem	#return, #return
000070:0x0027d5a0:	release	player
000070:0x0027d5a8:	release	p
000070:0x0027d5b0:	release	#return
000070:0x0027d5b8:	rts
000070:0x0027d5c0:	release	player
000070:0x0027d5c8:	release	p
000070:0x0027d5d0:	rts
PMTPlayback::TestOnePlayingStandAlone()
000077:0x0027d6c8:	ncall	GetGame()
000077:0x0027d6d0:	ncalli	CGame.GetPlayer()
000077:0x0027d6d8:	movetm	player, #return
000079:0x0027d6e8:	ncalli	DayZPlayer.GetPosition()
000079:0x0027d6f0:	ncalli	DayZPlayer.GetDirection()
000079:0x0027d6f8:	scalev	@v03, #return, _f3.000000
000079:0x0027d708:	movev	@v02, @v03
000079:0x0027d718:	addv	@v02, #return, @v02
000079:0x0027d728:	movev	@v01, @v02
000079:0x0027d738:	ncalli	DayZPlayer.GetDirectionAside()
000079:0x0027d740:	scalev	@v03, #return, _f3.000000
000079:0x0027d750:	movev	@v02, @v03
000079:0x0027d760:	subv	@v01, @v01, @v02
000079:0x0027d770:	movev	@v00, @v01
000079:0x0027d780:	call	CreateParticle(EXPLOSION_LANDMINE, @v00, true, _c0, _v<0.000000,0.000000,0.000000>, _i0, _c0)
000079:0x0027d7a8:	movem	p, #return
000079:0x0027d7b8:	release	#return
000080:0x0027d7c0:	call	
000080:0x0027d7d0:	movefm	@c00, #return
000080:0x0027d7e0:	movefm	@c01, Event_OnParticleEnd
000080:0x0027d7f0:	icall	SetInstance([0xb5d7b6a0], this)
000080:0x0027d800:	icall	
000080:0x0027d810:	release	#return
000081:0x0027d818:	call	
000083:0x0027d828:	movefm	@c00, p
000083:0x0027d838:	movefm	[0xb5b339b0], m_ParticleSources
000083:0x0027d848:	icall	
000083:0x0027d858:	move	m_OnePlayingSAPSID, #return
000085:0x0027d868:	call	
000087:0x0027d878:	call	
000087:0x0027d888:	call	
000087:0x0027d898:	movem	#return, #return
000087:0x0027d8a8:	release	player
000087:0x0027d8b0:	release	p
000087:0x0027d8b8:	release	#return
000087:0x0027d8c0:	rts
000087:0x0027d8c8:	release	player
000087:0x0027d8d0:	release	p
000087:0x0027d8d8:	rts
PMTPlayback::TestWiggleStress()
000094:0x0027d968:	ncall	GetGame()
000094:0x0027d970:	ncalli	CGame.GetPlayer()
000094:0x0027d978:	movetm	player, #return
000096:0x0027d988:	ncalli	DayZPlayer.GetPosition()
000096:0x0027d990:	ncalli	DayZPlayer.GetDirection()
000096:0x0027d998:	scalev	@v02, #return, _f4.000000
000096:0x0027d9a8:	movev	@v01, @v02
000096:0x0027d9b8:	addv	@v01, #return, @v01
000096:0x0027d9c8:	movev	@v00, @v01
000096:0x0027d9d8:	call	CreateParticle(ROADFLARE_BURNING_MAIN, @v00, true, _c0, _v<0.000000,0.000000,0.000000>, _i0, _c0)
000096:0x0027da00:	movem	p, #return
000096:0x0027da10:	release	#return
000097:0x0027da18:	call	
000099:0x0027da30:	call	
000099:0x0027da40:	call	
000099:0x0027da50:	movem	#return, #return
000099:0x0027da60:	release	player
000099:0x0027da68:	release	p
000099:0x0027da70:	release	#return
000099:0x0027da78:	rts
000099:0x0027da80:	release	player
000099:0x0027da88:	release	p
000099:0x0027da90:	rts
PMTPlayback::TestStopping()
000106:0x0027db88:	ncall	GetGame()
000106:0x0027db90:	ncalli	CGame.GetPlayer()
000106:0x0027db98:	movetm	player, #return
000109:0x0027dba8:	call	CreateParticle(EXPLOSION_LANDMINE, Zero, true, player, _v<0.000000,0.000000,0.000000>, _i0, _c0)
000109:0x0027dbd0:	movem	p, #return
000109:0x0027dbe0:	release	#return
000110:0x0027dbe8:	call	
000110:0x0027dbf8:	movefm	@c00, #return
000110:0x0027dc08:	movefm	@c01, Event_OnParticleEnd
000110:0x0027dc18:	icall	SetInstance([0xb5d7bb60], this)
000110:0x0027dc28:	icall	
000110:0x0027dc38:	release	#return
000111:0x0027dc40:	call	
000113:0x0027dc50:	movefm	@c00, p
000113:0x0027dc60:	movefm	[0xb5b339b0], m_ParticleSources
000113:0x0027dc70:	icall	
000113:0x0027dc80:	move	m_StopPSID, #return
000115:0x0027dc90:	call	
000117:0x0027dca0:	call	
000117:0x0027dcb0:	call	
000117:0x0027dcc0:	movem	#return, #return
000117:0x0027dcd0:	release	player
000117:0x0027dcd8:	release	p
000117:0x0027dce0:	release	#return
000117:0x0027dce8:	rts
000117:0x0027dcf0:	release	player
000117:0x0027dcf8:	release	p
000117:0x0027dd00:	rts
PMTPlayback::CheckOnePlaying()
000126:0x0027dd58:	move	id, m_OnePlayingManagerID
000126:0x0027dd68:	call	
000126:0x0027dd80:	movem	pm, pm
000126:0x0027dd90:	release	pm
000126:0x0027dd98:	cmpi	#return, _i0
000126:0x0027dda8:	beq	0x27df08
000128:0x0027ddb0:	cmpcm	pm, null
000128:0x0027ddc0:	beq	0x27deb8
000130:0x0027ddc8:	ncalli	ParticleManager.GetParticle(_i0)
000130:0x0027ddd8:	movetm	p, #return
000131:0x0027dde8:	call	
000131:0x0027ddf8:	cmpi	#return, _i0
000131:0x0027de08:	beq	0x27de58
000133:0x0027de10:	call	
000133:0x0027de20:	movem	#return, #return
000133:0x0027de30:	release	p
000133:0x0027de38:	release	pm
000133:0x0027de40:	release	#return
000133:0x0027de48:	rts
000133:0x0027de50:	jump	0x27dea8
000137:0x0027de58:	move	result, m_bOnePlayingTestSuccess
000137:0x0027de68:	call	
000137:0x0027de78:	movem	#return, #return
000137:0x0027de88:	release	p
000137:0x0027de90:	release	pm
000137:0x0027de98:	release	#return
000137:0x0027dea0:	rts
000137:0x0027dea8:	release	p
000137:0x0027deb0:	jump	0x27df00
000142:0x0027deb8:	call	
000142:0x0027dec8:	call	
000142:0x0027ded8:	movem	#return, #return
000142:0x0027dee8:	release	pm
000142:0x0027def0:	release	#return
000142:0x0027def8:	rts
000142:0x0027df00:	jump	0x27df50
000147:0x0027df08:	call	
000147:0x0027df18:	call	
000147:0x0027df28:	movem	#return, #return
000147:0x0027df38:	release	pm
000147:0x0027df40:	release	#return
000147:0x0027df48:	rts
000147:0x0027df50:	release	pm
000147:0x0027df58:	rts
PMTPlayback::CheckOnePlayingSAAD()
000154:0x0027df88:	move	index, m_OnePlayingSAADPSID
000154:0x0027df98:	movefm	[0xb5b339b0], m_ParticleSources
000154:0x0027dfa8:	call	
000154:0x0027dfb8:	cmpi	#return, _i0
000154:0x0027dfc8:	beq	0x27e180
000156:0x0027dfd0:	movefm	[0xb5b339b0], m_ParticleSources
000156:0x0027dfe0:	icall	
000156:0x0027dff0:	movetm	p, #return
000157:0x0027e000:	cmpcm	p, null
000157:0x0027e010:	beq	0x27e128
000159:0x0027e018:	call	
000159:0x0027e028:	cmpi	#return, _i0
000159:0x0027e038:	beq	0x27e080
000161:0x0027e040:	call	
000161:0x0027e050:	movem	#return, #return
000161:0x0027e060:	release	p
000161:0x0027e068:	release	#return
000161:0x0027e070:	rts
000161:0x0027e078:	jump	0x27e120
000165:0x0027e080:	cmpi	m_bOnePlayingSAADEnded, _i0
000165:0x0027e090:	beq	0x27e0d8
000168:0x0027e098:	call	
000168:0x0027e0a8:	movem	#return, #return
000168:0x0027e0b8:	release	p
000168:0x0027e0c0:	release	#return
000168:0x0027e0c8:	rts
000168:0x0027e0d0:	jump	0x27e120
000173:0x0027e0d8:	call	
000173:0x0027e0e8:	call	
000173:0x0027e0f8:	movem	#return, #return
000173:0x0027e108:	release	p
000173:0x0027e110:	release	#return
000173:0x0027e118:	rts
000173:0x0027e120:	jump	0x27e170
000180:0x0027e128:	move	result, m_bOnePlayingSAADEnded
000180:0x0027e138:	call	
000180:0x0027e148:	movem	#return, #return
000180:0x0027e158:	release	p
000180:0x0027e160:	release	#return
000180:0x0027e168:	rts
000180:0x0027e170:	release	p
000180:0x0027e178:	jump	0x27e1c0
000185:0x0027e180:	call	
000185:0x0027e190:	call	
000185:0x0027e1a0:	movem	#return, #return
000185:0x0027e1b0:	release	#return
000185:0x0027e1b8:	rts
000185:0x0027e1c0:	rts
PMTPlayback::CheckOnePlayingSA()
000192:0x0027e1f0:	move	index, m_OnePlayingSAPSID
000192:0x0027e200:	movefm	[0xb5b339b0], m_ParticleSources
000192:0x0027e210:	call	
000192:0x0027e220:	cmpi	#return, _i0
000192:0x0027e230:	beq	0x27e3b8
000194:0x0027e238:	movefm	[0xb5b339b0], m_ParticleSources
000194:0x0027e248:	icall	
000194:0x0027e258:	movetm	p, #return
000195:0x0027e268:	cmpcm	p, null
000195:0x0027e278:	beq	0x27e360
000197:0x0027e280:	call	
000197:0x0027e290:	cmpi	#return, _i0
000197:0x0027e2a0:	beq	0x27e2e8
000199:0x0027e2a8:	call	
000199:0x0027e2b8:	movem	#return, #return
000199:0x0027e2c8:	release	p
000199:0x0027e2d0:	release	#return
000199:0x0027e2d8:	rts
000199:0x0027e2e0:	jump	0x27e358
000204:0x0027e2e8:	ncall	GetGame()
000204:0x0027e2f0:	movefm	[0xb5bdac60], p
000204:0x0027e300:	ncalli	CGame.ObjectDelete([0xb5bdac60])
000206:0x0027e310:	move	result, m_bOnePlayingSAEnded
000206:0x0027e320:	call	
000206:0x0027e330:	movem	#return, #return
000206:0x0027e340:	release	p
000206:0x0027e348:	release	#return
000206:0x0027e350:	rts
000206:0x0027e358:	jump	0x27e3a8
000212:0x0027e360:	call	
000212:0x0027e370:	call	
000212:0x0027e380:	movem	#return, #return
000212:0x0027e390:	release	p
000212:0x0027e398:	release	#return
000212:0x0027e3a0:	rts
000212:0x0027e3a8:	release	p
000212:0x0027e3b0:	jump	0x27e3f8
000217:0x0027e3b8:	call	
000217:0x0027e3c8:	call	
000217:0x0027e3d8:	movem	#return, #return
000217:0x0027e3e8:	release	#return
000217:0x0027e3f0:	rts
000217:0x0027e3f8:	rts
PMTPlayback::CheckStop()
000224:0x0027e428:	move	@f00, dt
000224:0x0027e438:	addf	m_StopAccumulatedTime, m_StopAccumulatedTime, @f00
000226:0x0027e448:	move	index, m_StopPSID
000226:0x0027e458:	movefm	[0xb5b339b0], m_ParticleSources
000226:0x0027e468:	call	
000226:0x0027e478:	cmpi	#return, _i0
000226:0x0027e488:	beq	0x27e780
000228:0x0027e490:	movefm	[0xb5b339b0], m_ParticleSources
000228:0x0027e4a0:	icall	
000228:0x0027e4b0:	movetm	p, #return
000229:0x0027e4c0:	cmpcm	p, null
000229:0x0027e4d0:	beq	0x27e728
000231:0x0027e4d8:	call	
000231:0x0027e4e8:	cmpi	#return, _i0
000231:0x0027e4f8:	beq	0x27e5a0
000233:0x0027e500:	cmpi	m_bStopWasStopped, _i0
000233:0x0027e510:	bne	0x27e560
000233:0x0027e518:	cmpf	m_StopAccumulatedTime, STOP_ACCUMULATED_TIME_STOP_CUTOFF
000233:0x0027e528:	ble	0x27e560
000235:0x0027e530:	call	
000236:0x0027e540:	imove	m_StopAccumulatedTime, 0.00000
000237:0x0027e550:	imove	m_bStopWasStopped, 0x000001
000240:0x0027e560:	call	
000240:0x0027e570:	movem	#return, #return
000240:0x0027e580:	release	p
000240:0x0027e588:	release	#return
000240:0x0027e590:	rts
000240:0x0027e598:	jump	0x27e720
000246:0x0027e5a0:	move	condition, m_bStopWasStopped
000246:0x0027e5b0:	call	
000246:0x0027e5c0:	cmpi	#return, _i0
000246:0x0027e5d0:	bne	0x27e618
000248:0x0027e5d8:	call	
000248:0x0027e5e8:	movem	#return, #return
000248:0x0027e5f8:	release	p
000248:0x0027e600:	release	#return
000248:0x0027e608:	rts
000248:0x0027e610:	jump	0x27e6e8
000250:0x0027e618:	cmpi	m_bStopWasResumed, _i0
000250:0x0027e628:	bne	0x27e670
000250:0x0027e630:	cmpf	m_StopAccumulatedTime, STOP_ACCUMULATED_TIME_PLAY_CUTOFF
000250:0x0027e640:	ble	0x27e670
000252:0x0027e648:	call	
000253:0x0027e658:	imove	m_bStopWasResumed, 0x000001
000253:0x0027e668:	jump	0x27e6e8
000255:0x0027e670:	cmpi	m_bStopEnded, _i0
000255:0x0027e680:	beq	0x27e6e8
000258:0x0027e688:	ncall	GetGame()
000258:0x0027e690:	movefm	[0xb5bdac60], p
000258:0x0027e6a0:	ncalli	CGame.ObjectDelete([0xb5bdac60])
000259:0x0027e6b0:	call	
000259:0x0027e6c0:	movem	#return, #return
000259:0x0027e6d0:	release	p
000259:0x0027e6d8:	release	#return
000259:0x0027e6e0:	rts
000262:0x0027e6e8:	call	
000262:0x0027e6f8:	movem	#return, #return
000262:0x0027e708:	release	p
000262:0x0027e710:	release	#return
000262:0x0027e718:	rts
000262:0x0027e720:	jump	0x27e770
000268:0x0027e728:	call	
000268:0x0027e738:	call	
000268:0x0027e748:	movem	#return, #return
000268:0x0027e758:	release	p
000268:0x0027e760:	release	#return
000268:0x0027e768:	rts
000268:0x0027e770:	release	p
000268:0x0027e778:	jump	0x27e7c0
000273:0x0027e780:	call	
000273:0x0027e790:	call	
000273:0x0027e7a0:	movem	#return, #return
000273:0x0027e7b0:	release	#return
000273:0x0027e7b8:	rts
000273:0x0027e7c0:	rts
PMTPlayback::PassOnePlaying()
000282:0x0027e7c8:	imove	m_bOnePlayingTestSuccess, 0x000001
000282:0x0027e7d8:	rts
PMTPlayback::OnePlayingSAADEnded()
000290:0x0027e7e0:	imove	m_bOnePlayingSAADEnded, 0x000001
000290:0x0027e7f0:	rts
PMTPlayback::OnePlayingSAEnded()
000296:0x0027e7f8:	imove	m_bOnePlayingSAEnded, 0x000001
000296:0x0027e808:	rts
PMTPlayback::StopEnded()
000302:0x0027e810:	imove	m_bStopEnded, 0x000001
000302:0x0027e820:	rts
ItemsCounter::OnWidgetScriptInit()
//scripts/3_Game/gui\spacers\itemscounter.c
000008:0x0027e850:	ncalli	Widget.GetChildren()
000008:0x0027e858:	movetm	child, #return
000010:0x0027e868:	cmpcm	child, null
000010:0x0027e878:	beq	0x27e8b8
000012:0x0027e880:	ncalli	Widget.GetSibling()
000012:0x0027e888:	movetm	child, #return
000013:0x0027e898:	move	@m00, NumberOfItems
000013:0x0027e8a8:	inc	NumberOfItems
000013:0x0027e8b0:	jump	0x27e868
000013:0x0027e8b8:	release	child
000013:0x0027e8c0:	rts
Car::GetSpeedometerAbsolute()
//scripts/3_Game/vehicles\car.c
000090:0x0027e8c8:	ncalli	Car.GetSpeedometer()
000090:0x0027e8d0:	icall	AbsFloat(#return)
000090:0x0027e8e0:	move	#return, #return
000090:0x0027e8f0:	rts
000090:0x0027e8f8:	rts
Car::IsAreaAtDoorFree#59351()
000099:0x0027e9e0:	itv	extents[0x000000], horizontalExtents
000100:0x0027e9f0:	itv	extents[0x000001], playerHeight
000101:0x0027ea00:	itv	extents[0x000002], horizontalExtents
000103:0x0027ea10:	call	
000103:0x0027ea20:	move	speed, #return
000104:0x0027ea30:	cmpf	speed, _f8.000000
000104:0x0027ea40:	ble	0x27ea78
000105:0x0027ea48:	ifv	@f00, extents[0x000002]
000105:0x0027ea58:	mulf	@f00, @f00, _f6.000000
000105:0x0027ea68:	itv	extents[0x000002], @f00
000106:0x0027ea78:	cmpf	speed, _f8.000000
000106:0x0027ea88:	ble	0x27eaa0
000107:0x0027ea90:	itv	extents[0x000000], _f2.000000
000109:0x0027eaa0:	call	
000109:0x0027eac0:	movev	extents, extents
000109:0x0027ead0:	move	#return, #return
000109:0x0027eae0:	rts
000109:0x0027eae8:	rts
Car::DebugFreeAreaAtDoor()
000114:0x0027ebf8:	call	ARGB(_i20, _i0, _i255, _i0)
000114:0x0027ec18:	move	color, #return
000120:0x0027ec28:	itv	extents[0x000000], horizontalExtents
000121:0x0027ec38:	itv	extents[0x000001], playerHeight
000122:0x0027ec48:	itv	extents[0x000002], horizontalExtents
000124:0x0027ec58:	call	
000124:0x0027ec68:	move	speed, #return
000125:0x0027ec78:	cmpf	speed, _f8.000000
000125:0x0027ec88:	ble	0x27ecc0
000126:0x0027ec90:	ifv	@f00, extents[0x000002]
000126:0x0027eca0:	mulf	@f00, @f00, _f6.000000
000126:0x0027ecb0:	itv	extents[0x000002], @f00
000127:0x0027ecc0:	cmpf	speed, _f8.000000
000127:0x0027ecd0:	ble	0x27ece8
000128:0x0027ecd8:	itv	extents[0x000000], _f2.000000
000130:0x0027ece8:	call	
000130:0x0027ed08:	movev	extents, extents
000130:0x0027ed18:	cmpi	#return, _i0
000130:0x0027ed28:	bne	0x27ed60
000132:0x0027ed30:	call	ARGB(_i20, _i255, _i0, _i0)
000132:0x0027ed50:	move	color, #return
000135:0x0027ed60:	subv	@v02, _v<0.000000,0.000000,0.000000>, extents
000135:0x0027ed70:	scalev	@v01, @v02, _f0.500000
000135:0x0027ed80:	movev	@v00, @v01
000135:0x0027ed90:	scalev	@v02, extents, _f0.500000
000135:0x0027eda0:	movev	@v01, @v02
000135:0x0027edb0:	call	DrawBox(@v00, @v01, color)
000135:0x0027edc8:	movec	shape, #return
000136:0x0027edd8:	ncalli	Shape.SetMatrix(transform)
000137:0x0027ede8:	movec	#return, shape
000137:0x0027edf8:	rts
000137:0x0027ee00:	rts
Car::GetHideIconMask()
000142:0x0027ee08:	imove	#return, 0x000001
000142:0x0027ee18:	rts
000142:0x0027ee20:	rts
Car::OnBeforeEngineStart()
000284:0x0027ee28:	imove	#return, 0x000001
000284:0x0027ee38:	rts
000284:0x0027ee40:	rts
Car::OnSound()
000367:0x0027ee48:	move	#return, oldValue
000367:0x0027ee58:	rts
000367:0x0027ee60:	rts
DayZPlayerCamera::DayZPlayerCamera()
//scripts/3_Game/dayzplayer.c
000058:0x0027ee68:	movem	m_pPlayer, pPlayer
000059:0x0027ee78:	movec	m_pInput, pInput
000059:0x0027ee88:	rts
DayZPlayerCamera::CanFreeLook()
000065:0x0027ee90:	imove	#return, 0x000001
000065:0x0027eea0:	rts
000065:0x0027eea8:	rts
DayZPlayerCamera::OnUpdate()
000074:0x0027eeb0:	movec	pOutResult, pOutResult
000074:0x0027eec0:	rts
DayZPlayerCamera::GetBaseAngles()
000084:0x0027ef00:	movev	#return, _v<0.000000,0.000000,0.000000>
000084:0x0027ef10:	rts
000084:0x0027ef18:	rts
DayZPlayerCamera::GetAdditiveAngles()
000089:0x0027ef58:	movev	#return, _v<0.000000,0.000000,0.000000>
000089:0x0027ef68:	rts
000089:0x0027ef70:	rts
DayZPlayerCamera::GetCameraName()
000094:0x0027efa0:	moves	#return, _s'DayZPlayerCamera'
000094:0x0027efb0:	rts
000094:0x0027efb8:	rts
DayZPlayerCamera::GetCurrentYaw()
000099:0x0027efc0:	imove	#return, -1.00000
000099:0x0027efd0:	rts
000099:0x0027efd8:	rts
DayZPlayerCamera::GetCurrentPitch()
000104:0x0027efe0:	imove	#return, -1.00000
000104:0x0027eff0:	rts
000104:0x0027eff8:	rts
DayZPlayerCamera::GetCurrentRoll()
000109:0x0027f000:	imove	#return, -1.00000
000109:0x0027f010:	rts
000109:0x0027f018:	rts
DayZPlayerCamera::GetCurrentOrientation()
000114:0x0027f020:	call	
000114:0x0027f030:	call	
000114:0x0027f040:	call	
000114:0x0027f050:	ncall	Vector(#return, #return, #return)
000114:0x0027f068:	movev	#return, #return
000114:0x0027f078:	rts
000114:0x0027f080:	rts
DayZPlayerCamera::IsCamera3rdRaised()
000119:0x0027f088:	imove	#return, 0x000000
000119:0x0027f098:	rts
000119:0x0027f0a0:	rts
DayZPlayerCamera::SpawnDiagCameraShake()
000124:0x0027f0d0:	call	
000124:0x0027f0f0:	rts
DayZPlayerCamera::SpawnCameraShake()
000129:0x0027f0f8:	call	
000129:0x0027f118:	rts
DayZPlayerTypeStepSoundLookupTable::GetSoundBuilder()
000150:0x0027f120:	movetm	#return, null
000150:0x0027f130:	rts
000150:0x0027f138:	rts
DayZPlayerTypeVoiceSoundLookupTable::GetSoundBuilder()
000161:0x0027f140:	movetm	#return, null
000161:0x0027f150:	rts
000161:0x0027f158:	rts
DayZPlayerTypeAttachmentSoundLookupTable::GetSoundBuilder()
000174:0x0027f160:	movetm	#return, null
000174:0x0027f170:	rts
000174:0x0027f178:	rts
DayZPlayerTypeAnimTable::GetSoundEvent()
000182:0x0027f180:	movetm	#return, null
000182:0x0027f190:	rts
000182:0x0027f198:	rts
VegetationSound::VegetationSound()
000197:0x0027f1a0:	movem	m_SoundObjectBuilder, soundObjectBuilder
000198:0x0027f1b0:	movem	m_AnimEventIds, animEventIds
000198:0x0027f1c0:	rts
VegetationSound::GetSoundObjectBuilder()
000203:0x0027f1c8:	movem	#return, m_SoundObjectBuilder
000203:0x0027f1d8:	rts
000203:0x0027f1e0:	rts
VegetationSound::GetAnimEventIds()
000208:0x0027f1e8:	movem	#return, m_AnimEventIds
000208:0x0027f1f8:	rts
000208:0x0027f200:	rts
DayZPlayerType::RegisterStepSoundLookupTable()
000311:0x0027f208:	movem	m_pStepSoundLookupTable, pSSLUT
000311:0x0027f218:	rts
DayZPlayerType::GetStepSoundLookupTable()
000316:0x0027f220:	movem	#return, m_pStepSoundLookupTable
000316:0x0027f230:	rts
000316:0x0027f238:	rts
DayZPlayerType::RegisterAttachmentSoundLookupTable()
000321:0x0027f240:	movem	m_pAttachmentSoundLookupTable, pASLUT
000321:0x0027f250:	rts
DayZPlayerType::GetAttachmentSoundLookupTable()
000326:0x0027f258:	movem	#return, m_pAttachmentSoundLookupTable
000326:0x0027f268:	rts
000326:0x0027f270:	rts
DayZPlayerType::RegisterVoiceSoundLookupTable()
000331:0x0027f278:	movem	m_pVoiceSoundLookupTable, pASLUT
000331:0x0027f288:	rts
DayZPlayerType::GetVoiceSoundLookupTable()
000336:0x0027f290:	movem	#return, m_pVoiceSoundLookupTable
000336:0x0027f2a0:	rts
000336:0x0027f2a8:	rts
DayZPlayerType::RegisterSoundTable()
000341:0x0027f2b0:	movem	m_pSoundTable, pST
000341:0x0027f2c0:	rts
DayZPlayerType::GetSoundTable()
000346:0x0027f2c8:	movem	#return, m_pSoundTable
000346:0x0027f2d8:	rts
000346:0x0027f2e0:	rts
DayZPlayerType::GetVegetationSounds()
000363:0x0027f2e8:	movem	#return, m_pVegetationSounds
000363:0x0027f2f8:	rts
000363:0x0027f300:	rts
DayZPlayerType::GetNoiseParamsStand()
000368:0x0027f308:	movem	#return, m_pNoiseStepStand
000368:0x0027f318:	rts
000368:0x0027f320:	rts
DayZPlayerType::GetNoiseParamsCrouch()
000373:0x0027f328:	movem	#return, m_pNoiseStepCrouch
000373:0x0027f338:	rts
000373:0x0027f340:	rts
DayZPlayerType::GetNoiseParamsProne()
000378:0x0027f348:	movem	#return, m_pNoiseStepProne
000378:0x0027f358:	rts
000378:0x0027f360:	rts
DayZPlayerType::GetNoiseParamsLandLight()
000383:0x0027f368:	movem	#return, m_pNoiseLandLight
000383:0x0027f378:	rts
000383:0x0027f380:	rts
DayZPlayerType::GetNoiseParamsLandHeavy()
000388:0x0027f388:	movem	#return, m_pNoiseLandHeavy
000388:0x0027f398:	rts
000388:0x0027f3a0:	rts
DayZPlayerType::GetNoiseParamsWhisper()
000393:0x0027f3a8:	movem	#return, m_pNoiseWhisper
000393:0x0027f3b8:	rts
000393:0x0027f3c0:	rts
DayZPlayerType::GetNoiseParamsTalk()
000398:0x0027f3c8:	movem	#return, m_pNoiseTalk
000398:0x0027f3d8:	rts
000398:0x0027f3e0:	rts
DayZPlayerType::GetNoiseParamsShout()
000403:0x0027f3e8:	movem	#return, m_pNoiseShout
000403:0x0027f3f8:	rts
000403:0x0027f400:	rts
DayZPlayerType::LoadSoundWeaponEvent()
000408:0x0027f520:	moves	cfgPath, _s'CfgVehicles SurvivorBase AnimEvents SoundWeapon '
000410:0x0027f530:	new	m_animSoundEventsAttack, array<@AnimSoundEvent>
000412:0x0027f550:	ncall	GetGame()
000412:0x0027f558:	ncalli	CGame.ConfigGetChildrenCount(cfgPath)
000412:0x0027f568:	move	soundCount, #return
000413:0x0027f578:	imove	i, 0x000000
000413:0x0027f588:	jump	0x27f5a8
000413:0x0027f590:	move	@m00, i
000413:0x0027f5a0:	inc	i
000413:0x0027f5a8:	cmpi	i, soundCount
000413:0x0027f5b8:	bge	0x27f6a0
000416:0x0027f5c0:	ncall	GetGame()
000416:0x0027f5c8:	icall	
000417:0x0027f5e0:	adds	@s01, cfgPath, soundName
000417:0x0027f5f0:	moves	@s00, @s01
000417:0x0027f600:	adds	soundPath, @s00, _s' '
000418:0x0027f610:	new	soundEvent, AnimSoundEvent
000419:0x0027f638:	call	
000419:0x0027f648:	cmpi	#return, _i0
000419:0x0027f658:	beq	0x27f690
000420:0x0027f660:	movefm	@c00, soundEvent
000420:0x0027f670:	movefm	[0xb5b8df98], m_animSoundEventsAttack
000420:0x0027f680:	icall	
000420:0x0027f690:	release	soundEvent
000420:0x0027f698:	jump	0x27f590
000420:0x0027f6a0:	rts
DayZPlayerType::LoadVegetationSounds()
000426:0x0027f8d8:	new	m_pVegetationSounds, array<@VegetationSound>
000428:0x0027f8f8:	moves	vegSoundsCfgPath, _s'CfgVehicles SurvivorBase VegetationSounds '
000429:0x0027f908:	ncall	GetGame()
000429:0x0027f910:	ncalli	CGame.ConfigGetChildrenCount(vegSoundsCfgPath)
000429:0x0027f920:	move	vegSoundsCount, #return
000431:0x0027f930:	imove	v, 0x000000
000431:0x0027f940:	jump	0x27f950
000431:0x0027f948:	inc	v
000431:0x0027f950:	cmpi	v, vegSoundsCount
000431:0x0027f960:	bge	0x27fba8
000434:0x0027f968:	ncall	GetGame()
000434:0x0027f970:	icall	
000436:0x0027f988:	moves	soundSet, _s''
000437:0x0027f998:	ncall	GetGame()
000437:0x0027f9a0:	adds	@s02, vegSoundsCfgPath, vegSoundParamName
000437:0x0027f9b0:	moves	@s01, @s02
000437:0x0027f9c0:	adds	@s01, @s01, _s' soundSet'
000437:0x0027f9d0:	moves	@s00, @s01
000437:0x0027f9e0:	icall	
000439:0x0027f9f0:	new	animEventIds, array<int>
000440:0x0027fa10:	ncall	GetGame()
000440:0x0027fa18:	adds	@s02, vegSoundsCfgPath, vegSoundParamName
000440:0x0027fa28:	moves	@s01, @s02
000440:0x0027fa38:	adds	@s01, @s01, _s' animEventIds'
000440:0x0027fa48:	moves	@s00, @s01
000440:0x0027fa58:	movefm	[0xb5bda278], animEventIds
000440:0x0027fa68:	ncalli	CGame.ConfigGetIntArray(@s00, [0xb5bda278])
000442:0x0027fa78:	new	soundParams, SoundParams
000444:0x0027faa0:	ncalli	SoundParams.IsValid()
000444:0x0027faa8:	cmpi	#return, _i0
000444:0x0027fab8:	beq	0x27fb90
000444:0x0027fac0:	ncalli	array<int>.Count()
000444:0x0027fac8:	move	@m00, #return
000444:0x0027fad8:	cmpi	@m00, _i0
000444:0x0027fae8:	ble	0x27fb90
000446:0x0027faf0:	new	@c00, SoundObjectBuilder
000446:0x0027fb18:	pushc	@c00
000446:0x0027fb20:	new	@c01, VegetationSound
000446:0x0027fb48:	pushc	@c01
000446:0x0027fb50:	movefm	[0xb5c0f9c0], m_pVegetationSounds
000446:0x0027fb60:	icall	
000446:0x0027fb70:	popc	@c00
000446:0x0027fb78:	release	@c00
000446:0x0027fb80:	popc	@c01
000446:0x0027fb88:	release	@c01
000446:0x0027fb90:	release	animEventIds
000446:0x0027fb98:	release	soundParams
000446:0x0027fba0:	jump	0x27f948
000446:0x0027fba8:	rts
DayZPlayerType::GetSoundWeaponEvent()
000453:0x0027fc50:	movem	#array, m_animSoundEventsAttack
000453:0x0027fc60:	ncalli	array<@AnimSoundEvent>.Count()
000453:0x0027fc68:	move	#cnt, #return
000453:0x0027fc78:	imove	#key, 0x000000
000453:0x0027fc88:	jump	0x27fc98
000453:0x0027fc90:	inc	#key
000453:0x0027fc98:	cmpi	#key, #cnt
000453:0x0027fca8:	bge	0x27fd28
000453:0x0027fcb0:	icall	
000453:0x0027fcc0:	movetm	soundEvent, #return
000455:0x0027fcd0:	movefm	@c00, soundEvent
000455:0x0027fce0:	cmpi	m_iID, event_id
000455:0x0027fcf0:	bne	0x27fd20
000456:0x0027fcf8:	movem	#return, soundEvent
000456:0x0027fd08:	release	#array
000456:0x0027fd10:	release	soundEvent
000456:0x0027fd18:	rts
000456:0x0027fd20:	jump	0x27fc90
000456:0x0027fd28:	release	#array
000456:0x0027fd30:	release	soundEvent
000459:0x0027fd38:	movetm	#return, null
000459:0x0027fd48:	rts
000459:0x0027fd50:	rts
DayZPlayerType::RegisterHitComponentsForAI()
000465:0x0027fe98:	new	m_HitComponentsForAI, array<@DayZAIHitComponent>
000468:0x0027feb8:	moves	m_DefaultHitComponent, _s'dmgZone_torso'
000470:0x0027fec8:	moves	m_DefaultHitPositionComponent, _s'Pelvis'
000473:0x0027fed8:	new	m_SuitableFinisherHitComponents, array<string>
000474:0x0027fef8:	movefm	[0xd31562c0], m_SuitableFinisherHitComponents
000474:0x0027ff08:	icall	
000478:0x0027ff18:	movem	pHitComponents, m_HitComponentsForAI
000478:0x0027ff28:	call	RegisterHitComponent(pHitComponents, _s'dmgZone_leftArm', _f50.000000)
000479:0x0027ff40:	movem	pHitComponents, m_HitComponentsForAI
000479:0x0027ff50:	call	RegisterHitComponent(pHitComponents, _s'dmgZone_torso', _f65.000000)
000480:0x0027ff68:	movem	pHitComponents, m_HitComponentsForAI
000480:0x0027ff78:	call	RegisterHitComponent(pHitComponents, _s'dmgZone_rightArm', _f50.000000)
000481:0x0027ff90:	movem	pHitComponents, m_HitComponentsForAI
000481:0x0027ffa0:	call	RegisterHitComponent(pHitComponents, _s'dmgZone_leftLeg', _f40.000000)
000482:0x0027ffb8:	movem	pHitComponents, m_HitComponentsForAI
000482:0x0027ffc8:	call	RegisterHitComponent(pHitComponents, _s'dmgZone_rightLeg', _f40.000000)
000482:0x0027ffe0:	rts
DayZPlayerType::GetHitComponentForAI()
000489:0x00280010:	movem	pHitComponents, m_HitComponentsForAI
000489:0x00280020:	call	SelectMostProbableHitComponent(pHitComponents, hitComp)
000489:0x00280038:	moves	hitComp, pHitComponent
000489:0x00280048:	cmpi	#return, _i0
000489:0x00280058:	beq	0x280078
000491:0x00280060:	moves	#return, hitComp
000491:0x00280070:	rts
000494:0x00280078:	call	
000494:0x00280088:	moves	#return, #return
000494:0x00280098:	rts
000494:0x002800a0:	rts
DayZPlayerType::GetDefaultHitComponent()
000499:0x002800a8:	moves	#return, m_DefaultHitComponent
000499:0x002800b8:	rts
000499:0x002800c0:	rts
DayZPlayerType::GetDefaultHitPositionComponent()
000504:0x002800c8:	moves	#return, m_DefaultHitPositionComponent
000504:0x002800d8:	rts
000504:0x002800e0:	rts
DayZPlayerType::GetSuitableFinisherHitComponents()
000509:0x002800e8:	movem	#return, m_SuitableFinisherHitComponents
000509:0x002800f8:	rts
000509:0x00280100:	rts
DayZPlayerType::DayZPlayerType()
000514:0x00280298:	moves	cfgPath, _s'CfgVehicles SurvivorBase '
000516:0x002802a8:	new	m_pNoiseStepStand, NoiseParams
000517:0x002802c8:	adds	@s01, cfgPath, _s'NoiseStepStand'
000517:0x002802d8:	moves	@s00, @s01
000517:0x002802e8:	movefm	[0xb5b222e8], m_pNoiseStepStand
000517:0x002802f8:	ncalli	NoiseParams.LoadFromPath(@s00)
000519:0x00280308:	new	m_pNoiseStepCrouch, NoiseParams
000520:0x00280328:	adds	@s01, cfgPath, _s'NoiseStepCrouch'
000520:0x00280338:	moves	@s00, @s01
000520:0x00280348:	movefm	[0xb5b222e8], m_pNoiseStepCrouch
000520:0x00280358:	ncalli	NoiseParams.LoadFromPath(@s00)
000522:0x00280368:	new	m_pNoiseStepProne, NoiseParams
000523:0x00280388:	adds	@s01, cfgPath, _s'NoiseStepProne'
000523:0x00280398:	moves	@s00, @s01
000523:0x002803a8:	movefm	[0xb5b222e8], m_pNoiseStepProne
000523:0x002803b8:	ncalli	NoiseParams.LoadFromPath(@s00)
000525:0x002803c8:	new	m_pNoiseLandLight, NoiseParams
000526:0x002803e8:	adds	@s01, cfgPath, _s'NoiseLandLight'
000526:0x002803f8:	moves	@s00, @s01
000526:0x00280408:	movefm	[0xb5b222e8], m_pNoiseLandLight
000526:0x00280418:	ncalli	NoiseParams.LoadFromPath(@s00)
000528:0x00280428:	new	m_pNoiseLandHeavy, NoiseParams
000529:0x00280448:	adds	@s01, cfgPath, _s'NoiseLandHeavy'
000529:0x00280458:	moves	@s00, @s01
000529:0x00280468:	movefm	[0xb5b222e8], m_pNoiseLandHeavy
000529:0x00280478:	ncalli	NoiseParams.LoadFromPath(@s00)
000531:0x00280488:	new	m_pNoiseWhisper, NoiseParams
000532:0x002804a8:	adds	@s01, cfgPath, _s'NoiseWhisper'
000532:0x002804b8:	moves	@s00, @s01
000532:0x002804c8:	movefm	[0xb5b222e8], m_pNoiseWhisper
000532:0x002804d8:	ncalli	NoiseParams.LoadFromPath(@s00)
000534:0x002804e8:	new	m_pNoiseTalk, NoiseParams
000535:0x00280508:	adds	@s01, cfgPath, _s'NoiseTalk'
000535:0x00280518:	moves	@s00, @s01
000535:0x00280528:	movefm	[0xb5b222e8], m_pNoiseTalk
000535:0x00280538:	ncalli	NoiseParams.LoadFromPath(@s00)
000537:0x00280548:	new	m_pNoiseShout, NoiseParams
000538:0x00280568:	adds	@s01, cfgPath, _s'NoiseShout'
000538:0x00280578:	moves	@s00, @s01
000538:0x00280588:	movefm	[0xb5b222e8], m_pNoiseShout
000538:0x00280598:	ncalli	NoiseParams.LoadFromPath(@s00)
000540:0x002805a8:	call	
000541:0x002805b8:	call	
000541:0x002805c8:	rts
DayZPlayer::IsPlayerInStance()
001234:0x00280620:	new	state, HumanMovementState
001235:0x00280640:	movefm	[0xb5b82a40], state
001235:0x00280650:	ncalli	DayZPlayer.GetMovementState([0xb5b82a40])
001237:0x00280660:	movefm	@c00, state
001237:0x00280670:	lsli	@m01, _i1, m_iStanceIdx
001237:0x00280680:	move	@m00, @m01
001237:0x00280690:	andi	@m00, @m00, pStanceMask
001237:0x002806a0:	move	@m01, @m00
001237:0x002806b0:	cmpi	@m01, _i0
001237:0x002806c0:	beq	0x2806e0
001237:0x002806c8:	imove	ret, 0x000001
001237:0x002806d8:	jump	0x2806f0
001237:0x002806e0:	imove	ret, 0x000000
001238:0x002806f0:	move	#return, ret
001238:0x00280700:	release	state
001238:0x00280708:	rts
001238:0x00280710:	release	state
001238:0x00280718:	rts
DayZPlayer::UpdateDummyPlayerProxyVisibility()
001255:0x00280748:	cmpcm	melee, null
001255:0x00280758:	beq	0x2807e0
001257:0x00280760:	call	
001257:0x00280770:	move	boo, #return
001258:0x00280780:	ncalli	DayZPlayer.SetSimpleHiddenSelectionState(SIMPLE_SELECTION_MELEE_RIFLE, boo)
001259:0x00280790:	cmpi	boo, _i0
001259:0x002807a0:	beq	0x2807c0
001259:0x002807a8:	imove	@m00, 0x000000
001259:0x002807b8:	jump	0x2807d0
001259:0x002807c0:	imove	@m00, 0x000001
001259:0x002807d0:	ncalli	DayZPlayer.SetSimpleHiddenSelectionState(SIMPLE_SELECTION_MELEE_MELEE, @m00)
001261:0x002807e0:	cmpcm	shoulder, null
001261:0x002807f0:	beq	0x280878
001263:0x002807f8:	call	
001263:0x00280808:	move	boo, #return
001264:0x00280818:	ncalli	DayZPlayer.SetSimpleHiddenSelectionState(SIMPLE_SELECTION_SHOULDER_RIFLE, boo)
001265:0x00280828:	cmpi	boo, _i0
001265:0x00280838:	beq	0x280858
001265:0x00280840:	imove	@m00, 0x000000
001265:0x00280850:	jump	0x280868
001265:0x00280858:	imove	@m00, 0x000001
001265:0x00280868:	ncalli	DayZPlayer.SetSimpleHiddenSelectionState(SIMPLE_SELECTION_SHOULDER_MELEE, @m00)
001265:0x00280878:	rts
DayZPlayer::ForceStandUpForHeavyItems()
001272:0x00280998:	new	il, InventoryLocation
001273:0x002809b8:	call	
001273:0x002809c8:	cmpi	#return, _i0
001273:0x002809d8:	beq	0x280a68
001273:0x002809e0:	imove	@m01, 0x000006
001273:0x002809f0:	move	@m00, @m01
001273:0x00280a00:	call	
001273:0x00280a10:	cmpi	#return, _i0
001273:0x00280a20:	beq	0x280a68
001275:0x00280a28:	ncalli	DayZPlayer.GetCommand_Move()
001275:0x00280a30:	movec	cm, #return
001276:0x00280a40:	cmpc	cm, null
001276:0x00280a50:	beq	0x280a68
001278:0x00280a58:	ncalli	HumanCommandMove.ForceStance(_i0)
001278:0x00280a68:	release	il
001278:0x00280a70:	rts
DayZPlayer::ForceStandUpForHeavyItemsSwap()
001285:0x00280a78:	call	
001286:0x00280a88:	call	
001286:0x00280a98:	rts
Effect::Effect()
//scripts/3_Game/effect.c
000070:0x00280ac8:	new	Event_OnStarted, ScriptInvoker
000070:0x00280ae8:	new	Event_OnStopped, ScriptInvoker
000070:0x00280b08:	new	Event_OnEffectStarted, ScriptInvoker
000070:0x00280b28:	new	Event_OnEffectEnded, ScriptInvoker
000072:0x00280b48:	ncall	GetGame()
000072:0x00280b50:	ncalli	CGame.IsDedicatedServer()
000072:0x00280b58:	cmpi	#return, _i0
000072:0x00280b68:	beq	0x280b80
000074:0x00280b70:	icall	ErrorEx(_s'Created Effect on server.', _i1)
000077:0x00280b80:	call	
000077:0x00280b90:	rts
Effect::~Effect()
000086:0x00280b98:	call	
000086:0x00280ba8:	cmpi	#return, _i0
000086:0x00280bb8:	beq	0x280be0
000087:0x00280bc0:	call	
000087:0x00280bd0:	call	EffectUnregister(#return)
000090:0x00280be0:	call	
000093:0x00280bf0:	call	
000093:0x00280c00:	rts
Effect::InitEffect()
000101:0x00280cc8:	icall	SetInstance([0xb5d7ec48], this)
000101:0x00280cd8:	movefm	[0xb425b340], Event_OnStarted
000101:0x00280ce8:	icall	
000102:0x00280cf8:	icall	SetInstance([0xb5d7ec88], this)
000102:0x00280d08:	movefm	[0xb425b340], Event_OnStarted
000102:0x00280d18:	icall	
000103:0x00280d28:	icall	SetInstance([0xb5d7ecc8], this)
000103:0x00280d38:	movefm	[0xb425b340], Event_OnStopped
000103:0x00280d48:	icall	
000103:0x00280d58:	rts
Effect::GetEffectType()
000118:0x00280d60:	imove	#return, 0x000000
000118:0x00280d70:	rts
000118:0x00280d78:	rts
Effect::IsSound()
000127:0x00280d80:	imove	#return, 0x000000
000127:0x00280d90:	rts
000127:0x00280d98:	rts
Effect::IsParticle()
000136:0x00280da0:	imove	#return, 0x000000
000136:0x00280db0:	rts
000136:0x00280db8:	rts
Effect::Start()
000156:0x00280dc0:	call	
000156:0x00280dd0:	cmpi	#return, _i0
000156:0x00280de0:	beq	0x280df0
000157:0x00280de8:	rts
000159:0x00280df0:	call	
000162:0x00280e00:	movefm	[0xb425b340], Event_OnStarted
000162:0x00280e10:	icall	
000162:0x00280e40:	rts
Effect::Stop()
000182:0x00280e48:	call	
000182:0x00280e58:	cmpi	#return, _i0
000182:0x00280e68:	bne	0x280e78
000183:0x00280e70:	rts
000185:0x00280e78:	call	
000187:0x00280e88:	movefm	[0xb425b340], Event_OnStopped
000187:0x00280e98:	icall	
000187:0x00280ec8:	rts
Effect::IsPlaying()
000195:0x00280ed0:	move	#return, m_IsPlaying
000195:0x00280ee0:	rts
000195:0x00280ee8:	rts
Effect::Destroy()
000215:0x00280f30:	call	
000215:0x00280f40:	cmpi	#return, _i0
000215:0x00280f50:	beq	0x280f60
000216:0x00280f58:	rts
000219:0x00280f60:	imove	m_IsPendingDeletion, 0x000001
000224:0x00280f70:	call	
000227:0x00280f80:	ncall	GetGame()
000227:0x00280f88:	cmpc	#return, null
000227:0x00280f98:	beq	0x280ff0
000229:0x00280fa0:	ncall	GetGame()
000229:0x00280fa8:	call	
000229:0x00280fb8:	icall	
000229:0x00280fe8:	release	#return
000229:0x00280ff0:	rts
Effect::SetAutodestroy()
000240:0x00280ff8:	move	m_IsAutodestroy, auto_destroy
000240:0x00281008:	rts
Effect::IsAutodestroy()
000249:0x00281010:	move	#return, m_IsAutodestroy
000249:0x00281020:	rts
000249:0x00281028:	rts
Effect::IsPendingDeletion()
000258:0x00281030:	move	#return, m_IsPendingDeletion
000258:0x00281040:	rts
000258:0x00281048:	rts
Effect::SetEnableEventFrame()
000271:0x002810d0:	cmpi	enable, _i0
000271:0x002810e0:	beq	0x281110
000273:0x002810e8:	icall	SetInstance([0xb5d7f090], this)
000273:0x002810f8:	icall	
000273:0x00281108:	jump	0x281130
000277:0x00281110:	icall	SetInstance([0xb5d7f0d0], this)
000277:0x00281120:	icall	
000277:0x00281130:	rts
Effect::Event_OnEffectStarted()
000309:0x00281138:	imove	m_IsPlaying, 0x000001
000311:0x00281148:	movefm	[0xb425b340], Event_OnEffectStarted
000311:0x00281158:	icall	
000311:0x00281188:	rts
Effect::Event_OnEffectEnded()
000319:0x00281190:	imove	m_IsPlaying, 0x000000
000321:0x002811a0:	movefm	[0xb425b340], Event_OnEffectEnded
000321:0x002811b0:	icall	
000323:0x002811e0:	call	
000323:0x002811f0:	cmpi	#return, _i0
000323:0x00281200:	beq	0x281218
000325:0x00281208:	call	
000325:0x00281218:	rts
Effect::Event_OnRegistered()
000346:0x00281220:	call	
000347:0x00281230:	imove	m_IsRegistered, 0x000001
000347:0x00281240:	rts
Effect::Event_OnUnregistered()
000356:0x00281248:	call	
000357:0x00281258:	imove	m_IsRegistered, 0x000000
000357:0x00281268:	rts
Effect::SetParent()
000387:0x00281270:	movem	m_ParentObject, parent_obj
000387:0x00281280:	rts
Effect::GetParent()
000398:0x00281288:	movem	#return, m_ParentObject
000398:0x00281298:	rts
000398:0x002812a0:	rts
Effect::SetCurrentParent()
000409:0x002812a8:	cmpi	updateCached, _i0
000409:0x002812b8:	beq	0x2812d0
000410:0x002812c0:	call	
000410:0x002812d0:	rts
Effect::GetCurrentParent()
000419:0x002812d8:	movetm	#return, null
000419:0x002812e8:	rts
000419:0x002812f0:	rts
Effect::SetPosition()
000429:0x002812f8:	movev	m_Position, pos
000429:0x00281308:	rts
Effect::GetPosition()
000439:0x00281310:	movev	#return, m_Position
000439:0x00281320:	rts
000439:0x00281328:	rts
Effect::SetCurrentPosition()
000449:0x00281330:	cmpi	updateCached, _i0
000449:0x00281340:	beq	0x281358
000450:0x00281348:	call	
000450:0x00281358:	rts
Effect::GetCurrentPosition()
000459:0x00281360:	movev	#return, Zero
000459:0x00281370:	rts
000459:0x00281378:	rts
Effect::SetLocalPosition()
000469:0x00281380:	movev	m_LocalPos, pos
000469:0x00281390:	rts
Effect::GetLocalPosition()
000479:0x00281398:	movev	#return, m_LocalPos
000479:0x002813a8:	rts
000479:0x002813b0:	rts
Effect::SetCurrentLocalPosition()
000489:0x002813b8:	cmpi	updateCached, _i0
000489:0x002813c8:	beq	0x2813e0
000490:0x002813d0:	call	
000490:0x002813e0:	rts
Effect::GetCurrentLocalPosition()
000499:0x002813e8:	movev	#return, Zero
000499:0x002813f8:	rts
000499:0x00281400:	rts
Effect::SetID()
000518:0x00281408:	move	m_ID, id
000518:0x00281418:	rts
Effect::GetID()
000527:0x00281420:	move	#return, m_ID
000527:0x00281430:	rts
000527:0x00281438:	rts
Effect::IsRegistered()
000536:0x00281440:	move	#return, m_IsRegistered
000536:0x00281450:	rts
000536:0x00281458:	rts
Effect::SetAttachmentParent()
000556:0x00281460:	call	
000556:0x00281470:	rts
Effect::GetAttachmentParent()
000565:0x00281478:	call	
000565:0x00281488:	movem	#return, #return
000565:0x00281498:	release	#return
000565:0x002814a0:	rts
000565:0x002814a8:	rts
Effect::SetAttachedLocalPos()
000574:0x002814b0:	call	
000574:0x002814c0:	rts
Effect::GetAttachedLocalPos()
000583:0x002814c8:	call	
000583:0x002814d8:	movev	#return, #return
000583:0x002814e8:	rts
000583:0x002814f0:	rts
Effect::SetAttachedLocalOri()
000594:0x002814f8:	movev	m_LocalOri, ori
000594:0x00281508:	rts
Effect::GetAttachedLocalOri()
000604:0x00281510:	movev	#return, m_LocalOri
000604:0x00281520:	rts
000604:0x00281528:	rts
Hit_Water::Hit_Water()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_water.c
000005:0x00281530:	call	
000007:0x00281540:	imove	m_AngledEnter, 10.00000
000007:0x00281550:	rts
Hit_Water::EvaluateEffect()
000012:0x00281590:	call	
000014:0x002815c0:	movev	m_SurfNormal, _v<0.000000,0.000000,0.000000>
000014:0x002815d0:	rts
Hit_Water::CalculateStoppingForce()
000019:0x00281678:	divf	projectile_weight_coef, weight, DEFAULT_PROJECTILE_WEIGHT
000021:0x00281688:	subf	@f01, in_speedf, out_speedf
000021:0x00281698:	move	@f00, @f01
000021:0x002816a8:	mulf	stopping_force, @f00, projectile_weight_coef
000023:0x002816b8:	cmpf	stopping_force, _f350.000000
000023:0x002816c8:	bge	0x2816e0
000024:0x002816d0:	call	
000026:0x002816e0:	cmpf	stopping_force, _f350.000000
000026:0x002816f0:	blt	0x281720
000026:0x002816f8:	cmpf	stopping_force, _f750.000000
000026:0x00281708:	bge	0x281720
000027:0x00281710:	call	
000029:0x00281720:	cmpf	stopping_force, _f750.000000
000029:0x00281730:	blt	0x281748
000030:0x00281738:	call	
000032:0x00281748:	move	#return, stopping_force
000032:0x00281758:	rts
000032:0x00281760:	rts
InventoryInputUserData::SerializeMove()
//scripts/3_Game/systems\inventory\inventoryinputuserdata.c
000007:0x00281768:	icall	
000008:0x00281778:	icall	
000009:0x00281788:	call	
000010:0x00281798:	call	
000010:0x002817a8:	rts
InventoryInputUserData::SendInputUserDataMove()
000015:0x00281800:	ncall	GetGame()
000015:0x00281808:	ncalli	CGame.IsClient()
000015:0x00281810:	cmpi	#return, _i0
000015:0x00281820:	beq	0x2819c0
000017:0x00281828:	ncall	GetGame()
000017:0x00281830:	icall	
000017:0x00281838:	icall	ToString(#return)
000017:0x00281848:	adds	@s07, _s'[syncinv] t=', #return
000017:0x00281858:	moves	@s06, @s07
000017:0x00281868:	adds	@s06, @s06, _s'ms sending cmd='
000017:0x00281878:	moves	@s05, @s06
000017:0x00281888:	call	EnumToString(_T(InventoryCommandType), type)
000017:0x002818a0:	adds	@s05, @s05, #return
000017:0x002818b0:	moves	@s04, @s05
000017:0x002818c0:	adds	@s04, @s04, _s' src='
000017:0x002818d0:	moves	@s03, @s04
000017:0x002818e0:	call	DumpToStringNullSafe(src)
000017:0x002818f0:	adds	@s03, @s03, #return
000017:0x00281900:	moves	@s02, @s03
000017:0x00281910:	adds	@s02, @s02, _s' dst='
000017:0x00281920:	moves	@s01, @s02
000017:0x00281930:	call	DumpToStringNullSafe(dst)
000017:0x00281940:	adds	@s01, @s01, #return
000017:0x00281950:	moves	@s00, @s01
000017:0x00281960:	call	syncDebugPrint(@s00)
000018:0x00281970:	new	ctx, ScriptInputUserData
000019:0x00281990:	call	SerializeMove(ctx, type, src, dst)
000020:0x002819b0:	ncalli	ScriptInputUserData.Send()
000020:0x002819b8:	release	ctx
000020:0x002819c0:	rts
InventoryInputUserData::SendServerMove()
000026:0x00281a18:	ncall	GetGame()
000026:0x00281a20:	ncalli	CGame.IsServer()
000026:0x00281a28:	cmpi	#return, _i0
000026:0x00281a38:	beq	0x281bb0
000028:0x00281a40:	call	EnumToString(_T(InventoryCommandType), type)
000028:0x00281a58:	adds	@s05, _s'[syncinv] server sending cmd=', #return
000028:0x00281a68:	moves	@s04, @s05
000028:0x00281a78:	adds	@s04, @s04, _s' src='
000028:0x00281a88:	moves	@s03, @s04
000028:0x00281a98:	call	DumpToStringNullSafe(src)
000028:0x00281aa8:	adds	@s03, @s03, #return
000028:0x00281ab8:	moves	@s02, @s03
000028:0x00281ac8:	adds	@s02, @s02, _s' dst='
000028:0x00281ad8:	moves	@s01, @s02
000028:0x00281ae8:	call	DumpToStringNullSafe(dst)
000028:0x00281af8:	adds	@s01, @s01, #return
000028:0x00281b08:	moves	@s00, @s01
000028:0x00281b18:	call	syncDebugPrint(@s00)
000029:0x00281b28:	new	ctx, ScriptInputUserData
000030:0x00281b48:	call	SerializeMove(ctx, type, src, dst)
000031:0x00281b68:	movefm	[0xb5bae060], player
000031:0x00281b78:	ncalli	InventoryLocation.GetItem()
000031:0x00281b80:	movefm	[0xb5bae0b0], ctx
000031:0x00281b90:	ncall	ServerLocationSyncMoveEntity([0xb5bae060], #return, [0xb5bae0b0])
000031:0x00281ba8:	release	ctx
000031:0x00281bb0:	rts
InventoryInputUserData::SerializeSwap()
000039:0x00281bb8:	icall	
000040:0x00281bc8:	icall	
000041:0x00281bd8:	call	
000042:0x00281be8:	call	
000043:0x00281bf8:	call	
000044:0x00281c08:	call	
000045:0x00281c18:	icall	
000045:0x00281c28:	rts
InventoryInputUserData::SendInputUserDataSwap()
000050:0x00281c80:	ncall	GetGame()
000050:0x00281c88:	ncalli	CGame.IsClient()
000050:0x00281c90:	cmpi	#return, _i0
000050:0x00281ca0:	beq	0x281e90
000052:0x00281ca8:	ncall	GetGame()
000052:0x00281cb0:	icall	
000052:0x00281cb8:	icall	ToString(#return)
000052:0x00281cc8:	adds	@s09, _s'[syncinv] t=', #return
000052:0x00281cd8:	moves	@s08, @s09
000052:0x00281ce8:	adds	@s08, @s08, _s'ms sending cmd=SWAP src1='
000052:0x00281cf8:	moves	@s07, @s08
000052:0x00281d08:	call	DumpToStringNullSafe(src1)
000052:0x00281d18:	adds	@s07, @s07, #return
000052:0x00281d28:	moves	@s06, @s07
000052:0x00281d38:	adds	@s06, @s06, _s' src2='
000052:0x00281d48:	moves	@s05, @s06
000052:0x00281d58:	call	DumpToStringNullSafe(src2)
000052:0x00281d68:	adds	@s05, @s05, #return
000052:0x00281d78:	moves	@s04, @s05
000052:0x00281d88:	adds	@s04, @s04, _s' dst1='
000052:0x00281d98:	moves	@s03, @s04
000052:0x00281da8:	call	DumpToStringNullSafe(dst1)
000052:0x00281db8:	adds	@s03, @s03, #return
000052:0x00281dc8:	moves	@s02, @s03
000052:0x00281dd8:	adds	@s02, @s02, _s' dst2='
000052:0x00281de8:	moves	@s01, @s02
000052:0x00281df8:	call	DumpToStringNullSafe(dst2)
000052:0x00281e08:	adds	@s01, @s01, #return
000052:0x00281e18:	moves	@s00, @s01
000052:0x00281e28:	call	syncDebugPrint(@s00)
000053:0x00281e38:	new	ctx, ScriptInputUserData
000054:0x00281e58:	call	SerializeSwap(ctx, src1, src2, dst1, dst2, skippedSwap)
000055:0x00281e80:	ncalli	ScriptInputUserData.Send()
000055:0x00281e88:	release	ctx
000055:0x00281e90:	rts
InventoryInputUserData::SendServerSwap()
000061:0x00281ee8:	ncall	GetGame()
000061:0x00281ef0:	ncalli	CGame.IsServer()
000061:0x00281ef8:	cmpi	#return, _i0
000061:0x00281f08:	beq	0x282100
000063:0x00281f10:	call	DumpToStringNullSafe(src1)
000063:0x00281f20:	adds	@s07, _s'[syncinv] server sending cmd=SWAP src1=', #return
000063:0x00281f30:	moves	@s06, @s07
000063:0x00281f40:	adds	@s06, @s06, _s' src2='
000063:0x00281f50:	moves	@s05, @s06
000063:0x00281f60:	call	DumpToStringNullSafe(src2)
000063:0x00281f70:	adds	@s05, @s05, #return
000063:0x00281f80:	moves	@s04, @s05
000063:0x00281f90:	adds	@s04, @s04, _s' dst1='
000063:0x00281fa0:	moves	@s03, @s04
000063:0x00281fb0:	call	DumpToStringNullSafe(dst1)
000063:0x00281fc0:	adds	@s03, @s03, #return
000063:0x00281fd0:	moves	@s02, @s03
000063:0x00281fe0:	adds	@s02, @s02, _s' dst2='
000063:0x00281ff0:	moves	@s01, @s02
000063:0x00282000:	call	DumpToStringNullSafe(dst2)
000063:0x00282010:	adds	@s01, @s01, #return
000063:0x00282020:	moves	@s00, @s01
000063:0x00282030:	call	syncDebugPrint(@s00)
000064:0x00282040:	new	ctx, ScriptInputUserData
000065:0x00282060:	call	SerializeSwap(ctx, src1, src2, dst1, dst2, skippedSwap)
000066:0x00282088:	movefm	[0xb5bae100], src1
000066:0x00282098:	movefm	[0xb5bae128], src2
000066:0x002820a8:	movefm	[0xb5bae150], dst1
000066:0x002820b8:	movefm	[0xb5bae178], dst2
000066:0x002820c8:	movefm	[0xb5bae1a0], ctx
000066:0x002820d8:	ncall	ServerLocationSwap([0xb5bae100], [0xb5bae128], [0xb5bae150], [0xb5bae178], [0xb5bae1a0])
000066:0x002820f8:	release	ctx
000066:0x00282100:	rts
InventoryInputUserData::SerializeHandEvent()
000074:0x00282108:	icall	
000075:0x00282118:	icall	
000076:0x00282128:	call	
000076:0x00282138:	rts
InventoryInputUserData::SendInputUserDataHandEvent()
000081:0x00282190:	ncall	GetGame()
000081:0x00282198:	ncalli	CGame.IsClient()
000081:0x002821a0:	cmpi	#return, _i0
000081:0x002821b0:	beq	0x2822a0
000083:0x002821b8:	ncall	GetGame()
000083:0x002821c0:	icall	
000083:0x002821c8:	icall	ToString(#return)
000083:0x002821d8:	adds	@s03, _s'[syncinv] t=', #return
000083:0x002821e8:	moves	@s02, @s03
000083:0x002821f8:	adds	@s02, @s02, _s'ms SendInputUserDataHandEvent e='
000083:0x00282208:	moves	@s01, @s02
000083:0x00282218:	call	
000083:0x00282228:	adds	@s01, @s01, #return
000083:0x00282238:	moves	@s00, @s01
000083:0x00282248:	call	syncDebugPrint(@s00)
000084:0x00282258:	new	ctx, ScriptInputUserData
000085:0x00282278:	call	SerializeHandEvent(ctx, e)
000086:0x00282290:	ncalli	ScriptInputUserData.Send()
000086:0x00282298:	release	ctx
000086:0x002822a0:	rts
InventoryInputUserData::SendServerHandEventViaInventoryCommand()
000093:0x00282348:	ncall	GetGame()
000093:0x00282350:	ncalli	CGame.IsServer()
000093:0x00282358:	cmpi	#return, _i0
000093:0x00282368:	beq	0x282520
000095:0x00282370:	call	
000095:0x00282380:	cmpi	#return, _i0
000095:0x00282390:	beq	0x2823d8
000096:0x00282398:	call	
000096:0x002823a8:	adds	@s01, _s'[syncinv] SendServerHandEvent - called on server side event only, e=', #return
000096:0x002823b8:	moves	@s00, @s01
000096:0x002823c8:	call	Error(@s00)
000097:0x002823d8:	call	
000097:0x002823e8:	cmpi	#return, _i0
000097:0x002823f8:	beq	0x282440
000098:0x00282400:	call	
000098:0x00282410:	adds	@s01, _s'[syncinv] SendServerHandEvent - called on living thing.. server hand command is only for dead people, e=', #return
000098:0x00282420:	moves	@s00, @s01
000098:0x00282430:	call	Error(@s00)
000099:0x00282440:	call	
000099:0x00282450:	adds	@s01, _s'[syncinv] SendServerHandEventViaInventoryCommand SendInputUserDataHandEvent e=', #return
000099:0x00282460:	moves	@s00, @s01
000099:0x00282470:	call	syncDebugPrint(@s00)
000100:0x00282480:	new	ctx, ScriptInputUserData
000101:0x002824a0:	call	SerializeHandEvent(ctx, e)
000102:0x002824b8:	movefm	[0xb5bae1f0], player
000102:0x002824c8:	call	
000102:0x002824d8:	movefm	[0xb5bae218], #return
000102:0x002824e8:	movefm	[0xb5bae240], ctx
000102:0x002824f8:	ncall	ServerHandEvent([0xb5bae1f0], [0xb5bae218], [0xb5bae240])
000102:0x00282510:	release	#return
000102:0x00282518:	release	ctx
000102:0x00282520:	rts
InventoryInputUserData::SerializeDestroy()
000109:0x00282528:	icall	
000110:0x00282538:	icall	
000111:0x00282548:	call	
000111:0x00282558:	rts
InventoryInputUserData::SendInputUserDataDestroy()
000116:0x002825b0:	ncall	GetGame()
000116:0x002825b8:	ncalli	CGame.IsClient()
000116:0x002825c0:	cmpi	#return, _i0
000116:0x002825d0:	beq	0x282660
000118:0x002825d8:	call	DumpToStringNullSafe(src)
000118:0x002825e8:	adds	@s01, _s'[syncinv] SendInputUserDataDestroy src=', #return
000118:0x002825f8:	moves	@s00, @s01
000118:0x00282608:	call	syncDebugPrint(@s00)
000119:0x00282618:	new	ctx, ScriptInputUserData
000120:0x00282638:	call	SerializeDestroy(ctx, src)
000121:0x00282650:	ncalli	ScriptInputUserData.Send()
000121:0x00282658:	release	ctx
000121:0x00282660:	rts
PPEMatClassParameterBool::PPEMatClassParameterBool()
//scripts/3_Game/ppemanager\materials\matparameters\ppematclassparameterbool.c
000010:0x00282668:	new	m_LayerInfo, map<int,@array<bool>>
000010:0x00282688:	rts
PPEMatClassParameterBool::InitDefaults()
000015:0x00282690:	movefm	@c00, m_Defaults
000015:0x002826a0:	icall	CastTo(m_Bool, @c00)
000016:0x002826b0:	movefm	[0xb5b33398], m_Bool
000016:0x002826c0:	movec	@c00, [0xb5b33398]
000016:0x002826d0:	move	m_ValueDefault, param2
000016:0x002826e0:	rts
PPEMatClassParameterBool::InitCuttent()
000021:0x002826e8:	move	p1, m_ValueDefault
000021:0x002826f8:	new	m_CurrentValues, Param1<bool>
000021:0x00282720:	rts
PPEMatClassParameterBool::GetParameterVarType()
000026:0x00282728:	imove	#return, 0x000001
000026:0x00282738:	rts
000026:0x00282740:	rts
PPEMatClassParameterBool::Update()
000031:0x002829b8:	call	
000031:0x002829d8:	movem	p_total, p_total
000031:0x002829e8:	move	setting_defaults, setting_defaults
000031:0x002829f8:	release	p_total
000033:0x00282a00:	imove	active_request_count, 0x000000
000037:0x00282a10:	imove	setting_value_zero, 0x000000
000039:0x00282a20:	imove	bool_value_temp, 0x000000
000040:0x00282a30:	move	bool_value_total, m_ValueDefault
000042:0x00282a40:	cmpcm	p_total, null
000042:0x00282a50:	bne	0x282a80
000044:0x00282a58:	new	p_total, Param1<bool>
000047:0x00282a80:	movefm	[0xb5b35828], m_RequestMap
000047:0x00282a90:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000047:0x00282a98:	move	@m00, #return
000047:0x00282aa8:	cmpi	@m00, _i0
000047:0x00282ab8:	ble	0x282ae0
000049:0x00282ac0:	movefm	[0xb5c10c30], m_LayerInfo
000049:0x00282ad0:	ncalli	map<int,@array<bool>>.Clear()
000049:0x00282ad8:	jump	0x282b68
000054:0x00282ae0:	call	
000054:0x00282af0:	movem	p_total, p_total
000054:0x00282b00:	release	p_total
000055:0x00282b08:	move	parameter_idx, m_ParameterIndex
000055:0x00282b18:	movefm	[0xb5b35de0], m_Parent
000055:0x00282b28:	call	
000056:0x00282b38:	release	req_data
000056:0x00282b40:	movem	p_total, p_total
000056:0x00282b50:	move	setting_defaults, setting_defaults
000056:0x00282b60:	rts
000059:0x00282b68:	imove	i, 0x000000
000059:0x00282b78:	jump	0x282b98
000059:0x00282b80:	move	@m00, i
000059:0x00282b90:	inc	i
000059:0x00282b98:	movefm	[0xb5b35828], m_RequestMap
000059:0x00282ba8:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000059:0x00282bb0:	cmpi	i, #return
000059:0x00282bc0:	bge	0x282fb8
000061:0x00282bc8:	movefm	[0xb5b35828], m_RequestMap
000061:0x00282bd8:	icall	
000061:0x00282be8:	icall	SafeCastType([0xb5b36380], @c01, #return)
000061:0x00282c00:	movetm	req_data, @c01
000063:0x00282c10:	cmpcm	req_data, null
000063:0x00282c20:	bne	0x282d10
000065:0x00282c28:	icall	ToString(this)
000065:0x00282c38:	adds	@s05, _s'PPEMatClassParameterBool | req_data not found! | ', #return
000065:0x00282c48:	moves	@s04, @s05
000065:0x00282c58:	adds	@s04, @s04, _s' | mat/par: '
000065:0x00282c68:	moves	@s03, @s04
000065:0x00282c78:	icall	ToString(m_MaterialIndex)
000065:0x00282c88:	adds	@s03, @s03, #return
000065:0x00282c98:	moves	@s02, @s03
000065:0x00282ca8:	adds	@s02, @s02, _s'/'
000065:0x00282cb8:	moves	@s01, @s02
000065:0x00282cc8:	icall	ToString(m_ParameterIndex)
000065:0x00282cd8:	adds	@s01, @s01, #return
000065:0x00282ce8:	moves	@s00, @s01
000065:0x00282cf8:	call	Error(@s00)
000066:0x00282d08:	jump	0x282b80
000069:0x00282d10:	call	
000069:0x00282d20:	move	setting_value_zero, #return
000071:0x00282d30:	cmpi	setting_value_zero, _i0
000071:0x00282d40:	beq	0x282da0
000071:0x00282d48:	call	
000071:0x00282d58:	cmpi	#return, _i0
000071:0x00282d68:	bne	0x282da0
000071:0x00282d70:	call	
000071:0x00282d80:	cmpi	#return, _i0
000071:0x00282d90:	bne	0x282da0
000074:0x00282d98:	jump	0x282b80
000077:0x00282da0:	cmpi	setting_value_zero, _i0
000077:0x00282db0:	beq	0x282de0
000079:0x00282db8:	movefm	@c00, req_data
000079:0x00282dc8:	imove	m_BoolTarget, 0x000000
000079:0x00282dd8:	jump	0x282df8
000084:0x00282de0:	move	@m00, active_request_count
000084:0x00282df0:	inc	active_request_count
000089:0x00282df8:	movefm	@c00, req_data
000089:0x00282e08:	movefm	@c01, req_data
000089:0x00282e18:	move	m_BoolLast, m_BoolCurrent
000091:0x00282e28:	call	
000091:0x00282e38:	cmpi	#return, _i0
000091:0x00282e48:	bne	0x282ed8
000091:0x00282e50:	call	
000091:0x00282e60:	cmpi	#return, _i0
000091:0x00282e70:	beq	0x282ed8
000093:0x00282e78:	movefm	@c00, req_data
000093:0x00282e88:	move	bool_value_temp, m_BoolCurrent
000094:0x00282e98:	call	
000094:0x00282ea8:	call	
000094:0x00282eb8:	call	
000096:0x00282ed0:	jump	0x282b80
000099:0x00282ed8:	movefm	@c00, req_data
000099:0x00282ee8:	move	bool_value_temp, m_BoolTarget
000102:0x00282ef8:	call	
000103:0x00282f08:	cmpi	setting_value_zero, _i0
000103:0x00282f18:	beq	0x282f38
000105:0x00282f20:	call	
000105:0x00282f30:	jump	0x282f90
000110:0x00282f38:	movefm	@c00, req_data
000110:0x00282f48:	move	bool_value_temp, m_BoolTarget
000111:0x00282f58:	call	
000111:0x00282f68:	call	
000111:0x00282f78:	call	
000114:0x00282f90:	movefm	@c00, req_data
000114:0x00282fa0:	move	m_BoolCurrent, bool_value_temp
000114:0x00282fb0:	jump	0x282b80
000117:0x00282fb8:	cmpi	active_request_count, _i0
000117:0x00282fc8:	bne	0x283000
000119:0x00282fd0:	call	
000119:0x00282fe0:	movem	p_total, p_total
000119:0x00282ff0:	release	p_total
000119:0x00282ff8:	jump	0x283450
000127:0x00283000:	imove	override_active, 0x000000
000129:0x00283010:	imove	i, 0x000000
000129:0x00283020:	jump	0x283040
000129:0x00283028:	move	@m00, i
000129:0x00283038:	inc	i
000129:0x00283040:	movefm	[0xb5c10c30], m_LayerInfo
000129:0x00283050:	ncalli	map<int,@array<bool>>.Count()
000129:0x00283058:	cmpi	i, #return
000129:0x00283068:	bge	0x2833f0
000131:0x00283070:	cmpi	override_active, _i0
000131:0x00283080:	beq	0x283090
000132:0x00283088:	jump	0x2833f0
000134:0x00283090:	movefm	[0xd31561b0], m_CommandLayersArray
000134:0x002830a0:	icall	
000134:0x002830b0:	movefm	[0xb5c10c30], m_LayerInfo
000134:0x002830c0:	icall	
000134:0x002830d0:	icall	
000134:0x002830e0:	move	value, #return
000135:0x002830f0:	movefm	[0xd31561b0], m_CommandLayersArray
000135:0x00283100:	icall	
000135:0x00283110:	movefm	[0xb5c10c30], m_LayerInfo
000135:0x00283120:	icall	
000135:0x00283130:	icall	
000135:0x00283140:	move	operator, #return
000137:0x00283150:	move	#switch, operator
000137:0x00283160:	imove	@m00, 0x000000
000137:0x00283170:	cmpi	@m00, #switch
000137:0x00283180:	bne	0x2831d8
000140:0x00283188:	citf	@f00, bool_value_total
000140:0x00283198:	citf	@f01, value
000140:0x002831a8:	icall	Min(@f00, @f01)
000140:0x002831b8:	cfti	bool_value_total, #return
000141:0x002831c8:	jump	0x2833c0
000141:0x002831d0:	jump	0x283200
000141:0x002831d8:	imove	@m00, 0x000001
000141:0x002831e8:	cmpi	@m00, #switch
000141:0x002831f8:	bne	0x283250
000144:0x00283200:	citf	@f00, bool_value_total
000144:0x00283210:	citf	@f01, value
000144:0x00283220:	icall	Max(@f00, @f01)
000144:0x00283230:	cfti	bool_value_total, #return
000145:0x00283240:	jump	0x2833c0
000145:0x00283248:	jump	0x283278
000145:0x00283250:	imove	@m00, 0x00000a
000145:0x00283260:	cmpi	@m00, #switch
000145:0x00283270:	bne	0x283298
000148:0x00283278:	move	bool_value_total, value
000149:0x00283288:	jump	0x2833c0
000149:0x00283290:	jump	0x2832c0
000149:0x00283298:	imove	@m00, 0x000009
000149:0x002832a8:	cmpi	@m00, #switch
000149:0x002832b8:	bne	0x2832d8
000152:0x002832c0:	move	bool_value_total, value
000153:0x002832d0:	jump	0x2833c0
000156:0x002832d8:	icall	ToString(operator)
000156:0x002832e8:	adds	@s05, _s'PPEMatClassParameterBool | Invalid operator ', #return
000156:0x002832f8:	moves	@s04, @s05
000156:0x00283308:	adds	@s04, @s04, _s' in mat/par: '
000156:0x00283318:	moves	@s03, @s04
000156:0x00283328:	icall	ToString(m_MaterialIndex)
000156:0x00283338:	adds	@s03, @s03, #return
000156:0x00283348:	moves	@s02, @s03
000156:0x00283358:	adds	@s02, @s02, _s'/'
000156:0x00283368:	moves	@s01, @s02
000156:0x00283378:	icall	ToString(m_ParameterIndex)
000156:0x00283388:	adds	@s01, @s01, #return
000156:0x00283398:	moves	@s00, @s01
000156:0x002833a8:	call	Error(@s00)
000157:0x002833b8:	jump	0x2833c0
000160:0x002833c0:	cmpi	operator, OVERRIDE
000160:0x002833d0:	bne	0x2833e8
000163:0x002833d8:	imove	override_active, 0x000001
000163:0x002833e8:	jump	0x283028
000167:0x002833f0:	movefm	[0xd31561b0], m_CommandLayersArray
000167:0x00283400:	ncalli	array<int>.Clear()
000169:0x00283408:	movefm	@c01, p_total
000169:0x00283418:	icall	SafeCastType([0xb5bfdc40], @c00, @c01)
000169:0x00283430:	movec	@c02, @c00
000169:0x00283440:	move	param1, bool_value_total
000173:0x00283450:	move	parameter_idx, m_ParameterIndex
000173:0x00283460:	movefm	[0xb5b35de0], m_Parent
000173:0x00283470:	call	
000175:0x00283480:	movem	m_CurrentValues, p_total
000175:0x00283490:	release	req_data
000175:0x00283498:	movem	p_total, p_total
000175:0x002834a8:	move	setting_defaults, setting_defaults
000175:0x002834b8:	rts
PPEMatClassParameterBool::PrepareLayerInfo()
000180:0x002834c0:	new	@c01, array<bool>
000180:0x002834e0:	pushc	@c01
000180:0x002834e8:	icall	
000180:0x002834f8:	move	@m00, operator
000180:0x00283508:	icall	
000180:0x00283518:	movefm	[0xb5c10c30], m_LayerInfo
000180:0x00283528:	icall	
000180:0x00283538:	popc	@c01
000180:0x00283540:	release	@c01
000181:0x00283548:	call	
000181:0x00283558:	rts
PPEMatClassParameterBool::SetParameterValueDefault()
000187:0x00283560:	movefm	@c01, m_Defaults
000187:0x00283570:	icall	SafeCastType([0xb5b33398], @c00, @c01)
000187:0x00283588:	movec	@c02, @c00
000187:0x00283598:	move	p1, param2
000187:0x002835a8:	new	p_total, Param1<bool>
000188:0x002835d0:	movem	m_CurrentValues, p_total
000188:0x002835e0:	movem	p_total, p_total
000188:0x002835f0:	rts
HandStartAction::HandStartAction()
//scripts/3_Game/systems\inventory\handstartaction.c
000011:0x002835f8:	move	m_Action, action
000012:0x00283608:	move	m_ActionType, actionType
000012:0x00283618:	rts
HandStartAction::OnEntry()
000017:0x00283828:	call	
000019:0x00283838:	movefm	@c00, e
000019:0x00283848:	cmpcm	m_Player, null
000019:0x00283858:	beq	0x283ef8
000021:0x00283860:	movefm	@c00, e
000021:0x00283870:	movem	hmn, m_Player
000022:0x00283880:	ncalli	DayZPlayer.GetCommandModifier_Weapons()
000022:0x00283888:	movec	hcw, #return
000023:0x00283898:	cmpc	hcw, null
000023:0x002838a8:	beq	0x283e18
000025:0x002838b0:	cmpi	m_ActionType, _i-1
000025:0x002838c0:	bne	0x283a20
000027:0x002838c8:	ncalli	HumanCommandWeapons.StartAction(_i-1, _i-1)
000028:0x002838d8:	movefm	@c00, e
000028:0x002838e8:	movem	o, m_Player
000028:0x002838f8:	call	GetDebugName#206374(o)
000028:0x00283908:	adds	@s05, _s'HCW: ', #return
000028:0x00283918:	moves	@s04, @s05
000028:0x00283928:	adds	@s04, @s04, _s' STS = '
000028:0x00283938:	moves	@s03, @s04
000028:0x00283948:	movefm	@c01, e
000028:0x00283958:	movefm	[0xb5b2afc0], m_Player
000028:0x00283968:	ncalli	DayZPlayer.GetSimulationTimeStamp()
000028:0x00283970:	icall	ToString(#return)
000028:0x00283980:	adds	@s03, @s03, #return
000028:0x00283990:	moves	@s02, @s03
000028:0x002839a0:	adds	@s02, @s02, _s' playing A=-1 AT=-1 fini='
000028:0x002839b0:	moves	@s01, @s02
000028:0x002839c0:	ncalli	HumanCommandWeapons.IsActionFinished()
000028:0x002839c8:	call	ToString(#return)
000028:0x002839d8:	move	#return, value
000028:0x002839e8:	adds	@s01, @s01, #return
000028:0x002839f8:	moves	@s00, @s01
000028:0x00283a08:	call	hndDebugPrint(@s00)
000028:0x00283a18:	jump	0x283e10
000032:0x00283a20:	move	[0xb5bce240], m_Action
000032:0x00283a30:	move	[0xb5bce268], m_ActionType
000032:0x00283a40:	ncalli	HumanCommandWeapons.StartAction([0xb5bce240], [0xb5bce268])
000034:0x00283a50:	ncalli	HumanCommandWeapons.GetRunningAction()
000034:0x00283a58:	move	@m00, #return
000034:0x00283a68:	cmpi	@m00, m_Action
000034:0x00283a78:	bne	0x283cd8
000034:0x00283a80:	ncalli	HumanCommandWeapons.GetRunningActionType()
000034:0x00283a88:	move	@m00, #return
000034:0x00283a98:	cmpi	@m00, m_ActionType
000034:0x00283aa8:	bne	0x283cd8
000035:0x00283ab0:	movefm	@c00, e
000035:0x00283ac0:	movem	o, m_Player
000035:0x00283ad0:	call	GetDebugName#206374(o)
000035:0x00283ae0:	adds	@s09, _s'HCW: ', #return
000035:0x00283af0:	moves	@s08, @s09
000035:0x00283b00:	adds	@s08, @s08, _s' STS = '
000035:0x00283b10:	moves	@s07, @s08
000035:0x00283b20:	movefm	@c01, e
000035:0x00283b30:	movefm	[0xb5b2afc0], m_Player
000035:0x00283b40:	ncalli	DayZPlayer.GetSimulationTimeStamp()
000035:0x00283b48:	icall	ToString(#return)
000035:0x00283b58:	adds	@s07, @s07, #return
000035:0x00283b68:	moves	@s06, @s07
000035:0x00283b78:	adds	@s06, @s06, _s' playing A='
000035:0x00283b88:	moves	@s05, @s06
000035:0x00283b98:	move	enumValue, m_Action
000035:0x00283ba8:	call	EnumToString(_T(WeaponActions), enumValue)
000035:0x00283bc0:	adds	@s05, @s05, #return
000035:0x00283bd0:	moves	@s04, @s05
000035:0x00283be0:	adds	@s04, @s04, _s' AT='
000035:0x00283bf0:	moves	@s03, @s04
000035:0x00283c00:	move	A, m_Action
000035:0x00283c10:	move	AT, m_ActionType
000035:0x00283c20:	call	WeaponActionTypeToString(A, AT)
000035:0x00283c38:	adds	@s03, @s03, #return
000035:0x00283c48:	moves	@s02, @s03
000035:0x00283c58:	adds	@s02, @s02, _s' fini='
000035:0x00283c68:	moves	@s01, @s02
000035:0x00283c78:	ncalli	HumanCommandWeapons.IsActionFinished()
000035:0x00283c80:	call	ToString(#return)
000035:0x00283c90:	move	#return, value
000035:0x00283ca0:	adds	@s01, @s01, #return
000035:0x00283cb0:	moves	@s00, @s01
000035:0x00283cc0:	call	hndDebugPrint(@s00)
000035:0x00283cd0:	jump	0x283e10
000037:0x00283cd8:	move	enumValue, m_Action
000037:0x00283ce8:	call	EnumToString(_T(WeaponActions), enumValue)
000037:0x00283d00:	adds	@s05, _s'HCW: NOT playing A=', #return
000037:0x00283d10:	moves	@s04, @s05
000037:0x00283d20:	adds	@s04, @s04, _s' AT='
000037:0x00283d30:	moves	@s03, @s04
000037:0x00283d40:	move	A, m_Action
000037:0x00283d50:	move	AT, m_ActionType
000037:0x00283d60:	call	WeaponActionTypeToString(A, AT)
000037:0x00283d78:	adds	@s03, @s03, #return
000037:0x00283d88:	moves	@s02, @s03
000037:0x00283d98:	adds	@s02, @s02, _s' fini='
000037:0x00283da8:	moves	@s01, @s02
000037:0x00283db8:	ncalli	HumanCommandWeapons.IsActionFinished()
000037:0x00283dc0:	call	ToString(#return)
000037:0x00283dd0:	move	#return, value
000037:0x00283de0:	adds	@s01, @s01, #return
000037:0x00283df0:	moves	@s00, @s01
000037:0x00283e00:	call	Error(@s00)
000037:0x00283e10:	jump	0x283ee8
000041:0x00283e18:	move	enumValue, m_Action
000041:0x00283e28:	call	EnumToString(_T(WeaponActions), enumValue)
000041:0x00283e40:	adds	@s03, _s'---: remote playing A=', #return
000041:0x00283e50:	moves	@s02, @s03
000041:0x00283e60:	adds	@s02, @s02, _s' AT='
000041:0x00283e70:	moves	@s01, @s02
000041:0x00283e80:	move	A, m_Action
000041:0x00283e90:	move	AT, m_ActionType
000041:0x00283ea0:	call	WeaponActionTypeToString(A, AT)
000041:0x00283eb8:	adds	@s01, @s01, #return
000041:0x00283ec8:	moves	@s00, @s01
000041:0x00283ed8:	call	hndDebugPrint(@s00)
000041:0x00283ee8:	release	hmn
000041:0x00283ef0:	jump	0x283fc8
000045:0x00283ef8:	move	enumValue, m_Action
000045:0x00283f08:	call	EnumToString(_T(WeaponActions), enumValue)
000045:0x00283f20:	adds	@s03, _s'---: warning, no player wants to play A=', #return
000045:0x00283f30:	moves	@s02, @s03
000045:0x00283f40:	adds	@s02, @s02, _s' AT='
000045:0x00283f50:	moves	@s01, @s02
000045:0x00283f60:	move	A, m_Action
000045:0x00283f70:	move	AT, m_ActionType
000045:0x00283f80:	call	WeaponActionTypeToString(A, AT)
000045:0x00283f98:	adds	@s01, @s01, #return
000045:0x00283fa8:	moves	@s00, @s01
000045:0x00283fb8:	call	hndDebugPrint(@s00)
000045:0x00283fc8:	rts
HandStartAction::OnExit()
000050:0x00283fd0:	call	
000050:0x00283fe0:	rts
HandStartAction::IsIdle()
000053:0x00283fe8:	imove	#return, 0x000000
000053:0x00283ff8:	rts
000053:0x00284000:	rts
PPERUndergroundAcco::SetEyeAccommodation()
//scripts/3_Game/ppemanager\requesters\pperundergroundacco.c
000005:0x00284008:	call	
000005:0x00284030:	rts
HintPage::GetHeadlineText()
//scripts/3_Game/gui\hints\hintpage.c
000013:0x00284038:	moves	#return, m_Headline
000013:0x00284048:	rts
000013:0x00284050:	rts
HintPage::GetDescriptionText()
000017:0x00284058:	moves	#return, m_Description
000017:0x00284068:	rts
000017:0x00284070:	rts
HintPage::GetImagePath()
000021:0x00284078:	moves	#return, m_ImagePath
000021:0x00284088:	rts
000021:0x00284090:	rts
SEffectManager::PlayInWorld()
//scripts/3_Game/effectmanager.c
000046:0x002840c0:	call	
000048:0x002840d0:	call	EffectRegister(eff)
000048:0x002840e0:	move	id, #return
000050:0x002840f0:	call	
000051:0x00284100:	call	
000053:0x00284110:	move	#return, id
000053:0x00284120:	rts
000053:0x00284128:	rts
SEffectManager::PlayOnObject()
000069:0x002841d8:	call	
000071:0x002841e8:	call	EffectRegister(eff)
000071:0x002841f8:	move	id, #return
000073:0x00284208:	cmpcm	obj, null
000073:0x00284218:	bne	0x284248
000075:0x00284220:	icall	ErrorEx(_s'Parent object is null.', _i1)
000076:0x00284230:	call	
000076:0x00284240:	jump	0x284260
000080:0x00284248:	ncalli	Object.GetPosition()
000080:0x00284250:	call	
000083:0x00284260:	call	
000084:0x00284270:	call	
000085:0x00284280:	call	
000087:0x00284290:	cmpi	force_rotation_relative_to_world, _i0
000087:0x002842a0:	beq	0x284310
000089:0x002842a8:	movefm	@c02, eff
000089:0x002842b8:	icall	SafeCastType([0xb5b35a78], @c01, @c02)
000089:0x002842d0:	movetm	eff_particle, @c01
000091:0x002842e0:	cmpcm	eff_particle, null
000091:0x002842f0:	beq	0x284308
000093:0x002842f8:	call	
000093:0x00284308:	release	eff_particle
000097:0x00284310:	call	
000099:0x00284320:	move	#return, id
000099:0x00284330:	rts
000099:0x00284338:	rts
SEffectManager::Stop()
000108:0x00284390:	icall	
000108:0x002843a0:	movetm	eff, #return
000110:0x002843b0:	cmpcm	eff, null
000110:0x002843c0:	beq	0x2843e0
000112:0x002843c8:	call	
000112:0x002843d8:	jump	0x284420
000116:0x002843e0:	icall	Format(_s'Failed to stop Effect with ID %1. The ID is not registered in m_EffectsMap!', effect_id, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000116:0x00284410:	icall	ErrorEx(#return, _i2)
000116:0x00284420:	release	eff
000116:0x00284428:	rts
SEffectManager::CreateSound()
000142:0x00284458:	new	effect_sound, EffectSound
000143:0x00284478:	call	
000144:0x00284488:	call	
000145:0x00284498:	call	
000146:0x002844a8:	call	
000147:0x002844b8:	call	
000148:0x002844c8:	call	
000150:0x002844d8:	call	EffectRegister(effect_sound)
000152:0x002844e8:	movem	#return, effect_sound
000152:0x002844f8:	release	effect_sound
000152:0x00284500:	rts
000152:0x00284508:	release	effect_sound
000152:0x00284510:	rts
SEffectManager::PlaySound()
000167:0x00284540:	call	CreateSound(sound_set, position, play_fade_in, stop_fade_out, loop, false)
000167:0x00284568:	movem	effect_sound, #return
000167:0x00284578:	release	#return
000169:0x00284580:	call	
000171:0x00284590:	movem	#return, effect_sound
000171:0x002845a0:	release	effect_sound
000171:0x002845a8:	rts
000171:0x002845b0:	release	effect_sound
000171:0x002845b8:	rts
SEffectManager::PlaySoundParams()
000186:0x002845e8:	icall	
000186:0x002845f0:	call	CreateSound(#return, position, play_fade_in, stop_fade_out, loop, false)
000186:0x00284618:	movem	effect_sound, #return
000186:0x00284628:	release	#return
000188:0x00284630:	call	
000188:0x00284640:	movem	params, params
000188:0x00284650:	release	params
000190:0x00284658:	movem	#return, effect_sound
000190:0x00284668:	release	effect_sound
000190:0x00284670:	rts
000190:0x00284678:	release	effect_sound
000190:0x00284680:	rts
SEffectManager::PlaySoundCachedParams()
000205:0x002846d8:	call	GetCachedSoundParam(sound_set)
000205:0x002846e8:	movem	params, #return
000205:0x002846f8:	release	#return
000207:0x00284700:	icall	
000207:0x00284708:	call	CreateSound(#return, position, play_fade_in, stop_fade_out, loop, false)
000207:0x00284730:	movem	effect_sound, #return
000207:0x00284740:	release	#return
000209:0x00284748:	call	
000209:0x00284758:	movem	params, params
000209:0x00284768:	release	params
000211:0x00284770:	movem	#return, effect_sound
000211:0x00284780:	release	params
000211:0x00284788:	release	effect_sound
000211:0x00284790:	rts
000211:0x00284798:	release	params
000211:0x002847a0:	release	effect_sound
000211:0x002847a8:	rts
SEffectManager::PlaySoundEnviroment()
000226:0x002847d8:	call	CreateSound(sound_set, position, play_fade_in, stop_fade_out, loop, true)
000226:0x00284800:	movem	effect_sound, #return
000226:0x00284810:	release	#return
000228:0x00284818:	call	
000230:0x00284828:	movem	#return, effect_sound
000230:0x00284838:	release	effect_sound
000230:0x00284840:	rts
000230:0x00284848:	release	effect_sound
000230:0x00284850:	rts
SEffectManager::PlaySoundOnObject()
000245:0x00284880:	ncalli	Object.GetPosition()
000245:0x00284888:	call	CreateSound(sound_set, #return, play_fade_in, stop_fade_out, loop, _i0)
000245:0x002848b0:	movem	effect_sound, #return
000245:0x002848c0:	release	#return
000247:0x002848c8:	call	
000248:0x002848d8:	call	
000249:0x002848e8:	call	
000251:0x002848f8:	movem	#return, effect_sound
000251:0x00284908:	release	effect_sound
000251:0x00284910:	rts
000251:0x00284918:	release	effect_sound
000251:0x00284920:	rts
SEffectManager::DestroyEffect()
000269:0x00284928:	cmpcm	effect, null
000269:0x00284938:	beq	0x284948
000272:0x00284940:	delete	effect
000272:0x00284948:	rts
SEffectManager::IsEffectExist()
000283:0x00284950:	cmpi	m_IsCleanup, _i0
000283:0x00284960:	bne	0x2849d8
000284:0x00284968:	icall	
000284:0x00284978:	movec	@c00, #return
000284:0x00284988:	cmpc	@c00, null
000284:0x00284998:	beq	0x2849b8
000284:0x002849a0:	imove	#return, 0x000001
000284:0x002849b0:	jump	0x2849c8
000284:0x002849b8:	imove	#return, 0x000000
000284:0x002849c8:	rts
000284:0x002849d0:	jump	0x2849f0
000286:0x002849d8:	imove	#return, 0x000000
000286:0x002849e8:	rts
000286:0x002849f0:	rts
SEffectManager::GetEffectByID()
000296:0x002849f8:	cmpi	m_IsCleanup, _i0
000296:0x00284a08:	bne	0x284a40
000297:0x00284a10:	icall	
000297:0x00284a20:	movetm	#return, #return
000297:0x00284a30:	rts
000297:0x00284a38:	jump	0x284a58
000299:0x00284a40:	movetm	#return, null
000299:0x00284a50:	rts
000299:0x00284a58:	rts
SEffectManager::EffectRegister()
000311:0x00284ad8:	call	
000311:0x00284ae8:	cmpi	#return, _i0
000311:0x00284af8:	beq	0x284b78
000313:0x00284b00:	call	
000313:0x00284b10:	icall	Format(_s'Attempted to register Effect '%1' which was already registered.', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000313:0x00284b40:	icall	ErrorEx(#return, _i0)
000314:0x00284b50:	call	
000314:0x00284b60:	move	#return, #return
000314:0x00284b70:	rts
000319:0x00284b78:	cmpi	m_IsCleanup, _i0
000319:0x00284b88:	bne	0x284be8
000321:0x00284b90:	call	GetFreeEffectID()
000321:0x00284ba0:	move	id, #return
000322:0x00284bb0:	movefm	@c00, effect
000322:0x00284bc0:	icall	
000323:0x00284bd0:	call	
000323:0x00284be0:	jump	0x284bf8
000326:0x00284be8:	icall	ErrorEx(_s'Attempted to register Effect while SEffectManager is cleaning up, request ignored.', _i1)
000328:0x00284bf8:	move	#return, id
000328:0x00284c08:	rts
000328:0x00284c10:	rts
SEffectManager::EffectUnregister()
000340:0x00284c40:	cmpi	m_IsCleanup, _i0
000340:0x00284c50:	beq	0x284c60
000341:0x00284c58:	rts
000344:0x00284c60:	icall	
000344:0x00284c70:	cmpi	#return, _i0
000344:0x00284c80:	beq	0x284ca8
000346:0x00284c88:	call	
000347:0x00284c98:	icall	
000350:0x00284ca8:	icall	
000350:0x00284cb8:	move	@m00, #return
000350:0x00284cc8:	cmpi	@m00, _i-1
000350:0x00284cd8:	bne	0x284cf0
000352:0x00284ce0:	icall	
000352:0x00284cf0:	release	effect
000352:0x00284cf8:	rts
SEffectManager::EffectUnregisterEx()
000362:0x00284d00:	call	
000362:0x00284d10:	call	EffectUnregister(#return)
000362:0x00284d20:	rts
SEffectManager::GetFreeEffectID()
000373:0x00284d80:	ncalli	array<int>.Count()
000373:0x00284d88:	move	@m00, #return
000373:0x00284d98:	cmpi	@m00, _i0
000373:0x00284da8:	ble	0x284de8
000375:0x00284db0:	icall	
000375:0x00284dc0:	move	return_id, #return
000376:0x00284dd0:	ncalli	array<int>.Remove(_i0)
000376:0x00284de0:	jump	0x284e00
000380:0x00284de8:	move	return_id, m_HighestFreeEffectID
000381:0x00284df8:	inc	m_HighestFreeEffectID
000384:0x00284e00:	move	#return, return_id
000384:0x00284e10:	rts
000384:0x00284e18:	rts
SEffectManager::DestroySound()
000403:0x00284e20:	call	DestroyEffect(sound_effect)
000404:0x00284e30:	imove	#return, 0x000001
000404:0x00284e40:	rts
000404:0x00284e48:	rts
SEffectManager::GetCachedSoundParam()
000415:0x00284e78:	icall	
000415:0x00284e88:	cmpi	#return, _i0
000415:0x00284e98:	bne	0x284ee8
000417:0x00284ea0:	new	params, SoundParams
000418:0x00284ec8:	movefm	@c00, params
000418:0x00284ed8:	icall	
000420:0x00284ee8:	movem	#return, params
000420:0x00284ef8:	release	params
000420:0x00284f00:	rts
000420:0x00284f08:	release	params
000420:0x00284f10:	rts
SEffectManager::Event_OnFrameUpdate()
000451:0x00284f18:	icall	
000451:0x00284f48:	rts
SEffectManager::Init()
000469:0x00284f50:	new	m_EffectsMap, map<int,@Effect>
000470:0x00284f70:	new	m_FreeEffectIDs, array<int>
000471:0x00284f90:	new	m_ParamsMap, map<string,@SoundParams>
000472:0x00284fb0:	new	Event_OnFrameUpdate, ScriptInvoker
000474:0x00284fd0:	imove	m_IsInitialized, 0x000001
000474:0x00284fe0:	rts
SEffectManager::Cleanup()
000484:0x00285108:	cmpi	m_IsInitialized, _i0
000484:0x00285118:	bne	0x285128
000485:0x00285120:	rts
000487:0x00285128:	imove	m_IsCleanup, 0x000001
000490:0x00285138:	ncall	GetGame()
000490:0x00285140:	cmpc	#return, null
000490:0x00285150:	beq	0x285260
000490:0x00285158:	ncall	GetGame()
000490:0x00285160:	ncalli	CGame.IsDedicatedServer()
000490:0x00285168:	cmpi	#return, _i0
000490:0x00285178:	beq	0x285260
000492:0x00285180:	ncalli	map<string,@SoundParams>.Count()
000492:0x00285188:	move	@m00, #return
000492:0x00285198:	cmpi	@m00, _i0
000492:0x002851a8:	ble	0x2851f0
000493:0x002851b0:	icall	Format(_s'SEffectManager containing SoundParams on server.', _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000493:0x002851e0:	icall	ErrorEx(#return, _i1)
000495:0x002851f0:	ncalli	map<int,@Effect>.Count()
000495:0x002851f8:	move	@m00, #return
000495:0x00285208:	cmpi	@m00, _i0
000495:0x00285218:	ble	0x285260
000496:0x00285220:	icall	Format(_s'SEffectManager containing Effect on server.', _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000496:0x00285250:	icall	ErrorEx(#return, _i1)
000500:0x00285260:	ncalli	map<string,@SoundParams>.Clear()
000510:0x00285268:	ncalli	map<int,@Effect>.End()
000510:0x00285270:	move	#cnt, #return
000510:0x00285280:	ncalli	map<int,@Effect>.Begin()
000510:0x00285288:	move	#iterator, #return
000510:0x00285298:	jump	0x2852d0
000510:0x002852a0:	move	[0xb5cb1c60], #iterator
000510:0x002852b0:	ncalli	map<int,@Effect>.Next([0xb5cb1c60])
000510:0x002852c0:	move	#iterator, #return
000510:0x002852d0:	cmpi	#iterator, #cnt
000510:0x002852e0:	beq	0x285340
000510:0x002852e8:	icall	
000510:0x002852f8:	move	id, #return
000510:0x00285308:	icall	
000510:0x00285318:	movetm	eff, #return
000512:0x00285328:	call	
000512:0x00285338:	jump	0x2852a0
000512:0x00285340:	release	eff
000523:0x00285348:	ncalli	map<int,@Effect>.Clear()
000526:0x00285350:	imove	m_HighestFreeEffectID, 0x000001
000527:0x00285360:	ncalli	ScriptInvoker.Clear()
000528:0x00285368:	imove	m_IsCleanup, 0x000000
000528:0x00285378:	rts
DayZCreature::IsDayZCreature()
//scripts/3_Game/entities\dayzanimal.c
000057:0x00285380:	imove	#return, 0x000001
000057:0x00285390:	rts
000057:0x00285398:	rts
DayZCreature::CanBeSkinned()
000062:0x002853a0:	imove	#return, 0x000001
000062:0x002853b0:	rts
000062:0x002853b8:	rts
DayZCreature::IsIgnoredByConstruction()
000067:0x002853c0:	call	
000067:0x002853d0:	move	#return, #return
000067:0x002853e0:	rts
000067:0x002853e8:	rts
DayZCreature::IsManagingArrows()
000072:0x002853f0:	imove	#return, 0x000001
000072:0x00285400:	rts
000072:0x00285408:	rts
DayZCreature::AddArrow()
000077:0x00285618:	ncalli	array<string>.Clear()
000078:0x00285620:	movefm	[0xb5b662b0], ARRAY_STRING
000078:0x00285630:	ncalli	DayZCreature.GetActionComponentNameList(componentIndex, [0xb5b662b0], _s'fire')
000080:0x00285648:	imove	pivot, 0xffffffff
000083:0x00285658:	imove	i, 0x000000
000083:0x00285668:	jump	0x285688
000083:0x00285670:	move	@m00, i
000083:0x00285680:	inc	i
000083:0x00285688:	ncalli	array<string>.Count()
000083:0x00285690:	cmpi	i, #return
000083:0x002856a0:	bge	0x2856f8
000083:0x002856a8:	cmpi	pivot, _i-1
000083:0x002856b8:	bne	0x2856f8
000085:0x002856c0:	icall	
000085:0x002856d0:	ncalli	DayZCreature.GetBoneIndexByName(#return)
000085:0x002856e0:	move	pivot, #return
000085:0x002856f0:	jump	0x285670
000091:0x002856f8:	cmpi	pivot, _i-1
000091:0x00285708:	bne	0x285728
000093:0x00285710:	icall	GetTransform(this, parentTransMat)
000093:0x00285720:	jump	0x2857c8
000098:0x00285728:	scalev	@v01, closeBoneRotWS, RAD2DEG
000098:0x00285738:	movev	@v00, @v01
000098:0x00285748:	icall	YawPitchRollMatrix(@v00, rotMatrix)
000100:0x00285758:	cfv	@v00, rotMatrix[_i0]
000100:0x00285768:	ctv	parentTransMat[_i0], @v00
000101:0x00285778:	cfv	@v00, rotMatrix[_i1]
000101:0x00285788:	ctv	parentTransMat[_i1], @v00
000102:0x00285798:	cfv	@v00, rotMatrix[_i2]
000102:0x002857a8:	ctv	parentTransMat[_i2], @v00
000103:0x002857b8:	ctv	parentTransMat[_i3], closeBonePosWS
000106:0x002857c8:	icall	GetTransform(arrow, arrowTransMat)
000107:0x002857d8:	icall	MatrixInvMultiply4(parentTransMat, arrowTransMat, arrowTransMat)
000109:0x002857f0:	icall	MatrixOrthogonalize4(arrowTransMat)
000110:0x00285800:	movefm	[0xd3172f58], arrow
000110:0x00285810:	ncall	SetTransform([0xd3172f58], arrowTransMat)
000112:0x00285820:	movefm	[0xd3173778], arrow
000112:0x00285830:	ncall	AddChild(this, [0xd3173778], pivot, _i0)
000112:0x00285848:	rts
DayZCreatureAI::DayZCreatureAI()
000140:0x00285880:	call	
000141:0x00285890:	ncall	SetFlags(this, _i8, false)
000141:0x002858a8:	rts
DayZCreatureAI::IncreaseEffectTriggerCount()
000147:0x002858b0:	move	@m00, m_EffectTriggerCount
000147:0x002858c0:	inc	m_EffectTriggerCount
000147:0x002858c8:	rts
DayZCreatureAI::DecreaseEffectTriggerCount()
000152:0x002858d0:	move	@m00, m_EffectTriggerCount
000152:0x002858e0:	dec	m_EffectTriggerCount
000152:0x002858e8:	rts
DayZCreatureAI::AddDamageSphere#138646()
000157:0x002858f0:	movefm	@c00, damage_params
000157:0x00285900:	movefm	@c01, damage_params
000157:0x00285910:	movefm	@c02, damage_params
000157:0x00285920:	movefm	@c03, damage_params
000157:0x00285930:	movefm	@c04, damage_params
000157:0x00285940:	moves	[0xb5bb9d58], m_sBoneName
000157:0x00285950:	moves	[0xb5bb9d80], m_sAmmoName
000157:0x00285960:	move	[0xb5bb9da8], m_fRadius
000157:0x00285970:	move	[0xb5bb9dd0], m_fDuration
000157:0x00285980:	move	[0xb5bb9df8], m_bInvertTeams
000157:0x00285990:	ncalli	DayZCreatureAI.AddDamageSphere([0xb5bb9d58], [0xb5bb9d80], [0xb5bb9da8], [0xb5bb9dd0], [0xb5bb9df8])
000157:0x002859b0:	rts
DayZCreatureAI::EEKilled()
000162:0x002859b8:	call	
000163:0x002859c8:	call	
000163:0x002859e0:	release	#return
000163:0x002859e8:	rts
DayZCreatureAI::GetBootsType()
000168:0x002859f0:	imove	#return, 0x000000
000168:0x00285a00:	rts
000168:0x00285a08:	rts
DayZCreatureAI::PlaySound#138709()
000173:0x00285a60:	cmpcm	so, NULL
000173:0x00285a70:	bne	0x285a90
000175:0x00285a78:	movetm	#return, NULL
000175:0x00285a88:	rts
000178:0x00285a90:	ncalli	DayZCreatureAI.GetPosition()
000178:0x00285a98:	ncalli	SoundObject.SetPosition(#return)
000179:0x00285aa8:	ncall	GetGame()
000179:0x00285ab0:	ncalli	CGame.GetSoundScene()
000179:0x00285ab8:	movefm	[0xb5c2ca40], so
000179:0x00285ac8:	movefm	[0xb5c2ca68], sob
000179:0x00285ad8:	ncalli	AbstractSoundScene.Play3D([0xb5c2ca40], [0xb5c2ca68])
000179:0x00285ae8:	movetm	wave, #return
000180:0x00285af8:	movem	#return, wave
000180:0x00285b08:	release	wave
000180:0x00285b10:	rts
000180:0x00285b18:	release	wave
000180:0x00285b20:	rts
DayZCreatureAI::OnSoundEvent()
000185:0x00285b50:	ncalli	DayZCreatureAI.GetCreatureAIType()
000185:0x00285b58:	call	
000185:0x00285b68:	movem	sound_event, #return
000185:0x00285b78:	release	#return
000186:0x00285b80:	cmpcm	sound_event, NULL
000186:0x00285b90:	beq	0x285ba8
000188:0x00285b98:	call	
000188:0x00285ba8:	release	sound_event
000188:0x00285bb0:	rts
DayZCreatureAI::OnSoundVoiceEvent()
000194:0x00285c10:	ncalli	DayZCreatureAI.GetCreatureAIType()
000194:0x00285c18:	call	
000194:0x00285c28:	movem	voice_event, #return
000194:0x00285c38:	release	#return
000195:0x00285c40:	cmpcm	voice_event, NULL
000195:0x00285c50:	beq	0x285c68
000197:0x00285c58:	call	
000197:0x00285c68:	release	voice_event
000197:0x00285c70:	rts
DayZCreatureAI::OnStepEvent()
000203:0x00285ca0:	ncalli	DayZCreatureAI.GetCreatureAIType()
000203:0x00285ca8:	call	
000203:0x00285cb8:	movem	step_event, #return
000203:0x00285cc8:	release	#return
000204:0x00285cd0:	cmpcm	step_event, NULL
000204:0x00285ce0:	beq	0x285cf8
000206:0x00285ce8:	call	
000206:0x00285cf8:	release	step_event
000206:0x00285d00:	rts
DayZCreatureAI::OnDamageEvent()
000212:0x00285d30:	ncalli	DayZCreatureAI.GetCreatureAIType()
000212:0x00285d38:	call	
000212:0x00285d48:	movem	damage_event, #return
000212:0x00285d58:	release	#return
000213:0x00285d60:	cmpcm	damage_event, NULL
000213:0x00285d70:	beq	0x285d88
000215:0x00285d78:	call	
000215:0x00285d88:	release	damage_event
000215:0x00285d90:	rts
DayZCreatureAI::RegisterAnimEvents()
000221:0x00285f78:	ncalli	DayZCreatureAI.RegisterAnimationEvent(_s'Sound', _s'OnSoundEvent')
000221:0x00285f88:	cmpi	#return, _i0
000221:0x00285f98:	bne	0x285fb0
000223:0x00285fa0:	icall	Print(_s'Error registering anim. event (Sound)')
000226:0x00285fb0:	ncalli	DayZCreatureAI.RegisterAnimationEvent(_s'SoundVoice', _s'OnSoundVoiceEvent')
000226:0x00285fc0:	cmpi	#return, _i0
000226:0x00285fd0:	bne	0x285fe8
000228:0x00285fd8:	icall	Print(_s'Error registering anim. event (SoundVoice)')
000231:0x00285fe8:	ncall	GetGame()
000231:0x00285ff0:	ncalli	CGame.IsDedicatedServer()
000231:0x00285ff8:	cmpi	#return, _i0
000231:0x00286008:	bne	0x286048
000233:0x00286010:	ncalli	DayZCreatureAI.RegisterAnimationEvent(_s'Step', _s'OnStepEvent')
000233:0x00286020:	cmpi	#return, _i0
000233:0x00286030:	bne	0x286048
000235:0x00286038:	icall	Print(_s'Error registering anim. event (Step)')
000239:0x00286048:	ncalli	DayZCreatureAI.RegisterAnimationEvent(_s'Damage', _s'OnDamageEvent')
000239:0x00286058:	cmpi	#return, _i0
000239:0x00286068:	bne	0x286080
000241:0x00286070:	icall	Print(_s'Error registering anim. event (Damage)')
000241:0x00286080:	rts
DayZCreatureAI::ProcessSoundEvent()
000247:0x00286108:	ncall	GetGame()
000247:0x00286110:	ncalli	CGame.IsDedicatedServer()
000247:0x00286118:	cmpi	#return, _i0
000247:0x00286128:	bne	0x2861e0
000249:0x00286130:	call	
000249:0x00286140:	movem	objectBuilder, #return
000249:0x00286150:	release	#return
000250:0x00286158:	cmpmc	NULL, objectBuilder
000250:0x00286168:	beq	0x2861d8
000252:0x00286170:	ncalli	DayZCreatureAI.GetPosition()
000252:0x00286178:	ncalli	SoundObjectBuilder.UpdateEnvSoundControllers(#return)
000253:0x00286188:	call	
000253:0x00286198:	movem	soundObject, #return
000253:0x002861a8:	release	#return
000254:0x002861b0:	call	
000254:0x002861c8:	release	#return
000254:0x002861d0:	release	soundObject
000254:0x002861d8:	release	objectBuilder
000258:0x002861e0:	ncall	GetGame()
000258:0x002861e8:	ncalli	CGame.IsServer()
000258:0x002861f0:	cmpi	#return, _i0
000258:0x00286200:	beq	0x286278
000260:0x00286208:	movefm	@c00, sound_event
000260:0x00286218:	cmpcm	m_NoiseParams, NULL
000260:0x00286228:	beq	0x286278
000261:0x00286230:	ncall	GetGame()
000261:0x00286238:	ncalli	CGame.GetNoiseSystem()
000261:0x00286240:	movefm	@c02, sound_event
000261:0x00286250:	movefm	@c01, m_NoiseParams
000261:0x00286260:	icall	
000261:0x00286278:	rts
DayZCreatureAI::ProcessSoundVoiceEvent()
000267:0x002862d0:	ncall	GetGame()
000267:0x002862d8:	ncalli	CGame.IsDedicatedServer()
000267:0x002862e0:	cmpi	#return, _i0
000267:0x002862f0:	bne	0x2863b8
000269:0x002862f8:	call	
000269:0x00286308:	movem	objectBuilder, #return
000269:0x00286318:	release	#return
000270:0x00286320:	cmpmc	NULL, objectBuilder
000270:0x00286330:	beq	0x2863b0
000272:0x00286338:	ncalli	DayZCreatureAI.GetPosition()
000272:0x00286340:	ncalli	SoundObjectBuilder.UpdateEnvSoundControllers(#return)
000273:0x00286350:	call	
000273:0x00286360:	movem	soundObject, #return
000273:0x00286370:	release	#return
000274:0x00286378:	call	
000275:0x00286388:	call	
000275:0x002863a0:	release	#return
000275:0x002863a8:	release	soundObject
000275:0x002863b0:	release	objectBuilder
000279:0x002863b8:	ncall	GetGame()
000279:0x002863c0:	ncalli	CGame.IsServer()
000279:0x002863c8:	cmpi	#return, _i0
000279:0x002863d8:	beq	0x286450
000281:0x002863e0:	movefm	@c00, sound_event
000281:0x002863f0:	cmpcm	m_NoiseParams, NULL
000281:0x00286400:	beq	0x286450
000282:0x00286408:	ncall	GetGame()
000282:0x00286410:	ncalli	CGame.GetNoiseSystem()
000282:0x00286418:	movefm	@c02, sound_event
000282:0x00286428:	movefm	@c01, m_NoiseParams
000282:0x00286438:	icall	
000282:0x00286450:	rts
DayZCreatureAI::ProcessStepEvent()
000288:0x002864d8:	call	
000288:0x002864e8:	ncall	Hash(#return)
000288:0x002864f8:	call	
000288:0x00286508:	movem	soundBuilder, #return
000288:0x00286518:	release	#return
000289:0x00286520:	cmpcm	soundBuilder, NULL
000289:0x00286530:	bne	0x286548
000290:0x00286538:	release	soundBuilder
000290:0x00286540:	rts
000292:0x00286548:	ncalli	DayZCreatureAI.GetPosition()
000292:0x00286550:	ncalli	SoundObjectBuilder.UpdateEnvSoundControllers(#return)
000293:0x00286560:	call	
000293:0x00286570:	movem	soundObject, #return
000293:0x00286580:	release	#return
000294:0x00286588:	call	
000295:0x00286598:	call	
000295:0x002865b0:	release	#return
000295:0x002865b8:	release	soundBuilder
000295:0x002865c0:	release	soundObject
000295:0x002865c8:	rts
DayZCreatureAI::ProcessDamageEvent()
000302:0x002865d0:	movefm	@c00, damage_event
000302:0x002865e0:	movem	damage_params, m_DamageParams
000302:0x002865f0:	call	
000302:0x00286600:	rts
DayZCreatureAI::AttenuateSoundIfNecessary()
000307:0x00286638:	ncall	GetGame()
000307:0x00286640:	ncalli	CGame.GetPlayer()
000307:0x00286648:	movec	@c00, #return
000307:0x00286658:	cmpc	@c00, NULL
000307:0x00286668:	beq	0x286700
000307:0x00286670:	ncalli	DayZCreatureAI.IsSoundInsideBuilding()
000307:0x00286678:	move	@m00, #return
000307:0x00286688:	ncall	GetGame()
000307:0x00286690:	ncalli	CGame.GetPlayer()
000307:0x00286698:	ncalli	DayZPlayer.IsSoundInsideBuilding()
000307:0x002866a0:	cmpi	@m00, #return
000307:0x002866b0:	bne	0x2866e8
000307:0x002866b8:	ncall	GetGame()
000307:0x002866c0:	ncalli	CGame.GetPlayer()
000307:0x002866c8:	ncalli	DayZPlayer.IsCameraInsideVehicle()
000307:0x002866d0:	cmpi	#return, _i0
000307:0x002866e0:	beq	0x286700
000309:0x002866e8:	ncalli	SoundObject.SetKind(_i9)
000309:0x002866f8:	jump	0x286710
000313:0x00286700:	ncalli	SoundObject.SetKind(_i1)
000313:0x00286710:	rts
DayZCreatureAI::ResistContaminatedEffect()
000319:0x00286718:	imove	#return, 0x000000
000319:0x00286728:	rts
000319:0x00286730:	rts
DayZCreatureAI::IsDanger()
000329:0x00286738:	imove	#return, 0x000000
000329:0x00286748:	rts
000329:0x00286750:	rts
DayZCreatureAI::CaptureSound()
000334:0x00286758:	moves	#return, _s''
000334:0x00286768:	rts
000334:0x00286770:	rts
DayZCreatureAI::ReleaseSound()
000339:0x00286778:	moves	#return, _s''
000339:0x00286788:	rts
000339:0x00286790:	rts
DayZAnimal::DayZAnimal()
000461:0x00286798:	imove	m_DamageHitToProcess, 0x000000
000461:0x002867a8:	imove	m_DamageHitType, 0x000000
000461:0x002867b8:	imove	m_DamageHitDirection, 0x000000
000466:0x002867c8:	new	m_HitComponentsForAI, array<@DayZAIHitComponent>
000468:0x002867e8:	call	
000471:0x002867f8:	call	
000471:0x00286808:	call	
000471:0x00286818:	movev	m_DefaultHitPosition, #return
000471:0x00286828:	rts
DayZAnimal::IsHealthVisible()
000476:0x00286830:	imove	#return, 0x000000
000476:0x00286840:	rts
000476:0x00286848:	rts
DayZAnimal::IsAnimal()
000481:0x00286850:	imove	#return, 0x000001
000481:0x00286860:	rts
000481:0x00286868:	rts
DayZAnimal::IsInventoryVisible()
000486:0x00286870:	imove	#return, 0x000000
000486:0x00286880:	rts
000486:0x00286888:	rts
DayZAnimal::GetHideIconMask()
000491:0x00286890:	imove	#return, 0x000001
000491:0x002868a0:	rts
000491:0x002868a8:	rts
DayZAnimal::CommandHandler()
000503:0x00286940:	ncalli	DayZAnimal.GetInputController()
000503:0x00286948:	movec	inputController, #return
000506:0x00286958:	call	
000506:0x00286970:	cmpi	#return, _i0
000506:0x00286980:	beq	0x286990
000508:0x00286988:	rts
000511:0x00286990:	call	
000511:0x002869a8:	cmpi	#return, _i0
000511:0x002869b8:	beq	0x2869c8
000513:0x002869c0:	rts
000516:0x002869c8:	cmpi	currentCommandFinished, _i0
000516:0x002869d8:	beq	0x286a10
000518:0x002869e0:	cmpi	currentCommandID, _i52
000518:0x002869f0:	bne	0x286a00
000520:0x002869f8:	ncalli	DayZAnimal.SignalAIAttackEnded()
000523:0x00286a00:	ncalli	DayZAnimal.StartCommand_Move()
000525:0x00286a08:	rts
000529:0x00286a10:	call	
000529:0x00286a28:	cmpi	#return, _i0
000529:0x00286a38:	beq	0x286a48
000531:0x00286a40:	rts
000534:0x00286a48:	call	
000534:0x00286a58:	cmpi	#return, _i0
000534:0x00286a68:	beq	0x286a98
000536:0x00286a70:	cmpi	currentCommandID, _i52
000536:0x00286a80:	bne	0x286a90
000538:0x00286a88:	ncalli	DayZAnimal.SignalAIAttackEnded()
000540:0x00286a90:	rts
000543:0x00286a98:	cmpi	currentCommandID, _i51
000543:0x00286aa8:	bne	0x286b18
000545:0x00286ab0:	ncalli	DayZAnimalInputController.IsJump()
000545:0x00286ab8:	cmpi	#return, _i0
000545:0x00286ac8:	beq	0x286ae0
000547:0x00286ad0:	ncalli	DayZAnimal.StartCommand_Jump()
000548:0x00286ad8:	rts
000551:0x00286ae0:	ncalli	DayZAnimalInputController.IsAttack()
000551:0x00286ae8:	cmpi	#return, _i0
000551:0x00286af8:	beq	0x286b18
000553:0x00286b00:	ncalli	DayZAnimal.StartCommand_Attack()
000554:0x00286b08:	ncalli	DayZAnimal.SignalAIAttackStarted()
000555:0x00286b10:	rts
000560:0x00286b18:	call	
000560:0x00286b30:	cmpi	#return, _i0
000560:0x00286b40:	beq	0x286b50
000562:0x00286b48:	rts
000562:0x00286b50:	rts
DayZAnimal::ModCommandHandlerBefore()
000574:0x00286b58:	imove	#return, 0x000000
000574:0x00286b68:	rts
000574:0x00286b70:	rts
DayZAnimal::ModCommandHandlerInside()
000579:0x00286b78:	imove	#return, 0x000000
000579:0x00286b88:	rts
000579:0x00286b90:	rts
DayZAnimal::ModCommandHandlerAfter()
000584:0x00286b98:	imove	#return, 0x000000
000584:0x00286ba8:	rts
000584:0x00286bb0:	rts
DayZAnimal::HandleDeath()
000593:0x00286be8:	ncalli	DayZAnimalInputController.IsDead()
000593:0x00286bf0:	cmpi	#return, _i0
000593:0x00286c00:	beq	0x286cc0
000595:0x00286c08:	cmpi	currentCommandID, _i57
000595:0x00286c18:	bne	0x286c38
000597:0x00286c20:	imove	#return, 0x000001
000597:0x00286c30:	rts
000600:0x00286c38:	cmpi	m_DamageHitToProcess, _i0
000600:0x00286c48:	beq	0x286c98
000602:0x00286c50:	imove	m_DamageHitToProcess, 0x000000
000604:0x00286c60:	move	[0xb5be5908], m_DamageHitType
000604:0x00286c70:	move	[0xb5be5930], m_DamageHitDirection
000604:0x00286c80:	ncalli	DayZAnimal.StartCommand_Death([0xb5be5908], [0xb5be5930])
000604:0x00286c90:	jump	0x286ca8
000608:0x00286c98:	ncalli	DayZAnimal.StartCommand_Death(_i0, _i0)
000611:0x00286ca8:	imove	#return, 0x000001
000611:0x00286cb8:	rts
000614:0x00286cc0:	imove	#return, 0x000000
000614:0x00286cd0:	rts
000614:0x00286cd8:	rts
DayZAnimal::HandleDamageHit()
000619:0x00286d10:	cmpi	m_DamageHitToProcess, _i0
000619:0x00286d20:	beq	0x286d98
000621:0x00286d28:	imove	m_DamageHitToProcess, 0x000000
000623:0x00286d38:	cmpi	currentCommandID, _i56
000623:0x00286d48:	beq	0x286d80
000625:0x00286d50:	move	[0xb5be5958], m_DamageHitType
000625:0x00286d60:	move	[0xb5be5980], m_DamageHitDirection
000625:0x00286d70:	ncalli	DayZAnimal.StartCommand_Hit([0xb5be5958], [0xb5be5980])
000627:0x00286d80:	imove	#return, 0x000001
000627:0x00286d90:	rts
000629:0x00286d98:	imove	#return, 0x000000
000629:0x00286da8:	rts
000629:0x00286db0:	rts
DayZAnimal::EEHitBy()
000634:0x00286eb0:	call	
000635:0x00286ee0:	imove	m_TransportHitRegistered, 0x000000
000637:0x00286ef0:	ncall	ToType(ammo)
000637:0x00286f00:	ncall	IsInherited(#return, _T(Nonlethal_Base))
000637:0x00286f10:	cmpi	#return, _i0
000637:0x00286f20:	beq	0x286f78
000640:0x00286f28:	ncalli	TotalDamageResult.GetDamage(dmgZone, _s'Shock')
000640:0x00286f38:	call	
000640:0x00286f48:	subf	@f00, _f0.000000, #return
000640:0x00286f58:	ncalli	DayZAnimal.AddHealth(_s'', _s'Health', @f00)
000640:0x00286f70:	jump	0x286ff0
000644:0x00286f78:	call	
000644:0x00286f90:	movefm	@c02, #return
000644:0x00286fa0:	icall	SafeCastType([0xb5b3a0e0], @c01, @c02)
000644:0x00286fb8:	movetm	animal_bleeding, @c01
000644:0x00286fc8:	release	#return
000645:0x00286fd0:	call	
000645:0x00286fe8:	release	animal_bleeding
000648:0x00286ff0:	imove	type, 0x000000
000649:0x00287000:	imove	direction, 0x000000
000650:0x00287010:	call	
000650:0x00287030:	move	type, type
000650:0x00287040:	move	direction, direction
000650:0x00287050:	move	@m00, #return
000650:0x00287060:	cmpi	@m00, true
000650:0x00287070:	bne	0x287090
000652:0x00287078:	call	
000652:0x00287090:	rts
DayZAnimal::QueueDamageHit()
000659:0x00287098:	imove	m_DamageHitToProcess, 0x000001
000660:0x002870a8:	move	m_DamageHitType, type
000661:0x002870b8:	move	m_DamageHitDirection, direction
000661:0x002870c8:	rts
DayZAnimal::ComputeDamageHitParams()
000666:0x002870f8:	imove	type, 0x000000
000668:0x00287108:	call	
000668:0x00287118:	move	angleDeg, #return
000669:0x00287128:	call	
000669:0x00287138:	move	direction, #return
000671:0x00287148:	call	
000671:0x00287158:	move	@m00, #return
000671:0x00287168:	addi	direction, direction, @m00
000673:0x00287178:	imove	#return, 0x000001
000673:0x00287188:	move	type, type
000673:0x00287198:	move	direction, direction
000673:0x002871a8:	rts
000673:0x002871b0:	move	type, type
000673:0x002871c0:	move	direction, direction
000673:0x002871d0:	rts
DayZAnimal::ComputeHitDirectionAngleDeg()
000678:0x00287390:	ncalli	DayZAnimal.GetDirection()
000678:0x00287398:	movev	targetDirection, #return
000679:0x002873a8:	ncalli	EntityAI.GetPosition()
000679:0x002873b0:	pushv	#return
000679:0x002873b8:	ncalli	DayZAnimal.GetPosition()
000679:0x002873c0:	movev	@v00, #return
000679:0x002873d0:	popv	#return
000679:0x002873d8:	subv	toSourceDirection, #return, @v00
000681:0x002873e8:	itv	targetDirection[0x000001], _f0.000000
000682:0x002873f8:	itv	toSourceDirection[0x000001], _f0.000000
000684:0x00287408:	icall	Normalize(targetDirection)
000685:0x00287418:	icall	Normalize(toSourceDirection)
000687:0x00287428:	call	Dot(targetDirection, toSourceDirection)
000687:0x00287440:	move	cosFi, #return
000688:0x00287450:	crossv	cross, targetDirection, toSourceDirection
000690:0x00287460:	icall	Acos(cosFi)
000690:0x00287470:	mulf	dirAngleDeg, #return, RAD2DEG
000691:0x00287480:	ifv	@f00, cross[0x000001]
000691:0x00287490:	cmpf	@f00, _f0.000000
000691:0x002874a0:	bge	0x2874c8
000692:0x002874a8:	subf	@f01, _f0.000000, dirAngleDeg
000692:0x002874b8:	move	dirAngleDeg, @f01
000694:0x002874c8:	move	#return, dirAngleDeg
000694:0x002874d8:	rts
000694:0x002874e0:	rts
DayZAnimal::TranslateHitAngleDegToDirectionIndex()
000699:0x00287510:	cmpf	angleDeg, _f-20.000000
000699:0x00287520:	blt	0x287560
000699:0x00287528:	cmpf	angleDeg, _f20.000000
000699:0x00287538:	bgt	0x287560
000701:0x00287540:	imove	#return, 0x000001
000701:0x00287550:	rts
000701:0x00287558:	jump	0x287590
000703:0x00287560:	cmpf	angleDeg, _f0.000000
000703:0x00287570:	bge	0x287590
000705:0x00287578:	imove	#return, 0x000002
000705:0x00287588:	rts
000708:0x00287590:	imove	#return, 0x000003
000708:0x002875a0:	rts
000708:0x002875a8:	rts
DayZAnimal::FindComponentDirectionOffset()
000715:0x002876f8:	imove	offset, 0x000000
000716:0x00287708:	ncall	Length(component)
000716:0x00287718:	move	@m00, #return
000716:0x00287728:	cmpi	@m00, _i0
000716:0x00287738:	bne	0x287758
000718:0x00287740:	imove	offset, 0x000000
000718:0x00287750:	jump	0x287830
000720:0x00287758:	cmps	component, _s'Zone_Head'
000720:0x00287768:	bne	0x287788
000722:0x00287770:	imove	offset, 0x000004
000722:0x00287780:	jump	0x287830
000724:0x00287788:	cmps	component, _s'Zone_Chest'
000724:0x00287798:	beq	0x2877e8
000724:0x002877a0:	cmps	component, _s'Zone_Legs_Front'
000724:0x002877b0:	beq	0x2877e8
000724:0x002877b8:	cmps	component, _s'Zone_Spine_Front'
000724:0x002877c8:	beq	0x2877e8
000724:0x002877d0:	cmps	component, _s'Zone_Neck'
000724:0x002877e0:	bne	0x287810
000726:0x002877e8:	imove	@m00, 0x000008
000726:0x002877f8:	move	offset, @m00
000726:0x00287808:	jump	0x287830
000730:0x00287810:	imove	@m00, 0x00000c
000730:0x00287820:	move	offset, @m00
000733:0x00287830:	move	#return, offset
000733:0x00287840:	rts
000733:0x00287848:	rts
DayZAnimal::EOnContact()
000743:0x00287878:	call	
000743:0x00287888:	cmpi	#return, _i0
000743:0x00287898:	bne	0x2878a8
000744:0x002878a0:	rts
000746:0x002878a8:	movefm	@c02, other
000746:0x002878b8:	icall	SafeCastType([0xb5b26438], @c01, @c02)
000746:0x002878d0:	movetm	transport, @c01
000747:0x002878e0:	cmpcm	transport, null
000747:0x002878f0:	beq	0x287930
000749:0x002878f8:	ncall	GetGame()
000749:0x00287900:	ncalli	CGame.IsServer()
000749:0x00287908:	cmpi	#return, _i0
000749:0x00287918:	beq	0x287930
000751:0x00287920:	call	
000751:0x00287930:	release	transport
000751:0x00287938:	rts
DayZAnimal::RegisterHitComponentsForAI()
000760:0x00287940:	moves	m_DefaultHitComponent, _s'Zone_Chest'
000762:0x00287950:	moves	m_DefaultHitPositionComponent, _s'Pelvis'
000765:0x00287960:	movem	pHitComponents, m_HitComponentsForAI
000765:0x00287970:	call	RegisterHitComponent(pHitComponents, _s'Zone_Chest', _f50.000000)
000765:0x00287988:	rts
DayZAnimal::GetHitComponentForAI()
000772:0x002879b8:	movem	pHitComponents, m_HitComponentsForAI
000772:0x002879c8:	call	SelectMostProbableHitComponent(pHitComponents, hitComp)
000772:0x002879e0:	moves	hitComp, pHitComponent
000772:0x002879f0:	cmpi	#return, _i0
000772:0x00287a00:	beq	0x287a20
000774:0x00287a08:	moves	#return, hitComp
000774:0x00287a18:	rts
000777:0x00287a20:	call	
000777:0x00287a30:	moves	#return, #return
000777:0x00287a40:	rts
000777:0x00287a48:	rts
DayZAnimal::GetDefaultHitComponent()
000782:0x00287a50:	moves	#return, m_DefaultHitComponent
000782:0x00287a60:	rts
000782:0x00287a68:	rts
DayZAnimal::GetDefaultHitPositionComponent()
000787:0x00287a70:	moves	#return, m_DefaultHitPositionComponent
000787:0x00287a80:	rts
000787:0x00287a88:	rts
DayZAnimal::GetDefaultHitPosition()
000792:0x00287a90:	movev	#return, m_DefaultHitPosition
000792:0x00287aa0:	rts
000792:0x00287aa8:	rts
DayZAnimal::SetDefaultHitPosition()
000797:0x00287ab0:	call	
000797:0x00287ac0:	movev	#return, #return
000797:0x00287ad0:	rts
000797:0x00287ad8:	rts
DayZAnimal::ConvertNonlethalDamage()
000802:0x00287b38:	mulf	converted_dmg, damage, PROJECTILE_CONVERSION_ANIMALS
000803:0x00287b48:	move	#return, converted_dmg
000803:0x00287b58:	rts
000803:0x00287b60:	rts
PPEManagerStatic::CreateManagerStatic()
//scripts/3_Game/ppemanager\ppemanager.c
000008:0x00287b90:	cmpcm	m_Manager, null
000008:0x00287ba0:	beq	0x287bd0
000010:0x00287ba8:	call	Log(_s'PPEManagerStatic | CreateManagerStatic - PPEManager already exists', _s'n/a', _s'n/a', _s'n/a', _s'n/a')
000011:0x00287bc8:	rts
000014:0x00287bd0:	new	m_Manager, PPEManager
000014:0x00287bf0:	rts
PPEManagerStatic::DestroyManagerStatic()
000019:0x00287bf8:	cmpcm	m_Manager, null
000019:0x00287c08:	beq	0x287c28
000021:0x00287c10:	call	
000022:0x00287c20:	delete	m_Manager
000022:0x00287c28:	rts
PPEManagerStatic::GetPPEManager()
000029:0x00287c30:	movem	#return, m_Manager
000029:0x00287c40:	rts
000029:0x00287c48:	rts
PPEManager::PPEManager()
000066:0x00287c50:	imove	m_ManagerInitialized, 0x000000
000067:0x00287c60:	call	Init()
000067:0x00287c70:	rts
PPEManager::Cleanup()
000072:0x00287c78:	call	Cleanup()
000074:0x00287c88:	cmpi	m_ManagerInitialized, _i0
000074:0x00287c98:	beq	0x287d00
000076:0x00287ca0:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000076:0x00287cb0:	ncalli	map<int,@array<int>>.Clear()
000077:0x00287cb8:	movefm	[0xb5bc6a98], m_ExistingPostprocessRequests
000077:0x00287cc8:	ncalli	array<@PPERequesterBase>.Clear()
000078:0x00287cd0:	movefm	[0xb5bc6a98], m_UpdatingRequests
000078:0x00287ce0:	ncalli	array<@PPERequesterBase>.Clear()
000079:0x00287ce8:	movefm	[0xb5bc68c8], m_PPEClassMap
000079:0x00287cf8:	ncalli	map<int,@PPEClassBase>.Clear()
000079:0x00287d00:	rts
PPEManager::Init()
000087:0x00287d48:	cmpi	m_ManagerInitialized, _i0
000087:0x00287d58:	bne	0x287e50
000089:0x00287d60:	new	m_PPEMaterialUpdateQueueMap, map<int,@array<int>>
000090:0x00287d80:	new	m_UpdatedMaterials, array<int>
000091:0x00287da0:	new	m_ExistingPostprocessRequests, array<@PPERequesterBase>
000092:0x00287dc0:	new	m_UpdatingRequests, array<@PPERequesterBase>
000093:0x00287de0:	call	
000095:0x00287df0:	ncall	GetGame()
000095:0x00287df8:	call	
000095:0x00287e08:	movec	@c00, this
000095:0x00287e18:	icall	SetInstance([0xb5d85d48], @c00)
000095:0x00287e28:	icall	
000095:0x00287e38:	release	#return
000096:0x00287e40:	imove	m_ManagerInitialized, 0x000001
000096:0x00287e50:	rts
PPEManager::InitPPEManagerClassMap()
000103:0x00287e58:	cmpcm	m_PPEClassMap, null
000103:0x00287e68:	beq	0x287e78
000105:0x00287e70:	delete	m_PPEClassMap
000107:0x00287e78:	new	m_PPEClassMap, map<int,@PPEClassBase>
000109:0x00287e98:	new	@c00, PPENone
000109:0x00287ec0:	pushc	@c00
000109:0x00287ec8:	call	
000109:0x00287ed8:	popc	@c00
000109:0x00287ee0:	release	@c00
000110:0x00287ee8:	new	@c00, PPEUnderWater
000110:0x00287f10:	pushc	@c00
000110:0x00287f18:	call	
000110:0x00287f28:	popc	@c00
000110:0x00287f30:	release	@c00
000111:0x00287f38:	new	@c00, PPESSAO
000111:0x00287f60:	pushc	@c00
000111:0x00287f68:	call	
000111:0x00287f78:	popc	@c00
000111:0x00287f80:	release	@c00
000112:0x00287f88:	new	@c00, PPEDepthOfField
000112:0x00287fb0:	pushc	@c00
000112:0x00287fb8:	call	
000112:0x00287fc8:	popc	@c00
000112:0x00287fd0:	release	@c00
000113:0x00287fd8:	new	@c00, PPEHBAO
000113:0x00288000:	pushc	@c00
000113:0x00288008:	call	
000113:0x00288018:	popc	@c00
000113:0x00288020:	release	@c00
000114:0x00288028:	new	@c00, PPERotBlur
000114:0x00288050:	pushc	@c00
000114:0x00288058:	call	
000114:0x00288068:	popc	@c00
000114:0x00288070:	release	@c00
000115:0x00288078:	new	@c00, PPEGodRays
000115:0x002880a0:	pushc	@c00
000115:0x002880a8:	call	
000115:0x002880b8:	popc	@c00
000115:0x002880c0:	release	@c00
000116:0x002880c8:	new	@c00, PPERain
000116:0x002880f0:	pushc	@c00
000116:0x002880f8:	call	
000116:0x00288108:	popc	@c00
000116:0x00288110:	release	@c00
000117:0x00288118:	new	@c00, PPEFilmGrain
000117:0x00288140:	pushc	@c00
000117:0x00288148:	call	
000117:0x00288158:	popc	@c00
000117:0x00288160:	release	@c00
000118:0x00288168:	new	@c00, PPERadialBlur
000118:0x00288190:	pushc	@c00
000118:0x00288198:	call	
000118:0x002881a8:	popc	@c00
000118:0x002881b0:	release	@c00
000119:0x002881b8:	new	@c00, PPEChromAber
000119:0x002881e0:	pushc	@c00
000119:0x002881e8:	call	
000119:0x002881f8:	popc	@c00
000119:0x00288200:	release	@c00
000120:0x00288208:	new	@c00, PPEWetDistort
000120:0x00288230:	pushc	@c00
000120:0x00288238:	call	
000120:0x00288248:	popc	@c00
000120:0x00288250:	release	@c00
000121:0x00288258:	new	@c00, PPEDynamicBlur
000121:0x00288280:	pushc	@c00
000121:0x00288288:	call	
000121:0x00288298:	popc	@c00
000121:0x002882a0:	release	@c00
000122:0x002882a8:	new	@c00, PPEColorGrading
000122:0x002882d0:	pushc	@c00
000122:0x002882d8:	call	
000122:0x002882e8:	popc	@c00
000122:0x002882f0:	release	@c00
000123:0x002882f8:	new	@c00, PPEColors
000123:0x00288320:	pushc	@c00
000123:0x00288328:	call	
000123:0x00288338:	popc	@c00
000123:0x00288340:	release	@c00
000124:0x00288348:	new	@c00, PPEGlow
000124:0x00288370:	pushc	@c00
000124:0x00288378:	call	
000124:0x00288388:	popc	@c00
000124:0x00288390:	release	@c00
000125:0x00288398:	new	@c00, PPESMAA
000125:0x002883c0:	pushc	@c00
000125:0x002883c8:	call	
000125:0x002883d8:	popc	@c00
000125:0x002883e0:	release	@c00
000126:0x002883e8:	new	@c00, PPEFXAA
000126:0x00288410:	pushc	@c00
000126:0x00288418:	call	
000126:0x00288428:	popc	@c00
000126:0x00288430:	release	@c00
000127:0x00288438:	new	@c00, PPEMedian
000127:0x00288460:	pushc	@c00
000127:0x00288468:	call	
000127:0x00288478:	popc	@c00
000127:0x00288480:	release	@c00
000128:0x00288488:	new	@c00, PPESunMask
000128:0x002884b0:	pushc	@c00
000128:0x002884b8:	call	
000128:0x002884c8:	popc	@c00
000128:0x002884d0:	release	@c00
000129:0x002884d8:	new	@c00, PPEGaussFilter
000129:0x00288500:	pushc	@c00
000129:0x00288508:	call	
000129:0x00288518:	popc	@c00
000129:0x00288520:	release	@c00
000130:0x00288528:	new	@c00, PPEExposureNative
000130:0x00288550:	pushc	@c00
000130:0x00288558:	call	
000130:0x00288568:	popc	@c00
000130:0x00288570:	release	@c00
000131:0x00288578:	new	@c00, PPEEyeAccomodationNative
000131:0x002885a0:	pushc	@c00
000131:0x002885a8:	call	
000131:0x002885b8:	popc	@c00
000131:0x002885c0:	release	@c00
000132:0x002885c8:	new	@c00, PPEDOF
000132:0x002885f0:	pushc	@c00
000132:0x002885f8:	call	
000132:0x00288608:	popc	@c00
000132:0x00288610:	release	@c00
000133:0x00288618:	new	@c00, PPELightIntensityParamsNative
000133:0x00288640:	pushc	@c00
000133:0x00288648:	call	
000133:0x00288658:	popc	@c00
000133:0x00288660:	release	@c00
000133:0x00288668:	rts
PPEManager::RegisterPPEClass()
000139:0x00288670:	call	
000139:0x00288680:	movefm	@c00, material_class
000139:0x00288690:	movefm	[0xb5bc68c8], m_PPEClassMap
000139:0x002886a0:	icall	
000139:0x002886b0:	rts
PPEManager::SendMaterialValueData()
000145:0x00288710:	call	
000145:0x00288720:	movefm	[0xb5bc68c8], m_PPEClassMap
000145:0x00288730:	icall	
000145:0x00288740:	movetm	mat_class, #return
000146:0x00288750:	call	
000147:0x00288760:	call	
000147:0x00288770:	call	
000147:0x00288780:	call	
000147:0x00288798:	release	mat_class
000147:0x002887a0:	rts
PPEManager::SetMaterialParamUpdating()
000153:0x002887f8:	cmpi	order, DEPENDENCY_ORDER_HIGHEST
000153:0x00288808:	ble	0x288818
000156:0x00288810:	rts
000159:0x00288818:	movefm	[0xb5bc68c8], m_PPEClassMap
000159:0x00288828:	icall	
000159:0x00288838:	movetm	mat_class, #return
000163:0x00288848:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000163:0x00288858:	icall	
000163:0x00288868:	cmpi	#return, _i0
000163:0x00288878:	bne	0x2888d8
000164:0x00288880:	new	@c00, array<int>
000164:0x002888a0:	pushc	@c00
000164:0x002888a8:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000164:0x002888b8:	icall	
000164:0x002888c8:	popc	@c00
000164:0x002888d0:	release	@c00
000166:0x002888d8:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000166:0x002888e8:	icall	
000166:0x002888f8:	icall	
000166:0x00288908:	move	found, #return
000167:0x00288918:	cmpi	found, _i-1
000167:0x00288928:	bne	0x288960
000169:0x00288930:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000169:0x00288940:	icall	
000169:0x00288950:	icall	
000172:0x00288960:	call	
000172:0x00288978:	release	mat_class
000172:0x00288980:	rts
PPEManager::RemoveMaterialUpdating()
000178:0x00288988:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000178:0x00288998:	icall	
000178:0x002889a8:	cmpi	#return, _i0
000178:0x002889b8:	beq	0x288a60
000180:0x002889c0:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000180:0x002889d0:	icall	
000180:0x002889e0:	call	
000182:0x002889f0:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000182:0x00288a00:	icall	
000182:0x00288a10:	ncalli	array<int>.Count()
000182:0x00288a18:	move	@m00, #return
000182:0x00288a28:	cmpi	@m00, _i0
000182:0x00288a38:	bne	0x288a60
000183:0x00288a40:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000183:0x00288a50:	icall	
000183:0x00288a60:	rts
PPEManager::ClearMaterialUpdating()
000189:0x00288a68:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000189:0x00288a78:	ncalli	map<int,@array<int>>.Clear()
000189:0x00288a80:	rts
PPEManager::SetRequestActive()
000195:0x00288ab0:	movefm	@c00, request
000195:0x00288ac0:	movefm	[0xb5bc6a98], m_ExistingPostprocessRequests
000195:0x00288ad0:	icall	
000195:0x00288ae0:	move	found, #return
000196:0x00288af0:	cmpi	active, _i0
000196:0x00288b00:	beq	0x288b58
000196:0x00288b08:	cmpi	found, _i-1
000196:0x00288b18:	bne	0x288b58
000198:0x00288b20:	movefm	@c00, request
000198:0x00288b30:	movefm	[0xb5bc6a98], m_ExistingPostprocessRequests
000198:0x00288b40:	icall	
000198:0x00288b50:	jump	0x288ba8
000200:0x00288b58:	cmpi	active, _i0
000200:0x00288b68:	bne	0x288ba8
000200:0x00288b70:	cmpi	found, _i-1
000200:0x00288b80:	ble	0x288ba8
000204:0x00288b88:	movefm	[0xb5bc6a98], m_ExistingPostprocessRequests
000204:0x00288b98:	ncalli	array<@PPERequesterBase>.Remove(found)
000204:0x00288ba8:	rts
PPEManager::SetRequestUpdating()
000211:0x00288c00:	cmpcm	m_UpdatingRequests, null
000211:0x00288c10:	bne	0x288c40
000213:0x00288c18:	call	Log(_s'PPEManager | SetRequestUpdating | !m_UpdatingRequests', _s'n/a', _s'n/a', _s'n/a', _s'n/a')
000214:0x00288c38:	rts
000217:0x00288c40:	movefm	@c00, request
000217:0x00288c50:	movefm	[0xb5bc6a98], m_UpdatingRequests
000217:0x00288c60:	icall	
000217:0x00288c70:	move	idx, #return
000219:0x00288c80:	cmpi	active, _i0
000219:0x00288c90:	beq	0x288ce8
000219:0x00288c98:	cmpi	idx, _i-1
000219:0x00288ca8:	bne	0x288ce8
000221:0x00288cb0:	movefm	@c00, request
000221:0x00288cc0:	movefm	[0xb5bc6a98], m_UpdatingRequests
000221:0x00288cd0:	icall	
000221:0x00288ce0:	jump	0x288d38
000223:0x00288ce8:	cmpi	active, _i0
000223:0x00288cf8:	bne	0x288d38
000223:0x00288d00:	cmpi	idx, _i-1
000223:0x00288d10:	ble	0x288d38
000225:0x00288d18:	movefm	[0xb5bc6a98], m_UpdatingRequests
000225:0x00288d28:	ncalli	array<@PPERequesterBase>.Remove(idx)
000225:0x00288d38:	rts
PPEManager::GetExistingRequester()
000232:0x00288d68:	call	GetRequester(req)
000232:0x00288d78:	movefm	@c00, #return
000232:0x00288d88:	movefm	[0xb5bc6a98], m_ExistingPostprocessRequests
000232:0x00288d98:	icall	
000232:0x00288da8:	move	idx, #return
000232:0x00288db8:	release	#return
000233:0x00288dc0:	cmpi	idx, _i-1
000233:0x00288dd0:	ble	0x288e30
000235:0x00288dd8:	movefm	[0xb5bc6a98], m_ExistingPostprocessRequests
000235:0x00288de8:	icall	
000235:0x00288df8:	movetm	ret, #return
000236:0x00288e08:	imove	#return, 0x000001
000236:0x00288e18:	movem	ret, ret
000236:0x00288e28:	rts
000238:0x00288e30:	imove	#return, 0x000000
000238:0x00288e40:	movem	ret, ret
000238:0x00288e50:	rts
000238:0x00288e58:	movem	ret, ret
000238:0x00288e68:	rts
PPEManager::RemoveActiveRequestFromMaterials()
000247:0x00288f10:	call	
000247:0x00288f20:	ncalli	map<int,@map<int,@PPERequestParamDataBase>>.Count()
000247:0x00288f28:	move	count, #return
000247:0x00288f38:	release	#return
000249:0x00288f40:	imove	i, 0x000000
000249:0x00288f50:	jump	0x288f70
000249:0x00288f58:	move	@m00, i
000249:0x00288f68:	inc	i
000249:0x00288f70:	cmpi	i, count
000249:0x00288f80:	bge	0x289020
000251:0x00288f88:	call	
000251:0x00288f98:	icall	
000251:0x00288fa8:	move	mat_id, #return
000251:0x00288fb8:	release	#return
000252:0x00288fc0:	movefm	[0xb5bc68c8], m_PPEClassMap
000252:0x00288fd0:	icall	
000252:0x00288fe0:	movetm	mat_class, #return
000253:0x00288ff0:	call	
000253:0x00289000:	call	
000253:0x00289010:	release	mat_class
000253:0x00289018:	jump	0x288f58
000253:0x00289020:	rts
PPEManager::InsertUpdatedMaterial()
000265:0x00289028:	movefm	[0xd31561b0], m_UpdatedMaterials
000265:0x00289038:	icall	
000265:0x00289048:	move	@m00, #return
000265:0x00289058:	cmpi	@m00, _i-1
000265:0x00289068:	bne	0x289090
000266:0x00289070:	movefm	[0xd31561b0], m_UpdatedMaterials
000266:0x00289080:	icall	
000266:0x00289090:	rts
PPEManager::ProcessRequesterUpdates()
000275:0x002890e8:	imove	i, 0x000000
000275:0x002890f8:	jump	0x289118
000275:0x00289100:	move	@m00, i
000275:0x00289110:	inc	i
000275:0x00289118:	movefm	[0xb5bc6a98], m_UpdatingRequests
000275:0x00289128:	ncalli	array<@PPERequesterBase>.Count()
000275:0x00289130:	cmpi	i, #return
000275:0x00289140:	bge	0x2891a8
000278:0x00289148:	movefm	[0xb5bc6a98], m_UpdatingRequests
000278:0x00289158:	icall	
000278:0x00289168:	movetm	req, #return
000279:0x00289178:	cmpcm	req, null
000279:0x00289188:	beq	0x2891a0
000280:0x00289190:	call	
000280:0x002891a0:	jump	0x289100
000280:0x002891a8:	release	req
000280:0x002891b0:	rts
PPEManager::ProcessMaterialUpdates()
000286:0x00289230:	imove	i, 0x000000
000286:0x00289240:	jump	0x289260
000286:0x00289248:	move	@m00, i
000286:0x00289258:	inc	i
000286:0x00289260:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000286:0x00289270:	ncalli	map<int,@array<int>>.Count()
000286:0x00289278:	cmpi	i, #return
000286:0x00289288:	bge	0x289390
000291:0x00289290:	imove	j, 0x000000
000291:0x002892a0:	jump	0x2892c0
000291:0x002892a8:	move	@m00, j
000291:0x002892b8:	inc	j
000291:0x002892c0:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000291:0x002892d0:	icall	
000291:0x002892e0:	ncalli	array<int>.Count()
000291:0x002892e8:	cmpi	j, #return
000291:0x002892f8:	bge	0x289388
000293:0x00289300:	movefm	[0xb5b90170], m_PPEMaterialUpdateQueueMap
000293:0x00289310:	icall	
000293:0x00289320:	icall	
000293:0x00289330:	movefm	[0xb5bc68c8], m_PPEClassMap
000293:0x00289340:	icall	
000293:0x00289350:	movetm	mat_class, #return
000294:0x00289360:	call	
000294:0x00289378:	release	mat_class
000294:0x00289380:	jump	0x2892a8
000294:0x00289388:	jump	0x289248
000294:0x00289390:	rts
PPEManager::ProcessApplyValueChanges()
000302:0x00289410:	imove	i, 0x000000
000302:0x00289420:	jump	0x289440
000302:0x00289428:	move	@m00, i
000302:0x00289438:	inc	i
000302:0x00289440:	movefm	[0xd31561b0], m_UpdatedMaterials
000302:0x00289450:	ncalli	array<int>.Count()
000302:0x00289458:	cmpi	i, #return
000302:0x00289468:	bge	0x2894f0
000304:0x00289470:	movefm	[0xd31561b0], m_UpdatedMaterials
000304:0x00289480:	icall	
000304:0x00289490:	move	material_id, #return
000305:0x002894a0:	movefm	[0xb5bc68c8], m_PPEClassMap
000305:0x002894b0:	icall	
000305:0x002894c0:	movetm	mat_class, #return
000306:0x002894d0:	call	
000306:0x002894e0:	release	mat_class
000306:0x002894e8:	jump	0x289428
000309:0x002894f0:	movefm	[0xd31561b0], m_UpdatedMaterials
000309:0x00289500:	ncalli	array<int>.Clear()
000310:0x00289508:	call	
000310:0x00289518:	rts
PPEManager::Update()
000315:0x00289520:	cmpi	m_ManagerInitialized, _i0
000315:0x00289530:	bne	0x289540
000316:0x00289538:	rts
000318:0x00289540:	call	
000319:0x00289550:	call	
000320:0x00289560:	call	
000321:0x00289570:	call	
000321:0x00289580:	rts
PPEManager::GetPostProcessDefaultValues()
000327:0x002895b0:	movefm	[0xb5bc68c8], m_PPEClassMap
000327:0x002895c0:	icall	
000327:0x002895d0:	movetm	mat_class, #return
000328:0x002895e0:	call	
000328:0x002895f0:	call	
000328:0x00289600:	movem	#return, #return
000328:0x00289610:	release	mat_class
000328:0x00289618:	release	#return
000328:0x00289620:	release	#return
000328:0x00289628:	rts
000328:0x00289630:	release	mat_class
000328:0x00289638:	rts
PPEManager::GetPostProcessCurrentValues()
000334:0x00289668:	movefm	[0xb5bc68c8], m_PPEClassMap
000334:0x00289678:	icall	
000334:0x00289688:	movetm	mat_class, #return
000335:0x00289698:	call	
000335:0x002896a8:	call	
000335:0x002896b8:	movem	#return, #return
000335:0x002896c8:	release	mat_class
000335:0x002896d0:	release	#return
000335:0x002896d8:	release	#return
000335:0x002896e0:	rts
000335:0x002896e8:	release	mat_class
000335:0x002896f0:	rts
PPEManager::ChangePPEMaterial()
000343:0x00289820:	movefm	[0xb5bc68c8], m_PPEClassMap
000343:0x00289830:	icall	
000343:0x00289840:	cmpi	#return, _i0
000343:0x00289850:	beq	0x289a20
000345:0x00289858:	movefm	[0xb5bc68c8], m_PPEClassMap
000345:0x00289868:	icall	
000345:0x00289878:	movetm	mat_class, #return
000346:0x00289888:	movefm	[0xd315b998], mat_class
000346:0x00289898:	ncall	Type([0xd315b998])
000346:0x002898a8:	movea	name, #return
000347:0x002898b8:	icall	Spawn(name)
000347:0x002898c8:	icall	SafeCastType([0xb5b35de0], @c01, #return)
000347:0x002898e0:	movetm	postprocess_capsule, @c01
000348:0x002898f0:	call	
000350:0x00289900:	call	
000350:0x00289910:	movea	@m00, #return
000350:0x00289920:	cmpi	@m00, _i0
000350:0x00289930:	bne	0x2899e0
000352:0x00289938:	adds	@s03, _s'PPEManager | Invalid material path ', path
000352:0x00289948:	moves	@s02, @s03
000352:0x00289958:	adds	@s02, @s02, _s' used for '
000352:0x00289968:	moves	@s01, @s02
000352:0x00289978:	ncall	ToString(name)
000352:0x00289988:	adds	@s01, @s01, #return
000352:0x00289998:	moves	@s00, @s01
000352:0x002899a8:	call	Log(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
000353:0x002899c8:	release	mat_class
000353:0x002899d0:	release	postprocess_capsule
000353:0x002899d8:	rts
000357:0x002899e0:	movefm	@c00, postprocess_capsule
000357:0x002899f0:	movefm	[0xb5bc68c8], m_PPEClassMap
000357:0x00289a00:	icall	
000357:0x00289a10:	release	mat_class
000357:0x00289a18:	release	postprocess_capsule
000361:0x00289a20:	cmpi	scriptside_only, _i0
000361:0x00289a30:	bne	0x289a50
000362:0x00289a38:	ncall	SetCameraPostProcessEffect(CAMERA_ID, priority, type, path)
000362:0x00289a50:	rts
PPEManager::StopAllEffects()
000368:0x00289b28:	cmpcm	m_ExistingPostprocessRequests, null
000368:0x00289b38:	beq	0x289c30
000370:0x00289b40:	movem	#array, m_ExistingPostprocessRequests
000370:0x00289b50:	ncalli	array<@PPERequesterBase>.Count()
000370:0x00289b58:	move	#cnt, #return
000370:0x00289b68:	imove	#key, 0x000000
000370:0x00289b78:	jump	0x289b88
000370:0x00289b80:	inc	#key
000370:0x00289b88:	cmpi	#key, #cnt
000370:0x00289b98:	bge	0x289c20
000370:0x00289ba0:	icall	
000370:0x00289bb0:	movetm	requester, #return
000372:0x00289bc0:	call	
000372:0x00289bd0:	andi	@m01, #return, mask
000372:0x00289be0:	move	@m00, @m01
000372:0x00289bf0:	cmpi	@m00, _i0
000372:0x00289c00:	beq	0x289c18
000374:0x00289c08:	call	
000374:0x00289c18:	jump	0x289b80
000374:0x00289c20:	release	#array
000374:0x00289c28:	release	requester
000374:0x00289c30:	rts
Component::Init()
//scripts/3_Game/tools\component.c
000039:0x00289cd8:	ctv	m_CompNames[COMP_TYPE_ETITY_DEBUG], _s'ComponentEntityDebug'
000040:0x00289ce8:	ctv	m_CompNames[COMP_TYPE_ENERGY_MANAGER], _s'ComponentEnergyManager'
000041:0x00289cf8:	ctv	m_CompNames[COMP_TYPE_BODY_STAGING], _s'ComponentBodyStaging'
000042:0x00289d08:	ctv	m_CompNames[COMP_TYPE_ANIMAL_BLEEDING], _s'ComponentAnimalBleeding'
000042:0x00289d18:	rts
Component::GetNameByType()
000050:0x00289d48:	call	IsTypeExist(comp_type)
000050:0x00289d58:	move	@m00, #return
000050:0x00289d68:	cmpi	@m00, false
000050:0x00289d78:	bne	0x289db0
000052:0x00289d80:	call	LogErrorBadCompType(comp_type, _s'Component->GetNameByType()')
000053:0x00289d98:	moves	#return, _s'None'
000053:0x00289da8:	rts
000056:0x00289db0:	cfv	@s00, m_CompNames[comp_type]
000056:0x00289dc0:	moves	#return, @s00
000056:0x00289dd0:	rts
000056:0x00289dd8:	rts
Component::IsTypeExist()
000064:0x00289de0:	cmpi	comp_type, _i0
000064:0x00289df0:	blt	0x289e10
000064:0x00289df8:	cmpi	comp_type, COMP_TYPE_COUNT
000064:0x00289e08:	blt	0x289e28
000066:0x00289e10:	imove	#return, 0x000000
000066:0x00289e20:	rts
000069:0x00289e28:	imove	#return, 0x000001
000069:0x00289e38:	rts
000069:0x00289e40:	rts
Component::LogErrorBadCompType()
000078:0x00289f10:	icall	ToString(comp_type)
000078:0x00289f20:	adds	@s03, _s'Bad parameter comp_type='', #return
000078:0x00289f30:	moves	@s02, @s03
000078:0x00289f40:	adds	@s02, @s02, _s''. Parameter must be 0-'
000078:0x00289f50:	moves	@s01, @s02
000078:0x00289f60:	imove	@m01, 0x000003
000078:0x00289f70:	move	@m00, @m01
000078:0x00289f80:	icall	ToString(@m00)
000078:0x00289f90:	adds	@s01, @s01, #return
000078:0x00289fa0:	moves	@s00, @s01
000078:0x00289fb0:	adds	msg, @s00, _s'. Returning component name 'None'.'
000079:0x00289fc0:	call	LogError(msg, _s'Component', _s'n/a', fnc_name, _s'n/a')
000079:0x00289fe0:	rts
Component::LogWarningAlredyExist()
000087:0x0028a060:	call	GetNameByType(comp_type)
000087:0x0028a070:	adds	@s01, _s'Component '', #return
000087:0x0028a080:	moves	@s00, @s01
000087:0x0028a090:	adds	msg, @s00, _s'' already exists!'
000088:0x0028a0a0:	call	LogError(msg, _s'Component', _s'n/a', fnc_name, _s'n/a')
000088:0x0028a0c0:	rts
Component::SetParentEntityAI()
000096:0x0028a0c8:	movem	m_ThisEntityAI, e
000096:0x0028a0d8:	rts
Component::LogThisWarning()
000128:0x0028a0e0:	call	
000128:0x0028a0f0:	icall	ToString(m_ThisEntityAI)
000128:0x0028a100:	call	LogWarning(msg, #return, _s'n/a', fnc_name, #return)
000128:0x0028a120:	rts
Component::LogThisError()
000136:0x0028a128:	call	
000136:0x0028a138:	icall	ToString(m_ThisEntityAI)
000136:0x0028a148:	call	LogError(msg, #return, _s'n/a', fnc_name, #return)
000136:0x0028a168:	rts
Component::GetCompName()
000144:0x0028a170:	call	
000144:0x0028a180:	call	GetNameByType(#return)
000144:0x0028a190:	moves	#return, #return
000144:0x0028a1a0:	rts
000144:0x0028a1a8:	rts
Component::GetCompType()
000152:0x0028a1b0:	imove	#return, 0xffffffff
000152:0x0028a1c0:	rts
000152:0x0028a1c8:	rts
Component::Event_OnItemAttached()
000160:0x0028a220:	icall	ToString(item)
000160:0x0028a230:	adds	@s03, _s'', #return
000160:0x0028a240:	moves	@s02, @s03
000160:0x0028a250:	adds	@s02, @s02, _s' -> '
000160:0x0028a260:	moves	@s01, @s02
000160:0x0028a270:	adds	@s01, @s01, slot_name
000160:0x0028a280:	moves	@s00, @s01
000160:0x0028a290:	call	
000160:0x0028a2a8:	rts
Component::Event_OnItemDetached()
000169:0x0028a300:	icall	ToString(item)
000169:0x0028a310:	adds	@s03, _s'', #return
000169:0x0028a320:	moves	@s02, @s03
000169:0x0028a330:	adds	@s02, @s02, _s' <- '
000169:0x0028a340:	moves	@s01, @s02
000169:0x0028a350:	adds	@s01, @s01, slot_name
000169:0x0028a360:	moves	@s00, @s01
000169:0x0028a370:	call	
000169:0x0028a388:	rts
ModLoader::GetMods()
//scripts/3_Game/client\mods\modloader.c
000009:0x0028a390:	call	LoadMods()
000010:0x0028a3a0:	movem	#return, m_Mods
000010:0x0028a3b0:	rts
000010:0x0028a3b8:	rts
ModLoader::LoadMods()
000015:0x0028a4e8:	new	m_Mods, array<@ModStructure>
000017:0x0028a508:	ncall	GetGame()
000017:0x0028a510:	ncalli	CGame.ConfigGetChildrenCount(_s'CfgMods')
000017:0x0028a520:	move	mod_count, #return
000019:0x0028a530:	imove	i, 0x000002
000019:0x0028a540:	jump	0x28a560
000019:0x0028a548:	move	@m00, i
000019:0x0028a558:	inc	i
000019:0x0028a560:	cmpi	i, mod_count
000019:0x0028a570:	bge	0x28a610
000022:0x0028a578:	ncall	GetGame()
000022:0x0028a580:	icall	
000023:0x0028a598:	adds	@s01, _s'CfgMods ', mod_name
000023:0x0028a5a8:	moves	@s00, @s01
000023:0x0028a5b8:	new	@c00, ModStructure
000023:0x0028a5e0:	pushc	@c00
000023:0x0028a5e8:	icall	
000023:0x0028a5f8:	popc	@c00
000023:0x0028a600:	release	@c00
000023:0x0028a608:	jump	0x28a548
000023:0x0028a610:	rts
ErrorModuleHandler::SafeAddModule()
//scripts/3_Game/global\errormodulehandler\errormodulehandler.c
000213:0x0028a640:	ncalli	ErrorHandlerModule.GetCategory()
000213:0x0028a648:	movefm	@c00, errorModule
000213:0x0028a658:	icall	AddModule(#return, @c00)
000213:0x0028a668:	cmpi	#return, _i0
000213:0x0028a678:	bne	0x28a6c8
000214:0x0028a680:	ncalli	ErrorHandlerModule.GetCategory()
000214:0x0028a688:	icall	Format(_s'[EMH] Adding %1 failed. (Category: %2)', errorModule, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000214:0x0028a6b8:	call	Error(#return)
000214:0x0028a6c8:	rts
ErrorModuleHandler::SafeRemoveModule()
000223:0x0028a6f8:	ncalli	ErrorHandlerModule.GetCategory()
000223:0x0028a700:	icall	RemoveModule(#return)
000223:0x0028a710:	cmpi	#return, _i0
000223:0x0028a720:	bne	0x28a770
000224:0x0028a728:	ncalli	ErrorHandlerModule.GetCategory()
000224:0x0028a730:	icall	Format(_s'[EMH] Removing %1 failed. (Category: %2)', errorModule, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000224:0x0028a760:	call	Error(#return)
000224:0x0028a770:	rts
ErrorModuleHandler::SafeRemoveModule#143251()
000233:0x0028a7a0:	icall	RemoveModule(category)
000233:0x0028a7b0:	cmpi	#return, _i0
000233:0x0028a7c0:	bne	0x28a808
000234:0x0028a7c8:	icall	Format(_s'[EMH] Removing %1 failed.', category, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000234:0x0028a7f8:	call	Error(#return)
000234:0x0028a808:	rts
ErrorModuleHandler::Init()
000242:0x0028a810:	ncalli	DayZGame.IsDedicatedServer()
000242:0x0028a818:	cmpi	#return, _i0
000242:0x0028a828:	bne	0x28a908
000244:0x0028a830:	new	@c00, ConnectErrorClientModule
000244:0x0028a850:	pushc	@c00
000244:0x0028a858:	call	
000244:0x0028a868:	popc	@c00
000244:0x0028a870:	release	@c00
000245:0x0028a878:	new	@c00, ConnectErrorServerModule
000245:0x0028a898:	pushc	@c00
000245:0x0028a8a0:	call	
000245:0x0028a8b0:	popc	@c00
000245:0x0028a8b8:	release	@c00
000246:0x0028a8c0:	new	@c00, ConnectErrorScriptModule
000246:0x0028a8e0:	pushc	@c00
000246:0x0028a8e8:	call	
000246:0x0028a8f8:	popc	@c00
000246:0x0028a900:	release	@c00
000248:0x0028a908:	new	@c00, ClientKickedModule
000248:0x0028a928:	pushc	@c00
000248:0x0028a930:	call	
000248:0x0028a940:	popc	@c00
000248:0x0028a948:	release	@c00
000249:0x0028a950:	new	@c00, BIOSErrorModule
000249:0x0028a970:	pushc	@c00
000249:0x0028a978:	call	
000249:0x0028a988:	popc	@c00
000249:0x0028a990:	release	@c00
000249:0x0028a998:	rts
ErrorModuleHandler::OnEvent()
000257:0x0028aa98:	new	errorModules, array<ErrorHandlerModule>
000258:0x0028aab8:	icall	GetErrorModules(errorModules)
000260:0x0028aac8:	ncalli	array<ErrorHandlerModule>.Count()
000260:0x0028aad0:	move	#cnt, #return
000260:0x0028aae0:	imove	#key, 0x000000
000260:0x0028aaf0:	jump	0x28ab00
000260:0x0028aaf8:	inc	#key
000260:0x0028ab00:	cmpi	#key, #cnt
000260:0x0028ab10:	bge	0x28ab58
000260:0x0028ab18:	icall	
000260:0x0028ab28:	movetm	module, #return
000262:0x0028ab38:	call	
000262:0x0028ab50:	jump	0x28aaf8
000262:0x0028ab58:	release	module
000262:0x0028ab60:	release	errorModules
000262:0x0028ab68:	rts
PPERequesterBank::Init()
//scripts/3_Game/ppemanager\pperequesterbank.c
000049:0x0028ab70:	new	m_Registrations, PPERequesterRegistrations
000051:0x0028ab90:	cmpcm	m_Instances, null
000051:0x0028aba0:	bne	0x28abc8
000052:0x0028aba8:	new	m_Instances, map<int,@PPERequesterBase>
000054:0x0028abc8:	imove	m_Initialized, 0x000001
000054:0x0028abd8:	rts
PPERequesterBank::Cleanup()
000059:0x0028abe0:	cmpi	m_Initialized, _i0
000059:0x0028abf0:	beq	0x28ac08
000061:0x0028abf8:	delete	m_Registrations
000062:0x0028ac00:	ncalli	map<int,@PPERequesterBase>.Clear()
000062:0x0028ac08:	rts
PPERequesterBank::GetRequester()
000074:0x0028acd8:	cmpc	type, null
000074:0x0028ace8:	bne	0x28ad18
000076:0x0028acf0:	call	Error(_s'Requested type is NULL!')
000077:0x0028ad00:	movetm	#return, null
000077:0x0028ad10:	rts
000082:0x0028ad18:	imove	i, 0x000000
000082:0x0028ad28:	jump	0x28ad48
000082:0x0028ad30:	move	@m00, i
000082:0x0028ad40:	inc	i
000082:0x0028ad48:	ncalli	map<int,@PPERequesterBase>.Count()
000082:0x0028ad50:	cmpi	i, #return
000082:0x0028ad60:	bge	0x28ae00
000084:0x0028ad68:	icall	
000084:0x0028ad78:	movetm	temp, #return
000085:0x0028ad88:	movefm	[0xd315b998], temp
000085:0x0028ad98:	ncall	Type([0xd315b998])
000085:0x0028ada8:	movea	@m00, #return
000085:0x0028adb8:	cmpi	@m00, type
000085:0x0028adc8:	bne	0x28adf8
000087:0x0028add0:	movefm	@c00, temp
000087:0x0028ade0:	icall	CastTo(ret, @c00)
000088:0x0028adf0:	jump	0x28ae00
000088:0x0028adf8:	jump	0x28ad30
000092:0x0028ae00:	cmpcm	ret, null
000092:0x0028ae10:	bne	0x28ae88
000094:0x0028ae18:	ncall	ToString(type)
000094:0x0028ae28:	adds	@s02, _s''', #return
000094:0x0028ae38:	moves	@s01, @s02
000094:0x0028ae48:	adds	@s01, @s01, _s'' not found in bank! Register first in 'RegisterRequester' method.'
000094:0x0028ae58:	moves	@s00, @s01
000094:0x0028ae68:	call	Log(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
000096:0x0028ae88:	movem	#return, ret
000096:0x0028ae98:	release	temp
000096:0x0028aea0:	release	ret
000096:0x0028aea8:	rts
000096:0x0028aeb0:	release	temp
000096:0x0028aeb8:	release	ret
000096:0x0028aec0:	rts
PPERequesterBank::GetRequester#144119()
000107:0x0028af18:	icall	
000107:0x0028af28:	movetm	ret, #return
000109:0x0028af38:	cmpcm	ret, null
000109:0x0028af48:	bne	0x28afc0
000111:0x0028af50:	icall	ToString(index)
000111:0x0028af60:	adds	@s02, _s'Requester idx '', #return
000111:0x0028af70:	moves	@s01, @s02
000111:0x0028af80:	adds	@s01, @s01, _s'' not found in bank! Register first in 'RegisterRequester' method.'
000111:0x0028af90:	moves	@s00, @s01
000111:0x0028afa0:	call	Log(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
000113:0x0028afc0:	movem	#return, ret
000113:0x0028afd0:	release	ret
000113:0x0028afd8:	rts
000113:0x0028afe0:	release	ret
000113:0x0028afe8:	rts
PPERequesterBank::GetRequesterID()
000124:0x0028b0b8:	imove	ret, 0xffffffff
000127:0x0028b0c8:	imove	i, 0x000000
000127:0x0028b0d8:	jump	0x28b0f8
000127:0x0028b0e0:	move	@m00, i
000127:0x0028b0f0:	inc	i
000127:0x0028b0f8:	ncalli	map<int,@PPERequesterBase>.Count()
000127:0x0028b100:	cmpi	i, #return
000127:0x0028b110:	bge	0x28b1a8
000129:0x0028b118:	icall	
000129:0x0028b128:	movetm	temp, #return
000130:0x0028b138:	movefm	[0xd315b998], temp
000130:0x0028b148:	ncall	Type([0xd315b998])
000130:0x0028b158:	movea	@m00, #return
000130:0x0028b168:	cmpi	@m00, type
000130:0x0028b178:	bne	0x28b1a0
000132:0x0028b180:	icall	
000132:0x0028b190:	move	ret, #return
000132:0x0028b1a0:	jump	0x28b0e0
000136:0x0028b1a8:	cmpi	ret, _i-1
000136:0x0028b1b8:	bne	0x28b230
000138:0x0028b1c0:	ncall	ToString(type)
000138:0x0028b1d0:	adds	@s02, _s'Requester instance of the '', #return
000138:0x0028b1e0:	moves	@s01, @s02
000138:0x0028b1f0:	adds	@s01, @s01, _s'' type not found in bank! Register first in 'RegisterRequester' method.'
000138:0x0028b200:	moves	@s00, @s01
000138:0x0028b210:	call	Log(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
000140:0x0028b230:	move	#return, ret
000140:0x0028b240:	release	temp
000140:0x0028b248:	rts
000140:0x0028b250:	release	temp
000140:0x0028b258:	rts
PPERequesterBank::GetRequesterTypename()
000151:0x0028b300:	icall	
000151:0x0028b310:	movetm	temp, #return
000152:0x0028b320:	cmpcm	temp, null
000152:0x0028b330:	bne	0x28b3b0
000154:0x0028b338:	icall	ToString(index)
000154:0x0028b348:	adds	@s02, _s'No requester exists under idx '', #return
000154:0x0028b358:	moves	@s01, @s02
000154:0x0028b368:	adds	@s01, @s01, _s'' in bank! Register first in 'RegisterRequester' method.'
000154:0x0028b378:	moves	@s00, @s01
000154:0x0028b388:	call	Log(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
000154:0x0028b3a8:	jump	0x28b3e0
000158:0x0028b3b0:	movefm	[0xd315b998], temp
000158:0x0028b3c0:	ncall	Type([0xd315b998])
000158:0x0028b3d0:	movea	ret, #return
000161:0x0028b3e0:	movea	#return, ret
000161:0x0028b3f0:	release	temp
000161:0x0028b3f8:	rts
000161:0x0028b400:	release	temp
000161:0x0028b408:	rts
PPERequesterBank::RegisterRequester()
000170:0x0028b460:	cmpcm	m_Instances, null
000170:0x0028b470:	bne	0x28b498
000171:0x0028b478:	new	m_Instances, map<int,@PPERequesterBase>
000173:0x0028b498:	call	GetRequester(type)
000173:0x0028b4a8:	movefm	@c00, #return
000173:0x0028b4b8:	cmpc	@c00, null
000173:0x0028b4c8:	beq	0x28b540
000176:0x0028b4d0:	ncall	ToString(type)
000176:0x0028b4e0:	adds	@s01, _s'Trying to register an already existing requester type: ', #return
000176:0x0028b4f0:	moves	@s00, @s01
000176:0x0028b500:	call	Log(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
000177:0x0028b520:	imove	#return, 0xffffffff
000177:0x0028b530:	release	#return
000177:0x0028b538:	rts
000177:0x0028b540:	release	#return
000180:0x0028b548:	move	@m00, m_lastID
000180:0x0028b558:	inc	m_lastID
000183:0x0028b560:	icall	Spawn(type)
000183:0x0028b570:	icall	SafeCastType([0xb5b35be8], @c01, #return)
000183:0x0028b588:	movetm	req, @c01
000184:0x0028b598:	call	
000185:0x0028b5a8:	movefm	@c00, req
000185:0x0028b5b8:	icall	
000187:0x0028b5c8:	move	#return, m_lastID
000187:0x0028b5d8:	release	req
000187:0x0028b5e0:	rts
000187:0x0028b5e8:	release	req
000187:0x0028b5f0:	rts
PPERequesterBank::VerifyRequester()
000193:0x0028b698:	cmpi	m_Initialized, _i0
000193:0x0028b6a8:	bne	0x28b6c8
000195:0x0028b6b0:	imove	#return, 0x000001
000195:0x0028b6c0:	rts
000199:0x0028b6c8:	imove	i, 0x000000
000199:0x0028b6d8:	jump	0x28b6f8
000199:0x0028b6e0:	move	@m00, i
000199:0x0028b6f0:	inc	i
000199:0x0028b6f8:	ncalli	map<int,@PPERequesterBase>.Count()
000199:0x0028b700:	cmpi	i, #return
000199:0x0028b710:	bge	0x28b778
000201:0x0028b718:	icall	
000201:0x0028b728:	movetm	temp, #return
000202:0x0028b738:	cmpm	temp, req
000202:0x0028b748:	bne	0x28b770
000204:0x0028b750:	imove	#return, 0x000001
000204:0x0028b760:	release	temp
000204:0x0028b768:	rts
000204:0x0028b770:	jump	0x28b6e0
000209:0x0028b778:	icall	ToString(req)
000209:0x0028b788:	adds	@s02, _s'Requester instance '', #return
000209:0x0028b798:	moves	@s01, @s02
000209:0x0028b7a8:	adds	@s01, @s01, _s'' not valid! Please use registered instances from PPERequesterBank.'
000209:0x0028b7b8:	moves	@s00, @s01
000209:0x0028b7c8:	call	Log(@s00, _s'n/a', _s'n/a', _s'n/a', _s'n/a')
000210:0x0028b7e8:	imove	#return, 0x000000
000210:0x0028b7f8:	release	temp
000210:0x0028b800:	rts
000210:0x0028b808:	release	temp
000210:0x0028b810:	rts
ComponentBodyStaging::ComponentBodyStaging()
//scripts/3_Game/tools\component\bodystaging.c
000015:0x0028b818:	imove	m_IsSkinned, 0x000000
000015:0x0028b828:	rts
ComponentBodyStaging::SetAsSkinned()
000025:0x0028b830:	imove	m_IsSkinned, 0x000001
000041:0x0028b840:	call	
000041:0x0028b850:	rts
ComponentBodyStaging::IsSkinned()
000046:0x0028b858:	move	#return, m_IsSkinned
000046:0x0028b868:	rts
000046:0x0028b870:	rts
ComponentBodyStaging::SetAsSkinnedClient()
000051:0x0028b878:	imove	m_IsSkinned, 0x000001
000051:0x0028b888:	rts
ComponentBodyStaging::SynchSkinnedState()
000061:0x0028b8b8:	ncall	GetGame()
000061:0x0028b8c0:	ncalli	CGame.IsServer()
000061:0x0028b8c8:	cmpi	#return, _i0
000061:0x0028b8d8:	beq	0x28b958
000063:0x0028b8e0:	call	
000063:0x0028b8f0:	new	p, Param1<bool>
000064:0x0028b918:	ncall	GetGame()
000064:0x0028b920:	movem	target, m_ThisEntityAI
000064:0x0028b930:	call	
000064:0x0028b950:	release	p
000064:0x0028b958:	rts
Debug::GetDebugName#144741()
//scripts/3_Game/tools\debug.c
000042:0x0028b988:	cmpcm	entity, null
000042:0x0028b998:	bne	0x28b9b8
000043:0x0028b9a0:	moves	#return, _s''
000043:0x0028b9b0:	rts
000046:0x0028b9b8:	movefm	@c00, entity
000046:0x0028b9c8:	icall	CastTo(obj, @c00)
000046:0x0028b9d8:	cmpi	#return, _i0
000046:0x0028b9e8:	beq	0x28ba18
000047:0x0028b9f0:	icall	
000047:0x0028b9f8:	moves	#return, #return
000047:0x0028ba08:	release	obj
000047:0x0028ba10:	rts
000049:0x0028ba18:	call	
000049:0x0028ba28:	moves	#return, #return
000049:0x0028ba38:	release	obj
000049:0x0028ba40:	rts
000049:0x0028ba48:	release	obj
000049:0x0028ba50:	rts
Debug::InitCanvas()
000054:0x0028baa8:	cmpcm	m_DebugLayoutCanvas, null
000054:0x0028bab8:	bne	0x28bb30
000056:0x0028bac0:	ncall	GetGame()
000056:0x0028bac8:	ncalli	CGame.GetWorkspace()
000056:0x0028bad0:	ncall	CreateWidgets(#return, _s'gui/layouts/debug/day_z_debugcanvas.layout', _c0, _i1)
000056:0x0028bae8:	movetm	m_DebugLayoutCanvas, #return
000057:0x0028baf8:	ncalli	Widget.FindAnyWidget(_s'CanvasWidget')
000057:0x0028bb08:	icall	SafeCastType([0xd31364e0], @c01, #return)
000057:0x0028bb20:	movetm	m_CanvasDebug, @c01
000057:0x0028bb30:	rts
Debug::ClearCanvas()
000063:0x0028bb38:	cmpcm	m_CanvasDebug, null
000063:0x0028bb48:	beq	0x28bb58
000064:0x0028bb50:	ncalli	CanvasWidget.Clear()
000064:0x0028bb58:	rts
Debug::CanvasDrawLine()
000069:0x0028bb60:	call	InitCanvas()
000070:0x0028bb70:	ncalli	CanvasWidget.DrawLine(x1, y1, x2, y2, width, color)
000070:0x0028bb90:	rts
Debug::CanvasDrawPoint()
000086:0x0028bb98:	addf	@f01, x1, _f1.000000
000086:0x0028bba8:	move	@f00, @f01
000086:0x0028bbb8:	call	CanvasDrawLine(x1, y1, @f00, y1, _f1.000000, color)
000086:0x0028bbe0:	rts
Debug::Init()
000091:0x0028bbe8:	new	m_DebugShapes, array<Shape>
000091:0x0028bc08:	rts
Debug::DestroyAllShapes()
000096:0x0028bc38:	imove	i, 0x000000
000096:0x0028bc48:	jump	0x28bc58
000096:0x0028bc50:	inc	i
000096:0x0028bc58:	ncalli	array<Shape>.Count()
000096:0x0028bc60:	cmpi	i, #return
000096:0x0028bc70:	bge	0x28bcc0
000098:0x0028bc78:	icall	
000098:0x0028bc88:	cmpc	#return, null
000098:0x0028bc98:	beq	0x28bcb8
000100:0x0028bca0:	icall	
000100:0x0028bcb0:	ncalli	Shape.Destroy()
000100:0x0028bcb8:	jump	0x28bc50
000104:0x0028bcc0:	ncalli	array<Shape>.Clear()
000104:0x0028bcc8:	rts
Debug::RemoveShape()
000109:0x0028bd50:	cmpc	shape, null
000109:0x0028bd60:	bne	0x28bd80
000109:0x0028bd68:	movec	shape, shape
000109:0x0028bd78:	rts
000110:0x0028bd80:	imove	i, 0x000000
000110:0x0028bd90:	jump	0x28bdb0
000110:0x0028bd98:	move	@m00, i
000110:0x0028bda8:	inc	i
000110:0x0028bdb0:	ncalli	array<Shape>.Count()
000110:0x0028bdb8:	cmpi	i, #return
000110:0x0028bdc8:	bge	0x28be68
000112:0x0028bdd0:	icall	
000112:0x0028bde0:	movec	found_shape, #return
000114:0x0028bdf0:	cmpc	found_shape, null
000114:0x0028be00:	beq	0x28be60
000114:0x0028be08:	cmpc	found_shape, shape
000114:0x0028be18:	bne	0x28be60
000116:0x0028be20:	ncalli	Shape.Destroy()
000117:0x0028be28:	ncalli	array<Shape>.Remove(i)
000118:0x0028be38:	movec	shape, null
000119:0x0028be48:	movec	shape, shape
000119:0x0028be58:	rts
000119:0x0028be60:	jump	0x28bd98
000119:0x0028be68:	movec	shape, shape
000119:0x0028be78:	rts
Debug::Log()
000135:0x0028be80:	call	LogMessage(LOG_DEBUG, plugin, entity, author, label, message)
000135:0x0028bea8:	rts
Debug::ActionLog()
000140:0x0028beb0:	call	LogMessage(LOG_DEBUG_ACTION, plugin, entity, author, label, message)
000140:0x0028bed8:	rts
Debug::SymptomLog()
000145:0x0028bee0:	call	LogMessage(LOG_DEBUG_SYMPTOM, plugin, entity, author, label, message)
000145:0x0028bf08:	rts
Debug::InventoryMoveLog()
000150:0x0028bf10:	call	LogMessage(LOG_DEBUG_INV_MOVE, plugin, entity, author, label, message)
000150:0x0028bf38:	rts
Debug::InventoryReservationLog()
000155:0x0028bf40:	call	LogMessage(LOG_DEBUG_INV_RESERVATION, plugin, entity, author, label, message)
000155:0x0028bf68:	rts
Debug::InventoryHFSMLog()
000160:0x0028bf70:	call	LogMessage(LOG_DEBUG_INV_HFSM, plugin, entity, author, label, message)
000160:0x0028bf98:	rts
Debug::TriggerLog()
000165:0x0028bfa0:	call	LogMessage(LOG_DEBUG_TRIGGER, plugin, entity, author, label, message)
000165:0x0028bfc8:	rts
Debug::ParticleLog()
000170:0x0028bfd0:	call	GetDebugName#144741(caller)
000170:0x0028bfe0:	pushs	#return
000170:0x0028bfe8:	call	GetDebugName#144741(entity)
000170:0x0028bff8:	moves	@s00, #return
000170:0x0028c008:	pops	#return
000170:0x0028c010:	call	LogMessage(LOG_DEBUG_PARTICLE, #return, @s00, _s'', function, message)
000170:0x0028c038:	rts
Debug::TFLog()
000175:0x0028c040:	call	GetDebugName#144741(caller)
000175:0x0028c050:	call	LogMessage(LOG_DEBUG_TF, #return, _s'', _s'', function, message)
000175:0x0028c078:	rts
Debug::MeleeLog()
000185:0x0028c0d8:	ncalli	Entity.GetSimulationTimeStamp()
000185:0x0028c0e0:	icall	Format(_s'%1: %2', #return, message, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000185:0x0028c110:	moves	logMessage, #return
000186:0x0028c120:	call	GetDebugName#144741(entity)
000186:0x0028c130:	call	LogMessage(LOG_DEBUG_MELEE, plugin, #return, author, label, logMessage)
000186:0x0028c158:	rts
Debug::WeatherLog()
000191:0x0028c160:	call	IsWeatherLogEnabled()
000191:0x0028c170:	cmpi	#return, _i0
000191:0x0028c180:	beq	0x28c1b0
000192:0x0028c188:	call	LogMessage(LOG_DEBUG_WEATHER, plugin, entity, author, label, message)
000192:0x0028c1b0:	rts
Debug::LogInfo()
000207:0x0028c1b8:	call	LogMessage(LOG_INFO, plugin, entity, author, label, message)
000207:0x0028c1e0:	rts
Debug::LogWarning()
000222:0x0028c1e8:	call	LogMessage(LOG_WARNING, plugin, entity, author, label, message)
000222:0x0028c210:	rts
Debug::LogError()
000237:0x0028c218:	call	LogMessage(LOG_ERROR, plugin, entity, author, label, message)
000237:0x0028c240:	rts
Debug::LogArrayInt()
000242:0x0028c270:	cmpcm	arr, null
000242:0x0028c280:	bne	0x28c290
000243:0x0028c288:	rts
000245:0x0028c290:	imove	i, 0x000000
000245:0x0028c2a0:	jump	0x28c2c0
000245:0x0028c2a8:	move	@m00, i
000245:0x0028c2b8:	inc	i
000245:0x0028c2c0:	ncalli	array<int>.Count()
000245:0x0028c2c8:	cmpi	i, #return
000245:0x0028c2d8:	bge	0x28c330
000247:0x0028c2e0:	icall	
000247:0x0028c2f0:	icall	ToString(#return)
000247:0x0028c300:	call	LogMessage(LOG_DEBUG, plugin, entity, author, label, #return)
000247:0x0028c328:	jump	0x28c2a8
000247:0x0028c330:	rts
Debug::LogArrayString()
000253:0x0028c360:	cmpcm	arr, null
000253:0x0028c370:	bne	0x28c380
000254:0x0028c378:	rts
000256:0x0028c380:	imove	i, 0x000000
000256:0x0028c390:	jump	0x28c3b0
000256:0x0028c398:	move	@m00, i
000256:0x0028c3a8:	inc	i
000256:0x0028c3b0:	ncalli	array<string>.Count()
000256:0x0028c3b8:	cmpi	i, #return
000256:0x0028c3c8:	bge	0x28c410
000258:0x0028c3d0:	icall	
000258:0x0028c3e0:	call	LogMessage(LOG_DEBUG, plugin, entity, author, label, #return)
000258:0x0028c408:	jump	0x28c398
000258:0x0028c410:	rts
Debug::ReceivedLogMessageFromServer()
000264:0x0028c418:	call	IsLogsEnable()
000264:0x0028c428:	cmpi	#return, _i0
000264:0x0028c438:	beq	0x28c450
000265:0x0028c440:	call	SaveLog(message)
000265:0x0028c450:	rts
Debug::ClearScriptLogs()
000270:0x0028c458:	call	ClearLogs()
000270:0x0028c468:	rts
Debug::DrawBox()
000275:0x0028c470:	imove	@m01, 0x00000a
000275:0x0028c480:	move	@m00, @m01
000275:0x0028c490:	call	DrawBoxEx(pos1, pos2, color, @m00)
000275:0x0028c4b0:	movec	#return, #return
000275:0x0028c4c0:	rts
000275:0x0028c4c8:	rts
Debug::DrawBoxEx()
000280:0x0028c520:	ncall	Create(_i1, color, flags, pos1, pos2)
000280:0x0028c540:	movec	shape, #return
000281:0x0028c550:	andi	@m01, flags, _i32
000281:0x0028c560:	move	@m00, @m01
000281:0x0028c570:	cmpi	@m00, _i0
000281:0x0028c580:	bne	0x28c598
000282:0x0028c588:	icall	
000283:0x0028c598:	movec	#return, shape
000283:0x0028c5a8:	rts
000283:0x0028c5b0:	rts
Debug::DrawCube()
000288:0x0028c6c8:	movev	min, pos
000289:0x0028c6d8:	movev	max, pos
000291:0x0028c6e8:	mulf	size_h, size, _f0.500000
000293:0x0028c6f8:	ifv	@f00, min[0x000000]
000293:0x0028c708:	subf	@f00, @f00, size_h
000293:0x0028c718:	itv	min[0x000000], @f00
000294:0x0028c728:	ifv	@f00, min[0x000001]
000294:0x0028c738:	subf	@f00, @f00, size_h
000294:0x0028c748:	itv	min[0x000001], @f00
000295:0x0028c758:	ifv	@f00, min[0x000002]
000295:0x0028c768:	subf	@f00, @f00, size_h
000295:0x0028c778:	itv	min[0x000002], @f00
000297:0x0028c788:	ifv	@f00, max[0x000000]
000297:0x0028c798:	addf	@f00, @f00, size_h
000297:0x0028c7a8:	itv	max[0x000000], @f00
000298:0x0028c7b8:	ifv	@f00, max[0x000001]
000298:0x0028c7c8:	addf	@f00, @f00, size_h
000298:0x0028c7d8:	itv	max[0x000001], @f00
000299:0x0028c7e8:	ifv	@f00, max[0x000002]
000299:0x0028c7f8:	addf	@f00, @f00, size_h
000299:0x0028c808:	itv	max[0x000002], @f00
000301:0x0028c818:	imove	@m01, 0x00000a
000301:0x0028c828:	move	@m00, @m01
000301:0x0028c838:	ncall	Create(_i11, color, @m00, min, max)
000301:0x0028c858:	movec	shape, #return
000302:0x0028c868:	icall	
000303:0x0028c878:	movec	#return, shape
000303:0x0028c888:	rts
000303:0x0028c890:	rts
Debug::DrawSphere()
000308:0x0028c8c0:	ncall	CreateSphere(color, flags, pos, size)
000308:0x0028c8d8:	movec	shape, #return
000309:0x0028c8e8:	andi	@m01, flags, _i32
000309:0x0028c8f8:	move	@m00, @m01
000309:0x0028c908:	cmpi	@m00, _i0
000309:0x0028c918:	bne	0x28c930
000310:0x0028c920:	icall	
000311:0x0028c930:	movec	#return, shape
000311:0x0028c940:	rts
000311:0x0028c948:	rts
Debug::DrawFrustum()
000316:0x0028c978:	ncall	CreateFrustum(horizontalAngle, verticalAngle, length, color, flags)
000316:0x0028c998:	movec	shape, #return
000317:0x0028c9a8:	andi	@m01, flags, _i32
000317:0x0028c9b8:	move	@m00, @m01
000317:0x0028c9c8:	cmpi	@m00, _i0
000317:0x0028c9d8:	bne	0x28c9f0
000318:0x0028c9e0:	icall	
000319:0x0028c9f0:	movec	#return, shape
000319:0x0028ca00:	rts
000319:0x0028ca08:	rts
Debug::DrawCylinder()
000324:0x0028ca38:	ncall	CreateCylinder(color, flags, pos, radius, height)
000324:0x0028ca58:	movec	shape, #return
000325:0x0028ca68:	andi	@m01, flags, _i32
000325:0x0028ca78:	move	@m00, @m01
000325:0x0028ca88:	cmpi	@m00, _i0
000325:0x0028ca98:	bne	0x28cab0
000326:0x0028caa0:	icall	
000327:0x0028cab0:	movec	#return, shape
000327:0x0028cac0:	rts
000327:0x0028cac8:	rts
Debug::DrawCone()
000332:0x0028cbe0:	new	shapes, array<Shape>
000335:0x0028cc00:	icall	ConePoints(pos, lenght, halfAngle, offsetAngle, endL, endR)
000338:0x0028cc20:	call	DrawLine(pos, endL, color, flags)
000338:0x0028cc40:	icall	
000340:0x0028cc50:	call	DrawLine(pos, endR, color, flags)
000340:0x0028cc70:	icall	
000342:0x0028cc80:	call	DrawLine(endL, endR, color, flags)
000342:0x0028cca0:	icall	
000344:0x0028ccb0:	icall	Cos(offsetAngle)
000344:0x0028ccc0:	icall	Sin(offsetAngle)
000344:0x0028ccd0:	ncall	Vector(#return, _f0.000000, #return)
000344:0x0028cce8:	icall	Normalized(#return)
000344:0x0028ccf8:	scalev	@v02, #return, lenght
000344:0x0028cd08:	movev	@v01, @v02
000344:0x0028cd18:	addv	@v01, pos, @v01
000344:0x0028cd28:	movev	@v00, @v01
000344:0x0028cd38:	call	DrawLine(pos, @v00, color, flags)
000344:0x0028cd58:	icall	
000346:0x0028cd68:	movem	#return, shapes
000346:0x0028cd78:	release	shapes
000346:0x0028cd80:	rts
000346:0x0028cd88:	release	shapes
000346:0x0028cd90:	rts
Debug::DrawLine()
000364:0x0028ce00:	ctv	pts[_i0], from
000365:0x0028ce10:	ctv	pts[_i1], to
000367:0x0028ce20:	ncall	CreateLines(color, flags, pts, _i2)
000367:0x0028ce38:	movec	shape, #return
000368:0x0028ce48:	andi	@m01, flags, _i32
000368:0x0028ce58:	move	@m00, @m01
000368:0x0028ce68:	cmpi	@m00, _i0
000368:0x0028ce78:	bne	0x28ce90
000369:0x0028ce80:	icall	
000371:0x0028ce90:	movec	#return, shape
000371:0x0028cea0:	rts
000371:0x0028cea8:	rts
Debug::DrawLines()
000377:0x0028ced8:	ncall	CreateLines(color, flags, positions, count)
000377:0x0028cef0:	movec	shape, #return
000378:0x0028cf00:	andi	@m01, flags, _i32
000378:0x0028cf10:	move	@m00, @m01
000378:0x0028cf20:	cmpi	@m00, _i0
000378:0x0028cf30:	bne	0x28cf48
000379:0x0028cf38:	icall	
000380:0x0028cf48:	movec	#return, shape
000380:0x0028cf58:	rts
000380:0x0028cf60:	rts
Debug::DrawArrow()
000385:0x0028cf90:	call	CreateArrow(from, to, size, color, flags)
000385:0x0028cfb0:	movec	shape, #return
000386:0x0028cfc0:	icall	
000387:0x0028cfd0:	movec	#return, shape
000387:0x0028cfe0:	rts
000387:0x0028cfe8:	rts
Debug::GetBaseConfigClasses()
000398:0x0028cff0:	ncalli	array<string>.Clear()
000399:0x0028cff8:	icall	
000400:0x0028d008:	icall	
000401:0x0028d018:	icall	
000402:0x0028d028:	icall	
000403:0x0028d038:	icall	
000404:0x0028d048:	icall	
000405:0x0028d058:	icall	
000406:0x0028d068:	icall	
000407:0x0028d078:	icall	
000408:0x0028d088:	icall	
000408:0x0028d098:	movem	base_classes, base_classes
000408:0x0028d0a8:	rts
Debug::GetFiltredConfigClasses()
000419:0x0028d2d0:	new	searching_in, array<string>
000420:0x0028d2f0:	call	GetBaseConfigClasses(searching_in)
000420:0x0028d300:	movem	searching_in, base_classes
000420:0x0028d310:	release	base_classes
000422:0x0028d318:	ncalli	array<string>.Clear()
000424:0x0028d320:	icall	ToLower(search_string)
000426:0x0028d330:	imove	s, 0x000000
000426:0x0028d340:	jump	0x28d350
000426:0x0028d348:	inc	s
000426:0x0028d350:	ncalli	array<string>.Count()
000426:0x0028d358:	cmpi	s, #return
000426:0x0028d368:	bge	0x28d570
000428:0x0028d370:	icall	
000428:0x0028d380:	moves	config_path, #return
000430:0x0028d390:	ncall	GetGame()
000430:0x0028d398:	ncalli	CGame.ConfigGetChildrenCount(config_path)
000430:0x0028d3a8:	move	objects_count, #return
000431:0x0028d3b8:	imove	i, 0x000000
000431:0x0028d3c8:	jump	0x28d3e8
000431:0x0028d3d0:	move	@m00, i
000431:0x0028d3e0:	inc	i
000431:0x0028d3e8:	cmpi	i, objects_count
000431:0x0028d3f8:	bge	0x28d568
000434:0x0028d400:	ncall	GetGame()
000434:0x0028d408:	icall	
000436:0x0028d420:	cmpi	only_public, _i0
000436:0x0028d430:	beq	0x28d4e0
000438:0x0028d438:	ncall	GetGame()
000438:0x0028d440:	adds	@s03, config_path, _s' '
000438:0x0028d450:	moves	@s02, @s03
000438:0x0028d460:	adds	@s02, @s02, childName
000438:0x0028d470:	moves	@s01, @s02
000438:0x0028d480:	adds	@s01, @s01, _s' scope'
000438:0x0028d490:	moves	@s00, @s01
000438:0x0028d4a0:	ncalli	CGame.ConfigGetInt(@s00)
000438:0x0028d4b0:	move	scope, #return
000439:0x0028d4c0:	cmpi	scope, _i0
000439:0x0028d4d0:	bne	0x28d4e0
000441:0x0028d4d8:	jump	0x28d3d0
000445:0x0028d4e0:	moves	nchName, childName
000446:0x0028d4f0:	icall	ToLower(nchName)
000448:0x0028d500:	call	Contains(nchName, search_string)
000448:0x0028d518:	moves	nchName, value
000448:0x0028d528:	move	@m00, #return
000448:0x0028d538:	cmpi	@m00, _i-1
000448:0x0028d548:	beq	0x28d560
000450:0x0028d550:	icall	
000450:0x0028d560:	jump	0x28d3d0
000450:0x0028d568:	jump	0x28d348
000450:0x0028d570:	release	searching_in
000450:0x0028d578:	movem	filtered_classes, filtered_classes
000450:0x0028d588:	rts
Debug::LogMessage()
000463:0x0028d700:	ncall	GetGame()
000463:0x0028d708:	movec	@c00, #return
000463:0x0028d718:	cmpc	@c00, null
000463:0x0028d728:	beq	0x28d758
000463:0x0028d730:	call	IsLogsEnable()
000463:0x0028d740:	cmpi	#return, _i0
000463:0x0028d750:	bne	0x28d760
000464:0x0028d758:	rts
000466:0x0028d760:	ncall	GetGame()
000466:0x0028d768:	ncalli	CGame.IsServer()
000466:0x0028d770:	cmpi	#return, _i0
000466:0x0028d780:	beq	0x28d7c8
000466:0x0028d788:	ncall	GetGame()
000466:0x0028d790:	ncalli	CGame.IsMultiplayer()
000466:0x0028d798:	cmpi	#return, _i0
000466:0x0028d7a8:	beq	0x28d7c8
000466:0x0028d7b0:	imove	is_server_log, 0x000001
000466:0x0028d7c0:	jump	0x28d7d8
000466:0x0028d7c8:	imove	is_server_log, 0x000000
000471:0x0028d7d8:	call	GetDate()
000471:0x0028d7e8:	moves	date, #return
000472:0x0028d7f8:	moves	env, _s'Client'
000473:0x0028d808:	moves	msg, Empty
000475:0x0028d818:	cmpi	is_server_log, _i0
000475:0x0028d828:	beq	0x28d840
000477:0x0028d830:	moves	env, _s'Server'
000480:0x0028d840:	icall	Format(_s'%1 | %2 | %3 | %4 | %5 | %6 | %7', date, env, level, plugin, entity, label, message, _c0, _c0)
000480:0x0028d870:	moves	msg, #return
000482:0x0028d880:	cmpi	is_server_log, _i0
000482:0x0028d890:	beq	0x28d8b0
000484:0x0028d898:	call	SaveLog(msg)
000484:0x0028d8a8:	jump	0x28d8c0
000492:0x0028d8b0:	call	SaveLog(msg)
000492:0x0028d8c0:	rts
Debug::SaveLog()
000499:0x0028d948:	movefm	@c00, PARAM1_STRING
000499:0x0028d958:	moves	param1, log_message
000500:0x0028d968:	call	GetDispatcher()
000500:0x0028d978:	call	
000500:0x0028d990:	release	#return
000500:0x0028d998:	release	#return
000503:0x0028d9a0:	call	GetFileName()
000503:0x0028d9b0:	icall	OpenFile(#return, _i8)
000503:0x0028d9c0:	movea	fileHandle, #return
000504:0x0028d9d0:	cmpc	fileHandle, _i0
000504:0x0028d9e0:	bne	0x28d9f0
000505:0x0028d9e8:	rts
000507:0x0028d9f0:	icall	FPrintln(fileHandle, log_message)
000508:0x0028da00:	icall	CloseFile(fileHandle)
000508:0x0028da10:	rts
Debug::ClearLogs()
000518:0x0028da40:	call	GetFileName()
000518:0x0028da50:	icall	FileExist(#return)
000518:0x0028da60:	cmpi	#return, _i0
000518:0x0028da70:	beq	0x28dae8
000520:0x0028da78:	call	GetFileName()
000520:0x0028da88:	icall	OpenFile(#return, _i4)
000520:0x0028da98:	movea	fileHandle, #return
000521:0x0028daa8:	cmpc	fileHandle, _i0
000521:0x0028dab8:	bne	0x28dac8
000522:0x0028dac0:	rts
000524:0x0028dac8:	icall	FPrintln(fileHandle, _s'')
000525:0x0028dad8:	icall	CloseFile(fileHandle)
000525:0x0028dae8:	rts
Debug::GetFileName()
000531:0x0028daf0:	moves	#return, CFG_FILE_SCRIPT_LOG_EXT
000531:0x0028db00:	rts
000531:0x0028db08:	rts
Debug::GetDate()
000543:0x0028dc78:	icall	GetYearMonthDay(year, month, day)
000544:0x0028dc90:	icall	GetHourMinuteSecond(hour, minute, second)
000546:0x0028dca8:	call	ToStringLen(month, _i2)
000546:0x0028dcc0:	move	month, value
000546:0x0028dcd0:	adds	@s07, #return, _s'-'
000546:0x0028dce0:	moves	@s06, @s07
000546:0x0028dcf0:	pushs	#return
000546:0x0028dcf8:	call	ToStringLen(day, _i2)
000546:0x0028dd10:	moves	@s07, #return
000546:0x0028dd20:	pops	#return
000546:0x0028dd28:	move	day, value
000546:0x0028dd38:	adds	@s06, @s06, @s07
000546:0x0028dd48:	moves	@s05, @s06
000546:0x0028dd58:	adds	@s05, @s05, _s' '
000546:0x0028dd68:	moves	@s04, @s05
000546:0x0028dd78:	pushs	#return
000546:0x0028dd80:	call	ToStringLen(hour, _i2)
000546:0x0028dd98:	moves	@s05, #return
000546:0x0028dda8:	pops	#return
000546:0x0028ddb0:	move	hour, value
000546:0x0028ddc0:	adds	@s04, @s04, @s05
000546:0x0028ddd0:	moves	@s03, @s04
000546:0x0028dde0:	adds	@s03, @s03, _s':'
000546:0x0028ddf0:	moves	@s02, @s03
000546:0x0028de00:	pushs	#return
000546:0x0028de08:	call	ToStringLen(minute, _i2)
000546:0x0028de20:	moves	@s03, #return
000546:0x0028de30:	pops	#return
000546:0x0028de38:	move	minute, value
000546:0x0028de48:	adds	@s02, @s02, @s03
000546:0x0028de58:	moves	@s01, @s02
000546:0x0028de68:	adds	@s01, @s01, _s':'
000546:0x0028de78:	moves	@s00, @s01
000546:0x0028de88:	pushs	#return
000546:0x0028de90:	call	ToStringLen(second, _i2)
000546:0x0028dea8:	moves	@s01, #return
000546:0x0028deb8:	pops	#return
000546:0x0028dec0:	move	second, value
000546:0x0028ded0:	adds	date, @s00, @s01
000548:0x0028dee0:	moves	#return, date
000548:0x0028def0:	rts
000548:0x0028def8:	rts
LogManager::Init()
000568:0x0028e040:	ncall	IsCLIParam(_s'doLogs')
000568:0x0028e050:	move	m_DoLogs, #return
000571:0x0028e060:	ncall	IsCLIParam(_s'doActionLog')
000571:0x0028e070:	move	m_DoActionDebugLog, #return
000572:0x0028e080:	ncall	IsCLIParam(_s'doSymptomLog')
000572:0x0028e090:	move	m_DoSymptomDebugLog, #return
000573:0x0028e0a0:	ncall	IsCLIParam(_s'doInvMoveLog')
000573:0x0028e0b0:	move	m_DoInventoryMoveLog, #return
000574:0x0028e0c0:	ncall	IsCLIParam(_s'doInvReservLog')
000574:0x0028e0d0:	move	m_DoInventoryReservationLog, #return
000575:0x0028e0e0:	ncall	IsCLIParam(_s'doInvHFSMLog')
000575:0x0028e0f0:	move	m_DoInventoryHFSMLog, #return
000576:0x0028e100:	ncall	IsCLIParam(_s'doWeaponLog')
000576:0x0028e110:	move	m_DoWeaponLog, #return
000577:0x0028e120:	ncall	IsCLIParam(_s'doWeatherLog')
000577:0x0028e130:	move	m_DoWeatherLog, #return
000577:0x0028e140:	rts
LogManager::IsLogsEnable()
000582:0x0028e148:	move	#return, m_DoLogs
000582:0x0028e158:	rts
000582:0x0028e160:	rts
LogManager::SetLogsEnabled()
000587:0x0028e168:	move	m_DoLogs, enable
000587:0x0028e178:	rts
LogManager::IsActionLogEnable()
000592:0x0028e180:	move	#return, m_DoActionDebugLog
000592:0x0028e190:	rts
000592:0x0028e198:	rts
LogManager::ActionLogEnable()
000597:0x0028e1a0:	move	m_DoActionDebugLog, enable
000597:0x0028e1b0:	rts
LogManager::IsInventoryMoveLogEnable()
000602:0x0028e1b8:	move	#return, m_DoInventoryMoveLog
000602:0x0028e1c8:	rts
000602:0x0028e1d0:	rts
LogManager::InventoryMoveLogEnable()
000607:0x0028e1d8:	move	m_DoInventoryMoveLog, enable
000607:0x0028e1e8:	rts
LogManager::IsInventoryReservationLogEnable()
000612:0x0028e1f0:	move	#return, m_DoInventoryReservationLog
000612:0x0028e200:	rts
000612:0x0028e208:	rts
LogManager::InventoryReservationLogEnable()
000617:0x0028e210:	move	m_DoInventoryReservationLog, enable
000617:0x0028e220:	rts
LogManager::IsInventoryHFSMLogEnable()
000622:0x0028e228:	move	#return, m_DoInventoryHFSMLog
000622:0x0028e238:	rts
000622:0x0028e240:	rts
LogManager::InventoryHFSMLogEnable()
000627:0x0028e248:	move	m_DoInventoryHFSMLog, enable
000627:0x0028e258:	rts
LogManager::IsSymptomLogEnable()
000632:0x0028e260:	move	#return, m_DoSymptomDebugLog
000632:0x0028e270:	rts
000632:0x0028e278:	rts
LogManager::SymptomLogEnable()
000637:0x0028e280:	move	m_DoSymptomDebugLog, enable
000637:0x0028e290:	rts
LogManager::IsWeaponLogEnable()
000642:0x0028e298:	move	#return, m_DoWeaponLog
000642:0x0028e2a8:	rts
000642:0x0028e2b0:	rts
LogManager::WeaponLogEnable()
000647:0x0028e2b8:	move	m_DoWeaponLog, enable
000647:0x0028e2c8:	rts
LogManager::IsWeatherLogEnabled()
000652:0x0028e2d0:	move	#return, m_DoWeatherLog
000652:0x0028e2e0:	rts
000652:0x0028e2e8:	rts
WeightDebug::GetWeightDebug()
000673:0x0028e318:	movefm	@c00, entity
000673:0x0028e328:	icall	
000673:0x0028e338:	cmpm	#return, null
000673:0x0028e348:	bne	0x28e3d0
000675:0x0028e350:	new	data, WeightDebugData
000676:0x0028e378:	movefm	@c00, entity
000676:0x0028e388:	movefm	@c01, data
000676:0x0028e398:	icall	
000677:0x0028e3a8:	movem	#return, data
000677:0x0028e3b8:	release	data
000677:0x0028e3c0:	rts
000677:0x0028e3c8:	release	data
000679:0x0028e3d0:	movefm	@c01, entity
000679:0x0028e3e0:	icall	
000679:0x0028e3f0:	movetm	#return, #return
000679:0x0028e400:	rts
000679:0x0028e408:	rts
WeightDebug::ClearWeightDebug()
000684:0x0028e410:	ncalli	map<EntityAI,@WeightDebugData>.Clear()
000684:0x0028e418:	rts
WeightDebug::PrintAll()
000689:0x0028e4f0:	ncalli	EntityAI.GetInventory()
000689:0x0028e4f8:	movetm	inv, #return
000690:0x0028e508:	cmpcm	inv, null
000690:0x0028e518:	bne	0x28e530
000691:0x0028e520:	release	inv
000691:0x0028e528:	rts
000692:0x0028e530:	new	items, array<EntityAI>
000693:0x0028e550:	movefm	[0xb5bac2a8], items
000693:0x0028e560:	ncalli	GameInventory.EnumerateInventory(_i0, [0xb5bac2a8])
000694:0x0028e570:	imove	i, 0x000000
000694:0x0028e580:	jump	0x28e5a0
000694:0x0028e588:	move	@m00, i
000694:0x0028e598:	inc	i
000694:0x0028e5a0:	ncalli	array<EntityAI>.Count()
000694:0x0028e5a8:	cmpi	i, #return
000694:0x0028e5b8:	bge	0x28e658
000696:0x0028e5c0:	icall	
000696:0x0028e5d0:	movetm	item, #return
000697:0x0028e5e0:	movefm	@c00, item
000697:0x0028e5f0:	icall	
000697:0x0028e600:	cmpm	#return, null
000697:0x0028e610:	beq	0x28e648
000699:0x0028e618:	movefm	@c00, item
000699:0x0028e628:	icall	
000699:0x0028e638:	call	
000699:0x0028e648:	release	item
000699:0x0028e650:	jump	0x28e588
000699:0x0028e658:	release	inv
000699:0x0028e660:	release	items
000699:0x0028e668:	rts
WeightDebug::SetVerbosityFlags()
000706:0x0028e670:	move	m_VerbosityFlags, type
000706:0x0028e680:	rts
WeightDebugData::WeightDebugData()
000719:0x0028e688:	call	
000719:0x0028e698:	moves	m_Classname, #return
000720:0x0028e6a8:	call	
000720:0x0028e6b8:	move	m_InventoryDepth, #return
000720:0x0028e6c8:	rts
WeightDebugData::SetWeight()
000725:0x0028e6d0:	icall	ToString(weight)
000725:0x0028e6e0:	moves	m_Weight, #return
000725:0x0028e6f0:	rts
WeightDebugData::SetCalcDetails()
000730:0x0028e6f8:	moves	m_CalcDetails, details
000730:0x0028e708:	rts
WeightDebugData::AddCalcDetails()
000736:0x0028e738:	adds	@s00, _s'+ ', details
000736:0x0028e748:	adds	m_CalcDetails, m_CalcDetails, @s00
000736:0x0028e758:	rts
WeightDebugData::Output()
000742:0x0028e878:	imove	i, 0x000000
000742:0x0028e888:	jump	0x28e8a8
000742:0x0028e890:	move	@m00, i
000742:0x0028e8a0:	inc	i
000742:0x0028e8a8:	cmpi	i, m_InventoryDepth
000742:0x0028e8b8:	bge	0x28e8e8
000743:0x0028e8c0:	moves	@s00, _s'--------'
000743:0x0028e8d0:	adds	spaces, spaces, @s00
000743:0x0028e8e0:	jump	0x28e890
000745:0x0028e8e8:	adds	@s01, spaces, _s'>'
000745:0x0028e8f8:	moves	@s00, @s01
000745:0x0028e908:	adds	@s00, @s00, m_Classname
000745:0x0028e918:	moves	@s01, @s00
000745:0x0028e928:	adds	@s01, @s01, _s' Overall entity weight: '
000745:0x0028e938:	moves	@s00, @s01
000745:0x0028e948:	adds	@s00, @s00, m_Weight
000745:0x0028e958:	moves	@s01, @s00
000745:0x0028e968:	adds	@s01, @s01, _s' Calculation details:'
000745:0x0028e978:	moves	@s00, @s01
000745:0x0028e988:	adds	@s00, @s00, m_CalcDetails
000745:0x0028e998:	moves	@s01, @s00
000745:0x0028e9a8:	icall	Print(@s01)
000745:0x0028e9b8:	rts
EffEngineSmoke::EffEngineSmoke()
//scripts/3_Game/effects\effectparticle\vehiclesmoke\enginesmoke.c
000008:0x0028e9c0:	call	
000008:0x0028e9d0:	rts
EffEngineSmoke::SetParticleStateLight()
000013:0x0028e9d8:	call	
000013:0x0028e9e8:	rts
EffEngineSmoke::SetParticleStateHeavy()
000018:0x0028e9f0:	call	
000018:0x0028ea00:	rts
EffEngineSmoke::Event_OnFrameUpdate()
000023:0x0028eb88:	move	@f00, time_delta
000023:0x0028eb98:	addf	m_Time, m_Time, @f00
000025:0x0028eba8:	cmpf	m_Time, m_UpdateInterval
000025:0x0028ebb8:	blt	0x28edc8
000027:0x0028ebc0:	imove	m_Time, 0.00000
000029:0x0028ebd0:	call	
000029:0x0028ebe0:	movefm	@c02, #return
000029:0x0028ebf0:	icall	SafeCastType([0xb5b28ab8], @c01, @c02)
000029:0x0028ec08:	movetm	parent, @c01
000029:0x0028ec18:	release	#return
000031:0x0028ec20:	cmpcm	parent, null
000031:0x0028ec30:	beq	0x28edc0
000033:0x0028ec38:	call	
000033:0x0028ec48:	movem	p, #return
000033:0x0028ec58:	release	#return
000034:0x0028ec60:	cmpcm	p, null
000034:0x0028ec70:	beq	0x28edb8
000036:0x0028ec78:	call	
000036:0x0028ec88:	call	
000038:0x0028ec98:	call	
000038:0x0028eca8:	move	speed, #return
000041:0x0028ecb8:	cmpf	speed, _f100.000000
000041:0x0028ecc8:	bge	0x28ed18
000042:0x0028ecd0:	subf	@f01, _f100.000000, speed
000042:0x0028ece0:	move	@f00, @f01
000042:0x0028ecf0:	divf	@f00, @f00, _f100.000000
000042:0x0028ed00:	move	lifetime_scale, @f00
000042:0x0028ed10:	jump	0x28ed28
000044:0x0028ed18:	imove	lifetime_scale, 0.10000
000046:0x0028ed28:	mulf	@f01, speed, _f0.020000
000046:0x0028ed38:	move	@f00, @f01
000046:0x0028ed48:	addf	birthrate_scale, _f1.000000, @f00
000048:0x0028ed58:	call	
000049:0x0028ed70:	call	
000050:0x0028ed88:	call	
000051:0x0028eda0:	call	
000051:0x0028edb8:	release	p
000051:0x0028edc0:	release	parent
000051:0x0028edc8:	rts
PPERequester_InventoryBlur::OnStart()
//scripts/3_Game/ppemanager\requesters\pperinventoryblur.c
000005:0x0028edd0:	call	
000006:0x0028ede0:	call	
000006:0x0028ee08:	rts
FullTimeData::FormatedWithZero()
//scripts/3_Game/tools\timeconversions.c
000013:0x0028ee38:	icall	Format(_s'%1#STR_time_unit_abbrev_day_0 %2#STR_time_unit_abbrev_hour_0 %3#STR_time_unit_abbrev_minute_0 %4#STR_time_unit_abbrev_second_0', m_Days, m_Hours, m_Minutes, m_Seconds, _c0, _c0, _c0, _c0, _c0)
000013:0x0028ee68:	moves	#return, #return
000013:0x0028ee78:	rts
000013:0x0028ee80:	rts
FullTimeData::FormatedNonZero()
000020:0x0028ef50:	cmpi	m_Days, _i0
000020:0x0028ef60:	ble	0x28efb8
000021:0x0028ef68:	icall	Format(_s'%1#STR_time_unit_abbrev_day_0 ', m_Days, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000021:0x0028ef98:	moves	@s00, #return
000021:0x0028efa8:	adds	message, message, @s00
000022:0x0028efb8:	cmpi	m_Hours, _i0
000022:0x0028efc8:	ble	0x28f020
000023:0x0028efd0:	icall	Format(_s'%1#STR_time_unit_abbrev_hour_0 ', m_Hours, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000023:0x0028f000:	moves	@s00, #return
000023:0x0028f010:	adds	message, message, @s00
000024:0x0028f020:	cmpi	m_Minutes, _i0
000024:0x0028f030:	ble	0x28f088
000025:0x0028f038:	icall	Format(_s'%1#STR_time_unit_abbrev_minute_0 ', m_Minutes, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000025:0x0028f068:	moves	@s00, #return
000025:0x0028f078:	adds	message, message, @s00
000027:0x0028f088:	icall	Format(_s'%1#STR_time_unit_abbrev_second_0', m_Seconds, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000027:0x0028f0b8:	moves	@s00, #return
000027:0x0028f0c8:	adds	message, message, @s00
000029:0x0028f0d8:	moves	#return, message
000029:0x0028f0e8:	rts
000029:0x0028f0f0:	rts
TimeConversions::ConvertSecondsToFullTime()
000042:0x0028f148:	movefm	@c00, fullTime
000042:0x0028f158:	imove	@m01, 0x015180
000042:0x0028f168:	move	@m00, @m01
000042:0x0028f178:	divi	@m00, timeInSeconds, @m00
000042:0x0028f188:	move	m_Days, @m00
000044:0x0028f198:	imove	@m01, 0x015180
000044:0x0028f1a8:	move	@m00, @m01
000044:0x0028f1b8:	modi	@m00, timeInSeconds, @m00
000044:0x0028f1c8:	move	timeInSeconds, @m00
000045:0x0028f1d8:	movefm	@c00, fullTime
000045:0x0028f1e8:	divi	@m00, timeInSeconds, _i3600
000045:0x0028f1f8:	move	m_Hours, @m00
000047:0x0028f208:	modi	@m00, timeInSeconds, _i3600
000047:0x0028f218:	move	timeInSeconds, @m00
000048:0x0028f228:	movefm	@c00, fullTime
000048:0x0028f238:	divi	@m00, timeInSeconds, _i60
000048:0x0028f248:	move	m_Minutes, @m00
000050:0x0028f258:	modi	@m00, timeInSeconds, _i60
000050:0x0028f268:	move	timeInSeconds, @m00
000051:0x0028f278:	movefm	@c00, fullTime
000051:0x0028f288:	move	m_Seconds, timeInSeconds
000051:0x0028f298:	movem	fullTime, fullTime
000051:0x0028f2a8:	rts
ErrorProperties::ErrorProperties()
//scripts/3_Game/global\errormodulehandler\errorproperties.c
000012:0x0028f2b0:	moves	m_Message, message
000013:0x0028f2c0:	moves	m_ServerMessage, serverMessage
000013:0x0028f2d0:	rts
ErrorProperties::GetClientMessage()
000020:0x0028f2d8:	cmps	additionalInfo, _s''
000020:0x0028f2e8:	beq	0x28f340
000021:0x0028f2f0:	icall	Format(EP_MESSAGE_FORMAT_STRING, m_Message, additionalInfo, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000021:0x0028f320:	moves	#return, #return
000021:0x0028f330:	rts
000021:0x0028f338:	jump	0x28f358
000023:0x0028f340:	moves	#return, m_Message
000023:0x0028f350:	rts
000023:0x0028f358:	rts
ErrorProperties::GetServerMessage()
000028:0x0028f360:	cmps	additionalInfo, _s''
000028:0x0028f370:	beq	0x28f3c8
000029:0x0028f378:	icall	Format(EP_MESSAGE_FORMAT_STRING, m_ServerMessage, additionalInfo, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000029:0x0028f3a8:	moves	#return, #return
000029:0x0028f3b8:	rts
000029:0x0028f3c0:	jump	0x28f3e0
000031:0x0028f3c8:	moves	#return, m_ServerMessage
000031:0x0028f3d8:	rts
000031:0x0028f3e0:	rts
DialogueErrorProperties::DialogueErrorProperties()
000047:0x0028f3e8:	moves	m_Header, header
000048:0x0028f3f8:	move	m_DialogButtonType, dialogButtonType
000049:0x0028f408:	move	m_DefaultButton, defaultButton
000050:0x0028f418:	move	m_DialogMeaningType, dialogMeaningType
000051:0x0028f428:	movem	m_Handler, handler
000052:0x0028f438:	move	m_DisplayAdditionalInfo, displayAdditionalInfo
000052:0x0028f448:	rts
DialogueErrorProperties::HandleError()
000065:0x0028f478:	cmpi	m_DisplayAdditionalInfo, _i0
000065:0x0028f488:	beq	0x28f4f0
000065:0x0028f490:	cmps	additionalInfo, _s''
000065:0x0028f4a0:	beq	0x28f4f0
000066:0x0028f4a8:	icall	Format(EP_MESSAGE_FORMAT_STRING, m_Message, additionalInfo, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000066:0x0028f4d8:	moves	message, #return
000066:0x0028f4e8:	jump	0x28f500
000068:0x0028f4f0:	moves	message, m_Message
000072:0x0028f500:	ncall	GetGame()
000072:0x0028f508:	ncalli	CGame.GetUIManager()
000072:0x0028f510:	icall	GetErrorHex(errorCode)
000072:0x0028f520:	icall	Format(EP_HEADER_FORMAT_STRING, m_Header, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000072:0x0028f550:	move	[0xb5c1ad40], m_DialogButtonType
000072:0x0028f560:	move	[0xb5c1ad68], m_DefaultButton
000072:0x0028f570:	move	[0xb5c1ad90], m_DialogMeaningType
000072:0x0028f580:	movefm	[0xb5c1adb8], m_Handler
000072:0x0028f590:	ncalli	UIManager.ShowDialog(#return, message, errorCode, [0xb5c1ad40], [0xb5c1ad68], [0xb5c1ad90], [0xb5c1adb8])
000072:0x0028f5b8:	rts
DialogueErrorProperties::GetHeader()
000076:0x0028f5c0:	moves	#return, m_Message
000076:0x0028f5d0:	rts
000076:0x0028f5d8:	rts
DialogueErrorProperties::GetDialogButtonType()
000077:0x0028f5e0:	move	#return, m_DialogButtonType
000077:0x0028f5f0:	rts
000077:0x0028f5f8:	rts
DialogueErrorProperties::GetDefaultButton()
000078:0x0028f600:	move	#return, m_DefaultButton
000078:0x0028f610:	rts
000078:0x0028f618:	rts
DialogueErrorProperties::GetDialogMeaningType()
000079:0x0028f620:	move	#return, m_DialogMeaningType
000079:0x0028f630:	rts
000079:0x0028f638:	rts
DialogueErrorProperties::GetHandler()
000080:0x0028f640:	movem	#return, m_Handler
000080:0x0028f650:	rts
000080:0x0028f658:	rts
InventoryGridController::GetItemColor()
//scripts/3_Game/gui\inventorygrid.c
000017:0x0028f660:	imove	#return, 0x000000
000017:0x0028f670:	rts
000017:0x0028f678:	rts
InventoryGridController::GetItemSize()
000022:0x0028f680:	ncall	Vector(_f0.000000, _f1.000000, _f1.000000)
000022:0x0028f698:	movev	#return, #return
000022:0x0028f6a8:	rts
000022:0x0028f6b0:	rts
InventoryGrid::InventoryGrid()
000061:0x0028f6b8:	new	m_Items, map<InventoryItem,vector>
000062:0x0028f6d8:	new	m_BackgroundWidgets, map<int,Widget>
000063:0x0028f6f8:	new	m_ItemWidgets, map<int,Widget>
000063:0x0028f718:	rts
InventoryGrid::OnWidgetScriptInit()
000068:0x0028f720:	movem	m_Root, w
000069:0x0028f730:	movefm	[0xd31345a8], m_Root
000069:0x0028f740:	ncalli	Widget.SetHandler(this)
000069:0x0028f750:	rts
InventoryGrid::CanAddItemInHandToInventory()
000075:0x0028f758:	move	#return, m_CanAddItemInHandToInventory
000075:0x0028f768:	rts
000075:0x0028f770:	rts
InventoryGrid::OnUpdate()
000081:0x0028f778:	imove	#return, 0x000000
000081:0x0028f788:	rts
000081:0x0028f790:	rts
InventoryGrid::OnMouseEnter()
000087:0x0028f7e8:	call	
000087:0x0028f7f8:	move	col, #return
000089:0x0028f808:	call	
000089:0x0028f818:	cmpi	#return, _i0
000089:0x0028f828:	bne	0x28f848
000090:0x0028f830:	imove	#return, 0x000000
000090:0x0028f840:	rts
000092:0x0028f848:	cmpi	m_IsDebugOutput, _i0
000092:0x0028f858:	beq	0x28f8f8
000094:0x0028f860:	movefm	[0xd31345a8], m_Root
000094:0x0028f870:	ncalli	Widget.GetName()
000094:0x0028f878:	adds	@s03, #return, _s'::OnMouseEnter('
000094:0x0028f888:	moves	@s02, @s03
000094:0x0028f898:	icall	ToString(col)
000094:0x0028f8a8:	adds	@s02, @s02, #return
000094:0x0028f8b8:	moves	@s01, @s02
000094:0x0028f8c8:	adds	@s01, @s01, _s')'
000094:0x0028f8d8:	moves	@s00, @s01
000094:0x0028f8e8:	call	PrintString(@s00)
000097:0x0028f8f8:	cmpcm	m_Controller, null
000097:0x0028f908:	beq	0x28f940
000097:0x0028f910:	movefm	[0xb5b3f158], m_Controller
000097:0x0028f920:	call	
000099:0x0028f940:	imove	#return, 0x000001
000099:0x0028f950:	rts
000099:0x0028f958:	rts
InventoryGrid::OnMouseLeave()
000105:0x0028f960:	cmpcm	m_Controller, null
000105:0x0028f970:	beq	0x28f9a0
000105:0x0028f978:	movefm	[0xb5b3f158], m_Controller
000105:0x0028f988:	call	
000107:0x0028f9a0:	imove	#return, 0x000001
000107:0x0028f9b0:	rts
000107:0x0028f9b8:	rts
InventoryGrid::OnMouseButtonDown()
000113:0x0028fa10:	cmpi	button, _i1
000113:0x0028fa20:	beq	0x28fa40
000113:0x0028fa28:	cmpi	button, _i0
000113:0x0028fa38:	bne	0x28fbf8
000115:0x0028fa40:	call	
000115:0x0028fa50:	move	col, #return
000117:0x0028fa60:	call	
000117:0x0028fa70:	cmpi	#return, _i0
000117:0x0028fa80:	bne	0x28faa0
000118:0x0028fa88:	imove	#return, 0x000000
000118:0x0028fa98:	rts
000120:0x0028faa0:	cmpi	m_IsDebugOutput, _i0
000120:0x0028fab0:	beq	0x28fb50
000122:0x0028fab8:	movefm	[0xd31345a8], m_Root
000122:0x0028fac8:	ncalli	Widget.GetName()
000122:0x0028fad0:	adds	@s03, #return, _s'::OnMouseButtonDown('
000122:0x0028fae0:	moves	@s02, @s03
000122:0x0028faf0:	icall	ToString(col)
000122:0x0028fb00:	adds	@s02, @s02, #return
000122:0x0028fb10:	moves	@s01, @s02
000122:0x0028fb20:	adds	@s01, @s01, _s')'
000122:0x0028fb30:	moves	@s00, @s01
000122:0x0028fb40:	call	PrintString(@s00)
000125:0x0028fb50:	cmpcm	m_Controller, null
000125:0x0028fb60:	beq	0x28fbd8
000127:0x0028fb68:	cmpi	button, _i1
000127:0x0028fb78:	bne	0x28fbb0
000129:0x0028fb80:	movefm	[0xb5b3f158], m_Controller
000129:0x0028fb90:	call	
000132:0x0028fbb0:	cmpi	button, _i0
000132:0x0028fbc0:	bne	0x28fbd8
000134:0x0028fbc8:	imove	m_IsMouseLeftDown, 0x000001
000137:0x0028fbd8:	imove	#return, 0x000001
000137:0x0028fbe8:	rts
000137:0x0028fbf0:	jump	0x28fc10
000141:0x0028fbf8:	imove	#return, 0x000000
000141:0x0028fc08:	rts
000141:0x0028fc10:	rts
InventoryGrid::OnMouseButtonUp()
000148:0x0028fc68:	cmpi	button, _i0
000148:0x0028fc78:	bne	0x28fce8
000150:0x0028fc80:	cmpi	m_IsMouseLeftDown, _i0
000150:0x0028fc90:	beq	0x28fce8
000152:0x0028fc98:	move	col, m_col
000152:0x0028fca8:	movefm	[0xb5b3f158], m_Controller
000152:0x0028fcb8:	call	
000153:0x0028fcd8:	imove	m_IsMouseLeftDown, 0x000000
000157:0x0028fce8:	cmpi	button, _i1
000157:0x0028fcf8:	beq	0x28fd18
000157:0x0028fd00:	cmpi	button, _i0
000157:0x0028fd10:	bne	0x28fe48
000159:0x0028fd18:	call	
000159:0x0028fd28:	move	col, #return
000161:0x0028fd38:	call	
000161:0x0028fd48:	cmpi	#return, _i0
000161:0x0028fd58:	bne	0x28fd78
000162:0x0028fd60:	imove	#return, 0x000000
000162:0x0028fd70:	rts
000164:0x0028fd78:	cmpi	m_IsDebugOutput, _i0
000164:0x0028fd88:	beq	0x28fe28
000166:0x0028fd90:	movefm	[0xd31345a8], m_Root
000166:0x0028fda0:	ncalli	Widget.GetName()
000166:0x0028fda8:	adds	@s03, #return, _s'::OnMouseButtonUp('
000166:0x0028fdb8:	moves	@s02, @s03
000166:0x0028fdc8:	icall	ToString(col)
000166:0x0028fdd8:	adds	@s02, @s02, #return
000166:0x0028fde8:	moves	@s01, @s02
000166:0x0028fdf8:	adds	@s01, @s01, _s')'
000166:0x0028fe08:	moves	@s00, @s01
000166:0x0028fe18:	call	PrintString(@s00)
000169:0x0028fe28:	imove	#return, 0x000001
000169:0x0028fe38:	rts
000169:0x0028fe40:	jump	0x28fe60
000173:0x0028fe48:	imove	#return, 0x000000
000173:0x0028fe58:	rts
000173:0x0028fe60:	rts
InventoryGrid::OnDoubleClick()
000180:0x0028feb8:	cmpi	button, _i0
000180:0x0028fec8:	beq	0x28fee8
000180:0x0028fed0:	imove	#return, 0x000000
000180:0x0028fee0:	rts
000182:0x0028fee8:	call	
000182:0x0028fef8:	move	col, #return
000184:0x0028ff08:	call	
000184:0x0028ff18:	cmpi	#return, _i0
000184:0x0028ff28:	bne	0x28ff48
000185:0x0028ff30:	imove	#return, 0x000000
000185:0x0028ff40:	rts
000187:0x0028ff48:	cmpi	m_IsDebugOutput, _i0
000187:0x0028ff58:	beq	0x28fff8
000189:0x0028ff60:	movefm	[0xd31345a8], m_Root
000189:0x0028ff70:	ncalli	Widget.GetName()
000189:0x0028ff78:	adds	@s03, #return, _s'::OnDoubleClick('
000189:0x0028ff88:	moves	@s02, @s03
000189:0x0028ff98:	icall	ToString(col)
000189:0x0028ffa8:	adds	@s02, @s02, #return
000189:0x0028ffb8:	moves	@s01, @s02
000189:0x0028ffc8:	adds	@s01, @s01, _s')'
000189:0x0028ffd8:	moves	@s00, @s01
000189:0x0028ffe8:	call	PrintString(@s00)
000192:0x0028fff8:	cmpcm	m_Controller, null
000192:0x00290008:	beq	0x290040
000192:0x00290010:	movefm	[0xb5b3f158], m_Controller
000192:0x00290020:	call	
000194:0x00290040:	imove	#return, 0x000001
000194:0x00290050:	rts
000194:0x00290058:	rts
InventoryGrid::OnDrop()
000200:0x00290108:	cmpi	m_IsDebugOutput, _i0
000200:0x00290118:	beq	0x290168
000202:0x00290120:	movefm	[0xd31345a8], m_Root
000202:0x00290130:	ncalli	Widget.GetName()
000202:0x00290138:	adds	@s01, #return, _s'::OnDrop()'
000202:0x00290148:	moves	@s00, @s01
000202:0x00290158:	call	PrintString(@s00)
000205:0x00290168:	cmpcm	m_Controller, null
000205:0x00290178:	beq	0x2901c0
000207:0x00290180:	move	col, m_col
000207:0x00290190:	movefm	[0xb5b3f158], m_Controller
000207:0x002901a0:	call	
000210:0x002901c0:	cmpcm	w, null
000210:0x002901d0:	beq	0x290258
000212:0x002901d8:	ncalli	Widget.FindAnyWidget(_s'Preview')
000212:0x002901e8:	icall	SafeCastType([0xb5afe2c8], @c01, #return)
000212:0x00290200:	movetm	item_preview, @c01
000213:0x00290210:	cmpcm	item_preview, null
000213:0x00290220:	beq	0x290250
000215:0x00290228:	ncalli	ItemPreviewWidget.GetItem()
000215:0x00290230:	call	
000215:0x00290240:	ncalli	ItemPreviewWidget.SetView(#return)
000215:0x00290250:	release	item_preview
000219:0x00290258:	imove	#return, 0x000001
000219:0x00290268:	rts
000219:0x00290270:	rts
InventoryGrid::GetCol()
000226:0x002902a0:	movefm	[0xb5c2b0a0], m_ItemWidgets
000226:0x002902b0:	call	
000226:0x002902c8:	move	index, key
000226:0x002902d8:	cmpi	#return, _i0
000226:0x002902e8:	beq	0x290310
000227:0x002902f0:	move	#return, index
000227:0x00290300:	rts
000227:0x00290308:	jump	0x290398
000228:0x00290310:	movefm	[0xb5c2b0a0], m_BackgroundWidgets
000228:0x00290320:	call	
000228:0x00290338:	move	index, key
000228:0x00290348:	cmpi	#return, _i0
000228:0x00290358:	beq	0x290380
000229:0x00290360:	move	#return, index
000229:0x00290370:	rts
000229:0x00290378:	jump	0x290398
000231:0x00290380:	imove	#return, 0xffffffff
000231:0x00290390:	rts
000231:0x00290398:	rts
InventoryGrid::GetColFromBg()
000236:0x002903a0:	movefm	[0xb5c2b0a0], m_BackgroundWidgets
000236:0x002903b0:	call	
000236:0x002903c0:	move	#return, #return
000236:0x002903d0:	rts
000236:0x002903d8:	rts
InventoryGrid::GetGridSize()
000241:0x002903e0:	move	#return, m_GridSize
000241:0x002903f0:	rts
000241:0x002903f8:	rts
InventoryGrid::SetGridSize()
000246:0x00290428:	move	m_GridSize, size
000247:0x00290438:	imove	i, 0x000000
000247:0x00290448:	jump	0x290468
000247:0x00290450:	move	@m00, i
000247:0x00290460:	inc	i
000247:0x00290468:	movefm	[0xb5c2b0a0], m_BackgroundWidgets
000247:0x00290478:	ncalli	map<int,Widget>.Count()
000247:0x00290480:	cmpi	i, #return
000247:0x00290490:	bge	0x290520
000249:0x00290498:	cmpi	i, size
000249:0x002904a8:	bge	0x2904e8
000251:0x002904b0:	movefm	[0xb5c2b0a0], m_BackgroundWidgets
000251:0x002904c0:	icall	
000251:0x002904d0:	ncalli	Widget.Show(true, _i1)
000251:0x002904e0:	jump	0x290518
000255:0x002904e8:	movefm	[0xb5c2b0a0], m_BackgroundWidgets
000255:0x002904f8:	icall	
000255:0x00290508:	ncalli	Widget.Show(false, _i1)
000255:0x00290518:	jump	0x290450
000255:0x00290520:	rts
InventoryGrid::IsValidPos()
000262:0x00290528:	cmpi	m_GridSize, index
000262:0x00290538:	ble	0x290570
000262:0x00290540:	cmpi	index, _i-1
000262:0x00290550:	ble	0x290570
000262:0x00290558:	imove	#return, 0x000001
000262:0x00290568:	jump	0x290580
000262:0x00290570:	imove	#return, 0x000000
000262:0x00290580:	rts
000262:0x00290588:	rts
InventoryGrid::OnDrag()
000271:0x002905e0:	citf	[0xd315fea8], x
000271:0x002905f0:	citf	[0xd315fed0], y
000271:0x00290600:	ncalli	Widget.SetPos([0xd315fea8], [0xd315fed0], _i1)
000273:0x00290618:	call	
000273:0x00290628:	move	m_col, #return
000275:0x00290638:	move	index, m_col
000275:0x00290648:	call	
000275:0x00290658:	cmpi	#return, _i0
000275:0x00290668:	bne	0x290688
000276:0x00290670:	imove	#return, 0x000000
000276:0x00290680:	rts
000278:0x00290688:	cmpi	m_IsDebugOutput, _i0
000278:0x00290698:	beq	0x290738
000280:0x002906a0:	movefm	[0xd31345a8], m_Root
000280:0x002906b0:	ncalli	Widget.GetName()
000280:0x002906b8:	adds	@s03, #return, _s'::OnDrag('
000280:0x002906c8:	moves	@s02, @s03
000280:0x002906d8:	icall	ToString(m_col)
000280:0x002906e8:	adds	@s02, @s02, #return
000280:0x002906f8:	moves	@s01, @s02
000280:0x00290708:	adds	@s01, @s01, _s')'
000280:0x00290718:	moves	@s00, @s01
000280:0x00290728:	call	PrintString(@s00)
000283:0x00290738:	cmpcm	m_Controller, null
000283:0x00290748:	beq	0x290790
000283:0x00290750:	move	col, m_col
000283:0x00290760:	movefm	[0xb5b3f158], m_Controller
000283:0x00290770:	call	
000285:0x00290790:	ncalli	Widget.FindAnyWidget(_s'Preview')
000285:0x002907a0:	icall	SafeCastType([0xb5afe2c8], @c01, #return)
000285:0x002907b8:	movetm	item_preview, @c01
000286:0x002907c8:	cmpcm	item_preview, null
000286:0x002907d8:	beq	0x290808
000288:0x002907e0:	ncalli	ItemPreviewWidget.GetItem()
000288:0x002907e8:	call	
000288:0x002907f8:	ncalli	ItemPreviewWidget.SetView(#return)
000290:0x00290808:	imove	#return, 0x000001
000290:0x00290818:	release	item_preview
000290:0x00290820:	rts
000290:0x00290828:	release	item_preview
000290:0x00290830:	rts
InventoryGrid::OnDraggingOver()
000296:0x00290888:	call	
000296:0x00290898:	move	col, #return
000298:0x002908a8:	call	
000298:0x002908b8:	cmpi	#return, _i0
000298:0x002908c8:	bne	0x2908e8
000300:0x002908d0:	imove	#return, 0x000000
000300:0x002908e0:	rts
000303:0x002908e8:	cmpi	m_IsDebugOutput, _i0
000303:0x002908f8:	beq	0x290998
000305:0x00290900:	movefm	[0xd31345a8], m_Root
000305:0x00290910:	ncalli	Widget.GetName()
000305:0x00290918:	adds	@s03, #return, _s'::OnDraggingOver('
000305:0x00290928:	moves	@s02, @s03
000305:0x00290938:	icall	ToString(col)
000305:0x00290948:	adds	@s02, @s02, #return
000305:0x00290958:	moves	@s01, @s02
000305:0x00290968:	adds	@s01, @s01, _s')'
000305:0x00290978:	moves	@s00, @s01
000305:0x00290988:	call	PrintString(@s00)
000308:0x00290998:	cmpcm	m_Controller, null
000308:0x002909a8:	beq	0x2909e0
000308:0x002909b0:	movefm	[0xb5b3f158], m_Controller
000308:0x002909c0:	call	
000311:0x002909e0:	imove	#return, 0x000001
000311:0x002909f0:	rts
000311:0x002909f8:	rts
InventoryGrid::OnDropReceived()
000317:0x00290a50:	call	
000317:0x00290a60:	move	col, #return
000319:0x00290a70:	call	
000319:0x00290a80:	cmpi	#return, _i0
000319:0x00290a90:	bne	0x290ab0
000320:0x00290a98:	imove	#return, 0x000000
000320:0x00290aa8:	rts
000322:0x00290ab0:	cmpi	m_IsDebugOutput, _i0
000322:0x00290ac0:	beq	0x290b60
000324:0x00290ac8:	movefm	[0xd31345a8], m_Root
000324:0x00290ad8:	ncalli	Widget.GetName()
000324:0x00290ae0:	adds	@s03, #return, _s'::OnDropReceived('
000324:0x00290af0:	moves	@s02, @s03
000324:0x00290b00:	icall	ToString(col)
000324:0x00290b10:	adds	@s02, @s02, #return
000324:0x00290b20:	moves	@s01, @s02
000324:0x00290b30:	adds	@s01, @s01, _s')'
000324:0x00290b40:	moves	@s00, @s01
000324:0x00290b50:	call	PrintString(@s00)
000327:0x00290b60:	cmpcm	m_Controller, null
000327:0x00290b70:	beq	0x290ba8
000327:0x00290b78:	movefm	[0xb5b3f158], m_Controller
000327:0x00290b88:	call	
000330:0x00290ba8:	imove	#return, 0x000001
000330:0x00290bb8:	rts
000330:0x00290bc0:	rts
InventoryGrid::GetItems()
000334:0x00290bc8:	movem	#return, m_Items
000334:0x00290bd8:	rts
000334:0x00290be0:	rts
InventoryGrid::GetItem()
000340:0x00290be8:	movefm	[0xb5c2b0a0], m_ItemWidgets
000340:0x00290bf8:	icall	
000340:0x00290c08:	cmpi	#return, _i0
000340:0x00290c18:	beq	0x290c60
000341:0x00290c20:	movefm	[0xb5c2b0a0], m_ItemWidgets
000341:0x00290c30:	icall	
000341:0x00290c40:	movetm	#return, #return
000341:0x00290c50:	rts
000341:0x00290c58:	jump	0x290c78
000343:0x00290c60:	movetm	#return, null
000343:0x00290c70:	rts
000343:0x00290c78:	rts
InventoryGrid::GetItemBackground()
000349:0x00290c80:	movefm	[0xb5c2b0a0], m_BackgroundWidgets
000349:0x00290c90:	icall	
000349:0x00290ca0:	cmpi	#return, _i0
000349:0x00290cb0:	beq	0x290cf8
000350:0x00290cb8:	movefm	[0xb5c2b0a0], m_BackgroundWidgets
000350:0x00290cc8:	icall	
000350:0x00290cd8:	movetm	#return, #return
000350:0x00290ce8:	rts
000350:0x00290cf0:	jump	0x290d10
000352:0x00290cf8:	movetm	#return, null
000352:0x00290d08:	rts
000352:0x00290d10:	rts
InventoryGrid::GetRoot()
000357:0x00290d18:	movem	#return, m_Root
000357:0x00290d28:	rts
000357:0x00290d30:	rts
InventoryGrid::SetItemColor()
000362:0x00290dc0:	movefm	@c00, item
000362:0x00290dd0:	movefm	[0xb5b34fb8], m_Items
000362:0x00290de0:	icall	
000362:0x00290df0:	cmpi	#return, _i0
000362:0x00290e00:	beq	0x290ed0
000364:0x00290e08:	movefm	@c00, item
000364:0x00290e18:	movefm	[0xb5b34fb8], m_Items
000364:0x00290e28:	icall	
000364:0x00290e38:	movev	data, #return
000365:0x00290e48:	ifv	@f00, data[0x000000]
000365:0x00290e58:	icall	Round(@f00)
000365:0x00290e68:	cfti	index, #return
000367:0x00290e78:	call	
000367:0x00290e88:	movem	w, #return
000367:0x00290e98:	release	#return
000368:0x00290ea0:	cmpcm	w, null
000368:0x00290eb0:	beq	0x290ec8
000369:0x00290eb8:	ncalli	Widget.SetColor(color)
000369:0x00290ec8:	release	w
000369:0x00290ed0:	rts
InventoryGrid::SetController()
000374:0x00290ed8:	movem	m_Controller, controller
000374:0x00290ee8:	rts
InventoryGrid::GetController()
000378:0x00290ef0:	movem	#return, m_Controller
000378:0x00290f00:	rts
000378:0x00290f08:	rts
InventoryGrid::GenerateQuickBarBackgroundTiles()
000384:0x002910b8:	imove	i, 0x000000
000384:0x002910c8:	jump	0x2910e8
000384:0x002910d0:	move	@m00, i
000384:0x002910e0:	inc	i
000384:0x002910e8:	cmpi	i, count
000384:0x002910f8:	bge	0x291288
000386:0x00291100:	ncall	GetGame()
000386:0x00291108:	ncalli	CGame.GetWorkspace()
000386:0x00291110:	movefm	[0xd316bcc0], m_Root
000386:0x00291120:	ncall	CreateWidgets(#return, _s'gui/layouts/inventory/inventoryGridBackground.layout', [0xd316bcc0], _i1)
000386:0x00291138:	movetm	root_widget, #return
000387:0x00291148:	ncalli	Widget.FindAnyWidget(_s'Label1')
000387:0x00291158:	icall	SafeCastType([0xd3134da0], @c01, #return)
000387:0x00291170:	movetm	label_widget, @c01
000388:0x00291180:	ncalli	Widget.FindAnyWidget(_s'Label2')
000388:0x00291190:	icall	SafeCastType([0xd3134da0], @c01, #return)
000388:0x002911a8:	movetm	label_widget2, @c01
000389:0x002911b8:	addi	@m01, i, _i1
000389:0x002911c8:	move	@m00, @m01
000389:0x002911d8:	icall	ToString(@m00)
000389:0x002911e8:	ncalli	TextWidget.SetText(#return, _i1)
000390:0x002911f8:	addi	@m01, i, _i1
000390:0x00291208:	move	@m00, @m01
000390:0x00291218:	icall	ToString(@m00)
000390:0x00291228:	ncalli	TextWidget.SetText(#return, _i1)
000391:0x00291238:	movefm	@c00, root_widget
000391:0x00291248:	movefm	[0xb5c2b0a0], m_BackgroundWidgets
000391:0x00291258:	icall	
000391:0x00291268:	release	root_widget
000391:0x00291270:	release	label_widget
000391:0x00291278:	release	label_widget2
000391:0x00291280:	jump	0x2910d0
000391:0x00291288:	rts
InventoryGrid::UpdateQuickbarItems()
000411:0x002914d8:	movefm	[0xb5b34fb8], m_Items
000411:0x002914e8:	ncalli	map<InventoryItem,vector>.Count()
000411:0x002914f0:	move	c, #return
000412:0x00291500:	imove	i, 0x000000
000412:0x00291510:	jump	0x291530
000412:0x00291518:	move	@m00, i
000412:0x00291528:	inc	i
000412:0x00291530:	cmpi	i, c
000412:0x00291540:	bge	0x291738
000414:0x00291548:	movefm	[0xb5b34fb8], m_Items
000414:0x00291558:	icall	
000414:0x00291568:	movetm	item, #return
000415:0x00291578:	cmpcm	item, NULL
000415:0x00291588:	beq	0x291730
000417:0x00291590:	imove	remove_item, 0x000000
000419:0x002915a0:	movefm	@c00, item
000419:0x002915b0:	icall	
000419:0x002915c0:	move	@m00, #return
000419:0x002915d0:	cmpi	@m00, false
000419:0x002915e0:	bne	0x291600
000421:0x002915e8:	imove	remove_item, 0x000001
000421:0x002915f8:	jump	0x2916d8
000426:0x00291600:	movefm	@c00, item
000426:0x00291610:	movefm	[0xb5b34fb8], m_Items
000426:0x00291620:	icall	
000426:0x00291630:	movefm	@c01, item
000426:0x00291640:	pushv	#return
000426:0x00291648:	icall	
000426:0x00291658:	movev	@v00, #return
000426:0x00291668:	popv	#return
000426:0x00291670:	subv	@v00, #return, @v00
000426:0x00291680:	movev	@v01, @v00
000426:0x00291690:	ncall	LengthSq(@v01)
000426:0x002916a0:	move	@f00, #return
000426:0x002916b0:	cmpf	@f00, _f0.010000
000426:0x002916c0:	ble	0x2916d8
000429:0x002916c8:	imove	remove_item, 0x000001
000433:0x002916d8:	cmpi	remove_item, _i0
000433:0x002916e8:	beq	0x291730
000435:0x002916f0:	call	
000436:0x00291700:	move	@m00, c
000436:0x00291710:	dec	c
000437:0x00291718:	move	@m00, i
000437:0x00291728:	dec	i
000437:0x00291730:	jump	0x291518
000443:0x00291738:	imove	i, 0x000000
000443:0x00291748:	jump	0x291768
000443:0x00291750:	move	@m00, i
000443:0x00291760:	inc	i
000443:0x00291768:	ncalli	map<InventoryItem,vector>.Count()
000443:0x00291770:	cmpi	i, #return
000443:0x00291780:	bge	0x291868
000445:0x00291788:	icall	
000445:0x00291798:	movetm	item, #return
000446:0x002917a8:	movefm	@c00, item
000446:0x002917b8:	icall	
000446:0x002917c8:	movev	data, #return
000448:0x002917d8:	movefm	@c00, item
000448:0x002917e8:	movefm	[0xb5b34fb8], m_Items
000448:0x002917f8:	icall	
000448:0x00291808:	move	@m00, #return
000448:0x00291818:	cmpi	@m00, false
000448:0x00291828:	bne	0x291860
000450:0x00291830:	ncall	Vector(_f0.000000, _f0.000000, _f0.000000)
000450:0x00291848:	call	
000450:0x00291860:	jump	0x291750
000455:0x00291868:	movefm	[0xb5b3f158], m_Controller
000455:0x00291878:	call	
000455:0x00291888:	move	m_CanAddItemInHandToInventory, #return
000458:0x00291898:	imove	i, 0x000000
000458:0x002918a8:	jump	0x2918c8
000458:0x002918b0:	move	@m00, i
000458:0x002918c0:	inc	i
000458:0x002918c8:	ncalli	map<InventoryItem,vector>.Count()
000458:0x002918d0:	cmpi	i, #return
000458:0x002918e0:	bge	0x291958
000460:0x002918e8:	icall	
000460:0x002918f8:	movetm	item, #return
000461:0x00291908:	movefm	@c00, item
000461:0x00291918:	icall	
000461:0x00291928:	movev	data, #return
000462:0x00291938:	call	
000462:0x00291950:	jump	0x2918b0
000462:0x00291958:	release	item
000462:0x00291960:	release	bck
000462:0x00291968:	release	item_w
000462:0x00291970:	rts
InventoryGrid::UpdateItems()
000483:0x00291b68:	movefm	[0xb5b34fb8], m_Items
000483:0x00291b78:	ncalli	map<InventoryItem,vector>.Count()
000483:0x00291b80:	move	c, #return
000484:0x00291b90:	imove	i, 0x000000
000484:0x00291ba0:	jump	0x291bc0
000484:0x00291ba8:	move	@m00, i
000484:0x00291bb8:	inc	i
000484:0x00291bc0:	cmpi	i, c
000484:0x00291bd0:	bge	0x291db0
000486:0x00291bd8:	movefm	[0xb5b34fb8], m_Items
000486:0x00291be8:	icall	
000486:0x00291bf8:	movetm	item, #return
000488:0x00291c08:	imove	remove_item, 0x000000
000490:0x00291c18:	movefm	@c00, item
000490:0x00291c28:	icall	
000490:0x00291c38:	move	@m00, #return
000490:0x00291c48:	cmpi	@m00, false
000490:0x00291c58:	bne	0x291c78
000492:0x00291c60:	imove	remove_item, 0x000001
000492:0x00291c70:	jump	0x291d50
000497:0x00291c78:	movefm	@c00, item
000497:0x00291c88:	movefm	[0xb5b34fb8], m_Items
000497:0x00291c98:	icall	
000497:0x00291ca8:	movefm	@c01, item
000497:0x00291cb8:	pushv	#return
000497:0x00291cc0:	icall	
000497:0x00291cd0:	movev	@v00, #return
000497:0x00291ce0:	popv	#return
000497:0x00291ce8:	subv	@v00, #return, @v00
000497:0x00291cf8:	movev	@v01, @v00
000497:0x00291d08:	ncall	LengthSq(@v01)
000497:0x00291d18:	move	@f00, #return
000497:0x00291d28:	cmpf	@f00, _f0.010000
000497:0x00291d38:	ble	0x291d50
000500:0x00291d40:	imove	remove_item, 0x000001
000504:0x00291d50:	cmpi	remove_item, _i0
000504:0x00291d60:	beq	0x291da8
000506:0x00291d68:	call	
000507:0x00291d78:	move	@m00, c
000507:0x00291d88:	dec	c
000508:0x00291d90:	move	@m00, i
000508:0x00291da0:	dec	i
000508:0x00291da8:	jump	0x291ba8
000513:0x00291db0:	imove	i, 0x000000
000513:0x00291dc0:	jump	0x291de0
000513:0x00291dc8:	move	@m00, i
000513:0x00291dd8:	inc	i
000513:0x00291de0:	ncalli	map<InventoryItem,vector>.Count()
000513:0x00291de8:	cmpi	i, #return
000513:0x00291df8:	bge	0x291ee0
000515:0x00291e00:	icall	
000515:0x00291e10:	movetm	item, #return
000516:0x00291e20:	movefm	@c00, item
000516:0x00291e30:	icall	
000516:0x00291e40:	movev	data, #return
000518:0x00291e50:	movefm	@c00, item
000518:0x00291e60:	movefm	[0xb5b34fb8], m_Items
000518:0x00291e70:	icall	
000518:0x00291e80:	move	@m00, #return
000518:0x00291e90:	cmpi	@m00, false
000518:0x00291ea0:	bne	0x291ed8
000520:0x00291ea8:	ncall	Vector(_f0.000000, _f0.000000, _f0.000000)
000520:0x00291ec0:	call	
000520:0x00291ed8:	jump	0x291dc8
000525:0x00291ee0:	imove	i, 0x000000
000525:0x00291ef0:	jump	0x291f10
000525:0x00291ef8:	move	@m00, i
000525:0x00291f08:	inc	i
000525:0x00291f10:	ncalli	map<InventoryItem,vector>.Count()
000525:0x00291f18:	cmpi	i, #return
000525:0x00291f28:	bge	0x291fa8
000527:0x00291f30:	icall	
000527:0x00291f40:	movetm	item, #return
000528:0x00291f50:	movefm	@c00, item
000528:0x00291f60:	icall	
000528:0x00291f70:	movev	data, #return
000530:0x00291f80:	call	
000530:0x00291fa0:	jump	0x291ef8
000530:0x00291fa8:	release	item
000530:0x00291fb0:	release	bck
000530:0x00291fb8:	release	item_w
000530:0x00291fc0:	rts
InventoryGrid::UpdateQuantityItems()
000541:0x00292078:	imove	i, 0x000000
000541:0x00292088:	jump	0x2920a8
000541:0x00292090:	move	@m00, i
000541:0x002920a0:	inc	i
000541:0x002920a8:	movefm	[0xb5b34fb8], m_Items
000541:0x002920b8:	ncalli	map<InventoryItem,vector>.Count()
000541:0x002920c0:	cmpi	i, #return
000541:0x002920d0:	bge	0x2921a0
000543:0x002920d8:	movefm	[0xb5b34fb8], m_Items
000543:0x002920e8:	icall	
000543:0x002920f8:	movetm	item, #return
000544:0x00292108:	movefm	@c00, item
000544:0x00292118:	movefm	[0xb5b34fb8], m_Items
000544:0x00292128:	icall	
000544:0x00292138:	movev	data, #return
000545:0x00292148:	ifv	@f00, data[0x000000]
000545:0x00292158:	icall	Round(@f00)
000545:0x00292168:	cfti	index, #return
000546:0x00292178:	call	
000546:0x00292198:	jump	0x292090
000546:0x002921a0:	release	item
000546:0x002921a8:	rts
InventoryGrid::UpdateTemperatureItems()
000557:0x00292260:	imove	i, 0x000000
000557:0x00292270:	jump	0x292290
000557:0x00292278:	move	@m00, i
000557:0x00292288:	inc	i
000557:0x00292290:	movefm	[0xb5b34fb8], m_Items
000557:0x002922a0:	ncalli	map<InventoryItem,vector>.Count()
000557:0x002922a8:	cmpi	i, #return
000557:0x002922b8:	bge	0x292388
000559:0x002922c0:	movefm	[0xb5b34fb8], m_Items
000559:0x002922d0:	icall	
000559:0x002922e0:	movetm	item, #return
000560:0x002922f0:	movefm	@c00, item
000560:0x00292300:	movefm	[0xb5b34fb8], m_Items
000560:0x00292310:	icall	
000560:0x00292320:	movev	data, #return
000561:0x00292330:	ifv	@f00, data[0x000000]
000561:0x00292340:	icall	Round(@f00)
000561:0x00292350:	cfti	index, #return
000562:0x00292360:	call	
000562:0x00292380:	jump	0x292278
000562:0x00292388:	release	item
000562:0x00292390:	rts
InventoryGrid::RefreshQuickbarItemVariables()
000569:0x00292460:	ifv	@f00, data[0x000000]
000569:0x00292470:	icall	Round(@f00)
000569:0x00292480:	cfti	index, #return
000570:0x00292490:	call	
000570:0x002924a0:	movem	bck, #return
000570:0x002924b0:	release	#return
000571:0x002924b8:	cmpcm	bck, null
000571:0x002924c8:	beq	0x292558
000573:0x002924d0:	ncalli	Widget.FindAnyWidget(_s'GridItem')
000573:0x002924e0:	movetm	item_w, #return
000574:0x002924f0:	cmpcm	item_w, null
000574:0x00292500:	beq	0x292550
000576:0x00292508:	movefm	[0xb5b3f158], m_Controller
000576:0x00292518:	call	
000576:0x00292530:	move	color, #return
000577:0x00292540:	ncalli	Widget.SetColor(color)
000577:0x00292550:	release	item_w
000580:0x00292558:	call	
000580:0x00292578:	release	bck
000580:0x00292580:	rts
InventoryGrid::RefreshItemVariables()
000586:0x002929d8:	ifv	@f00, data[0x000000]
000586:0x002929e8:	icall	Round(@f00)
000586:0x002929f8:	cfti	index, #return
000587:0x00292a08:	call	
000587:0x00292a18:	movem	bck, #return
000587:0x00292a28:	release	#return
000590:0x00292a30:	cmpcm	bck, null
000590:0x00292a40:	beq	0x292e98
000592:0x00292a48:	ncalli	Widget.FindAnyWidget(_s'GridItem')
000592:0x00292a58:	movetm	item_w, #return
000593:0x00292a68:	cmpcm	item_w, null
000593:0x00292a78:	beq	0x292e98
000595:0x00292a80:	movefm	[0xb5b3f158], m_Controller
000595:0x00292a90:	call	
000595:0x00292aa0:	move	has_quantity, #return
000596:0x00292ab0:	ncalli	Widget.FindAnyWidget(_s'QuantityPanel')
000596:0x00292ac0:	movetm	quantity_panel, #return
000597:0x00292ad0:	ncalli	Widget.FindAnyWidget(_s'Quantity')
000597:0x00292ae0:	icall	SafeCastType([0xd3134da0], @c01, #return)
000597:0x00292af8:	movetm	item_quantity, @c01
000598:0x00292b08:	ncalli	Widget.FindAnyWidget(_s'QuantityBar')
000598:0x00292b18:	icall	SafeCastType([0xd3159bb0], @c01, #return)
000598:0x00292b30:	movetm	quantity_progress, @c01
000599:0x00292b40:	ncalli	Widget.FindAnyWidget(_s'QuantityStackPanel')
000599:0x00292b50:	movetm	quantity_stack, #return
000600:0x00292b60:	cmpi	has_quantity, QUANTITY_HIDDEN
000600:0x00292b70:	bne	0x292b90
000602:0x00292b78:	ncalli	Widget.Show(false, _i1)
000602:0x00292b88:	jump	0x292db0
000606:0x00292b90:	ncalli	Widget.Show(true, _i1)
000607:0x00292ba0:	cmpi	has_quantity, QUANTITY_COUNT
000607:0x00292bb0:	bne	0x292c10
000609:0x00292bb8:	movefm	[0xb5b3f158], m_Controller
000609:0x00292bc8:	call	
000609:0x00292bd8:	ncalli	TextWidget.SetText(#return, _i1)
000610:0x00292be8:	ncalli	Widget.Show(true, _i1)
000611:0x00292bf8:	ncalli	ProgressBarWidget.Show(false, _i1)
000611:0x00292c08:	jump	0x292db0
000613:0x00292c10:	cmpi	has_quantity, QUANTITY_PROGRESS
000613:0x00292c20:	bne	0x292db0
000615:0x00292c28:	ncalli	ProgressBarWidget.GetMax()
000615:0x00292c30:	move	progress_max, #return
000616:0x00292c40:	movefm	[0xb5b3f158], m_Controller
000616:0x00292c50:	call	
000616:0x00292c60:	move	max, #return
000617:0x00292c70:	movefm	[0xb5b3f158], m_Controller
000617:0x00292c80:	call	
000617:0x00292c90:	move	count, #return
000618:0x00292ca0:	movefm	[0xb5b3f158], m_Controller
000618:0x00292cb0:	call	
000618:0x00292cc0:	move	quantity, #return
000619:0x00292cd0:	cmpi	count, _i0
000619:0x00292ce0:	ble	0x292cf8
000621:0x00292ce8:	move	max, count
000623:0x00292cf8:	cmpi	max, _i0
000623:0x00292d08:	ble	0x292d90
000626:0x00292d10:	citf	@f03, max
000626:0x00292d20:	divf	@f03, quantity, @f03
000626:0x00292d30:	move	@f02, @f03
000626:0x00292d40:	mulf	@f02, @f02, _f100.000000
000626:0x00292d50:	move	@f01, @f02
000626:0x00292d60:	icall	Round(@f01)
000626:0x00292d70:	move	value, #return
000627:0x00292d80:	ncalli	ProgressBarWidget.SetCurrent(value)
000629:0x00292d90:	ncalli	Widget.Show(false, _i1)
000630:0x00292da0:	ncalli	ProgressBarWidget.Show(true, _i1)
000634:0x00292db0:	cmpi	show_temperature, _i0
000634:0x00292dc0:	beq	0x292e78
000636:0x00292dc8:	cmpcm	item, null
000636:0x00292dd8:	beq	0x292e78
000636:0x00292de0:	movefm	[0xd315b878], item
000636:0x00292df0:	ncall	IsInherited([0xd315b878], _T(InventoryItem))
000636:0x00292e00:	cmpi	#return, _i0
000636:0x00292e10:	beq	0x292e78
000638:0x00292e18:	movefm	[0xb5b3f158], m_Controller
000638:0x00292e28:	call	
000638:0x00292e40:	move	color, #return
000639:0x00292e50:	cmpi	color, _i0
000639:0x00292e60:	beq	0x292e78
000641:0x00292e68:	ncalli	Widget.SetColor(color)
000641:0x00292e78:	release	quantity_panel
000641:0x00292e80:	release	item_quantity
000641:0x00292e88:	release	quantity_progress
000641:0x00292e90:	release	quantity_stack
000641:0x00292e98:	release	bck
000641:0x00292ea0:	release	item_w
000641:0x00292ea8:	rts
InventoryGrid::AddItem()
000652:0x00293070:	movefm	@c00, item
000652:0x00293080:	movefm	[0xb5b34fb8], m_Items
000652:0x00293090:	icall	
000654:0x002930a0:	ifv	@f00, data[0x000000]
000654:0x002930b0:	icall	Round(@f00)
000654:0x002930c0:	cfti	index, #return
000655:0x002930d0:	ifv	@f00, data[0x000001]
000655:0x002930e0:	icall	Round(@f00)
000655:0x002930f0:	cfti	width, #return
000656:0x00293100:	ifv	@f00, data[0x000002]
000656:0x00293110:	icall	Round(@f00)
000656:0x00293120:	cfti	height, #return
000658:0x00293130:	call	
000658:0x00293140:	movem	bck, #return
000658:0x00293150:	release	#return
000659:0x00293158:	ncall	GetGame()
000659:0x00293160:	ncalli	CGame.GetWorkspace()
000659:0x00293168:	movefm	[0xd316bcc0], bck
000659:0x00293178:	ncall	CreateWidgets(#return, _s'gui/layouts/inventory/inventoryGridItem.layout', [0xd316bcc0], _i1)
000659:0x00293190:	movetm	item_w_bck, #return
000660:0x002931a0:	ncalli	Widget.FindAnyWidget(_s'GridItem')
000660:0x002931b0:	movetm	item_w, #return
000662:0x002931c0:	ncalli	Widget.FindAnyWidget(_s'LabelTR')
000662:0x002931d0:	ncalli	Widget.Show(true, _i1)
000663:0x002931e0:	ncalli	Widget.FindAnyWidget(_s'LabelCC')
000663:0x002931f0:	ncalli	Widget.Show(false, _i1)
000665:0x00293200:	movefm	@c00, item_w
000665:0x00293210:	movefm	[0xb5c2b0a0], m_ItemWidgets
000665:0x00293220:	icall	
000667:0x00293230:	call	
000669:0x00293248:	cmpcm	item, null
000669:0x00293258:	beq	0x293318
000671:0x00293260:	ncalli	Widget.FindAnyWidget(_s'Preview')
000671:0x00293270:	icall	SafeCastType([0xb5afe2c8], @c01, #return)
000671:0x00293288:	movetm	item_preview, @c01
000672:0x00293298:	movefm	[0xb5bb84e0], item
000672:0x002932a8:	ncalli	ItemPreviewWidget.SetItem([0xb5bb84e0])
000673:0x002932b8:	ncalli	ItemPreviewWidget.SetModelOrientation(rotation)
000674:0x002932c8:	ncalli	ItemPreviewWidget.GetItem()
000674:0x002932d0:	call	
000674:0x002932e0:	ncalli	ItemPreviewWidget.SetView(#return)
000676:0x002932f0:	call	
000676:0x00293310:	release	item_preview
000676:0x00293318:	release	bck
000676:0x00293320:	release	item_w_bck
000676:0x00293328:	release	item_w
000676:0x00293330:	rts
InventoryGrid::SetItem()
000683:0x00293478:	movefm	@c00, item
000683:0x00293488:	movefm	[0xb5b34fb8], m_Items
000683:0x00293498:	icall	
000685:0x002934a8:	ifv	@f00, data[0x000000]
000685:0x002934b8:	icall	Round(@f00)
000685:0x002934c8:	cfti	index, #return
000686:0x002934d8:	ifv	@f00, data[0x000001]
000686:0x002934e8:	icall	Round(@f00)
000686:0x002934f8:	cfti	width, #return
000687:0x00293508:	ifv	@f00, data[0x000002]
000687:0x00293518:	icall	Round(@f00)
000687:0x00293528:	cfti	height, #return
000689:0x00293538:	call	
000689:0x00293548:	movem	bck, #return
000689:0x00293558:	release	#return
000690:0x00293560:	ncalli	Widget.FindAnyWidget(_s'GridItemBck')
000690:0x00293570:	movetm	item_w_bck, #return
000692:0x00293580:	cmpcm	item_w_bck, null
000692:0x00293590:	beq	0x293748
000694:0x00293598:	ncalli	Widget.FindAnyWidget(_s'LabelTR')
000694:0x002935a8:	ncalli	Widget.Show(true, _i1)
000695:0x002935b8:	ncalli	Widget.FindAnyWidget(_s'LabelCC')
000695:0x002935c8:	ncalli	Widget.Show(false, _i1)
000697:0x002935d8:	ncalli	Widget.FindAnyWidget(_s'GridItem')
000697:0x002935e8:	movetm	item_w, #return
000698:0x002935f8:	call	
000700:0x00293610:	cmpcm	item, null
000700:0x00293620:	beq	0x2936f8
000702:0x00293628:	ncalli	Widget.FindAnyWidget(_s'Preview')
000702:0x00293638:	icall	SafeCastType([0xb5afe2c8], @c01, #return)
000702:0x00293650:	movetm	item_preview, @c01
000703:0x00293660:	movefm	[0xb5bb84e0], item
000703:0x00293670:	ncalli	ItemPreviewWidget.SetItem([0xb5bb84e0])
000704:0x00293680:	ncalli	ItemPreviewWidget.Show(true, _i1)
000705:0x00293690:	ncalli	ItemPreviewWidget.SetModelOrientation(rotation)
000706:0x002936a0:	ncalli	ItemPreviewWidget.GetItem()
000706:0x002936a8:	call	
000706:0x002936b8:	ncalli	ItemPreviewWidget.SetView(#return)
000708:0x002936c8:	call	
000708:0x002936e8:	release	item_preview
000708:0x002936f0:	jump	0x293740
000712:0x002936f8:	ncalli	Widget.FindAnyWidget(_s'Preview')
000712:0x00293708:	icall	SafeCastType([0xb5afe2c8], @c01, #return)
000712:0x00293720:	movetm	item_preview, @c01
000713:0x00293730:	ncalli	ItemPreviewWidget.Show(false, _i1)
000713:0x00293740:	release	item_w
000713:0x00293748:	release	bck
000713:0x00293750:	release	item_w_bck
000713:0x00293758:	rts
InventoryGrid::ResetItemWidget()
000721:0x00293760:	cmpcm	item_w, null
000721:0x00293770:	beq	0x293788
000723:0x00293778:	ncalli	Widget.SetColor(ITEM_COLOR_NORMAL)
000723:0x00293788:	rts
InventoryGrid::ResetItem()
000730:0x00293890:	movefm	@c00, item
000730:0x002938a0:	movefm	[0xb5b34fb8], m_Items
000730:0x002938b0:	icall	
000730:0x002938c0:	cmpi	#return, _i0
000730:0x002938d0:	beq	0x293a38
000732:0x002938d8:	movefm	@c00, item
000732:0x002938e8:	movefm	[0xb5b34fb8], m_Items
000732:0x002938f8:	icall	
000732:0x00293908:	movev	data, #return
000733:0x00293918:	ifv	@f00, data[0x000000]
000733:0x00293928:	icall	Round(@f00)
000733:0x00293938:	cfti	index, #return
000734:0x00293948:	ifv	@f00, data[0x000001]
000734:0x00293958:	icall	Round(@f00)
000734:0x00293968:	cfti	width, #return
000735:0x00293978:	ifv	@f00, data[0x000002]
000735:0x00293988:	icall	Round(@f00)
000735:0x00293998:	cfti	height, #return
000736:0x002939a8:	call	
000736:0x002939b8:	movem	bck, #return
000736:0x002939c8:	release	#return
000737:0x002939d0:	ncalli	Widget.FindAnyWidget(_s'GridItem')
000737:0x002939e0:	movetm	item_w, #return
000738:0x002939f0:	call	
000739:0x00293a08:	call	
000739:0x00293a28:	release	bck
000739:0x00293a30:	release	item_w
000739:0x00293a38:	rts
InventoryGrid::HasItem()
000746:0x00293a40:	movefm	@c00, item
000746:0x00293a50:	movefm	[0xb5b34fb8], m_Items
000746:0x00293a60:	icall	
000746:0x00293a70:	move	#return, #return
000746:0x00293a80:	rts
000746:0x00293a88:	rts
InventoryGrid::RemoveItem()
000754:0x00293be0:	cmpcm	item, null
000754:0x00293bf0:	beq	0x293e20
000754:0x00293bf8:	movefm	@c00, item
000754:0x00293c08:	movefm	[0xb5b34fb8], m_Items
000754:0x00293c18:	icall	
000754:0x00293c28:	cmpi	#return, _i0
000754:0x00293c38:	beq	0x293e20
000756:0x00293c40:	movefm	@c00, item
000756:0x00293c50:	movefm	[0xb5b34fb8], m_Items
000756:0x00293c60:	icall	
000756:0x00293c70:	movev	data, #return
000757:0x00293c80:	ifv	@f00, data[0x000000]
000757:0x00293c90:	icall	Round(@f00)
000757:0x00293ca0:	cfti	index, #return
000758:0x00293cb0:	ifv	@f00, data[0x000001]
000758:0x00293cc0:	icall	Round(@f00)
000758:0x00293cd0:	cfti	width, #return
000759:0x00293ce0:	ifv	@f00, data[0x000002]
000759:0x00293cf0:	icall	Round(@f00)
000759:0x00293d00:	cfti	height, #return
000760:0x00293d10:	call	
000760:0x00293d20:	movem	bck, #return
000760:0x00293d30:	release	#return
000761:0x00293d38:	cmpcm	bck, null
000761:0x00293d48:	beq	0x293dd0
000763:0x00293d50:	ncalli	Widget.FindAnyWidget(_s'GridCell')
000763:0x00293d60:	movetm	itemW, #return
000764:0x00293d70:	cmpcm	itemW, null
000764:0x00293d80:	beq	0x293d90
000765:0x00293d88:	delete	itemW
000766:0x00293d90:	ncalli	Widget.FindAnyWidget(_s'LabelTR')
000766:0x00293da0:	ncalli	Widget.Show(false, _i1)
000767:0x00293db0:	ncalli	Widget.FindAnyWidget(_s'LabelCC')
000767:0x00293dc0:	ncalli	Widget.Show(true, _i1)
000770:0x00293dd0:	movefm	@c00, item
000770:0x00293de0:	movefm	[0xb5b34fb8], m_Items
000770:0x00293df0:	icall	
000771:0x00293e00:	movefm	[0xb5c2b0a0], m_ItemWidgets
000771:0x00293e10:	icall	
000771:0x00293e20:	release	bck
000771:0x00293e28:	release	itemW
000771:0x00293e30:	rts
RemotelyActivatedItemBehaviour::RemotelyActivatedItemBehaviour()
//scripts/3_Game/remotelyactivateditembehaviour.c
000012:0x00293e38:	imove	m_PersistentPairID, 0x80000000
000014:0x00293e48:	movem	m_Parent, pParent
000016:0x00293e58:	imove	m_PairDeviceNetIdLow, 0xffffffff
000017:0x00293e68:	imove	m_PairDeviceNetIdHigh, 0xffffffff
000017:0x00293e78:	rts
RemotelyActivatedItemBehaviour::~RemotelyActivatedItemBehaviour()
000022:0x00293e80:	cmpcm	m_Parent, null
000022:0x00293e90:	beq	0x293ea8
000023:0x00293e98:	call	
000023:0x00293ea8:	rts
RemotelyActivatedItemBehaviour::SetTrigger()
000028:0x00293eb0:	imove	m_IsTrigger, 0x000001
000028:0x00293ec0:	rts
RemotelyActivatedItemBehaviour::OnVariableSynchronized()
000033:0x00293ec8:	call	
000033:0x00293ed8:	rts
RemotelyActivatedItemBehaviour::OnStoreSave()
000038:0x00293ee0:	icall	
000038:0x00293ef0:	rts
RemotelyActivatedItemBehaviour::OnStoreLoad()
000043:0x00293f50:	icall	
000043:0x00293f60:	cmpi	#return, _i0
000043:0x00293f70:	bne	0x293f90
000044:0x00293f78:	imove	#return, 0x000000
000044:0x00293f88:	rts
000046:0x00293f90:	cmpi	m_PersistentPairID, MIN
000046:0x00293fa0:	bne	0x293fc0
000047:0x00293fa8:	imove	#return, 0x000001
000047:0x00293fb8:	rts
000049:0x00293fc0:	cmpi	m_IsTrigger, _i0
000049:0x00293fd0:	beq	0x294030
000051:0x00293fd8:	icall	
000051:0x00293fe8:	movetm	receiver, #return
000052:0x00293ff8:	cmpcm	receiver, null
000052:0x00294008:	beq	0x294020
000053:0x00294010:	call	
000053:0x00294020:	release	receiver
000053:0x00294028:	jump	0x294050
000057:0x00294030:	movefm	@c00, m_Parent
000057:0x00294040:	icall	
000060:0x00294050:	imove	#return, 0x000001
000060:0x00294060:	rts
000060:0x00294068:	rts
RemotelyActivatedItemBehaviour::OnAfterLoad()
000065:0x00294098:	cmpi	m_IsTrigger, _i0
000065:0x002940a8:	beq	0x294130
000065:0x002940b0:	cmpi	m_PersistentPairID, MIN
000065:0x002940c0:	beq	0x294130
000065:0x002940c8:	cmpcm	m_PairDevice, null
000065:0x002940d8:	bne	0x294130
000067:0x002940e0:	icall	
000067:0x002940f0:	movetm	receiver, #return
000068:0x00294100:	cmpcm	receiver, null
000068:0x00294110:	beq	0x294128
000075:0x00294118:	call	
000075:0x00294128:	release	receiver
000075:0x00294130:	rts
RemotelyActivatedItemBehaviour::GeneratePersistentID()
000083:0x00294190:	icall	RandomInt(_i0, MAX)
000083:0x002941a0:	move	randomID, #return
000084:0x002941b0:	icall	
000084:0x002941c0:	cmpi	#return, _i0
000084:0x002941d0:	beq	0x294208
000087:0x002941d8:	call	GeneratePersistentID()
000087:0x002941e8:	move	#return, #return
000087:0x002941f8:	rts
000087:0x00294200:	jump	0x294220
000090:0x00294208:	move	#return, randomID
000090:0x00294218:	rts
000090:0x00294220:	rts
RemotelyActivatedItemBehaviour::SetPersistentPairID()
000095:0x00294228:	move	m_PersistentPairID, id
000097:0x00294238:	cmpi	m_IsTrigger, _i0
000097:0x00294248:	bne	0x294270
000098:0x00294250:	movefm	@c00, m_Parent
000098:0x00294260:	icall	
000098:0x00294270:	rts
RemotelyActivatedItemBehaviour::Pair()
000103:0x002942a0:	ncall	GetGame()
000103:0x002942a8:	call	
000103:0x002942b8:	call	
000103:0x002942c8:	ncalli	CGame.GetObjectByNetworkId(#return, #return)
000103:0x002942d8:	icall	SafeCastType([0xb5b25dc0], @c01, #return)
000103:0x002942f0:	movetm	device, @c01
000104:0x00294300:	cmpcm	device, null
000104:0x00294310:	beq	0x294328
000106:0x00294318:	call	
000106:0x00294328:	release	device
000106:0x00294330:	rts
RemotelyActivatedItemBehaviour::Pair#152700()
000112:0x00294338:	movem	m_PairDevice, device
000113:0x00294348:	call	
000115:0x00294358:	cmpm	device, m_Parent
000115:0x00294368:	beq	0x294420
000115:0x00294370:	movefm	[0xb5b25dc0], m_Parent
000115:0x00294380:	call	
000115:0x00294390:	cmpcm	#return, null
000115:0x002943a0:	beq	0x2943f0
000115:0x002943a8:	movefm	[0xb5b25dc0], m_Parent
000115:0x002943b8:	call	
000115:0x002943c8:	movefm	@c00, #return
000115:0x002943d8:	cmpmc	@c00, m_PairDevice
000115:0x002943e8:	beq	0x294420
000116:0x002943f0:	movem	trigger, m_Parent
000116:0x00294400:	movefm	[0xb5b25dc0], m_PairDevice
000116:0x00294410:	call	
000116:0x00294420:	release	#return
000116:0x00294428:	release	#return
000118:0x00294430:	movefm	[0xb5b25dc0], m_PairDevice
000118:0x00294440:	ncalli	EntityAI.SetSynchDirty()
000119:0x00294448:	movefm	[0xb5b25dc0], m_Parent
000119:0x00294458:	ncalli	EntityAI.SetSynchDirty()
000119:0x00294460:	rts
RemotelyActivatedItemBehaviour::Unpair()
000124:0x00294468:	imove	m_PairDeviceNetIdLow, 0xffffffff
000125:0x00294478:	imove	m_PairDeviceNetIdHigh, 0xffffffff
000127:0x00294488:	cmpcm	m_PairDevice, null
000127:0x00294498:	beq	0x2944c8
000129:0x002944a0:	movefm	[0xb5b25dc0], m_PairDevice
000129:0x002944b0:	ncalli	EntityAI.SetSynchDirty()
000130:0x002944b8:	movetm	m_PairDevice, null
000133:0x002944c8:	cmpi	m_PersistentPairID, MIN
000133:0x002944d8:	beq	0x294518
000135:0x002944e0:	icall	
000135:0x002944f0:	cmpi	#return, _i0
000135:0x00294500:	beq	0x294518
000136:0x00294508:	icall	
000139:0x00294518:	imove	m_PersistentPairID, 0x80000000
000140:0x00294528:	movefm	[0xb5b25dc0], m_Parent
000140:0x00294538:	ncalli	EntityAI.SetSynchDirty()
000140:0x00294540:	rts
RemotelyActivatedItemBehaviour::GetPairDevice()
000145:0x00294548:	movem	#return, m_PairDevice
000145:0x00294558:	rts
000145:0x00294560:	rts
RemotelyActivatedItemBehaviour::IsPaired()
000150:0x00294568:	cmpcm	m_PairDevice, null
000150:0x00294578:	beq	0x294598
000150:0x00294580:	imove	#return, 0x000001
000150:0x00294590:	jump	0x2945a8
000150:0x00294598:	imove	#return, 0x000000
000150:0x002945a8:	rts
000150:0x002945b0:	rts
RemotelyActivatedItemBehaviour::SetPairDeviceNetIds()
000155:0x002945b8:	icall	
000155:0x002945c8:	rts
RemotelyActivatedItemBehaviour::GetPairDeviceNetIdLow()
000160:0x002945d0:	move	#return, m_PairDeviceNetIdLow
000160:0x002945e0:	rts
000160:0x002945e8:	rts
RemotelyActivatedItemBehaviour::GetPairDeviceNetIdHigh()
000165:0x002945f0:	move	#return, m_PairDeviceNetIdHigh
000165:0x00294600:	rts
000165:0x00294608:	rts
BackendCallback::OnDataReceive()
//scripts/3_Game/http\backendapi.c
000094:0x00294638:	icall	ToString(size)
000094:0x00294648:	adds	@s01, _s'[BackendCallback] Data received, size=', #return
000094:0x00294658:	moves	@s00, @s01
000094:0x00294668:	icall	Print(@s00)
000095:0x00294678:	icall	Print(data)
000095:0x00294688:	rts
BackendCallback::OnError()
000104:0x002946b8:	ncall	GetBackendApi()
000104:0x002946c0:	call	
000104:0x002946d0:	adds	@s01, _s'[BackendCallback] OnError: ', #return
000104:0x002946e0:	moves	@s00, @s01
000104:0x002946f0:	icall	Print(@s00)
000104:0x00294700:	rts
BackendCallback::OnSuccess()
000113:0x00294730:	icall	Print(_s'[BackendCallback] OnSuccess()')
000113:0x00294740:	rts
BackendCallback::OnTimeout()
000121:0x00294770:	icall	Print(_s'[BackendCallback] OnTimeout')
000121:0x00294780:	rts
BackendApi::GetErrorCode()
000163:0x00294af0:	cmpi	code, _i0
000163:0x00294b00:	bne	0x294b20
000164:0x00294b08:	moves	result, _s'OK'
000164:0x00294b18:	jump	0x294cb0
000165:0x00294b20:	cmpi	code, _i1
000165:0x00294b30:	bne	0x294b50
000166:0x00294b38:	moves	result, _s'Offline'
000166:0x00294b48:	jump	0x294cb0
000167:0x00294b50:	cmpi	code, _i2
000167:0x00294b60:	bne	0x294b80
000168:0x00294b68:	moves	result, _s'Communication Disabled'
000168:0x00294b78:	jump	0x294cb0
000169:0x00294b80:	cmpi	code, _i3
000169:0x00294b90:	bne	0x294bb0
000170:0x00294b98:	moves	result, _s'Cannot be called from current state'
000170:0x00294ba8:	jump	0x294cb0
000171:0x00294bb0:	cmpi	code, _i4
000171:0x00294bc0:	bne	0x294be0
000172:0x00294bc8:	moves	result, _s'Busy processing requests'
000172:0x00294bd8:	jump	0x294cb0
000173:0x00294be0:	cmpi	code, _i5
000173:0x00294bf0:	bne	0x294c10
000174:0x00294bf8:	moves	result, _s'Already disconnected'
000174:0x00294c08:	jump	0x294cb0
000175:0x00294c10:	cmpi	code, _i6
000175:0x00294c20:	bne	0x294c40
000176:0x00294c28:	moves	result, _s'Already connected'
000176:0x00294c38:	jump	0x294cb0
000177:0x00294c40:	cmpi	code, _i8
000177:0x00294c50:	bne	0x294c70
000178:0x00294c58:	moves	result, _s'Failed to logon'
000178:0x00294c68:	jump	0x294cb0
000179:0x00294c70:	cmpi	code, _i9
000179:0x00294c80:	bne	0x294ca0
000180:0x00294c88:	moves	result, _s'Failed to Authenticate'
000180:0x00294c98:	jump	0x294cb0
000182:0x00294ca0:	moves	result, _s'*'
000184:0x00294cb0:	moves	#return, result
000184:0x00294cc0:	rts
000184:0x00294cc8:	rts
BackendApi::OnCannotInitiate()
000192:0x00294cf8:	call	
000192:0x00294d08:	adds	@s01, _s'!!! [Backend] Cannot Initiate: ', #return
000192:0x00294d18:	moves	@s00, @s01
000192:0x00294d28:	icall	Print(@s00)
000192:0x00294d38:	rts
BackendApi::OnCannotShutdown()
000200:0x00294d68:	call	
000200:0x00294d78:	adds	@s01, _s'!!! [Backend] Cannot Shutdown: ', #return
000200:0x00294d88:	moves	@s00, @s01
000200:0x00294d98:	icall	Print(@s00)
000200:0x00294da8:	rts
BackendApi::OnSuccess()
000208:0x00294dd8:	adds	@s01, _s'[Backend] Successfully Solicited: ', step
000208:0x00294de8:	moves	@s00, @s01
000208:0x00294df8:	icall	Print(@s00)
000208:0x00294e08:	rts
BackendApi::OnFail()
000216:0x00294e38:	adds	@s01, _s'[Backend] Failed to Proceed: ', step
000216:0x00294e48:	moves	@s00, @s01
000216:0x00294e58:	icall	Print(@s00)
000216:0x00294e68:	rts
EffBreathVapourLight::EffBreathVapourLight()
//scripts/3_Game/effects\effectparticle\player\effbreathvapourlight.c
000005:0x00294e70:	call	
000005:0x00294e80:	rts
CrashSoundSets::RegisterSoundSet()
//scripts/3_Game/dayzgame.c
000050:0x00294e88:	ncall	Hash(sound_set)
000050:0x00294e98:	icall	
000050:0x00294ea8:	rts
CrashSoundSets::GetSoundSetByHash()
000056:0x00294ed8:	cmpcm	m_Mappings, null
000056:0x00294ee8:	beq	0x294f00
000057:0x00294ef0:	icall	
000058:0x00294f00:	moves	#return, sound_set
000058:0x00294f10:	rts
000058:0x00294f18:	rts
LoginScreenBase::Update()
000071:0x00294f20:	cmpcm	m_HintPanel, null
000071:0x00294f30:	beq	0x294fc0
000073:0x00294f38:	move	@f00, timeslice
000073:0x00294f48:	addf	m_HintTimeAccu, m_HintTimeAccu, @f00
000074:0x00294f58:	move	timeAccu, m_HintTimeAccu
000074:0x00294f68:	call	
000074:0x00294f78:	cmpi	#return, _i0
000074:0x00294f88:	beq	0x294fc0
000076:0x00294f90:	movefm	[0xb5b38ac0], m_HintPanel
000076:0x00294fa0:	call	
000077:0x00294fb0:	imove	m_HintTimeAccu, 0.00000
000081:0x00294fc0:	ncall	GetUApi()
000081:0x00294fc8:	ncalli	UAInputAPI.GetInputByID(UAUIBack)
000081:0x00294fd8:	ncalli	UAInput.LocalPress()
000081:0x00294fe0:	cmpi	#return, _i0
000081:0x00294ff0:	beq	0x295008
000083:0x00294ff8:	call	
000083:0x00295008:	rts
LoginScreenBase::Leave()
000089:0x00295050:	call	
000090:0x00295060:	call	
000092:0x00295070:	call	
000092:0x00295080:	ncall	GetGame()
000092:0x00295088:	movec	@c00, #return
000092:0x00295098:	icall	SetInstance([0xb5d93050], @c00)
000092:0x002950a8:	icall	
000092:0x002950d8:	release	#return
000094:0x002950e0:	ncalli	LoginScreenBase.Close()
000094:0x002950e8:	rts
LoginScreenBase::IsStatic()
000101:0x002950f0:	move	#return, m_IsStatic
000101:0x00295100:	rts
000101:0x00295108:	rts
LoginQueueBase::LoginQueueBase()
000112:0x00295110:	imove	m_iPosition, 0xffffffff
000114:0x00295120:	call	
000114:0x00295130:	rts
LoginQueueBase::~LoginQueueBase()
000119:0x00295138:	movetm	handler, NULL
000119:0x00295148:	call	
000119:0x00295158:	rts
LoginQueueBase::Init()
000124:0x00295228:	ncall	GetGame()
000124:0x00295230:	ncalli	CGame.GetWorkspace()
000124:0x00295238:	ncall	CreateWidgets(#return, _s'gui/layouts/dialog_queue_position.layout', _c0, _i1)
000124:0x00295250:	movetm	layoutRoot, #return
000125:0x00295260:	movefm	[0xd31345a8], layoutRoot
000125:0x00295270:	ncalli	Widget.FindAnyWidget(_s'hint_frame0')
000125:0x00295280:	new	m_HintPanel, UiHintPanelLoading
000126:0x002952a8:	movefm	[0xd31345a8], layoutRoot
000126:0x002952b8:	ncalli	Widget.FindAnyWidget(_s'txtPosition')
000126:0x002952c8:	icall	SafeCastType([0xd3134da0], @c01, #return)
000126:0x002952e0:	movetm	m_txtPosition, @c01
000127:0x002952f0:	movefm	[0xd31345a8], layoutRoot
000127:0x00295300:	ncalli	Widget.FindAnyWidget(_s'txtNote')
000127:0x00295310:	icall	SafeCastType([0xd3134da0], @c01, #return)
000127:0x00295328:	movetm	m_txtNote, @c01
000128:0x00295338:	movefm	[0xd31345a8], layoutRoot
000128:0x00295348:	ncalli	Widget.FindAnyWidget(_s'btnLeave')
000128:0x00295358:	icall	SafeCastType([0xd31362c0], @c01, #return)
000128:0x00295370:	movetm	m_btnLeave, @c01
000129:0x00295380:	movefm	[0xd3134da0], m_txtNote
000129:0x00295390:	ncalli	TextWidget.Show(true, _i1)
000130:0x002953a0:	movefm	[0xd31345a8], layoutRoot
000130:0x002953b0:	ncalli	Widget.FindAnyWidget(_s'notification_root')
000130:0x002953c0:	ncalli	Widget.Show(false, _i1)
000143:0x002953d0:	movem	#return, layoutRoot
000143:0x002953e0:	rts
000143:0x002953e8:	rts
LoginQueueBase::OnClick()
000148:0x002953f0:	call	
000149:0x00295410:	cmpm	w, m_btnLeave
000149:0x00295420:	bne	0x295450
000151:0x00295428:	call	
000152:0x00295438:	imove	#return, 0x000001
000152:0x00295448:	rts
000154:0x00295450:	imove	#return, 0x000000
000154:0x00295460:	rts
000154:0x00295468:	rts
LoginQueueBase::Show()
000159:0x00295470:	cmpcm	layoutRoot, null
000159:0x00295480:	beq	0x2954a8
000161:0x00295488:	movefm	[0xd31345a8], layoutRoot
000161:0x00295498:	ncalli	Widget.Show(true, _i1)
000161:0x002954a8:	rts
LoginQueueBase::Hide()
000167:0x002954b0:	cmpcm	layoutRoot, null
000167:0x002954c0:	beq	0x2954e8
000168:0x002954c8:	movefm	[0xd31345a8], layoutRoot
000168:0x002954d8:	ncalli	Widget.Show(false, _i1)
000169:0x002954e8:	movetm	m_HintPanel, null
000169:0x002954f8:	rts
LoginQueueBase::SetPosition()
000174:0x00295500:	cmpi	position, m_iPosition
000174:0x00295510:	beq	0x295558
000176:0x00295518:	move	m_iPosition, position
000177:0x00295528:	icall	ToString(position)
000177:0x00295538:	movefm	[0xd3134da0], m_txtPosition
000177:0x00295548:	ncalli	TextWidget.SetText(#return, _i1)
000177:0x00295558:	rts
LoginQueueBase::CanChangeHintPage()
000183:0x00295560:	cmpf	timeAccu, LOADING_SCREEN_HINT_INTERVAL
000183:0x00295570:	blt	0x295590
000183:0x00295578:	imove	#return, 0x000001
000183:0x00295588:	jump	0x2955a0
000183:0x00295590:	imove	#return, 0x000000
000183:0x002955a0:	rts
000183:0x002955a8:	rts
LoginQueueStatic::LoginQueueStatic()
000193:0x002955b0:	call	
000193:0x002955c0:	release	#return
000195:0x002955c8:	imove	m_IsStatic, 0x000001
000195:0x002955d8:	rts
LoginTimeBase::LoginTimeBase()
000211:0x002955e0:	call	
000212:0x002955f0:	imove	m_IsRespawn, 0x000000
000214:0x00295600:	new	m_FullTime, FullTimeData
000214:0x00295620:	rts
LoginTimeBase::~LoginTimeBase()
000219:0x00295628:	cmpc	g_Game, null
000219:0x00295638:	beq	0x295660
000220:0x00295640:	movetm	handler, null
000220:0x00295650:	call	
000221:0x00295660:	movetm	m_FullTime, null
000221:0x00295670:	rts
LoginTimeBase::Init()
000226:0x002956f0:	ncall	GetGame()
000226:0x002956f8:	ncalli	CGame.GetWorkspace()
000226:0x00295700:	ncall	CreateWidgets(#return, _s'gui/layouts/dialog_login_time.layout', _c0, _i1)
000226:0x00295718:	movetm	layoutRoot, #return
000228:0x00295728:	movefm	[0xd31345a8], layoutRoot
000228:0x00295738:	ncalli	Widget.FindAnyWidget(_s'txtDescription')
000228:0x00295748:	icall	SafeCastType([0xd3134da0], @c01, #return)
000228:0x00295760:	movetm	m_txtDescription, @c01
000229:0x00295770:	movefm	[0xd31345a8], layoutRoot
000229:0x00295780:	ncalli	Widget.FindAnyWidget(_s'txtLabel')
000229:0x00295790:	icall	SafeCastType([0xd3134da0], @c01, #return)
000229:0x002957a8:	movetm	m_txtLabel, @c01
000230:0x002957b8:	movefm	[0xd31345a8], layoutRoot
000230:0x002957c8:	ncalli	Widget.FindAnyWidget(_s'btnLeave')
000230:0x002957d8:	icall	SafeCastType([0xd31362c0], @c01, #return)
000230:0x002957f0:	movetm	m_btnLeave, @c01
000231:0x00295800:	movefm	[0xd3134da0], m_txtDescription
000231:0x00295810:	ncalli	TextWidget.Show(true, _i1)
000232:0x00295820:	movefm	[0xd31345a8], layoutRoot
000232:0x00295830:	ncalli	Widget.FindAnyWidget(_s'notification_root')
000232:0x00295840:	ncalli	Widget.Show(false, _i1)
000245:0x00295850:	movem	#return, layoutRoot
000245:0x00295860:	rts
000245:0x00295868:	rts
LoginTimeBase::OnClick()
000250:0x00295870:	call	
000251:0x00295890:	cmpm	w, m_btnLeave
000251:0x002958a0:	bne	0x2958d0
000253:0x002958a8:	call	
000254:0x002958b8:	imove	#return, 0x000001
000254:0x002958c8:	rts
000256:0x002958d0:	imove	#return, 0x000000
000256:0x002958e0:	rts
000256:0x002958e8:	rts
LoginTimeBase::Show()
000261:0x002958f0:	cmpcm	layoutRoot, null
000261:0x00295900:	beq	0x295970
000263:0x00295908:	movefm	[0xd31345a8], layoutRoot
000263:0x00295918:	ncalli	Widget.Show(true, _i1)
000264:0x00295928:	movefm	[0xd31345a8], layoutRoot
000264:0x00295938:	ncalli	Widget.FindAnyWidget(_s'hint_frame0')
000264:0x00295948:	new	m_HintPanel, UiHintPanelLoading
000264:0x00295970:	rts
LoginTimeBase::Hide()
000270:0x00295978:	cmpcm	layoutRoot, null
000270:0x00295988:	beq	0x2959b0
000271:0x00295990:	movefm	[0xd31345a8], layoutRoot
000271:0x002959a0:	ncalli	Widget.Show(false, _i1)
000272:0x002959b0:	movetm	m_HintPanel, null
000272:0x002959c0:	rts
LoginTimeBase::SetTime()
000277:0x00295ae0:	moves	text, _s''
000278:0x00295af0:	movem	fullTime, m_FullTime
000278:0x00295b00:	call	ConvertSecondsToFullTime(time, fullTime)
000278:0x00295b18:	movem	m_FullTime, fullTime
000278:0x00295b28:	release	fullTime
000279:0x00295b30:	cmpi	m_IsRespawn, _i0
000279:0x00295b40:	bne	0x295b60
000280:0x00295b48:	moves	text, _s'#menu_loading_in_'
000280:0x00295b58:	jump	0x295b70
000282:0x00295b60:	moves	text, _s'#dayz_game_spawning_in_'
000284:0x00295b70:	movefm	[0xb5b3c5a8], m_FullTime
000284:0x00295b80:	movec	@c00, [0xb5b3c5a8]
000284:0x00295b90:	cmpi	m_Days, _i0
000284:0x00295ba0:	ble	0x295bd0
000285:0x00295ba8:	moves	@s00, _s'dhms'
000285:0x00295bb8:	adds	text, text, @s00
000285:0x00295bc8:	jump	0x295cb0
000286:0x00295bd0:	movefm	[0xb5b3c5a8], m_FullTime
000286:0x00295be0:	movec	@c00, [0xb5b3c5a8]
000286:0x00295bf0:	cmpi	m_Hours, _i0
000286:0x00295c00:	ble	0x295c30
000287:0x00295c08:	moves	@s00, _s'hms'
000287:0x00295c18:	adds	text, text, @s00
000287:0x00295c28:	jump	0x295cb0
000288:0x00295c30:	movefm	[0xb5b3c5a8], m_FullTime
000288:0x00295c40:	movec	@c00, [0xb5b3c5a8]
000288:0x00295c50:	cmpi	m_Minutes, _i0
000288:0x00295c60:	ble	0x295c90
000289:0x00295c68:	moves	@s00, _s'ms'
000289:0x00295c78:	adds	text, text, @s00
000289:0x00295c88:	jump	0x295cb0
000291:0x00295c90:	moves	@s00, _s's'
000291:0x00295ca0:	adds	text, text, @s00
000293:0x00295cb0:	icall	TranslateString(text)
000293:0x00295cc0:	moves	text, #return
000294:0x00295cd0:	movefm	[0xb5b3c5a8], m_FullTime
000294:0x00295ce0:	movec	@c00, [0xb5b3c5a8]
000294:0x00295cf0:	movefm	[0xb5b3c5a8], m_FullTime
000294:0x00295d00:	movec	@c01, [0xb5b3c5a8]
000294:0x00295d10:	movefm	[0xb5b3c5a8], m_FullTime
000294:0x00295d20:	movec	@c02, [0xb5b3c5a8]
000294:0x00295d30:	movefm	[0xb5b3c5a8], m_FullTime
000294:0x00295d40:	movec	@c03, [0xb5b3c5a8]
000294:0x00295d50:	icall	Format(text, m_Seconds, m_Minutes, m_Hours, m_Days, _c0, _c0, _c0, _c0, _c0)
000294:0x00295d80:	moves	text, #return
000295:0x00295d90:	movefm	[0xd3134da0], m_txtLabel
000295:0x00295da0:	ncalli	TextWidget.SetText(text, _i1)
000295:0x00295db0:	rts
LoginTimeBase::SetStatus()
000300:0x00295db8:	movefm	[0xd3134da0], m_txtDescription
000300:0x00295dc8:	ncalli	TextWidget.SetText(status, _i1)
000300:0x00295dd8:	rts
LoginTimeBase::SetRespawn()
000305:0x00295de0:	move	m_IsRespawn, value
000305:0x00295df0:	rts
LoginTimeBase::IsRespawn()
000310:0x00295df8:	move	#return, m_IsRespawn
000310:0x00295e08:	rts
000310:0x00295e10:	rts
LoginTimeBase::CanChangeHintPage()
000315:0x00295e18:	cmpf	timeAccu, LOADING_SCREEN_HINT_INTERVAL
000315:0x00295e28:	blt	0x295e90
000315:0x00295e30:	movefm	[0xb5b3c5a8], m_FullTime
000315:0x00295e40:	movec	@c00, [0xb5b3c5a8]
000315:0x00295e50:	cfti	@m00, LOADING_SCREEN_HINT_INTERVAL_MIN
000315:0x00295e60:	cmpi	m_Seconds, @m00
000315:0x00295e70:	blt	0x295e90
000315:0x00295e78:	imove	#return, 0x000001
000315:0x00295e88:	jump	0x295ea0
000315:0x00295e90:	imove	#return, 0x000000
000315:0x00295ea0:	rts
000315:0x00295ea8:	rts
LoginTimeStatic::LoginTimeStatic()
000324:0x00295eb0:	call	
000324:0x00295ec0:	release	#return
000326:0x00295ec8:	imove	m_IsStatic, 0x000001
000326:0x00295ed8:	rts
ConnectionLost::ConnectionLost()
000344:0x00295f30:	ncalli	DayZGame.GetWorkspace()
000344:0x00295f38:	ncall	CreateWidgets(#return, _s'gui/layouts/day_z_connection_lost.layout', _c0, _i1)
000344:0x00295f50:	movetm	m_WidgetRoot, #return
000345:0x00295f60:	movefm	[0xd31345a8], m_WidgetRoot
000345:0x00295f70:	ncalli	Widget.Show(false, _i1)
000347:0x00295f80:	movefm	[0xd31345a8], m_WidgetRoot
000347:0x00295f90:	ncalli	Widget.FindAnyWidget(_s'TextWidget')
000347:0x00295fa0:	icall	CastTo(m_TextWidgetTitle, #return)
000348:0x00295fb0:	imove	m_duration, 0.00000
000348:0x00295fc0:	rts
ConnectionLost::Show()
000353:0x00295fc8:	movefm	[0xd31345a8], m_WidgetRoot
000353:0x00295fd8:	ncalli	Widget.IsVisible()
000353:0x00295fe0:	cmpi	#return, _i0
000353:0x00295ff0:	bne	0x296070
000355:0x00295ff8:	ncalli	DayZGame.GetUIManager()
000355:0x00296000:	ncalli	UIManager.IsDialogVisible()
000355:0x00296008:	cmpi	#return, _i0
000355:0x00296018:	beq	0x296030
000357:0x00296020:	ncalli	DayZGame.GetUIManager()
000357:0x00296028:	ncalli	UIManager.HideDialog()
000360:0x00296030:	movefm	[0xd31345a8], m_WidgetRoot
000360:0x00296040:	ncalli	Widget.Show(true, _i1)
000361:0x00296050:	movefm	[0xd3134da0], m_TextWidgetTitle
000361:0x00296060:	ncalli	TextWidget.SetText(_s'', _i1)
000361:0x00296070:	rts
ConnectionLost::Hide()
000367:0x00296078:	movefm	[0xd31345a8], m_WidgetRoot
000367:0x00296088:	ncalli	Widget.IsVisible()
000367:0x00296090:	cmpi	#return, _i0
000367:0x002960a0:	beq	0x2960c8
000369:0x002960a8:	movefm	[0xd31345a8], m_WidgetRoot
000369:0x002960b8:	ncalli	Widget.Show(false, _i1)
000369:0x002960c8:	rts
ConnectionLost::SetText()
000375:0x002960d0:	movefm	[0xd3134da0], m_TextWidgetTitle
000375:0x002960e0:	ncalli	TextWidget.SetText(text, _i1)
000375:0x002960f0:	rts
ConnectionLost::GetDuration()
000380:0x002960f8:	move	#return, m_duration
000380:0x00296108:	rts
000380:0x00296110:	rts
ConnectionLost::SetDuration()
000385:0x00296118:	move	m_duration, duration
000385:0x00296128:	rts
DayZProfilesOptions::DayZProfilesOptions()
000403:0x00296130:	new	m_DayZProfilesOptionsBool, map<int,@Param3<string,bool,bool>>
000404:0x00296150:	new	m_DayZProfilesOptionsInt, map<int,@Param3<string,int,int>>
000405:0x00296170:	new	m_DayZProfilesOptionsFloat, map<int,@Param3<string,float,float>>
000405:0x00296190:	rts
DayZProfilesOptions::RegisterProfileOption()
000410:0x002961f0:	movefm	[0xb5be0c58], m_DayZProfilesOptionsBool
000410:0x00296200:	icall	
000410:0x00296210:	cmpi	#return, _i0
000410:0x00296220:	bne	0x2962d8
000413:0x00296228:	ncall	GetGame()
000413:0x00296230:	call	GetProfileValueBool(profileOptionName, def)
000413:0x00296248:	move	profileVal, #return
000415:0x00296258:	new	@c00, Param3<string,bool,bool>
000415:0x00296288:	pushc	@c00
000415:0x00296290:	movefm	[0xb5be0c58], m_DayZProfilesOptionsBool
000415:0x002962a0:	icall	
000415:0x002962b0:	popc	@c00
000415:0x002962b8:	release	@c00
000416:0x002962c0:	call	
000416:0x002962d8:	rts
DayZProfilesOptions::RegisterProfileOptionBool()
000422:0x002962e0:	call	
000422:0x002962f8:	rts
DayZProfilesOptions::RegisterProfileOptionInt()
000427:0x00296380:	movefm	[0xb5c04d70], m_DayZProfilesOptionsInt
000427:0x00296390:	icall	
000427:0x002963a0:	cmpi	#return, _i0
000427:0x002963b0:	bne	0x296470
000431:0x002963b8:	ncall	GetGame()
000431:0x002963c0:	icall	
000432:0x002963d0:	ncall	ToInt(outValue)
000432:0x002963e0:	move	value, #return
000434:0x002963f0:	new	@c00, Param3<string,int,int>
000434:0x00296420:	pushc	@c00
000434:0x00296428:	movefm	[0xb5c04d70], m_DayZProfilesOptionsInt
000434:0x00296438:	icall	
000434:0x00296448:	popc	@c00
000434:0x00296450:	release	@c00
000435:0x00296458:	call	
000435:0x00296470:	rts
DayZProfilesOptions::RegisterProfileOptionFloat()
000441:0x002964c8:	movefm	[0xb5c04e60], m_DayZProfilesOptionsFloat
000441:0x002964d8:	icall	
000441:0x002964e8:	cmpi	#return, _i0
000441:0x002964f8:	bne	0x2965b8
000445:0x00296500:	ncall	GetGame()
000445:0x00296508:	icall	
000446:0x00296518:	ncall	ToFloat(outValue)
000446:0x00296528:	move	value, #return
000448:0x00296538:	new	@c00, Param3<string,float,float>
000448:0x00296568:	pushc	@c00
000448:0x00296570:	movefm	[0xb5c04e60], m_DayZProfilesOptionsFloat
000448:0x00296580:	icall	
000448:0x00296590:	popc	@c00
000448:0x00296598:	release	@c00
000449:0x002965a0:	call	
000449:0x002965b8:	rts
DayZProfilesOptions::ResetOptionsBool()
000455:0x00296700:	cmpcm	m_DayZProfilesOptionsBool, null
000455:0x00296710:	bne	0x296738
000457:0x00296718:	new	m_DayZProfilesOptionsBool, map<int,@Param3<string,bool,bool>>
000460:0x00296738:	movem	#array, m_DayZProfilesOptionsBool
000460:0x00296748:	ncalli	map<int,@Param3<string,bool,bool>>.End()
000460:0x00296750:	move	#cnt, #return
000460:0x00296760:	ncalli	map<int,@Param3<string,bool,bool>>.Begin()
000460:0x00296768:	move	#iterator, #return
000460:0x00296778:	jump	0x2967b0
000460:0x00296780:	move	[0xb5cbd360], #iterator
000460:0x00296790:	ncalli	map<int,@Param3<string,bool,bool>>.Next([0xb5cbd360])
000460:0x002967a0:	move	#iterator, #return
000460:0x002967b0:	cmpi	#iterator, #cnt
000460:0x002967c0:	beq	0x296898
000460:0x002967c8:	icall	
000460:0x002967d8:	move	e_opt, #return
000460:0x002967e8:	icall	
000460:0x002967f8:	movetm	r_opt, #return
000462:0x00296808:	ncall	GetGame()
000462:0x00296810:	movefm	@c00, r_opt
000462:0x00296820:	moves	name, param1
000462:0x00296830:	movefm	@c01, r_opt
000462:0x00296840:	move	def, param3
000462:0x00296850:	call	GetProfileValueBool(name, def)
000462:0x00296868:	move	profileVal, #return
000463:0x00296878:	call	
000463:0x00296890:	jump	0x296780
000463:0x00296898:	release	#array
000463:0x002968a0:	release	r_opt
000463:0x002968a8:	rts
DayZProfilesOptions::ResetOptions()
000469:0x002968b0:	call	
000469:0x002968c0:	rts
DayZProfilesOptions::ResetOptionsInt()
000474:0x002969e0:	cmpcm	m_DayZProfilesOptionsInt, null
000474:0x002969f0:	bne	0x296a18
000476:0x002969f8:	new	m_DayZProfilesOptionsInt, map<int,@Param3<string,int,int>>
000479:0x00296a18:	movem	#array, m_DayZProfilesOptionsInt
000479:0x00296a28:	ncalli	map<int,@Param3<string,int,int>>.End()
000479:0x00296a30:	move	#cnt, #return
000479:0x00296a40:	ncalli	map<int,@Param3<string,int,int>>.Begin()
000479:0x00296a48:	move	#iterator, #return
000479:0x00296a58:	jump	0x296a90
000479:0x00296a60:	move	[0xb5cccf70], #iterator
000479:0x00296a70:	ncalli	map<int,@Param3<string,int,int>>.Next([0xb5cccf70])
000479:0x00296a80:	move	#iterator, #return
000479:0x00296a90:	cmpi	#iterator, #cnt
000479:0x00296aa0:	beq	0x296b50
000479:0x00296aa8:	icall	
000479:0x00296ab8:	move	e_opt, #return
000479:0x00296ac8:	icall	
000479:0x00296ad8:	movetm	r_opt, #return
000482:0x00296ae8:	ncall	GetGame()
000482:0x00296af0:	movefm	@c00, r_opt
000482:0x00296b00:	icall	
000483:0x00296b10:	ncall	ToInt(outValue)
000483:0x00296b20:	move	value, #return
000484:0x00296b30:	call	
000484:0x00296b48:	jump	0x296a60
000484:0x00296b50:	release	#array
000484:0x00296b58:	release	r_opt
000484:0x00296b60:	rts
DayZProfilesOptions::ResetOptionsFloat()
000490:0x00296c80:	cmpcm	m_DayZProfilesOptionsFloat, null
000490:0x00296c90:	bne	0x296cb8
000492:0x00296c98:	new	m_DayZProfilesOptionsFloat, map<int,@Param3<string,float,float>>
000495:0x00296cb8:	movem	#array, m_DayZProfilesOptionsFloat
000495:0x00296cc8:	ncalli	map<int,@Param3<string,float,float>>.End()
000495:0x00296cd0:	move	#cnt, #return
000495:0x00296ce0:	ncalli	map<int,@Param3<string,float,float>>.Begin()
000495:0x00296ce8:	move	#iterator, #return
000495:0x00296cf8:	jump	0x296d30
000495:0x00296d00:	move	[0xb5ccf7e8], #iterator
000495:0x00296d10:	ncalli	map<int,@Param3<string,float,float>>.Next([0xb5ccf7e8])
000495:0x00296d20:	move	#iterator, #return
000495:0x00296d30:	cmpi	#iterator, #cnt
000495:0x00296d40:	beq	0x296df0
000495:0x00296d48:	icall	
000495:0x00296d58:	move	e_opt, #return
000495:0x00296d68:	icall	
000495:0x00296d78:	movetm	r_opt, #return
000498:0x00296d88:	ncall	GetGame()
000498:0x00296d90:	movefm	@c00, r_opt
000498:0x00296da0:	icall	
000499:0x00296db0:	ncall	ToFloat(outValue)
000499:0x00296dc0:	move	value, #return
000500:0x00296dd0:	call	
000500:0x00296de8:	jump	0x296d00
000500:0x00296df0:	release	#array
000500:0x00296df8:	release	r_opt
000500:0x00296e00:	rts
DayZProfilesOptions::SetProfileOption()
000506:0x00296e58:	cmpcm	m_DayZProfilesOptionsBool, null
000506:0x00296e68:	beq	0x296f68
000506:0x00296e70:	movefm	[0xb5be0c58], m_DayZProfilesOptionsBool
000506:0x00296e80:	icall	
000506:0x00296e90:	cmpi	#return, _i0
000506:0x00296ea0:	beq	0x296f68
000508:0x00296ea8:	movefm	[0xb5be0c58], m_DayZProfilesOptionsBool
000508:0x00296eb8:	icall	
000508:0x00296ec8:	movetm	po, #return
000510:0x00296ed8:	movefm	@c00, po
000510:0x00296ee8:	move	param2, value
000511:0x00296ef8:	ncall	GetGame()
000511:0x00296f00:	movefm	@c00, po
000511:0x00296f10:	moves	[0xb5bd97e8], param1
000511:0x00296f20:	call	ToString(value)
000511:0x00296f30:	move	value, value
000511:0x00296f40:	ncalli	CGame.SetProfileString([0xb5bd97e8], #return)
000512:0x00296f50:	ncall	GetGame()
000512:0x00296f58:	ncalli	CGame.SaveProfile()
000512:0x00296f60:	release	po
000512:0x00296f68:	rts
DayZProfilesOptions::SetProfileOptionBool()
000518:0x00296f70:	call	
000518:0x00296f88:	rts
DayZProfilesOptions::SetProfileOptionInt()
000523:0x00296fb8:	cmpcm	m_DayZProfilesOptionsInt, null
000523:0x00296fc8:	beq	0x2970b8
000523:0x00296fd0:	movefm	[0xb5c04d70], m_DayZProfilesOptionsInt
000523:0x00296fe0:	icall	
000523:0x00296ff0:	cmpi	#return, _i0
000523:0x00297000:	beq	0x2970b8
000525:0x00297008:	movefm	[0xb5c04d70], m_DayZProfilesOptionsInt
000525:0x00297018:	icall	
000525:0x00297028:	movetm	po, #return
000527:0x00297038:	movefm	@c00, po
000527:0x00297048:	move	param2, value
000528:0x00297058:	ncall	GetGame()
000528:0x00297060:	movefm	@c00, po
000528:0x00297070:	moves	[0xb5bd97e8], param1
000528:0x00297080:	icall	ToString(value)
000528:0x00297090:	ncalli	CGame.SetProfileString([0xb5bd97e8], #return)
000529:0x002970a0:	ncall	GetGame()
000529:0x002970a8:	ncalli	CGame.SaveProfile()
000529:0x002970b0:	release	po
000529:0x002970b8:	rts
DayZProfilesOptions::SetProfileOptionFloat()
000535:0x002970e8:	cmpcm	m_DayZProfilesOptionsFloat, null
000535:0x002970f8:	beq	0x2971e8
000535:0x00297100:	movefm	[0xb5c04e60], m_DayZProfilesOptionsFloat
000535:0x00297110:	icall	
000535:0x00297120:	cmpi	#return, _i0
000535:0x00297130:	beq	0x2971e8
000537:0x00297138:	movefm	[0xb5c04e60], m_DayZProfilesOptionsFloat
000537:0x00297148:	icall	
000537:0x00297158:	movetm	po, #return
000539:0x00297168:	movefm	@c00, po
000539:0x00297178:	move	param2, value
000540:0x00297188:	ncall	GetGame()
000540:0x00297190:	movefm	@c00, po
000540:0x002971a0:	moves	[0xb5bd97e8], param1
000540:0x002971b0:	icall	ToString(value)
000540:0x002971c0:	ncalli	CGame.SetProfileString([0xb5bd97e8], #return)
000541:0x002971d0:	ncall	GetGame()
000541:0x002971d8:	ncalli	CGame.SaveProfile()
000541:0x002971e0:	release	po
000541:0x002971e8:	rts
DayZProfilesOptions::GetProfileOption()
000547:0x00297218:	cmpcm	m_DayZProfilesOptionsBool, null
000547:0x00297228:	beq	0x2972d0
000547:0x00297230:	movefm	[0xb5be0c58], m_DayZProfilesOptionsBool
000547:0x00297240:	icall	
000547:0x00297250:	cmpi	#return, _i0
000547:0x00297260:	beq	0x2972d0
000549:0x00297268:	movefm	[0xb5be0c58], m_DayZProfilesOptionsBool
000549:0x00297278:	icall	
000549:0x00297288:	movetm	po, #return
000550:0x00297298:	movefm	@c00, po
000550:0x002972a8:	move	#return, param2
000550:0x002972b8:	release	po
000550:0x002972c0:	rts
000550:0x002972c8:	release	po
000553:0x002972d0:	imove	#return, 0x000001
000553:0x002972e0:	rts
000553:0x002972e8:	rts
DayZProfilesOptions::GetProfileOptionBool()
000558:0x002972f0:	call	
000558:0x00297300:	move	#return, #return
000558:0x00297310:	rts
000558:0x00297318:	rts
DayZProfilesOptions::GetProfileOptionInt()
000563:0x00297348:	cmpcm	m_DayZProfilesOptionsInt, null
000563:0x00297358:	beq	0x297400
000563:0x00297360:	movefm	[0xb5c04d70], m_DayZProfilesOptionsInt
000563:0x00297370:	icall	
000563:0x00297380:	cmpi	#return, _i0
000563:0x00297390:	beq	0x297400
000565:0x00297398:	movefm	[0xb5c04d70], m_DayZProfilesOptionsInt
000565:0x002973a8:	icall	
000565:0x002973b8:	movetm	po, #return
000566:0x002973c8:	movefm	@c00, po
000566:0x002973d8:	move	#return, param2
000566:0x002973e8:	release	po
000566:0x002973f0:	rts
000566:0x002973f8:	release	po
000569:0x00297400:	imove	#return, 0x000000
000569:0x00297410:	rts
000569:0x00297418:	rts
DayZProfilesOptions::GetProfileOptionFloat()
000574:0x00297448:	cmpcm	m_DayZProfilesOptionsFloat, null
000574:0x00297458:	beq	0x297500
000574:0x00297460:	movefm	[0xb5c04e60], m_DayZProfilesOptionsFloat
000574:0x00297470:	icall	
000574:0x00297480:	cmpi	#return, _i0
000574:0x00297490:	beq	0x297500
000576:0x00297498:	movefm	[0xb5c04e60], m_DayZProfilesOptionsFloat
000576:0x002974a8:	icall	
000576:0x002974b8:	movetm	po, #return
000577:0x002974c8:	movefm	@c00, po
000577:0x002974d8:	move	#return, param2
000577:0x002974e8:	release	po
000577:0x002974f0:	rts
000577:0x002974f8:	release	po
000580:0x00297500:	imove	#return, 0.00000
000580:0x00297510:	rts
000580:0x00297518:	rts
DayZProfilesOptions::GetProfileOptionDefault()
000585:0x00297520:	call	
000585:0x00297530:	move	#return, #return
000585:0x00297540:	rts
000585:0x00297548:	rts
DayZProfilesOptions::GetProfileOptionDefaultBool()
000590:0x002975a0:	cmpcm	m_DayZProfilesOptionsBool, null
000590:0x002975b0:	beq	0x297658
000590:0x002975b8:	movefm	[0xb5be0c58], m_DayZProfilesOptionsBool
000590:0x002975c8:	icall	
000590:0x002975d8:	cmpi	#return, _i0
000590:0x002975e8:	beq	0x297658
000592:0x002975f0:	movefm	[0xb5be0c58], m_DayZProfilesOptionsBool
000592:0x00297600:	icall	
000592:0x00297610:	movetm	po, #return
000593:0x00297620:	movefm	@c00, po
000593:0x00297630:	move	#return, param3
000593:0x00297640:	release	po
000593:0x00297648:	rts
000593:0x00297650:	release	po
000596:0x00297658:	icall	ErrorEx(_s'Invalid profile option id! Returning 'true'.', _i1)
000597:0x00297668:	imove	#return, 0x000001
000597:0x00297678:	rts
000597:0x00297680:	rts
DayZProfilesOptions::GetProfileOptionDefaultInt()
000602:0x002976d8:	cmpcm	m_DayZProfilesOptionsInt, null
000602:0x002976e8:	beq	0x297790
000602:0x002976f0:	movefm	[0xb5c04d70], m_DayZProfilesOptionsInt
000602:0x00297700:	icall	
000602:0x00297710:	cmpi	#return, _i0
000602:0x00297720:	beq	0x297790
000604:0x00297728:	movefm	[0xb5c04d70], m_DayZProfilesOptionsInt
000604:0x00297738:	icall	
000604:0x00297748:	movetm	po, #return
000605:0x00297758:	movefm	@c00, po
000605:0x00297768:	move	#return, param3
000605:0x00297778:	release	po
000605:0x00297780:	rts
000605:0x00297788:	release	po
000608:0x00297790:	icall	ErrorEx(_s'Invalid profile option id! Returning '0'.', _i1)
000609:0x002977a0:	imove	#return, 0x000000
000609:0x002977b0:	rts
000609:0x002977b8:	rts
DayZProfilesOptions::GetProfileOptionDefaultFloat()
000614:0x00297810:	cmpcm	m_DayZProfilesOptionsFloat, null
000614:0x00297820:	beq	0x2978c8
000614:0x00297828:	movefm	[0xb5c04e60], m_DayZProfilesOptionsFloat
000614:0x00297838:	icall	
000614:0x00297848:	cmpi	#return, _i0
000614:0x00297858:	beq	0x2978c8
000616:0x00297860:	movefm	[0xb5c04e60], m_DayZProfilesOptionsFloat
000616:0x00297870:	icall	
000616:0x00297880:	movetm	po, #return
000617:0x00297890:	movefm	@c00, po
000617:0x002978a0:	move	#return, param3
000617:0x002978b0:	release	po
000617:0x002978b8:	rts
000617:0x002978c0:	release	po
000620:0x002978c8:	icall	ErrorEx(_s'Invalid profile option id! Returning '0.0'.', _i1)
000621:0x002978d8:	imove	#return, 0.00000
000621:0x002978e8:	rts
000621:0x002978f0:	rts
DayZProfilesOptions::GetProfileOptionMap()
000626:0x002978f8:	cmpcm	m_DayZProfilesOptions, null
000626:0x00297908:	beq	0x297928
000627:0x00297910:	movem	#return, m_DayZProfilesOptions
000627:0x00297920:	rts
000629:0x00297928:	movetm	#return, null
000629:0x00297938:	rts
000629:0x00297940:	rts
LoadingScreen::LoadingScreen()
000692:0x00297b00:	movec	m_DayZGame, game
000694:0x00297b10:	ncalli	DayZGame.GetLoadingWorkspace()
000694:0x00297b18:	ncall	CreateWidgets(#return, _s'gui/layouts/loading.layout', _c0, _i1)
000694:0x00297b30:	movetm	m_WidgetRoot, #return
000695:0x00297b40:	movefm	[0xd31345a8], m_WidgetRoot
000695:0x00297b50:	ncalli	Widget.FindAnyWidget(_s'ImageLogoMid')
000695:0x00297b60:	icall	CastTo(m_ImageLogoMid, #return)
000696:0x00297b70:	movefm	[0xd31345a8], m_WidgetRoot
000696:0x00297b80:	ncalli	Widget.FindAnyWidget(_s'ImageLogoCorner')
000696:0x00297b90:	icall	CastTo(m_ImageLogoCorner, #return)
000698:0x00297ba0:	movefm	[0xd31345a8], m_WidgetRoot
000698:0x00297bb0:	ncalli	Widget.FindAnyWidget(_s'TextWidget')
000698:0x00297bc0:	icall	CastTo(m_TextWidgetTitle, #return)
000699:0x00297bd0:	movefm	[0xd31345a8], m_WidgetRoot
000699:0x00297be0:	ncalli	Widget.FindAnyWidget(_s'StatusText')
000699:0x00297bf0:	icall	CastTo(m_TextWidgetStatus, #return)
000700:0x00297c00:	movefm	[0xd31345a8], m_WidgetRoot
000700:0x00297c10:	ncalli	Widget.FindAnyWidget(_s'ImageBackground')
000700:0x00297c20:	icall	CastTo(m_ImageWidgetBackground, #return)
000701:0x00297c30:	movefm	[0xd31345a8], m_WidgetRoot
000701:0x00297c40:	ncalli	Widget.FindAnyWidget(_s'ImageLoadingIcon')
000701:0x00297c50:	icall	CastTo(m_ImageLoadingIcon, #return)
000702:0x00297c60:	movefm	[0xd31345a8], m_WidgetRoot
000702:0x00297c70:	ncalli	Widget.FindAnyWidget(_s'ModdedWarning')
000702:0x00297c80:	icall	CastTo(m_ModdedWarning, #return)
000704:0x00297c90:	movefm	[0xd31345a8], m_WidgetRoot
000704:0x00297ca0:	ncalli	Widget.FindAnyWidget(_s'ImageBackground')
000704:0x00297cb0:	icall	SafeCastType([0xd3135420], @c01, #return)
000704:0x00297cc8:	movetm	m_ImageBackground, @c01
000705:0x00297cd8:	movefm	[0xd31345a8], m_WidgetRoot
000705:0x00297ce8:	ncalli	Widget.FindAnyWidget(_s'LoadingBar')
000705:0x00297cf8:	icall	SafeCastType([0xd3159bb0], @c01, #return)
000705:0x00297d10:	movetm	m_ProgressLoading, @c01
000708:0x00297d20:	movefm	[0xd31345a8], m_WidgetRoot
000708:0x00297d30:	ncalli	Widget.FindAnyWidget(_s'ProgressText')
000708:0x00297d40:	icall	SafeCastType([0xd3134da0], @c01, #return)
000708:0x00297d58:	movetm	m_ProgressText, @c01
000709:0x00297d68:	ncall	GetGame()
000709:0x00297d70:	cmpc	#return, null
000709:0x00297d80:	beq	0x297dc0
000711:0x00297d88:	ncall	GetGame()
000711:0x00297d90:	icall	
000711:0x00297da0:	movefm	[0xd3134da0], m_ProgressText
000711:0x00297db0:	ncalli	TextWidget.Show(#return, _i1)
000713:0x00297dc0:	movefm	[0xd31345a8], m_WidgetRoot
000713:0x00297dd0:	ncalli	Widget.FindAnyWidget(_s'notification_root')
000713:0x00297de0:	ncalli	Widget.Show(false, _i1)
000727:0x00297df0:	call	ReportModded()
000727:0x00297e00:	movefm	[0xd3134da0], m_ModdedWarning
000727:0x00297e10:	ncalli	TextWidget.Show(#return, _i1)
000728:0x00297e20:	movefm	[0xd3135420], m_ImageLogoMid
000728:0x00297e30:	ncalli	ImageWidget.Show(true, _i1)
000729:0x00297e40:	movefm	[0xd3135420], m_ImageLogoCorner
000729:0x00297e50:	ncalli	ImageWidget.Show(false, _i1)
000731:0x00297e60:	movefm	[0xd3135420], m_ImageWidgetBackground
000731:0x00297e70:	ncalli	ImageWidget.Show(true, _i1)
000732:0x00297e80:	imove	m_Counter, 0x000000
000735:0x00297e90:	call	
000735:0x00297ea0:	call	
000735:0x00297eb0:	release	#return
000737:0x00297eb8:	movefm	[0xb5b9f988], m_ProgressLoading
000737:0x00297ec8:	ncall	SetProgressData([0xb5b9f988])
000738:0x00297ed8:	movefm	[0xb5b9f960], m_ImageBackground
000738:0x00297ee8:	ncall	SetUserData([0xb5b9f960])
000738:0x00297ef8:	rts
LoadingScreen::Inc()
000746:0x00297f00:	movec	[0xb5b39920], m_DayZGame
000746:0x00297f10:	ncalli	DayZGame.GetTickTime()
000746:0x00297f18:	move	m_LastProgressUpdate, #return
000747:0x00297f28:	move	@m00, m_Counter
000747:0x00297f38:	inc	m_Counter
000748:0x00297f40:	cmpi	m_Counter, _i1
000748:0x00297f50:	bne	0x297f68
000750:0x00297f58:	call	
000750:0x00297f68:	rts
LoadingScreen::Dec()
000756:0x00297f70:	subi	@m00, m_Counter, _i1
000756:0x00297f80:	move	m_Counter, @m00
000758:0x00297f90:	cmpi	m_Counter, _i0
000758:0x00297fa0:	bgt	0x297fd8
000760:0x00297fa8:	imove	m_Counter, 0x000000
000761:0x00297fb8:	call	
000762:0x00297fc8:	movetm	m_HintPanel, null
000762:0x00297fd8:	rts
LoadingScreen::EndLoading()
000768:0x00298020:	movec	[0xb5b9f988], null
000768:0x00298030:	ncall	SetProgressData([0xb5b9f988])
000769:0x00298040:	movec	[0xb5b9f960], null
000769:0x00298050:	ncall	SetUserData([0xb5b9f960])
000770:0x00298060:	movefm	[0xd31345a8], m_WidgetRoot
000770:0x00298070:	ncalli	Widget.Show(false, _i1)
000771:0x00298080:	ncall	GetGame()
000771:0x00298088:	call	
000771:0x00298098:	movec	@c00, g_Game
000771:0x002980a8:	icall	SetInstance([0xb5d96020], @c00)
000771:0x002980b8:	icall	
000771:0x002980e8:	release	#return
000771:0x002980f0:	rts
LoadingScreen::IsLoading()
000776:0x002980f8:	movefm	[0xd31345a8], m_WidgetRoot
000776:0x00298108:	ncalli	Widget.IsVisible()
000776:0x00298110:	move	#return, #return
000776:0x00298120:	rts
000776:0x00298128:	rts
LoadingScreen::SetTitle()
000781:0x00298130:	movefm	[0xd3134da0], m_TextWidgetTitle
000781:0x00298140:	ncalli	TextWidget.SetText(title, _i1)
000781:0x00298150:	rts
LoadingScreen::SetStatus()
000786:0x00298158:	movefm	[0xd3134da0], m_TextWidgetStatus
000786:0x00298168:	ncalli	TextWidget.SetText(status, _i1)
000786:0x00298178:	rts
LoadingScreen::SetProgress()
000791:0x002981a8:	movec	[0xb5b39920], m_DayZGame
000791:0x002981b8:	ncalli	DayZGame.GetTickTime()
000791:0x002981c0:	subf	time_delta, #return, m_LastProgressUpdate
000793:0x002981d0:	movec	[0xb5b39920], m_DayZGame
000793:0x002981e0:	ncalli	DayZGame.GetTickTime()
000793:0x002981e8:	move	m_LastProgressUpdate, #return
000793:0x002981f8:	rts
LoadingScreen::ShowEx()
000803:0x00298228:	cmpcm	m_HintPanel, null
000803:0x00298238:	bne	0x2982a8
000805:0x00298240:	movefm	[0xd31345a8], m_WidgetRoot
000805:0x00298250:	ncalli	Widget.FindAnyWidget(_s'hint_frame')
000805:0x00298260:	new	m_HintPanel, UiHintPanelLoading
000806:0x00298288:	movefm	[0xb5b38ac0], m_HintPanel
000806:0x00298298:	call	
000809:0x002982a8:	call	
000809:0x002982b8:	rts
LoadingScreen::Show()
000814:0x00298360:	movem	lIcon, m_ImageBackground
000815:0x00298370:	movem	pText, m_ProgressLoading
000816:0x00298380:	movefm	[0xd3134da0], m_ProgressText
000816:0x00298390:	ncalli	TextWidget.SetText(_s'', _i1)
000817:0x002983a0:	movefm	[0xd3159bb0], m_ProgressLoading
000817:0x002983b0:	ncalli	ProgressBarWidget.SetCurrent(_f0.000000)
000818:0x002983c0:	movefm	[0xd3135420], m_ImageBackground
000818:0x002983d0:	ncalli	ImageWidget.SetMaskProgress(_f0.000000)
000820:0x002983e0:	movefm	[0xd31345a8], m_WidgetRoot
000820:0x002983f0:	ncalli	Widget.IsVisible()
000820:0x002983f8:	cmpi	#return, _i0
000820:0x00298408:	bne	0x298618
000822:0x00298410:	movec	[0xb5b39920], m_DayZGame
000822:0x00298420:	ncalli	DayZGame.GetUIManager()
000822:0x00298428:	ncalli	UIManager.IsDialogVisible()
000822:0x00298430:	cmpi	#return, _i0
000822:0x00298440:	beq	0x298468
000824:0x00298448:	movec	[0xb5b39920], m_DayZGame
000824:0x00298458:	ncalli	DayZGame.GetUIManager()
000824:0x00298460:	ncalli	UIManager.HideDialog()
000827:0x00298468:	movec	[0xb5b39920], m_DayZGame
000827:0x00298478:	call	
000827:0x00298488:	move	@m00, #return
000827:0x00298498:	cmpi	@m00, MISSION_STATE_MAINMENU
000827:0x002984a8:	bne	0x298538
000829:0x002984b0:	movefm	[0xd3135420], m_ImageLogoMid
000829:0x002984c0:	ncalli	ImageWidget.Show(false, _i1)
000830:0x002984d0:	movefm	[0xd3135420], m_ImageLogoCorner
000830:0x002984e0:	ncalli	ImageWidget.Show(false, _i1)
000831:0x002984f0:	movefm	[0xd3135420], m_ImageWidgetBackground
000831:0x00298500:	ncalli	ImageWidget.Show(true, _i1)
000832:0x00298510:	movefm	[0xd3134da0], m_TextWidgetStatus
000832:0x00298520:	ncalli	TextWidget.Show(true, _i1)
000832:0x00298530:	jump	0x2985b8
000836:0x00298538:	movefm	[0xd3135420], m_ImageLogoMid
000836:0x00298548:	ncalli	ImageWidget.Show(true, _i1)
000837:0x00298558:	movefm	[0xd3135420], m_ImageLogoCorner
000837:0x00298568:	ncalli	ImageWidget.Show(false, _i1)
000838:0x00298578:	movefm	[0xd3135420], m_ImageWidgetBackground
000838:0x00298588:	ncalli	ImageWidget.Show(true, _i1)
000839:0x00298598:	movefm	[0xd3134da0], m_TextWidgetStatus
000839:0x002985a8:	ncalli	TextWidget.Show(false, _i1)
000842:0x002985b8:	movefm	[0xd31345a8], m_WidgetRoot
000842:0x002985c8:	ncalli	Widget.Show(true, _i1)
000843:0x002985d8:	movefm	[0xd3134da0], m_TextWidgetTitle
000843:0x002985e8:	ncalli	TextWidget.SetText(_s'', _i1)
000844:0x002985f8:	movefm	[0xd3134da0], m_TextWidgetStatus
000844:0x00298608:	ncalli	TextWidget.SetText(_s'', _i1)
000847:0x00298618:	movefm	[0xb5b9f988], pText
000847:0x00298628:	ncall	SetProgressData([0xb5b9f988])
000848:0x00298638:	movefm	[0xb5b9f960], lIcon
000848:0x00298648:	ncall	SetUserData([0xb5b9f960])
000848:0x00298658:	release	lIcon
000848:0x00298660:	release	pText
000848:0x00298668:	rts
LoadingScreen::Hide()
000853:0x00298670:	cmpi	force, _i0
000853:0x00298680:	beq	0x2986b8
000855:0x00298688:	cmpi	m_Counter, _i0
000855:0x00298698:	ble	0x2986b8
000857:0x002986a0:	call	
000857:0x002986b0:	jump	0x298688
000861:0x002986b8:	cmpi	m_Counter, _i0
000861:0x002986c8:	bgt	0x298740
000863:0x002986d0:	movefm	[0xd31345a8], m_WidgetRoot
000863:0x002986e0:	ncalli	Widget.Show(false, _i1)
000864:0x002986f0:	movec	[0xb5b9f960], null
000864:0x00298700:	ncall	SetUserData([0xb5b9f960])
000865:0x00298710:	movec	[0xb5b9f988], null
000865:0x00298720:	ncall	SetProgressData([0xb5b9f988])
000866:0x00298730:	movetm	m_HintPanel, null
000866:0x00298740:	rts
DayZGame::DayZGame()
000965:0x00298930:	imove	m_FirstConnect, 0x000001
000965:0x00298940:	imove	m_IsWorldWetTempUpdateEnabled, 0x000001
000965:0x00298950:	imove	m_IsFoodDecayEnabled, 0x000001
000965:0x00298960:	imove	m_EVValue, 0.00000
000965:0x00298970:	new	m_CharClassNames, array<string>
000967:0x00298990:	call	CreateManagerStatic()
000972:0x002989a0:	imove	m_MissionState, 0x000001
000974:0x002989b0:	movetm	m_keyboard_handler, null
000980:0x002989c0:	imove	i, 0x000000
000980:0x002989d0:	jump	0x2989f0
000980:0x002989d8:	move	@m00, i
000980:0x002989e8:	inc	i
000980:0x002989f0:	cmpi	i, CALL_CATEGORY_COUNT
000980:0x00298a00:	bge	0x298b30
000982:0x00298a08:	new	@c00, ScriptCallQueue
000982:0x00298a28:	pushc	@c00
000982:0x00298a30:	ctv	m_callQueue[i], @c00
000982:0x00298a40:	popc	@c00
000982:0x00298a48:	release	@c00
000983:0x00298a50:	new	@c00, ScriptInvoker
000983:0x00298a70:	pushc	@c00
000983:0x00298a78:	ctv	m_updateQueue[i], @c00
000983:0x00298a88:	popc	@c00
000983:0x00298a90:	release	@c00
000984:0x00298a98:	new	@c00, TimerQueue
000984:0x00298ab8:	pushc	@c00
000984:0x00298ac0:	ctv	m_timerQueue[i], @c00
000984:0x00298ad0:	popc	@c00
000984:0x00298ad8:	release	@c00
000986:0x00298ae0:	new	@c00, ScriptInvoker
000986:0x00298b00:	pushc	@c00
000986:0x00298b08:	ctv	m_postUpdateQueue[i], @c00
000986:0x00298b18:	popc	@c00
000986:0x00298b20:	release	@c00
000986:0x00298b28:	jump	0x2989d8
000989:0x00298b30:	new	m_dragQueue, DragQueue
000991:0x00298b50:	imove	m_LoginTime, 0x000000
000994:0x00298b60:	icall	
000994:0x00298b70:	cmpi	#return, _i0
000994:0x00298b80:	beq	0x298b98
000996:0x00298b88:	imove	m_IsStressTest, 0x000001
000999:0x00298b98:	icall	
000999:0x00298ba8:	cmpi	#return, _i0
000999:0x00298bb8:	beq	0x298bd0
001001:0x00298bc0:	imove	m_AimLoggingEnabled, 0x000001
001005:0x00298bd0:	new	m_Backlit, Backlit
001006:0x00298bf0:	movefm	[0xb5b37510], m_Backlit
001006:0x00298c00:	call	
001008:0x00298c10:	ncalli	DayZGame.GetModToBeReported()
001008:0x00298c18:	move	m_ReportModded, #return
001011:0x00298c28:	cmpcm	m_loading, null
001011:0x00298c38:	bne	0x298c68
001013:0x00298c40:	new	m_loading, LoadingScreen
001016:0x00298c68:	cmpcm	m_loading, null
001016:0x00298c78:	beq	0x298ca0
001018:0x00298c80:	movefm	[0xb5b3e538], m_loading
001018:0x00298c90:	call	
001022:0x00298ca0:	call	Init()
001023:0x00298cb0:	call	Init()
001024:0x00298cc0:	call	Init()
001025:0x00298cd0:	call	Init()
001026:0x00298ce0:	ncall	GetUApi()
001026:0x00298ce8:	pushc	#return
001026:0x00298cf0:	ncall	GetUApi()
001026:0x00298cf8:	movec	@c00, #return
001026:0x00298d08:	popc	#return
001026:0x00298d10:	ncalli	UAInputAPI.PresetCurrent()
001026:0x00298d18:	ncalli	UAInputAPI.PresetSelect(#return)
001028:0x00298d28:	new	m_DayZProfileOptions, DayZProfilesOptions
001030:0x00298d48:	call	
001030:0x00298d58:	icall	SetInstance([0xb5d96828], this)
001030:0x00298d68:	icall	
001030:0x00298d98:	release	#return
001031:0x00298da0:	call	
001031:0x00298db0:	icall	SetInstance([0xb5d96868], this)
001031:0x00298dc0:	icall	
001031:0x00298df0:	release	#return
001033:0x00298df8:	moves	path, _s'cfgVehicles'
001034:0x00298e08:	moves	child_name, _s''
001035:0x00298e18:	ncalli	DayZGame.ConfigGetChildrenCount(path)
001035:0x00298e28:	move	count, #return
001037:0x00298e38:	imove	p, 0x000000
001037:0x00298e48:	jump	0x298e58
001037:0x00298e50:	inc	p
001037:0x00298e58:	cmpi	p, count
001037:0x00298e68:	bge	0x298f78
001039:0x00298e70:	icall	
001041:0x00298e88:	adds	@s03, path, _s' '
001041:0x00298e98:	moves	@s02, @s03
001041:0x00298ea8:	adds	@s02, @s02, child_name
001041:0x00298eb8:	moves	@s01, @s02
001041:0x00298ec8:	adds	@s01, @s01, _s' scope'
001041:0x00298ed8:	moves	@s00, @s01
001041:0x00298ee8:	ncalli	DayZGame.ConfigGetInt(@s00)
001041:0x00298ef8:	move	@m00, #return
001041:0x00298f08:	cmpi	@m00, _i2
001041:0x00298f18:	bne	0x298f70
001041:0x00298f20:	call	
001041:0x00298f38:	cmpi	#return, _i0
001041:0x00298f48:	beq	0x298f70
001042:0x00298f50:	movefm	[0xd31562c0], m_CharClassNames
001042:0x00298f60:	icall	
001042:0x00298f70:	jump	0x298e50
001045:0x00298f78:	imove	m_IsConnecting, 0x000000
001046:0x00298f88:	imove	m_ConnectFromJoin, 0x000000
001046:0x00298f98:	rts
DayZGame::~DayZGame()
001052:0x00298fc8:	call	DestroyManagerStatic()
001053:0x00298fd8:	call	CleanupInstance()
001055:0x00298fe8:	movec	g_Game, null
001056:0x00298ff8:	movetm	dispatcher, null
001056:0x00299008:	call	SetDispatcher(dispatcher)
001057:0x00299018:	icall	Print(_s'~DayZGame()')
001057:0x00299028:	rts
DayZGame::DeferredInit()
001063:0x00299080:	new	opt, GameOptions
001064:0x002990a0:	ncalli	GameOptions.Initialize()
001066:0x002990a8:	ncalli	DayZGame.GetInput()
001066:0x002990b0:	call	
001068:0x002990c0:	call	GetUserFOVFromConfig()
001068:0x002990d0:	move	m_UserFOV, #return
001070:0x002990e0:	ncalli	DayZGame.GetSoundScene()
001070:0x002990e8:	ncalli	AbstractSoundScene.GetSoundVolume()
001070:0x002990f0:	move	m_volume_sound, #return
001071:0x00299100:	ncalli	DayZGame.GetSoundScene()
001071:0x00299108:	ncalli	AbstractSoundScene.GetSpeechExVolume()
001071:0x00299110:	move	m_volume_speechEX, #return
001072:0x00299120:	ncalli	DayZGame.GetSoundScene()
001072:0x00299128:	ncalli	AbstractSoundScene.GetMusicVolume()
001072:0x00299130:	move	m_volume_music, #return
001073:0x00299140:	ncalli	DayZGame.GetSoundScene()
001073:0x00299148:	ncalli	AbstractSoundScene.GetVOIPVolume()
001073:0x00299150:	move	m_volume_VOIP, #return
001074:0x00299160:	ncalli	DayZGame.GetSoundScene()
001074:0x00299168:	ncalli	AbstractSoundScene.GetRadioVolume()
001074:0x00299170:	move	m_volume_radio, #return
001076:0x00299180:	call	GetPPEManager()
001076:0x00299190:	call	
001076:0x002991a0:	release	#return
001077:0x002991a8:	call	
001077:0x002991b8:	release	#return
001077:0x002991c0:	release	opt
001077:0x002991c8:	rts
DayZGame::GlobalsInit()
001083:0x00299220:	ncall	GetCEApi()
001083:0x00299228:	cmpc	#return, null
001083:0x00299238:	beq	0x299310
001085:0x00299240:	ncall	GetCEApi()
001085:0x00299248:	ncalli	CEApi.GetCEGlobalInt(_s'WorldWetTempUpdate')
001085:0x00299258:	move	@m00, #return
001085:0x00299268:	cmpi	@m00, _i1
001085:0x00299278:	bne	0x299298
001085:0x00299280:	imove	m_IsWorldWetTempUpdateEnabled, 0x000001
001085:0x00299290:	jump	0x2992a8
001085:0x00299298:	imove	m_IsWorldWetTempUpdateEnabled, 0x000000
001087:0x002992a8:	ncall	GetCEApi()
001087:0x002992b0:	ncalli	CEApi.GetCEGlobalFloat(_s'FoodDecay')
001087:0x002992c0:	move	m_FoodDecayModifier, #return
001090:0x002992d0:	cmpf	m_FoodDecayModifier, MIN
001090:0x002992e0:	bne	0x299310
001092:0x002992e8:	ncall	GetCEApi()
001092:0x002992f0:	ncalli	CEApi.GetCEGlobalInt(_s'FoodDecay')
001092:0x00299300:	citf	m_FoodDecayModifier, #return
001097:0x00299310:	call	OnGameplayDataHandlerLoad()
001097:0x00299320:	rts
DayZGame::RegisterProfilesOptions()
001103:0x00299328:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001103:0x00299338:	call	
001104:0x00299350:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001104:0x00299360:	call	
001105:0x00299378:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001105:0x00299388:	call	
001106:0x002993a0:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001106:0x002993b0:	call	
001107:0x002993c8:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001107:0x002993d8:	call	
001108:0x002993f0:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001108:0x00299400:	call	
001109:0x00299418:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001109:0x00299428:	call	
001110:0x00299440:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001110:0x00299450:	call	
001111:0x00299468:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001111:0x00299478:	call	
001112:0x00299490:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001112:0x002994a0:	call	
001113:0x002994b8:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001113:0x002994c8:	call	
001114:0x002994e0:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001114:0x002994f0:	call	
001116:0x00299508:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001116:0x00299518:	call	
001116:0x00299530:	rts
DayZGame::ResetProfileOptions()
001121:0x00299538:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001121:0x00299548:	call	
001122:0x00299558:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001122:0x00299568:	call	
001123:0x00299578:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001123:0x00299588:	call	
001123:0x00299598:	rts
DayZGame::SetMissionPath()
001129:0x00299640:	moves	m_MissionPath, path
001131:0x00299650:	imove	pos_end, 0x000000
001132:0x00299660:	imove	pos_cur, 0x000000
001134:0x00299670:	cmpi	pos_cur, _i-1
001134:0x00299680:	beq	0x2996e8
001136:0x00299688:	move	pos_end, pos_cur
001137:0x00299698:	addi	@m02, pos_cur, _i1
001137:0x002996a8:	move	@m01, @m02
001137:0x002996b8:	ncall	IndexOfFrom(path, @m01, _s'\')
001137:0x002996d0:	move	pos_cur, #return
001137:0x002996e0:	jump	0x299670
001140:0x002996e8:	icall	Substring(path, _i0, pos_end)
001140:0x00299700:	moves	m_MissionFolderPath, #return
001140:0x00299710:	rts
DayZGame::GetMissionPath()
001145:0x00299718:	moves	#return, m_MissionPath
001145:0x00299728:	rts
001145:0x00299730:	rts
DayZGame::GetMissionFolderPath()
001150:0x00299738:	moves	#return, m_MissionFolderPath
001150:0x00299748:	rts
001150:0x00299750:	rts
DayZGame::GetCallQueue()
001155:0x00299758:	cfv	@c00, m_callQueue[call_category]
001155:0x00299768:	movetm	#return, @c00
001155:0x00299778:	rts
001155:0x00299780:	rts
DayZGame::GetUpdateQueue()
001160:0x00299788:	cfv	@c00, m_updateQueue[call_category]
001160:0x00299798:	movetm	#return, @c00
001160:0x002997a8:	rts
001160:0x002997b0:	rts
DayZGame::GetPostUpdateQueue()
001165:0x002997b8:	cfv	@c00, m_postUpdateQueue[call_category]
001165:0x002997c8:	movetm	#return, @c00
001165:0x002997d8:	rts
001165:0x002997e0:	rts
DayZGame::GetTimerQueue()
001170:0x002997e8:	cfv	@c00, m_timerQueue[call_category]
001170:0x002997f8:	movetm	#return, @c00
001170:0x00299808:	rts
001170:0x00299810:	rts
DayZGame::GetDragQueue()
001175:0x00299818:	movem	#return, m_dragQueue
001175:0x00299828:	rts
001175:0x00299830:	rts
DayZGame::GetMissionState()
001188:0x00299838:	move	#return, m_MissionState
001188:0x00299848:	rts
001188:0x00299850:	rts
DayZGame::SetMissionState()
001194:0x00299858:	move	m_MissionState, state
001194:0x00299868:	rts
DayZGame::GetProfileOption()
001200:0x00299870:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001200:0x00299880:	call	
001200:0x00299890:	move	#return, #return
001200:0x002998a0:	rts
001200:0x002998a8:	rts
DayZGame::GetProfileOptionBool()
001205:0x002998b0:	call	
001205:0x002998c0:	move	#return, #return
001205:0x002998d0:	rts
001205:0x002998d8:	rts
DayZGame::GetProfileOptionInt()
001210:0x002998e0:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001210:0x002998f0:	call	
001210:0x00299900:	move	#return, #return
001210:0x00299910:	rts
001210:0x00299918:	rts
DayZGame::GetProfileOptionFloat()
001215:0x00299920:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001215:0x00299930:	call	
001215:0x00299940:	move	#return, #return
001215:0x00299950:	rts
001215:0x00299958:	rts
DayZGame::GetProfileOptionDefault()
001220:0x00299960:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001220:0x00299970:	call	
001220:0x00299980:	move	#return, #return
001220:0x00299990:	rts
001220:0x00299998:	rts
DayZGame::GetProfileOptionDefaultBool()
001225:0x002999a0:	call	
001225:0x002999b0:	move	#return, #return
001225:0x002999c0:	rts
001225:0x002999c8:	rts
DayZGame::GetProfileOptionDefaultInt()
001230:0x002999d0:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001230:0x002999e0:	call	
001230:0x002999f0:	move	#return, #return
001230:0x00299a00:	rts
001230:0x00299a08:	rts
DayZGame::GetProfileOptionDefaultFloat()
001235:0x00299a10:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001235:0x00299a20:	call	
001235:0x00299a30:	move	#return, #return
001235:0x00299a40:	rts
001235:0x00299a48:	rts
DayZGame::SetProfileOption()
001240:0x00299a50:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001240:0x00299a60:	call	
001240:0x00299a78:	rts
DayZGame::SetProfileOptionBool()
001245:0x00299a80:	call	
001245:0x00299a98:	rts
DayZGame::SetProfileOptionInt()
001250:0x00299aa0:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001250:0x00299ab0:	call	
001250:0x00299ac8:	rts
DayZGame::SetProfileOptionFloat()
001255:0x00299ad0:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001255:0x00299ae0:	call	
001255:0x00299af8:	rts
DayZGame::GetProfileOptionMap()
001260:0x00299b00:	movefm	[0xb5b3bd58], m_DayZProfileOptions
001260:0x00299b10:	call	
001260:0x00299b20:	movem	#return, #return
001260:0x00299b30:	release	#return
001260:0x00299b38:	rts
001260:0x00299b40:	rts
DayZGame::IsStressTest()
001265:0x00299b48:	move	#return, m_IsStressTest
001265:0x00299b58:	rts
001265:0x00299b60:	rts
DayZGame::IsAimLogEnabled()
001270:0x00299b68:	move	#return, m_AimLoggingEnabled
001270:0x00299b78:	rts
001270:0x00299b80:	rts
DayZGame::SetGameState()
001275:0x00299b88:	move	m_GameState, state
001275:0x00299b98:	rts
DayZGame::GetGameState()
001280:0x00299ba0:	move	#return, m_GameState
001280:0x00299bb0:	rts
001280:0x00299bb8:	rts
DayZGame::SetLoadState()
001285:0x00299bc0:	move	m_LoadState, state
001285:0x00299bd0:	rts
DayZGame::GetLoadState()
001290:0x00299bd8:	move	#return, m_LoadState
001290:0x00299be8:	rts
001290:0x00299bf0:	rts
DayZGame::ReportModded()
001295:0x00299bf8:	move	#return, m_ReportModded
001295:0x00299c08:	rts
001295:0x00299c10:	rts
DayZGame::GetBacklit()
001300:0x00299c18:	movem	#return, m_Backlit
001300:0x00299c28:	rts
001300:0x00299c30:	rts
DayZGame::IsInventoryOpen()
001307:0x00299c38:	ncalli	DayZGame.GetUIManager()
001307:0x00299c40:	call	
001307:0x00299c50:	movefm	@c00, #return
001307:0x00299c60:	cmpc	@c00, NULL
001307:0x00299c70:	beq	0x299c98
001309:0x00299c78:	imove	#return, 0x000001
001309:0x00299c88:	release	#return
001309:0x00299c90:	rts
001309:0x00299c98:	release	#return
001312:0x00299ca0:	imove	#return, 0x000000
001312:0x00299cb0:	rts
001312:0x00299cb8:	rts
DayZGame::EarlyAccessDialog()
001318:0x00299cc0:	cmpi	m_early_access_dialog_accepted, _i0
001318:0x00299cd0:	bne	0x299d10
001320:0x00299cd8:	ncalli	DayZGame.GetUIManager()
001320:0x00299ce0:	movefm	[0xb5c1aac0], parent
001320:0x00299cf0:	ncalli	UIManager.EnterScriptedMenu(MENU_EARLYACCESS, [0xb5c1aac0])
001321:0x00299d00:	imove	m_early_access_dialog_accepted, 0x000001
001321:0x00299d10:	rts
DayZGame::CreateScriptedMenu()
001330:0x00299d40:	ncalli	DayZGame.GetMission()
001330:0x00299d48:	movec	mission, #return
001331:0x00299d58:	cmpc	mission, null
001331:0x00299d68:	beq	0x299da0
001333:0x00299d70:	call	
001333:0x00299d80:	movem	#return, #return
001333:0x00299d90:	release	#return
001333:0x00299d98:	rts
001336:0x00299da0:	movetm	#return, NULL
001336:0x00299db0:	rts
001336:0x00299db8:	rts
DayZGame::CancelLoginQueue()
001351:0x00299dc0:	cmpcm	m_LoginQueue, null
001351:0x00299dd0:	beq	0x299e58
001353:0x00299dd8:	movefm	[0xb5b3a830], m_LoginQueue
001353:0x00299de8:	call	
001353:0x00299df8:	cmpi	#return, _i0
001353:0x00299e08:	beq	0x299e40
001355:0x00299e10:	movefm	[0xb5b3a830], m_LoginQueue
001355:0x00299e20:	call	
001356:0x00299e30:	delete	m_LoginQueue
001356:0x00299e38:	jump	0x299e58
001360:0x00299e40:	movefm	[0xb5b3a830], m_LoginQueue
001360:0x00299e50:	ncalli	LoginQueueBase.Close()
001360:0x00299e58:	rts
DayZGame::CancelLoginTimeCountdown()
001367:0x00299ea0:	call	
001367:0x00299eb0:	movec	@c00, this
001367:0x00299ec0:	icall	SetInstance([0xb5d97ea0], @c00)
001367:0x00299ed0:	icall	
001367:0x00299ee0:	release	#return
001369:0x00299ee8:	cmpcm	m_LoginTimeScreen, null
001369:0x00299ef8:	beq	0x299f80
001371:0x00299f00:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
001371:0x00299f10:	call	
001371:0x00299f20:	cmpi	#return, _i0
001371:0x00299f30:	beq	0x299f68
001373:0x00299f38:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
001373:0x00299f48:	call	
001374:0x00299f58:	delete	m_LoginTimeScreen
001374:0x00299f60:	jump	0x299f80
001378:0x00299f68:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
001378:0x00299f78:	ncalli	LoginTimeBase.Close()
001378:0x00299f80:	rts
DayZGame::ClearConnectivityStates()
001385:0x00299fb0:	imove	i, 0x000000
001385:0x00299fc0:	jump	0x299fe0
001385:0x00299fc8:	move	@m00, i
001385:0x00299fd8:	inc	i
001385:0x00299fe0:	cmpi	i, STATS_COUNT
001385:0x00299ff0:	bge	0x29a010
001386:0x00299ff8:	ftv	m_ConnectivityStatsStates[i], _i0
001386:0x0029a008:	jump	0x299fc8
001386:0x0029a010:	rts
DayZGame::OnEvent()
001397:0x0029a8f8:	movea	#switch, eventTypeId
001397:0x0029a908:	movea	@m00, StartupEventTypeID
001397:0x0029a918:	cmpc	@m00, #switch
001397:0x0029a928:	bne	0x29a958
001403:0x0029a930:	call	GetInstance()
001403:0x0029a940:	release	#return
001405:0x0029a948:	jump	0x29b9a8
001405:0x0029a950:	jump	0x29a980
001405:0x0029a958:	movea	@m00, MPSessionStartEventTypeID
001405:0x0029a968:	cmpc	@m00, #switch
001405:0x0029a978:	bne	0x29a9c0
001410:0x0029a980:	call	
001412:0x0029a990:	imove	m_FirstConnect, 0x000001
001413:0x0029a9a0:	call	ResetClientData()
001414:0x0029a9b0:	jump	0x29b9a8
001414:0x0029a9b8:	jump	0x29a9e8
001414:0x0029a9c0:	movea	@m00, MPSessionEndEventTypeID
001414:0x0029a9d0:	cmpc	@m00, #switch
001414:0x0029a9e0:	bne	0x29aab8
001418:0x0029a9e8:	call	
001419:0x0029a9f8:	call	
001420:0x0029aa08:	call	
001421:0x0029aa18:	imove	m_FirstConnect, 0x000001
001437:0x0029aa28:	new	discData, StatsEventDisconnectedData
001438:0x0029aa48:	movefm	@c00, discData
001438:0x0029aa58:	call	
001438:0x0029aa68:	moves	m_CharacterId, #return
001439:0x0029aa78:	movefm	@c00, discData
001439:0x0029aa88:	moves	m_Reason, _s'quit'
001440:0x0029aa98:	call	PlayerDisconnected(discData)
001441:0x0029aaa8:	jump	0x29b9a8
001441:0x0029aab0:	jump	0x29aae0
001441:0x0029aab8:	movea	@m00, MPSessionFailEventTypeID
001441:0x0029aac8:	cmpc	@m00, #switch
001441:0x0029aad8:	bne	0x29ab70
001445:0x0029aae0:	call	
001446:0x0029aaf0:	call	
001447:0x0029ab00:	call	
001448:0x0029ab10:	ncall	DestroyAllPendingProgresses()
001450:0x0029ab18:	call	
001450:0x0029ab28:	move	@m00, #return
001450:0x0029ab38:	cmpi	@m00, CONNECTING
001450:0x0029ab48:	bne	0x29ab60
001452:0x0029ab50:	call	
001455:0x0029ab60:	jump	0x29b9a8
001455:0x0029ab68:	jump	0x29ab98
001455:0x0029ab70:	movea	@m00, MPSessionPlayerReadyEventTypeID
001455:0x0029ab80:	cmpc	@m00, #switch
001455:0x0029ab90:	bne	0x29ad78
001459:0x0029ab98:	call	
001460:0x0029aba8:	ncall	DestroyAllPendingProgresses()
001462:0x0029abb0:	call	
001465:0x0029abc0:	new	spawnData, StatsEventSpawnedData
001466:0x0029abe0:	movefm	@c00, spawnData
001466:0x0029abf0:	call	
001466:0x0029ac00:	moves	m_CharacterId, #return
001467:0x0029ac10:	movefm	@c00, spawnData
001467:0x0029ac20:	imove	m_Lifetime, 0x000000
001468:0x0029ac30:	movefm	@c00, spawnData
001468:0x0029ac40:	movev	m_Position, Zero
001469:0x0029ac50:	ncalli	DayZGame.GetPlayer()
001469:0x0029ac58:	cmpm	#return, null
001469:0x0029ac68:	beq	0x29aca0
001471:0x0029ac70:	movefm	@c00, spawnData
001471:0x0029ac80:	ncalli	DayZGame.GetPlayer()
001471:0x0029ac88:	ncalli	DayZPlayer.GetPosition()
001471:0x0029ac90:	movev	m_Position, #return
001473:0x0029aca0:	movefm	@c00, spawnData
001473:0x0029acb0:	imove	m_DaytimeHour, 0x000000
001474:0x0029acc0:	movefm	@c00, spawnData
001474:0x0029acd0:	imove	m_Population, 0x000000
001475:0x0029ace0:	call	PlayerSpawned(spawnData)
001481:0x0029acf0:	cmpi	m_FirstConnect, _i0
001481:0x0029ad00:	beq	0x29ad58
001483:0x0029ad08:	imove	m_FirstConnect, 0x000000
001484:0x0029ad18:	icall	
001484:0x0029ad28:	cmpi	#return, _i0
001484:0x0029ad38:	beq	0x29ad58
001486:0x0029ad40:	call	
001500:0x0029ad58:	call	
001502:0x0029ad68:	jump	0x29b9a8
001502:0x0029ad70:	jump	0x29ada0
001502:0x0029ad78:	movea	@m00, MPConnectionLostEventTypeID
001502:0x0029ad88:	cmpc	@m00, #switch
001502:0x0029ad98:	bne	0x29ae18
001507:0x0029ada0:	movefm	@c00, params
001507:0x0029adb0:	icall	CastTo(conLost_params, @c00)
001507:0x0029adc0:	cmpi	#return, _i0
001507:0x0029add0:	beq	0x29ae08
001509:0x0029add8:	movefm	@c00, conLost_params
001509:0x0029ade8:	move	duration, param1
001510:0x0029adf8:	call	
001512:0x0029ae08:	jump	0x29b9a8
001512:0x0029ae10:	jump	0x29ae40
001512:0x0029ae18:	movea	@m00, WorldCleaupEventTypeID
001512:0x0029ae28:	cmpc	@m00, #switch
001512:0x0029ae38:	bne	0x29ae60
001516:0x0029ae40:	call	
001517:0x0029ae50:	jump	0x29b9a8
001517:0x0029ae58:	jump	0x29ae88
001517:0x0029ae60:	movea	@m00, DialogQueuedEventTypeID
001517:0x0029ae70:	cmpc	@m00, #switch
001517:0x0029ae80:	bne	0x29af00
001521:0x0029ae88:	call	
001521:0x0029ae98:	movec	@c00, g_Game
001521:0x0029aea8:	icall	SetInstance([0xb5d982a0], @c00)
001521:0x0029aeb8:	icall	
001521:0x0029aee8:	release	#return
001522:0x0029aef0:	jump	0x29b9a8
001522:0x0029aef8:	jump	0x29af28
001522:0x0029af00:	movea	@m00, ChatMessageEventTypeID
001522:0x0029af10:	cmpc	@m00, #switch
001522:0x0029af20:	bne	0x29af70
001527:0x0029af28:	movefm	@c00, params
001527:0x0029af38:	icall	CastTo(chat_params, @c00)
001527:0x0029af48:	cmpi	#return, _i0
001527:0x0029af58:	beq	0x29af60
001531:0x0029af60:	jump	0x29b9a8
001531:0x0029af68:	jump	0x29af98
001531:0x0029af70:	movea	@m00, ProgressEventTypeID
001531:0x0029af80:	cmpc	@m00, #switch
001531:0x0029af90:	bne	0x29b058
001536:0x0029af98:	movefm	@c00, params
001536:0x0029afa8:	icall	CastTo(prog_params, @c00)
001536:0x0029afb8:	cmpi	#return, _i0
001536:0x0029afc8:	beq	0x29b048
001537:0x0029afd0:	movefm	@c00, prog_params
001537:0x0029afe0:	move	progressState, param1
001537:0x0029aff0:	movefm	@c01, prog_params
001537:0x0029b000:	move	progress, param2
001537:0x0029b010:	movefm	@c02, prog_params
001537:0x0029b020:	moves	title, param3
001537:0x0029b030:	call	
001538:0x0029b048:	jump	0x29b9a8
001538:0x0029b050:	jump	0x29b080
001538:0x0029b058:	movea	@m00, LoginTimeEventTypeID
001538:0x0029b068:	cmpc	@m00, #switch
001538:0x0029b078:	bne	0x29b0f8
001543:0x0029b080:	movefm	@c00, params
001543:0x0029b090:	icall	CastTo(loginTimeParams, @c00)
001543:0x0029b0a0:	cmpi	#return, _i0
001543:0x0029b0b0:	beq	0x29b0e8
001545:0x0029b0b8:	movefm	@c00, loginTimeParams
001545:0x0029b0c8:	move	loginTime, param1
001545:0x0029b0d8:	call	
001547:0x0029b0e8:	jump	0x29b9a8
001547:0x0029b0f0:	jump	0x29b120
001547:0x0029b0f8:	movea	@m00, RespawnEventTypeID
001547:0x0029b108:	cmpc	@m00, #switch
001547:0x0029b118:	bne	0x29b198
001552:0x0029b120:	movefm	@c00, params
001552:0x0029b130:	icall	CastTo(respawnParams, @c00)
001552:0x0029b140:	cmpi	#return, _i0
001552:0x0029b150:	beq	0x29b188
001554:0x0029b158:	movefm	@c00, respawnParams
001554:0x0029b168:	move	time, param1
001554:0x0029b178:	call	
001556:0x0029b188:	jump	0x29b9a8
001556:0x0029b190:	jump	0x29b1c0
001556:0x0029b198:	movea	@m00, PreloadEventTypeID
001556:0x0029b1a8:	cmpc	@m00, #switch
001556:0x0029b1b8:	bne	0x29b238
001561:0x0029b1c0:	movefm	@c00, params
001561:0x0029b1d0:	icall	CastTo(preloadParams, @c00)
001561:0x0029b1e0:	cmpi	#return, _i0
001561:0x0029b1f0:	beq	0x29b228
001563:0x0029b1f8:	movefm	@c00, preloadParams
001563:0x0029b208:	movev	pos, param1
001563:0x0029b218:	call	
001565:0x0029b228:	jump	0x29b9a8
001565:0x0029b230:	jump	0x29b260
001565:0x0029b238:	movea	@m00, LogoutEventTypeID
001565:0x0029b248:	cmpc	@m00, #switch
001565:0x0029b258:	bne	0x29b328
001570:0x0029b260:	movefm	@c00, params
001570:0x0029b270:	icall	CastTo(logoutParams, @c00)
001570:0x0029b280:	cmpi	#return, _i0
001570:0x0029b290:	beq	0x29b318
001572:0x0029b298:	call	
001572:0x0029b2a8:	ncalli	DayZGame.GetMission()
001572:0x0029b2b0:	movec	@c00, #return
001572:0x0029b2c0:	icall	SetInstance([0xb5d984f0], @c00)
001572:0x0029b2d0:	movefm	@c01, logoutParams
001572:0x0029b2e0:	icall	
001572:0x0029b310:	release	#return
001574:0x0029b318:	jump	0x29b9a8
001574:0x0029b320:	jump	0x29b350
001574:0x0029b328:	movea	@m00, SelectedUserChangedEventTypeID
001574:0x0029b338:	cmpc	@m00, #switch
001574:0x0029b348:	bne	0x29b370
001578:0x0029b350:	call	Init()
001579:0x0029b360:	jump	0x29b9a8
001579:0x0029b368:	jump	0x29b398
001579:0x0029b370:	movea	@m00, LoginStatusEventTypeID
001579:0x0029b380:	cmpc	@m00, #switch
001579:0x0029b390:	bne	0x29b528
001584:0x0029b398:	movefm	@c00, params
001584:0x0029b3a8:	icall	CastTo(loginStatusParams, @c00)
001586:0x0029b3b8:	movefm	@c00, loginStatusParams
001586:0x0029b3c8:	moves	msg1, param1
001587:0x0029b3d8:	movefm	@c00, loginStatusParams
001587:0x0029b3e8:	moves	msg2, param2
001591:0x0029b3f8:	cmpcm	m_LoginTimeScreen, null
001591:0x0029b408:	beq	0x29b4a0
001593:0x0029b410:	moves	finalMsg, msg1
001595:0x0029b420:	ncall	Length(msg2)
001595:0x0029b430:	move	@m00, #return
001595:0x0029b440:	cmpi	@m00, _i0
001595:0x0029b450:	ble	0x29b478
001596:0x0029b458:	adds	@s00, _s'
', msg2
001596:0x0029b468:	adds	finalMsg, finalMsg, @s00
001598:0x0029b478:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
001598:0x0029b488:	call	
001598:0x0029b498:	jump	0x29b518
001600:0x0029b4a0:	cmpcm	m_loading, null
001600:0x0029b4b0:	beq	0x29b518
001603:0x0029b4b8:	adds	@s01, msg1, _s' '
001603:0x0029b4c8:	moves	@s00, @s01
001603:0x0029b4d8:	adds	@s00, @s00, msg2
001603:0x0029b4e8:	moves	finalMsg, @s00
001604:0x0029b4f8:	movefm	[0xb5b3e538], m_loading
001604:0x0029b508:	call	
001606:0x0029b518:	jump	0x29b9a8
001606:0x0029b520:	jump	0x29b550
001606:0x0029b528:	movea	@m00, ConnectingStartEventTypeID
001606:0x0029b538:	cmpc	@m00, #switch
001606:0x0029b548:	bne	0x29b580
001610:0x0029b550:	call	
001611:0x0029b560:	call	
001612:0x0029b570:	jump	0x29b9a8
001612:0x0029b578:	jump	0x29b5a8
001612:0x0029b580:	movea	@m00, ConnectingAbortEventTypeID
001612:0x0029b590:	cmpc	@m00, #switch
001612:0x0029b5a0:	bne	0x29b608
001616:0x0029b5a8:	call	
001617:0x0029b5b8:	call	
001618:0x0029b5c8:	cmpi	m_ConnectFromJoin, _i0
001618:0x0029b5d8:	beq	0x29b5f8
001620:0x0029b5e0:	imove	m_ConnectFromJoin, 0x000000
001621:0x0029b5f0:	ncalli	DayZGame.AbortMission()
001623:0x0029b5f8:	jump	0x29b9a8
001623:0x0029b600:	jump	0x29b630
001623:0x0029b608:	movea	@m00, DLCOwnerShipFailedEventTypeID
001623:0x0029b618:	cmpc	@m00, #switch
001623:0x0029b628:	bne	0x29b6b8
001628:0x0029b630:	movefm	@c00, params
001628:0x0029b640:	icall	CastTo(dlcParams, @c00)
001628:0x0029b650:	cmpi	#return, _i0
001628:0x0029b660:	beq	0x29b6a8
001630:0x0029b668:	movefm	@c00, dlcParams
001630:0x0029b678:	adds	@s01, _s'### DLC Ownership failed !!! Map: ', param1
001630:0x0029b688:	moves	@s00, @s01
001630:0x0029b698:	icall	Print(@s00)
001632:0x0029b6a8:	jump	0x29b9a8
001632:0x0029b6b0:	jump	0x29b6e0
001632:0x0029b6b8:	movea	@m00, ConnectivityStatsUpdatedEventTypeID
001632:0x0029b6c8:	cmpc	@m00, #switch
001632:0x0029b6d8:	bne	0x29b810
001637:0x0029b6e0:	movefm	@c00, params
001637:0x0029b6f0:	icall	CastTo(connectivityStatsParams, @c00)
001637:0x0029b700:	cmpi	#return, _i0
001637:0x0029b710:	beq	0x29b800
001639:0x0029b718:	movefm	@c01, connectivityStatsParams
001639:0x0029b728:	movem	playerIdentity, param1
001645:0x0029b738:	icall	
001645:0x0029b740:	move	pingAvg, #return
001646:0x0029b750:	ncalli	DayZGame.GetWorld()
001646:0x0029b758:	ncalli	World.GetPingWarningThreshold()
001646:0x0029b760:	cmpi	pingAvg, #return
001646:0x0029b770:	bge	0x29b798
001648:0x0029b778:	call	
001648:0x0029b790:	jump	0x29b7f8
001650:0x0029b798:	ncalli	DayZGame.GetWorld()
001650:0x0029b7a0:	ncalli	World.GetPingCriticalThreshold()
001650:0x0029b7a8:	cmpi	pingAvg, #return
001650:0x0029b7b8:	bge	0x29b7e0
001652:0x0029b7c0:	call	
001652:0x0029b7d8:	jump	0x29b7f8
001656:0x0029b7e0:	call	
001656:0x0029b7f8:	release	playerIdentity
001659:0x0029b800:	jump	0x29b9a8
001659:0x0029b808:	jump	0x29b838
001659:0x0029b810:	movea	@m00, ServerFpsStatsUpdatedEventTypeID
001659:0x0029b820:	cmpc	@m00, #switch
001659:0x0029b830:	bne	0x29b940
001664:0x0029b838:	movefm	@c00, params
001664:0x0029b848:	icall	CastTo(serverFpsStatsParams, @c00)
001664:0x0029b858:	cmpi	#return, _i0
001664:0x0029b868:	beq	0x29b938
001669:0x0029b870:	movefm	@c00, serverFpsStatsParams
001669:0x0029b880:	move	fps, param1
001670:0x0029b890:	ncalli	DayZGame.GetWorld()
001670:0x0029b898:	ncalli	World.GetServerFpsWarningThreshold()
001670:0x0029b8a0:	cmpf	fps, #return
001670:0x0029b8b0:	ble	0x29b8d8
001672:0x0029b8b8:	call	
001672:0x0029b8d0:	jump	0x29b938
001674:0x0029b8d8:	ncalli	DayZGame.GetWorld()
001674:0x0029b8e0:	ncalli	World.GetServerFpsCriticalThreshold()
001674:0x0029b8e8:	cmpf	fps, #return
001674:0x0029b8f8:	ble	0x29b920
001676:0x0029b900:	call	
001676:0x0029b918:	jump	0x29b938
001680:0x0029b920:	call	
001683:0x0029b938:	jump	0x29b9a8
001683:0x0029b940:	release	discData
001683:0x0029b948:	release	spawnData
001683:0x0029b950:	release	conLost_params
001683:0x0029b958:	release	chat_params
001683:0x0029b960:	release	prog_params
001683:0x0029b968:	release	loginTimeParams
001683:0x0029b970:	release	respawnParams
001683:0x0029b978:	release	preloadParams
001683:0x0029b980:	release	logoutParams
001683:0x0029b988:	release	loginStatusParams
001683:0x0029b990:	release	dlcParams
001683:0x0029b998:	release	connectivityStatsParams
001683:0x0029b9a0:	release	serverFpsStatsParams
001687:0x0029b9a8:	call	GetInstance()
001687:0x0029b9b8:	call	
001687:0x0029b9d0:	release	#return
001689:0x0029b9d8:	ncalli	DayZGame.GetMission()
001689:0x0029b9e0:	movec	mission, #return
001690:0x0029b9f0:	cmpc	mission, null
001690:0x0029ba00:	beq	0x29ba20
001692:0x0029ba08:	call	
001695:0x0029ba20:	ncall	GetInstance()
001695:0x0029ba28:	movetm	emh, #return
001696:0x0029ba38:	cmpcm	emh, null
001696:0x0029ba48:	beq	0x29ba68
001697:0x0029ba50:	call	
001697:0x0029ba68:	release	emh
001697:0x0029ba70:	rts
DayZGame::SetConnectivityStatState()
001702:0x0029ba78:	ffv	@m00, m_ConnectivityStatsStates[type]
001702:0x0029ba88:	cmpi	level, @m00
001702:0x0029ba98:	beq	0x29baf0
001704:0x0029baa0:	ffv	@m00, m_ConnectivityStatsStates[type]
001704:0x0029bab0:	call	
001704:0x0029bac8:	cmpi	#return, _i0
001704:0x0029bad8:	beq	0x29baf0
001706:0x0029bae0:	ftv	m_ConnectivityStatsStates[type], level
001706:0x0029baf0:	rts
DayZGame::OnConnectivityStatChange()
001713:0x0029bb48:	ncall	GetGame()
001713:0x0029bb50:	cmpc	#return, null
001713:0x0029bb60:	beq	0x29bb90
001713:0x0029bb68:	ncall	GetGame()
001713:0x0029bb70:	ncalli	CGame.GetMission()
001713:0x0029bb78:	cmpc	#return, null
001713:0x0029bb88:	bne	0x29bba8
001714:0x0029bb90:	imove	#return, 0x000000
001714:0x0029bba0:	rts
001715:0x0029bba8:	ncall	GetGame()
001715:0x0029bbb0:	ncalli	CGame.GetMission()
001715:0x0029bbb8:	call	
001715:0x0029bbc8:	movem	hud, #return
001715:0x0029bbd8:	release	#return
001716:0x0029bbe0:	cmpcm	hud, null
001716:0x0029bbf0:	bne	0x29bc18
001717:0x0029bbf8:	imove	#return, 0x000000
001717:0x0029bc08:	release	hud
001717:0x0029bc10:	rts
001719:0x0029bc18:	call	
001720:0x0029bc30:	imove	#return, 0x000001
001720:0x0029bc40:	release	hud
001720:0x0029bc48:	rts
001720:0x0029bc50:	release	hud
001720:0x0029bc58:	rts
DayZGame::AddVoiceNotification()
001756:0x0029bc60:	movefm	@c00, vonStartParams
001756:0x0029bc70:	moves	player, param2
001756:0x0029bc80:	movefm	@c01, vonStartParams
001756:0x0029bc90:	moves	name, param1
001756:0x0029bca0:	movefm	[0xb5b39a50], m_Notifications
001756:0x0029bcb0:	call	
001756:0x0029bcc8:	rts
DayZGame::RemoveVoiceNotification()
001761:0x0029bcd0:	movefm	@c00, vonStopParams
001761:0x0029bce0:	moves	player, param2
001761:0x0029bcf0:	movefm	[0xb5b39a50], m_Notifications
001761:0x0029bd00:	call	
001761:0x0029bd10:	rts
DayZGame::UpdateLoginQueue()
001767:0x0029bdc0:	ncalli	DayZGame.GetUIManager()
001767:0x0029bdc8:	ncalli	UIManager.GetLoginQueuePosition()
001767:0x0029bdd0:	move	pos, #return
001770:0x0029bde0:	cmpcm	m_LoginQueue, null
001770:0x0029bdf0:	bne	0x29bee0
001770:0x0029bdf8:	cmpi	pos, _i0
001770:0x0029be08:	ble	0x29bee0
001772:0x0029be10:	ncalli	DayZGame.GetUIManager()
001772:0x0029be18:	call	
001774:0x0029be28:	ncalli	DayZGame.GetMission()
001774:0x0029be30:	cmpc	#return, null
001774:0x0029be40:	beq	0x29be88
001776:0x0029be48:	ncalli	DayZGame.GetUIManager()
001776:0x0029be50:	ncalli	UIManager.GetMenu()
001776:0x0029be58:	movetm	parent, #return
001777:0x0029be68:	call	
001777:0x0029be78:	release	parent
001777:0x0029be80:	jump	0x29bee0
001781:0x0029be88:	new	m_LoginQueue, LoginQueueStatic
001782:0x0029bea8:	ncalli	DayZGame.GetUIManager()
001782:0x0029beb0:	movefm	[0xb5c1ab38], m_LoginQueue
001782:0x0029bec0:	movec	[0xb5c1ab60], null
001782:0x0029bed0:	ncalli	UIManager.ShowScriptedMenu([0xb5c1ab38], [0xb5c1ab60])
001785:0x0029bee0:	cmpcm	m_LoginQueue, null
001785:0x0029bef0:	beq	0x29bf68
001787:0x0029bef8:	movefm	[0xb5b3a830], m_LoginQueue
001787:0x0029bf08:	call	
001791:0x0029bf18:	movefm	@c00, m_LoginQueue
001791:0x0029bf28:	icall	CastTo(loginQueue, @c00)
001791:0x0029bf38:	cmpi	#return, _i0
001791:0x0029bf48:	beq	0x29bf60
001793:0x0029bf50:	call	
001793:0x0029bf60:	release	loginQueue
001793:0x0029bf68:	rts
DayZGame::OnLoginTimeEvent()
001803:0x0029bfd8:	call	
001805:0x0029bfe8:	ncalli	DayZGame.GetUserManager()
001805:0x0029bff0:	ncalli	BiosUserManager.GetUserDatabaseIdAsync()
001807:0x0029bff8:	move	m_LoginTime, loginTime
001810:0x0029c008:	cmpi	m_LoginTime, _i0
001810:0x0029c018:	ble	0x29c1c8
001812:0x0029c020:	cmpcm	m_LoginTimeScreen, null
001812:0x0029c030:	bne	0x29c108
001814:0x0029c038:	ncalli	DayZGame.GetUIManager()
001814:0x0029c040:	call	
001816:0x0029c050:	ncalli	DayZGame.GetMission()
001816:0x0029c058:	cmpc	#return, null
001816:0x0029c068:	beq	0x29c0b0
001818:0x0029c070:	ncalli	DayZGame.GetUIManager()
001818:0x0029c078:	ncalli	UIManager.GetMenu()
001818:0x0029c080:	movetm	parent, #return
001819:0x0029c090:	call	
001819:0x0029c0a0:	release	parent
001819:0x0029c0a8:	jump	0x29c108
001823:0x0029c0b0:	new	m_LoginTimeScreen, LoginTimeStatic
001824:0x0029c0d0:	ncalli	DayZGame.GetUIManager()
001824:0x0029c0d8:	movefm	[0xb5c1ab38], m_LoginTimeScreen
001824:0x0029c0e8:	movec	[0xb5c1ab60], null
001824:0x0029c0f8:	ncalli	UIManager.ShowScriptedMenu([0xb5c1ab38], [0xb5c1ab60])
001828:0x0029c108:	move	time, m_LoginTime
001828:0x0029c118:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
001828:0x0029c128:	call	
001829:0x0029c138:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
001829:0x0029c148:	call	
001831:0x0029c158:	call	
001831:0x0029c168:	movec	@c00, this
001831:0x0029c178:	icall	SetInstance([0xb5d99fd8], @c00)
001831:0x0029c188:	icall	
001831:0x0029c1c0:	release	#return
001831:0x0029c1c8:	rts
DayZGame::LoginTimeCountdown()
001840:0x0029c1d0:	cmpcm	m_LoginTimeScreen, null
001840:0x0029c1e0:	beq	0x29c260
001842:0x0029c1e8:	cmpi	m_LoginTime, _i0
001842:0x0029c1f8:	ble	0x29c250
001844:0x0029c200:	move	time, m_LoginTime
001844:0x0029c210:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
001844:0x0029c220:	call	
001845:0x0029c230:	move	@m00, m_LoginTime
001845:0x0029c240:	dec	m_LoginTime
001845:0x0029c248:	jump	0x29c260
001850:0x0029c250:	call	
001850:0x0029c260:	rts
DayZGame::OnRespawnEvent()
001859:0x0029c2f8:	cmpi	time, _i0
001859:0x0029c308:	ble	0x29c468
001861:0x0029c310:	move	m_LoginTime, time
001862:0x0029c320:	cmpcm	m_LoginTimeScreen, null
001862:0x0029c330:	bne	0x29c388
001864:0x0029c338:	ncalli	DayZGame.GetUIManager()
001864:0x0029c340:	call	
001866:0x0029c350:	ncalli	DayZGame.GetUIManager()
001866:0x0029c358:	ncalli	UIManager.GetMenu()
001866:0x0029c360:	movetm	parent, #return
001867:0x0029c370:	call	
001867:0x0029c380:	release	parent
001870:0x0029c388:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
001870:0x0029c398:	call	
001871:0x0029c3a8:	move	time, m_LoginTime
001871:0x0029c3b8:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
001871:0x0029c3c8:	call	
001872:0x0029c3d8:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
001872:0x0029c3e8:	call	
001874:0x0029c3f8:	call	
001874:0x0029c408:	movec	@c00, this
001874:0x0029c418:	icall	SetInstance([0xb5d9a2d0], @c00)
001874:0x0029c428:	icall	
001874:0x0029c460:	release	#return
001876:0x0029c468:	ncalli	DayZGame.GetPlayer()
001876:0x0029c470:	cmpm	#return, null
001876:0x0029c480:	beq	0x29c4a0
001877:0x0029c488:	ncalli	DayZGame.GetPlayer()
001877:0x0029c490:	call	
001878:0x0029c4a0:	call	GetRequester(_T(PPERequester_DeathDarkening))
001878:0x0029c4b0:	new	@c00, Param1<float>
001878:0x0029c4d8:	pushc	@c00
001878:0x0029c4e0:	call	
001878:0x0029c4f0:	popc	@c00
001878:0x0029c4f8:	release	@c00
001878:0x0029c500:	release	#return
001878:0x0029c508:	rts
DayZGame::OnPreloadEvent()
001885:0x0029c510:	cmpcm	m_LoginTimeScreen, null
001885:0x0029c520:	beq	0x29c570
001885:0x0029c528:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
001885:0x0029c538:	call	
001885:0x0029c548:	cmpi	#return, _i0
001885:0x0029c558:	bne	0x29c570
001886:0x0029c560:	call	
001889:0x0029c570:	call	
001889:0x0029c580:	rts
DayZGame::StoreLoginDataPrepare()
001896:0x0029c5b0:	new	ctx, ScriptReadWriteContext
001899:0x0029c5d0:	call	
001899:0x0029c5e0:	ncalli	ScriptReadWriteContext.GetWriteContext()
001899:0x0029c5e8:	call	
001899:0x0029c5f8:	release	#return
001900:0x0029c600:	ncalli	ScriptReadWriteContext.GetWriteContext()
001900:0x0029c608:	ncalli	DayZGame.StoreLoginData(#return)
001900:0x0029c618:	release	ctx
001900:0x0029c620:	rts
DayZGame::EnterLoginQueue()
001906:0x0029c628:	ncalli	DayZGame.GetUIManager()
001906:0x0029c630:	movefm	[0xb5c1aac0], parent
001906:0x0029c640:	ncalli	UIManager.EnterScriptedMenu(MENU_LOGIN_QUEUE, [0xb5c1aac0])
001906:0x0029c650:	icall	SafeCastType([0xb5b3a830], @c01, #return)
001906:0x0029c668:	movetm	m_LoginQueue, @c01
001906:0x0029c678:	rts
DayZGame::EnterLoginTime()
001912:0x0029c680:	ncalli	DayZGame.GetUIManager()
001912:0x0029c688:	movefm	[0xb5c1aac0], parent
001912:0x0029c698:	ncalli	UIManager.EnterScriptedMenu(MENU_LOGIN_TIME, [0xb5c1aac0])
001912:0x0029c6a8:	icall	SafeCastType([0xb5b3a9f8], @c01, #return)
001912:0x0029c6c0:	movetm	m_LoginTimeScreen, @c01
001912:0x0029c6d0:	rts
DayZGame::OnMPConnectionLostEvent()
001918:0x0029c6d8:	cmpi	duration, _i0
001918:0x0029c6e8:	blt	0x29c710
001919:0x0029c6f0:	call	
001919:0x0029c708:	jump	0x29c728
001921:0x0029c710:	call	
001921:0x0029c728:	rts
DayZGame::LoadProgressUpdate()
001940:0x0029c758:	move	#switch, progressState
001940:0x0029c768:	imove	@m00, 0x000000
001940:0x0029c778:	cmpi	@m00, #switch
001940:0x0029c788:	bne	0x29c870
001946:0x0029c790:	ncalli	DayZGame.GetUIManager()
001946:0x0029c798:	ncalli	UIManager.ScreenFadeOut(_f0.000000)
001948:0x0029c7a8:	movefm	[0xb5b3e538], m_loading
001948:0x0029c7b8:	call	
001949:0x0029c7c8:	movefm	[0xb5b3e538], m_loading
001949:0x0029c7d8:	call	
001950:0x0029c7e8:	movefm	[0xb5b3e538], m_loading
001950:0x0029c7f8:	movec	@c00, [0xb5b3e538]
001950:0x0029c808:	cmpcm	m_HintPanel, null
001950:0x0029c818:	beq	0x29c860
001951:0x0029c820:	movefm	[0xb5b3e538], m_loading
001951:0x0029c830:	movec	@c00, [0xb5b3e538]
001951:0x0029c840:	movefm	[0xb5b38ac0], m_HintPanel
001951:0x0029c850:	call	
001954:0x0029c860:	jump	0x29c970
001954:0x0029c868:	jump	0x29c898
001954:0x0029c870:	imove	@m00, 0x000001
001954:0x0029c880:	cmpi	@m00, #switch
001954:0x0029c890:	bne	0x29c8c8
001958:0x0029c898:	movefm	[0xb5b3e538], m_loading
001958:0x0029c8a8:	call	
001960:0x0029c8b8:	jump	0x29c970
001960:0x0029c8c0:	jump	0x29c8f0
001960:0x0029c8c8:	imove	@m00, 0x000002
001960:0x0029c8d8:	cmpi	@m00, #switch
001960:0x0029c8e8:	bne	0x29c920
001964:0x0029c8f0:	movefm	[0xb5b3e538], m_loading
001964:0x0029c900:	call	
001967:0x0029c910:	jump	0x29c970
001967:0x0029c918:	jump	0x29c948
001967:0x0029c920:	imove	@m00, 0x000003
001967:0x0029c930:	cmpi	@m00, #switch
001967:0x0029c940:	bne	0x29c970
001971:0x0029c948:	movefm	[0xb5b3e538], m_loading
001971:0x0029c958:	call	
001973:0x0029c968:	jump	0x29c970
001973:0x0029c970:	rts
DayZGame::OnAfterCreate()
001981:0x0029c978:	icall	Randomize(_i-1)
001981:0x0029c988:	rts
DayZGame::OnInitialize()
001997:0x0029ca80:	call	PreloadParticles()
001999:0x0029ca90:	call	
002000:0x0029caa0:	call	
002000:0x0029cab0:	call	
002002:0x0029cac0:	call	
002003:0x0029cad0:	new	m_Visited, array<string>
002004:0x0029caf0:	movefm	[0xb5bd96f8], m_Visited
002004:0x0029cb00:	ncalli	DayZGame.GetProfileStringList(_s'SB_Visited', [0xb5bd96f8])
002006:0x0029cb10:	call	
002006:0x0029cb20:	move	@m00, #return
002006:0x0029cb30:	cmpi	@m00, UNDEFINED
002006:0x0029cb40:	bne	0x29cc80
002010:0x0029cb48:	icall	GetCLIParam(_s'join', param)
002010:0x0029cb58:	cmpi	#return, _i0
002010:0x0029cb68:	beq	0x29cb98
002012:0x0029cb70:	call	
002014:0x0029cb80:	call	
002014:0x0029cb90:	jump	0x29cc68
002017:0x0029cb98:	icall	GetCLIParam(_s'connect', param)
002017:0x0029cba8:	cmpi	#return, _i0
002017:0x0029cbb8:	beq	0x29cbd8
002019:0x0029cbc0:	call	
002019:0x0029cbd0:	jump	0x29cc68
002021:0x0029cbd8:	icall	GetCLIParam(_s'mission', param)
002021:0x0029cbe8:	cmpi	#return, _i0
002021:0x0029cbf8:	beq	0x29cc18
002023:0x0029cc00:	call	
002023:0x0029cc10:	jump	0x29cc68
002025:0x0029cc18:	icall	GetCLIParam(_s'party', param)
002025:0x0029cc28:	cmpi	#return, _i0
002025:0x0029cc38:	beq	0x29cc58
002027:0x0029cc40:	call	
002027:0x0029cc50:	jump	0x29cc68
002031:0x0029cc58:	call	
002034:0x0029cc68:	imove	#return, 0x000001
002034:0x0029cc78:	rts
002037:0x0029cc80:	imove	#return, 0x000000
002037:0x0029cc90:	rts
002037:0x0029cc98:	rts
DayZGame::InitNotifications()
002042:0x0029cca0:	call	InitInstance()
002043:0x0029ccb0:	new	m_Notifications, NotificationUI
002043:0x0029ccd0:	rts
DayZGame::GetDatabaseID()
002061:0x0029ccd8:	moves	#return, m_DatabaseID
002061:0x0029cce8:	rts
002061:0x0029ccf0:	rts
DayZGame::SetDatabaseID()
002066:0x0029ccf8:	moves	m_DatabaseID, id
002067:0x0029cd08:	ncalli	DayZGame.GetUIManager()
002067:0x0029cd10:	ncalli	UIManager.GetMenu()
002067:0x0029cd18:	cmpm	#return, null
002067:0x0029cd28:	beq	0x29cd50
002069:0x0029cd30:	ncalli	DayZGame.GetUIManager()
002069:0x0029cd38:	ncalli	UIManager.GetMenu()
002069:0x0029cd40:	call	
002069:0x0029cd50:	rts
DayZGame::CreateTitleScreen()
002075:0x0029ce50:	call	
002076:0x0029ce60:	ncalli	DayZGame.GetWorkspace()
002076:0x0029ce68:	ncall	CreateWidgets(#return, _s'gui/layouts/xbox/day_z_title_screen.layout', _c0, _i1)
002076:0x0029ce80:	movetm	m_IntroMenu, #return
002077:0x0029ce90:	movefm	[0xd31345a8], m_IntroMenu
002077:0x0029cea0:	ncalli	Widget.FindAnyWidget(_s'InputPromptText')
002077:0x0029ceb0:	icall	SafeCastType([0xd3135258], @c01, #return)
002077:0x0029cec8:	movetm	text_widget, @c01
002078:0x0029ced8:	movefm	[0xd31345a8], m_IntroMenu
002078:0x0029cee8:	ncalli	Widget.FindAnyWidget(_s'notification_root')
002078:0x0029cef8:	ncalli	Widget.Show(false, _i1)
002079:0x0029cf08:	cmpcm	text_widget, null
002079:0x0029cf18:	beq	0x29cf40
002081:0x0029cf20:	icall	TranslateString(_s'#console_start_game')
002081:0x0029cf30:	moves	text, #return
002081:0x0029cf40:	release	text_widget
002081:0x0029cf48:	rts
DayZGame::DeleteTitleScreen()
002115:0x0029cf50:	cmpcm	m_IntroMenu, null
002115:0x0029cf60:	beq	0x29cf70
002117:0x0029cf68:	delete	m_IntroMenu
002117:0x0029cf70:	rts
DayZGame::ShouldShowControllerDisconnect()
002123:0x0029cf78:	move	#return, m_ShouldShowControllerDisconnect
002123:0x0029cf88:	rts
002123:0x0029cf90:	rts
DayZGame::JoinLaunch()
002142:0x0029cf98:	call	
002143:0x0029cfa8:	call	
002143:0x0029cfb8:	rts
DayZGame::ConnectLaunch()
002157:0x0029cfe8:	ncalli	DayZGame.GetUserManager()
002157:0x0029cff0:	movetm	user_manager, #return
002158:0x0029d000:	ncalli	BiosUserManager.GetTitleInitiator()
002158:0x0029d008:	cmpm	#return, null
002158:0x0029d018:	beq	0x29d038
002160:0x0029d020:	ncalli	BiosUserManager.GetTitleInitiator()
002160:0x0029d028:	call	
002163:0x0029d038:	call	
002164:0x0029d048:	call	
002172:0x0029d058:	call	
002172:0x0029d068:	release	user_manager
002172:0x0029d070:	rts
DayZGame::PartyLaunch()
002178:0x0029d0c8:	call	
002179:0x0029d0d8:	call	
002180:0x0029d0e8:	ncall	GetGame()
002180:0x0029d0f0:	ncalli	CGame.GetUserManager()
002180:0x0029d0f8:	movetm	user_manager, #return
002183:0x0029d108:	icall	GetCLIParam(_s'party', param)
002183:0x0029d118:	cmpi	#return, _i0
002183:0x0029d128:	beq	0x29d158
002185:0x0029d130:	ncalli	BiosUserManager.ParsePartyAsync(param)
002186:0x0029d140:	ncalli	DayZGame.GetMainMenuWorld()
002186:0x0029d148:	ncalli	DayZGame.StartRandomCutscene(#return)
002186:0x0029d158:	release	user_manager
002186:0x0029d160:	rts
DayZGame::MainMenuLaunch()
002193:0x0029d190:	ncalli	DayZGame.GetUserManager()
002193:0x0029d198:	movetm	user_manager, #return
002194:0x0029d1a8:	cmpcm	user_manager, null
002194:0x0029d1b8:	beq	0x29d1f8
002196:0x0029d1c0:	ncalli	BiosUserManager.GetTitleInitiator()
002196:0x0029d1c8:	cmpm	#return, null
002196:0x0029d1d8:	beq	0x29d1f8
002198:0x0029d1e0:	ncalli	BiosUserManager.GetTitleInitiator()
002198:0x0029d1e8:	call	
002203:0x0029d1f8:	call	
002204:0x0029d208:	call	
002205:0x0029d218:	ncalli	DayZGame.GetMainMenuWorld()
002205:0x0029d220:	ncalli	DayZGame.StartRandomCutscene(#return)
002206:0x0029d230:	call	
002206:0x0029d240:	release	user_manager
002206:0x0029d248:	rts
DayZGame::MissionLaunch()
002211:0x0029d2a0:	ncalli	DayZGame.GetUserManager()
002211:0x0029d2a8:	movetm	user_manager, #return
002212:0x0029d2b8:	cmpcm	user_manager, null
002212:0x0029d2c8:	beq	0x29d308
002214:0x0029d2d0:	ncalli	BiosUserManager.GetTitleInitiator()
002214:0x0029d2d8:	cmpm	#return, null
002214:0x0029d2e8:	beq	0x29d308
002216:0x0029d2f0:	ncalli	BiosUserManager.GetTitleInitiator()
002216:0x0029d2f8:	call	
002220:0x0029d308:	call	
002221:0x0029d318:	call	
002235:0x0029d328:	icall	GetCLIParam(_s'mission', mission)
002236:0x0029d338:	ncalli	DayZGame.PlayMission(mission)
002236:0x0029d348:	release	user_manager
002236:0x0029d350:	rts
DayZGame::SelectUser()
002241:0x0029d400:	ncalli	DayZGame.GetUserManager()
002241:0x0029d408:	movetm	user_manager, #return
002242:0x0029d418:	cmpcm	user_manager, null
002242:0x0029d428:	beq	0x29d6c0
002245:0x0029d430:	cmpi	gamepad, _i-1
002245:0x0029d440:	ble	0x29d4a8
002247:0x0029d448:	ncalli	DayZGame.GetInput()
002247:0x0029d450:	icall	
002252:0x0029d460:	ncall	GetGame()
002252:0x0029d468:	ncalli	CGame.GetInput()
002252:0x0029d470:	ncalli	Input.IdentifyGamepad(_i-1)
002253:0x0029d480:	ncalli	DayZGame.GetInput()
002253:0x0029d488:	ncalli	Input.SelectActiveGamepad(gamepad)
002254:0x0029d498:	call	
002273:0x0029d4a8:	cmpcm	selected_user, null
002273:0x0029d4b8:	bne	0x29d4d8
002274:0x0029d4c0:	ncalli	BiosUserManager.GetSelectedUser()
002274:0x0029d4c8:	movetm	selected_user, #return
002276:0x0029d4d8:	cmpcm	selected_user, null
002276:0x0029d4e8:	bne	0x29d510
002278:0x0029d4f0:	ncalli	BiosUserManager.PickUserAsync()
002279:0x0029d4f8:	release	selected_user
002279:0x0029d500:	release	user_manager
002279:0x0029d508:	rts
002282:0x0029d510:	call	
002284:0x0029d520:	call	
002284:0x0029d530:	move	#switch, #return
002284:0x0029d540:	imove	@m00, 0x000004
002284:0x0029d550:	cmpi	@m00, #switch
002284:0x0029d560:	bne	0x29d588
002288:0x0029d568:	call	
002289:0x0029d578:	jump	0x29d6a8
002289:0x0029d580:	jump	0x29d5b0
002289:0x0029d588:	imove	@m00, 0x000007
002289:0x0029d598:	cmpi	@m00, #switch
002289:0x0029d5a8:	bne	0x29d5d0
002293:0x0029d5b0:	call	
002294:0x0029d5c0:	jump	0x29d6a8
002294:0x0029d5c8:	jump	0x29d5f8
002294:0x0029d5d0:	imove	@m00, 0x000001
002294:0x0029d5e0:	cmpi	@m00, #switch
002294:0x0029d5f0:	bne	0x29d618
002298:0x0029d5f8:	call	
002299:0x0029d608:	jump	0x29d6a8
002299:0x0029d610:	jump	0x29d640
002299:0x0029d618:	imove	@m00, 0x00000a
002299:0x0029d628:	cmpi	@m00, #switch
002299:0x0029d638:	bne	0x29d660
002303:0x0029d640:	call	
002304:0x0029d650:	jump	0x29d6a8
002304:0x0029d658:	jump	0x29d688
002304:0x0029d660:	imove	@m00, 0x00000d
002304:0x0029d670:	cmpi	@m00, #switch
002304:0x0029d680:	bne	0x29d6a0
002308:0x0029d688:	call	
002309:0x0029d698:	jump	0x29d6a8
002312:0x0029d6a0:	jump	0x29d6a8
002315:0x0029d6a8:	call	
002315:0x0029d6b8:	release	selected_user
002315:0x0029d6c0:	release	user_manager
002315:0x0029d6c8:	rts
DayZGame::SetPreviousGamepad()
002321:0x0029d6d0:	move	m_PreviousGamepad, gamepad
002321:0x0029d6e0:	rts
DayZGame::GetPreviousGamepad()
002326:0x0029d6e8:	move	#return, m_PreviousGamepad
002326:0x0029d6f8:	rts
002326:0x0029d700:	rts
DayZGame::GamepadCheck()
002332:0x0029d708:	ncalli	DayZGame.GetInput()
002332:0x0029d710:	ncalli	Input.IsActiveGamepadSelected()
002332:0x0029d718:	cmpi	#return, _i0
002332:0x0029d728:	beq	0x29d758
002335:0x0029d730:	call	
002336:0x0029d740:	call	
002336:0x0029d750:	jump	0x29d758
002336:0x0029d758:	rts
DayZGame::SelectGamepad()
002373:0x0029d800:	call	
002374:0x0029d810:	ncalli	DayZGame.GetUserManager()
002374:0x0029d818:	movetm	user_manager, #return
002376:0x0029d828:	cmpcm	user_manager, null
002376:0x0029d838:	beq	0x29d908
002378:0x0029d840:	ncalli	BiosUserManager.GetSelectedUser()
002378:0x0029d848:	movetm	selected_user, #return
002379:0x0029d858:	cmpcm	selected_user, null
002379:0x0029d868:	beq	0x29d8b8
002381:0x0029d870:	call	SetBiosUser(selected_user)
002382:0x0029d880:	ncalli	BiosUser.GetName()
002382:0x0029d888:	ncalli	DayZGame.SetPlayerName(#return)
002383:0x0029d898:	call	GetUserFOVFromConfig()
002383:0x0029d8a8:	call	
002390:0x0029d8b8:	ncalli	DayZGame.GetUIManager()
002390:0x0029d8c0:	ncalli	UIManager.GetMenu()
002390:0x0029d8c8:	cmpm	#return, null
002390:0x0029d8d8:	beq	0x29d900
002392:0x0029d8e0:	ncalli	DayZGame.GetUIManager()
002392:0x0029d8e8:	ncalli	UIManager.GetMenu()
002392:0x0029d8f0:	call	
002392:0x0029d900:	release	selected_user
002396:0x0029d908:	call	
002396:0x0029d918:	move	#switch, #return
002396:0x0029d928:	imove	@m00, 0x000006
002396:0x0029d938:	cmpi	@m00, #switch
002396:0x0029d948:	bne	0x29d980
002400:0x0029d950:	call	
002401:0x0029d960:	call	LoadMPPrivilege()
002402:0x0029d970:	jump	0x29db88
002402:0x0029d978:	jump	0x29d9a8
002402:0x0029d980:	imove	@m00, 0x000009
002402:0x0029d990:	cmpi	@m00, #switch
002402:0x0029d9a0:	bne	0x29da20
002406:0x0029d9a8:	call	
002407:0x0029d9b8:	call	
002408:0x0029d9c8:	ncalli	DayZGame.GetUIManager()
002408:0x0029d9d0:	pushc	#return
002408:0x0029d9d8:	ncalli	DayZGame.GetUIManager()
002408:0x0029d9e0:	movec	@c01, #return
002408:0x0029d9f0:	popc	#return
002408:0x0029d9f8:	ncalli	UIManager.GetMenu()
002408:0x0029da00:	ncalli	UIManager.EnterScriptedMenu(MENU_SERVER_BROWSER, #return)
002409:0x0029da10:	jump	0x29db88
002409:0x0029da18:	jump	0x29da48
002409:0x0029da20:	imove	@m00, 0x00000b
002409:0x0029da30:	cmpi	@m00, #switch
002409:0x0029da40:	bne	0x29da78
002413:0x0029da48:	call	
002414:0x0029da58:	call	LoadMPPrivilege()
002415:0x0029da68:	jump	0x29db88
002415:0x0029da70:	jump	0x29daa0
002415:0x0029da78:	imove	@m00, 0x000003
002415:0x0029da88:	cmpi	@m00, #switch
002415:0x0029da98:	bne	0x29db18
002419:0x0029daa0:	call	
002420:0x0029dab0:	call	
002421:0x0029dac0:	ncalli	DayZGame.GetUIManager()
002421:0x0029dac8:	pushc	#return
002421:0x0029dad0:	ncalli	DayZGame.GetUIManager()
002421:0x0029dad8:	movec	@c01, #return
002421:0x0029dae8:	popc	#return
002421:0x0029daf0:	ncalli	UIManager.GetMenu()
002421:0x0029daf8:	ncalli	UIManager.EnterScriptedMenu(MENU_MAIN, #return)
002422:0x0029db08:	jump	0x29db88
002422:0x0029db10:	jump	0x29db40
002422:0x0029db18:	imove	@m00, 0x00000e
002422:0x0029db28:	cmpi	@m00, #switch
002422:0x0029db38:	bne	0x29db88
002426:0x0029db40:	call	
002427:0x0029db50:	call	
002429:0x0029db60:	icall	GetCLIParam(_s'mission', mission)
002430:0x0029db70:	ncalli	DayZGame.PlayMission(mission)
002431:0x0029db80:	jump	0x29db88
002431:0x0029db88:	release	user_manager
002431:0x0029db90:	rts
DayZGame::TryConnect()
002438:0x0029dc10:	call	
002438:0x0029dc20:	move	@m00, #return
002438:0x0029dc30:	cmpi	@m00, JOIN_CONTROLLER_SELECT
002438:0x0029dc40:	bne	0x29dc70
002440:0x0029dc48:	call	
002441:0x0029dc58:	call	GetSession()
002441:0x0029dc68:	jump	0x29dec0
002445:0x0029dc70:	call	
002445:0x0029dc80:	move	@m00, #return
002445:0x0029dc90:	cmpi	@m00, CONNECTING
002445:0x0029dca0:	beq	0x29ddd0
002447:0x0029dca8:	call	
002447:0x0029dcb8:	move	#switch, #return
002447:0x0029dcc8:	imove	@m00, 0x00000c
002447:0x0029dcd8:	cmpi	@m00, #switch
002447:0x0029dce8:	bne	0x29dd20
002451:0x0029dcf0:	call	
002452:0x0029dd00:	call	
002453:0x0029dd10:	jump	0x29ddc8
002453:0x0029dd18:	jump	0x29dd48
002453:0x0029dd20:	imove	@m00, 0x000008
002453:0x0029dd30:	cmpi	@m00, #switch
002453:0x0029dd40:	bne	0x29dd78
002457:0x0029dd48:	call	
002458:0x0029dd58:	call	
002459:0x0029dd68:	jump	0x29ddc8
002459:0x0029dd70:	jump	0x29dda0
002459:0x0029dd78:	imove	@m00, 0x000002
002459:0x0029dd88:	cmpi	@m00, #switch
002459:0x0029dd98:	bne	0x29ddc8
002463:0x0029dda0:	call	
002464:0x0029ddb0:	call	
002465:0x0029ddc0:	jump	0x29ddc8
002465:0x0029ddc8:	jump	0x29dec0
002473:0x0029ddd0:	icall	
002473:0x0029dde0:	cmpi	#return, _i0
002473:0x0029ddf0:	beq	0x29de98
002475:0x0029ddf8:	cmps	m_ConnectAddress, address
002475:0x0029de08:	bne	0x29de48
002475:0x0029de10:	cmpi	m_ConnectPort, port
002475:0x0029de20:	bne	0x29de48
002476:0x0029de28:	icall	ThrowError(_i3, ALREADY_CONNECTING_THIS, _s'')
002476:0x0029de40:	jump	0x29de90
002478:0x0029de48:	icall	Format(_s'%1:%2', address, port, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
002478:0x0029de78:	icall	ThrowError(_i3, ALREADY_CONNECTING, #return)
002478:0x0029de90:	jump	0x29dec0
002482:0x0029de98:	ncalli	DayZGame.DisconnectSessionForce()
002483:0x0029dea0:	call	
002484:0x0029deb0:	call	
002484:0x0029dec0:	rts
DayZGame::GetLastVisitedServer()
002492:0x0029df18:	cmpcm	m_Visited, null
002492:0x0029df28:	beq	0x29e0d0
002494:0x0029df30:	movefm	[0xd31562c0], m_Visited
002494:0x0029df40:	ncalli	array<string>.Count()
002494:0x0029df48:	move	@m00, #return
002494:0x0029df58:	cmpi	@m00, _i0
002494:0x0029df68:	ble	0x29e0d0
002496:0x0029df70:	movefm	[0xd31562c0], m_Visited
002496:0x0029df80:	ncalli	array<string>.Count()
002496:0x0029df88:	subi	@m01, #return, _i1
002496:0x0029df98:	move	@m00, @m01
002496:0x0029dfa8:	movefm	[0xd31562c0], m_Visited
002496:0x0029dfb8:	icall	
002496:0x0029dfc8:	moves	uid, #return
002497:0x0029dfd8:	new	output, array<string>
002498:0x0029dff8:	call	Split(uid, _s':', output)
002498:0x0029e010:	moves	uid, value
002498:0x0029e020:	movem	output, output
002498:0x0029e030:	release	output
002499:0x0029e038:	icall	
002499:0x0029e048:	moves	ip, #return
002500:0x0029e058:	icall	
002500:0x0029e068:	ncall	ToInt(#return)
002500:0x0029e078:	move	port, #return
002501:0x0029e088:	imove	#return, 0x000001
002501:0x0029e098:	release	output
002501:0x0029e0a0:	moves	ip, ip
002501:0x0029e0b0:	move	port, port
002501:0x0029e0c0:	rts
002501:0x0029e0c8:	release	output
002504:0x0029e0d0:	imove	#return, 0x000000
002504:0x0029e0e0:	moves	ip, ip
002504:0x0029e0f0:	move	port, port
002504:0x0029e100:	rts
002504:0x0029e108:	moves	ip, ip
002504:0x0029e118:	move	port, port
002504:0x0029e128:	rts
DayZGame::AddVisitedServer()
002509:0x0029e180:	adds	@s01, ip, _s':'
002509:0x0029e190:	moves	@s00, @s01
002509:0x0029e1a0:	icall	ToString(port)
002509:0x0029e1b0:	adds	uid, @s00, #return
002510:0x0029e1c0:	cmpcm	m_Visited, null
002510:0x0029e1d0:	beq	0x29e360
002512:0x0029e1d8:	movefm	[0xd31562c0], m_Visited
002512:0x0029e1e8:	icall	
002512:0x0029e1f8:	move	pos, #return
002514:0x0029e208:	cmpi	pos, _i0
002514:0x0029e218:	bge	0x29e2a8
002516:0x0029e220:	movefm	[0xd31562c0], m_Visited
002516:0x0029e230:	ncalli	array<string>.Count()
002516:0x0029e238:	move	@m00, #return
002516:0x0029e248:	cmpi	@m00, MAX_VISITED
002516:0x0029e258:	bne	0x29e280
002517:0x0029e260:	movefm	[0xd31562c0], m_Visited
002517:0x0029e270:	ncalli	array<string>.Remove(_i0)
002518:0x0029e280:	movefm	[0xd31562c0], m_Visited
002518:0x0029e290:	icall	
002518:0x0029e2a0:	jump	0x29e338
002523:0x0029e2a8:	movefm	[0xd31562c0], m_Visited
002523:0x0029e2b8:	ncalli	array<string>.Count()
002523:0x0029e2c0:	subi	@m01, #return, _i1
002523:0x0029e2d0:	move	@m00, @m01
002523:0x0029e2e0:	cmpi	pos, @m00
002523:0x0029e2f0:	beq	0x29e338
002525:0x0029e2f8:	movefm	[0xd31562c0], m_Visited
002525:0x0029e308:	ncalli	array<string>.Remove(pos)
002526:0x0029e318:	movefm	[0xd31562c0], m_Visited
002526:0x0029e328:	icall	
002529:0x0029e338:	movefm	[0xb5bd97c0], m_Visited
002529:0x0029e348:	ncalli	DayZGame.SetProfileStringList(_s'SB_Visited', [0xb5bd97c0])
002530:0x0029e358:	ncalli	DayZGame.SaveProfile()
002530:0x0029e360:	rts
DayZGame::IsVisited()
002536:0x0029e3b8:	adds	@s01, ip, _s':'
002536:0x0029e3c8:	moves	@s00, @s01
002536:0x0029e3d8:	icall	ToString(port)
002536:0x0029e3e8:	adds	uid, @s00, #return
002537:0x0029e3f8:	movefm	[0xd31562c0], m_Visited
002537:0x0029e408:	icall	
002537:0x0029e418:	move	index, #return
002538:0x0029e428:	cmpi	index, _i0
002538:0x0029e438:	blt	0x29e458
002538:0x0029e440:	imove	#return, 0x000001
002538:0x0029e450:	jump	0x29e468
002538:0x0029e458:	imove	#return, 0x000000
002538:0x0029e468:	rts
002538:0x0029e470:	rts
DayZGame::RefreshCurrentServerInfo()
002545:0x0029e4c8:	icall	
002545:0x0029e4d8:	cmpi	#return, _i0
002545:0x0029e4e8:	beq	0x29e510
002547:0x0029e4f0:	moves	m_ConnectAddress, addr
002548:0x0029e500:	move	m_ConnectPort, port
002550:0x0029e510:	moves	ip, m_ConnectAddress
002550:0x0029e520:	move	port, m_ConnectPort
002550:0x0029e530:	call	GetCurrentServerInfo(ip, port)
002550:0x0029e548:	rts
DayZGame::Connect#161916()
002555:0x0029e5a0:	call	
002557:0x0029e5b0:	call	
002560:0x0029e5c0:	icall	
002560:0x0029e5d0:	cmpi	#return, _i0
002560:0x0029e5e0:	beq	0x29e620
002562:0x0029e5e8:	cmps	m_ConnectAddress, addr
002562:0x0029e5f8:	bne	0x29e620
002562:0x0029e600:	cmpi	m_ConnectPort, port
002562:0x0029e610:	bne	0x29e620
002563:0x0029e618:	rts
002566:0x0029e620:	ncalli	DayZGame.GetUIManager()
002566:0x0029e628:	ncalli	UIManager.GetMenu()
002566:0x0029e630:	moves	[0xb5bd95e0], m_ConnectAddress
002566:0x0029e640:	move	[0xb5bd9608], m_ConnectPort
002566:0x0029e650:	moves	[0xb5bd9630], m_ConnectPassword
002566:0x0029e660:	ncalli	DayZGame.Connect(#return, [0xb5bd95e0], [0xb5bd9608], [0xb5bd9630])
002566:0x0029e678:	move	@m00, #return
002566:0x0029e688:	cmpi	@m00, _i0
002566:0x0029e698:	beq	0x29e6b0
002567:0x0029e6a0:	call	
002567:0x0029e6b0:	rts
DayZGame::DisconnectSessionScript()
002572:0x0029e6e0:	imove	flags, 0x000028
002573:0x0029e6f0:	cmpi	displayJoinError, _i0
002573:0x0029e700:	beq	0x29e748
002575:0x0029e708:	imove	@m00, 0x000001
002575:0x0029e718:	ori	flags, flags, @m00
002576:0x0029e728:	imove	@m00, 0x000002
002576:0x0029e738:	ori	flags, flags, @m00
002579:0x0029e748:	call	
002579:0x0029e758:	rts
DayZGame::DisconnectSessionEx()
002584:0x0029e760:	andi	@m01, flags, SELECT_USER
002584:0x0029e770:	move	@m00, @m01
002584:0x0029e780:	cmpi	@m00, _i0
002584:0x0029e790:	beq	0x29e7f8
002584:0x0029e798:	call	GetBiosUser()
002584:0x0029e7a8:	cmpcm	#return, null
002584:0x0029e7b8:	beq	0x29e7f8
002586:0x0029e7c0:	ncall	GetGame()
002586:0x0029e7c8:	ncalli	CGame.GetUserManager()
002586:0x0029e7d0:	call	GetBiosUser()
002586:0x0029e7e0:	call	
002586:0x0029e7f0:	release	#return
002586:0x0029e7f8:	release	#return
002589:0x0029e800:	andi	@m01, flags, JOIN_ERROR_ENABLED
002589:0x0029e810:	move	@m00, @m01
002589:0x0029e820:	cmpi	@m00, _i0
002589:0x0029e830:	beq	0x29e8c0
002591:0x0029e838:	andi	@m01, flags, JOIN_ERROR_CHECK
002591:0x0029e848:	move	@m00, @m01
002591:0x0029e858:	cmpi	@m00, _i0
002591:0x0029e868:	beq	0x29e8a8
002591:0x0029e870:	call	
002591:0x0029e880:	move	@m00, #return
002591:0x0029e890:	cmpi	@m00, JOIN
002591:0x0029e8a0:	bne	0x29e8c0
002593:0x0029e8a8:	call	AddNotification(JOIN_FAIL_GET_SESSION, _f6.000000, _s'')
002597:0x0029e8c0:	andi	@m01, flags, IGNORE_WHEN_IN_GAME
002597:0x0029e8d0:	move	@m00, @m01
002597:0x0029e8e0:	cmpi	@m00, _i0
002597:0x0029e8f0:	beq	0x29e938
002597:0x0029e8f8:	call	
002597:0x0029e908:	move	@m00, #return
002597:0x0029e918:	cmpi	@m00, IN_GAME
002597:0x0029e928:	bne	0x29e938
002599:0x0029e930:	rts
002602:0x0029e938:	andi	@m01, flags, CLOSE_MENUS
002602:0x0029e948:	move	@m00, @m01
002602:0x0029e958:	cmpi	@m00, _i0
002602:0x0029e968:	beq	0x29ea00
002602:0x0029e970:	ncall	GetGame()
002602:0x0029e978:	ncalli	CGame.GetUIManager()
002602:0x0029e980:	cmpm	#return, null
002602:0x0029e990:	beq	0x29ea00
002604:0x0029e998:	ncall	GetGame()
002604:0x0029e9a0:	ncalli	CGame.GetUIManager()
002604:0x0029e9a8:	call	
002606:0x0029e9b8:	ncall	GetGame()
002606:0x0029e9c0:	ncalli	CGame.GetUIManager()
002606:0x0029e9c8:	ncalli	UIManager.IsDialogVisible()
002606:0x0029e9d0:	cmpi	#return, _i0
002606:0x0029e9e0:	beq	0x29ea00
002608:0x0029e9e8:	ncall	GetGame()
002608:0x0029e9f0:	ncalli	CGame.GetUIManager()
002608:0x0029e9f8:	ncalli	UIManager.CloseDialog()
002612:0x0029ea00:	ncall	GetGame()
002612:0x0029ea08:	ncalli	CGame.GetMission()
002612:0x0029ea10:	cmpc	#return, null
002612:0x0029ea20:	beq	0x29eb08
002614:0x0029ea28:	call	
002614:0x0029ea38:	move	@m00, #return
002614:0x0029ea48:	cmpi	@m00, MAIN_MENU
002614:0x0029ea58:	beq	0x29eb00
002616:0x0029ea60:	andi	@m01, flags, DISCONNECT_ERROR_ENABLED
002616:0x0029ea70:	move	@m00, @m01
002616:0x0029ea80:	cmpi	@m00, _i0
002616:0x0029ea90:	beq	0x29eab0
002618:0x0029ea98:	call	AddNotification(DISCONNECTED, _f6.000000, _s'')
002621:0x0029eab0:	ncall	GetGame()
002621:0x0029eab8:	ncalli	CGame.GetMission()
002621:0x0029eac0:	call	
002623:0x0029ead0:	call	
002624:0x0029eae0:	call	
002626:0x0029eaf0:	call	
002626:0x0029eb00:	jump	0x29eb18
002631:0x0029eb08:	call	
002634:0x0029eb18:	andi	@m01, flags, ALWAYS_FORCE
002634:0x0029eb28:	move	@m00, @m01
002634:0x0029eb38:	cmpi	@m00, _i0
002634:0x0029eb48:	beq	0x29eb58
002636:0x0029eb50:	ncalli	DayZGame.DisconnectSessionForce()
002636:0x0029eb58:	rts
DayZGame::ConnectFromServerBrowser()
002642:0x0029eb60:	moves	m_ConnectAddress, ip
002643:0x0029eb70:	move	m_ConnectPort, port
002644:0x0029eb80:	moves	m_ConnectPassword, password
002645:0x0029eb90:	imove	m_ConnectFromJoin, 0x000000
002646:0x0029eba0:	call	LoadMPPrivilege()
002646:0x0029ebb0:	rts
DayZGame::ConnectFromJoin()
002651:0x0029ebb8:	moves	m_ConnectAddress, ip
002652:0x0029ebc8:	move	m_ConnectPort, port
002653:0x0029ebd8:	imove	m_ConnectFromJoin, 0x000001
002654:0x0029ebe8:	call	
002654:0x0029ebf8:	rts
DayZGame::ConnectFromCLI()
002660:0x0029ec78:	icall	GetCLIParam(_s'connect', m_ConnectAddress)
002660:0x0029ec88:	cmpi	#return, _i0
002660:0x0029ec98:	beq	0x29ed00
002662:0x0029eca0:	icall	GetCLIParam(_s'port', port)
002663:0x0029ecb0:	ncall	ToInt(port)
002663:0x0029ecc0:	move	m_ConnectPort, #return
002665:0x0029ecd0:	icall	GetCLIParam(_s'password', m_ConnectPassword)
002667:0x0029ece0:	imove	m_ConnectFromJoin, 0x000000
002668:0x0029ecf0:	call	
002668:0x0029ed00:	rts
DayZGame::IsLeftCtrlDown()
002674:0x0029ed08:	move	#return, m_IsCtrlHolding
002674:0x0029ed18:	rts
002674:0x0029ed20:	rts
DayZGame::OnKeyPress()
002681:0x0029ed50:	cmpi	key, _i29
002681:0x0029ed60:	bne	0x29ed78
002683:0x0029ed68:	imove	m_IsCtrlHolding, 0x000001
002686:0x0029ed78:	cmpi	key, _i56
002686:0x0029ed88:	bne	0x29eda0
002688:0x0029ed90:	imove	m_IsLeftAltHolding, 0x000001
002691:0x0029eda0:	cmpi	key, _i184
002691:0x0029edb0:	bne	0x29edc8
002693:0x0029edb8:	imove	m_IsRightAltHolding, 0x000001
002696:0x0029edc8:	cmpcm	m_keyboard_handler, null
002696:0x0029edd8:	beq	0x29ee20
002698:0x0029ede0:	movetm	w, NULL
002698:0x0029edf0:	movefm	[0xb5b22a10], m_keyboard_handler
002698:0x0029ee00:	call	
002701:0x0029ee20:	ncalli	DayZGame.GetMission()
002701:0x0029ee28:	movec	mission, #return
002702:0x0029ee38:	cmpc	mission, null
002702:0x0029ee48:	beq	0x29ee60
002704:0x0029ee50:	call	
002704:0x0029ee60:	rts
DayZGame::OnKeyRelease()
002719:0x0029ee90:	cmpi	key, _i29
002719:0x0029eea0:	bne	0x29eeb8
002721:0x0029eea8:	imove	m_IsCtrlHolding, 0x000000
002724:0x0029eeb8:	cmpi	key, _i219
002724:0x0029eec8:	bne	0x29eee0
002726:0x0029eed0:	imove	m_IsWinHolding, 0x000000
002729:0x0029eee0:	cmpi	key, _i56
002729:0x0029eef0:	beq	0x29ef10
002729:0x0029eef8:	cmpi	key, _i184
002729:0x0029ef08:	bne	0x29ef20
002731:0x0029ef10:	imove	m_IsLeftAltHolding, 0x000000
002734:0x0029ef20:	cmpi	key, _i184
002734:0x0029ef30:	bne	0x29ef48
002736:0x0029ef38:	imove	m_IsRightAltHolding, 0x000000
002739:0x0029ef48:	cmpcm	m_keyboard_handler, null
002739:0x0029ef58:	beq	0x29efa0
002741:0x0029ef60:	movetm	w, NULL
002741:0x0029ef70:	movefm	[0xb5b22a10], m_keyboard_handler
002741:0x0029ef80:	call	
002744:0x0029efa0:	ncalli	DayZGame.GetMission()
002744:0x0029efa8:	movec	mission, #return
002745:0x0029efb8:	cmpc	mission, null
002745:0x0029efc8:	beq	0x29efe0
002747:0x0029efd0:	call	
002747:0x0029efe0:	rts
DayZGame::OnMouseButtonPress()
002754:0x0029f010:	ncalli	DayZGame.GetMission()
002754:0x0029f018:	movec	mission, #return
002755:0x0029f028:	cmpc	mission, null
002755:0x0029f038:	beq	0x29f050
002757:0x0029f040:	call	
002757:0x0029f050:	rts
DayZGame::OnMouseButtonRelease()
002764:0x0029f080:	ncalli	DayZGame.GetMission()
002764:0x0029f088:	movec	mission, #return
002765:0x0029f098:	cmpc	mission, null
002765:0x0029f0a8:	beq	0x29f0c0
002767:0x0029f0b0:	call	
002767:0x0029f0c0:	rts
DayZGame::OnDeviceReset()
002774:0x0029f0c8:	imove	m_IsCtrlHolding, 0x000000
002775:0x0029f0d8:	imove	m_IsWinHolding, 0x000000
002776:0x0029f0e8:	imove	m_IsLeftAltHolding, 0x000000
002777:0x0029f0f8:	imove	m_IsRightAltHolding, 0x000000
002777:0x0029f108:	rts
DayZGame::GetDeltaT()
002784:0x0029f110:	move	#return, m_DeltaTime
002784:0x0029f120:	rts
002784:0x0029f128:	rts
DayZGame::OnUpdate()
002790:0x0029f1b0:	move	m_DeltaTime, timeslice
002792:0x0029f1c0:	ncalli	DayZGame.GetMission()
002792:0x0029f1c8:	movec	mission, #return
002793:0x0029f1d8:	imove	gameIsRunning, 0x000000
002795:0x0029f1e8:	cmpi	doSim, _i0
002795:0x0029f1f8:	beq	0x29f250
002795:0x0029f200:	cmpc	mission, null
002795:0x0029f210:	beq	0x29f250
002795:0x0029f218:	call	
002795:0x0029f228:	cmpi	#return, _i0
002795:0x0029f238:	bne	0x29f250
002797:0x0029f240:	imove	gameIsRunning, 0x000001
002800:0x0029f250:	cmpi	doSim, _i0
002800:0x0029f260:	beq	0x29f290
002800:0x0029f268:	cmpc	mission, null
002800:0x0029f278:	beq	0x29f290
002802:0x0029f280:	call	
002806:0x0029f290:	call	
002806:0x0029f2a0:	ncalli	ScriptCallQueue.Tick(timeslice)
002806:0x0029f2b0:	release	#return
002807:0x0029f2b8:	call	
002807:0x0029f2c8:	icall	
002807:0x0029f2f8:	release	#return
002808:0x0029f300:	call	
002808:0x0029f310:	call	
002808:0x0029f320:	release	#return
002811:0x0029f328:	cmpi	m_IsConnecting, _i0
002811:0x0029f338:	beq	0x29f350
002812:0x0029f340:	call	
002814:0x0029f350:	cmpcm	m_loading, null
002814:0x0029f360:	beq	0x29f3c8
002814:0x0029f368:	movefm	[0xb5b3e538], m_loading
002814:0x0029f378:	call	
002814:0x0029f388:	cmpi	#return, _i0
002814:0x0029f398:	beq	0x29f3c8
002816:0x0029f3a0:	movefm	[0xb5b3e538], m_loading
002816:0x0029f3b0:	call	
002816:0x0029f3c0:	jump	0x29f500
002818:0x0029f3c8:	cmpcm	m_LoginTimeScreen, null
002818:0x0029f3d8:	beq	0x29f440
002818:0x0029f3e0:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
002818:0x0029f3f0:	call	
002818:0x0029f400:	cmpi	#return, _i0
002818:0x0029f410:	beq	0x29f440
002820:0x0029f418:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
002820:0x0029f428:	call	
002820:0x0029f438:	jump	0x29f500
002824:0x0029f440:	call	
002824:0x0029f450:	ncalli	ScriptCallQueue.Tick(timeslice)
002824:0x0029f460:	release	#return
002825:0x0029f468:	call	
002825:0x0029f478:	icall	
002825:0x0029f4a8:	release	#return
002826:0x0029f4b0:	call	
002826:0x0029f4c0:	call	
002826:0x0029f4d0:	release	#return
002827:0x0029f4d8:	call	
002827:0x0029f4e8:	call	
002827:0x0029f4f8:	release	#return
002830:0x0029f500:	call	Update(timeslice)
002831:0x0029f510:	cmpcm	m_Notifications, null
002831:0x0029f520:	beq	0x29f548
002833:0x0029f528:	movefm	[0xb5b39a50], m_Notifications
002833:0x0029f538:	call	
002855:0x0029f548:	cmpi	gameIsRunning, _i0
002855:0x0029f558:	beq	0x29f5f8
002857:0x0029f560:	call	
002857:0x0029f570:	ncalli	ScriptCallQueue.Tick(timeslice)
002857:0x0029f580:	release	#return
002858:0x0029f588:	call	
002858:0x0029f598:	icall	
002858:0x0029f5c8:	release	#return
002859:0x0029f5d0:	call	
002859:0x0029f5e0:	call	
002859:0x0029f5f0:	release	#return
002859:0x0029f5f8:	rts
DayZGame::OnPostUpdate()
002866:0x0029f650:	ncalli	DayZGame.GetMission()
002866:0x0029f658:	movec	mission, #return
002867:0x0029f668:	imove	gameIsRunning, 0x000000
002869:0x0029f678:	cmpi	doSim, _i0
002869:0x0029f688:	beq	0x29f6e0
002869:0x0029f690:	cmpc	mission, null
002869:0x0029f6a0:	beq	0x29f6e0
002869:0x0029f6a8:	call	
002869:0x0029f6b8:	cmpi	#return, _i0
002869:0x0029f6c8:	bne	0x29f6e0
002871:0x0029f6d0:	imove	gameIsRunning, 0x000001
002874:0x0029f6e0:	call	
002874:0x0029f6f0:	icall	
002874:0x0029f720:	release	#return
002877:0x0029f728:	cmpcm	m_loading, null
002877:0x0029f738:	beq	0x29f780
002877:0x0029f740:	movefm	[0xb5b3e538], m_loading
002877:0x0029f750:	call	
002877:0x0029f760:	cmpi	#return, _i0
002877:0x0029f770:	beq	0x29f780
002877:0x0029f778:	jump	0x29f820
002880:0x0029f780:	cmpcm	m_LoginTimeScreen, null
002880:0x0029f790:	beq	0x29f7d8
002880:0x0029f798:	movefm	[0xb5b3a9f8], m_LoginTimeScreen
002880:0x0029f7a8:	call	
002880:0x0029f7b8:	cmpi	#return, _i0
002880:0x0029f7c8:	beq	0x29f7d8
002880:0x0029f7d0:	jump	0x29f820
002885:0x0029f7d8:	call	
002885:0x0029f7e8:	icall	
002885:0x0029f818:	release	#return
002889:0x0029f820:	cmpi	gameIsRunning, _i0
002889:0x0029f830:	beq	0x29f880
002891:0x0029f838:	call	
002891:0x0029f848:	icall	
002891:0x0029f878:	release	#return
002891:0x0029f880:	rts
Param3<bool,vector,int>::Param3()
//scripts/1_Core/param.c
000096:0x0029fd38:	move	param1, p1
000097:0x0029fd48:	movev	param2, p2
000098:0x0029fd58:	move	param3, p3
000098:0x0029fd68:	rts
Param3<bool,vector,int>::Serialize()
000103:0x0029fd70:	icall	
000103:0x0029fd80:	cmpi	#return, _i0
000103:0x0029fd90:	beq	0x29fe00
000103:0x0029fd98:	icall	
000103:0x0029fda8:	cmpi	#return, _i0
000103:0x0029fdb8:	beq	0x29fe00
000103:0x0029fdc0:	icall	
000103:0x0029fdd0:	cmpi	#return, _i0
000103:0x0029fde0:	beq	0x29fe00
000103:0x0029fde8:	imove	#return, 0x000001
000103:0x0029fdf8:	jump	0x29fe10
000103:0x0029fe00:	imove	#return, 0x000000
000103:0x0029fe10:	rts
000103:0x0029fe18:	rts
Param3<bool,vector,int>::Deserializer()
000108:0x0029fe20:	icall	
000108:0x0029fe30:	cmpi	#return, _i0
000108:0x0029fe40:	beq	0x29feb0
000108:0x0029fe48:	icall	
000108:0x0029fe58:	cmpi	#return, _i0
000108:0x0029fe68:	beq	0x29feb0
000108:0x0029fe70:	icall	
000108:0x0029fe80:	cmpi	#return, _i0
000108:0x0029fe90:	beq	0x29feb0
000108:0x0029fe98:	imove	#return, 0x000001
000108:0x0029fea8:	jump	0x29fec0
000108:0x0029feb0:	imove	#return, 0x000000
000108:0x0029fec0:	rts
000108:0x0029fec8:	rts
Param3<vector,vector,float>::Param3()
000096:0x002a0578:	movev	param1, p1
000097:0x002a0588:	movev	param2, p2
000098:0x002a0598:	move	param3, p3
000098:0x002a05a8:	rts
Param3<vector,vector,float>::Serialize()
000103:0x002a05b0:	icall	
000103:0x002a05c0:	cmpi	#return, _i0
000103:0x002a05d0:	beq	0x2a0640
000103:0x002a05d8:	icall	
000103:0x002a05e8:	cmpi	#return, _i0
000103:0x002a05f8:	beq	0x2a0640
000103:0x002a0600:	icall	
000103:0x002a0610:	cmpi	#return, _i0
000103:0x002a0620:	beq	0x2a0640
000103:0x002a0628:	imove	#return, 0x000001
000103:0x002a0638:	jump	0x2a0650
000103:0x002a0640:	imove	#return, 0x000000
000103:0x002a0650:	rts
000103:0x002a0658:	rts
Param3<vector,vector,float>::Deserializer()
000108:0x002a0660:	icall	
000108:0x002a0670:	cmpi	#return, _i0
000108:0x002a0680:	beq	0x2a06f0
000108:0x002a0688:	icall	
000108:0x002a0698:	cmpi	#return, _i0
000108:0x002a06a8:	beq	0x2a06f0
000108:0x002a06b0:	icall	
000108:0x002a06c0:	cmpi	#return, _i0
000108:0x002a06d0:	beq	0x2a06f0
000108:0x002a06d8:	imove	#return, 0x000001
000108:0x002a06e8:	jump	0x2a0700
000108:0x002a06f0:	imove	#return, 0x000000
000108:0x002a0700:	rts
000108:0x002a0708:	rts
DayZGame::OnRPC()
//scripts/3_Game/dayzgame.c
002898:0x002a08a8:	call	
002899:0x002a08c8:	icall	
002903:0x002a08f8:	cmpcm	target, null
002903:0x002a0908:	beq	0x2a0930
002906:0x002a0910:	call	
002906:0x002a0928:	jump	0x2a14f8
002910:0x002a0930:	move	#switch, rpc_type
002910:0x002a0940:	imove	@m00, 0x000053
002910:0x002a0950:	cmpi	@m00, #switch
002910:0x002a0960:	bne	0x2a09a0
002916:0x002a0968:	movetm	player, null
002916:0x002a0978:	call	OnRPC(player, ctx)
002917:0x002a0990:	jump	0x2a14f8
002917:0x002a0998:	jump	0x2a09c8
002917:0x002a09a0:	imove	@m00, 0x000054
002917:0x002a09b0:	cmpi	@m00, #switch
002917:0x002a09c0:	bne	0x2a09e8
002921:0x002a09c8:	call	OnRPC(ctx)
002922:0x002a09d8:	jump	0x2a14f8
002922:0x002a09e0:	jump	0x2a0a10
002922:0x002a09e8:	imove	@m00, 0x00003e
002922:0x002a09f8:	cmpi	@m00, #switch
002922:0x002a0a08:	bne	0x2a0a68
002930:0x002a0a10:	icall	
002931:0x002a0a20:	icall	
002932:0x002a0a30:	icall	
002934:0x002a0a40:	call	AddNotification(type, show_time, detail_text)
002935:0x002a0a58:	jump	0x2a14f8
002935:0x002a0a60:	jump	0x2a0a90
002935:0x002a0a68:	imove	@m00, 0x00003f
002935:0x002a0a78:	cmpi	@m00, #switch
002935:0x002a0a88:	bne	0x2a0b00
002944:0x002a0a90:	icall	
002945:0x002a0aa0:	icall	
002946:0x002a0ab0:	icall	
002947:0x002a0ac0:	icall	
002949:0x002a0ad0:	call	AddNotificationExtended(show_time_ext, title_text_ext, detail_text_ext, icon_ext)
002950:0x002a0af0:	jump	0x2a14f8
002950:0x002a0af8:	jump	0x2a0b28
002950:0x002a0b00:	imove	@m00, 0x000049
002950:0x002a0b10:	cmpi	@m00, #switch
002950:0x002a0b20:	bne	0x2a0c80
002961:0x002a0b28:	new	playCrashSound, Param3<bool,vector,int>
002962:0x002a0b58:	icall	
002962:0x002a0b68:	cmpi	#return, _i0
002962:0x002a0b78:	beq	0x2a0c00
002964:0x002a0b80:	movefm	@c00, playCrashSound
002964:0x002a0b90:	move	playSound, param1
002965:0x002a0ba0:	movefm	@c00, playCrashSound
002965:0x002a0bb0:	movev	pos, param2
002966:0x002a0bc0:	movefm	@c00, playCrashSound
002966:0x002a0bd0:	move	hash, param3
002966:0x002a0be0:	call	GetSoundSetByHash(hash)
002966:0x002a0bf0:	moves	sound_set, #return
002969:0x002a0c00:	cmpi	playSound, _i0
002969:0x002a0c10:	beq	0x2a0c70
002971:0x002a0c18:	call	PlaySound(sound_set, pos, _f0.100000, _f0.100000, _i0)
002971:0x002a0c38:	movem	m_CrashSound, #return
002971:0x002a0c48:	release	#return
002972:0x002a0c50:	movefm	[0xb5b3be08], m_CrashSound
002972:0x002a0c60:	call	
002975:0x002a0c70:	jump	0x2a14f8
002975:0x002a0c78:	jump	0x2a0ca8
002975:0x002a0c80:	imove	@m00, 0x00004a
002975:0x002a0c90:	cmpi	@m00, #switch
002975:0x002a0ca0:	bne	0x2a0e78
002981:0x002a0ca8:	new	playArtySound, Param1<vector>
002982:0x002a0cd0:	icall	
002982:0x002a0ce0:	cmpi	#return, _i0
002982:0x002a0cf0:	beq	0x2a0d40
002984:0x002a0cf8:	movefm	@c00, playArtySound
002984:0x002a0d08:	movev	position, param1
002985:0x002a0d18:	cmpv	position, Zero
002985:0x002a0d28:	bne	0x2a0d38
002986:0x002a0d30:	jump	0x2a14f8
002986:0x002a0d38:	jump	0x2a0d48
002989:0x002a0d40:	jump	0x2a14f8
002991:0x002a0d48:	ncall	GetGame()
002991:0x002a0d50:	ncalli	CGame.GetPlayer()
002991:0x002a0d58:	cmpm	#return, null
002991:0x002a0d68:	bne	0x2a0d78
002992:0x002a0d70:	jump	0x2a14f8
002994:0x002a0d78:	ncall	GetGame()
002994:0x002a0d80:	ncalli	CGame.GetPlayer()
002994:0x002a0d88:	ncalli	DayZPlayer.GetPosition()
002994:0x002a0d90:	ncall	DistanceSq(#return, position)
002994:0x002a0da0:	move	@f00, #return
002994:0x002a0db0:	citf	@f02, MIN_ARTY_SOUND_RANGE
002994:0x002a0dc0:	citf	@f03, MIN_ARTY_SOUND_RANGE
002994:0x002a0dd0:	mulf	@f02, @f02, @f03
002994:0x002a0de0:	move	@f01, @f02
002994:0x002a0df0:	cmpf	@f00, @f01
002994:0x002a0e00:	bgt	0x2a0e10
002995:0x002a0e08:	jump	0x2a14f8
002997:0x002a0e10:	call	PlaySound(_s'Artillery_Distant_Barrage_SoundSet', position, _f0.100000, _f0.100000, _i0)
002997:0x002a0e30:	movem	m_ArtySound, #return
002997:0x002a0e40:	release	#return
002998:0x002a0e48:	movefm	[0xb5b3be08], m_ArtySound
002998:0x002a0e58:	call	
003000:0x002a0e68:	jump	0x2a14f8
003000:0x002a0e70:	jump	0x2a0ea0
003000:0x002a0e78:	imove	@m00, 0x000051
003000:0x002a0e88:	cmpi	@m00, #switch
003000:0x002a0e98:	bne	0x2a1130
003006:0x002a0ea0:	new	playContaminatedSound, Param1<vector>
003007:0x002a0ec8:	icall	
003007:0x002a0ed8:	cmpi	#return, _i0
003007:0x002a0ee8:	beq	0x2a0f38
003009:0x002a0ef0:	movefm	@c00, playContaminatedSound
003009:0x002a0f00:	movev	soundPos, param1
003010:0x002a0f10:	cmpv	soundPos, Zero
003010:0x002a0f20:	bne	0x2a0f30
003011:0x002a0f28:	jump	0x2a14f8
003011:0x002a0f30:	jump	0x2a0f40
003014:0x002a0f38:	jump	0x2a14f8
003016:0x002a0f40:	ncall	GetGame()
003016:0x002a0f48:	ncalli	CGame.GetPlayer()
003016:0x002a0f50:	cmpm	#return, null
003016:0x002a0f60:	bne	0x2a0f70
003017:0x002a0f68:	jump	0x2a14f8
003019:0x002a0f70:	call	PlaySound(_s'Artillery_Close_SoundSet', soundPos, _f0.000000, _f0.000000, _i0)
003019:0x002a0f90:	movem	closeArtySound, #return
003019:0x002a0fa0:	release	#return
003020:0x002a0fa8:	call	
003023:0x002a0fb8:	ncall	GetGame()
003023:0x002a0fc0:	ncalli	CGame.GetPlayer()
003023:0x002a0fc8:	ncalli	DayZPlayer.GetPosition()
003023:0x002a0fd0:	ncall	DistanceSq(soundPos, #return)
003023:0x002a0fe0:	move	distance_to_player, #return
003024:0x002a0ff0:	citf	@f00, CAMERA_SHAKE_ARTILLERY_DISTANCE2
003024:0x002a1000:	cmpf	distance_to_player, @f00
003024:0x002a1010:	bgt	0x2a10e8
003026:0x002a1018:	citf	@f01, CAMERA_SHAKE_ARTILLERY_DISTANCE
003026:0x002a1028:	icall	Sqrt(distance_to_player)
003026:0x002a1038:	icall	InverseLerp(@f01, _f0.000000, #return)
003026:0x002a1050:	move	strength_factor, #return
003027:0x002a1060:	ncall	GetGame()
003027:0x002a1068:	ncalli	CGame.GetPlayer()
003027:0x002a1070:	ncalli	DayZPlayer.GetCurrentCamera()
003027:0x002a1078:	movetm	camera, #return
003028:0x002a1088:	cmpcm	camera, null
003028:0x002a1098:	beq	0x2a10e0
003029:0x002a10a0:	mulf	@f01, strength_factor, _f4.000000
003029:0x002a10b0:	move	@f00, @f01
003029:0x002a10c0:	call	
003029:0x002a10e0:	release	camera
003032:0x002a10e8:	call	GetInstance()
003032:0x002a10f8:	call	
003032:0x002a1110:	release	#return
003032:0x002a1118:	release	#return
003033:0x002a1120:	jump	0x2a14f8
003033:0x002a1128:	jump	0x2a1158
003033:0x002a1130:	imove	@m00, 0x000052
003033:0x002a1140:	cmpi	@m00, #switch
003033:0x002a1150:	bne	0x2a13b8
003042:0x002a1158:	new	playArtyShotSound, Param3<vector,vector,float>
003043:0x002a1188:	icall	
003043:0x002a1198:	cmpi	#return, _i0
003043:0x002a11a8:	beq	0x2a1238
003045:0x002a11b0:	movefm	@c00, playArtyShotSound
003045:0x002a11c0:	movev	soundPosition, param1
003046:0x002a11d0:	movefm	@c00, playArtyShotSound
003046:0x002a11e0:	movev	delayedSoundPos, param2
003047:0x002a11f0:	movefm	@c00, playArtyShotSound
003047:0x002a1200:	move	soundDelay, param3
003048:0x002a1210:	cmpv	soundPosition, Zero
003048:0x002a1220:	bne	0x2a1230
003049:0x002a1228:	jump	0x2a14f8
003049:0x002a1230:	jump	0x2a1240
003052:0x002a1238:	jump	0x2a14f8
003054:0x002a1240:	ncall	GetGame()
003054:0x002a1248:	ncalli	CGame.GetPlayer()
003054:0x002a1250:	cmpm	#return, null
003054:0x002a1260:	bne	0x2a1270
003055:0x002a1268:	jump	0x2a14f8
003057:0x002a1270:	call	PlaySound(_s'Artillery_Distant_SoundSet', soundPosition, _f0.100000, _f0.100000, _i0)
003057:0x002a1290:	movem	m_ArtySound, #return
003057:0x002a12a0:	release	#return
003058:0x002a12a8:	movefm	[0xb5b3be08], m_ArtySound
003058:0x002a12b8:	call	
003061:0x002a12c8:	imove	@f00, 5.00000
003061:0x002a12d8:	subf	soundDelay, soundDelay, @f00
003063:0x002a12e8:	imove	@f00, 1000.00000
003063:0x002a12f8:	mulf	soundDelay, soundDelay, @f00
003064:0x002a1308:	call	
003064:0x002a1318:	icall	SetInstance([0xb5d9e7d8], this)
003064:0x002a1328:	cfti	@m00, soundDelay
003064:0x002a1338:	ifv	@f00, delayedSoundPos[0x000000]
003064:0x002a1348:	ifv	@f01, delayedSoundPos[0x000001]
003064:0x002a1358:	ifv	@f02, delayedSoundPos[0x000002]
003064:0x002a1368:	icall	
003064:0x002a13a0:	release	#return
003065:0x002a13a8:	jump	0x2a14f8
003065:0x002a13b0:	jump	0x2a13e0
003065:0x002a13b8:	imove	@m00, 0x000042
003065:0x002a13c8:	cmpi	@m00, #switch
003065:0x002a13d8:	bne	0x2a14c8
003073:0x002a13e0:	icall	
003073:0x002a13f0:	cmpi	#return, _i0
003073:0x002a1400:	beq	0x2a14c0
003075:0x002a1408:	imove	i, 0x000000
003075:0x002a1418:	jump	0x2a1438
003075:0x002a1420:	move	@m00, i
003075:0x002a1430:	inc	i
003075:0x002a1438:	ncalli	map<string,bool>.Count()
003075:0x002a1440:	cmpi	i, #return
003075:0x002a1450:	bge	0x2a14c0
003077:0x002a1458:	icall	
003077:0x002a1468:	moves	uid, #return
003078:0x002a1478:	icall	
003078:0x002a1488:	move	mute, #return
003079:0x002a1498:	icall	
003079:0x002a14a0:	ncalli	DayZGame.MutePlayer(uid, #return, mute)
003079:0x002a14b8:	jump	0x2a1420
003082:0x002a14c0:	jump	0x2a14f8
003082:0x002a14c8:	release	playCrashSound
003082:0x002a14d0:	release	playArtySound
003082:0x002a14d8:	release	playContaminatedSound
003082:0x002a14e0:	release	closeArtySound
003082:0x002a14e8:	release	playArtyShotSound
003082:0x002a14f0:	release	mute_list
003082:0x002a14f8:	rts
DayZGame::DelayedMidAirDetonation()
003169:0x002a1588:	ncall	Vector(x, y, z)
003169:0x002a15a0:	call	PlaySound(_s'Artillery_Fall_SoundSet', #return, _f0.000000, _f0.000000, _i0)
003169:0x002a15c0:	movem	artilleryFallSound, #return
003169:0x002a15d0:	release	#return
003170:0x002a15d8:	call	
003170:0x002a15e8:	release	artilleryFallSound
003170:0x002a15f0:	rts
DayZGame::CheckDialogs()
003177:0x002a1620:	ncalli	DayZGame.GetMission()
003177:0x002a1628:	movec	mission, #return
003178:0x002a1638:	cmpc	mission, null
003178:0x002a1648:	beq	0x2a16d0
003178:0x002a1650:	movefm	[0xb5b3e538], m_loading
003178:0x002a1660:	call	
003178:0x002a1670:	cmpi	#return, _i0
003178:0x002a1680:	bne	0x2a16d0
003178:0x002a1688:	ncalli	DayZGame.GetUIManager()
003178:0x002a1690:	ncalli	UIManager.IsDialogQueued()
003178:0x002a1698:	cmpi	#return, _i0
003178:0x002a16a8:	beq	0x2a16d0
003180:0x002a16b0:	call	
003181:0x002a16c0:	ncalli	DayZGame.GetUIManager()
003181:0x002a16c8:	ncalli	UIManager.ShowQueuedDialog()
003181:0x002a16d0:	rts
DayZGame::SetConnecting()
003189:0x002a16d8:	move	m_IsConnecting, value
003189:0x002a16e8:	rts
DayZGame::IsConnecting()
003194:0x002a16f0:	move	#return, m_IsConnecting
003194:0x002a1700:	rts
003194:0x002a1708:	rts
DayZGame::IsLoading()
003200:0x002a1710:	cmpcm	m_loading, null
003200:0x002a1720:	beq	0x2a1778
003200:0x002a1728:	movefm	[0xb5b3e538], m_loading
003200:0x002a1738:	call	
003200:0x002a1748:	cmpi	#return, _i0
003200:0x002a1758:	beq	0x2a1778
003200:0x002a1760:	imove	#return, 0x000001
003200:0x002a1770:	jump	0x2a1788
003200:0x002a1778:	imove	#return, 0x000000
003200:0x002a1788:	rts
003200:0x002a1790:	rts
DayZGame::SetKeyboardHandle()
003206:0x002a1798:	movem	m_keyboard_handler, handler
003206:0x002a17a8:	rts
DayZGame::LoadingShow()
003213:0x002a17b0:	movefm	[0xb5b3e538], m_loading
003213:0x002a17c0:	call	
003213:0x002a17d0:	rts
DayZGame::LoadingHide()
003221:0x002a17d8:	movefm	[0xb5b3e538], m_loading
003221:0x002a17e8:	call	
003223:0x002a17f8:	call	GetPPEManager()
003223:0x002a1808:	call	
003223:0x002a1818:	release	#return
003223:0x002a1820:	rts
DayZGame::CreateDefaultPlayer()
003239:0x002a1828:	movefm	[0xd31562c0], m_CharClassNames
003239:0x002a1838:	ncalli	array<string>.Count()
003239:0x002a1840:	move	@m00, #return
003239:0x002a1850:	cmpi	@m00, _i0
003239:0x002a1860:	ble	0x2a18a0
003240:0x002a1868:	movefm	[0xd31562c0], m_CharClassNames
003240:0x002a1878:	icall	
003240:0x002a1888:	moves	#return, #return
003240:0x002a1898:	rts
003242:0x002a18a0:	moves	#return, _s''
003242:0x002a18b0:	rts
003242:0x002a18b8:	rts
DayZGame::CreateRandomPlayer()
003248:0x002a18c0:	movefm	[0xd31562c0], m_CharClassNames
003248:0x002a18d0:	call	
003248:0x002a18e0:	moves	#return, #return
003248:0x002a18f0:	rts
003248:0x002a18f8:	rts
DayZGame::ListAvailableCharacters()
003254:0x002a1900:	movem	#return, m_CharClassNames
003254:0x002a1910:	rts
003254:0x002a1918:	rts
DayZGame::ExplosionEffectsEx()
003260:0x002a19d0:	ncalli	HitInfo.GetPosition()
003260:0x002a19d8:	movev	pos, #return
003261:0x002a19e8:	ncalli	HitInfo.GetAmmoType()
003261:0x002a19f0:	moves	ammoType, #return
003264:0x002a1a00:	ncalli	HitInfo.GetSurface()
003264:0x002a1a08:	ncalli	HitInfo.GetSurfaceNormal()
003264:0x002a1a10:	ncalli	HitInfo.IsWater()
003264:0x002a1a18:	call	
003267:0x002a1a50:	ncalli	DayZGame.IsServer()
003267:0x002a1a58:	cmpi	#return, _i0
003267:0x002a1a68:	beq	0x2a1ae8
003270:0x002a1a70:	icall	Format(_s'cfgAmmo %1 NoiseExplosion', ammoType, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
003270:0x002a1aa0:	ncalli	NoiseParams.LoadFromPath(#return)
003272:0x002a1ab0:	ncalli	DayZGame.GetNoiseSystem()
003272:0x002a1ab8:	movefm	@c00, m_NoiseParams
003272:0x002a1ac8:	ncalli	HitInfo.GetSurfaceNoiseMultiplier()
003272:0x002a1ad0:	icall	
003272:0x002a1ae8:	rts
DayZGame::ExplosionEffects()
003281:0x002a1be8:	cmpcm	source, null
003281:0x002a1bf8:	beq	0x2a1e08
003283:0x002a1c00:	call	
003285:0x002a1c38:	call	
003285:0x002a1c48:	cmpi	#return, _i0
003285:0x002a1c58:	beq	0x2a1cb0
003285:0x002a1c60:	cmps	ammoType, _s'Explosion_40mm_Ammo'
003285:0x002a1c70:	bne	0x2a1cb0
003286:0x002a1c78:	call	GetInstance()
003286:0x002a1c88:	call	
003286:0x002a1ca0:	release	#return
003286:0x002a1ca8:	release	#return
003288:0x002a1cb0:	ncall	GetGame()
003288:0x002a1cb8:	ncalli	CGame.GetPlayer()
003288:0x002a1cc0:	ncalli	DayZPlayer.GetPosition()
003288:0x002a1cc8:	ncall	Distance(pos, #return)
003288:0x002a1cd8:	move	distance_to_player, #return
003289:0x002a1ce8:	call	
003291:0x002a1cf8:	movefm	@c00, m_AmmoShakeParams
003291:0x002a1d08:	cmpf	distance_to_player, m_Radius
003291:0x002a1d18:	bge	0x2a1e08
003293:0x002a1d20:	movefm	@c01, m_AmmoShakeParams
003293:0x002a1d30:	icall	InverseLerp(_f0.000000, m_Radius, distance_to_player)
003293:0x002a1d48:	move	dist01, #return
003294:0x002a1d58:	movefm	@c00, m_AmmoShakeParams
003294:0x002a1d68:	movefm	@c01, m_AmmoShakeParams
003294:0x002a1d78:	icall	Lerp(m_ModifierClose, m_ModifierFar, dist01)
003294:0x002a1d90:	move	modifier, #return
003296:0x002a1da0:	ncall	GetGame()
003296:0x002a1da8:	ncalli	CGame.GetPlayer()
003296:0x002a1db0:	ncalli	DayZPlayer.GetCurrentCamera()
003296:0x002a1db8:	movefm	@c00, m_AmmoShakeParams
003296:0x002a1dc8:	mulf	@f01, modifier, m_Strength
003296:0x002a1dd8:	move	@f00, @f01
003296:0x002a1de8:	call	
003296:0x002a1e08:	rts
DayZGame::OnProjectileStopped()
003307:0x002a1f80:	ncall	GetGame()
003307:0x002a1f88:	ncalli	ProjectileStoppedInfo.GetAmmoType()
003307:0x002a1f90:	adds	@s02, _s'cfgAmmo ', #return
003307:0x002a1fa0:	moves	@s01, @s02
003307:0x002a1fb0:	adds	@s01, @s01, _s' simulation'
003307:0x002a1fc0:	moves	@s00, @s01
003307:0x002a1fd0:	icall	
003309:0x002a1fe0:	cmps	simulation, _s'shotArrow'
003309:0x002a1ff0:	bne	0x2a20c8
003313:0x002a1ff8:	ncall	GetGame()
003313:0x002a2000:	ncalli	ProjectileStoppedInfo.GetAmmoType()
003313:0x002a2008:	adds	@s02, _s'cfgAmmo ', #return
003313:0x002a2018:	moves	@s01, @s02
003313:0x002a2028:	adds	@s01, @s01, _s' spawnPileType'
003313:0x002a2038:	moves	@s00, @s01
003313:0x002a2048:	icall	
003315:0x002a2058:	ncall	GetGame()
003315:0x002a2060:	ncalli	ProjectileStoppedInfo.GetPos()
003315:0x002a2068:	ncalli	CGame.CreateObjectEx(pile, #return, ECE_DYNAMIC_PERSISTENCY, _i512)
003315:0x002a2080:	icall	SafeCastType([0xb5b25dc0], @c01, #return)
003315:0x002a2098:	movetm	arrow, @c01
003316:0x002a20a8:	ncalli	EntityAI.PlaceOnSurface()
003317:0x002a20b0:	call	
003317:0x002a20c0:	release	arrow
003317:0x002a20c8:	rts
DayZGame::OnProjectileStoppedInTerrain()
003328:0x002a21b8:	ncalli	TerrainCollisionInfo.GetIsWater()
003328:0x002a21c0:	cmpi	#return, _i0
003328:0x002a21d0:	beq	0x2a21e0
003329:0x002a21d8:	rts
003331:0x002a21e0:	ncall	GetGame()
003331:0x002a21e8:	ncalli	TerrainCollisionInfo.GetAmmoType()
003331:0x002a21f0:	adds	@s02, _s'cfgAmmo ', #return
003331:0x002a2200:	moves	@s01, @s02
003331:0x002a2210:	adds	@s01, @s01, _s' simulation'
003331:0x002a2220:	moves	@s00, @s01
003331:0x002a2230:	icall	
003332:0x002a2240:	cmps	simulation, _s'shotArrow'
003332:0x002a2250:	bne	0x2a23b8
003335:0x002a2258:	ncall	GetGame()
003335:0x002a2260:	ncalli	TerrainCollisionInfo.GetAmmoType()
003335:0x002a2268:	adds	@s02, _s'cfgAmmo ', #return
003335:0x002a2278:	moves	@s01, @s02
003335:0x002a2288:	adds	@s01, @s01, _s' spawnPileType'
003335:0x002a2298:	moves	@s00, @s01
003335:0x002a22a8:	icall	
003336:0x002a22b8:	ncalli	TerrainCollisionInfo.GetPos()
003336:0x002a22c0:	movev	pos, #return
003337:0x002a22d0:	ncalli	TerrainCollisionInfo.GetInVelocity()
003337:0x002a22d8:	subv	@v01, _v<0.000000,0.000000,0.000000>, #return
003337:0x002a22e8:	movev	dir, @v01
003339:0x002a22f8:	icall	Normalize(dir)
003340:0x002a2308:	scalev	@v00, dir, ARROW_PIERCE_DEPTH
003340:0x002a2318:	subv	pos, pos, @v00
003342:0x002a2328:	ncall	GetGame()
003342:0x002a2330:	imove	@m01, 0x2080000
003342:0x002a2340:	move	@m00, @m01
003342:0x002a2350:	ncalli	CGame.CreateObjectEx(pile, pos, @m00, _i512)
003342:0x002a2368:	icall	SafeCastType([0xb5b25dc0], @c01, #return)
003342:0x002a2380:	movetm	arrow, @c01
003343:0x002a2390:	ncalli	EntityAI.SetDirection(dir)
003344:0x002a23a0:	call	
003344:0x002a23b0:	release	arrow
003344:0x002a23b8:	rts
DayZGame::OnProjectileStoppedInObject()
003353:0x002a2520:	ncall	GetGame()
003353:0x002a2528:	ncalli	ObjectCollisionInfo.GetAmmoType()
003353:0x002a2530:	adds	@s02, _s'cfgAmmo ', #return
003353:0x002a2540:	moves	@s01, @s02
003353:0x002a2550:	adds	@s01, @s01, _s' simulation'
003353:0x002a2560:	moves	@s00, @s01
003353:0x002a2570:	icall	
003354:0x002a2580:	cmps	simulation, _s'shotArrow'
003354:0x002a2590:	bne	0x2a2880
003357:0x002a2598:	ncall	GetGame()
003357:0x002a25a0:	ncalli	ObjectCollisionInfo.GetAmmoType()
003357:0x002a25a8:	adds	@s02, _s'cfgAmmo ', #return
003357:0x002a25b8:	moves	@s01, @s02
003357:0x002a25c8:	adds	@s01, @s01, _s' spawnPileType'
003357:0x002a25d8:	moves	@s00, @s01
003357:0x002a25e8:	icall	
003359:0x002a25f8:	movetm	arrow, null
003360:0x002a2608:	ncalli	ObjectCollisionInfo.GetHitObj()
003360:0x002a2610:	icall	SafeCastType([0xb5b25dc0], @c01, #return)
003360:0x002a2628:	movetm	ent, @c01
003361:0x002a2638:	cmpcm	ent, null
003361:0x002a2648:	beq	0x2a2738
003363:0x002a2650:	ncalli	EntityAI.GetHierarchyParent()
003363:0x002a2658:	movetm	parent, #return
003364:0x002a2668:	cmpcm	parent, null
003364:0x002a2678:	beq	0x2a2730
003364:0x002a2680:	call	
003364:0x002a2690:	cmpi	#return, _i0
003364:0x002a26a0:	beq	0x2a2730
003366:0x002a26a8:	ncall	GetGame()
003366:0x002a26b0:	ncalli	EntityAI.GetPosition()
003366:0x002a26b8:	ncalli	CGame.CreateObjectEx(pile, #return, ECE_DYNAMIC_PERSISTENCY, _i512)
003366:0x002a26d0:	icall	SafeCastType([0xb5b25dc0], @c01, #return)
003366:0x002a26e8:	movetm	arrow, @c01
003367:0x002a26f8:	ncalli	EntityAI.PlaceOnSurface()
003368:0x002a2700:	call	
003370:0x002a2710:	release	parent
003370:0x002a2718:	release	arrow
003370:0x002a2720:	release	ent
003370:0x002a2728:	rts
003370:0x002a2730:	release	parent
003374:0x002a2738:	ncalli	ObjectCollisionInfo.GetPos()
003374:0x002a2740:	movev	pos, #return
003375:0x002a2750:	ncalli	ObjectCollisionInfo.GetInVelocity()
003375:0x002a2758:	subv	@v01, _v<0.000000,0.000000,0.000000>, #return
003375:0x002a2768:	movev	dir, @v01
003377:0x002a2778:	icall	Normalize(dir)
003378:0x002a2788:	scalev	@v00, dir, ARROW_PIERCE_DEPTH
003378:0x002a2798:	subv	pos, pos, @v00
003380:0x002a27a8:	ncall	GetGame()
003380:0x002a27b0:	imove	@m01, 0x2080000
003380:0x002a27c0:	move	@m00, @m01
003380:0x002a27d0:	ncalli	CGame.CreateObjectEx(pile, pos, @m00, _i512)
003380:0x002a27e8:	icall	SafeCastType([0xb5b25dc0], @c01, #return)
003380:0x002a2800:	movetm	arrow, @c01
003381:0x002a2810:	ncalli	EntityAI.SetDirection(dir)
003382:0x002a2820:	call	
003384:0x002a2830:	ncalli	ObjectCollisionInfo.GetHitObj()
003384:0x002a2838:	ncalli	ObjectCollisionInfo.GetComponentIndex()
003384:0x002a2840:	ncalli	ObjectCollisionInfo.GetHitObjPos()
003384:0x002a2848:	ncalli	ObjectCollisionInfo.GetHitObjRot()
003384:0x002a2850:	call	
003384:0x002a2870:	release	arrow
003384:0x002a2878:	release	ent
003384:0x002a2880:	rts
DayZGame::FirearmEffects()
003393:0x002a2b10:	new	impactEffectsData, ImpactEffectsData
003394:0x002a2b30:	movefm	@c00, impactEffectsData
003394:0x002a2b40:	movem	m_DirectHit, directHit
003395:0x002a2b50:	movefm	@c00, impactEffectsData
003395:0x002a2b60:	move	m_ComponentIndex, componentIndex
003396:0x002a2b70:	movefm	@c00, impactEffectsData
003396:0x002a2b80:	moves	m_Surface, surface
003397:0x002a2b90:	movefm	@c00, impactEffectsData
003397:0x002a2ba0:	movev	m_Position, pos
003398:0x002a2bb0:	movefm	@c00, impactEffectsData
003398:0x002a2bc0:	imove	m_ImpactType, 0x000000
003399:0x002a2bd0:	movefm	@c00, impactEffectsData
003399:0x002a2be0:	movev	m_SurfaceNormal, surfNormal
003400:0x002a2bf0:	movefm	@c00, impactEffectsData
003400:0x002a2c00:	movev	m_ExitPosition, exitPos
003401:0x002a2c10:	movefm	@c00, impactEffectsData
003401:0x002a2c20:	movev	m_InSpeed, inSpeed
003402:0x002a2c30:	movefm	@c00, impactEffectsData
003402:0x002a2c40:	movev	m_OutSpeed, outSpeed
003403:0x002a2c50:	movefm	@c00, impactEffectsData
003403:0x002a2c60:	move	m_IsDeflected, deflected
003404:0x002a2c70:	movefm	@c00, impactEffectsData
003404:0x002a2c80:	moves	m_AmmoType, ammoType
003405:0x002a2c90:	movefm	@c00, impactEffectsData
003405:0x002a2ca0:	move	m_IsWater, isWater
003408:0x002a2cb0:	ncalli	DayZGame.GetPlayer()
003408:0x002a2cb8:	movetm	player, #return
003409:0x002a2cc8:	cmpcm	directHit, null
003409:0x002a2cd8:	beq	0x2a2d90
003409:0x002a2ce0:	cmpcm	player, null
003409:0x002a2cf0:	beq	0x2a2d90
003409:0x002a2cf8:	cmpm	directHit, player
003409:0x002a2d08:	bne	0x2a2d90
003411:0x002a2d10:	call	
003412:0x002a2d20:	ncall	Length(inSpeed)
003412:0x002a2d30:	icall	InverseLerp(_f0.000000, _f500.000000, #return)
003412:0x002a2d48:	move	shake_strength, #return
003413:0x002a2d58:	ncall	GetGame()
003413:0x002a2d60:	ncalli	CGame.GetPlayer()
003413:0x002a2d68:	ncalli	DayZPlayer.GetCurrentCamera()
003413:0x002a2d70:	call	
003416:0x002a2d90:	call	EvaluateImpactEffectEx(impactEffectsData)
003420:0x002a2da0:	ncalli	DayZGame.IsServer()
003420:0x002a2da8:	cmpi	#return, _i0
003420:0x002a2db8:	beq	0x2a3030
003422:0x002a2dc0:	cmpcm	source, null
003422:0x002a2dd0:	beq	0x2a2ee8
003422:0x002a2dd8:	call	
003422:0x002a2de8:	cmpi	#return, _i0
003422:0x002a2df8:	beq	0x2a2ee8
003422:0x002a2e00:	cmpi	deflected, _i0
003422:0x002a2e10:	bne	0x2a2ee8
003422:0x002a2e18:	cmpv	outSpeed, Zero
003422:0x002a2e28:	bne	0x2a2ee8
003424:0x002a2e30:	cmps	ammoType, _s'Bullet_40mm_ChemGas'
003424:0x002a2e40:	bne	0x2a2e78
003426:0x002a2e48:	ncall	GetGame()
003426:0x002a2e50:	ncalli	CGame.CreateObject(_s'ContaminatedArea_Local', pos, _i0, _i0, _i1)
003426:0x002a2e70:	jump	0x2a2ee8
003428:0x002a2e78:	cmps	ammoType, _s'Bullet_40mm_Explosive'
003428:0x002a2e88:	bne	0x2a2ee8
003430:0x002a2e90:	movefm	@c02, source
003430:0x002a2ea0:	icall	SafeCastType([0xb5b25dc0], @c01, @c02)
003430:0x002a2eb8:	movec	[0xb5c2ee98], null
003430:0x002a2ec8:	ncall	ExplosionDamage(@c01, [0xb5c2ee98], _s'Explosion_40mm_Ammo', pos, _i2)
003435:0x002a2ee8:	adds	@s02, _s'cfgAmmo ', ammoType
003435:0x002a2ef8:	moves	@s01, @s02
003435:0x002a2f08:	adds	@s01, @s01, _s' NoiseHit'
003435:0x002a2f18:	moves	@s00, @s01
003435:0x002a2f28:	ncalli	NoiseParams.LoadFromPath(@s00)
003437:0x002a2f38:	movefm	[0xb5bdd0b8], directHit
003437:0x002a2f48:	ncalli	DayZGame.SurfaceGetNoiseMultiplier([0xb5bdd0b8], pos, componentIndex)
003437:0x002a2f60:	move	surfaceCoef, #return
003438:0x002a2f70:	ncall	Length(inSpeed)
003438:0x002a2f80:	mulf	@f01, surfaceCoef, #return
003438:0x002a2f90:	move	@f00, @f01
003438:0x002a2fa0:	adds	@s02, _s'cfgAmmo ', ammoType
003438:0x002a2fb0:	moves	@s01, @s02
003438:0x002a2fc0:	adds	@s01, @s01, _s' initSpeed'
003438:0x002a2fd0:	moves	@s00, @s01
003438:0x002a2fe0:	ncalli	DayZGame.ConfigGetFloat(@s00)
003438:0x002a2ff0:	divf	coefAdjusted, @f00, #return
003439:0x002a3000:	ncalli	DayZGame.GetNoiseSystem()
003439:0x002a3008:	movefm	@c00, m_NoiseParams
003439:0x002a3018:	icall	
003439:0x002a3030:	release	impactEffectsData
003439:0x002a3038:	release	player
003439:0x002a3040:	rts
DayZGame::CloseCombatEffects()
003448:0x002a3168:	new	impactEffectsData, ImpactEffectsData
003449:0x002a3188:	movefm	@c00, impactEffectsData
003449:0x002a3198:	movem	m_DirectHit, directHit
003450:0x002a31a8:	movefm	@c00, impactEffectsData
003450:0x002a31b8:	move	m_ComponentIndex, componentIndex
003451:0x002a31c8:	movefm	@c00, impactEffectsData
003451:0x002a31d8:	moves	m_Surface, surface
003452:0x002a31e8:	movefm	@c00, impactEffectsData
003452:0x002a31f8:	movev	m_Position, pos
003453:0x002a3208:	movefm	@c00, impactEffectsData
003453:0x002a3218:	imove	m_ImpactType, 0x000004
003454:0x002a3228:	movefm	@c00, impactEffectsData
003454:0x002a3238:	icall	RandomFloat(_f-1.000000, _f1.000000)
003454:0x002a3248:	push	#return
003454:0x002a3250:	icall	RandomFloat(_f-1.000000, _f1.000000)
003454:0x002a3260:	move	@f01, #return
003454:0x002a3270:	pop	#return
003454:0x002a3278:	push	#return
003454:0x002a3280:	icall	RandomFloat(_f-1.000000, _f1.000000)
003454:0x002a3290:	move	@f02, #return
003454:0x002a32a0:	pop	#return
003454:0x002a32a8:	ncall	Vector(#return, @f01, @f02)
003454:0x002a32c0:	movev	m_SurfaceNormal, #return
003455:0x002a32d0:	movefm	@c00, impactEffectsData
003455:0x002a32e0:	movev	m_ExitPosition, _v<0.000000,0.000000,0.000000>
003456:0x002a32f0:	movefm	@c00, impactEffectsData
003456:0x002a3300:	movev	m_InSpeed, _v<0.000000,0.000000,0.000000>
003457:0x002a3310:	movefm	@c00, impactEffectsData
003457:0x002a3320:	movev	m_OutSpeed, _v<0.000000,0.000000,0.000000>
003458:0x002a3330:	movefm	@c00, impactEffectsData
003458:0x002a3340:	imove	m_IsDeflected, 0x000000
003459:0x002a3350:	movefm	@c00, impactEffectsData
003459:0x002a3360:	moves	m_AmmoType, ammoType
003460:0x002a3370:	movefm	@c00, impactEffectsData
003460:0x002a3380:	move	m_IsWater, isWater
003463:0x002a3390:	ncalli	DayZGame.GetPlayer()
003463:0x002a3398:	movetm	player, #return
003464:0x002a33a8:	cmpcm	directHit, null
003464:0x002a33b8:	beq	0x2a3400
003464:0x002a33c0:	cmpcm	player, null
003464:0x002a33d0:	beq	0x2a3400
003464:0x002a33d8:	cmpm	directHit, player
003464:0x002a33e8:	bne	0x2a3400
003465:0x002a33f0:	call	
003467:0x002a3400:	call	EvaluateImpactEffectEx(impactEffectsData)
003471:0x002a3410:	ncalli	DayZGame.IsServer()
003471:0x002a3418:	cmpi	#return, _i0
003471:0x002a3428:	beq	0x2a3510
003473:0x002a3430:	adds	@s02, _s'cfgAmmo ', ammoType
003473:0x002a3440:	moves	@s01, @s02
003473:0x002a3450:	adds	@s01, @s01, _s' NoiseHit'
003473:0x002a3460:	moves	@s00, @s01
003473:0x002a3470:	ncalli	NoiseParams.LoadFromPath(@s00)
003475:0x002a3480:	movefm	[0xb5bdd0b8], directHit
003475:0x002a3490:	ncalli	DayZGame.SurfaceGetNoiseMultiplier([0xb5bdd0b8], pos, componentIndex)
003475:0x002a34a8:	move	surfaceCoef, #return
003476:0x002a34b8:	ncalli	DayZGame.GetNoiseSystem()
003476:0x002a34c0:	movefm	@c02, source
003476:0x002a34d0:	icall	SafeCastType([0xb5b25dc0], @c01, @c02)
003476:0x002a34e8:	movefm	@c00, m_NoiseParams
003476:0x002a34f8:	icall	
003476:0x002a3510:	release	impactEffectsData
003476:0x002a3518:	release	player
003476:0x002a3520:	rts
DayZGame::UpdateVoiceLevel()
003482:0x002a3528:	ncalli	DayZGame.GetMission()
003482:0x002a3530:	call	
003482:0x002a3540:	rts
DayZGame::InitCharacterMenuDataInfo()
003487:0x002a3548:	move	m_OriginalCharactersCount, menudata_count
003487:0x002a3558:	rts
DayZGame::SetPlayerGameName()
003492:0x002a3560:	moves	m_PlayerName, name
003492:0x002a3570:	rts
DayZGame::GetPlayerGameName()
003497:0x002a3578:	moves	#return, m_PlayerName
003497:0x002a3588:	rts
003497:0x002a3590:	rts
DayZGame::SetNewCharacter()
003502:0x002a3598:	move	m_IsNewCharacter, state
003502:0x002a35a8:	rts
DayZGame::IsNewCharacter()
003507:0x002a35b0:	move	#return, m_IsNewCharacter
003507:0x002a35c0:	rts
003507:0x002a35c8:	rts
DayZGame::SetUserFOV()
003512:0x002a35d0:	cmpf	pFov, OPTIONS_FIELD_OF_VIEW_MIN
003512:0x002a35e0:	bge	0x2a35f8
003513:0x002a35e8:	imove	pFov, 0.52360
003515:0x002a35f8:	cmpf	pFov, OPTIONS_FIELD_OF_VIEW_MAX
003515:0x002a3608:	ble	0x2a3620
003516:0x002a3610:	imove	pFov, 0.95993
003518:0x002a3620:	move	m_UserFOV, pFov
003518:0x002a3630:	rts
DayZGame::GetUserFOV()
003523:0x002a3638:	move	#return, m_UserFOV
003523:0x002a3648:	rts
003523:0x002a3650:	rts
DayZGame::GetUserFOVFromConfig()
003528:0x002a36a8:	new	gameOptions, GameOptions
003530:0x002a36c8:	cmpcm	gameOptions, null
003530:0x002a36d8:	beq	0x2a3748
003530:0x002a36e0:	ncalli	GameOptions.GetOptionByType(_i26)
003530:0x002a36f0:	icall	CastTo(noa, #return)
003530:0x002a3700:	cmpi	#return, _i0
003530:0x002a3710:	beq	0x2a3748
003532:0x002a3718:	ncalli	NumericOptionsAccess.ReadValue()
003532:0x002a3720:	move	#return, #return
003532:0x002a3730:	release	gameOptions
003532:0x002a3738:	release	noa
003532:0x002a3740:	rts
003534:0x002a3748:	imove	#return, 1.00000
003534:0x002a3758:	release	gameOptions
003534:0x002a3760:	release	noa
003534:0x002a3768:	rts
003534:0x002a3770:	release	gameOptions
003534:0x002a3778:	release	noa
003534:0x002a3780:	rts
DayZGame::GetFOVByZoomType()
003539:0x002a37b0:	move	#switch, type
003539:0x002a37c0:	imove	@m00, 0x000000
003539:0x002a37d0:	cmpi	@m00, #switch
003539:0x002a37e0:	bne	0x2a3818
003542:0x002a37e8:	call	
003542:0x002a37f8:	move	#return, #return
003542:0x002a3808:	rts
003542:0x002a3810:	jump	0x2a3840
003542:0x002a3818:	imove	@m00, 0x000001
003542:0x002a3828:	cmpi	@m00, #switch
003542:0x002a3838:	bne	0x2a3880
003544:0x002a3840:	call	
003544:0x002a3850:	icall	Min(#return, DZPLAYER_CAMERA_FOV_EYEZOOM)
003544:0x002a3860:	move	#return, #return
003544:0x002a3870:	rts
003544:0x002a3878:	jump	0x2a38a8
003544:0x002a3880:	imove	@m00, 0x000002
003544:0x002a3890:	cmpi	@m00, #switch
003544:0x002a38a0:	bne	0x2a38e0
003546:0x002a38a8:	call	
003546:0x002a38b8:	icall	Min(#return, DZPLAYER_CAMERA_FOV_EYEZOOM_SHALLOW)
003546:0x002a38c8:	move	#return, #return
003546:0x002a38d8:	rts
003548:0x002a38e0:	call	
003548:0x002a38f0:	move	#return, #return
003548:0x002a3900:	rts
003550:0x002a3908:	call	
003550:0x002a3918:	move	#return, #return
003550:0x002a3928:	rts
003550:0x002a3930:	rts
DayZGame::SetHudBrightness()
003555:0x002a3938:	icall	SetLV(value)
003556:0x002a3948:	icall	SetTextLV(value)
003556:0x002a3958:	rts
DayZGame::GetHUDBrightnessSetting()
003561:0x002a3960:	call	
003561:0x002a3970:	move	#return, #return
003561:0x002a3980:	rts
003561:0x002a3988:	rts
DayZGame::CheckAmmoCompability()
003567:0x002a3ae0:	new	ammo_names, array<string>
003569:0x002a3b00:	call	
003569:0x002a3b10:	adds	@s01, _s'CfgWeapons ', #return
003569:0x002a3b20:	moves	@s00, @s01
003569:0x002a3b30:	adds	cfg_path, @s00, _s' chamberableFrom'
003570:0x002a3b40:	ncall	GetGame()
003570:0x002a3b48:	movefm	[0xb5bda188], ammo_names
003570:0x002a3b58:	ncalli	CGame.ConfigGetTextArray(cfg_path, [0xb5bda188])
003572:0x002a3b68:	ncalli	array<string>.Count()
003572:0x002a3b70:	move	#cnt, #return
003572:0x002a3b80:	imove	#key, 0x000000
003572:0x002a3b90:	jump	0x2a3ba0
003572:0x002a3b98:	inc	#key
003572:0x002a3ba0:	cmpi	#key, #cnt
003572:0x002a3bb0:	bge	0x2a3c38
003572:0x002a3bb8:	icall	
003572:0x002a3bc8:	moves	ammo_name, #return
003574:0x002a3bd8:	call	
003574:0x002a3be8:	moves	@s00, #return
003574:0x002a3bf8:	cmps	@s00, ammo_name
003574:0x002a3c08:	bne	0x2a3c30
003576:0x002a3c10:	imove	#return, 0x000001
003576:0x002a3c20:	release	ammo_names
003576:0x002a3c28:	rts
003576:0x002a3c30:	jump	0x2a3b98
003581:0x002a3c38:	imove	#return, 0x000000
003581:0x002a3c48:	release	ammo_names
003581:0x002a3c50:	rts
003581:0x002a3c58:	release	ammo_names
003581:0x002a3c60:	rts
DayZGame::SetEVValue()
003586:0x002a3c68:	move	m_PreviousEVValue, m_EVValue
003587:0x002a3c78:	ncalli	DayZGame.SetEVUser(value)
003588:0x002a3c88:	move	m_EVValue, value
003588:0x002a3c98:	rts
DayZGame::GetCurrentEVValue()
003593:0x002a3ca0:	move	#return, m_EVValue
003593:0x002a3cb0:	rts
003593:0x002a3cb8:	rts
DayZGame::GetPreviousEVValue()
003598:0x002a3cc0:	move	#return, m_PreviousEVValue
003598:0x002a3cd0:	rts
003598:0x002a3cd8:	rts
DayZGame::GetCurrentDisplayLanguageIdx()
003604:0x002a3d88:	new	options, GameOptions
003605:0x002a3da8:	ncalli	GameOptions.GetOptionByType(_i33)
003605:0x002a3db8:	icall	SafeCastType([0xb5b228c8], @c01, #return)
003605:0x002a3dd0:	movetm	language_option, @c01
003606:0x002a3de0:	imove	idx, 0xffffffff
003607:0x002a3df0:	cmpcm	language_option, null
003607:0x002a3e00:	beq	0x2a3e20
003609:0x002a3e08:	ncalli	ListOptionsAccess.GetIndex()
003609:0x002a3e10:	move	idx, #return
003612:0x002a3e20:	move	#return, idx
003612:0x002a3e30:	release	language_option
003612:0x002a3e38:	release	options
003612:0x002a3e40:	rts
003612:0x002a3e48:	release	language_option
003612:0x002a3e50:	release	options
003612:0x002a3e58:	rts
DayZGame::IsWorldWetTempUpdateEnabled()
003617:0x002a3e60:	move	#return, m_IsWorldWetTempUpdateEnabled
003617:0x002a3e70:	rts
003617:0x002a3e78:	rts
DayZGame::IsFoodDecayEnabled()
003622:0x002a3e80:	call	
003622:0x002a3e90:	move	@f00, #return
003622:0x002a3ea0:	cmpf	@f00, _f0.000000
003622:0x002a3eb0:	beq	0x2a3ed0
003622:0x002a3eb8:	imove	#return, 0x000001
003622:0x002a3ec8:	jump	0x2a3ee0
003622:0x002a3ed0:	imove	#return, 0x000000
003622:0x002a3ee0:	rts
003622:0x002a3ee8:	rts
DayZGame::GetFoodDecayModifier()
003634:0x002a3ef0:	move	#return, m_FoodDecayModifier
003634:0x002a3f00:	rts
003634:0x002a3f08:	rts
DayZGame::GetConnectedInputDeviceList()
003639:0x002a3f10:	cmpcm	m_ConnectedInputDeviceList, null
003639:0x002a3f20:	bne	0x2a3f48
003641:0x002a3f28:	new	m_ConnectedInputDeviceList, array<int>
003643:0x002a3f48:	movem	#return, m_ConnectedInputDeviceList
003643:0x002a3f58:	rts
003643:0x002a3f60:	rts
GetDayZGame()
003658:0x002a3f68:	movec	#return, g_Game
003658:0x002a3f78:	rts
003658:0x002a3f80:	rts
Hit_Textile::Hit_Textile()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_textile.c
000005:0x002a3f88:	call	
000006:0x002a3f98:	call	
000007:0x002a3fa8:	call	
000007:0x002a3fb8:	rts
LandmineExplosion::LandmineExplosion()
//scripts/3_Game/effects\effectparticle\landmineexplosion.c
000005:0x002a3fc0:	call	
000005:0x002a3fd0:	rts
CfgGameplayHandler::RegisterItem()
//scripts/3_Game/cfggameplayhandler.c
000011:0x002a3fd8:	movefm	@c00, item
000011:0x002a3fe8:	icall	
000011:0x002a3ff8:	rts
CfgGameplayHandler::ValidateItems()
000016:0x002a4120:	ncalli	array<@ITEM_DataBase>.Count()
000016:0x002a4128:	move	#cnt, #return
000016:0x002a4138:	imove	#key, 0x000000
000016:0x002a4148:	jump	0x2a4158
000016:0x002a4150:	inc	#key
000016:0x002a4158:	cmpi	#key, #cnt
000016:0x002a4168:	bge	0x2a4258
000016:0x002a4170:	icall	
000016:0x002a4180:	movetm	item, #return
000018:0x002a4190:	call	
000018:0x002a41a0:	cmpi	#return, _i0
000018:0x002a41b0:	bne	0x2a4250
000020:0x002a41b8:	movefm	[0xd315b998], item
000020:0x002a41c8:	ncall	Type([0xd315b998])
000020:0x002a41d8:	ncall	ToString(#return)
000020:0x002a41e8:	moves	itemName, #return
000021:0x002a41f8:	icall	Replace(itemName, _s'ITEM_', _s'')
000022:0x002a4210:	adds	@s01, _s'Validation failed during loading of 'cfgGameplay.json' for ', itemName
000022:0x002a4220:	moves	@s00, @s01
000022:0x002a4230:	icall	PrintToRPT(@s00)
000023:0x002a4240:	call	
000023:0x002a4250:	jump	0x2a4150
000023:0x002a4258:	release	item
000023:0x002a4260:	rts
CfgGameplayHandler::InitData()
000031:0x002a42e0:	ncalli	array<@ITEM_DataBase>.Count()
000031:0x002a42e8:	move	#cnt, #return
000031:0x002a42f8:	imove	#key, 0x000000
000031:0x002a4308:	jump	0x2a4318
000031:0x002a4310:	inc	#key
000031:0x002a4318:	cmpi	#key, #cnt
000031:0x002a4328:	bge	0x2a4368
000031:0x002a4330:	icall	
000031:0x002a4340:	movetm	item, #return
000033:0x002a4350:	call	
000033:0x002a4360:	jump	0x2a4310
000033:0x002a4368:	release	item
000033:0x002a4370:	rts
JsonFileLoader<CfgGameplayJson>::JsonLoadFile()
//scripts/3_Game/tools\jsonfileloader.c
000007:0x002a4650:	icall	FileExist(filename)
000007:0x002a4660:	cmpi	#return, _i0
000007:0x002a4670:	beq	0x2a47b0
000013:0x002a4678:	icall	OpenFile(filename, _i1)
000013:0x002a4688:	movea	handle, #return
000014:0x002a4698:	cmpc	handle, _i0
000014:0x002a46a8:	bne	0x2a46c8
000015:0x002a46b0:	movem	data, data
000015:0x002a46c0:	rts
000018:0x002a46c8:	icall	FGets(handle, line_content)
000018:0x002a46d8:	move	@m00, #return
000018:0x002a46e8:	cmpi	@m00, _i0
000018:0x002a46f8:	blt	0x2a4728
000020:0x002a4700:	moves	@s00, line_content
000020:0x002a4710:	adds	file_content, file_content, @s00
000020:0x002a4720:	jump	0x2a46c8
000023:0x002a4728:	icall	CloseFile(handle)
000025:0x002a4738:	cmpcm	m_Serializer, null
000025:0x002a4748:	bne	0x2a4770
000026:0x002a4750:	new	m_Serializer, JsonSerializer
000028:0x002a4770:	icall	
000028:0x002a4788:	cmpi	#return, _i0
000028:0x002a4798:	bne	0x2a47b0
000029:0x002a47a0:	call	Error(error)
000029:0x002a47b0:	movem	data, data
000029:0x002a47c0:	rts
JsonFileLoader<CfgGameplayJson>::JsonSaveFile()
000036:0x002a4818:	cmpcm	m_Serializer, null
000036:0x002a4828:	bne	0x2a4850
000037:0x002a4830:	new	m_Serializer, JsonSerializer
000039:0x002a4850:	icall	
000041:0x002a4868:	icall	OpenFile(filename, _i4)
000041:0x002a4878:	movea	handle, #return
000042:0x002a4888:	cmpc	handle, _i0
000042:0x002a4898:	bne	0x2a48a8
000043:0x002a48a0:	rts
000045:0x002a48a8:	icall	FPrint(handle, file_content)
000047:0x002a48b8:	icall	CloseFile(handle)
000047:0x002a48c8:	rts
JsonFileLoader<CfgGameplayJson>::JsonLoadData()
000053:0x002a48f8:	cmpcm	m_Serializer, null
000053:0x002a4908:	bne	0x2a4930
000054:0x002a4910:	new	m_Serializer, JsonSerializer
000056:0x002a4930:	icall	
000056:0x002a4948:	cmpi	#return, _i0
000056:0x002a4958:	bne	0x2a4970
000057:0x002a4960:	call	Error(error)
000057:0x002a4970:	movem	data, data
000057:0x002a4980:	rts
JsonFileLoader<CfgGameplayJson>::JsonMakeData()
000063:0x002a49b0:	cmpcm	m_Serializer, null
000063:0x002a49c0:	bne	0x2a49e8
000064:0x002a49c8:	new	m_Serializer, JsonSerializer
000066:0x002a49e8:	icall	
000067:0x002a4a00:	moves	#return, string_data
000067:0x002a4a10:	rts
000067:0x002a4a18:	rts
CfgGameplayHandler::LoadData()
//scripts/3_Game/cfggameplayhandler.c
000046:0x002a4a20:	icall	FileExist(m_Path)
000046:0x002a4a30:	cmpi	#return, _i0
000046:0x002a4a40:	bne	0x2a4ab0
000048:0x002a4a48:	moves	m_Path, _s''
000049:0x002a4a58:	ncall	GetGame()
000049:0x002a4a60:	icall	
000050:0x002a4a70:	icall	Format(_s'DZ/worlds/%1/ce/cfgGameplay.json', m_Path, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000050:0x002a4aa0:	moves	m_Path, #return
000053:0x002a4ab0:	ncall	GetGame()
000053:0x002a4ab8:	ncalli	CGame.ServerConfigGetInt(_s'enableCfgGameplayFile')
000053:0x002a4ac8:	cmpi	#return, _i0
000053:0x002a4ad8:	beq	0x2a4b08
000053:0x002a4ae0:	icall	FileExist(m_Path)
000053:0x002a4af0:	cmpi	#return, _i0
000053:0x002a4b00:	bne	0x2a4b50
000055:0x002a4b08:	call	
000056:0x002a4b18:	call	InitData()
000057:0x002a4b28:	call	OnLoaded()
000058:0x002a4b38:	imove	#return, 0x000000
000058:0x002a4b48:	rts
000061:0x002a4b50:	call	JsonLoadFile(m_Path, m_Data)
000061:0x002a4b68:	movem	m_Data, data
000061:0x002a4b78:	release	data
000062:0x002a4b80:	call	ValidateItems()
000063:0x002a4b90:	call	OnLoaded()
000065:0x002a4ba0:	imove	#return, 0x000001
000065:0x002a4bb0:	rts
000065:0x002a4bb8:	rts
CfgGameplayHandler::OnLoaded()
000071:0x002a4bc0:	ncall	GetGame()
000071:0x002a4bc8:	ncalli	CGame.GetMission()
000071:0x002a4bd0:	call	
000072:0x002a4be0:	ncall	GetGame()
000072:0x002a4be8:	icall	SafeCastType([0xb5b39920], @c00, #return)
000072:0x002a4c00:	call	
000072:0x002a4c10:	rts
Param1<CfgGameplayJson>::Param1()
//scripts/1_Core/param.c
000038:0x002a4d30:	movem	param1, p1
000038:0x002a4d40:	rts
Param1<CfgGameplayJson>::Serialize()
000043:0x002a4d48:	icall	
000043:0x002a4d58:	move	#return, #return
000043:0x002a4d68:	rts
000043:0x002a4d70:	rts
Param1<CfgGameplayJson>::Deserializer()
000048:0x002a4d78:	icall	
000048:0x002a4d88:	move	#return, #return
000048:0x002a4d98:	rts
000048:0x002a4da0:	rts
CfgGameplayHandler::SyncDataSend()
//scripts/3_Game/cfggameplayhandler.c
000078:0x002a4da8:	ncall	GetGame()
000078:0x002a4db0:	new	@c00, Param1<CfgGameplayJson>
000078:0x002a4dd8:	pushc	@c00
000078:0x002a4de0:	ncalli	Man.GetIdentity()
000078:0x002a4de8:	call	
000078:0x002a4e08:	popc	@c00
000078:0x002a4e10:	release	@c00
000078:0x002a4e18:	rts
CfgGameplayHandler::SyncDataSendEx()
000085:0x002a4e20:	ncall	GetGame()
000085:0x002a4e28:	movetm	target, null
000085:0x002a4e38:	new	@c00, Param1<CfgGameplayJson>
000085:0x002a4e60:	pushc	@c00
000085:0x002a4e68:	call	
000085:0x002a4e88:	popc	@c00
000085:0x002a4e90:	release	@c00
000085:0x002a4e98:	rts
CfgGameplayHandler::OnRPC()
000092:0x002a4ef0:	movetm	p1, null
000092:0x002a4f00:	new	data, Param1<CfgGameplayJson>
000094:0x002a4f28:	icall	
000094:0x002a4f38:	cmpi	#return, _i0
000094:0x002a4f48:	beq	0x2a4f78
000096:0x002a4f50:	movefm	@c01, data
000096:0x002a4f60:	movem	m_Data, param1
000096:0x002a4f70:	jump	0x2a4f88
000100:0x002a4f78:	icall	ErrorEx(_s'CfgGameplayHandler - client failed to read incoming data', _i2)
000100:0x002a4f88:	release	data
000100:0x002a4f90:	rts
CfgGameplayHandler::GetDisablePersonalLight()
000119:0x002a4f98:	movefm	@c00, m_Data
000119:0x002a4fa8:	movefm	[0xb5b3d1e8], PlayerData
000119:0x002a4fb8:	movec	@c01, [0xb5b3d1e8]
000119:0x002a4fc8:	move	#return, disablePersonalLight
000119:0x002a4fd8:	rts
000119:0x002a4fe0:	rts
CfgGameplayHandler::GetLightingConfig()
000126:0x002a4fe8:	movefm	@c00, m_Data
000126:0x002a4ff8:	movefm	[0xb5b38830], WorldsData
000126:0x002a5008:	movec	@c01, [0xb5b38830]
000126:0x002a5018:	move	#return, lightingConfig
000126:0x002a5028:	rts
000126:0x002a5030:	rts
CfgGameplayHandler::GetObjectSpawnersArr()
000131:0x002a5038:	movefm	@c01, m_Data
000131:0x002a5048:	movefm	[0xb5b38830], WorldsData
000131:0x002a5058:	movec	@c02, [0xb5b38830]
000131:0x002a5068:	movem	#return, objectSpawnersArr
000131:0x002a5078:	rts
000131:0x002a5080:	rts
CfgGameplayHandler::GetEnvironmentMinTemps()
000136:0x002a5088:	movefm	@c01, m_Data
000136:0x002a5098:	movefm	[0xb5b38830], WorldsData
000136:0x002a50a8:	movec	@c02, [0xb5b38830]
000136:0x002a50b8:	movem	#return, environmentMinTemps
000136:0x002a50c8:	rts
000136:0x002a50d0:	rts
CfgGameplayHandler::GetEnvironmentMaxTemps()
000141:0x002a50d8:	movefm	@c01, m_Data
000141:0x002a50e8:	movefm	[0xb5b38830], WorldsData
000141:0x002a50f8:	movec	@c02, [0xb5b38830]
000141:0x002a5108:	movem	#return, environmentMaxTemps
000141:0x002a5118:	rts
000141:0x002a5120:	rts
CfgGameplayHandler::GetWetnessWeightModifiers()
000145:0x002a5128:	movefm	@c01, m_Data
000145:0x002a5138:	movefm	[0xb5b38830], WorldsData
000145:0x002a5148:	movec	@c02, [0xb5b38830]
000145:0x002a5158:	movem	#return, wetnessWeightModifiers
000145:0x002a5168:	rts
000145:0x002a5170:	rts
CfgGameplayHandler::GetDisableBaseDamage()
000152:0x002a5178:	movefm	@c00, m_Data
000152:0x002a5188:	movefm	[0xb5b3f4d8], GeneralData
000152:0x002a5198:	movec	@c01, [0xb5b3f4d8]
000152:0x002a51a8:	move	#return, disableBaseDamage
000152:0x002a51b8:	rts
000152:0x002a51c0:	rts
CfgGameplayHandler::GetDisableContainerDamage()
000158:0x002a51c8:	movefm	@c00, m_Data
000158:0x002a51d8:	movefm	[0xb5b3f4d8], GeneralData
000158:0x002a51e8:	movec	@c01, [0xb5b3f4d8]
000158:0x002a51f8:	move	#return, disableContainerDamage
000158:0x002a5208:	rts
000158:0x002a5210:	rts
CfgGameplayHandler::GetDisableRespawnDialog()
000163:0x002a5218:	movefm	@c00, m_Data
000163:0x002a5228:	movefm	[0xb5b3f4d8], GeneralData
000163:0x002a5238:	movec	@c01, [0xb5b3f4d8]
000163:0x002a5248:	move	#return, disableRespawnDialog
000163:0x002a5258:	rts
000163:0x002a5260:	rts
CfgGameplayHandler::GetSprintStaminaModifierErc()
000168:0x002a5268:	movefm	@c00, m_Data
000168:0x002a5278:	movefm	[0xb5b3d1e8], PlayerData
000168:0x002a5288:	movec	@c01, [0xb5b3d1e8]
000168:0x002a5298:	movefm	[0xb5b3bbd0], StaminaData
000168:0x002a52a8:	movec	@c02, [0xb5b3bbd0]
000168:0x002a52b8:	move	#return, sprintStaminaModifierErc
000168:0x002a52c8:	rts
000168:0x002a52d0:	rts
CfgGameplayHandler::GetSprintStaminaModifierCro()
000173:0x002a52d8:	movefm	@c00, m_Data
000173:0x002a52e8:	movefm	[0xb5b3d1e8], PlayerData
000173:0x002a52f8:	movec	@c01, [0xb5b3d1e8]
000173:0x002a5308:	movefm	[0xb5b3bbd0], StaminaData
000173:0x002a5318:	movec	@c02, [0xb5b3bbd0]
000173:0x002a5328:	move	#return, sprintStaminaModifierCro
000173:0x002a5338:	rts
000173:0x002a5340:	rts
CfgGameplayHandler::GetSprintSwimmingStaminaModifier()
000178:0x002a5348:	movefm	@c00, m_Data
000178:0x002a5358:	movefm	[0xb5b3d1e8], PlayerData
000178:0x002a5368:	movec	@c01, [0xb5b3d1e8]
000178:0x002a5378:	movefm	[0xb5b3bbd0], StaminaData
000178:0x002a5388:	movec	@c02, [0xb5b3bbd0]
000178:0x002a5398:	move	#return, sprintSwimmingStaminaModifier
000178:0x002a53a8:	rts
000178:0x002a53b0:	rts
CfgGameplayHandler::GetSprintLadderStaminaModifier()
000182:0x002a53b8:	movefm	@c00, m_Data
000182:0x002a53c8:	movefm	[0xb5b3d1e8], PlayerData
000182:0x002a53d8:	movec	@c01, [0xb5b3d1e8]
000182:0x002a53e8:	movefm	[0xb5b3bbd0], StaminaData
000182:0x002a53f8:	movec	@c02, [0xb5b3bbd0]
000182:0x002a5408:	move	#return, sprintLadderStaminaModifier
000182:0x002a5418:	rts
000182:0x002a5420:	rts
CfgGameplayHandler::GetStaminaWeightLimitThreshold()
000187:0x002a5428:	movefm	@c00, m_Data
000187:0x002a5438:	movefm	[0xb5b3d1e8], PlayerData
000187:0x002a5448:	movec	@c01, [0xb5b3d1e8]
000187:0x002a5458:	movefm	[0xb5b3bbd0], StaminaData
000187:0x002a5468:	movec	@c02, [0xb5b3bbd0]
000187:0x002a5478:	move	#return, staminaWeightLimitThreshold
000187:0x002a5488:	rts
000187:0x002a5490:	rts
CfgGameplayHandler::GetStaminaMax()
000192:0x002a5498:	movefm	@c00, m_Data
000192:0x002a54a8:	movefm	[0xb5b3d1e8], PlayerData
000192:0x002a54b8:	movec	@c01, [0xb5b3d1e8]
000192:0x002a54c8:	movefm	[0xb5b3bbd0], StaminaData
000192:0x002a54d8:	movec	@c02, [0xb5b3bbd0]
000192:0x002a54e8:	move	#return, staminaMax
000192:0x002a54f8:	rts
000192:0x002a5500:	rts
CfgGameplayHandler::GetStaminaKgToStaminaPercentPenalty()
000197:0x002a5508:	movefm	@c00, m_Data
000197:0x002a5518:	movefm	[0xb5b3d1e8], PlayerData
000197:0x002a5528:	movec	@c01, [0xb5b3d1e8]
000197:0x002a5538:	movefm	[0xb5b3bbd0], StaminaData
000197:0x002a5548:	movec	@c02, [0xb5b3bbd0]
000197:0x002a5558:	move	#return, staminaKgToStaminaPercentPenalty
000197:0x002a5568:	rts
000197:0x002a5570:	rts
CfgGameplayHandler::GetStaminaMinCap()
000202:0x002a5578:	movefm	@c00, m_Data
000202:0x002a5588:	movefm	[0xb5b3d1e8], PlayerData
000202:0x002a5598:	movec	@c01, [0xb5b3d1e8]
000202:0x002a55a8:	movefm	[0xb5b3bbd0], StaminaData
000202:0x002a55b8:	movec	@c02, [0xb5b3bbd0]
000202:0x002a55c8:	move	#return, staminaMinCap
000202:0x002a55d8:	rts
000202:0x002a55e0:	rts
CfgGameplayHandler::GetMeleeStaminaModifier()
000207:0x002a55e8:	movefm	@c00, m_Data
000207:0x002a55f8:	movefm	[0xb5b3d1e8], PlayerData
000207:0x002a5608:	movec	@c01, [0xb5b3d1e8]
000207:0x002a5618:	movefm	[0xb5b3bbd0], StaminaData
000207:0x002a5628:	movec	@c02, [0xb5b3bbd0]
000207:0x002a5638:	move	#return, meleeStaminaModifier
000207:0x002a5648:	rts
000207:0x002a5650:	rts
CfgGameplayHandler::GetObstacleTraversalStaminaModifier()
000212:0x002a5658:	movefm	@c00, m_Data
000212:0x002a5668:	movefm	[0xb5b3d1e8], PlayerData
000212:0x002a5678:	movec	@c01, [0xb5b3d1e8]
000212:0x002a5688:	movefm	[0xb5b3bbd0], StaminaData
000212:0x002a5698:	movec	@c02, [0xb5b3bbd0]
000212:0x002a56a8:	move	#return, obstacleTraversalStaminaModifier
000212:0x002a56b8:	rts
000212:0x002a56c0:	rts
CfgGameplayHandler::GetHoldBreathStaminaModifier()
000217:0x002a56c8:	movefm	@c00, m_Data
000217:0x002a56d8:	movefm	[0xb5b3d1e8], PlayerData
000217:0x002a56e8:	movec	@c01, [0xb5b3d1e8]
000217:0x002a56f8:	movefm	[0xb5b3bbd0], StaminaData
000217:0x002a5708:	movec	@c02, [0xb5b3bbd0]
000217:0x002a5718:	move	#return, holdBreathStaminaModifier
000217:0x002a5728:	rts
000217:0x002a5730:	rts
CfgGameplayHandler::GetMovementTimeToStrafeJog()
000222:0x002a5738:	movefm	@c00, m_Data
000222:0x002a5748:	movefm	[0xb5b3d1e8], PlayerData
000222:0x002a5758:	movec	@c01, [0xb5b3d1e8]
000222:0x002a5768:	movefm	[0xb5b381c8], MovementData
000222:0x002a5778:	movec	@c02, [0xb5b381c8]
000222:0x002a5788:	icall	Max(_f0.010000, timeToStrafeJog)
000222:0x002a5798:	move	#return, #return
000222:0x002a57a8:	rts
000222:0x002a57b0:	rts
CfgGameplayHandler::GetMovementTimeToSprint()
000227:0x002a57b8:	movefm	@c00, m_Data
000227:0x002a57c8:	movefm	[0xb5b3d1e8], PlayerData
000227:0x002a57d8:	movec	@c01, [0xb5b3d1e8]
000227:0x002a57e8:	movefm	[0xb5b381c8], MovementData
000227:0x002a57f8:	movec	@c02, [0xb5b381c8]
000227:0x002a5808:	icall	Max(_f0.010000, timeToSprint)
000227:0x002a5818:	move	#return, #return
000227:0x002a5828:	rts
000227:0x002a5830:	rts
CfgGameplayHandler::GetMovementTimeToStrafeSprint()
000232:0x002a5838:	movefm	@c00, m_Data
000232:0x002a5848:	movefm	[0xb5b3d1e8], PlayerData
000232:0x002a5858:	movec	@c01, [0xb5b3d1e8]
000232:0x002a5868:	movefm	[0xb5b381c8], MovementData
000232:0x002a5878:	movec	@c02, [0xb5b381c8]
000232:0x002a5888:	icall	Max(_f0.010000, timeToStrafeSprint)
000232:0x002a5898:	move	#return, #return
000232:0x002a58a8:	rts
000232:0x002a58b0:	rts
CfgGameplayHandler::GetMovementRotationSpeedJog()
000237:0x002a58b8:	movefm	@c00, m_Data
000237:0x002a58c8:	movefm	[0xb5b3d1e8], PlayerData
000237:0x002a58d8:	movec	@c01, [0xb5b3d1e8]
000237:0x002a58e8:	movefm	[0xb5b381c8], MovementData
000237:0x002a58f8:	movec	@c02, [0xb5b381c8]
000237:0x002a5908:	icall	Max(_f0.010000, rotationSpeedJog)
000237:0x002a5918:	move	#return, #return
000237:0x002a5928:	rts
000237:0x002a5930:	rts
CfgGameplayHandler::GetMovementRotationSpeedSprint()
000242:0x002a5938:	movefm	@c00, m_Data
000242:0x002a5948:	movefm	[0xb5b3d1e8], PlayerData
000242:0x002a5958:	movec	@c01, [0xb5b3d1e8]
000242:0x002a5968:	movefm	[0xb5b381c8], MovementData
000242:0x002a5978:	movec	@c02, [0xb5b381c8]
000242:0x002a5988:	icall	Max(_f0.010000, rotationSpeedSprint)
000242:0x002a5998:	move	#return, #return
000242:0x002a59a8:	rts
000242:0x002a59b0:	rts
CfgGameplayHandler::GetDisable2dMap()
000247:0x002a59b8:	movefm	@c00, m_Data
000247:0x002a59c8:	movefm	[0xb5b3d1e8], PlayerData
000247:0x002a59d8:	movec	@c01, [0xb5b3d1e8]
000247:0x002a59e8:	move	#return, disable2dMap
000247:0x002a59f8:	rts
000247:0x002a5a00:	rts
CfgGameplayHandler::GetDisableIsCollidingBBoxCheck()
000252:0x002a5a08:	movefm	@c00, m_Data
000252:0x002a5a18:	movefm	[0xb5b37c08], BaseBuildingData
000252:0x002a5a28:	movec	@c01, [0xb5b37c08]
000252:0x002a5a38:	movefm	[0xb5b3dc10], HologramData
000252:0x002a5a48:	movec	@c02, [0xb5b3dc10]
000252:0x002a5a58:	move	#return, disableIsCollidingBBoxCheck
000252:0x002a5a68:	rts
000252:0x002a5a70:	rts
CfgGameplayHandler::GetDisableIsCollidingPlayerCheck()
000257:0x002a5a78:	movefm	@c00, m_Data
000257:0x002a5a88:	movefm	[0xb5b37c08], BaseBuildingData
000257:0x002a5a98:	movec	@c01, [0xb5b37c08]
000257:0x002a5aa8:	movefm	[0xb5b3dc10], HologramData
000257:0x002a5ab8:	movec	@c02, [0xb5b3dc10]
000257:0x002a5ac8:	move	#return, disableIsCollidingPlayerCheck
000257:0x002a5ad8:	rts
000257:0x002a5ae0:	rts
CfgGameplayHandler::GetDisableIsClippingRoofCheck()
000262:0x002a5ae8:	movefm	@c00, m_Data
000262:0x002a5af8:	movefm	[0xb5b37c08], BaseBuildingData
000262:0x002a5b08:	movec	@c01, [0xb5b37c08]
000262:0x002a5b18:	movefm	[0xb5b3dc10], HologramData
000262:0x002a5b28:	movec	@c02, [0xb5b3dc10]
000262:0x002a5b38:	move	#return, disableIsClippingRoofCheck
000262:0x002a5b48:	rts
000262:0x002a5b50:	rts
CfgGameplayHandler::GetDisableIsBaseViableCheck()
000267:0x002a5b58:	movefm	@c00, m_Data
000267:0x002a5b68:	movefm	[0xb5b37c08], BaseBuildingData
000267:0x002a5b78:	movec	@c01, [0xb5b37c08]
000267:0x002a5b88:	movefm	[0xb5b3dc10], HologramData
000267:0x002a5b98:	movec	@c02, [0xb5b3dc10]
000267:0x002a5ba8:	move	#return, disableIsBaseViableCheck
000267:0x002a5bb8:	rts
000267:0x002a5bc0:	rts
CfgGameplayHandler::GetDisableIsInTerrainCheck()
000272:0x002a5bc8:	movefm	@c00, m_Data
000272:0x002a5bd8:	movefm	[0xb5b37c08], BaseBuildingData
000272:0x002a5be8:	movec	@c01, [0xb5b37c08]
000272:0x002a5bf8:	movefm	[0xb5b3dc10], HologramData
000272:0x002a5c08:	movec	@c02, [0xb5b3dc10]
000272:0x002a5c18:	move	#return, disableIsInTerrainCheck
000272:0x002a5c28:	rts
000272:0x002a5c30:	rts
CfgGameplayHandler::GetDisableIsUnderwaterCheck()
000277:0x002a5c38:	movefm	@c00, m_Data
000277:0x002a5c48:	movefm	[0xb5b37c08], BaseBuildingData
000277:0x002a5c58:	movec	@c01, [0xb5b37c08]
000277:0x002a5c68:	movefm	[0xb5b3dc10], HologramData
000277:0x002a5c78:	movec	@c02, [0xb5b3dc10]
000277:0x002a5c88:	move	#return, disableIsUnderwaterCheck
000277:0x002a5c98:	rts
000277:0x002a5ca0:	rts
CfgGameplayHandler::GetDisableHeightPlacementCheck()
000282:0x002a5ca8:	movefm	@c00, m_Data
000282:0x002a5cb8:	movefm	[0xb5b37c08], BaseBuildingData
000282:0x002a5cc8:	movec	@c01, [0xb5b37c08]
000282:0x002a5cd8:	movefm	[0xb5b3dc10], HologramData
000282:0x002a5ce8:	movec	@c02, [0xb5b3dc10]
000282:0x002a5cf8:	move	#return, disableHeightPlacementCheck
000282:0x002a5d08:	rts
000282:0x002a5d10:	rts
CfgGameplayHandler::GetDisableIsPlacementPermittedCheck()
000287:0x002a5d18:	movefm	@c00, m_Data
000287:0x002a5d28:	movefm	[0xb5b37c08], BaseBuildingData
000287:0x002a5d38:	movec	@c01, [0xb5b37c08]
000287:0x002a5d48:	movefm	[0xb5b3dc10], HologramData
000287:0x002a5d58:	movec	@c02, [0xb5b3dc10]
000287:0x002a5d68:	move	#return, disableIsPlacementPermittedCheck
000287:0x002a5d78:	rts
000287:0x002a5d80:	rts
CfgGameplayHandler::GetDisableIsCollidingAngleCheck()
000292:0x002a5d88:	movefm	@c00, m_Data
000292:0x002a5d98:	movefm	[0xb5b37c08], BaseBuildingData
000292:0x002a5da8:	movec	@c01, [0xb5b37c08]
000292:0x002a5db8:	movefm	[0xb5b3dc10], HologramData
000292:0x002a5dc8:	movec	@c02, [0xb5b3dc10]
000292:0x002a5dd8:	move	#return, disableIsCollidingAngleCheck
000292:0x002a5de8:	rts
000292:0x002a5df0:	rts
CfgGameplayHandler::GetDisableIsCollidingGPlotCheck()
000297:0x002a5df8:	movefm	@c00, m_Data
000297:0x002a5e08:	movefm	[0xb5b37c08], BaseBuildingData
000297:0x002a5e18:	movec	@c01, [0xb5b37c08]
000297:0x002a5e28:	movefm	[0xb5b3dc10], HologramData
000297:0x002a5e38:	movec	@c02, [0xb5b3dc10]
000297:0x002a5e48:	move	#return, disableIsCollidingGPlotCheck
000297:0x002a5e58:	rts
000297:0x002a5e60:	rts
CfgGameplayHandler::GetDisableIsCollidingCheck()
000302:0x002a5e68:	movefm	@c00, m_Data
000302:0x002a5e78:	movefm	[0xb5b37c08], BaseBuildingData
000302:0x002a5e88:	movec	@c01, [0xb5b37c08]
000302:0x002a5e98:	movefm	[0xb5b3e360], ConstructionData
000302:0x002a5ea8:	movec	@c02, [0xb5b3e360]
000302:0x002a5eb8:	move	#return, disableIsCollidingCheck
000302:0x002a5ec8:	rts
000302:0x002a5ed0:	rts
CfgGameplayHandler::GetDisablePerformRoofCheck()
000307:0x002a5ed8:	movefm	@c00, m_Data
000307:0x002a5ee8:	movefm	[0xb5b37c08], BaseBuildingData
000307:0x002a5ef8:	movec	@c01, [0xb5b37c08]
000307:0x002a5f08:	movefm	[0xb5b3e360], ConstructionData
000307:0x002a5f18:	movec	@c02, [0xb5b3e360]
000307:0x002a5f28:	move	#return, disablePerformRoofCheck
000307:0x002a5f38:	rts
000307:0x002a5f40:	rts
CfgGameplayHandler::GetDisableDistanceCheck()
000312:0x002a5f48:	movefm	@c00, m_Data
000312:0x002a5f58:	movefm	[0xb5b37c08], BaseBuildingData
000312:0x002a5f68:	movec	@c01, [0xb5b37c08]
000312:0x002a5f78:	movefm	[0xb5b3e360], ConstructionData
000312:0x002a5f88:	movec	@c02, [0xb5b3e360]
000312:0x002a5f98:	move	#return, disableDistanceCheck
000312:0x002a5fa8:	rts
000312:0x002a5fb0:	rts
CfgGameplayHandler::GetHitIndicationOverrideEnabled()
000317:0x002a5fb8:	movefm	@c00, m_Data
000317:0x002a5fc8:	movefm	[0xb5b37f28], UIData
000317:0x002a5fd8:	movec	@c01, [0xb5b37f28]
000317:0x002a5fe8:	movefm	[0xb5b3d6a0], HitIndicationData
000317:0x002a5ff8:	movec	@c02, [0xb5b3d6a0]
000317:0x002a6008:	move	#return, hitDirectionOverrideEnabled
000317:0x002a6018:	rts
000317:0x002a6020:	rts
CfgGameplayHandler::GetHitIndicationMode()
000322:0x002a6028:	movefm	@c00, m_Data
000322:0x002a6038:	movefm	[0xb5b37f28], UIData
000322:0x002a6048:	movec	@c01, [0xb5b37f28]
000322:0x002a6058:	movefm	[0xb5b3d6a0], HitIndicationData
000322:0x002a6068:	movec	@c02, [0xb5b3d6a0]
000322:0x002a6078:	move	#return, hitDirectionBehaviour
000322:0x002a6088:	rts
000322:0x002a6090:	rts
CfgGameplayHandler::GetHitIndicationTypeID()
000327:0x002a6098:	movefm	@c00, m_Data
000327:0x002a60a8:	movefm	[0xb5b37f28], UIData
000327:0x002a60b8:	movec	@c01, [0xb5b37f28]
000327:0x002a60c8:	movefm	[0xb5b3d6a0], HitIndicationData
000327:0x002a60d8:	movec	@c02, [0xb5b3d6a0]
000327:0x002a60e8:	move	#return, hitDirectionStyle
000327:0x002a60f8:	rts
000327:0x002a6100:	rts
CfgGameplayHandler::GetHitIndicationIndicatorColor()
000332:0x002a6108:	movefm	@c00, m_Data
000332:0x002a6118:	movefm	[0xb5b37f28], UIData
000332:0x002a6128:	movec	@c01, [0xb5b37f28]
000332:0x002a6138:	movefm	[0xb5b3d6a0], HitIndicationData
000332:0x002a6148:	movec	@c02, [0xb5b3d6a0]
000332:0x002a6158:	moves	[0xd315cc48], hitDirectionIndicatorColorStr
000332:0x002a6168:	ncall	HexToInt([0xd315cc48])
000332:0x002a6178:	move	#return, #return
000332:0x002a6188:	rts
000332:0x002a6190:	rts
CfgGameplayHandler::GetHitIndicationMaxDuration()
000337:0x002a6198:	movefm	@c00, m_Data
000337:0x002a61a8:	movefm	[0xb5b37f28], UIData
000337:0x002a61b8:	movec	@c01, [0xb5b37f28]
000337:0x002a61c8:	movefm	[0xb5b3d6a0], HitIndicationData
000337:0x002a61d8:	movec	@c02, [0xb5b3d6a0]
000337:0x002a61e8:	move	#return, hitDirectionMaxDuration
000337:0x002a61f8:	rts
000337:0x002a6200:	rts
CfgGameplayHandler::GetHitIndicationBreakPoint()
000342:0x002a6208:	movefm	@c00, m_Data
000342:0x002a6218:	movefm	[0xb5b37f28], UIData
000342:0x002a6228:	movec	@c01, [0xb5b37f28]
000342:0x002a6238:	movefm	[0xb5b3d6a0], HitIndicationData
000342:0x002a6248:	movec	@c02, [0xb5b3d6a0]
000342:0x002a6258:	move	#return, hitDirectionBreakPointRelative
000342:0x002a6268:	rts
000342:0x002a6270:	rts
CfgGameplayHandler::GetHitIndicationScatter()
000347:0x002a6278:	movefm	@c00, m_Data
000347:0x002a6288:	movefm	[0xb5b37f28], UIData
000347:0x002a6298:	movec	@c01, [0xb5b37f28]
000347:0x002a62a8:	movefm	[0xb5b3d6a0], HitIndicationData
000347:0x002a62b8:	movec	@c02, [0xb5b3d6a0]
000347:0x002a62c8:	move	#return, hitDirectionScatter
000347:0x002a62d8:	rts
000347:0x002a62e0:	rts
CfgGameplayHandler::GetHitIndicationPPEEnabled()
000352:0x002a62e8:	movefm	@c00, m_Data
000352:0x002a62f8:	movefm	[0xb5b37f28], UIData
000352:0x002a6308:	movec	@c01, [0xb5b37f28]
000352:0x002a6318:	movefm	[0xb5b3d6a0], HitIndicationData
000352:0x002a6328:	movec	@c02, [0xb5b3d6a0]
000352:0x002a6338:	move	#return, hitIndicationPostProcessEnabled
000352:0x002a6348:	rts
000352:0x002a6350:	rts
CfgGameplayHandler::GetUse3DMap()
000357:0x002a6358:	movefm	@c00, m_Data
000357:0x002a6368:	movefm	[0xb5b37f28], UIData
000357:0x002a6378:	movec	@c01, [0xb5b37f28]
000357:0x002a6388:	move	#return, use3DMap
000357:0x002a6398:	rts
000357:0x002a63a0:	rts
CfgGameplayHandler::GetShockRefillSpeedConscious()
000362:0x002a63a8:	movefm	@c00, m_Data
000362:0x002a63b8:	movefm	[0xb5b3d1e8], PlayerData
000362:0x002a63c8:	movec	@c01, [0xb5b3d1e8]
000362:0x002a63d8:	movefm	[0xb5b36ef0], ShockHandlingData
000362:0x002a63e8:	movec	@c02, [0xb5b36ef0]
000362:0x002a63f8:	move	#return, shockRefillSpeedConscious
000362:0x002a6408:	rts
000362:0x002a6410:	rts
CfgGameplayHandler::GetShockRefillSpeedUnconscious()
000367:0x002a6418:	movefm	@c00, m_Data
000367:0x002a6428:	movefm	[0xb5b3d1e8], PlayerData
000367:0x002a6438:	movec	@c01, [0xb5b3d1e8]
000367:0x002a6448:	movefm	[0xb5b36ef0], ShockHandlingData
000367:0x002a6458:	movec	@c02, [0xb5b36ef0]
000367:0x002a6468:	move	#return, shockRefillSpeedUnconscious
000367:0x002a6478:	rts
000367:0x002a6480:	rts
CfgGameplayHandler::GetAllowRefillSpeedModifier()
000372:0x002a6488:	movefm	@c00, m_Data
000372:0x002a6498:	movefm	[0xb5b3d1e8], PlayerData
000372:0x002a64a8:	movec	@c01, [0xb5b3d1e8]
000372:0x002a64b8:	movefm	[0xb5b36ef0], ShockHandlingData
000372:0x002a64c8:	movec	@c02, [0xb5b36ef0]
000372:0x002a64d8:	move	#return, allowRefillSpeedModifier
000372:0x002a64e8:	rts
000372:0x002a64f0:	rts
CfgGameplayHandler::GetMapIgnoreMapOwnership()
000378:0x002a64f8:	movefm	@c00, m_Data
000378:0x002a6508:	movefm	[0xb5b380a8], MapData
000378:0x002a6518:	movec	@c01, [0xb5b380a8]
000378:0x002a6528:	move	#return, ignoreMapOwnership
000378:0x002a6538:	rts
000378:0x002a6540:	rts
CfgGameplayHandler::GetMapIgnoreNavItemsOwnership()
000383:0x002a6548:	movefm	@c00, m_Data
000383:0x002a6558:	movefm	[0xb5b380a8], MapData
000383:0x002a6568:	movec	@c01, [0xb5b380a8]
000383:0x002a6578:	move	#return, ignoreNavItemsOwnership
000383:0x002a6588:	rts
000383:0x002a6590:	rts
CfgGameplayHandler::GetMapDisplayPlayerPosition()
000388:0x002a6598:	movefm	@c00, m_Data
000388:0x002a65a8:	movefm	[0xb5b380a8], MapData
000388:0x002a65b8:	movec	@c01, [0xb5b380a8]
000388:0x002a65c8:	move	#return, displayPlayerPosition
000388:0x002a65d8:	rts
000388:0x002a65e0:	rts
CfgGameplayHandler::GetMapDisplayNavigationInfo()
000393:0x002a65e8:	movefm	@c00, m_Data
000393:0x002a65f8:	movefm	[0xb5b380a8], MapData
000393:0x002a6608:	movec	@c01, [0xb5b380a8]
000393:0x002a6618:	move	#return, displayNavInfo
000393:0x002a6628:	rts
000393:0x002a6630:	rts
CfgGameplayHandler::GetStaminaDepletionSpeed()
000398:0x002a6638:	movefm	@c00, m_Data
000398:0x002a6648:	movefm	[0xb5b3d1e8], PlayerData
000398:0x002a6658:	movec	@c01, [0xb5b3d1e8]
000398:0x002a6668:	movefm	[0xb5b39ab0], DrowningData
000398:0x002a6678:	movec	@c02, [0xb5b39ab0]
000398:0x002a6688:	move	#return, staminaDepletionSpeed
000398:0x002a6698:	rts
000398:0x002a66a0:	rts
CfgGameplayHandler::GetHealthDepletionSpeed()
000403:0x002a66a8:	movefm	@c00, m_Data
000403:0x002a66b8:	movefm	[0xb5b3d1e8], PlayerData
000403:0x002a66c8:	movec	@c01, [0xb5b3d1e8]
000403:0x002a66d8:	movefm	[0xb5b39ab0], DrowningData
000403:0x002a66e8:	movec	@c02, [0xb5b39ab0]
000403:0x002a66f8:	move	#return, healthDepletionSpeed
000403:0x002a6708:	rts
000403:0x002a6710:	rts
CfgGameplayHandler::GetShockDepletionSpeed()
000408:0x002a6718:	movefm	@c00, m_Data
000408:0x002a6728:	movefm	[0xb5b3d1e8], PlayerData
000408:0x002a6738:	movec	@c01, [0xb5b3d1e8]
000408:0x002a6748:	movefm	[0xb5b39ab0], DrowningData
000408:0x002a6758:	movec	@c02, [0xb5b39ab0]
000408:0x002a6768:	move	#return, shockDepletionSpeed
000408:0x002a6778:	rts
000408:0x002a6780:	rts
CfgGameplayHandler::GetAllowStaminaAffectInertia()
000413:0x002a6788:	movefm	@c00, m_Data
000413:0x002a6798:	movefm	[0xb5b3d1e8], PlayerData
000413:0x002a67a8:	movec	@c01, [0xb5b3d1e8]
000413:0x002a67b8:	movefm	[0xb5b381c8], MovementData
000413:0x002a67c8:	movec	@c02, [0xb5b381c8]
000413:0x002a67d8:	move	#return, allowStaminaAffectInertia
000413:0x002a67e8:	rts
000413:0x002a67f0:	rts
CreateGame()
//scripts/3_Game/game.c
000007:0x002a67f8:	new	g_Game, DayZGame
000008:0x002a6818:	movec	#return, g_Game
000008:0x002a6828:	rts
000008:0x002a6830:	rts
SizeToChild::OnWidgetScriptInit()
//scripts/3_Game/gui\containers\sizetochild.c
000016:0x002a6838:	movem	m_Root, w
000018:0x002a6848:	moves	[0xd3160550], m_ChildName
000018:0x002a6858:	movefm	[0xd31345a8], m_Root
000018:0x002a6868:	ncalli	Widget.FindAnyWidget([0xd3160550])
000018:0x002a6878:	movetm	m_Child, #return
000019:0x002a6888:	cmpcm	m_Child, null
000019:0x002a6898:	beq	0x2a68b0
000021:0x002a68a0:	call	
000021:0x002a68b0:	rts
SizeToChild::ResizeParentToChild()
000027:0x002a68b8:	call	
000027:0x002a68d0:	move	m_IgnoredBool, changed_size
000027:0x002a68e0:	move	#return, #return
000027:0x002a68f0:	rts
000027:0x002a68f8:	rts
SizeToChild::ResizeParentToChild#167889()
000033:0x002a6b88:	cmpcm	m_Child, null
000033:0x002a6b98:	beq	0x2a6e08
000035:0x002a6ba0:	movefm	[0xd31345a8], m_Child
000035:0x002a6bb0:	ncalli	Widget.Update()
000036:0x002a6bb8:	movefm	[0xd31345a8], m_Child
000036:0x002a6bc8:	icall	
000037:0x002a6bd8:	movefm	[0xd31345a8], m_Root
000037:0x002a6be8:	icall	
000038:0x002a6bf8:	movefm	[0xd31345a8], m_Root
000038:0x002a6c08:	icall	
000040:0x002a6c18:	imove	changed, 0x000000
000041:0x002a6c28:	imove	hit_limit, 0x000000
000043:0x002a6c38:	cmpi	m_ResizeHorizontal, _i0
000043:0x002a6c48:	beq	0x2a6ca0
000043:0x002a6c50:	cmpf	x, new_x
000043:0x002a6c60:	beq	0x2a6ca0
000045:0x002a6c68:	addf	@f00, x, m_HorizontalOffset
000045:0x002a6c78:	move	new_x, @f00
000046:0x002a6c88:	imove	changed, 0x000001
000046:0x002a6c98:	jump	0x2a6cb0
000049:0x002a6ca0:	move	new_x, o_x
000051:0x002a6cb0:	cmpi	m_ResizeVertical, _i0
000051:0x002a6cc0:	beq	0x2a6d18
000051:0x002a6cc8:	cmpf	y, new_y
000051:0x002a6cd8:	beq	0x2a6d18
000053:0x002a6ce0:	addf	@f00, y, m_VerticalOffset
000053:0x002a6cf0:	move	new_y, @f00
000054:0x002a6d00:	imove	changed, 0x000001
000054:0x002a6d10:	jump	0x2a6d28
000057:0x002a6d18:	move	new_y, o_y
000059:0x002a6d28:	cmpi	limit, _i0
000059:0x002a6d38:	ble	0x2a6d88
000059:0x002a6d40:	citf	@f00, limit
000059:0x002a6d50:	cmpf	new_y, @f00
000059:0x002a6d60:	ble	0x2a6d88
000061:0x002a6d68:	citf	new_y, limit
000062:0x002a6d78:	imove	hit_limit, 0x000001
000065:0x002a6d88:	cmpi	changed, _i0
000065:0x002a6d98:	beq	0x2a6dc8
000067:0x002a6da0:	movefm	[0xd31345a8], m_Root
000067:0x002a6db0:	ncalli	Widget.SetSize(new_x, new_y, immedUpdate)
000070:0x002a6dc8:	move	changed_size, changed
000071:0x002a6dd8:	move	#return, hit_limit
000071:0x002a6de8:	move	changed_size, changed_size
000071:0x002a6df8:	rts
000071:0x002a6e00:	jump	0x2a6ee8
000075:0x002a6e08:	moves	[0xd3160550], m_ChildName
000075:0x002a6e18:	movefm	[0xd31345a8], m_Root
000075:0x002a6e28:	ncalli	Widget.FindAnyWidget([0xd3160550])
000075:0x002a6e38:	movetm	m_Child, #return
000076:0x002a6e48:	cmpcm	m_Child, null
000076:0x002a6e58:	bne	0x2a6ee8
000078:0x002a6e60:	movefm	[0xd31345a8], m_Root
000078:0x002a6e70:	ncalli	Widget.GetName()
000078:0x002a6e78:	adds	@s01, _s'Error in size to child, ', #return
000078:0x002a6e88:	moves	@s00, @s01
000078:0x002a6e98:	adds	@s00, @s00, _s' has no child named '
000078:0x002a6ea8:	moves	@s01, @s00
000078:0x002a6eb8:	adds	@s01, @s01, m_ChildName
000078:0x002a6ec8:	moves	@s00, @s01
000078:0x002a6ed8:	icall	Print(@s00)
000082:0x002a6ee8:	imove	#return, 0x000000
000082:0x002a6ef8:	move	changed_size, changed_size
000082:0x002a6f08:	rts
000082:0x002a6f10:	move	changed_size, changed_size
000082:0x002a6f20:	rts
SizeToParent::OnWidgetScriptInit()
000096:0x002a6f88:	movem	m_Root, w
000098:0x002a6f98:	cmpi	m_ResizeHorizontal, _i0
000098:0x002a6fa8:	beq	0x2a6fd0
000099:0x002a6fb0:	movefm	[0xd31345a8], m_Root
000099:0x002a6fc0:	ncalli	Widget.ClearFlags(_i16, _i1)
000100:0x002a6fd0:	cmpi	m_ResizeVertical, _i0
000100:0x002a6fe0:	beq	0x2a7008
000101:0x002a6fe8:	movefm	[0xd31345a8], m_Root
000101:0x002a6ff8:	ncalli	Widget.ClearFlags(_i32, _i1)
000103:0x002a7008:	movefm	[0xd31345a8], m_Root
000103:0x002a7018:	ncalli	Widget.GetParent()
000103:0x002a7020:	movetm	m_Parent, #return
000105:0x002a7030:	call	
000105:0x002a7040:	rts
SizeToParent::Refresh()
000111:0x002a7160:	movefm	[0xd31345a8], m_Parent
000111:0x002a7170:	ncalli	Widget.Update()
000112:0x002a7178:	movefm	[0xd31345a8], m_Parent
000112:0x002a7188:	icall	
000113:0x002a7198:	movefm	[0xd31345a8], m_Root
000113:0x002a71a8:	icall	
000114:0x002a71b8:	movefm	[0xd31345a8], m_Root
000114:0x002a71c8:	icall	
000116:0x002a71d8:	imove	changed, 0x000000
000118:0x002a71e8:	cmpi	m_ResizeHorizontal, _i0
000118:0x002a71f8:	beq	0x2a7240
000118:0x002a7200:	cmpf	x, new_x
000118:0x002a7210:	beq	0x2a7240
000120:0x002a7218:	move	new_x, x
000121:0x002a7228:	imove	changed, 0x000001
000121:0x002a7238:	jump	0x2a7250
000124:0x002a7240:	move	new_x, o_x
000126:0x002a7250:	cmpi	m_ResizeVertical, _i0
000126:0x002a7260:	beq	0x2a72a8
000126:0x002a7268:	cmpf	y, new_y
000126:0x002a7278:	beq	0x2a72a8
000128:0x002a7280:	move	new_y, y
000129:0x002a7290:	imove	changed, 0x000001
000129:0x002a72a0:	jump	0x2a72b8
000132:0x002a72a8:	move	new_y, o_y
000134:0x002a72b8:	cmpi	changed, _i0
000134:0x002a72c8:	beq	0x2a72f8
000135:0x002a72d0:	movefm	[0xd31345a8], m_Root
000135:0x002a72e0:	ncalli	Widget.SetSize(new_x, new_y, _i1)
000135:0x002a72f8:	rts
Easing::EaseInSine()
//scripts/3_Game/static\easing.c
000006:0x002a7300:	imove	@f04, 1.57080
000006:0x002a7310:	move	@f03, @f04
000006:0x002a7320:	mulf	@f03, t, @f03
000006:0x002a7330:	move	@f02, @f03
000006:0x002a7340:	icall	Cos(@f02)
000006:0x002a7350:	mulf	@f01, _f-1.000000, #return
000006:0x002a7360:	move	@f00, @f01
000006:0x002a7370:	addf	#return, @f00, _f1.000000
000006:0x002a7380:	rts
000006:0x002a7388:	rts
Easing::EaseOutSine()
000011:0x002a7390:	imove	@f03, 1.57080
000011:0x002a73a0:	move	@f02, @f03
000011:0x002a73b0:	mulf	@f02, t, @f02
000011:0x002a73c0:	move	@f01, @f02
000011:0x002a73d0:	icall	Sin(@f01)
000011:0x002a73e0:	move	#return, #return
000011:0x002a73f0:	rts
000011:0x002a73f8:	rts
Easing::EaseInOutSine()
000016:0x002a7428:	mulf	@f03, PI, t
000016:0x002a7438:	move	@f02, @f03
000016:0x002a7448:	icall	Cos(@f02)
000016:0x002a7458:	subf	@f01, #return, _f1.000000
000016:0x002a7468:	move	@f00, @f01
000016:0x002a7478:	mulf	#return, _f-0.500000, @f00
000016:0x002a7488:	rts
000016:0x002a7490:	rts
Easing::EaseInQuad()
000021:0x002a7498:	mulf	#return, t, t
000021:0x002a74a8:	rts
000021:0x002a74b0:	rts
Easing::EaseOutQuad()
000026:0x002a74b8:	subf	@f01, _f2.000000, t
000026:0x002a74c8:	move	@f00, @f01
000026:0x002a74d8:	mulf	#return, t, @f00
000026:0x002a74e8:	rts
000026:0x002a74f0:	rts
Easing::EaseInOutQuad()
000031:0x002a74f8:	cmpf	t, _f0.500000
000031:0x002a7508:	bge	0x2a7550
000032:0x002a7510:	mulf	@f01, _f2.000000, t
000032:0x002a7520:	move	@f00, @f01
000032:0x002a7530:	mulf	#return, @f00, t
000032:0x002a7540:	rts
000032:0x002a7548:	jump	0x2a75c8
000034:0x002a7550:	mulf	@f03, _f2.000000, t
000034:0x002a7560:	move	@f02, @f03
000034:0x002a7570:	subf	@f02, _f4.000000, @f02
000034:0x002a7580:	move	@f01, @f02
000034:0x002a7590:	mulf	@f01, @f01, t
000034:0x002a75a0:	move	@f00, @f01
000034:0x002a75b0:	addf	#return, _f-1.000000, @f00
000034:0x002a75c0:	rts
000034:0x002a75c8:	rts
Easing::EaseInCubic()
000039:0x002a75d0:	mulf	@f01, t, t
000039:0x002a75e0:	move	@f00, @f01
000039:0x002a75f0:	mulf	#return, @f00, t
000039:0x002a7600:	rts
000039:0x002a7608:	rts
Easing::EaseOutCubic()
000044:0x002a7660:	subf	t1, t, _f1.000000
000045:0x002a7670:	mulf	@f02, t1, t1
000045:0x002a7680:	move	@f01, @f02
000045:0x002a7690:	mulf	@f01, @f01, t1
000045:0x002a76a0:	move	@f00, @f01
000045:0x002a76b0:	addf	#return, @f00, _f1.000000
000045:0x002a76c0:	rts
000045:0x002a76c8:	rts
Easing::EaseInOutCubic()
000050:0x002a76d0:	cmpf	t, _f0.500000
000050:0x002a76e0:	bge	0x2a7748
000051:0x002a76e8:	mulf	@f02, _f4.000000, t
000051:0x002a76f8:	move	@f01, @f02
000051:0x002a7708:	mulf	@f01, @f01, t
000051:0x002a7718:	move	@f00, @f01
000051:0x002a7728:	mulf	#return, @f00, t
000051:0x002a7738:	rts
000051:0x002a7740:	jump	0x2a7840
000053:0x002a7748:	subf	@f03, t, _f1.000000
000053:0x002a7758:	move	@f02, @f03
000053:0x002a7768:	mulf	@f05, _f2.000000, t
000053:0x002a7778:	move	@f04, @f05
000053:0x002a7788:	subf	@f04, @f04, _f2.000000
000053:0x002a7798:	move	@f03, @f04
000053:0x002a77a8:	mulf	@f02, @f02, @f03
000053:0x002a77b8:	move	@f01, @f02
000053:0x002a77c8:	mulf	@f04, _f2.000000, t
000053:0x002a77d8:	move	@f03, @f04
000053:0x002a77e8:	subf	@f03, @f03, _f2.000000
000053:0x002a77f8:	move	@f02, @f03
000053:0x002a7808:	mulf	@f01, @f01, @f02
000053:0x002a7818:	move	@f00, @f01
000053:0x002a7828:	addf	#return, @f00, _f1.000000
000053:0x002a7838:	rts
000053:0x002a7840:	rts
Easing::EaseInQuart()
000058:0x002a7848:	mulf	@f02, t, t
000058:0x002a7858:	move	@f01, @f02
000058:0x002a7868:	mulf	@f01, @f01, t
000058:0x002a7878:	move	@f00, @f01
000058:0x002a7888:	mulf	#return, @f00, t
000058:0x002a7898:	rts
000058:0x002a78a0:	rts
Easing::EaseOutQuart()
000063:0x002a78d0:	subf	t1, t, _f1.000000
000064:0x002a78e0:	mulf	@f03, t1, t1
000064:0x002a78f0:	move	@f02, @f03
000064:0x002a7900:	mulf	@f02, @f02, t1
000064:0x002a7910:	move	@f01, @f02
000064:0x002a7920:	mulf	@f01, @f01, t1
000064:0x002a7930:	move	@f00, @f01
000064:0x002a7940:	subf	#return, _f1.000000, @f00
000064:0x002a7950:	rts
000064:0x002a7958:	rts
Easing::EaseInOutQuart()
000070:0x002a7988:	subf	t1, t, _f1.000000
000072:0x002a7998:	cmpf	t, _f0.500000
000072:0x002a79a8:	bge	0x2a7a30
000073:0x002a79b0:	mulf	@f03, _f8.000000, t
000073:0x002a79c0:	move	@f02, @f03
000073:0x002a79d0:	mulf	@f02, @f02, t
000073:0x002a79e0:	move	@f01, @f02
000073:0x002a79f0:	mulf	@f01, @f01, t
000073:0x002a7a00:	move	@f00, @f01
000073:0x002a7a10:	mulf	#return, @f00, t
000073:0x002a7a20:	rts
000073:0x002a7a28:	jump	0x2a7ac8
000075:0x002a7a30:	mulf	@f04, _f8.000000, t1
000075:0x002a7a40:	move	@f03, @f04
000075:0x002a7a50:	mulf	@f03, @f03, t1
000075:0x002a7a60:	move	@f02, @f03
000075:0x002a7a70:	mulf	@f02, @f02, t1
000075:0x002a7a80:	move	@f01, @f02
000075:0x002a7a90:	mulf	@f01, @f01, t1
000075:0x002a7aa0:	move	@f00, @f01
000075:0x002a7ab0:	subf	#return, _f1.000000, @f00
000075:0x002a7ac0:	rts
000075:0x002a7ac8:	rts
Easing::EaseInQuint()
000080:0x002a7ad0:	mulf	@f03, t, t
000080:0x002a7ae0:	move	@f02, @f03
000080:0x002a7af0:	mulf	@f02, @f02, t
000080:0x002a7b00:	move	@f01, @f02
000080:0x002a7b10:	mulf	@f01, @f01, t
000080:0x002a7b20:	move	@f00, @f01
000080:0x002a7b30:	mulf	#return, @f00, t
000080:0x002a7b40:	rts
000080:0x002a7b48:	rts
Easing::EaseOutQuint()
000085:0x002a7b78:	subf	t1, t, _f1.000000
000086:0x002a7b88:	mulf	@f04, t1, t1
000086:0x002a7b98:	move	@f03, @f04
000086:0x002a7ba8:	mulf	@f03, @f03, t1
000086:0x002a7bb8:	move	@f02, @f03
000086:0x002a7bc8:	mulf	@f02, @f02, t1
000086:0x002a7bd8:	move	@f01, @f02
000086:0x002a7be8:	mulf	@f01, @f01, t1
000086:0x002a7bf8:	move	@f00, @f01
000086:0x002a7c08:	addf	#return, _f1.000000, @f00
000086:0x002a7c18:	rts
000086:0x002a7c20:	rts
Easing::EaseInOutQuint()
000091:0x002a7c78:	subf	t1, t, _f1.000000
000093:0x002a7c88:	cmpf	t, _f0.500000
000093:0x002a7c98:	bge	0x2a7d40
000095:0x002a7ca0:	mulf	@f04, _f16.000000, t
000095:0x002a7cb0:	move	@f03, @f04
000095:0x002a7cc0:	mulf	@f03, @f03, t
000095:0x002a7cd0:	move	@f02, @f03
000095:0x002a7ce0:	mulf	@f02, @f02, t
000095:0x002a7cf0:	move	@f01, @f02
000095:0x002a7d00:	mulf	@f01, @f01, t
000095:0x002a7d10:	move	@f00, @f01
000095:0x002a7d20:	mulf	#return, @f00, t
000095:0x002a7d30:	rts
000095:0x002a7d38:	jump	0x2a7df8
000099:0x002a7d40:	mulf	@f05, _f16.000000, t1
000099:0x002a7d50:	move	@f04, @f05
000099:0x002a7d60:	mulf	@f04, @f04, t1
000099:0x002a7d70:	move	@f03, @f04
000099:0x002a7d80:	mulf	@f03, @f03, t1
000099:0x002a7d90:	move	@f02, @f03
000099:0x002a7da0:	mulf	@f02, @f02, t1
000099:0x002a7db0:	move	@f01, @f02
000099:0x002a7dc0:	mulf	@f01, @f01, t1
000099:0x002a7dd0:	move	@f00, @f01
000099:0x002a7de0:	addf	#return, _f1.000000, @f00
000099:0x002a7df0:	rts
000099:0x002a7df8:	rts
Easing::EaseInExpo()
000105:0x002a7e00:	cmpf	t, _f0.000000
000105:0x002a7e10:	bne	0x2a7e30
000107:0x002a7e18:	imove	#return, 0.00000
000107:0x002a7e28:	rts
000110:0x002a7e30:	subf	@f03, t, _f1.000000
000110:0x002a7e40:	move	@f02, @f03
000110:0x002a7e50:	mulf	@f02, _f10.000000, @f02
000110:0x002a7e60:	move	@f01, @f02
000110:0x002a7e70:	icall	Pow(_f2.000000, @f01)
000110:0x002a7e80:	move	#return, #return
000110:0x002a7e90:	rts
000110:0x002a7e98:	rts
Easing::EaseOutExpo()
000115:0x002a7ea0:	cmpf	t, _f1.000000
000115:0x002a7eb0:	bne	0x2a7ed0
000116:0x002a7eb8:	imove	#return, 1.00000
000116:0x002a7ec8:	rts
000119:0x002a7ed0:	mulf	@f03, _f-10.000000, t
000119:0x002a7ee0:	move	@f02, @f03
000119:0x002a7ef0:	icall	Pow(_f2.000000, @f02)
000119:0x002a7f00:	subf	@f01, _f0.000000, #return
000119:0x002a7f10:	addf	#return, @f01, _f1.000000
000119:0x002a7f20:	rts
000119:0x002a7f28:	rts
Easing::EaseInOutExpo()
000125:0x002a7fe0:	cmpf	t, _f0.000000
000125:0x002a7ff0:	beq	0x2a8010
000125:0x002a7ff8:	cmpf	t, _f1.000000
000125:0x002a8008:	bne	0x2a8028
000127:0x002a8010:	move	#return, t
000127:0x002a8020:	rts
000130:0x002a8028:	mulf	scaledTime, t, _f2.000000
000131:0x002a8038:	subf	scaledTime1, scaledTime, _f1.000000
000133:0x002a8048:	cmpf	scaledTime, _f1.000000
000133:0x002a8058:	bge	0x2a80a8
000135:0x002a8060:	mulf	@f02, _f10.000000, scaledTime1
000135:0x002a8070:	move	@f01, @f02
000135:0x002a8080:	icall	Pow(_f2.000000, @f01)
000135:0x002a8090:	mulf	#return, _f0.500000, #return
000135:0x002a80a0:	rts
000138:0x002a80a8:	mulf	@f04, _f-10.000000, scaledTime1
000138:0x002a80b8:	move	@f03, @f04
000138:0x002a80c8:	icall	Pow(_f2.000000, @f03)
000138:0x002a80d8:	subf	@f02, _f0.000000, #return
000138:0x002a80e8:	addf	@f01, @f02, _f2.000000
000138:0x002a80f8:	move	@f00, @f01
000138:0x002a8108:	mulf	#return, _f0.500000, @f00
000138:0x002a8118:	rts
000138:0x002a8120:	rts
Easing::EaseInCirc()
000144:0x002a8150:	divf	scaledTime, t, _f1.000000
000145:0x002a8160:	mulf	@f04, scaledTime, t
000145:0x002a8170:	move	@f03, @f04
000145:0x002a8180:	subf	@f03, _f1.000000, @f03
000145:0x002a8190:	move	@f02, @f03
000145:0x002a81a0:	icall	Sqrt(@f02)
000145:0x002a81b0:	subf	@f01, #return, _f1.000000
000145:0x002a81c0:	move	@f00, @f01
000145:0x002a81d0:	mulf	#return, _f-1.000000, @f00
000145:0x002a81e0:	rts
000145:0x002a81e8:	rts
Easing::EaseOutCirc()
000150:0x002a8218:	subf	t1, t, _f1.000000
000151:0x002a8228:	mulf	@f03, t1, t1
000151:0x002a8238:	move	@f02, @f03
000151:0x002a8248:	subf	@f02, _f1.000000, @f02
000151:0x002a8258:	move	@f01, @f02
000151:0x002a8268:	icall	Sqrt(@f01)
000151:0x002a8278:	move	#return, #return
000151:0x002a8288:	rts
000151:0x002a8290:	rts
Easing::EaseInOutCirc()
000157:0x002a82e8:	mulf	scaledTime, t, _f2.000000
000158:0x002a82f8:	subf	scaledTime1, scaledTime, _f2.000000
000160:0x002a8308:	cmpf	scaledTime, _f1.000000
000160:0x002a8318:	bge	0x2a83a8
000162:0x002a8320:	mulf	@f04, scaledTime, scaledTime
000162:0x002a8330:	move	@f03, @f04
000162:0x002a8340:	subf	@f03, _f1.000000, @f03
000162:0x002a8350:	move	@f02, @f03
000162:0x002a8360:	icall	Sqrt(@f02)
000162:0x002a8370:	subf	@f01, #return, _f1.000000
000162:0x002a8380:	move	@f00, @f01
000162:0x002a8390:	mulf	#return, _f-0.500000, @f00
000162:0x002a83a0:	rts
000165:0x002a83a8:	mulf	@f04, scaledTime1, scaledTime1
000165:0x002a83b8:	move	@f03, @f04
000165:0x002a83c8:	subf	@f03, _f1.000000, @f03
000165:0x002a83d8:	move	@f02, @f03
000165:0x002a83e8:	icall	Sqrt(@f02)
000165:0x002a83f8:	addf	@f01, #return, _f1.000000
000165:0x002a8408:	move	@f00, @f01
000165:0x002a8418:	mulf	#return, _f0.500000, @f00
000165:0x002a8428:	rts
000165:0x002a8430:	rts
Easing::EaseInBack()
000170:0x002a8438:	mulf	@f01, t, t
000170:0x002a8448:	move	@f00, @f01
000170:0x002a8458:	addf	@f04, magnitude, _f1.000000
000170:0x002a8468:	move	@f03, @f04
000170:0x002a8478:	mulf	@f03, @f03, t
000170:0x002a8488:	move	@f02, @f03
000170:0x002a8498:	subf	@f02, @f02, magnitude
000170:0x002a84a8:	move	@f01, @f02
000170:0x002a84b8:	mulf	#return, @f00, @f01
000170:0x002a84c8:	rts
000170:0x002a84d0:	rts
Easing::EaseOutBack()
000175:0x002a8500:	divf	@f01, t, _f1.000000
000175:0x002a8510:	move	@f00, @f01
000175:0x002a8520:	subf	scaledTime, @f00, _f1.000000
000176:0x002a8530:	mulf	@f02, scaledTime, scaledTime
000176:0x002a8540:	move	@f01, @f02
000176:0x002a8550:	addf	@f05, magnitude, _f1.000000
000176:0x002a8560:	move	@f04, @f05
000176:0x002a8570:	mulf	@f04, @f04, scaledTime
000176:0x002a8580:	move	@f03, @f04
000176:0x002a8590:	addf	@f03, @f03, magnitude
000176:0x002a85a0:	move	@f02, @f03
000176:0x002a85b0:	mulf	@f01, @f01, @f02
000176:0x002a85c0:	move	@f00, @f01
000176:0x002a85d0:	addf	#return, @f00, _f1.000000
000176:0x002a85e0:	rts
000176:0x002a85e8:	rts
Easing::EaseInOutBack()
000182:0x002a86c0:	mulf	scaledTime, t, _f2.000000
000183:0x002a86d0:	subf	scaledTime2, scaledTime, _f2.000000
000185:0x002a86e0:	mulf	s, magnitude, _f1.525000
000187:0x002a86f0:	cmpf	scaledTime, _f1.000000
000187:0x002a8700:	bge	0x2a87c0
000189:0x002a8708:	mulf	@f02, _f0.500000, scaledTime
000189:0x002a8718:	move	@f01, @f02
000189:0x002a8728:	mulf	@f01, @f01, scaledTime
000189:0x002a8738:	move	@f00, @f01
000189:0x002a8748:	addf	@f04, s, _f1.000000
000189:0x002a8758:	move	@f03, @f04
000189:0x002a8768:	mulf	@f03, @f03, scaledTime
000189:0x002a8778:	move	@f02, @f03
000189:0x002a8788:	subf	@f02, @f02, s
000189:0x002a8798:	move	@f01, @f02
000189:0x002a87a8:	mulf	#return, @f00, @f01
000189:0x002a87b8:	rts
000192:0x002a87c0:	mulf	@f03, scaledTime2, scaledTime2
000192:0x002a87d0:	move	@f02, @f03
000192:0x002a87e0:	addf	@f06, s, _f1.000000
000192:0x002a87f0:	move	@f05, @f06
000192:0x002a8800:	mulf	@f05, @f05, scaledTime2
000192:0x002a8810:	move	@f04, @f05
000192:0x002a8820:	addf	@f04, @f04, s
000192:0x002a8830:	move	@f03, @f04
000192:0x002a8840:	mulf	@f02, @f02, @f03
000192:0x002a8850:	move	@f01, @f02
000192:0x002a8860:	addf	@f01, @f01, _f2.000000
000192:0x002a8870:	move	@f00, @f01
000192:0x002a8880:	mulf	#return, _f0.500000, @f00
000192:0x002a8890:	rts
000192:0x002a8898:	rts
Easing::EaseInElastic()
000197:0x002a8940:	cmpf	t, _f0.000000
000197:0x002a8950:	beq	0x2a8970
000197:0x002a8958:	cmpf	t, _f1.000000
000197:0x002a8968:	bne	0x2a8988
000198:0x002a8970:	move	#return, t
000198:0x002a8980:	rts
000200:0x002a8988:	divf	scaledTime, t, _f1.000000
000201:0x002a8998:	subf	scaledTime1, scaledTime, _f1.000000
000203:0x002a89a8:	subf	p, _f1.000000, magnitude
000204:0x002a89b8:	imove	@f02, 6.28319
000204:0x002a89c8:	move	@f01, @f02
000204:0x002a89d8:	divf	@f01, p, @f01
000204:0x002a89e8:	move	@f00, @f01
000204:0x002a89f8:	icall	Asin(_f1.000000)
000204:0x002a8a08:	mulf	s, @f00, #return
000206:0x002a8a18:	mulf	@f04, _f10.000000, scaledTime1
000206:0x002a8a28:	move	@f03, @f04
000206:0x002a8a38:	icall	Pow(_f2.000000, @f03)
000206:0x002a8a48:	subf	@f07, scaledTime1, s
000206:0x002a8a58:	move	@f06, @f07
000206:0x002a8a68:	imove	@f08, 6.28319
000206:0x002a8a78:	move	@f07, @f08
000206:0x002a8a88:	mulf	@f06, @f06, @f07
000206:0x002a8a98:	move	@f05, @f06
000206:0x002a8aa8:	divf	@f05, @f05, p
000206:0x002a8ab8:	move	@f04, @f05
000206:0x002a8ac8:	icall	Sin(@f04)
000206:0x002a8ad8:	mulf	@f02, #return, #return
000206:0x002a8ae8:	move	@f01, @f02
000206:0x002a8af8:	subf	@f01, _f0.000000, @f01
000206:0x002a8b08:	move	#return, @f01
000206:0x002a8b18:	rts
000206:0x002a8b20:	rts
Easing::EaseOutElastic()
000211:0x002a8ba0:	subf	p, _f1.000000, magnitude
000212:0x002a8bb0:	mulf	scaledTime, t, _f2.000000
000214:0x002a8bc0:	cmpf	t, _f0.000000
000214:0x002a8bd0:	beq	0x2a8bf0
000214:0x002a8bd8:	cmpf	t, _f1.000000
000214:0x002a8be8:	bne	0x2a8c08
000215:0x002a8bf0:	move	#return, t
000215:0x002a8c00:	rts
000218:0x002a8c08:	imove	@f02, 6.28319
000218:0x002a8c18:	move	@f01, @f02
000218:0x002a8c28:	divf	@f01, p, @f01
000218:0x002a8c38:	move	@f00, @f01
000218:0x002a8c48:	icall	Asin(_f1.000000)
000218:0x002a8c58:	mulf	s, @f00, #return
000219:0x002a8c68:	mulf	@f03, _f-10.000000, scaledTime
000219:0x002a8c78:	move	@f02, @f03
000219:0x002a8c88:	icall	Pow(_f2.000000, @f02)
000219:0x002a8c98:	subf	@f06, scaledTime, s
000219:0x002a8ca8:	move	@f05, @f06
000219:0x002a8cb8:	imove	@f07, 6.28319
000219:0x002a8cc8:	move	@f06, @f07
000219:0x002a8cd8:	mulf	@f05, @f05, @f06
000219:0x002a8ce8:	move	@f04, @f05
000219:0x002a8cf8:	divf	@f04, @f04, p
000219:0x002a8d08:	move	@f03, @f04
000219:0x002a8d18:	icall	Sin(@f03)
000219:0x002a8d28:	mulf	@f01, #return, #return
000219:0x002a8d38:	move	@f00, @f01
000219:0x002a8d48:	addf	#return, @f00, _f1.000000
000219:0x002a8d58:	rts
000219:0x002a8d60:	rts
Easing::EaseInOutElastic()
000224:0x002a8e08:	subf	p, _f1.000000, magnitude
000226:0x002a8e18:	cmpf	t, _f0.000000
000226:0x002a8e28:	beq	0x2a8e48
000226:0x002a8e30:	cmpf	t, _f1.000000
000226:0x002a8e40:	bne	0x2a8e60
000228:0x002a8e48:	move	#return, t
000228:0x002a8e58:	rts
000231:0x002a8e60:	mulf	scaledTime, t, _f2.000000
000232:0x002a8e70:	subf	scaledTime1, scaledTime, _f1.000000
000234:0x002a8e80:	imove	@f02, 6.28319
000234:0x002a8e90:	move	@f01, @f02
000234:0x002a8ea0:	divf	@f01, p, @f01
000234:0x002a8eb0:	move	@f00, @f01
000234:0x002a8ec0:	icall	Asin(_f1.000000)
000234:0x002a8ed0:	mulf	s, @f00, #return
000236:0x002a8ee0:	cmpf	scaledTime, _f1.000000
000236:0x002a8ef0:	bge	0x2a8ff0
000238:0x002a8ef8:	mulf	@f03, _f10.000000, scaledTime1
000238:0x002a8f08:	move	@f02, @f03
000238:0x002a8f18:	icall	Pow(_f2.000000, @f02)
000238:0x002a8f28:	subf	@f06, scaledTime1, s
000238:0x002a8f38:	move	@f05, @f06
000238:0x002a8f48:	imove	@f07, 6.28319
000238:0x002a8f58:	move	@f06, @f07
000238:0x002a8f68:	mulf	@f05, @f05, @f06
000238:0x002a8f78:	move	@f04, @f05
000238:0x002a8f88:	divf	@f04, @f04, p
000238:0x002a8f98:	move	@f03, @f04
000238:0x002a8fa8:	icall	Sin(@f03)
000238:0x002a8fb8:	mulf	@f01, #return, #return
000238:0x002a8fc8:	move	@f00, @f01
000238:0x002a8fd8:	mulf	#return, _f-0.500000, @f00
000238:0x002a8fe8:	rts
000241:0x002a8ff0:	mulf	@f04, _f-10.000000, scaledTime1
000241:0x002a9000:	move	@f03, @f04
000241:0x002a9010:	icall	Pow(_f2.000000, @f03)
000241:0x002a9020:	subf	@f07, scaledTime1, s
000241:0x002a9030:	move	@f06, @f07
000241:0x002a9040:	imove	@f08, 6.28319
000241:0x002a9050:	move	@f07, @f08
000241:0x002a9060:	mulf	@f06, @f06, @f07
000241:0x002a9070:	move	@f05, @f06
000241:0x002a9080:	divf	@f05, @f05, p
000241:0x002a9090:	move	@f04, @f05
000241:0x002a90a0:	icall	Sin(@f04)
000241:0x002a90b0:	mulf	@f02, #return, #return
000241:0x002a90c0:	move	@f01, @f02
000241:0x002a90d0:	mulf	@f01, @f01, _f0.500000
000241:0x002a90e0:	move	@f00, @f01
000241:0x002a90f0:	addf	#return, @f00, _f1.000000
000241:0x002a9100:	rts
000241:0x002a9108:	rts
Easing::EaseOutBounce()
000247:0x002a9228:	divf	scaledTime, t, _f1.000000
000249:0x002a9238:	imove	@f01, 0.36364
000249:0x002a9248:	move	@f00, @f01
000249:0x002a9258:	cmpf	scaledTime, @f00
000249:0x002a9268:	bge	0x2a92b0
000251:0x002a9270:	mulf	@f01, _f7.562500, scaledTime
000251:0x002a9280:	move	@f00, @f01
000251:0x002a9290:	mulf	#return, @f00, scaledTime
000251:0x002a92a0:	rts
000251:0x002a92a8:	jump	0x2a94e8
000253:0x002a92b0:	imove	@f01, 0.72727
000253:0x002a92c0:	move	@f00, @f01
000253:0x002a92d0:	cmpf	scaledTime, @f00
000253:0x002a92e0:	bge	0x2a9378
000255:0x002a92e8:	imove	@f01, 0.54545
000255:0x002a92f8:	move	@f00, @f01
000255:0x002a9308:	subf	scaledTime2, scaledTime, @f00
000256:0x002a9318:	mulf	@f02, _f7.562500, scaledTime2
000256:0x002a9328:	move	@f01, @f02
000256:0x002a9338:	mulf	@f01, @f01, scaledTime2
000256:0x002a9348:	move	@f00, @f01
000256:0x002a9358:	addf	#return, @f00, _f0.750000
000256:0x002a9368:	rts
000256:0x002a9370:	jump	0x2a94e8
000258:0x002a9378:	imove	@f01, 0.90909
000258:0x002a9388:	move	@f00, @f01
000258:0x002a9398:	cmpf	scaledTime, @f00
000258:0x002a93a8:	bge	0x2a9450
000260:0x002a93b0:	imove	@f01, 0.81818
000260:0x002a93c0:	move	@f00, @f01
000260:0x002a93d0:	subf	@f00, scaledTime, @f00
000260:0x002a93e0:	move	scaledTime2, @f00
000261:0x002a93f0:	mulf	@f02, _f7.562500, scaledTime2
000261:0x002a9400:	move	@f01, @f02
000261:0x002a9410:	mulf	@f01, @f01, scaledTime2
000261:0x002a9420:	move	@f00, @f01
000261:0x002a9430:	addf	#return, @f00, _f0.937500
000261:0x002a9440:	rts
000261:0x002a9448:	jump	0x2a94e8
000265:0x002a9450:	imove	@f01, 0.95455
000265:0x002a9460:	move	@f00, @f01
000265:0x002a9470:	subf	@f00, scaledTime, @f00
000265:0x002a9480:	move	scaledTime2, @f00
000266:0x002a9490:	mulf	@f02, _f7.562500, scaledTime2
000266:0x002a94a0:	move	@f01, @f02
000266:0x002a94b0:	mulf	@f01, @f01, scaledTime2
000266:0x002a94c0:	move	@f00, @f01
000266:0x002a94d0:	addf	#return, @f00, _f0.984375
000266:0x002a94e0:	rts
000266:0x002a94e8:	rts
Easing::EaseInBounce()
000273:0x002a94f0:	subf	@f01, _f1.000000, t
000273:0x002a9500:	move	@f00, @f01
000273:0x002a9510:	call	EaseOutBounce(@f00)
000273:0x002a9520:	subf	#return, _f1.000000, #return
000273:0x002a9530:	rts
000273:0x002a9538:	rts
Easing::EaseInOutBounce()
000278:0x002a9540:	cmpf	t, _f0.500000
000278:0x002a9550:	bge	0x2a95a0
000280:0x002a9558:	mulf	@f01, t, _f2.000000
000280:0x002a9568:	move	@f00, @f01
000280:0x002a9578:	call	EaseInBounce(@f00)
000280:0x002a9588:	mulf	#return, #return, _f0.500000
000280:0x002a9598:	rts
000282:0x002a95a0:	mulf	@f03, t, _f2.000000
000282:0x002a95b0:	move	@f02, @f03
000282:0x002a95c0:	subf	@f02, @f02, _f1.000000
000282:0x002a95d0:	move	@f01, @f02
000282:0x002a95e0:	call	EaseOutBounce(@f01)
000282:0x002a95f0:	mulf	@f02, #return, _f0.500000
000282:0x002a9600:	move	@f00, @f02
000282:0x002a9610:	addf	#return, @f00, _f0.500000
000282:0x002a9620:	rts
000282:0x002a9628:	rts
TFResult::TFResult()
//scripts/3_Game/systems\testframework.c
000014:0x002a9630:	move	Result, result
000014:0x002a9640:	rts
TFResult::And()
000019:0x002a9670:	cmpi	Result, PENDING
000019:0x002a9680:	beq	0x2a96b0
000019:0x002a9688:	movefm	@c00, other
000019:0x002a9698:	cmpi	Result, PENDING
000019:0x002a96a8:	bne	0x2a96c0
000020:0x002a96b0:	icall	ErrorEx(_s'Trying to And while one of the results are PENDING.', _i2)
000022:0x002a96c0:	cmpi	Result, SUCCESS
000022:0x002a96d0:	bne	0x2a9718
000022:0x002a96d8:	movefm	@c00, other
000022:0x002a96e8:	cmpi	Result, SUCCESS
000022:0x002a96f8:	bne	0x2a9718
000023:0x002a9700:	imove	Result, 0x000000
000023:0x002a9710:	jump	0x2a9728
000025:0x002a9718:	imove	Result, 0xffffffff
000027:0x002a9728:	movetm	#return, this
000027:0x002a9738:	rts
000027:0x002a9740:	rts
TFResult::Or()
000032:0x002a9770:	cmpi	Result, PENDING
000032:0x002a9780:	beq	0x2a97b0
000032:0x002a9788:	movefm	@c00, other
000032:0x002a9798:	cmpi	Result, PENDING
000032:0x002a97a8:	bne	0x2a97c0
000033:0x002a97b0:	icall	ErrorEx(_s'Trying to Or while one of the results are PENDING.', _i2)
000035:0x002a97c0:	cmpi	Result, SUCCESS
000035:0x002a97d0:	beq	0x2a9800
000035:0x002a97d8:	movefm	@c00, other
000035:0x002a97e8:	cmpi	Result, SUCCESS
000035:0x002a97f8:	bne	0x2a9818
000036:0x002a9800:	imove	Result, 0x000000
000036:0x002a9810:	jump	0x2a9828
000038:0x002a9818:	imove	Result, 0xffffffff
000040:0x002a9828:	movetm	#return, this
000040:0x002a9838:	rts
000040:0x002a9840:	rts
TFCaller::TFCaller()
000053:0x002a9848:	movec	m_Instance, instance
000054:0x002a9858:	moves	m_Test, test
000055:0x002a9868:	movem	m_Result, result
000055:0x002a9878:	rts
TFCaller::Run()
000060:0x002a9900:	ncall	GetGame()
000060:0x002a9908:	movec	@c00, #return
000060:0x002a9918:	movec	@c01, GameScript
000060:0x002a9928:	icall	
000060:0x002a9940:	move	callResult, #return
000061:0x002a9950:	cmpi	callResult, _i0
000061:0x002a9960:	bne	0x2a99f8
000063:0x002a9968:	movec	[0xd3129e18], m_Instance
000063:0x002a9978:	call	
000063:0x002a9988:	icall	Format(_s'Failed to call function '%1' on '%2'', m_Test, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000063:0x002a99b8:	icall	ErrorEx(#return, _i2)
000064:0x002a99c8:	movefm	[0xb5b35250], m_Result
000064:0x002a99d8:	movec	@c00, [0xb5b35250]
000064:0x002a99e8:	imove	Result, 0xffffffff
000067:0x002a99f8:	movem	#return, m_Result
000067:0x002a9a08:	rts
000067:0x002a9a10:	rts
TFCaller::GetTest()
000072:0x002a9a18:	moves	#return, m_Test
000072:0x002a9a28:	rts
000072:0x002a9a30:	rts
TFCaller::GetTestEx()
000077:0x002a9a60:	movec	[0xd315b8f0], m_Instance
000077:0x002a9a70:	ncall	ClassName([0xd315b8f0])
000077:0x002a9a80:	icall	Format(_s'%1::%2', #return, m_Test, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000077:0x002a9ab0:	moves	#return, #return
000077:0x002a9ac0:	rts
000077:0x002a9ac8:	rts
TFModule::TFModule()
000096:0x002a9ad0:	new	m_Tests, array<@TFCaller>
000097:0x002a9af0:	new	m_Results, array<@TFResult>
000099:0x002a9b10:	new	m_SucceededTests, array<string>
000100:0x002a9b30:	new	m_FailedTests, array<string>
000100:0x002a9b50:	rts
TFModule::Count()
000105:0x002a9b58:	move	#return, m_Count
000105:0x002a9b68:	rts
000105:0x002a9b70:	rts
TFModule::Failed()
000110:0x002a9b78:	move	#return, m_Failed
000110:0x002a9b88:	rts
000110:0x002a9b90:	rts
TFModule::Success()
000115:0x002a9b98:	move	#return, m_Success
000115:0x002a9ba8:	rts
000115:0x002a9bb0:	rts
TFModule::Pending()
000120:0x002a9bb8:	addi	@m01, m_Failed, m_Success
000120:0x002a9bc8:	move	@m00, @m01
000120:0x002a9bd8:	subi	#return, m_Count, @m00
000120:0x002a9be8:	rts
000120:0x002a9bf0:	rts
TFModule::AddTest()
000125:0x002a9c20:	inc	m_Count
000127:0x002a9c28:	new	result, TFResult
000128:0x002a9c50:	movefm	@c00, result
000128:0x002a9c60:	movefm	[0xb5b352b0], m_Results
000128:0x002a9c70:	icall	
000130:0x002a9c80:	new	@c00, TFCaller
000130:0x002a9cb0:	pushc	@c00
000130:0x002a9cb8:	movefm	[0xb5b35398], m_Tests
000130:0x002a9cc8:	icall	
000130:0x002a9cd8:	popc	@c00
000130:0x002a9ce0:	release	@c00
000130:0x002a9ce8:	release	result
000130:0x002a9cf0:	rts
TFModule::Run()
000135:0x002a9fa8:	new	done, array<TFCaller>
000138:0x002a9fc8:	movefm	[0xb5b35398], m_Tests
000138:0x002a9fd8:	ncalli	array<@TFCaller>.Count()
000138:0x002a9fe0:	move	runningTests, #return
000139:0x002a9ff0:	imove	i, 0x000000
000139:0x002aa000:	jump	0x2aa010
000139:0x002aa008:	inc	i
000139:0x002aa010:	cmpi	i, runningTests
000139:0x002aa020:	bge	0x2aa0b8
000141:0x002aa028:	movefm	[0xb5b35398], m_Tests
000141:0x002aa038:	icall	
000141:0x002aa048:	movetm	t, #return
000142:0x002aa058:	call	
000142:0x002aa070:	cmpi	#return, _i0
000142:0x002aa080:	beq	0x2aa0a8
000143:0x002aa088:	movefm	@c00, t
000143:0x002aa098:	icall	
000143:0x002aa0a8:	release	t
000143:0x002aa0b0:	jump	0x2aa008
000147:0x002aa0b8:	ncalli	array<TFCaller>.Count()
000147:0x002aa0c0:	move	#cnt, #return
000147:0x002aa0d0:	imove	#key, 0x000000
000147:0x002aa0e0:	jump	0x2aa0f0
000147:0x002aa0e8:	inc	#key
000147:0x002aa0f0:	cmpi	#key, #cnt
000147:0x002aa100:	bge	0x2aa150
000147:0x002aa108:	icall	
000147:0x002aa118:	movetm	doneT, #return
000148:0x002aa128:	movefm	[0xb5b35398], m_Tests
000148:0x002aa138:	call	
000148:0x002aa148:	jump	0x2aa0e8
000148:0x002aa150:	release	doneT
000151:0x002aa158:	cmpi	fatal, _i0
000151:0x002aa168:	beq	0x2aa2b0
000151:0x002aa170:	movefm	[0xb5b35398], m_Tests
000151:0x002aa180:	ncalli	array<@TFCaller>.Count()
000151:0x002aa188:	move	@m00, #return
000151:0x002aa198:	cmpi	@m00, _i0
000151:0x002aa1a8:	ble	0x2aa2b0
000153:0x002aa1b0:	icall	Print(_s'- Active tests -------------------------')
000154:0x002aa1c0:	movem	#array, m_Tests
000154:0x002aa1d0:	ncalli	array<@TFCaller>.Count()
000154:0x002aa1d8:	move	#cnt, #return
000154:0x002aa1e8:	imove	#key, 0x000000
000154:0x002aa1f8:	jump	0x2aa208
000154:0x002aa200:	inc	#key
000154:0x002aa208:	cmpi	#key, #cnt
000154:0x002aa218:	bge	0x2aa268
000154:0x002aa220:	icall	
000154:0x002aa230:	movetm	rTest, #return
000155:0x002aa240:	call	
000155:0x002aa250:	icall	Print(#return)
000155:0x002aa260:	jump	0x2aa200
000155:0x002aa268:	release	#array
000155:0x002aa270:	release	rTest
000156:0x002aa278:	icall	Print(_s'----------------------------------------')
000158:0x002aa288:	icall	ErrorEx(_s'Not all tests are done while run was fatal.', _i2)
000159:0x002aa298:	movefm	[0xb5b35398], m_Tests
000159:0x002aa2a8:	ncalli	array<@TFCaller>.Clear()
000162:0x002aa2b0:	movefm	[0xb5b35398], m_Tests
000162:0x002aa2c0:	ncalli	array<@TFCaller>.Count()
000162:0x002aa2c8:	move	@m00, #return
000162:0x002aa2d8:	cmpi	@m00, _i0
000162:0x002aa2e8:	bne	0x2aa308
000162:0x002aa2f0:	imove	#return, 0x000001
000162:0x002aa300:	jump	0x2aa318
000162:0x002aa308:	imove	#return, 0x000000
000162:0x002aa318:	release	done
000162:0x002aa320:	rts
000162:0x002aa328:	release	done
000162:0x002aa330:	rts
TFModule::RunTest()
000167:0x002aa388:	call	
000167:0x002aa398:	movefm	@c00, #return
000167:0x002aa3a8:	move	res, Result
000167:0x002aa3b8:	release	#return
000169:0x002aa3c0:	move	#switch, res
000169:0x002aa3d0:	imove	@m00, 0xffffffff
000169:0x002aa3e0:	cmpi	@m00, #switch
000169:0x002aa3f0:	bne	0x2aa440
000172:0x002aa3f8:	inc	m_Failed
000173:0x002aa400:	call	
000173:0x002aa410:	movefm	[0xd31562c0], m_FailedTests
000173:0x002aa420:	icall	
000174:0x002aa430:	jump	0x2aa4a8
000174:0x002aa438:	jump	0x2aa468
000174:0x002aa440:	imove	@m00, 0x000000
000174:0x002aa450:	cmpi	@m00, #switch
000174:0x002aa460:	bne	0x2aa4a8
000176:0x002aa468:	inc	m_Success
000177:0x002aa470:	call	
000177:0x002aa480:	movefm	[0xd31562c0], m_SucceededTests
000177:0x002aa490:	icall	
000178:0x002aa4a0:	jump	0x2aa4a8
000181:0x002aa4a8:	cmpi	res, PENDING
000181:0x002aa4b8:	beq	0x2aa4d8
000181:0x002aa4c0:	imove	#return, 0x000001
000181:0x002aa4d0:	jump	0x2aa4e8
000181:0x002aa4d8:	imove	#return, 0x000000
000181:0x002aa4e8:	rts
000181:0x002aa4f0:	rts
TFModule::Result()
000186:0x002aa520:	call	
000186:0x002aa530:	call	
000186:0x002aa540:	call	
000186:0x002aa550:	call	
000186:0x002aa560:	icall	Format(_s'{ [TFModule] :: Tests: %1 | Success: %2 | Failed: %3 | Pending: %4 }', #return, #return, #return, #return, _c0, _c0, _c0, _c0, _c0)
000186:0x002aa590:	moves	#return, #return
000186:0x002aa5a0:	rts
000186:0x002aa5a8:	rts
TFModule::PrintResult()
000191:0x002aa790:	call	
000191:0x002aa7a0:	icall	Format(_s'%1%2', prefix, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000191:0x002aa7d0:	call	TFLog(#return, caller, function)
000192:0x002aa7e8:	movefm	[0xd31562c0], m_SucceededTests
000192:0x002aa7f8:	ncalli	array<string>.Count()
000192:0x002aa800:	cmpi	#return, _i0
000192:0x002aa810:	beq	0x2aa908
000194:0x002aa818:	call	TFLog(_s'   |-[SUCCESS]', caller, function)
000195:0x002aa830:	movem	#array, m_SucceededTests
000195:0x002aa840:	ncalli	array<string>.Count()
000195:0x002aa848:	move	#cnt, #return
000195:0x002aa858:	imove	#key, 0x000000
000195:0x002aa868:	jump	0x2aa878
000195:0x002aa870:	inc	#key
000195:0x002aa878:	cmpi	#key, #cnt
000195:0x002aa888:	bge	0x2aa900
000195:0x002aa890:	icall	
000195:0x002aa8a0:	moves	success, #return
000197:0x002aa8b0:	icall	Format(_s'        |- %1', success, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000197:0x002aa8e0:	call	TFLog(#return, caller, function)
000197:0x002aa8f8:	jump	0x2aa870
000197:0x002aa900:	release	#array
000200:0x002aa908:	movefm	[0xd31562c0], m_FailedTests
000200:0x002aa918:	ncalli	array<string>.Count()
000200:0x002aa920:	cmpi	#return, _i0
000200:0x002aa930:	beq	0x2aaa28
000202:0x002aa938:	call	TFLog(_s'   |-[FAILED]', caller, function)
000203:0x002aa950:	movem	#array, m_FailedTests
000203:0x002aa960:	ncalli	array<string>.Count()
000203:0x002aa968:	move	#cnt, #return
000203:0x002aa978:	imove	#key, 0x000000
000203:0x002aa988:	jump	0x2aa998
000203:0x002aa990:	inc	#key
000203:0x002aa998:	cmpi	#key, #cnt
000203:0x002aa9a8:	bge	0x2aaa20
000203:0x002aa9b0:	icall	
000203:0x002aa9c0:	moves	fail, #return
000205:0x002aa9d0:	icall	Format(_s'        |- %1', fail, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000205:0x002aaa00:	call	TFLog(#return, caller, function)
000205:0x002aaa18:	jump	0x2aa990
000205:0x002aaa20:	release	#array
000205:0x002aaa28:	rts
TestFramework::TestFramework()
000219:0x002aaa30:	ncall	SetEventMask(this, _i2)
000220:0x002aaa40:	ncall	SetEventMask(this, _i16)
000222:0x002aaa50:	new	m_OnInitModule, TFModule
000223:0x002aaa70:	new	m_OnFrameModule, TFModule
000223:0x002aaa90:	rts
TestFramework::~TestFramework()
000228:0x002aab10:	movefm	[0xb5b39048], m_OnInitModule
000228:0x002aab20:	call	
000229:0x002aab38:	movefm	[0xb5b39048], m_OnFrameModule
000229:0x002aab48:	call	
000229:0x002aab60:	rts
TestFramework::EOnInit()
000237:0x002aab68:	movefm	[0xb5b39048], m_OnInitModule
000237:0x002aab78:	call	
000237:0x002aab90:	rts
TestFramework::EOnFrame()
000242:0x002aabd8:	movefm	[0xb5b39048], m_OnFrameModule
000242:0x002aabe8:	call	
000242:0x002aac00:	cmpi	#return, _i0
000242:0x002aac10:	beq	0x2aac78
000243:0x002aac18:	ncall	GetGame()
000243:0x002aac20:	call	
000243:0x002aac30:	icall	SetInstance([0xb5da8bd8], this)
000243:0x002aac40:	icall	
000243:0x002aac70:	release	#return
000243:0x002aac78:	rts
TestFramework::AddInitTest()
000251:0x002aac80:	movefm	[0xb5b39048], m_OnInitModule
000251:0x002aac90:	call	
000251:0x002aaca8:	rts
TestFramework::AddFrameTest()
000256:0x002aacb0:	movefm	[0xb5b39048], m_OnFrameModule
000256:0x002aacc0:	call	
000256:0x002aacd8:	rts
TestFramework::Assert()
000264:0x002aad08:	cmpi	condition, _i0
000264:0x002aad18:	bne	0x2aad30
000265:0x002aad20:	icall	ErrorEx(_s'ASSERTION FAILED.', _i2)
000267:0x002aad30:	move	#return, condition
000267:0x002aad40:	rts
000267:0x002aad48:	rts
TestFramework::NTFR()
000275:0x002aad50:	new	#return, TFResult
000275:0x002aad78:	rts
000275:0x002aad80:	rts
TestFramework::BTFR()
000280:0x002aad88:	cmpi	result, _i0
000280:0x002aad98:	beq	0x2aadd8
000281:0x002aada0:	new	#return, TFResult
000281:0x002aadc8:	rts
000281:0x002aadd0:	jump	0x2aae08
000283:0x002aadd8:	new	#return, TFResult
000283:0x002aae00:	rts
000283:0x002aae08:	rts
TestFramework::CTFR()
000288:0x002aae10:	new	#return, TFResult
000288:0x002aae38:	rts
000288:0x002aae40:	rts
PPELightIntensityParamsNative::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\exceptions\ppelightintensityparamsnative.c
000018:0x002aae48:	imove	#return, 0x000035
000018:0x002aae58:	rts
000018:0x002aae60:	rts
PPELightIntensityParamsNative::RegisterMaterialParameters()
000023:0x002aaeb8:	call	
000024:0x002aaed8:	call	
000024:0x002aaef8:	rts
PPELightIntensityParamsNative::ApplyValueChanges()
000029:0x002aaf00:	movefm	[0xd31561b0], m_UpdatedParameters
000029:0x002aaf10:	ncalli	array<int>.Count()
000029:0x002aaf18:	move	@m00, #return
000029:0x002aaf28:	cmpi	@m00, _i0
000029:0x002aaf38:	ble	0x2aaf50
000031:0x002aaf40:	call	
000034:0x002aaf50:	movefm	[0xd31561b0], m_UpdatedParameters
000034:0x002aaf60:	ncalli	array<int>.Clear()
000034:0x002aaf68:	rts
PPELightIntensityParamsNative::SetFinalParameterValue()
000040:0x002ab040:	new	array_values, array<float>
000042:0x002ab060:	imove	i, 0x000000
000042:0x002ab070:	jump	0x2ab090
000042:0x002ab078:	move	@m00, i
000042:0x002ab088:	inc	i
000042:0x002ab090:	imove	@m01, 0x000002
000042:0x002ab0a0:	move	@m00, @m01
000042:0x002ab0b0:	cmpi	i, @m00
000042:0x002ab0c0:	bge	0x2ab170
000044:0x002ab0c8:	call	
000044:0x002ab0d8:	call	
000044:0x002ab0e8:	movem	values, #return
000044:0x002ab0f8:	release	#return
000044:0x002ab100:	release	#return
000045:0x002ab108:	movefm	@c01, values
000045:0x002ab118:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000045:0x002ab130:	movec	@c02, @c00
000045:0x002ab140:	move	value_var_float, param1
000046:0x002ab150:	icall	
000046:0x002ab160:	release	values
000046:0x002ab168:	jump	0x2ab078
000049:0x002ab170:	icall	
000049:0x002ab180:	push	#return
000049:0x002ab188:	icall	
000049:0x002ab198:	move	@f01, #return
000049:0x002ab1a8:	pop	#return
000049:0x002ab1b0:	ncalli	DayZGame.NightVissionLightParams(#return, @f01)
000049:0x002ab1c0:	release	array_values
000049:0x002ab1c8:	rts
Hit_Glass_Thin::Hit_Glass_Thin()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_glass_thin.c
000005:0x002ab1d0:	call	
000006:0x002ab1e0:	call	
000007:0x002ab1f0:	call	
000007:0x002ab200:	rts
PPERequester_ControllerDisconnectBlur::OnStart()
//scripts/3_Game/ppemanager\requesters\ppercontrollerdisconnectblur.c
000005:0x002ab208:	call	
000007:0x002ab218:	call	
000007:0x002ab240:	rts
ReplaceItemWithNewLambdaBase::ReplaceItemWithNewLambdaBase()
//scripts/3_Game/systems\inventory\replaceitemwithnewlambdabase.c
000013:0x002ab248:	imove	m_RemoveFromLocationPassed, 0x000000
000013:0x002ab258:	imove	m_RemoveNetworkObjectInfoPassed, 0x000000
000015:0x002ab268:	movem	m_OldItem, old_item
000016:0x002ab278:	moves	m_NewItemType, new_item_type
000016:0x002ab288:	rts
ReplaceItemWithNewLambdaBase::OverrideNewLocation()
000021:0x002ab290:	movem	m_NewLocation, newLocation
000021:0x002ab2a0:	rts
ReplaceItemWithNewLambdaBase::WantCreateNewEntity()
000028:0x002ab2a8:	cmpcm	m_NewLocation, null
000028:0x002ab2b8:	beq	0x2ab2f0
000028:0x002ab2c0:	cmps	m_NewItemType, Empty
000028:0x002ab2d0:	beq	0x2ab2f0
000028:0x002ab2d8:	imove	#return, 0x000001
000028:0x002ab2e8:	jump	0x2ab300
000028:0x002ab2f0:	imove	#return, 0x000000
000028:0x002ab300:	rts
000028:0x002ab308:	rts
ReplaceItemWithNewLambdaBase::CanExecuteLambda()
000033:0x002ab310:	cmpcm	m_OldItem, null
000033:0x002ab320:	beq	0x2ab378
000034:0x002ab328:	movefm	[0xb5bad928], m_OldLocation
000034:0x002ab338:	ncall	LocationCanRemoveEntity([0xb5bad928])
000034:0x002ab348:	cmpi	#return, _i0
000034:0x002ab358:	beq	0x2ab378
000036:0x002ab360:	imove	#return, 0x000001
000036:0x002ab370:	rts
000037:0x002ab378:	imove	#return, 0x000000
000037:0x002ab388:	rts
000037:0x002ab390:	rts
ReplaceItemWithNewLambdaBase::PrepareLocations()
000045:0x002ab520:	icall	ToString(m_OldItem)
000045:0x002ab530:	adds	@s01, _s'[inv] ReplaceItemWithNewLambdaBase Step A) Prepare inventory locations, old_item=', #return
000045:0x002ab540:	moves	@s00, @s01
000045:0x002ab550:	call	hndDebugPrint(@s00)
000046:0x002ab560:	new	m_OldLocation, InventoryLocation
000047:0x002ab580:	movefm	[0xb5b25dc0], m_OldItem
000047:0x002ab590:	ncalli	EntityAI.GetInventory()
000047:0x002ab598:	movefm	[0xb5bad1f8], m_OldLocation
000047:0x002ab5a8:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000047:0x002ab5b8:	cmpi	#return, _i0
000047:0x002ab5c8:	beq	0x2ab8c8
000049:0x002ab5d0:	cmpcm	m_NewLocation, null
000049:0x002ab5e0:	bne	0x2ab8a8
000051:0x002ab5e8:	new	m_NewLocation, InventoryLocation
000052:0x002ab608:	movefm	[0xb5b9f608], m_OldLocation
000052:0x002ab618:	movefm	[0xb5b18280], m_NewLocation
000052:0x002ab628:	ncalli	InventoryLocation.CopyLocationFrom([0xb5b9f608], true)
000055:0x002ab638:	movefm	[0xb5b18280], m_NewLocation
000055:0x002ab648:	ncalli	InventoryLocation.GetParent()
000055:0x002ab650:	cmpm	#return, null
000055:0x002ab660:	bne	0x2ab8a8
000058:0x002ab668:	call	MatrixIdentity4(m4)
000059:0x002ab678:	movefm	[0xb5b18280], m_NewLocation
000059:0x002ab688:	ncalli	InventoryLocation.GetPos()
000059:0x002ab690:	ctv	m4[_i3], #return
000060:0x002ab6a0:	adds	@s03, _s'', CFG_VEHICLESPATH
000060:0x002ab6b0:	moves	@s02, @s03
000060:0x002ab6c0:	adds	@s02, @s02, _s' '
000060:0x002ab6d0:	moves	@s01, @s02
000060:0x002ab6e0:	adds	@s01, @s01, m_NewItemType
000060:0x002ab6f0:	moves	@s00, @s01
000060:0x002ab700:	adds	path, @s00, _s' inherit_rotation'
000061:0x002ab710:	ncall	GetGame()
000061:0x002ab718:	ncalli	CGame.ConfigIsExisting(path)
000061:0x002ab728:	cmpi	#return, _i0
000061:0x002ab738:	beq	0x2ab798
000061:0x002ab740:	ncall	GetGame()
000061:0x002ab748:	ncalli	CGame.ConfigGetInt(path)
000061:0x002ab758:	move	@m00, #return
000061:0x002ab768:	cmpi	@m00, _i0
000061:0x002ab778:	ble	0x2ab798
000061:0x002ab780:	imove	keep_rotation, 0x000001
000061:0x002ab790:	jump	0x2ab7a8
000061:0x002ab798:	imove	keep_rotation, 0x000000
000063:0x002ab7a8:	movefm	[0xb5b18280], m_OldLocation
000063:0x002ab7b8:	ncalli	InventoryLocation.GetType()
000063:0x002ab7c0:	move	@m00, #return
000063:0x002ab7d0:	cmpi	@m00, _i1
000063:0x002ab7e0:	bne	0x2ab878
000063:0x002ab7e8:	cmpi	keep_rotation, _i0
000063:0x002ab7f8:	beq	0x2ab878
000066:0x002ab800:	movefm	[0xb5b18280], m_OldLocation
000066:0x002ab810:	ncalli	InventoryLocation.GetDir(dir)
000067:0x002ab820:	movec	[0xb5b9efd0], null
000067:0x002ab830:	movefm	[0xb5b18280], m_NewLocation
000067:0x002ab840:	ncalli	InventoryLocation.GetPos()
000067:0x002ab848:	movefm	[0xb5b18280], m_NewLocation
000067:0x002ab858:	ncalli	InventoryLocation.SetGroundEx([0xb5b9efd0], #return, dir)
000067:0x002ab870:	jump	0x2ab8a8
000071:0x002ab878:	movec	[0xb5b9ef50], null
000071:0x002ab888:	movefm	[0xb5b18280], m_NewLocation
000071:0x002ab898:	ncalli	InventoryLocation.SetGround([0xb5b9ef50], m4)
000075:0x002ab8a8:	imove	#return, 0x000001
000075:0x002ab8b8:	rts
000075:0x002ab8c0:	jump	0x2ab8d8
000078:0x002ab8c8:	call	Error(_s'[inv] ReplaceItemWithNewLambdaBase Step A.1) failed to get old_item inventory location')
000079:0x002ab8d8:	imove	#return, 0x000000
000079:0x002ab8e8:	rts
000079:0x002ab8f0:	rts
ReplaceItemWithNewLambdaBase::RemoveOldItemFromLocation()
000088:0x002ab948:	movefm	[0xb5badde0], m_OldLocation
000088:0x002ab958:	ncall	LocationRemoveEntity([0xb5badde0])
000088:0x002ab968:	cmpi	#return, _i0
000088:0x002ab978:	bne	0x2ab9a0
000090:0x002ab980:	call	Error(_s'[inv] ReplaceItemWithNewLambdaBase Step B) failed to remove old_item rom current inventory location')
000091:0x002ab990:	imove	m_RemoveFromLocationPassed, 0x000000
000093:0x002ab9a0:	movem	loc, m_OldLocation
000093:0x002ab9b0:	call	DumpToStringNullSafe(loc)
000093:0x002ab9c0:	adds	@s01, _s'[inv] ReplaceItemWithNewLambdaBase Step B) remove OK, loc=', #return
000093:0x002ab9d0:	moves	@s00, @s01
000093:0x002ab9e0:	icall	Print(@s00)
000094:0x002ab9f0:	imove	m_RemoveFromLocationPassed, 0x000001
000094:0x002aba00:	rts
ReplaceItemWithNewLambdaBase::UndoRemoveOldItemFromLocation()
000098:0x002aba58:	movefm	[0xb5badd90], m_OldLocation
000098:0x002aba68:	ncall	LocationAddEntity([0xb5badd90])
000098:0x002aba78:	cmpi	#return, _i0
000098:0x002aba88:	bne	0x2abaa0
000099:0x002aba90:	call	Error(_s'[inv] ReplaceItemWithNewLambdaBase Step B) failed to undo remove')
000100:0x002abaa0:	movem	loc, m_OldLocation
000100:0x002abab0:	call	DumpToStringNullSafe(loc)
000100:0x002abac0:	adds	@s01, _s'[inv] ReplaceItemWithNewLambdaBase Step B) undo remove OK, loc=', #return
000100:0x002abad0:	moves	@s00, @s01
000100:0x002abae0:	icall	Print(@s00)
000100:0x002abaf0:	rts
ReplaceItemWithNewLambdaBase::RemoveNetworkObjectInfo()
000109:0x002abaf8:	ncall	GetGame()
000109:0x002abb00:	movefm	[0xb5bdacd8], m_OldItem
000109:0x002abb10:	ncalli	CGame.RemoteObjectTreeDelete([0xb5bdacd8])
000111:0x002abb20:	imove	m_RemoveNetworkObjectInfoPassed, 0x000001
000111:0x002abb30:	rts
ReplaceItemWithNewLambdaBase::UndoRemoveNetworkObjectInfo()
000115:0x002abb38:	ncall	GetGame()
000115:0x002abb40:	movefm	[0xb5bdad28], m_OldItem
000115:0x002abb50:	ncalli	CGame.RemoteObjectTreeCreate([0xb5bdad28])
000115:0x002abb60:	rts
ReplaceItemWithNewLambdaBase::CreateNewEntity()
000125:0x002abc30:	call	
000125:0x002abc40:	cmpi	#return, _i0
000125:0x002abc50:	beq	0x2ac078
000127:0x002abc58:	call	
000130:0x002abc68:	movefm	[0xb5b18280], m_NewLocation
000130:0x002abc78:	ncalli	InventoryLocation.GetType()
000130:0x002abc80:	move	#switch, #return
000130:0x002abc90:	imove	@m00, 0x000001
000130:0x002abca0:	cmpi	@m00, #switch
000130:0x002abcb0:	bne	0x2abea0
000133:0x002abcb8:	ncall	GetGame()
000133:0x002abcc0:	moves	[0xb5bdab88], m_NewItemType
000133:0x002abcd0:	movefm	[0xb5b18280], m_NewLocation
000133:0x002abce0:	ncalli	InventoryLocation.GetPos()
000133:0x002abce8:	imove	@m01, 0x40000424
000133:0x002abcf8:	move	@m00, @m01
000133:0x002abd08:	ncalli	CGame.CreateObjectEx([0xb5bdab88], #return, @m00, _i512)
000133:0x002abd20:	icall	SafeCastType([0xb5b25dc0], @c01, #return)
000133:0x002abd38:	movetm	new_item, @c01
000134:0x002abd48:	adds	@s03, _s'', CFG_VEHICLESPATH
000134:0x002abd58:	moves	@s02, @s03
000134:0x002abd68:	adds	@s02, @s02, _s' '
000134:0x002abd78:	moves	@s01, @s02
000134:0x002abd88:	adds	@s01, @s01, m_NewItemType
000134:0x002abd98:	moves	@s00, @s01
000134:0x002abda8:	adds	path, @s00, _s' inherit_rotation'
000135:0x002abdb8:	ncall	GetGame()
000135:0x002abdc0:	ncalli	CGame.ConfigIsExisting(path)
000135:0x002abdd0:	cmpi	#return, _i0
000135:0x002abde0:	beq	0x2abe40
000135:0x002abde8:	ncall	GetGame()
000135:0x002abdf0:	ncalli	CGame.ConfigGetInt(path)
000135:0x002abe00:	move	@m00, #return
000135:0x002abe10:	cmpi	@m00, _i0
000135:0x002abe20:	ble	0x2abe40
000135:0x002abe28:	imove	keep_rotation, 0x000001
000135:0x002abe38:	jump	0x2abe50
000135:0x002abe40:	imove	keep_rotation, 0x000000
000136:0x002abe50:	cmpi	keep_rotation, _i0
000136:0x002abe60:	beq	0x2abe90
000138:0x002abe68:	movefm	[0xb5b25dc0], m_OldItem
000138:0x002abe78:	ncalli	EntityAI.GetOrientation()
000138:0x002abe80:	ncalli	EntityAI.SetOrientation(#return)
000140:0x002abe90:	jump	0x2abfd0
000140:0x002abe98:	jump	0x2abec8
000140:0x002abea0:	imove	@m00, 0x000002
000140:0x002abeb0:	cmpi	@m00, #switch
000140:0x002abec0:	bne	0x2abf80
000143:0x002abec8:	movefm	[0xb5b18280], m_NewLocation
000143:0x002abed8:	ncalli	InventoryLocation.GetParent()
000143:0x002abee0:	movec	[0xb5b9f090], null
000143:0x002abef0:	movefm	[0xb5b18280], m_NewLocation
000143:0x002abf00:	ncalli	InventoryLocation.GetSlot()
000143:0x002abf08:	movefm	[0xb5b18280], m_NewLocation
000143:0x002abf18:	ncalli	InventoryLocation.SetAttachment(#return, [0xb5b9f090], #return)
000144:0x002abf30:	movefm	[0xb5bad558], m_NewLocation
000144:0x002abf40:	moves	[0xb5bad580], m_NewItemType
000144:0x002abf50:	ncall	LocationCreateEntity([0xb5bad558], [0xb5bad580], ECE_OBJECT_SWAP, RF_NONE)
000144:0x002abf68:	movetm	new_item, #return
000145:0x002abf78:	jump	0x2abfd0
000147:0x002abf80:	movefm	[0xb5bad620], m_NewLocation
000147:0x002abf90:	moves	[0xb5bad648], m_NewItemType
000147:0x002abfa0:	ncall	LocationCreateLocalEntity([0xb5bad620], [0xb5bad648], ECE_OBJECT_SWAP, RF_NONE)
000147:0x002abfb8:	movetm	new_item, #return
000148:0x002abfc8:	jump	0x2abfd0
000151:0x002abfd0:	icall	ToString(new_item)
000151:0x002abfe0:	adds	@s01, _s'[inv] ReplaceItemWithNewLambdaBase Step D) Created new new_item=', #return
000151:0x002abff0:	moves	@s00, @s01
000151:0x002ac000:	call	hndDebugPrint(@s00)
000152:0x002ac010:	cmpcm	new_item, null
000152:0x002ac020:	beq	0x2ac050
000154:0x002ac028:	movem	#return, new_item
000154:0x002ac038:	release	new_item
000154:0x002ac040:	rts
000154:0x002ac048:	jump	0x2ac070
000158:0x002ac050:	movetm	#return, null
000158:0x002ac060:	release	new_item
000158:0x002ac068:	rts
000158:0x002ac070:	release	new_item
000177:0x002ac078:	movetm	#return, null
000177:0x002ac088:	rts
000177:0x002ac090:	rts
ReplaceItemWithNewLambdaBase::CopyOldPropertiesToNew()
000187:0x002ac0e8:	icall	ToString(old_item)
000187:0x002ac0f8:	adds	@s03, _s'[inv] ReplaceItemWithNewLambdaBase Step E) Copying props ', #return
000187:0x002ac108:	moves	@s02, @s03
000187:0x002ac118:	adds	@s02, @s02, _s' --> '
000187:0x002ac128:	moves	@s01, @s02
000187:0x002ac138:	icall	ToString(new_item)
000187:0x002ac148:	adds	@s01, @s01, #return
000187:0x002ac158:	moves	@s00, @s01
000187:0x002ac168:	call	hndDebugPrint(@s00)
000187:0x002ac178:	rts
ReplaceItemWithNewLambdaBase::DeleteOldEntity()
000195:0x002ac1a8:	icall	ToString(m_OldItem)
000195:0x002ac1b8:	adds	@s01, _s'[inv] ReplaceItemWithNewLambdaBase Step F) delete old item=', #return
000195:0x002ac1c8:	moves	@s00, @s01
000195:0x002ac1d8:	call	hndDebugPrint(@s00)
000196:0x002ac1e8:	movefm	[0xb5b25dc0], m_OldItem
000196:0x002ac1f8:	call	
000196:0x002ac208:	rts
ReplaceItemWithNewLambdaBase::CreateNetworkObjectInfo()
000206:0x002ac238:	icall	ToString(new_item)
000206:0x002ac248:	adds	@s01, _s'[inv] ReplaceItemWithNewLambdaBase Step G) CreateNetworkObjectInfo =', #return
000206:0x002ac258:	moves	@s00, @s01
000206:0x002ac268:	call	hndDebugPrint(@s00)
000207:0x002ac278:	cmpcm	new_item, null
000207:0x002ac288:	beq	0x2ac2b8
000208:0x002ac290:	ncall	GetGame()
000208:0x002ac298:	movefm	[0xb5bdad28], new_item
000208:0x002ac2a8:	ncalli	CGame.RemoteObjectTreeCreate([0xb5bdad28])
000208:0x002ac2b8:	rts
ReplaceItemWithNewLambdaBase::OnSuccess()
000218:0x002ac2e8:	icall	ToString(new_item)
000218:0x002ac2f8:	adds	@s01, _s'[inv] ReplaceItemWithNewLambdaBase Step H) OnSuccess=', #return
000218:0x002ac308:	moves	@s00, @s01
000218:0x002ac318:	call	hndDebugPrint(@s00)
000218:0x002ac328:	rts
ReplaceItemWithNewLambdaBase::OnAbort()
000228:0x002ac358:	icall	Print(_s'Error [inv] ReplaceItemWithNewLambdaBase OnAbort')
000228:0x002ac368:	rts
ReplaceItemWithNewLambdaBase::Execute()
000233:0x002ac5d0:	ncall	GetGame()
000233:0x002ac5d8:	icall	
000233:0x002ac5e0:	move	t, #return
000234:0x002ac5f0:	icall	ToString(t)
000234:0x002ac600:	adds	@s02, _s'[syncinv] t=', #return
000234:0x002ac610:	moves	@s01, @s02
000234:0x002ac620:	adds	@s01, @s01, _s' lambda.Execute start '
000234:0x002ac630:	moves	@s00, @s01
000234:0x002ac640:	call	hndDebugPrint(@s00)
000237:0x002ac650:	call	
000237:0x002ac660:	move	prepared, #return
000239:0x002ac670:	cmpi	prepared, _i0
000239:0x002ac680:	beq	0x2aca40
000239:0x002ac688:	call	
000239:0x002ac698:	cmpi	#return, _i0
000239:0x002ac6a8:	beq	0x2aca40
000242:0x002ac6b0:	call	
000243:0x002ac6c0:	cmpi	m_RemoveFromLocationPassed, _i0
000243:0x002ac6d0:	bne	0x2ac7c0
000245:0x002ac6d8:	movem	loc, m_OldLocation
000245:0x002ac6e8:	call	DumpToStringNullSafe(loc)
000245:0x002ac6f8:	adds	@s01, _s'[inv] ReplaceItemWithNewLambdaBase Step B) ABORT - failed while rm old item from loc=', #return
000245:0x002ac708:	moves	@s00, @s01
000245:0x002ac718:	call	Error(@s00)
000247:0x002ac728:	cmpcm	fsm_to_notify, null
000247:0x002ac738:	beq	0x2ac7a8
000248:0x002ac740:	call	
000248:0x002ac750:	new	@c00, HandEventHumanCommandActionAborted
000248:0x002ac778:	pushc	@c00
000248:0x002ac780:	call	
000248:0x002ac790:	popc	@c00
000248:0x002ac798:	release	@c00
000248:0x002ac7a0:	release	#return
000249:0x002ac7a8:	call	
000250:0x002ac7b8:	rts
000254:0x002ac7c0:	call	
000257:0x002ac7d0:	call	
000257:0x002ac7e0:	movem	new_item, #return
000257:0x002ac7f0:	release	#return
000258:0x002ac7f8:	call	
000258:0x002ac808:	cmpi	#return, _i0
000258:0x002ac818:	beq	0x2ac9d8
000258:0x002ac820:	cmpcm	new_item, null
000258:0x002ac830:	bne	0x2ac9d8
000261:0x002ac838:	adds	@s01, _s'Error [inv] ReplaceItemWithNewLambdaBase Step D) ABORT - wanted to create=', m_NewItemType
000261:0x002ac848:	moves	@s00, @s01
000261:0x002ac858:	adds	@s00, @s00, _s' at loc='
000261:0x002ac868:	moves	@s01, @s00
000261:0x002ac878:	movem	loc, m_NewLocation
000261:0x002ac888:	call	DumpToStringNullSafe(loc)
000261:0x002ac898:	adds	@s01, @s01, #return
000261:0x002ac8a8:	moves	@s00, @s01
000261:0x002ac8b8:	adds	@s00, @s00, _s', but failed'
000261:0x002ac8c8:	moves	@s01, @s00
000261:0x002ac8d8:	icall	Print(@s01)
000262:0x002ac8e8:	cmpi	m_RemoveFromLocationPassed, _i0
000262:0x002ac8f8:	beq	0x2ac910
000263:0x002ac900:	call	
000264:0x002ac910:	cmpi	m_RemoveNetworkObjectInfoPassed, _i0
000264:0x002ac920:	beq	0x2ac938
000265:0x002ac928:	call	
000267:0x002ac938:	call	
000268:0x002ac948:	cmpcm	fsm_to_notify, null
000268:0x002ac958:	beq	0x2ac9c8
000269:0x002ac960:	call	
000269:0x002ac970:	new	@c00, HandEventHumanCommandActionAborted
000269:0x002ac998:	pushc	@c00
000269:0x002ac9a0:	call	
000269:0x002ac9b0:	popc	@c00
000269:0x002ac9b8:	release	@c00
000269:0x002ac9c0:	release	#return
000270:0x002ac9c8:	release	new_item
000270:0x002ac9d0:	rts
000274:0x002ac9d8:	movem	old_item, m_OldItem
000274:0x002ac9e8:	call	
000277:0x002aca00:	call	
000280:0x002aca10:	call	
000283:0x002aca20:	call	
000283:0x002aca30:	release	new_item
000283:0x002aca38:	jump	0x2acae8
000287:0x002aca40:	icall	Print(_s'[syncinv] warning, lambda cannot be executed, skipping!')
000288:0x002aca50:	cmpcm	fsm_to_notify, null
000288:0x002aca60:	beq	0x2acad0
000289:0x002aca68:	call	
000289:0x002aca78:	new	@c00, HandEventHumanCommandActionAborted
000289:0x002acaa0:	pushc	@c00
000289:0x002acaa8:	call	
000289:0x002acab8:	popc	@c00
000289:0x002acac0:	release	@c00
000289:0x002acac8:	release	#return
000290:0x002acad0:	call	
000291:0x002acae0:	rts
000293:0x002acae8:	ncall	GetGame()
000293:0x002acaf0:	icall	
000293:0x002acaf8:	move	te, #return
000294:0x002acb08:	subi	dt, te, t
000295:0x002acb18:	icall	ToString(te)
000295:0x002acb28:	adds	@s03, _s'[syncinv] te=', #return
000295:0x002acb38:	moves	@s02, @s03
000295:0x002acb48:	adds	@s02, @s02, _s' lambda.Execute end, exec time='
000295:0x002acb58:	moves	@s01, @s02
000295:0x002acb68:	icall	ToString(dt)
000295:0x002acb78:	adds	@s01, @s01, #return
000295:0x002acb88:	moves	@s00, @s01
000295:0x002acb98:	call	hndDebugPrint(@s00)
000295:0x002acba8:	rts
ReplaceItemWithNewLambdaBase::DumpToString()
000300:0x002acc28:	icall	ToString(m_OldItem)
000300:0x002acc38:	adds	@s03, _s'{ old=', #return
000300:0x002acc48:	moves	@s02, @s03
000300:0x002acc58:	adds	@s02, @s02, _s' newType='
000300:0x002acc68:	moves	@s01, @s02
000300:0x002acc78:	adds	@s01, @s01, m_NewItemType
000300:0x002acc88:	moves	@s00, @s01
000300:0x002acc98:	adds	s, @s00, _s'}'
000301:0x002acca8:	moves	#return, s
000301:0x002accb8:	rts
000301:0x002accc0:	rts
BleedingSourceEffect::BleedingSourceEffect()
//scripts/3_Game/effects\effectparticle\bleedingsource.c
000005:0x002accc8:	call	
000005:0x002accd8:	rts
BleedingSourceEffectLight::BleedingSourceEffectLight()
000013:0x002acce0:	call	
000013:0x002accf0:	rts
RaycastRVParams::RaycastRVParams()
//scripts/3_Game/global\dayzphysics.c
000077:0x002acd28:	movev	begPos, vBeg
000078:0x002acd38:	movev	endPos, vEnd
000079:0x002acd48:	movem	ignore, pIgnore
000080:0x002acd58:	move	radius, fRadius
000083:0x002acd68:	movetm	with, null
000084:0x002acd78:	imove	flags, 0x000002
000085:0x002acd88:	imove	type, 0x000001
000086:0x002acd98:	imove	sorted, 0x000000
000087:0x002acda8:	imove	groundOnly, 0x000000
000087:0x002acdb8:	rts
CollisionOverlapCallback::OnContact()
000114:0x002acdc0:	imove	#return, 0x000001
000114:0x002acdd0:	rts
000114:0x002acdd8:	rts
PPERequester_TunnelVisionEffects::OnStart()
//scripts/3_Game/ppemanager\requesters\ppertunnel.c
000007:0x002acde0:	call	
000009:0x002acdf0:	movefm	@c01, par
000009:0x002ace00:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000009:0x002ace18:	movec	@c02, @c00
000009:0x002ace28:	move	m_Intensity, param1
000011:0x002ace38:	move	val, m_Intensity
000011:0x002ace48:	call	
000012:0x002ace70:	new	@c01, array<float>
000012:0x002ace90:	pushc	@c01
000012:0x002ace98:	icall	
000012:0x002acea8:	icall	
000012:0x002aceb8:	icall	
000012:0x002acec8:	icall	
000012:0x002aced8:	call	
000012:0x002acef8:	popc	@c01
000012:0x002acf00:	release	@c01
000012:0x002acf08:	rts
Hit_Wood::Hit_Wood()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_wood.c
000005:0x002acf10:	call	
000006:0x002acf20:	call	
000007:0x002acf30:	call	
000007:0x002acf40:	rts
Hit_Wood::OnEnterCalculations()
000013:0x002acfe8:	mulf	@f01, m_StoppingForce, m_EnterSplashCoef
000013:0x002acff8:	move	@f00, @f01
000013:0x002ad008:	addf	velocity_min, MIN_SCALING_PARAM, @f00
000014:0x002ad018:	mulf	@f01, m_StoppingForce, m_EnterSplashCoef
000014:0x002ad028:	move	@f00, @f01
000014:0x002ad038:	addf	velocity_max, MIN_SCALING_PARAM, @f00
000015:0x002ad048:	mulf	@f02, m_StoppingForce, m_EnterSplashCoef
000015:0x002ad058:	move	@f01, @f02
000015:0x002ad068:	mulf	@f01, @f01, _f0.500000
000015:0x002ad078:	move	@f00, @f01
000015:0x002ad088:	addf	size, MIN_SCALING_PARAM, @f00
000016:0x002ad098:	mulf	@f02, m_StoppingForce, m_EnterSplashCoef
000016:0x002ad0a8:	move	@f01, @f02
000016:0x002ad0b8:	mulf	@f01, @f01, _f0.500000
000016:0x002ad0c8:	move	@f00, @f01
000016:0x002ad0d8:	addf	birth_rate, MIN_SCALING_PARAM, @f00
000018:0x002ad0e8:	cmpf	velocity_min, MIN_SCALING_PARAM
000018:0x002ad0f8:	bge	0x2ad110
000019:0x002ad100:	move	velocity_min, MIN_SCALING_PARAM
000021:0x002ad110:	cmpf	size, MIN_SCALING_PARAM
000021:0x002ad120:	bge	0x2ad138
000022:0x002ad128:	move	size, MIN_SCALING_PARAM
000024:0x002ad138:	cmpf	birth_rate, MIN_SCALING_PARAM
000024:0x002ad148:	bge	0x2ad160
000025:0x002ad150:	move	birth_rate, MIN_SCALING_PARAM
000029:0x002ad160:	call	
000030:0x002ad178:	call	
000031:0x002ad190:	call	
000032:0x002ad1a8:	call	
000032:0x002ad1c0:	rts
Hit_Wood::OnExitCalculations()
000037:0x002ad268:	mulf	@f01, outSpeedf, m_ExitSplashCoef
000037:0x002ad278:	move	@f00, @f01
000037:0x002ad288:	addf	velocity_min, _f1.000000, @f00
000038:0x002ad298:	mulf	@f01, outSpeedf, m_ExitSplashCoef
000038:0x002ad2a8:	move	@f00, @f01
000038:0x002ad2b8:	addf	velocity_max, _f1.000000, @f00
000039:0x002ad2c8:	mulf	@f02, outSpeedf, m_ExitSplashCoef
000039:0x002ad2d8:	move	@f01, @f02
000039:0x002ad2e8:	mulf	@f01, @f01, _f0.500000
000039:0x002ad2f8:	move	@f00, @f01
000039:0x002ad308:	addf	size, _f1.000000, @f00
000040:0x002ad318:	mulf	@f02, outSpeedf, m_ExitSplashCoef
000040:0x002ad328:	move	@f01, @f02
000040:0x002ad338:	mulf	@f01, @f01, _f0.500000
000040:0x002ad348:	move	@f00, @f01
000040:0x002ad358:	addf	birth_rate, _f1.000000, @f00
000042:0x002ad368:	cmpf	velocity_min, MIN_SCALING_PARAM
000042:0x002ad378:	bge	0x2ad390
000043:0x002ad380:	move	velocity_min, MIN_SCALING_PARAM
000045:0x002ad390:	cmpf	size, MIN_SCALING_PARAM
000045:0x002ad3a0:	bge	0x2ad3b8
000046:0x002ad3a8:	move	size, MIN_SCALING_PARAM
000048:0x002ad3b8:	cmpf	birth_rate, MIN_SCALING_PARAM
000048:0x002ad3c8:	bge	0x2ad3e0
000049:0x002ad3d0:	move	birth_rate, MIN_SCALING_PARAM
000051:0x002ad3e0:	call	
000052:0x002ad3f8:	call	
000053:0x002ad410:	call	
000054:0x002ad428:	call	
000054:0x002ad440:	rts
Man::Man()
//scripts/3_Game/entities\man.c
000030:0x002ad448:	ncall	SetFlags(this, _i8, false)
000030:0x002ad460:	rts
Man::IsMan()
000033:0x002ad468:	imove	#return, 0x000001
000033:0x002ad478:	rts
000033:0x002ad480:	rts
Man::IsHealthVisible()
000034:0x002ad488:	imove	#return, 0x000000
000034:0x002ad498:	rts
000034:0x002ad4a0:	rts
Man::GetPlayerState()
000039:0x002ad4a8:	call	
000039:0x002ad4b8:	cmpi	#return, _i0
000039:0x002ad4c8:	beq	0x2ad4f0
000039:0x002ad4d0:	imove	#return, 0x000000
000039:0x002ad4e0:	rts
000039:0x002ad4e8:	jump	0x2ad508
000040:0x002ad4f0:	imove	#return, 0x000001
000040:0x002ad500:	rts
000040:0x002ad508:	rts
Man::GetHumanInventory()
000048:0x002ad538:	ncalli	Man.GetInventory()
000048:0x002ad540:	icall	SafeCastType([0xb5b22d08], @c01, #return)
000048:0x002ad558:	movetm	i, @c01
000049:0x002ad568:	movem	#return, i
000049:0x002ad578:	release	i
000049:0x002ad580:	rts
000049:0x002ad588:	release	i
000049:0x002ad590:	rts
Man::GetOnItemAddedToHands()
000059:0x002ad598:	cmpcm	m_OnItemAddedToHands, null
000059:0x002ad5a8:	bne	0x2ad5d0
000060:0x002ad5b0:	new	m_OnItemAddedToHands, ScriptInvoker
000062:0x002ad5d0:	movem	#return, m_OnItemAddedToHands
000062:0x002ad5e0:	rts
000062:0x002ad5e8:	rts
Man::GetOnItemRemovedFromHands()
000068:0x002ad5f0:	cmpcm	m_OnItemRemovedFromHands, null
000068:0x002ad600:	bne	0x2ad628
000069:0x002ad608:	new	m_OnItemRemovedFromHands, ScriptInvoker
000071:0x002ad628:	movem	#return, m_OnItemRemovedFromHands
000071:0x002ad638:	rts
000071:0x002ad640:	rts
Man::EEItemIntoHands()
000076:0x002ad648:	call	
000077:0x002ad658:	cmpcm	m_OnItemAddedToHands, null
000077:0x002ad668:	beq	0x2ad6b0
000078:0x002ad670:	movefm	[0xb425b340], m_OnItemAddedToHands
000078:0x002ad680:	icall	
000078:0x002ad6b0:	rts
Man::EEItemOutOfHands()
000083:0x002ad6b8:	call	
000084:0x002ad6c8:	cmpcm	m_OnItemRemovedFromHands, null
000084:0x002ad6d8:	beq	0x2ad720
000085:0x002ad6e0:	movefm	[0xb425b340], m_OnItemRemovedFromHands
000085:0x002ad6f0:	icall	
000085:0x002ad720:	rts
Man::JunctureDropEntity()
000091:0x002ad728:	call	
000091:0x002ad740:	move	#return, #return
000091:0x002ad750:	rts
000091:0x002ad758:	rts
Man::PredictiveDropEntity()
000096:0x002ad7d8:	ncall	CanStoreInputUserData()
000096:0x002ad7e0:	cmpi	#return, _i0
000096:0x002ad7f0:	bne	0x2ad8c8
000098:0x002ad7f8:	ncalli	Man.GetSimulationTimeStamp()
000098:0x002ad800:	icall	ToString(#return)
000098:0x002ad810:	adds	@s01, _s'[inv] ', #return
000098:0x002ad820:	moves	@s00, @s01
000098:0x002ad830:	adds	@s00, @s00, _s' Man@'
000098:0x002ad840:	moves	@s01, @s00
000098:0x002ad850:	icall	ToString(this)
000098:0x002ad860:	adds	@s01, @s01, #return
000098:0x002ad870:	moves	@s00, @s01
000098:0x002ad880:	adds	@s00, @s00, _s' ::PredictiveDropEntity input data not sent yet, cannot allow another input action'
000098:0x002ad890:	moves	@s01, @s00
000098:0x002ad8a0:	icall	Print(@s01)
000099:0x002ad8b0:	imove	#return, 0x000000
000099:0x002ad8c0:	rts
000102:0x002ad8c8:	ncalli	EntityAI.GetHierarchyParent()
000102:0x002ad8d0:	call	
000102:0x002ad8e8:	cmpi	#return, _i0
000102:0x002ad8f8:	beq	0x2ad930
000103:0x002ad900:	call	
000103:0x002ad910:	move	#return, #return
000103:0x002ad920:	rts
000103:0x002ad928:	jump	0x2ad960
000105:0x002ad930:	call	
000105:0x002ad948:	move	#return, #return
000105:0x002ad958:	rts
000105:0x002ad960:	rts
Man::LocalDropEntity()
000110:0x002ad968:	call	
000110:0x002ad980:	move	#return, #return
000110:0x002ad990:	rts
000110:0x002ad998:	rts
Man::ServerDropEntity()
000115:0x002ad9a0:	call	
000115:0x002ad9b8:	move	#return, #return
000115:0x002ad9c8:	rts
000115:0x002ad9d0:	rts
Man::DropEntityImpl()
000120:0x002ada28:	call	GetDebugName#206374(this)
000120:0x002ada38:	adds	@s07, _s'[inv] ', #return
000120:0x002ada48:	moves	@s06, @s07
000120:0x002ada58:	adds	@s06, @s06, _s' STS = '
000120:0x002ada68:	moves	@s05, @s06
000120:0x002ada78:	ncalli	Man.GetSimulationTimeStamp()
000120:0x002ada80:	icall	ToString(#return)
000120:0x002ada90:	adds	@s05, @s05, #return
000120:0x002adaa0:	moves	@s04, @s05
000120:0x002adab0:	adds	@s04, @s04, _s' ::DropEntity('
000120:0x002adac0:	moves	@s03, @s04
000120:0x002adad0:	call	EnumToString(_T(InventoryMode), mode)
000120:0x002adae8:	adds	@s03, @s03, #return
000120:0x002adaf8:	moves	@s02, @s03
000120:0x002adb08:	adds	@s02, @s02, _s') item='
000120:0x002adb18:	moves	@s01, @s02
000120:0x002adb28:	call	GetDebugName#206374(item)
000120:0x002adb38:	adds	@s01, @s01, #return
000120:0x002adb48:	moves	@s00, @s01
000120:0x002adb58:	call	syncDebugPrint(@s00)
000121:0x002adb68:	call	
000121:0x002adb78:	call	
000121:0x002adb90:	move	code, #return
000121:0x002adba0:	release	#return
000122:0x002adba8:	call	
000123:0x002adbb8:	move	#return, code
000123:0x002adbc8:	rts
000123:0x002adbd0:	rts
Man::CanDropEntity()
000127:0x002adbd8:	imove	#return, 0x000001
000127:0x002adbe8:	rts
000127:0x002adbf0:	rts
Man::NeedInventoryJunctureFromServer()
000131:0x002adbf8:	imove	#return, 0x000000
000131:0x002adc08:	rts
000131:0x002adc10:	rts
Man::JunctureTakeEntityToHands()
000136:0x002adc18:	call	
000136:0x002adc30:	rts
Man::PredictiveTakeEntityToHands()
000141:0x002adc60:	ncall	CanStoreInputUserData()
000141:0x002adc68:	cmpi	#return, _i0
000141:0x002adc78:	bne	0x2add40
000143:0x002adc80:	ncalli	Man.GetSimulationTimeStamp()
000143:0x002adc88:	icall	ToString(#return)
000143:0x002adc98:	adds	@s01, _s'[inv] ', #return
000143:0x002adca8:	moves	@s00, @s01
000143:0x002adcb8:	adds	@s00, @s00, _s' Man@'
000143:0x002adcc8:	moves	@s01, @s00
000143:0x002adcd8:	icall	ToString(this)
000143:0x002adce8:	adds	@s01, @s01, #return
000143:0x002adcf8:	moves	@s00, @s01
000143:0x002add08:	adds	@s00, @s00, _s' ::PredictiveTakeEntityToHands input data not sent yet, cannot allow another input action'
000143:0x002add18:	moves	@s01, @s00
000143:0x002add28:	icall	Print(@s01)
000144:0x002add38:	rts
000147:0x002add40:	ncalli	EntityAI.GetHierarchyParent()
000147:0x002add48:	call	
000147:0x002add60:	cmpi	#return, _i0
000147:0x002add70:	beq	0x2add90
000148:0x002add78:	call	
000148:0x002add88:	jump	0x2adda8
000150:0x002add90:	call	
000150:0x002adda8:	rts
Man::LocalTakeEntityToHands()
000155:0x002addb0:	call	
000155:0x002addc8:	rts
Man::ServerTakeEntityToHands()
000160:0x002addd0:	call	
000160:0x002adde8:	rts
Man::TakeEntityToHandsImpl()
000165:0x002adf18:	ncall	GetGame()
000165:0x002adf20:	ncalli	CGame.IsDedicatedServer()
000165:0x002adf28:	cmpi	#return, _i0
000165:0x002adf38:	bne	0x2adf88
000167:0x002adf40:	new	il, InventoryLocation
000168:0x002adf60:	movefm	[0xb5b9f3b0], item
000168:0x002adf70:	ncalli	InventoryLocation.SetHands(this, [0xb5b9f3b0])
000168:0x002adf80:	release	il
000172:0x002adf88:	call	GetDebugName#206374(this)
000172:0x002adf98:	adds	@s07, _s'[inv] ', #return
000172:0x002adfa8:	moves	@s06, @s07
000172:0x002adfb8:	adds	@s06, @s06, _s' STS = '
000172:0x002adfc8:	moves	@s05, @s06
000172:0x002adfd8:	ncalli	Man.GetSimulationTimeStamp()
000172:0x002adfe0:	icall	ToString(#return)
000172:0x002adff0:	adds	@s05, @s05, #return
000172:0x002ae000:	moves	@s04, @s05
000172:0x002ae010:	adds	@s04, @s04, _s' ::Take2Hands('
000172:0x002ae020:	moves	@s03, @s04
000172:0x002ae030:	call	EnumToString(_T(InventoryMode), mode)
000172:0x002ae048:	adds	@s03, @s03, #return
000172:0x002ae058:	moves	@s02, @s03
000172:0x002ae068:	adds	@s02, @s02, _s') item='
000172:0x002ae078:	moves	@s01, @s02
000172:0x002ae088:	call	GetDebugName#206374(item)
000172:0x002ae098:	adds	@s01, @s01, #return
000172:0x002ae0a8:	moves	@s00, @s01
000172:0x002ae0b8:	call	syncDebugPrint(@s00)
000173:0x002ae0c8:	call	
000173:0x002ae0d8:	ncalli	HumanInventory.GetEntityInHands()
000173:0x002ae0e0:	movetm	itemInHands, #return
000173:0x002ae0f0:	release	#return
000175:0x002ae0f8:	new	src_item, InventoryLocation
000176:0x002ae118:	ncalli	EntityAI.GetInventory()
000176:0x002ae120:	movefm	[0xb5bad1f8], src_item
000176:0x002ae130:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000176:0x002ae140:	cmpi	#return, _i0
000176:0x002ae150:	beq	0x2ae268
000178:0x002ae158:	cmpcm	itemInHands, null
000178:0x002ae168:	bne	0x2ae1f0
000180:0x002ae170:	new	hand_dst, InventoryLocation
000181:0x002ae190:	movefm	[0xb5b9f3b0], item
000181:0x002ae1a0:	ncalli	InventoryLocation.SetHands(this, [0xb5b9f3b0])
000182:0x002ae1b0:	call	
000182:0x002ae1c0:	call	
000182:0x002ae1d8:	release	#return
000182:0x002ae1e0:	release	hand_dst
000182:0x002ae1e8:	jump	0x2ae258
000184:0x002ae1f0:	call	
000184:0x002ae200:	call	CanSwapEntitiesEx(itemInHands, item)
000184:0x002ae218:	cmpi	#return, _i0
000184:0x002ae228:	beq	0x2ae250
000185:0x002ae230:	ncalli	Man.GetInventory()
000185:0x002ae238:	call	
000185:0x002ae250:	release	#return
000186:0x002ae258:	call	
000186:0x002ae268:	release	itemInHands
000186:0x002ae270:	release	src_item
000186:0x002ae278:	rts
Man::LocalDestroyEntityInHands()
000193:0x002ae2a8:	call	GetDebugName#206374(this)
000193:0x002ae2b8:	adds	@s05, _s'[inv] ', #return
000193:0x002ae2c8:	moves	@s04, @s05
000193:0x002ae2d8:	adds	@s04, @s04, _s' STS = '
000193:0x002ae2e8:	moves	@s03, @s04
000193:0x002ae2f8:	ncalli	Man.GetSimulationTimeStamp()
000193:0x002ae300:	icall	ToString(#return)
000193:0x002ae310:	adds	@s03, @s03, #return
000193:0x002ae320:	moves	@s02, @s03
000193:0x002ae330:	adds	@s02, @s02, _s' Destroy IH='
000193:0x002ae340:	moves	@s01, @s02
000193:0x002ae350:	call	
000193:0x002ae360:	ncalli	HumanInventory.GetEntityInHands()
000193:0x002ae368:	icall	ToString(#return)
000193:0x002ae378:	adds	@s01, @s01, #return
000193:0x002ae388:	moves	@s00, @s01
000193:0x002ae398:	call	syncDebugPrint(@s00)
000193:0x002ae3a8:	release	#return
000194:0x002ae3b0:	call	
000194:0x002ae3c0:	pushc	#return
000194:0x002ae3c8:	call	
000194:0x002ae3d8:	movefm	@c01, #return
000194:0x002ae3e8:	popc	#return
000194:0x002ae3f0:	ncalli	HumanInventory.GetEntityInHands()
000194:0x002ae3f8:	call	
000194:0x002ae408:	release	#return
000195:0x002ae410:	call	
000195:0x002ae420:	rts
Man::PredictiveMoveItemFromHandsToInventory()
000200:0x002ae4f0:	call	GetDebugName#206374(this)
000200:0x002ae500:	adds	@s05, _s'[inv] ', #return
000200:0x002ae510:	moves	@s04, @s05
000200:0x002ae520:	adds	@s04, @s04, _s' STS = '
000200:0x002ae530:	moves	@s03, @s04
000200:0x002ae540:	ncalli	Man.GetSimulationTimeStamp()
000200:0x002ae548:	icall	ToString(#return)
000200:0x002ae558:	adds	@s03, @s03, #return
000200:0x002ae568:	moves	@s02, @s03
000200:0x002ae578:	adds	@s02, @s02, _s' Stash IH='
000200:0x002ae588:	moves	@s01, @s02
000200:0x002ae598:	call	
000200:0x002ae5a8:	ncalli	HumanInventory.GetEntityInHands()
000200:0x002ae5b0:	icall	ToString(#return)
000200:0x002ae5c0:	adds	@s01, @s01, #return
000200:0x002ae5d0:	moves	@s00, @s01
000200:0x002ae5e0:	call	syncDebugPrint(@s00)
000200:0x002ae5f0:	release	#return
000201:0x002ae5f8:	ncall	CanStoreInputUserData()
000201:0x002ae600:	cmpi	#return, _i0
000201:0x002ae610:	bne	0x2ae630
000203:0x002ae618:	icall	Print(_s'[inv] PredictiveMoveItemFromHandsToInventory input data not sent yet, cannot allow another input action')
000204:0x002ae628:	rts
000207:0x002ae630:	imove	invMode, 0x000000
000209:0x002ae640:	call	
000209:0x002ae650:	ncalli	HumanInventory.GetEntityInHands()
000209:0x002ae658:	call	
000209:0x002ae670:	cmpi	#return, _i0
000209:0x002ae680:	beq	0x2ae698
000210:0x002ae688:	imove	invMode, 0x000002
000210:0x002ae698:	release	#return
000213:0x002ae6a0:	call	
000213:0x002ae6b0:	ncalli	HumanInventory.GetEntityInHands()
000213:0x002ae6b8:	movec	@c00, #return
000213:0x002ae6c8:	cmpcm	m_OldLocation, null
000213:0x002ae6d8:	beq	0x2aea08
000213:0x002ae6e0:	call	
000213:0x002ae6f0:	ncalli	HumanInventory.GetEntityInHands()
000213:0x002ae6f8:	movec	@c00, #return
000213:0x002ae708:	movefm	[0xb5b18280], m_OldLocation
000213:0x002ae718:	ncalli	InventoryLocation.IsValid()
000213:0x002ae720:	cmpi	#return, _i0
000213:0x002ae730:	beq	0x2aea08
000215:0x002ae738:	new	invLoc, InventoryLocation
000216:0x002ae758:	call	
000216:0x002ae768:	ncalli	HumanInventory.GetEntityInHands()
000216:0x002ae770:	ncalli	EntityAI.GetInventory()
000216:0x002ae778:	movefm	[0xb5bad1f8], invLoc
000216:0x002ae788:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000216:0x002ae798:	release	#return
000218:0x002ae7a0:	call	
000218:0x002ae7b0:	ncalli	HumanInventory.GetEntityInHands()
000218:0x002ae7b8:	movec	@c00, #return
000218:0x002ae7c8:	movefm	[0xb5b18280], m_OldLocation
000218:0x002ae7d8:	ncalli	InventoryLocation.GetParent()
000218:0x002ae7e0:	cmpm	#return, null
000218:0x002ae7f0:	beq	0x2ae9f0
000218:0x002ae7f8:	call	
000218:0x002ae808:	ncalli	HumanInventory.GetEntityInHands()
000218:0x002ae810:	movec	@c00, #return
000218:0x002ae820:	movefm	[0xb5b18280], m_OldLocation
000218:0x002ae830:	ncalli	InventoryLocation.GetParent()
000218:0x002ae838:	ncalli	EntityAI.GetHierarchyRootPlayer()
000218:0x002ae840:	cmpm	#return, null
000218:0x002ae850:	beq	0x2ae9f0
000220:0x002ae858:	call	
000220:0x002ae868:	movefm	[0xb5bad978], invLoc
000220:0x002ae878:	pushc	#return
000220:0x002ae880:	call	
000220:0x002ae890:	movefm	@c01, #return
000220:0x002ae8a0:	popc	#return
000220:0x002ae8a8:	ncalli	HumanInventory.GetEntityInHands()
000220:0x002ae8b0:	movec	@c02, #return
000220:0x002ae8c0:	movefm	[0xb5bad9a0], m_OldLocation
000220:0x002ae8d0:	ncall	LocationCanMoveEntity([0xb5bad978], [0xb5bad9a0])
000220:0x002ae8e0:	cmpi	#return, _i0
000220:0x002ae8f0:	beq	0x2ae9e8
000222:0x002ae8f8:	call	
000222:0x002ae908:	pushc	#return
000222:0x002ae910:	call	
000222:0x002ae920:	movefm	@c01, #return
000222:0x002ae930:	popc	#return
000222:0x002ae938:	ncalli	HumanInventory.GetEntityInHands()
000222:0x002ae940:	movec	@c02, #return
000222:0x002ae950:	movem	dst, m_OldLocation
000222:0x002ae960:	call	
000222:0x002ae978:	cmpi	#return, _i0
000222:0x002ae988:	beq	0x2ae9e0
000224:0x002ae990:	call	
000225:0x002ae9a0:	release	#return
000225:0x002ae9a8:	release	#return
000225:0x002ae9b0:	release	#return
000225:0x002ae9b8:	release	#return
000225:0x002ae9c0:	release	invLoc
000225:0x002ae9c8:	release	#return
000225:0x002ae9d0:	release	#return
000225:0x002ae9d8:	rts
000225:0x002ae9e0:	release	#return
000225:0x002ae9e8:	release	#return
000225:0x002ae9f0:	release	#return
000225:0x002ae9f8:	release	#return
000225:0x002aea00:	release	invLoc
000225:0x002aea08:	release	#return
000225:0x002aea10:	release	#return
000231:0x002aea18:	call	
000231:0x002aea28:	imove	@m01, 0x00000c
000231:0x002aea38:	move	@m00, @m01
000231:0x002aea48:	pushc	#return
000231:0x002aea50:	call	
000231:0x002aea60:	movefm	@c01, #return
000231:0x002aea70:	popc	#return
000231:0x002aea78:	ncalli	HumanInventory.GetEntityInHands()
000231:0x002aea80:	call	
000231:0x002aea98:	release	#return
000232:0x002aeaa0:	call	
000232:0x002aeab0:	rts
Man::ReplaceItemWithNewImpl()
000238:0x002aeb08:	call	GetDebugName#206374(this)
000238:0x002aeb18:	adds	@s05, _s'[inv] ', #return
000238:0x002aeb28:	moves	@s04, @s05
000238:0x002aeb38:	adds	@s04, @s04, _s' STS = '
000238:0x002aeb48:	moves	@s03, @s04
000238:0x002aeb58:	ncalli	Man.GetSimulationTimeStamp()
000238:0x002aeb60:	icall	ToString(#return)
000238:0x002aeb70:	adds	@s03, @s03, #return
000238:0x002aeb80:	moves	@s02, @s03
000238:0x002aeb90:	adds	@s02, @s02, _s' Replace !HND lambda='
000238:0x002aeba0:	moves	@s01, @s02
000238:0x002aebb0:	call	
000238:0x002aebc0:	adds	@s01, @s01, #return
000238:0x002aebd0:	moves	@s00, @s01
000238:0x002aebe0:	call	syncDebugPrint(@s00)
000239:0x002aebf0:	call	
000239:0x002aec00:	call	
000239:0x002aec18:	move	code, #return
000239:0x002aec28:	release	#return
000240:0x002aec30:	call	
000241:0x002aec40:	move	#return, code
000241:0x002aec50:	rts
000241:0x002aec58:	rts
Man::LocalReplaceItemWithNew()
000246:0x002aec60:	call	
000246:0x002aec78:	move	#return, #return
000246:0x002aec88:	rts
000246:0x002aec90:	rts
Man::ServerReplaceItemWithNew()
000251:0x002aec98:	call	
000251:0x002aecb0:	move	#return, #return
000251:0x002aecc0:	rts
000251:0x002aecc8:	rts
Man::ReplaceItemElsewhereWithNewInHandsImpl()
000258:0x002aed20:	call	GetDebugName#206374(this)
000258:0x002aed30:	adds	@s05, _s'[inv] ', #return
000258:0x002aed40:	moves	@s04, @s05
000258:0x002aed50:	adds	@s04, @s04, _s' STS = '
000258:0x002aed60:	moves	@s03, @s04
000258:0x002aed70:	ncalli	Man.GetSimulationTimeStamp()
000258:0x002aed78:	icall	ToString(#return)
000258:0x002aed88:	adds	@s03, @s03, #return
000258:0x002aed98:	moves	@s02, @s03
000258:0x002aeda8:	adds	@s02, @s02, _s' Replace !HND->HND lambda='
000258:0x002aedb8:	moves	@s01, @s02
000258:0x002aedc8:	call	
000258:0x002aedd8:	adds	@s01, @s01, #return
000258:0x002aede8:	moves	@s00, @s01
000258:0x002aedf8:	call	syncDebugPrint(@s00)
000259:0x002aee08:	call	
000259:0x002aee18:	call	
000259:0x002aee30:	move	code, #return
000259:0x002aee40:	release	#return
000260:0x002aee48:	call	
000261:0x002aee58:	move	#return, code
000261:0x002aee68:	rts
000261:0x002aee70:	rts
Man::LocalReplaceItemElsewhereWithNewInHands()
000266:0x002aee78:	call	
000266:0x002aee90:	move	#return, #return
000266:0x002aeea0:	rts
000266:0x002aeea8:	rts
Man::ServerReplaceItemElsewhereWithNewInHands()
000271:0x002aeeb0:	call	
000271:0x002aeec8:	move	#return, #return
000271:0x002aeed8:	rts
000271:0x002aeee0:	rts
Man::ReplaceItemInHandsWithNewImpl()
000278:0x002aef38:	call	GetDebugName#206374(this)
000278:0x002aef48:	adds	@s05, _s'[inv] ', #return
000278:0x002aef58:	moves	@s04, @s05
000278:0x002aef68:	adds	@s04, @s04, _s' STS = '
000278:0x002aef78:	moves	@s03, @s04
000278:0x002aef88:	ncalli	Man.GetSimulationTimeStamp()
000278:0x002aef90:	icall	ToString(#return)
000278:0x002aefa0:	adds	@s03, @s03, #return
000278:0x002aefb0:	moves	@s02, @s03
000278:0x002aefc0:	adds	@s02, @s02, _s' Replace HND->HND lambda='
000278:0x002aefd0:	moves	@s01, @s02
000278:0x002aefe0:	call	
000278:0x002aeff0:	adds	@s01, @s01, #return
000278:0x002af000:	moves	@s00, @s01
000278:0x002af010:	call	syncDebugPrint(@s00)
000279:0x002af020:	call	
000279:0x002af030:	call	
000279:0x002af048:	move	code, #return
000279:0x002af058:	release	#return
000280:0x002af060:	call	
000281:0x002af070:	move	#return, code
000281:0x002af080:	rts
000281:0x002af088:	rts
Man::LocalReplaceItemInHandsWithNew()
000286:0x002af090:	call	
000286:0x002af0a8:	move	#return, #return
000286:0x002af0b8:	rts
000286:0x002af0c0:	rts
Man::ServerReplaceItemInHandsWithNew()
000291:0x002af0c8:	call	
000291:0x002af0e0:	move	#return, #return
000291:0x002af0f0:	rts
000291:0x002af0f8:	rts
Man::ReplaceItemInHandsWithNewElsewhereImpl()
000298:0x002af150:	call	GetDebugName#206374(this)
000298:0x002af160:	adds	@s05, _s'[inv] ', #return
000298:0x002af170:	moves	@s04, @s05
000298:0x002af180:	adds	@s04, @s04, _s' STS = '
000298:0x002af190:	moves	@s03, @s04
000298:0x002af1a0:	ncalli	Man.GetSimulationTimeStamp()
000298:0x002af1a8:	icall	ToString(#return)
000298:0x002af1b8:	adds	@s03, @s03, #return
000298:0x002af1c8:	moves	@s02, @s03
000298:0x002af1d8:	adds	@s02, @s02, _s' Replace HND->elsewhere lambda='
000298:0x002af1e8:	moves	@s01, @s02
000298:0x002af1f8:	call	
000298:0x002af208:	adds	@s01, @s01, #return
000298:0x002af218:	moves	@s00, @s01
000298:0x002af228:	call	syncDebugPrint(@s00)
000299:0x002af238:	call	
000299:0x002af248:	call	
000299:0x002af260:	move	code, #return
000299:0x002af270:	release	#return
000300:0x002af278:	call	
000301:0x002af288:	move	#return, code
000301:0x002af298:	rts
000301:0x002af2a0:	rts
Man::LocalReplaceItemInHandsWithNewElsewhere()
000306:0x002af2a8:	call	
000306:0x002af2c0:	move	#return, #return
000306:0x002af2d0:	rts
000306:0x002af2d8:	rts
Man::ServerReplaceItemInHandsWithNewElsewhere()
000311:0x002af2e0:	call	
000311:0x002af2f8:	move	#return, #return
000311:0x002af308:	rts
000311:0x002af310:	rts
Man::JunctureTakeEntityToInventory()
000318:0x002af318:	call	
000318:0x002af330:	move	#return, #return
000318:0x002af340:	rts
000318:0x002af348:	rts
Man::PredictiveTakeEntityToInventory()
000323:0x002af378:	ncall	CanStoreInputUserData()
000323:0x002af380:	cmpi	#return, _i0
000323:0x002af390:	bne	0x2af468
000325:0x002af398:	ncalli	Man.GetSimulationTimeStamp()
000325:0x002af3a0:	icall	ToString(#return)
000325:0x002af3b0:	adds	@s01, _s'[inv] ', #return
000325:0x002af3c0:	moves	@s00, @s01
000325:0x002af3d0:	adds	@s00, @s00, _s' Man@'
000325:0x002af3e0:	moves	@s01, @s00
000325:0x002af3f0:	icall	ToString(this)
000325:0x002af400:	adds	@s01, @s01, #return
000325:0x002af410:	moves	@s00, @s01
000325:0x002af420:	adds	@s00, @s00, _s' ::PredictiveTakeEntityToInventory input data not sent yet, cannot allow another input action'
000325:0x002af430:	moves	@s01, @s00
000325:0x002af440:	icall	Print(@s01)
000326:0x002af450:	imove	#return, 0x000000
000326:0x002af460:	rts
000329:0x002af468:	ncalli	EntityAI.GetHierarchyParent()
000329:0x002af470:	call	
000329:0x002af488:	cmpi	#return, _i0
000329:0x002af498:	beq	0x2af4d8
000330:0x002af4a0:	call	
000330:0x002af4b8:	move	#return, #return
000330:0x002af4c8:	rts
000330:0x002af4d0:	jump	0x2af508
000332:0x002af4d8:	call	
000332:0x002af4f0:	move	#return, #return
000332:0x002af500:	rts
000332:0x002af508:	rts
Man::LocalTakeEntityToInventory()
000337:0x002af510:	call	
000337:0x002af528:	move	#return, #return
000337:0x002af538:	rts
000337:0x002af540:	rts
Man::ServerTakeEntityToInventory()
000342:0x002af548:	call	
000342:0x002af560:	move	#return, #return
000342:0x002af570:	rts
000342:0x002af578:	rts
Man::TakeEntityToInventoryImpl()
000347:0x002af5d0:	call	GetDebugName#206374(this)
000347:0x002af5e0:	adds	@s07, _s'[inv] ', #return
000347:0x002af5f0:	moves	@s06, @s07
000347:0x002af600:	adds	@s06, @s06, _s' STS = '
000347:0x002af610:	moves	@s05, @s06
000347:0x002af620:	ncalli	Man.GetSimulationTimeStamp()
000347:0x002af628:	icall	ToString(#return)
000347:0x002af638:	adds	@s05, @s05, #return
000347:0x002af648:	moves	@s04, @s05
000347:0x002af658:	adds	@s04, @s04, _s' ::Take2Inv('
000347:0x002af668:	moves	@s03, @s04
000347:0x002af678:	call	EnumToString(_T(InventoryMode), mode)
000347:0x002af690:	adds	@s03, @s03, #return
000347:0x002af6a0:	moves	@s02, @s03
000347:0x002af6b0:	adds	@s02, @s02, _s') item='
000347:0x002af6c0:	moves	@s01, @s02
000347:0x002af6d0:	call	GetDebugName#206374(item)
000347:0x002af6e0:	adds	@s01, @s01, #return
000347:0x002af6f0:	moves	@s00, @s01
000347:0x002af700:	call	syncDebugPrint(@s00)
000348:0x002af710:	call	
000348:0x002af720:	call	
000348:0x002af738:	move	code, #return
000348:0x002af748:	release	#return
000349:0x002af750:	call	
000350:0x002af760:	move	#return, code
000350:0x002af770:	rts
000350:0x002af778:	rts
Man::JunctureTakeEntityToCargo()
000357:0x002af780:	call	
000357:0x002af798:	move	#return, #return
000357:0x002af7a8:	rts
000357:0x002af7b0:	rts
Man::PredictiveTakeEntityToCargo()
000362:0x002af7e0:	ncall	CanStoreInputUserData()
000362:0x002af7e8:	cmpi	#return, _i0
000362:0x002af7f8:	bne	0x2af8d0
000364:0x002af800:	ncalli	Man.GetSimulationTimeStamp()
000364:0x002af808:	icall	ToString(#return)
000364:0x002af818:	adds	@s01, _s'[inv] ', #return
000364:0x002af828:	moves	@s00, @s01
000364:0x002af838:	adds	@s00, @s00, _s' Man@'
000364:0x002af848:	moves	@s01, @s00
000364:0x002af858:	icall	ToString(this)
000364:0x002af868:	adds	@s01, @s01, #return
000364:0x002af878:	moves	@s00, @s01
000364:0x002af888:	adds	@s00, @s00, _s' ::PredictiveTakeEntityToCargo input data not sent yet, cannot allow another input action'
000364:0x002af898:	moves	@s01, @s00
000364:0x002af8a8:	icall	Print(@s01)
000365:0x002af8b8:	imove	#return, 0x000000
000365:0x002af8c8:	rts
000368:0x002af8d0:	ncalli	EntityAI.GetHierarchyParent()
000368:0x002af8d8:	call	
000368:0x002af8f0:	cmpi	#return, _i0
000368:0x002af900:	beq	0x2af938
000369:0x002af908:	call	
000369:0x002af918:	move	#return, #return
000369:0x002af928:	rts
000369:0x002af930:	jump	0x2af968
000371:0x002af938:	call	
000371:0x002af950:	move	#return, #return
000371:0x002af960:	rts
000371:0x002af968:	rts
Man::LocalTakeEntityToCargo()
000376:0x002af970:	call	
000376:0x002af988:	move	#return, #return
000376:0x002af998:	rts
000376:0x002af9a0:	rts
Man::ServerTakeEntityToCargo()
000381:0x002af9a8:	call	
000381:0x002af9c0:	move	#return, #return
000381:0x002af9d0:	rts
000381:0x002af9d8:	rts
Man::TakeEntityToCargoImpl()
000386:0x002afa30:	call	GetDebugName#206374(this)
000386:0x002afa40:	adds	@s07, _s'[inv] ', #return
000386:0x002afa50:	moves	@s06, @s07
000386:0x002afa60:	adds	@s06, @s06, _s' STS = '
000386:0x002afa70:	moves	@s05, @s06
000386:0x002afa80:	ncalli	Man.GetSimulationTimeStamp()
000386:0x002afa88:	icall	ToString(#return)
000386:0x002afa98:	adds	@s05, @s05, #return
000386:0x002afaa8:	moves	@s04, @s05
000386:0x002afab8:	adds	@s04, @s04, _s' ::Take2Cgo('
000386:0x002afac8:	moves	@s03, @s04
000386:0x002afad8:	call	EnumToString(_T(InventoryMode), mode)
000386:0x002afaf0:	adds	@s03, @s03, #return
000386:0x002afb00:	moves	@s02, @s03
000386:0x002afb10:	adds	@s02, @s02, _s') item='
000386:0x002afb20:	moves	@s01, @s02
000386:0x002afb30:	call	GetDebugName#206374(item)
000386:0x002afb40:	adds	@s01, @s01, #return
000386:0x002afb50:	moves	@s00, @s01
000386:0x002afb60:	call	syncDebugPrint(@s00)
000387:0x002afb70:	call	
000387:0x002afb80:	call	
000387:0x002afb98:	move	code, #return
000387:0x002afba8:	release	#return
000388:0x002afbb0:	call	
000389:0x002afbc0:	move	#return, code
000389:0x002afbd0:	rts
000389:0x002afbd8:	rts
Man::JunctureTakeEntityAsAttachment()
000396:0x002afbe0:	call	
000396:0x002afbf8:	move	#return, #return
000396:0x002afc08:	rts
000396:0x002afc10:	rts
Man::PredictiveTakeEntityAsAttachment()
000401:0x002afc40:	ncall	CanStoreInputUserData()
000401:0x002afc48:	cmpi	#return, _i0
000401:0x002afc58:	bne	0x2afd30
000403:0x002afc60:	ncalli	Man.GetSimulationTimeStamp()
000403:0x002afc68:	icall	ToString(#return)
000403:0x002afc78:	adds	@s01, _s'[inv] ', #return
000403:0x002afc88:	moves	@s00, @s01
000403:0x002afc98:	adds	@s00, @s00, _s' Man@'
000403:0x002afca8:	moves	@s01, @s00
000403:0x002afcb8:	icall	ToString(this)
000403:0x002afcc8:	adds	@s01, @s01, #return
000403:0x002afcd8:	moves	@s00, @s01
000403:0x002afce8:	adds	@s00, @s00, _s' ::PredictiveTakeEntityAsAttachment input data not sent yet, cannot allow another input action'
000403:0x002afcf8:	moves	@s01, @s00
000403:0x002afd08:	icall	Print(@s01)
000404:0x002afd18:	imove	#return, 0x000000
000404:0x002afd28:	rts
000407:0x002afd30:	ncalli	EntityAI.GetHierarchyParent()
000407:0x002afd38:	call	
000407:0x002afd50:	cmpi	#return, _i0
000407:0x002afd60:	beq	0x2afd98
000408:0x002afd68:	call	
000408:0x002afd78:	move	#return, #return
000408:0x002afd88:	rts
000408:0x002afd90:	jump	0x2afdc8
000410:0x002afd98:	call	
000410:0x002afdb0:	move	#return, #return
000410:0x002afdc0:	rts
000410:0x002afdc8:	rts
Man::LocalTakeEntityAsAttachment()
000415:0x002afdd0:	call	
000415:0x002afde8:	move	#return, #return
000415:0x002afdf8:	rts
000415:0x002afe00:	rts
Man::ServerTakeEntityAsAttachment()
000420:0x002afe08:	call	
000420:0x002afe20:	move	#return, #return
000420:0x002afe30:	rts
000420:0x002afe38:	rts
Man::TakeEntityAsAttachmentImpl()
000425:0x002afe90:	call	GetDebugName#206374(this)
000425:0x002afea0:	adds	@s07, _s'[inv] ', #return
000425:0x002afeb0:	moves	@s06, @s07
000425:0x002afec0:	adds	@s06, @s06, _s' STS = '
000425:0x002afed0:	moves	@s05, @s06
000425:0x002afee0:	ncalli	Man.GetSimulationTimeStamp()
000425:0x002afee8:	icall	ToString(#return)
000425:0x002afef8:	adds	@s05, @s05, #return
000425:0x002aff08:	moves	@s04, @s05
000425:0x002aff18:	adds	@s04, @s04, _s' ::Take2Att('
000425:0x002aff28:	moves	@s03, @s04
000425:0x002aff38:	call	EnumToString(_T(InventoryMode), mode)
000425:0x002aff50:	adds	@s03, @s03, #return
000425:0x002aff60:	moves	@s02, @s03
000425:0x002aff70:	adds	@s02, @s02, _s') item='
000425:0x002aff80:	moves	@s01, @s02
000425:0x002aff90:	call	GetDebugName#206374(item)
000425:0x002affa0:	adds	@s01, @s01, #return
000425:0x002affb0:	moves	@s00, @s01
000425:0x002affc0:	call	syncDebugPrint(@s00)
000426:0x002affd0:	call	
000426:0x002affe0:	call	
000426:0x002afff8:	move	code, #return
000426:0x002b0008:	release	#return
000427:0x002b0010:	call	
000428:0x002b0020:	move	#return, code
000428:0x002b0030:	rts
000428:0x002b0038:	rts
Man::JunctureTakeEntityAsAttachmentEx()
000435:0x002b0040:	call	
000435:0x002b0058:	move	#return, #return
000435:0x002b0068:	rts
000435:0x002b0070:	rts
Man::PredictiveTakeEntityAsAttachmentEx()
000440:0x002b00a0:	ncall	CanStoreInputUserData()
000440:0x002b00a8:	cmpi	#return, _i0
000440:0x002b00b8:	bne	0x2b0190
000442:0x002b00c0:	ncalli	Man.GetSimulationTimeStamp()
000442:0x002b00c8:	icall	ToString(#return)
000442:0x002b00d8:	adds	@s01, _s'[inv] ', #return
000442:0x002b00e8:	moves	@s00, @s01
000442:0x002b00f8:	adds	@s00, @s00, _s' Man@'
000442:0x002b0108:	moves	@s01, @s00
000442:0x002b0118:	icall	ToString(this)
000442:0x002b0128:	adds	@s01, @s01, #return
000442:0x002b0138:	moves	@s00, @s01
000442:0x002b0148:	adds	@s00, @s00, _s' ::PredictiveTakeEntityAsAttachmentEx input data not sent yet, cannot allow another input action'
000442:0x002b0158:	moves	@s01, @s00
000442:0x002b0168:	icall	Print(@s01)
000443:0x002b0178:	imove	#return, 0x000000
000443:0x002b0188:	rts
000446:0x002b0190:	ncalli	EntityAI.GetHierarchyParent()
000446:0x002b0198:	call	
000446:0x002b01b0:	cmpi	#return, _i0
000446:0x002b01c0:	beq	0x2b0200
000447:0x002b01c8:	call	
000447:0x002b01e0:	move	#return, #return
000447:0x002b01f0:	rts
000447:0x002b01f8:	jump	0x2b0230
000449:0x002b0200:	call	
000449:0x002b0218:	move	#return, #return
000449:0x002b0228:	rts
000449:0x002b0230:	rts
Man::LocalTakeEntityAsAttachmentEx()
000454:0x002b0238:	call	
000454:0x002b0250:	move	#return, #return
000454:0x002b0260:	rts
000454:0x002b0268:	rts
Man::ServerTakeEntityAsAttachmentEx()
000459:0x002b0270:	call	
000459:0x002b0288:	move	#return, #return
000459:0x002b0298:	rts
000459:0x002b02a0:	rts
Man::TakeEntityAsAttachmentExImpl()
000464:0x002b02f8:	call	GetDebugName#206374(this)
000464:0x002b0308:	adds	@s07, _s'[inv] ', #return
000464:0x002b0318:	moves	@s06, @s07
000464:0x002b0328:	adds	@s06, @s06, _s' STS = '
000464:0x002b0338:	moves	@s05, @s06
000464:0x002b0348:	ncalli	Man.GetSimulationTimeStamp()
000464:0x002b0350:	icall	ToString(#return)
000464:0x002b0360:	adds	@s05, @s05, #return
000464:0x002b0370:	moves	@s04, @s05
000464:0x002b0380:	adds	@s04, @s04, _s' ::Take2AttEx('
000464:0x002b0390:	moves	@s03, @s04
000464:0x002b03a0:	call	EnumToString(_T(InventoryMode), mode)
000464:0x002b03b8:	adds	@s03, @s03, #return
000464:0x002b03c8:	moves	@s02, @s03
000464:0x002b03d8:	adds	@s02, @s02, _s') item='
000464:0x002b03e8:	moves	@s01, @s02
000464:0x002b03f8:	call	GetDebugName#206374(item)
000464:0x002b0408:	adds	@s01, @s01, #return
000464:0x002b0418:	moves	@s00, @s01
000464:0x002b0428:	call	syncDebugPrint(@s00)
000465:0x002b0438:	call	
000465:0x002b0448:	call	
000465:0x002b0460:	move	code, #return
000465:0x002b0470:	release	#return
000466:0x002b0478:	call	
000467:0x002b0488:	move	#return, code
000467:0x002b0498:	rts
000467:0x002b04a0:	rts
Man::JunctureSwapEntities()
000474:0x002b04a8:	call	
000474:0x002b04c0:	move	#return, #return
000474:0x002b04d0:	rts
000474:0x002b04d8:	rts
Man::PredictiveSwapEntities()
000479:0x002b05a8:	ncall	CanStoreInputUserData()
000479:0x002b05b0:	cmpi	#return, _i0
000479:0x002b05c0:	bne	0x2b0698
000481:0x002b05c8:	ncalli	Man.GetSimulationTimeStamp()
000481:0x002b05d0:	icall	ToString(#return)
000481:0x002b05e0:	adds	@s01, _s'[inv] ', #return
000481:0x002b05f0:	moves	@s00, @s01
000481:0x002b0600:	adds	@s00, @s00, _s' Man@'
000481:0x002b0610:	moves	@s01, @s00
000481:0x002b0620:	icall	ToString(this)
000481:0x002b0630:	adds	@s01, @s01, #return
000481:0x002b0640:	moves	@s00, @s01
000481:0x002b0650:	adds	@s00, @s00, _s' ::PredictiveSwapEntities input data not sent yet, cannot allow another input action'
000481:0x002b0660:	moves	@s01, @s00
000481:0x002b0670:	icall	Print(@s01)
000482:0x002b0680:	imove	#return, 0x000000
000482:0x002b0690:	rts
000485:0x002b0698:	ncalli	EntityAI.GetHierarchyParent()
000485:0x002b06a0:	pushc	#return
000485:0x002b06a8:	ncalli	EntityAI.GetHierarchyParent()
000485:0x002b06b0:	movec	@c01, #return
000485:0x002b06c0:	popc	#return
000485:0x002b06c8:	call	
000485:0x002b06e0:	move	need_j1, #return
000486:0x002b06f0:	ncalli	EntityAI.GetHierarchyParent()
000486:0x002b06f8:	pushc	#return
000486:0x002b0700:	ncalli	EntityAI.GetHierarchyParent()
000486:0x002b0708:	movec	@c01, #return
000486:0x002b0718:	popc	#return
000486:0x002b0720:	call	
000486:0x002b0738:	move	need_j2, #return
000487:0x002b0748:	cmpi	need_j1, _i0
000487:0x002b0758:	bne	0x2b0778
000487:0x002b0760:	cmpi	need_j2, _i0
000487:0x002b0770:	beq	0x2b07b0
000488:0x002b0778:	call	
000488:0x002b0790:	move	#return, #return
000488:0x002b07a0:	rts
000488:0x002b07a8:	jump	0x2b07e0
000490:0x002b07b0:	call	
000490:0x002b07c8:	move	#return, #return
000490:0x002b07d8:	rts
000490:0x002b07e0:	rts
Man::LocalSwapEntities()
000495:0x002b07e8:	call	
000495:0x002b0800:	move	#return, #return
000495:0x002b0810:	rts
000495:0x002b0818:	rts
Man::ServerSwapEntities()
000500:0x002b0820:	call	
000500:0x002b0838:	move	#return, #return
000500:0x002b0848:	rts
000500:0x002b0850:	rts
Man::SwapEntitiesImpl()
000506:0x002b0970:	call	GetDebugName#206374(this)
000506:0x002b0980:	adds	@s09, _s'[inv] ', #return
000506:0x002b0990:	moves	@s08, @s09
000506:0x002b09a0:	adds	@s08, @s08, _s' STS = '
000506:0x002b09b0:	moves	@s07, @s08
000506:0x002b09c0:	ncalli	Man.GetSimulationTimeStamp()
000506:0x002b09c8:	icall	ToString(#return)
000506:0x002b09d8:	adds	@s07, @s07, #return
000506:0x002b09e8:	moves	@s06, @s07
000506:0x002b09f8:	adds	@s06, @s06, _s' ::SwapImpl('
000506:0x002b0a08:	moves	@s05, @s06
000506:0x002b0a18:	call	EnumToString(_T(InventoryMode), mode)
000506:0x002b0a30:	adds	@s05, @s05, #return
000506:0x002b0a40:	moves	@s04, @s05
000506:0x002b0a50:	adds	@s04, @s04, _s') item1='
000506:0x002b0a60:	moves	@s03, @s04
000506:0x002b0a70:	call	GetDebugName#206374(item1)
000506:0x002b0a80:	adds	@s03, @s03, #return
000506:0x002b0a90:	moves	@s02, @s03
000506:0x002b0aa0:	adds	@s02, @s02, _s' item2='
000506:0x002b0ab0:	moves	@s01, @s02
000506:0x002b0ac0:	call	GetDebugName#206374(this)
000506:0x002b0ad0:	adds	@s01, @s01, #return
000506:0x002b0ae0:	moves	@s00, @s01
000506:0x002b0af0:	call	syncDebugPrint(@s00)
000507:0x002b0b00:	call	CanSwapEntitiesEx(item1, item2)
000507:0x002b0b18:	cmpi	#return, _i0
000507:0x002b0b28:	bne	0x2b0b90
000508:0x002b0b30:	icall	ToString(this)
000508:0x002b0b40:	adds	@s02, _s'[inv] (Man@', #return
000508:0x002b0b50:	moves	@s01, @s02
000508:0x002b0b60:	adds	@s01, @s01, _s') SwapEntitiesImpl - cannot swap items!'
000508:0x002b0b70:	moves	@s00, @s01
000508:0x002b0b80:	call	Error(@s00)
000510:0x002b0b90:	call	
000510:0x002b0ba0:	call	
000510:0x002b0bb8:	move	code, #return
000510:0x002b0bc8:	release	#return
000512:0x002b0bd0:	call	
000513:0x002b0be0:	cmpi	code, _i0
000513:0x002b0bf0:	bne	0x2b0cb0
000514:0x002b0bf8:	call	GetDebugName#206374(this)
000514:0x002b0c08:	adds	@s04, _s'[inv] ', #return
000514:0x002b0c18:	moves	@s03, @s04
000514:0x002b0c28:	adds	@s03, @s03, _s' STS = '
000514:0x002b0c38:	moves	@s02, @s03
000514:0x002b0c48:	ncalli	Man.GetSimulationTimeStamp()
000514:0x002b0c50:	icall	ToString(#return)
000514:0x002b0c60:	adds	@s02, @s02, #return
000514:0x002b0c70:	moves	@s01, @s02
000514:0x002b0c80:	adds	@s01, @s01, _s'  SwapEntitiesImpl - cannot swap or forceswap'
000514:0x002b0c90:	moves	@s00, @s01
000514:0x002b0ca0:	call	syncDebugPrint(@s00)
000515:0x002b0cb0:	move	#return, code
000515:0x002b0cc0:	rts
000515:0x002b0cc8:	rts
Man::JunctureForceSwapEntities()
000522:0x002b0cd0:	call	
000522:0x002b0cf0:	move	#return, #return
000522:0x002b0d00:	rts
000522:0x002b0d08:	rts
Man::PredictiveForceSwapEntities()
000527:0x002b0d88:	ncall	CanStoreInputUserData()
000527:0x002b0d90:	cmpi	#return, _i0
000527:0x002b0da0:	bne	0x2b0e78
000529:0x002b0da8:	ncalli	Man.GetSimulationTimeStamp()
000529:0x002b0db0:	icall	ToString(#return)
000529:0x002b0dc0:	adds	@s01, _s'[inv] ', #return
000529:0x002b0dd0:	moves	@s00, @s01
000529:0x002b0de0:	adds	@s00, @s00, _s' Man@'
000529:0x002b0df0:	moves	@s01, @s00
000529:0x002b0e00:	icall	ToString(this)
000529:0x002b0e10:	adds	@s01, @s01, #return
000529:0x002b0e20:	moves	@s00, @s01
000529:0x002b0e30:	adds	@s00, @s00, _s' ::PredictiveForceSwapEntities input data not sent yet, cannot allow another input action'
000529:0x002b0e40:	moves	@s01, @s00
000529:0x002b0e50:	icall	Print(@s01)
000530:0x002b0e60:	imove	#return, 0x000000
000530:0x002b0e70:	rts
000533:0x002b0e78:	ncalli	EntityAI.GetHierarchyParent()
000533:0x002b0e80:	pushc	#return
000533:0x002b0e88:	ncalli	EntityAI.GetHierarchyParent()
000533:0x002b0e90:	movec	@c01, #return
000533:0x002b0ea0:	popc	#return
000533:0x002b0ea8:	call	
000533:0x002b0ec0:	move	need_j1, #return
000534:0x002b0ed0:	ncalli	EntityAI.GetHierarchyParent()
000534:0x002b0ed8:	pushc	#return
000534:0x002b0ee0:	ncalli	EntityAI.GetHierarchyParent()
000534:0x002b0ee8:	movec	@c01, #return
000534:0x002b0ef8:	popc	#return
000534:0x002b0f00:	call	
000534:0x002b0f18:	move	need_j2, #return
000535:0x002b0f28:	cmpi	need_j1, _i0
000535:0x002b0f38:	bne	0x2b0f58
000535:0x002b0f40:	cmpi	need_j2, _i0
000535:0x002b0f50:	beq	0x2b0f98
000536:0x002b0f58:	call	
000536:0x002b0f78:	move	#return, #return
000536:0x002b0f88:	rts
000536:0x002b0f90:	jump	0x2b0fd0
000538:0x002b0f98:	call	
000538:0x002b0fb8:	move	#return, #return
000538:0x002b0fc8:	rts
000538:0x002b0fd0:	rts
Man::LocalForceSwapEntities()
000543:0x002b0fd8:	call	
000543:0x002b0ff8:	move	#return, #return
000543:0x002b1008:	rts
000543:0x002b1010:	rts
Man::ServerForceSwapEntities()
000548:0x002b1018:	call	
000548:0x002b1038:	move	#return, #return
000548:0x002b1048:	rts
000548:0x002b1050:	rts
Man::ForceSwapEntitiesImpl()
000553:0x002b10d0:	imove	code, 0x000000
000554:0x002b10e0:	call	GetDebugName#206374(this)
000554:0x002b10f0:	adds	@s09, _s'[inv] ', #return
000554:0x002b1100:	moves	@s08, @s09
000554:0x002b1110:	adds	@s08, @s08, _s' STS = '
000554:0x002b1120:	moves	@s07, @s08
000554:0x002b1130:	ncalli	Man.GetSimulationTimeStamp()
000554:0x002b1138:	icall	ToString(#return)
000554:0x002b1148:	adds	@s07, @s07, #return
000554:0x002b1158:	moves	@s06, @s07
000554:0x002b1168:	adds	@s06, @s06, _s'  ForceSwapImpl('
000554:0x002b1178:	moves	@s05, @s06
000554:0x002b1188:	call	EnumToString(_T(InventoryMode), mode)
000554:0x002b11a0:	adds	@s05, @s05, #return
000554:0x002b11b0:	moves	@s04, @s05
000554:0x002b11c0:	adds	@s04, @s04, _s') item1='
000554:0x002b11d0:	moves	@s03, @s04
000554:0x002b11e0:	call	GetDebugName#206374(item1)
000554:0x002b11f0:	adds	@s03, @s03, #return
000554:0x002b1200:	moves	@s02, @s03
000554:0x002b1210:	adds	@s02, @s02, _s' item2='
000554:0x002b1220:	moves	@s01, @s02
000554:0x002b1230:	call	GetDebugName#206374(this)
000554:0x002b1240:	adds	@s01, @s01, #return
000554:0x002b1250:	moves	@s00, @s01
000554:0x002b1260:	call	syncDebugPrint(@s00)
000555:0x002b1270:	call	
000555:0x002b1280:	call	
000555:0x002b12a0:	move	code, #return
000555:0x002b12b0:	release	#return
000557:0x002b12b8:	call	
000558:0x002b12c8:	cmpi	code, _i0
000558:0x002b12d8:	bne	0x2b1398
000559:0x002b12e0:	call	GetDebugName#206374(this)
000559:0x002b12f0:	adds	@s04, _s'[inv] ', #return
000559:0x002b1300:	moves	@s03, @s04
000559:0x002b1310:	adds	@s03, @s03, _s' STS = '
000559:0x002b1320:	moves	@s02, @s03
000559:0x002b1330:	ncalli	Man.GetSimulationTimeStamp()
000559:0x002b1338:	icall	ToString(#return)
000559:0x002b1348:	adds	@s02, @s02, #return
000559:0x002b1358:	moves	@s01, @s02
000559:0x002b1368:	adds	@s01, @s01, _s'  ForceSwapEntitiesImpl - cannot Forceswap'
000559:0x002b1378:	moves	@s00, @s01
000559:0x002b1388:	call	syncDebugPrint(@s00)
000560:0x002b1398:	move	#return, code
000560:0x002b13a8:	rts
000560:0x002b13b0:	rts
Man::JunctureTakeEntityToTargetInventory()
000567:0x002b13b8:	call	
000567:0x002b13d8:	move	#return, #return
000567:0x002b13e8:	rts
000567:0x002b13f0:	rts
Man::PredictiveTakeEntityToTargetInventory()
000572:0x002b1420:	ncall	CanStoreInputUserData()
000572:0x002b1428:	cmpi	#return, _i0
000572:0x002b1438:	bne	0x2b14c0
000574:0x002b1440:	ncalli	Man.GetSimulationTimeStamp()
000574:0x002b1448:	icall	ToString(#return)
000574:0x002b1458:	adds	@s01, _s'[inv] ', #return
000574:0x002b1468:	moves	@s00, @s01
000574:0x002b1478:	adds	@s00, @s00, _s' ::PredictiveTakeEntityToTargetInventory input data not sent yet, cannot allow another input action'
000574:0x002b1488:	moves	@s01, @s00
000574:0x002b1498:	icall	Print(@s01)
000575:0x002b14a8:	imove	#return, 0x000000
000575:0x002b14b8:	rts
000578:0x002b14c0:	ncalli	EntityAI.GetHierarchyParent()
000578:0x002b14c8:	call	
000578:0x002b14e0:	cmpi	#return, _i0
000578:0x002b14f0:	beq	0x2b1530
000579:0x002b14f8:	call	
000579:0x002b1510:	move	#return, #return
000579:0x002b1520:	rts
000579:0x002b1528:	jump	0x2b1568
000581:0x002b1530:	call	
000581:0x002b1550:	move	#return, #return
000581:0x002b1560:	rts
000581:0x002b1568:	rts
Man::PredictiveTakeOrSwapAttachment()
000586:0x002b1618:	ncalli	Man.GetInventory()
000586:0x002b1620:	movefm	[0xb5bacfc8], item
000586:0x002b1630:	ncalli	GameInventory.CanAddAttachment([0xb5bacfc8])
000586:0x002b1640:	cmpi	#return, _i0
000586:0x002b1650:	beq	0x2b1688
000588:0x002b1658:	call	
000588:0x002b1668:	move	#return, #return
000588:0x002b1678:	rts
000588:0x002b1680:	jump	0x2b17c8
000592:0x002b1688:	imove	i, 0x000000
000592:0x002b1698:	jump	0x2b16b8
000592:0x002b16a0:	move	@m00, i
000592:0x002b16b0:	inc	i
000592:0x002b16b8:	ncalli	EntityAI.GetInventory()
000592:0x002b16c0:	ncalli	GameInventory.GetSlotIdCount()
000592:0x002b16c8:	cmpi	i, #return
000592:0x002b16d8:	bge	0x2b17c8
000594:0x002b16e0:	ncalli	EntityAI.GetInventory()
000594:0x002b16e8:	ncalli	GameInventory.GetSlotId(i)
000594:0x002b16f8:	move	slot_id, #return
000595:0x002b1708:	ncalli	Man.GetInventory()
000595:0x002b1710:	ncalli	GameInventory.FindAttachment(slot_id)
000595:0x002b1720:	movetm	slot_item, #return
000596:0x002b1730:	cmpcm	slot_item, null
000596:0x002b1740:	beq	0x2b17b8
000596:0x002b1748:	ncalli	Man.GetInventory()
000596:0x002b1750:	call	CanSwapEntitiesEx(item, slot_item)
000596:0x002b1768:	cmpi	#return, _i0
000596:0x002b1778:	beq	0x2b17b8
000598:0x002b1780:	call	
000598:0x002b1798:	move	#return, #return
000598:0x002b17a8:	release	slot_item
000598:0x002b17b0:	rts
000598:0x002b17b8:	release	slot_item
000598:0x002b17c0:	jump	0x2b16a0
000602:0x002b17c8:	imove	#return, 0x000000
000602:0x002b17d8:	rts
000602:0x002b17e0:	rts
Man::LocalTakeEntityToTargetInventory()
000607:0x002b17e8:	call	
000607:0x002b1808:	move	#return, #return
000607:0x002b1818:	rts
000607:0x002b1820:	rts
Man::TakeEntityToTargetInventoryImpl()
000612:0x002b1878:	call	GetDebugName#206374(this)
000612:0x002b1888:	adds	@s07, _s'[inv] ', #return
000612:0x002b1898:	moves	@s06, @s07
000612:0x002b18a8:	adds	@s06, @s06, _s' STS = '
000612:0x002b18b8:	moves	@s05, @s06
000612:0x002b18c8:	ncalli	Man.GetSimulationTimeStamp()
000612:0x002b18d0:	icall	ToString(#return)
000612:0x002b18e0:	adds	@s05, @s05, #return
000612:0x002b18f0:	moves	@s04, @s05
000612:0x002b1900:	adds	@s04, @s04, _s' ::Take2TargetInv('
000612:0x002b1910:	moves	@s03, @s04
000612:0x002b1920:	call	EnumToString(_T(InventoryMode), mode)
000612:0x002b1938:	adds	@s03, @s03, #return
000612:0x002b1948:	moves	@s02, @s03
000612:0x002b1958:	adds	@s02, @s02, _s') item='
000612:0x002b1968:	moves	@s01, @s02
000612:0x002b1978:	call	GetDebugName#206374(item)
000612:0x002b1988:	adds	@s01, @s01, #return
000612:0x002b1998:	moves	@s00, @s01
000612:0x002b19a8:	call	syncDebugPrint(@s00)
000613:0x002b19b8:	ncalli	Man.GetInventory()
000613:0x002b19c0:	call	
000613:0x002b19e0:	move	code, #return
000614:0x002b19f0:	call	
000615:0x002b1a00:	move	#return, code
000615:0x002b1a10:	rts
000615:0x002b1a18:	rts
Man::JunctureTakeEntityToTargetCargoEx()
000622:0x002b1a20:	call	
000622:0x002b1a40:	move	#return, #return
000622:0x002b1a50:	rts
000622:0x002b1a58:	rts
Man::PredictiveTakeEntityToTargetCargoEx()
000627:0x002b1a88:	ncall	CanStoreInputUserData()
000627:0x002b1a90:	cmpi	#return, _i0
000627:0x002b1aa0:	bne	0x2b1b78
000629:0x002b1aa8:	call	GetDebugName#206374(this)
000629:0x002b1ab8:	adds	@s01, _s'[inv] ', #return
000629:0x002b1ac8:	moves	@s00, @s01
000629:0x002b1ad8:	adds	@s00, @s00, _s' STS = '
000629:0x002b1ae8:	moves	@s01, @s00
000629:0x002b1af8:	ncalli	Man.GetSimulationTimeStamp()
000629:0x002b1b00:	icall	ToString(#return)
000629:0x002b1b10:	adds	@s01, @s01, #return
000629:0x002b1b20:	moves	@s00, @s01
000629:0x002b1b30:	adds	@s00, @s00, _s' ::PredictiveTakeEntityToTargetCargoEx input data not sent yet, cannot allow another input action'
000629:0x002b1b40:	moves	@s01, @s00
000629:0x002b1b50:	icall	Print(@s01)
000630:0x002b1b60:	imove	#return, 0x000000
000630:0x002b1b70:	rts
000633:0x002b1b78:	ncalli	EntityAI.GetHierarchyParent()
000633:0x002b1b80:	ncalli	CargoBase.GetCargoOwner()
000633:0x002b1b88:	call	
000633:0x002b1ba0:	cmpi	#return, _i0
000633:0x002b1bb0:	beq	0x2b1bf8
000634:0x002b1bb8:	call	
000634:0x002b1bd8:	move	#return, #return
000634:0x002b1be8:	rts
000634:0x002b1bf0:	jump	0x2b1c30
000636:0x002b1bf8:	call	
000636:0x002b1c18:	move	#return, #return
000636:0x002b1c28:	rts
000636:0x002b1c30:	rts
Man::LocalTakeEntityToTargetCargoEx()
000641:0x002b1c38:	call	
000641:0x002b1c58:	move	#return, #return
000641:0x002b1c68:	rts
000641:0x002b1c70:	rts
Man::ServerTakeEntityToTargetCargoEx()
000646:0x002b1c78:	call	
000646:0x002b1c98:	move	#return, #return
000646:0x002b1ca8:	rts
000646:0x002b1cb0:	rts
Man::TakeEntityToTargetCargoExImpl()
000651:0x002b1d08:	call	GetDebugName#206374(this)
000651:0x002b1d18:	adds	@s07, _s'[inv] ', #return
000651:0x002b1d28:	moves	@s06, @s07
000651:0x002b1d38:	adds	@s06, @s06, _s' STS = '
000651:0x002b1d48:	moves	@s05, @s06
000651:0x002b1d58:	ncalli	Man.GetSimulationTimeStamp()
000651:0x002b1d60:	icall	ToString(#return)
000651:0x002b1d70:	adds	@s05, @s05, #return
000651:0x002b1d80:	moves	@s04, @s05
000651:0x002b1d90:	adds	@s04, @s04, _s' ::Take2TargetCgoEx('
000651:0x002b1da0:	moves	@s03, @s04
000651:0x002b1db0:	call	EnumToString(_T(InventoryMode), mode)
000651:0x002b1dc8:	adds	@s03, @s03, #return
000651:0x002b1dd8:	moves	@s02, @s03
000651:0x002b1de8:	adds	@s02, @s02, _s') item='
000651:0x002b1df8:	moves	@s01, @s02
000651:0x002b1e08:	call	GetDebugName#206374(item)
000651:0x002b1e18:	adds	@s01, @s01, #return
000651:0x002b1e28:	moves	@s00, @s01
000651:0x002b1e38:	call	syncDebugPrint(@s00)
000652:0x002b1e48:	ncalli	Man.GetInventory()
000652:0x002b1e50:	call	
000652:0x002b1e70:	move	code, #return
000653:0x002b1e80:	call	
000654:0x002b1e90:	move	#return, code
000654:0x002b1ea0:	rts
000654:0x002b1ea8:	rts
Man::JunctureTakeEntityToTargetCargo()
000661:0x002b1eb0:	call	
000661:0x002b1ec8:	move	#return, #return
000661:0x002b1ed8:	rts
000661:0x002b1ee0:	rts
Man::PredictiveTakeEntityToTargetCargo()
000666:0x002b1f10:	ncall	CanStoreInputUserData()
000666:0x002b1f18:	cmpi	#return, _i0
000666:0x002b1f28:	bne	0x2b2000
000668:0x002b1f30:	call	GetDebugName#206374(this)
000668:0x002b1f40:	adds	@s01, _s'[inv] ', #return
000668:0x002b1f50:	moves	@s00, @s01
000668:0x002b1f60:	adds	@s00, @s00, _s' STS = '
000668:0x002b1f70:	moves	@s01, @s00
000668:0x002b1f80:	ncalli	Man.GetSimulationTimeStamp()
000668:0x002b1f88:	icall	ToString(#return)
000668:0x002b1f98:	adds	@s01, @s01, #return
000668:0x002b1fa8:	moves	@s00, @s01
000668:0x002b1fb8:	adds	@s00, @s00, _s' ::PredictiveTakeEntityToTargetCargo input data not sent yet, cannot allow another input action'
000668:0x002b1fc8:	moves	@s01, @s00
000668:0x002b1fd8:	icall	Print(@s01)
000669:0x002b1fe8:	imove	#return, 0x000000
000669:0x002b1ff8:	rts
000672:0x002b2000:	ncalli	EntityAI.GetHierarchyParent()
000672:0x002b2008:	call	
000672:0x002b2020:	cmpi	#return, _i0
000672:0x002b2030:	beq	0x2b2070
000673:0x002b2038:	call	
000673:0x002b2050:	move	#return, #return
000673:0x002b2060:	rts
000673:0x002b2068:	jump	0x2b20a0
000675:0x002b2070:	call	
000675:0x002b2088:	move	#return, #return
000675:0x002b2098:	rts
000675:0x002b20a0:	rts
Man::LocalTakeEntityToTargetCargo()
000680:0x002b20a8:	call	
000680:0x002b20c0:	move	#return, #return
000680:0x002b20d0:	rts
000680:0x002b20d8:	rts
Man::ServerTakeEntityToTargetCargo()
000685:0x002b20e0:	call	
000685:0x002b20f0:	cmpi	#return, _i0
000685:0x002b2100:	beq	0x2b2140
000686:0x002b2108:	call	
000686:0x002b2120:	move	#return, #return
000686:0x002b2130:	rts
000686:0x002b2138:	jump	0x2b2170
000688:0x002b2140:	call	
000688:0x002b2158:	move	#return, #return
000688:0x002b2168:	rts
000688:0x002b2170:	rts
Man::TakeEntityToTargetCargoImpl()
000693:0x002b21c8:	call	GetDebugName#206374(this)
000693:0x002b21d8:	adds	@s07, _s'[inv] ', #return
000693:0x002b21e8:	moves	@s06, @s07
000693:0x002b21f8:	adds	@s06, @s06, _s' STS = '
000693:0x002b2208:	moves	@s05, @s06
000693:0x002b2218:	ncalli	Man.GetSimulationTimeStamp()
000693:0x002b2220:	icall	ToString(#return)
000693:0x002b2230:	adds	@s05, @s05, #return
000693:0x002b2240:	moves	@s04, @s05
000693:0x002b2250:	adds	@s04, @s04, _s' Take2TargetCgo('
000693:0x002b2260:	moves	@s03, @s04
000693:0x002b2270:	call	EnumToString(_T(InventoryMode), mode)
000693:0x002b2288:	adds	@s03, @s03, #return
000693:0x002b2298:	moves	@s02, @s03
000693:0x002b22a8:	adds	@s02, @s02, _s') item='
000693:0x002b22b8:	moves	@s01, @s02
000693:0x002b22c8:	call	GetDebugName#206374(item)
000693:0x002b22d8:	adds	@s01, @s01, #return
000693:0x002b22e8:	moves	@s00, @s01
000693:0x002b22f8:	call	syncDebugPrint(@s00)
000695:0x002b2308:	ncalli	Man.GetInventory()
000695:0x002b2310:	call	
000695:0x002b2330:	move	code, #return
000696:0x002b2340:	call	
000697:0x002b2350:	move	#return, code
000697:0x002b2360:	rts
000697:0x002b2368:	rts
Man::JunctureTakeEntityToTargetAttachmentEx()
000704:0x002b2370:	call	
000704:0x002b2390:	move	#return, #return
000704:0x002b23a0:	rts
000704:0x002b23a8:	rts
Man::PredictiveTakeEntityToTargetAttachmentEx()
000709:0x002b23d8:	ncall	CanStoreInputUserData()
000709:0x002b23e0:	cmpi	#return, _i0
000709:0x002b23f0:	bne	0x2b24c8
000711:0x002b23f8:	call	GetDebugName#206374(this)
000711:0x002b2408:	adds	@s01, _s'[inv] ', #return
000711:0x002b2418:	moves	@s00, @s01
000711:0x002b2428:	adds	@s00, @s00, _s' STS = '
000711:0x002b2438:	moves	@s01, @s00
000711:0x002b2448:	ncalli	Man.GetSimulationTimeStamp()
000711:0x002b2450:	icall	ToString(#return)
000711:0x002b2460:	adds	@s01, @s01, #return
000711:0x002b2470:	moves	@s00, @s01
000711:0x002b2480:	adds	@s00, @s00, _s' ::PredictiveTakeEntityToTargetAttachmentEx input data not sent yet, cannot allow another input action'
000711:0x002b2490:	moves	@s01, @s00
000711:0x002b24a0:	icall	Print(@s01)
000712:0x002b24b0:	imove	#return, 0x000000
000712:0x002b24c0:	rts
000715:0x002b24c8:	ncalli	EntityAI.GetHierarchyParent()
000715:0x002b24d0:	call	
000715:0x002b24e8:	cmpi	#return, _i0
000715:0x002b24f8:	beq	0x2b2538
000716:0x002b2500:	call	
000716:0x002b2518:	move	#return, #return
000716:0x002b2528:	rts
000716:0x002b2530:	jump	0x2b2570
000718:0x002b2538:	call	
000718:0x002b2558:	move	#return, #return
000718:0x002b2568:	rts
000718:0x002b2570:	rts
Man::LocalTakeEntityToTargetAttachmentEx()
000723:0x002b2578:	call	
000723:0x002b2598:	move	#return, #return
000723:0x002b25a8:	rts
000723:0x002b25b0:	rts
Man::ServerTakeEntityToTargetAttachmentEx()
000728:0x002b25b8:	call	
000728:0x002b25d8:	move	#return, #return
000728:0x002b25e8:	rts
000728:0x002b25f0:	rts
Man::TakeEntityToTargetAttachmentExImpl()
000733:0x002b2648:	call	GetDebugName#206374(this)
000733:0x002b2658:	adds	@s07, _s'[inv] ', #return
000733:0x002b2668:	moves	@s06, @s07
000733:0x002b2678:	adds	@s06, @s06, _s' STS = '
000733:0x002b2688:	moves	@s05, @s06
000733:0x002b2698:	ncalli	Man.GetSimulationTimeStamp()
000733:0x002b26a0:	icall	ToString(#return)
000733:0x002b26b0:	adds	@s05, @s05, #return
000733:0x002b26c0:	moves	@s04, @s05
000733:0x002b26d0:	adds	@s04, @s04, _s' ::Take2TargetAtt('
000733:0x002b26e0:	moves	@s03, @s04
000733:0x002b26f0:	call	EnumToString(_T(InventoryMode), mode)
000733:0x002b2708:	adds	@s03, @s03, #return
000733:0x002b2718:	moves	@s02, @s03
000733:0x002b2728:	adds	@s02, @s02, _s') item='
000733:0x002b2738:	moves	@s01, @s02
000733:0x002b2748:	call	GetDebugName#206374(item)
000733:0x002b2758:	adds	@s01, @s01, #return
000733:0x002b2768:	moves	@s00, @s01
000733:0x002b2778:	call	syncDebugPrint(@s00)
000734:0x002b2788:	ncalli	Man.GetInventory()
000734:0x002b2790:	call	
000734:0x002b27b0:	move	code, #return
000735:0x002b27c0:	call	
000736:0x002b27d0:	move	#return, code
000736:0x002b27e0:	rts
000736:0x002b27e8:	rts
Man::JunctureTakeEntityToTargetAttachment()
000743:0x002b27f0:	call	
000743:0x002b2808:	move	#return, #return
000743:0x002b2818:	rts
000743:0x002b2820:	rts
Man::PredictiveTakeEntityToTargetAttachment()
000748:0x002b2850:	ncall	CanStoreInputUserData()
000748:0x002b2858:	cmpi	#return, _i0
000748:0x002b2868:	bne	0x2b2940
000750:0x002b2870:	ncalli	Man.GetSimulationTimeStamp()
000750:0x002b2878:	icall	ToString(#return)
000750:0x002b2888:	adds	@s01, _s'[inv] ', #return
000750:0x002b2898:	moves	@s00, @s01
000750:0x002b28a8:	adds	@s00, @s00, _s' Man@'
000750:0x002b28b8:	moves	@s01, @s00
000750:0x002b28c8:	icall	ToString(this)
000750:0x002b28d8:	adds	@s01, @s01, #return
000750:0x002b28e8:	moves	@s00, @s01
000750:0x002b28f8:	adds	@s00, @s00, _s' ::PredictiveTakeEntityToTargetAttachment input data not sent yet, cannot allow another input action'
000750:0x002b2908:	moves	@s01, @s00
000750:0x002b2918:	icall	Print(@s01)
000751:0x002b2928:	imove	#return, 0x000000
000751:0x002b2938:	rts
000754:0x002b2940:	ncalli	EntityAI.GetHierarchyParent()
000754:0x002b2948:	call	
000754:0x002b2960:	cmpi	#return, _i0
000754:0x002b2970:	beq	0x2b29b0
000755:0x002b2978:	call	
000755:0x002b2990:	move	#return, #return
000755:0x002b29a0:	rts
000755:0x002b29a8:	jump	0x2b29e0
000757:0x002b29b0:	call	
000757:0x002b29c8:	move	#return, #return
000757:0x002b29d8:	rts
000757:0x002b29e0:	rts
Man::LocalTakeEntityToTargetAttachment()
000762:0x002b29e8:	call	
000762:0x002b2a00:	move	#return, #return
000762:0x002b2a10:	rts
000762:0x002b2a18:	rts
Man::ServerTakeEntityToTargetAttachment()
000767:0x002b2a20:	call	
000767:0x002b2a38:	move	#return, #return
000767:0x002b2a48:	rts
000767:0x002b2a50:	rts
Man::TakeEntityToTargetAttachmentImpl()
000772:0x002b2a80:	new	il, InventoryLocation
000773:0x002b2aa0:	ncalli	EntityAI.GetInventory()
000773:0x002b2aa8:	movefm	[0xb5bad248], item
000773:0x002b2ab8:	movefm	[0xb5bad298], il
000773:0x002b2ac8:	ncalli	GameInventory.FindFreeLocationFor([0xb5bad248], _i4, [0xb5bad298])
000773:0x002b2ae0:	cmpi	#return, _i0
000773:0x002b2af0:	beq	0x2b2b40
000775:0x002b2af8:	ncalli	InventoryLocation.GetSlot()
000775:0x002b2b00:	call	
000775:0x002b2b20:	move	#return, #return
000775:0x002b2b30:	release	il
000775:0x002b2b38:	rts
000777:0x002b2b40:	imove	#return, 0x000000
000777:0x002b2b50:	release	il
000777:0x002b2b58:	rts
000777:0x002b2b60:	release	il
000777:0x002b2b68:	rts
Man::JunctureTakeToDst()
000784:0x002b2b70:	call	
000784:0x002b2b88:	move	#return, #return
000784:0x002b2b98:	rts
000784:0x002b2ba0:	rts
Man::PredictiveTakeToDst()
000789:0x002b2bd0:	ncall	CanStoreInputUserData()
000789:0x002b2bd8:	cmpi	#return, _i0
000789:0x002b2be8:	bne	0x2b2cc0
000791:0x002b2bf0:	ncalli	Man.GetSimulationTimeStamp()
000791:0x002b2bf8:	icall	ToString(#return)
000791:0x002b2c08:	adds	@s01, _s'[inv] ', #return
000791:0x002b2c18:	moves	@s00, @s01
000791:0x002b2c28:	adds	@s00, @s00, _s' Man@'
000791:0x002b2c38:	moves	@s01, @s00
000791:0x002b2c48:	icall	ToString(this)
000791:0x002b2c58:	adds	@s01, @s01, #return
000791:0x002b2c68:	moves	@s00, @s01
000791:0x002b2c78:	adds	@s00, @s00, _s' ::PredictiveTakeToDst input data not sent yet, cannot allow another input action'
000791:0x002b2c88:	moves	@s01, @s00
000791:0x002b2c98:	icall	Print(@s01)
000792:0x002b2ca8:	imove	#return, 0x000000
000792:0x002b2cb8:	rts
000795:0x002b2cc0:	ncalli	InventoryLocation.GetItem()
000795:0x002b2cc8:	ncalli	InventoryLocation.GetParent()
000795:0x002b2cd0:	pushc	#return
000795:0x002b2cd8:	ncalli	InventoryLocation.GetParent()
000795:0x002b2ce0:	movec	@c01, #return
000795:0x002b2cf0:	popc	#return
000795:0x002b2cf8:	call	
000795:0x002b2d10:	cmpi	#return, _i0
000795:0x002b2d20:	beq	0x2b2d60
000796:0x002b2d28:	call	
000796:0x002b2d40:	move	#return, #return
000796:0x002b2d50:	rts
000796:0x002b2d58:	jump	0x2b2d90
000798:0x002b2d60:	call	
000798:0x002b2d78:	move	#return, #return
000798:0x002b2d88:	rts
000798:0x002b2d90:	rts
Man::LocalTakeToDst()
000803:0x002b2d98:	call	
000803:0x002b2db0:	move	#return, #return
000803:0x002b2dc0:	rts
000803:0x002b2dc8:	rts
Man::ServerTakeToDst()
000808:0x002b2dd0:	call	
000808:0x002b2de8:	move	#return, #return
000808:0x002b2df8:	rts
000808:0x002b2e00:	rts
Man::TakeToDstImpl()
000813:0x002b2e58:	call	GetDebugName#206374(this)
000813:0x002b2e68:	adds	@s09, _s'[inv] ', #return
000813:0x002b2e78:	moves	@s08, @s09
000813:0x002b2e88:	adds	@s08, @s08, _s' STS = '
000813:0x002b2e98:	moves	@s07, @s08
000813:0x002b2ea8:	ncalli	Man.GetSimulationTimeStamp()
000813:0x002b2eb0:	icall	ToString(#return)
000813:0x002b2ec0:	adds	@s07, @s07, #return
000813:0x002b2ed0:	moves	@s06, @s07
000813:0x002b2ee0:	adds	@s06, @s06, _s' ::Take2Dst('
000813:0x002b2ef0:	moves	@s05, @s06
000813:0x002b2f00:	call	EnumToString(_T(InventoryMode), mode)
000813:0x002b2f18:	adds	@s05, @s05, #return
000813:0x002b2f28:	moves	@s04, @s05
000813:0x002b2f38:	adds	@s04, @s04, _s') src='
000813:0x002b2f48:	moves	@s03, @s04
000813:0x002b2f58:	call	DumpToStringNullSafe(src)
000813:0x002b2f68:	adds	@s03, @s03, #return
000813:0x002b2f78:	moves	@s02, @s03
000813:0x002b2f88:	adds	@s02, @s02, _s' dst='
000813:0x002b2f98:	moves	@s01, @s02
000813:0x002b2fa8:	call	DumpToStringNullSafe(dst)
000813:0x002b2fb8:	adds	@s01, @s01, #return
000813:0x002b2fc8:	moves	@s00, @s01
000813:0x002b2fd8:	call	syncDebugPrint(@s00)
000814:0x002b2fe8:	call	
000814:0x002b2ff8:	call	
000814:0x002b3010:	move	code, #return
000814:0x002b3020:	release	#return
000815:0x002b3028:	call	
000816:0x002b3038:	move	#return, code
000816:0x002b3048:	rts
000816:0x002b3050:	rts
Man::CanBeSkinned()
000828:0x002b3058:	imove	#return, 0x000001
000828:0x002b3068:	rts
000828:0x002b3070:	rts
Man::UpdateInventoryMenu()
000833:0x002b30a0:	ncall	GetGame()
000833:0x002b30a8:	ncalli	CGame.IsClient()
000833:0x002b30b0:	cmpi	#return, _i0
000833:0x002b30c0:	beq	0x2b3120
000835:0x002b30c8:	ncall	GetGame()
000835:0x002b30d0:	ncalli	CGame.GetUIManager()
000835:0x002b30d8:	call	
000835:0x002b30e8:	movem	menu, #return
000835:0x002b30f8:	release	#return
000836:0x002b3100:	cmpcm	menu, null
000836:0x002b3110:	beq	0x2b3118
000836:0x002b3118:	release	menu
000836:0x002b3120:	rts
Man::IsInventorySoftLocked()
000900:0x002b3128:	imove	#return, 0x000000
000900:0x002b3138:	rts
000900:0x002b3140:	rts
Man::IsInTransport()
000904:0x002b3148:	ncalli	Man.GetParent()
000904:0x002b3150:	icall	SafeCastType([0xb5b26438], @c01, #return)
000904:0x002b3168:	cmpc	null, @c01
000904:0x002b3178:	beq	0x2b3198
000904:0x002b3180:	imove	#return, 0x000001
000904:0x002b3190:	jump	0x2b31a8
000904:0x002b3198:	imove	#return, 0x000000
000904:0x002b31a8:	rts
000904:0x002b31b0:	rts
AmmoTypesAPI::MagazineTypeToAmmoType()
//scripts/3_Game/global\ammotypes.c
000014:0x002b31e0:	icall	Exists(magazineType)
000014:0x002b31f0:	cmpi	#return, _i0
000014:0x002b3200:	bne	0x2b32c8
000016:0x002b3208:	icall	GetAmmoType(magazineType, ammoType)
000016:0x002b3218:	cmpi	#return, _i0
000016:0x002b3228:	bne	0x2b3298
000018:0x002b3230:	icall	Format(_s'%1 is not a magazineType or ammoType or has no default 'ammo' set up in config.', magazineType, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000018:0x002b3260:	icall	ErrorEx(#return, _i2)
000019:0x002b3270:	imove	#return, 0x000000
000019:0x002b3280:	moves	ammoType, ammoType
000019:0x002b3290:	rts
000021:0x002b3298:	imove	#return, 0x000001
000021:0x002b32a8:	moves	ammoType, ammoType
000021:0x002b32b8:	rts
000021:0x002b32c0:	jump	0x2b3300
000026:0x002b32c8:	moves	ammoType, magazineType
000027:0x002b32d8:	imove	#return, 0x000001
000027:0x002b32e8:	moves	ammoType, ammoType
000027:0x002b32f8:	rts
000027:0x002b3300:	moves	ammoType, ammoType
000027:0x002b3310:	rts
PMTF::InsertManager()
//scripts/3_Game/particles\tests\pmtf.c
000011:0x002b3318:	movefm	@c00, pm
000011:0x002b3328:	movefm	[0xb5b9b4a0], m_Managers
000011:0x002b3338:	icall	
000011:0x002b3348:	call	
000012:0x002b3358:	inc	PM_CREATED
000014:0x002b3360:	subi	#return, PM_CREATED, _i1
000014:0x002b3370:	rts
000014:0x002b3378:	rts
PMTF::GetManager()
000019:0x002b3380:	movefm	[0xb5b9b4a0], m_Managers
000019:0x002b3390:	icall	
000019:0x002b33a0:	move	#return, #return
000019:0x002b33b0:	movem	pm, pm
000019:0x002b33c0:	rts
000019:0x002b33c8:	movem	pm, pm
000019:0x002b33d8:	rts
PMTF::PrintPMStats()
000029:0x002b3430:	ncalli	ParticleManager.GetPoolSize()
000029:0x002b3438:	ncalli	ParticleManager.GetAllocatedCount()
000029:0x002b3440:	ncalli	ParticleManager.GetVirtualCount()
000029:0x002b3448:	ncalli	ParticleManager.GetPlayingCount()
000029:0x002b3450:	icall	Format(_s'Poolsize: %1 | Allocated: %2 | Virtual: %3 | Playing: %4', #return, #return, #return, #return, _c0, _c0, _c0, _c0, _c0)
000029:0x002b3480:	call	ParticleLog(#return, this, _s'PrintPMStats', pm)
000029:0x002b34a0:	rts
PMTF::PrintActiveStats()
000036:0x002b34f8:	ncall	GetStaticActiveCount()
000036:0x002b3500:	ncall	GetStaticActiveCount()
000036:0x002b3508:	icall	Format(_s'Active ParticleManagers: %1 | Active ParticleSources: %2', #return, #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000036:0x002b3538:	call	ParticleLog(#return, this, _s'PrintActiveStats', _c0)
000036:0x002b3558:	rts
PMTF::CreatePMFixedBlocking()
000044:0x002b3590:	new	@c00, ParticleManagerSettings
000044:0x002b35b8:	pushc	@c00
000044:0x002b35c0:	new	#return, ParticleManager
000044:0x002b35e8:	rts
000044:0x002b35f0:	popc	@c00
000044:0x002b35f8:	release	@c00
000044:0x002b3600:	rts
PMTF::PMTF()
000001:0x002b3608:	new	m_Managers, map<int,@ParticleManager>
000001:0x002b3628:	rts
CfgGameplayJson::CfgGameplayJson()
//scripts/3_Game/cfggameplaydatajson.c
000002:0x002b3630:	imove	version, 0xffffffff
000002:0x002b3640:	new	GeneralData, ITEM_GeneralData
000002:0x002b3660:	new	PlayerData, ITEM_PlayerData
000002:0x002b3680:	new	WorldsData, ITEM_WorldData
000002:0x002b36a0:	new	BaseBuildingData, ITEM_BaseBuildingData
000002:0x002b36c0:	new	UIData, ITEM_UIData
000002:0x002b36e0:	new	MapData, ITEM_MapData
000002:0x002b3700:	rts
ITEM_DataBase::ValidateServer()
000035:0x002b3708:	imove	#return, 0x000001
000035:0x002b3718:	rts
000035:0x002b3720:	rts
ITEM_GeneralData::InitServer()
000045:0x002b3750:	ncall	GetGame()
000045:0x002b3758:	ncalli	CGame.ServerConfigGetInt(_s'disableBaseDamage')
000045:0x002b3768:	move	disableBaseDamage, #return
000046:0x002b3778:	ncall	GetGame()
000046:0x002b3780:	ncalli	CGame.ServerConfigGetInt(_s'disableContainerDamage')
000046:0x002b3790:	move	disableContainerDamage, #return
000047:0x002b37a0:	ncall	GetGame()
000047:0x002b37a8:	ncalli	CGame.ServerConfigGetInt(_s'disableRespawnDialog')
000047:0x002b37b8:	move	disableRespawnDialog, #return
000047:0x002b37c8:	rts
ITEM_GeneralData::ValidateServer()
000052:0x002b37d0:	imove	#return, 0x000001
000052:0x002b37e0:	rts
000052:0x002b37e8:	rts
ITEM_PlayerData::InitServer()
000073:0x002b3818:	ncall	GetGame()
000073:0x002b3820:	ncalli	CGame.ServerConfigGetInt(_s'disablePersonalLight')
000073:0x002b3830:	move	disablePersonalLight, #return
000073:0x002b3840:	rts
ITEM_PlayerData::ValidateServer()
000078:0x002b3848:	imove	#return, 0x000001
000078:0x002b3858:	rts
000078:0x002b3860:	rts
ITEM_PlayerData::ITEM_PlayerData()
000064:0x002b3868:	new	StaminaData, ITEM_StaminaData
000064:0x002b3888:	new	ShockHandlingData, ITEM_ShockHandlingData
000064:0x002b38a8:	new	MovementData, ITEM_MovementData
000064:0x002b38c8:	new	DrowningData, ITEM_DrowningData
000064:0x002b38e8:	rts
ITEM_ShockHandlingData::ValidateServer()
000098:0x002b38f0:	imove	#return, 0x000001
000098:0x002b3900:	rts
000098:0x002b3908:	rts
ITEM_ShockHandlingData::ITEM_ShockHandlingData()
000090:0x002b3910:	imove	shockRefillSpeedConscious, 5.00000
000090:0x002b3920:	imove	shockRefillSpeedUnconscious, 1.00000
000090:0x002b3930:	imove	allowRefillSpeedModifier, 0x000001
000090:0x002b3940:	rts
ITEM_StaminaData::ValidateServer()
000118:0x002b3948:	imove	#return, 0x000001
000118:0x002b3958:	rts
000118:0x002b3960:	rts
ITEM_StaminaData::ITEM_StaminaData()
000110:0x002b3968:	imove	staminaWeightLimitThreshold, 6000.00000
000110:0x002b3978:	imove	staminaMax, 100.00000
000110:0x002b3988:	imove	staminaKgToStaminaPercentPenalty, 1.75000
000110:0x002b3998:	imove	staminaMinCap, 5.00000
000110:0x002b39a8:	imove	sprintStaminaModifierErc, 1.00000
000110:0x002b39b8:	imove	sprintStaminaModifierCro, 1.00000
000110:0x002b39c8:	imove	sprintSwimmingStaminaModifier, 1.00000
000110:0x002b39d8:	imove	sprintLadderStaminaModifier, 1.00000
000110:0x002b39e8:	imove	meleeStaminaModifier, 1.00000
000110:0x002b39f8:	imove	obstacleTraversalStaminaModifier, 1.00000
000110:0x002b3a08:	imove	holdBreathStaminaModifier, 1.00000
000110:0x002b3a18:	rts
ITEM_MovementData::ValidateServer()
000146:0x002b3a20:	imove	#return, 0x000001
000146:0x002b3a30:	rts
000146:0x002b3a38:	rts
ITEM_MovementData::ITEM_MovementData()
000138:0x002b3a90:	imove	timeToStrafeJog, 0.10000
000138:0x002b3aa0:	imove	rotationSpeedJog, 0.15000
000138:0x002b3ab0:	imove	timeToSprint, 0.45000
000138:0x002b3ac0:	imove	timeToStrafeSprint, 0.30000
000138:0x002b3ad0:	imove	rotationSpeedSprint, 0.15000
000138:0x002b3ae0:	imove	allowStaminaAffectInertia, 0x000001
000138:0x002b3af0:	rts
ITEM_WorldData::InitServer()
000165:0x002b3b20:	ncall	GetGame()
000165:0x002b3b28:	ncalli	CGame.ServerConfigGetInt(_s'lightingConfig')
000165:0x002b3b38:	move	lightingConfig, #return
000166:0x002b3b48:	new	wetnessWeightModifiers, array<float>
000166:0x002b3b68:	movefm	[0xd3156238], wetnessWeightModifiers
000166:0x002b3b78:	icall	
000166:0x002b3b88:	movefm	[0xd3156238], wetnessWeightModifiers
000166:0x002b3b98:	icall	
000166:0x002b3ba8:	movefm	[0xd3156238], wetnessWeightModifiers
000166:0x002b3bb8:	icall	
000166:0x002b3bc8:	movefm	[0xd3156238], wetnessWeightModifiers
000166:0x002b3bd8:	icall	
000166:0x002b3be8:	movefm	[0xd3156238], wetnessWeightModifiers
000166:0x002b3bf8:	icall	
000166:0x002b3c08:	rts
ITEM_WorldData::ValidateServer()
000171:0x002b3c10:	cmpcm	wetnessWeightModifiers, null
000171:0x002b3c20:	beq	0x2b3c68
000171:0x002b3c28:	movefm	[0xd3156238], wetnessWeightModifiers
000171:0x002b3c38:	ncalli	array<float>.Count()
000171:0x002b3c40:	move	@m00, #return
000171:0x002b3c50:	cmpi	@m00, _i5
000171:0x002b3c60:	beq	0x2b3c80
000173:0x002b3c68:	imove	#return, 0x000000
000173:0x002b3c78:	rts
000176:0x002b3c80:	imove	#return, 0x000001
000176:0x002b3c90:	rts
000176:0x002b3c98:	rts
ITEM_WorldData::ITEM_WorldData()
000161:0x002b3ca0:	new	wetnessWeightModifiers, array<float>
000161:0x002b3cc0:	movefm	[0xd3156238], wetnessWeightModifiers
000161:0x002b3cd0:	icall	
000161:0x002b3ce0:	movefm	[0xd3156238], wetnessWeightModifiers
000161:0x002b3cf0:	icall	
000161:0x002b3d00:	movefm	[0xd3156238], wetnessWeightModifiers
000161:0x002b3d10:	icall	
000161:0x002b3d20:	movefm	[0xd3156238], wetnessWeightModifiers
000161:0x002b3d30:	icall	
000161:0x002b3d40:	movefm	[0xd3156238], wetnessWeightModifiers
000161:0x002b3d50:	icall	
000161:0x002b3d60:	rts
ITEM_BaseBuildingData::ValidateServer()
000200:0x002b3d68:	imove	#return, 0x000001
000200:0x002b3d78:	rts
000200:0x002b3d80:	rts
ITEM_BaseBuildingData::ITEM_BaseBuildingData()
000191:0x002b3d88:	new	HologramData, ITEM_HologramData
000191:0x002b3da8:	new	ConstructionData, ITEM_ConstructionData
000191:0x002b3dc8:	rts
ITEM_HologramData::ValidateServer()
000220:0x002b3dd0:	imove	#return, 0x000001
000220:0x002b3de0:	rts
000220:0x002b3de8:	rts
ITEM_ConstructionData::ValidateServer()
000248:0x002b3df0:	imove	#return, 0x000001
000248:0x002b3e00:	rts
000248:0x002b3e08:	rts
ITEM_UIData::InitServer()
000265:0x002b3e10:	movefm	[0xb5b3d6a0], HitIndicationData
000265:0x002b3e20:	call	
000265:0x002b3e30:	rts
ITEM_UIData::ValidateServer()
000270:0x002b3e38:	imove	#return, 0x000001
000270:0x002b3e48:	rts
000270:0x002b3e50:	rts
ITEM_UIData::ITEM_UIData()
000261:0x002b3e58:	new	HitIndicationData, ITEM_HitIndicationData
000261:0x002b3e78:	imove	use3DMap, 0x000000
000261:0x002b3e88:	rts
ITEM_HitIndicationData::InitServer()
000285:0x002b3e90:	imove	hitDirectionOverrideEnabled, 0x000000
000286:0x002b3ea0:	imove	hitIndicationPostProcessEnabled, 0x000000
000286:0x002b3eb0:	rts
ITEM_HitIndicationData::ValidateServer()
000291:0x002b3eb8:	imove	#return, 0x000001
000291:0x002b3ec8:	rts
000291:0x002b3ed0:	rts
ITEM_HitIndicationData::ITEM_HitIndicationData()
000281:0x002b3ed8:	imove	hitDirectionOverrideEnabled, 0x000000
000281:0x002b3ee8:	imove	hitDirectionBehaviour, 0x000001
000281:0x002b3ef8:	imove	hitDirectionStyle, 0x000000
000281:0x002b3f08:	imove	hitDirectionMaxDuration, 2.00000
000281:0x002b3f18:	imove	hitDirectionBreakPointRelative, 0.20000
000281:0x002b3f28:	imove	hitDirectionScatter, 10.00000
000281:0x002b3f38:	imove	hitIndicationPostProcessEnabled, 0x000000
000281:0x002b3f48:	rts
ITEM_MapData::ValidateServer()
000317:0x002b3f50:	imove	#return, 0x000001
000317:0x002b3f60:	rts
000317:0x002b3f68:	rts
ITEM_MapData::ITEM_MapData()
000309:0x002b3f70:	imove	ignoreMapOwnership, 0x000000
000309:0x002b3f80:	imove	ignoreNavItemsOwnership, 0x000000
000309:0x002b3f90:	imove	displayPlayerPosition, 0x000000
000309:0x002b3fa0:	imove	displayNavInfo, 0x000001
000309:0x002b3fb0:	rts
ITEM_DrowningData::ValidateServer()
000338:0x002b3fb8:	imove	#return, 0x000001
000338:0x002b3fc8:	rts
000338:0x002b3fd0:	rts
ITEM_DrowningData::ITEM_DrowningData()
000330:0x002b3fd8:	imove	staminaDepletionSpeed, 10.00000
000330:0x002b3fe8:	imove	healthDepletionSpeed, 10.00000
000330:0x002b3ff8:	imove	shockDepletionSpeed, 10.00000
000330:0x002b4008:	rts
PPEEyeAccomodationNative::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\exceptions\ppeeyeaccomodationnative.c
000019:0x002b4010:	imove	#return, 0x000034
000019:0x002b4020:	rts
000019:0x002b4028:	rts
PPEEyeAccomodationNative::RegisterMaterialParameters()
000024:0x002b4030:	call	
000024:0x002b4050:	rts
PPEEyeAccomodationNative::SetFinalParameterValue()
000030:0x002b40a8:	call	
000030:0x002b40b8:	call	
000030:0x002b40c8:	movem	values, #return
000030:0x002b40d8:	release	#return
000030:0x002b40e0:	release	#return
000031:0x002b40e8:	movefm	@c01, values
000031:0x002b40f8:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000031:0x002b4110:	movec	@c02, @c00
000031:0x002b4120:	move	value_var_float, param1
000033:0x002b4130:	ncalli	DayZGame.GetWorld()
000033:0x002b4138:	ncalli	World.SetEyeAccom(value_var_float)
000033:0x002b4148:	release	values
000033:0x002b4150:	rts
DayZInfected::EEHitBy()
//scripts/3_Game/entities\dayzinfected.c
000154:0x002b41d0:	call	
000161:0x002b4200:	ncall	ToType(ammo)
000161:0x002b4210:	ncall	IsInherited(#return, _T(Nonlethal_Base))
000161:0x002b4220:	cmpi	#return, _i0
000161:0x002b4230:	beq	0x2b42a8
000164:0x002b4238:	ncalli	TotalDamageResult.GetDamage(dmgZone, _s'Shock')
000164:0x002b4248:	move	dam, #return
000167:0x002b4258:	call	
000168:0x002b4270:	call	
000168:0x002b4280:	subf	@f00, _f0.000000, #return
000168:0x002b4290:	ncalli	DayZInfected.AddHealth(_s'', _s'Health', @f00)
000172:0x002b42a8:	call	
000172:0x002b42b8:	cmpi	#return, _i0
000172:0x002b42c8:	bne	0x2b4530
000174:0x002b42d0:	cmpi	m_DeathSyncSent, _i0
000174:0x002b42e0:	bne	0x2b4530
000176:0x002b42e8:	ncalli	EntityAI.GetHierarchyRootPlayer()
000176:0x002b42f0:	movetm	killer, #return
000178:0x002b4300:	cmpcm	m_KillerData, null
000178:0x002b4310:	bne	0x2b4398
000180:0x002b4318:	new	m_KillerData, KillerData
000181:0x002b4338:	movefm	[0xb5b3c4a8], m_KillerData
000181:0x002b4348:	movec	@c00, [0xb5b3c4a8]
000181:0x002b4358:	movem	m_Killer, killer
000182:0x002b4368:	movefm	[0xb5b3c4a8], m_KillerData
000182:0x002b4378:	movec	@c00, [0xb5b3c4a8]
000182:0x002b4388:	movem	m_MurderWeapon, source
000185:0x002b4398:	cmpcm	killer, null
000185:0x002b43a8:	beq	0x2b4468
000185:0x002b43b0:	call	
000185:0x002b43c0:	cmpi	#return, _i0
000185:0x002b43d0:	beq	0x2b4468
000188:0x002b43d8:	cmps	dmgZone, _s'Head'
000188:0x002b43e8:	bne	0x2b4468
000190:0x002b43f0:	imove	m_KilledByHeadshot, 0x000001
000191:0x002b4400:	movefm	[0xb5b3c4a8], m_KillerData
000191:0x002b4410:	movec	@c00, [0xb5b3c4a8]
000191:0x002b4420:	cmpm	m_Killer, killer
000191:0x002b4430:	bne	0x2b4468
000192:0x002b4438:	movefm	[0xb5b3c4a8], m_KillerData
000192:0x002b4448:	movec	@c01, [0xb5b3c4a8]
000192:0x002b4458:	imove	m_KillerHiTheBrain, 0x000001
000195:0x002b4468:	movefm	[0xb5b3c4a8], m_KillerData
000195:0x002b4478:	movec	@c01, [0xb5b3c4a8]
000195:0x002b4488:	movem	killer, m_Killer
000195:0x002b4498:	movefm	[0xb5b3c4a8], m_KillerData
000195:0x002b44a8:	movec	@c02, [0xb5b3c4a8]
000195:0x002b44b8:	movem	source, m_MurderWeapon
000195:0x002b44c8:	movefm	[0xb5b3c4a8], m_KillerData
000195:0x002b44d8:	movec	@c00, [0xb5b3c4a8]
000195:0x002b44e8:	move	is_headshot, m_KillerHiTheBrain
000195:0x002b44f8:	call	SendEntityKilled(this, killer, source, is_headshot)
000196:0x002b4518:	imove	m_DeathSyncSent, 0x000001
000196:0x002b4528:	release	killer
000196:0x002b4530:	rts
DayZInfected::ConvertNonlethalDamage()
000203:0x002b4560:	mulf	converted_dmg, damage, PROJECTILE_CONVERSION_INFECTED
000205:0x002b4570:	move	#return, converted_dmg
000205:0x002b4580:	rts
000205:0x002b4588:	rts
DayZInfected::HandleSpecialZoneDamage()
000210:0x002b4608:	cmpf	damage, LEG_CRIPPLE_THRESHOLD
000210:0x002b4618:	bge	0x2b4628
000211:0x002b4620:	rts
000213:0x002b4628:	cmps	dmgZone, _s'LeftLeg'
000213:0x002b4638:	beq	0x2b4658
000213:0x002b4640:	cmps	dmgZone, _s'RightLeg'
000213:0x002b4650:	bne	0x2b4670
000215:0x002b4658:	ncalli	DayZInfected.SetHealth(dmgZone, _s'Health', _f0.000000)
000217:0x002b4670:	cmps	dmgZone, _s'Torso'
000217:0x002b4680:	beq	0x2b46a0
000217:0x002b4688:	cmps	dmgZone, _s'Head'
000217:0x002b4698:	bne	0x2b46b0
000219:0x002b46a0:	imove	m_HeavyHitOverride, 0x000001
000219:0x002b46b0:	rts
DayZInfected::GetHideIconMask()
000225:0x002b46b8:	imove	#return, 0x000001
000225:0x002b46c8:	rts
000225:0x002b46d0:	rts
VerticalSpacer::UpdateChild()
//scripts/3_Game/gui\spacers\verticalspacer.c
000009:0x002b4728:	citf	@f01, border
000009:0x002b4738:	mulf	@f01, _f2.000000, @f01
000009:0x002b4748:	move	@f00, @f01
000009:0x002b4758:	subf	itemWidth, w, @f00
000010:0x002b4768:	citf	@f03, border
000010:0x002b4778:	mulf	@f03, @f03, _f2.000000
000010:0x002b4788:	move	@f02, @f03
000010:0x002b4798:	subf	@f02, h, @f02
000010:0x002b47a8:	move	@f01, @f02
000010:0x002b47b8:	citf	@f04, m_count
000010:0x002b47c8:	subf	@f04, @f04, _f1.000000
000010:0x002b47d8:	move	@f03, @f04
000010:0x002b47e8:	citf	@f04, gap
000010:0x002b47f8:	mulf	@f03, @f03, @f04
000010:0x002b4808:	move	@f02, @f03
000010:0x002b4818:	subf	@f01, @f01, @f02
000010:0x002b4828:	move	@f00, @f01
000010:0x002b4838:	citf	@f01, m_count
000010:0x002b4848:	divf	itemHeight, @f00, @f01
000012:0x002b4858:	citf	[0xd315fea8], border
000012:0x002b4868:	citf	@f03, gap
000012:0x002b4878:	addf	@f03, itemHeight, @f03
000012:0x002b4888:	move	@f02, @f03
000012:0x002b4898:	citf	@f03, index
000012:0x002b48a8:	mulf	@f02, @f02, @f03
000012:0x002b48b8:	move	@f01, @f02
000012:0x002b48c8:	citf	@f02, border
000012:0x002b48d8:	addf	@f01, @f02, @f01
000012:0x002b48e8:	move	@f00, @f01
000012:0x002b48f8:	ncalli	Widget.SetPos([0xd315fea8], @f00, _i1)
000013:0x002b4910:	ncalli	Widget.SetSize(itemWidth, itemHeight, _i1)
000013:0x002b4928:	rts
HandStateEmpty::OnEntry()
//scripts/3_Game/systems\inventory\hand_states.c
000014:0x002b4958:	cmpcm	e, null
000014:0x002b4968:	beq	0x2b4a98
000016:0x002b4970:	movefm	@c00, e
000016:0x002b4980:	move	#switch, m_EventID
000016:0x002b4990:	imove	@m00, 0x000002
000016:0x002b49a0:	cmpi	@m00, #switch
000016:0x002b49b0:	bne	0x2b4a98
000019:0x002b49b8:	call	
000019:0x002b49c8:	movefm	[0xb5baee20], #return
000019:0x002b49d8:	call	
000019:0x002b49e8:	movefm	[0xb5baee48], #return
000019:0x002b49f8:	ncall	HasInventoryReservation([0xb5baee20], [0xb5baee48])
000019:0x002b4a08:	cmpi	#return, _i0
000019:0x002b4a18:	beq	0x2b4a80
000020:0x002b4a20:	call	
000020:0x002b4a30:	movefm	[0xb5baecf0], #return
000020:0x002b4a40:	call	
000020:0x002b4a50:	movefm	[0xb5baed18], #return
000020:0x002b4a60:	ncall	ClearInventoryReservation([0xb5baecf0], [0xb5baed18])
000020:0x002b4a70:	release	#return
000020:0x002b4a78:	release	#return
000020:0x002b4a80:	release	#return
000020:0x002b4a88:	release	#return
000021:0x002b4a90:	jump	0x2b4a98
000026:0x002b4a98:	call	
000026:0x002b4aa8:	rts
HandStateEmpty::OnExit()
000028:0x002b4ab0:	call	
000028:0x002b4ac0:	rts
HandStateEmpty::GetCurrentStateID()
000029:0x002b4ac8:	imove	#return, 0x000001
000029:0x002b4ad8:	rts
000029:0x002b4ae0:	rts
HandStateEquipped::OnEntry()
000036:0x002b4b10:	cmpcm	e, null
000036:0x002b4b20:	beq	0x2b4c50
000038:0x002b4b28:	movefm	@c00, e
000038:0x002b4b38:	move	#switch, m_EventID
000038:0x002b4b48:	imove	@m00, 0x000002
000038:0x002b4b58:	cmpi	@m00, #switch
000038:0x002b4b68:	bne	0x2b4c50
000041:0x002b4b70:	call	
000041:0x002b4b80:	movefm	[0xb5baee20], #return
000041:0x002b4b90:	call	
000041:0x002b4ba0:	movefm	[0xb5baee48], #return
000041:0x002b4bb0:	ncall	HasInventoryReservation([0xb5baee20], [0xb5baee48])
000041:0x002b4bc0:	cmpi	#return, _i0
000041:0x002b4bd0:	beq	0x2b4c38
000042:0x002b4bd8:	call	
000042:0x002b4be8:	movefm	[0xb5baecf0], #return
000042:0x002b4bf8:	call	
000042:0x002b4c08:	movefm	[0xb5baed18], #return
000042:0x002b4c18:	ncall	ClearInventoryReservation([0xb5baecf0], [0xb5baed18])
000042:0x002b4c28:	release	#return
000042:0x002b4c30:	release	#return
000042:0x002b4c38:	release	#return
000042:0x002b4c40:	release	#return
000043:0x002b4c48:	jump	0x2b4c50
000048:0x002b4c50:	call	
000048:0x002b4c60:	rts
HandStateEquipped::OnExit()
000061:0x002b4c68:	call	
000061:0x002b4c78:	rts
HandStateEquipped::GetCurrentStateID()
000063:0x002b4c80:	imove	#return, 0x000002
000063:0x002b4c90:	rts
000063:0x002b4c98:	rts
WorldData::WorldData()
//scripts/3_Game/worlddata.c
000019:0x002b4ca0:	call	
000019:0x002b4cb0:	rts
WorldData::Init()
000024:0x002b4ee8:	imove	m_DayTemperature, 10.00000
000025:0x002b4ef8:	imove	m_NightTemperature, 6.00000
000026:0x002b4f08:	ncalli	DayZGame.GetWeather()
000026:0x002b4f10:	movec	m_Weather, #return
000027:0x002b4f20:	imove	m_EnvironmentTemperature, 12.00000
000028:0x002b4f30:	imove	m_Timer, 0.00000
000029:0x002b4f40:	imove	m_Sunrise_Jan, 8.54000
000030:0x002b4f50:	imove	m_Sunset_Jan, 15.52000
000031:0x002b4f60:	imove	m_Sunrise_Jul, 3.26000
000032:0x002b4f70:	imove	m_Sunset_Jul, 20.73000
000033:0x002b4f80:	imove	@m00, 0x000000
000033:0x002b4f90:	ftv	m_MaxTemps[@m00], _f3.000000
000033:0x002b4fa0:	inc	@m00
000033:0x002b4fa8:	ftv	m_MaxTemps[@m00], _f5.000000
000033:0x002b4fb8:	inc	@m00
000033:0x002b4fc0:	ftv	m_MaxTemps[@m00], _f7.000000
000033:0x002b4fd0:	inc	@m00
000033:0x002b4fd8:	ftv	m_MaxTemps[@m00], _f14.000000
000033:0x002b4fe8:	inc	@m00
000033:0x002b4ff0:	ftv	m_MaxTemps[@m00], _f19.000000
000033:0x002b5000:	inc	@m00
000033:0x002b5008:	ftv	m_MaxTemps[@m00], _f24.000000
000033:0x002b5018:	inc	@m00
000033:0x002b5020:	ftv	m_MaxTemps[@m00], _f26.000000
000033:0x002b5030:	inc	@m00
000033:0x002b5038:	ftv	m_MaxTemps[@m00], _f25.000000
000033:0x002b5048:	inc	@m00
000033:0x002b5050:	ftv	m_MaxTemps[@m00], _f21.000000
000033:0x002b5060:	inc	@m00
000033:0x002b5068:	ftv	m_MaxTemps[@m00], _f16.000000
000033:0x002b5078:	inc	@m00
000033:0x002b5080:	ftv	m_MaxTemps[@m00], _f10.000000
000033:0x002b5090:	inc	@m00
000033:0x002b5098:	ftv	m_MaxTemps[@m00], _f5.000000
000033:0x002b50a8:	inc	@m00
000034:0x002b50b0:	imove	@m00, 0x000000
000034:0x002b50c0:	ftv	m_MinTemps[@m00], _f-3.000000
000034:0x002b50d0:	inc	@m00
000034:0x002b50d8:	ftv	m_MinTemps[@m00], _f-2.000000
000034:0x002b50e8:	inc	@m00
000034:0x002b50f0:	ftv	m_MinTemps[@m00], _f0.000000
000034:0x002b5100:	inc	@m00
000034:0x002b5108:	ftv	m_MinTemps[@m00], _f4.000000
000034:0x002b5118:	inc	@m00
000034:0x002b5120:	ftv	m_MinTemps[@m00], _f9.000000
000034:0x002b5130:	inc	@m00
000034:0x002b5138:	ftv	m_MinTemps[@m00], _f14.000000
000034:0x002b5148:	inc	@m00
000034:0x002b5150:	ftv	m_MinTemps[@m00], _f18.000000
000034:0x002b5160:	inc	@m00
000034:0x002b5168:	ftv	m_MinTemps[@m00], _f17.000000
000034:0x002b5178:	inc	@m00
000034:0x002b5180:	ftv	m_MinTemps[@m00], _f12.000000
000034:0x002b5190:	inc	@m00
000034:0x002b5198:	ftv	m_MinTemps[@m00], _f7.000000
000034:0x002b51a8:	inc	@m00
000034:0x002b51b0:	ftv	m_MinTemps[@m00], _f4.000000
000034:0x002b51c0:	inc	@m00
000034:0x002b51c8:	ftv	m_MinTemps[@m00], _f0.000000
000034:0x002b51d8:	inc	@m00
000034:0x002b51e0:	rts
WorldData::GetApproxSunriseTime()
000039:0x002b5210:	cmpf	monthday, _f8.000000
000039:0x002b5220:	bgt	0x2b52e8
000040:0x002b5228:	subf	@f03, m_Sunrise_Jan, m_Sunrise_Jul
000040:0x002b5238:	move	@f02, @f03
000040:0x002b5248:	imove	@f04, 7.00000
000040:0x002b5258:	move	@f03, @f04
000040:0x002b5268:	divf	@f02, @f02, @f03
000040:0x002b5278:	move	@f01, @f02
000040:0x002b5288:	subf	@f03, _f1.000000, monthday
000040:0x002b5298:	move	@f02, @f03
000040:0x002b52a8:	mulf	@f01, @f01, @f02
000040:0x002b52b8:	move	@f00, @f01
000040:0x002b52c8:	addf	#return, @f00, m_Sunrise_Jan
000040:0x002b52d8:	rts
000040:0x002b52e0:	jump	0x2b53a0
000042:0x002b52e8:	subf	@f03, monthday, _f8.000000
000042:0x002b52f8:	move	@f02, @f03
000042:0x002b5308:	subf	@f04, m_Sunrise_Jan, m_Sunrise_Jul
000042:0x002b5318:	move	@f03, @f04
000042:0x002b5328:	mulf	@f02, @f02, @f03
000042:0x002b5338:	move	@f01, @f02
000042:0x002b5348:	imove	@f03, 5.00000
000042:0x002b5358:	move	@f02, @f03
000042:0x002b5368:	divf	@f01, @f01, @f02
000042:0x002b5378:	move	@f00, @f01
000042:0x002b5388:	addf	#return, @f00, m_Sunrise_Jul
000042:0x002b5398:	rts
000042:0x002b53a0:	rts
WorldData::GetApproxSunsetTime()
000046:0x002b53a8:	cmpf	monthday, _f8.000000
000046:0x002b53b8:	bgt	0x2b5480
000047:0x002b53c0:	subf	@f03, m_Sunset_Jan, m_Sunset_Jul
000047:0x002b53d0:	move	@f02, @f03
000047:0x002b53e0:	imove	@f04, 7.00000
000047:0x002b53f0:	move	@f03, @f04
000047:0x002b5400:	divf	@f02, @f02, @f03
000047:0x002b5410:	move	@f01, @f02
000047:0x002b5420:	subf	@f03, _f1.000000, monthday
000047:0x002b5430:	move	@f02, @f03
000047:0x002b5440:	mulf	@f01, @f01, @f02
000047:0x002b5450:	move	@f00, @f01
000047:0x002b5460:	addf	#return, @f00, m_Sunset_Jan
000047:0x002b5470:	rts
000047:0x002b5478:	jump	0x2b5538
000049:0x002b5480:	subf	@f03, monthday, _f8.000000
000049:0x002b5490:	move	@f02, @f03
000049:0x002b54a0:	subf	@f04, m_Sunset_Jan, m_Sunset_Jul
000049:0x002b54b0:	move	@f03, @f04
000049:0x002b54c0:	mulf	@f02, @f02, @f03
000049:0x002b54d0:	move	@f01, @f02
000049:0x002b54e0:	imove	@f03, 5.00000
000049:0x002b54f0:	move	@f02, @f03
000049:0x002b5500:	divf	@f01, @f01, @f02
000049:0x002b5510:	move	@f00, @f01
000049:0x002b5520:	addf	#return, @f00, m_Sunset_Jul
000049:0x002b5530:	rts
000049:0x002b5538:	rts
WorldData::CalcBaseEnvironmentTemperature()
000053:0x002b59e8:	call	
000053:0x002b59f8:	move	approxSunrise, #return
000054:0x002b5a08:	call	
000054:0x002b5a18:	move	approxSunset, #return
000055:0x002b5a28:	subf	dayLight, approxSunset, approxSunrise
000056:0x002b5a38:	subf	nightTime, _f24.000000, dayLight
000057:0x002b5a48:	icall	Floor(monthday)
000057:0x002b5a58:	citf	@f01, _i1
000057:0x002b5a68:	subf	@f00, #return, @f01
000057:0x002b5a78:	cfti	tempArrayIndex, @f00
000058:0x002b5a88:	addi	tempArrayIndexToLerp, tempArrayIndex, _i1
000059:0x002b5a98:	cmpi	tempArrayIndexToLerp, _i12
000059:0x002b5aa8:	blt	0x2b5ac0
000060:0x002b5ab0:	imove	tempArrayIndexToLerp, 0x000000
000061:0x002b5ac0:	icall	Floor(monthday)
000061:0x002b5ad0:	subf	tempArrayLerp, monthday, #return
000062:0x002b5ae0:	ffv	minTempA, m_MinTemps[tempArrayIndex]
000063:0x002b5af0:	ffv	minTempB, m_MinTemps[tempArrayIndexToLerp]
000064:0x002b5b00:	ffv	maxTempA, m_MaxTemps[tempArrayIndex]
000065:0x002b5b10:	ffv	maxTempB, m_MaxTemps[tempArrayIndexToLerp]
000066:0x002b5b20:	subf	@f03, minTempA, maxTempA
000066:0x002b5b30:	move	@f02, @f03
000066:0x002b5b40:	icall	AbsFloat(@f02)
000066:0x002b5b50:	mulf	@f01, _f0.500000, #return
000066:0x002b5b60:	move	@f00, @f01
000066:0x002b5b70:	addf	eveningMinA, minTempA, @f00
000067:0x002b5b80:	subf	@f03, minTempB, maxTempB
000067:0x002b5b90:	move	@f02, @f03
000067:0x002b5ba0:	icall	AbsFloat(@f02)
000067:0x002b5bb0:	mulf	@f01, _f0.500000, #return
000067:0x002b5bc0:	move	@f00, @f01
000067:0x002b5bd0:	addf	eveningMinB, minTempB, @f00
000069:0x002b5be0:	cmpf	daytime, approxSunrise
000069:0x002b5bf0:	blt	0x2b5ed8
000069:0x002b5bf8:	cmpf	daytime, approxSunset
000069:0x002b5c08:	bgt	0x2b5ed8
000070:0x002b5c10:	mulf	@f02, dayLight, _f0.750000
000070:0x002b5c20:	move	@f01, @f02
000070:0x002b5c30:	addf	@f01, approxSunrise, @f01
000070:0x002b5c40:	move	@f00, @f01
000070:0x002b5c50:	cmpf	daytime, @f00
000070:0x002b5c60:	bgt	0x2b5d70
000071:0x002b5c68:	icall	Lerp(minTempA, minTempB, tempArrayLerp)
000071:0x002b5c80:	push	#return
000071:0x002b5c88:	icall	Lerp(maxTempA, maxTempB, tempArrayLerp)
000071:0x002b5ca0:	move	@f02, #return
000071:0x002b5cb0:	pop	#return
000071:0x002b5cb8:	subf	@f04, daytime, approxSunrise
000071:0x002b5cc8:	move	@f03, @f04
000071:0x002b5cd8:	mulf	@f05, dayLight, _f0.750000
000071:0x002b5ce8:	move	@f04, @f05
000071:0x002b5cf8:	divf	@f03, @f03, @f04
000071:0x002b5d08:	move	@f01, @f03
000071:0x002b5d18:	push	#return
000071:0x002b5d20:	icall	Lerp(#return, @f02, @f01)
000071:0x002b5d38:	move	@f03, #return
000071:0x002b5d48:	pop	#return
000071:0x002b5d50:	move	#return, @f03
000071:0x002b5d60:	rts
000071:0x002b5d68:	jump	0x2b5ed0
000076:0x002b5d70:	icall	Lerp(maxTempA, maxTempB, tempArrayLerp)
000076:0x002b5d88:	push	#return
000076:0x002b5d90:	icall	Lerp(eveningMinA, eveningMinB, tempArrayLerp)
000076:0x002b5da8:	move	@f02, #return
000076:0x002b5db8:	pop	#return
000076:0x002b5dc0:	subf	@f05, daytime, approxSunrise
000076:0x002b5dd0:	move	@f04, @f05
000076:0x002b5de0:	mulf	@f06, dayLight, _f0.750000
000076:0x002b5df0:	move	@f05, @f06
000076:0x002b5e00:	subf	@f04, @f04, @f05
000076:0x002b5e10:	move	@f03, @f04
000076:0x002b5e20:	mulf	@f06, dayLight, _f0.750000
000076:0x002b5e30:	move	@f05, @f06
000076:0x002b5e40:	subf	@f05, dayLight, @f05
000076:0x002b5e50:	move	@f04, @f05
000076:0x002b5e60:	divf	@f03, @f03, @f04
000076:0x002b5e70:	move	@f01, @f03
000076:0x002b5e80:	push	#return
000076:0x002b5e88:	icall	Lerp(#return, @f02, @f01)
000076:0x002b5ea0:	move	@f03, #return
000076:0x002b5eb0:	pop	#return
000076:0x002b5eb8:	move	#return, @f03
000076:0x002b5ec8:	rts
000076:0x002b5ed0:	jump	0x2b6170
000081:0x002b5ed8:	cmpf	daytime, approxSunset
000081:0x002b5ee8:	ble	0x2b6030
000081:0x002b5ef0:	cmpf	daytime, _f24.000000
000081:0x002b5f00:	bge	0x2b6030
000082:0x002b5f08:	icall	Lerp(eveningMinA, eveningMinB, tempArrayLerp)
000082:0x002b5f20:	push	#return
000082:0x002b5f28:	icall	Lerp(minTempA, minTempB, tempArrayLerp)
000082:0x002b5f40:	move	@f02, #return
000082:0x002b5f50:	pop	#return
000082:0x002b5f58:	subf	@f05, daytime, approxSunset
000082:0x002b5f68:	move	@f04, @f05
000082:0x002b5f78:	subf	@f06, _f24.000000, approxSunset
000082:0x002b5f88:	move	@f05, @f06
000082:0x002b5f98:	divf	@f04, @f04, @f05
000082:0x002b5fa8:	move	@f03, @f04
000082:0x002b5fb8:	divf	@f03, @f03, _f2.000000
000082:0x002b5fc8:	move	@f01, @f03
000082:0x002b5fd8:	push	#return
000082:0x002b5fe0:	icall	Lerp(#return, @f02, @f01)
000082:0x002b5ff8:	move	@f03, #return
000082:0x002b6008:	pop	#return
000082:0x002b6010:	move	#return, @f03
000082:0x002b6020:	rts
000082:0x002b6028:	jump	0x2b6170
000087:0x002b6030:	icall	Lerp(eveningMinA, eveningMinB, tempArrayLerp)
000087:0x002b6048:	push	#return
000087:0x002b6050:	icall	Lerp(minTempA, minTempB, tempArrayLerp)
000087:0x002b6068:	move	@f02, #return
000087:0x002b6078:	pop	#return
000087:0x002b6080:	subf	@f07, _f24.000000, approxSunset
000087:0x002b6090:	move	@f06, @f07
000087:0x002b60a0:	addf	@f06, daytime, @f06
000087:0x002b60b0:	move	@f05, @f06
000087:0x002b60c0:	divf	@f05, @f05, nightTime
000087:0x002b60d0:	move	@f04, @f05
000087:0x002b60e0:	divf	@f04, @f04, _f2.000000
000087:0x002b60f0:	move	@f03, @f04
000087:0x002b6100:	addf	@f03, @f03, _f0.500000
000087:0x002b6110:	move	@f01, @f03
000087:0x002b6120:	push	#return
000087:0x002b6128:	icall	Lerp(#return, @f02, @f01)
000087:0x002b6140:	move	@f03, #return
000087:0x002b6150:	pop	#return
000087:0x002b6158:	move	#return, @f03
000087:0x002b6168:	rts
000087:0x002b6170:	rts
WorldData::UpdateBaseEnvTemperature()
000095:0x002b6268:	move	@f00, timeslice
000095:0x002b6278:	addf	m_Timer, m_Timer, @f00
000096:0x002b6288:	cmpf	m_Timer, _f30.000000
000096:0x002b6298:	ble	0x2b63c8
000099:0x002b62a0:	ncall	GetGame()
000099:0x002b62a8:	ncalli	CGame.GetWorld()
000099:0x002b62b0:	icall	
000100:0x002b62d0:	citf	@f02, day
000100:0x002b62e0:	divf	@f02, @f02, _f32.000000
000100:0x002b62f0:	move	@f01, @f02
000100:0x002b6300:	citf	@f02, month
000100:0x002b6310:	addf	@f01, @f02, @f01
000100:0x002b6320:	move	@f00, @f01
000100:0x002b6330:	citf	@f03, minute
000100:0x002b6340:	divf	@f03, @f03, _f60.000000
000100:0x002b6350:	move	@f02, @f03
000100:0x002b6360:	citf	@f03, hour
000100:0x002b6370:	addf	@f02, @f03, @f02
000100:0x002b6380:	move	@f01, @f02
000100:0x002b6390:	call	
000100:0x002b63a8:	move	m_EnvironmentTemperature, #return
000101:0x002b63b8:	imove	m_Timer, 0.00000
000101:0x002b63c8:	rts
WorldData::GetBaseEnvTemperature()
000108:0x002b63d0:	move	#return, m_EnvironmentTemperature
000108:0x002b63e0:	rts
000108:0x002b63e8:	rts
WorldData::GetBaseEnvTemperatureExact()
000112:0x002b63f0:	citf	@f02, day
000112:0x002b6400:	divf	@f02, @f02, _f32.000000
000112:0x002b6410:	move	@f01, @f02
000112:0x002b6420:	citf	@f02, month
000112:0x002b6430:	addf	@f01, @f02, @f01
000112:0x002b6440:	move	@f00, @f01
000112:0x002b6450:	citf	@f03, minute
000112:0x002b6460:	divf	@f03, @f03, _f60.000000
000112:0x002b6470:	move	@f02, @f03
000112:0x002b6480:	citf	@f03, hour
000112:0x002b6490:	addf	@f02, @f03, @f02
000112:0x002b64a0:	move	@f01, @f02
000112:0x002b64b0:	call	
000112:0x002b64c8:	move	#return, #return
000112:0x002b64d8:	rts
000112:0x002b64e0:	rts
WorldData::GetDayTemperature()
000118:0x002b64e8:	move	#return, m_DayTemperature
000118:0x002b64f8:	rts
000118:0x002b6500:	rts
WorldData::GetNightTemperature()
000123:0x002b6508:	move	#return, m_NightTemperature
000123:0x002b6518:	rts
000123:0x002b6520:	rts
WorldData::WeatherOnBeforeChange()
000129:0x002b6528:	imove	#return, 0x000000
000129:0x002b6538:	rts
000129:0x002b6540:	rts
WorldData::GetArtyFiringPos()
000135:0x002b6548:	movem	#return, m_FiringPos
000135:0x002b6558:	rts
000135:0x002b6560:	rts
WorldData::BaseTempDebug()
000141:0x002b6630:	icall	Print(_s'--------------------')
000142:0x002b6640:	imove	i, 0x000000
000142:0x002b6650:	jump	0x2b6670
000142:0x002b6658:	move	@m00, i
000142:0x002b6668:	inc	i
000142:0x002b6670:	cmpi	i, _i24
000142:0x002b6680:	bge	0x2b6750
000144:0x002b6688:	imove	j, 0x000000
000144:0x002b6698:	jump	0x2b66b8
000144:0x002b66a0:	move	@m00, j
000144:0x002b66b0:	inc	j
000144:0x002b66b8:	cmpi	j, _i6
000144:0x002b66c8:	bge	0x2b6748
000146:0x002b66d0:	muli	minute, j, _i10
000147:0x002b66e0:	call	
000147:0x002b6700:	icall	Format(_s'%1:%2      %3', i, minute, #return, _c0, _c0, _c0, _c0, _c0, _c0)
000147:0x002b6730:	icall	Print(#return)
000147:0x002b6740:	jump	0x2b66a0
000147:0x002b6748:	jump	0x2b6658
000147:0x002b6750:	rts
ClientData::ResetClientData()
//scripts/3_Game/client\clientdata.c
000015:0x002b6758:	cmpcm	m_PlayerBaseList, null
000015:0x002b6768:	beq	0x2b6778
000016:0x002b6770:	ncalli	array<Man>.Clear()
000017:0x002b6778:	cmpcm	m_PlayerList, null
000017:0x002b6788:	beq	0x2b67e0
000017:0x002b6790:	movefm	@c00, m_PlayerList
000017:0x002b67a0:	cmpcm	m_PlayerList, null
000017:0x002b67b0:	beq	0x2b67e0
000018:0x002b67b8:	movefm	@c00, m_PlayerList
000018:0x002b67c8:	movefm	[0xb5c2c6a8], m_PlayerList
000018:0x002b67d8:	ncalli	array<@SyncPlayer>.Clear()
000019:0x002b67e0:	cmpcm	m_LastNewPlayers, null
000019:0x002b67f0:	beq	0x2b6848
000019:0x002b67f8:	movefm	@c00, m_LastNewPlayers
000019:0x002b6808:	cmpcm	m_PlayerList, null
000019:0x002b6818:	beq	0x2b6848
000020:0x002b6820:	movefm	@c00, m_LastNewPlayers
000020:0x002b6830:	movefm	[0xb5c2c6a8], m_PlayerList
000020:0x002b6840:	ncalli	array<@SyncPlayer>.Clear()
000020:0x002b6848:	rts
ClientData::AddPlayerBase()
000025:0x002b6850:	cmpcm	m_PlayerBaseList, null
000025:0x002b6860:	beq	0x2b68b0
000025:0x002b6868:	ncall	GetGame()
000025:0x002b6870:	ncalli	CGame.GetPlayer()
000025:0x002b6878:	cmpcm	player, #return
000025:0x002b6888:	beq	0x2b68b0
000026:0x002b6890:	movefm	@c00, player
000026:0x002b68a0:	icall	
000026:0x002b68b0:	rts
ClientData::RemovePlayerBase()
000031:0x002b68b8:	cmpcm	m_PlayerBaseList, null
000031:0x002b68c8:	beq	0x2b68e0
000032:0x002b68d0:	call	
000032:0x002b68e0:	rts
ClientData::SyncEvent_OnRecievedPlayerList()
000037:0x002b6940:	cmpcm	m_PlayerList, null
000037:0x002b6950:	beq	0x2b6980
000037:0x002b6958:	movefm	@c00, m_PlayerList
000037:0x002b6968:	cmpcm	m_PlayerList, null
000037:0x002b6978:	beq	0x2b6980
000042:0x002b6980:	call	Compare(m_PlayerList, player_list)
000042:0x002b6998:	movem	new_players, #return
000042:0x002b69a8:	release	#return
000044:0x002b69b0:	cmpcm	m_LastNewPlayers, null
000044:0x002b69c0:	bne	0x2b69e0
000046:0x002b69c8:	movem	m_LastNewPlayers, player_list
000046:0x002b69d8:	jump	0x2b6a10
000050:0x002b69e0:	call	Compare(m_LastNewPlayers, new_players)
000050:0x002b69f8:	movem	m_LastNewPlayers, #return
000050:0x002b6a08:	release	#return
000053:0x002b6a10:	movetm	b, null
000053:0x002b6a20:	call	Compare(player_list, b)
000053:0x002b6a38:	movem	m_PlayerList, #return
000053:0x002b6a48:	release	#return
000073:0x002b6a50:	icall	
000073:0x002b6a80:	release	new_players
000073:0x002b6a88:	rts
ClientData::GetSimplePlayerList()
000078:0x002b6b30:	new	ids, array<string>
000079:0x002b6b50:	cmpcm	m_PlayerList, null
000079:0x002b6b60:	beq	0x2b6c70
000079:0x002b6b68:	movefm	@c00, m_PlayerList
000079:0x002b6b78:	cmpcm	m_PlayerList, null
000079:0x002b6b88:	beq	0x2b6c70
000081:0x002b6b90:	imove	i, 0x000000
000081:0x002b6ba0:	jump	0x2b6bc0
000081:0x002b6ba8:	move	@m00, i
000081:0x002b6bb8:	inc	i
000081:0x002b6bc0:	movefm	@c00, m_PlayerList
000081:0x002b6bd0:	movefm	[0xb5c2c6a8], m_PlayerList
000081:0x002b6be0:	ncalli	array<@SyncPlayer>.Count()
000081:0x002b6be8:	cmpi	i, #return
000081:0x002b6bf8:	bge	0x2b6c70
000083:0x002b6c00:	movefm	@c02, m_PlayerList
000083:0x002b6c10:	movefm	@c03, m_PlayerList
000083:0x002b6c20:	icall	
000083:0x002b6c30:	movetm	player, #return
000084:0x002b6c40:	movefm	@c00, player
000084:0x002b6c50:	icall	
000084:0x002b6c60:	release	player
000084:0x002b6c68:	jump	0x2b6ba8
000088:0x002b6c70:	movem	#return, ids
000088:0x002b6c80:	release	ids
000088:0x002b6c88:	rts
000088:0x002b6c90:	release	ids
000088:0x002b6c98:	rts
ClientData::GetSimplePlayerList#181876()
000093:0x002b6d18:	new	ids, array<string>
000094:0x002b6d38:	cmpcm	list, null
000094:0x002b6d48:	beq	0x2b6e30
000096:0x002b6d50:	imove	i, 0x000000
000096:0x002b6d60:	jump	0x2b6d80
000096:0x002b6d68:	move	@m00, i
000096:0x002b6d78:	inc	i
000096:0x002b6d80:	movefm	@c00, list
000096:0x002b6d90:	movefm	[0xb5c2c6a8], m_PlayerList
000096:0x002b6da0:	ncalli	array<@SyncPlayer>.Count()
000096:0x002b6da8:	cmpi	i, #return
000096:0x002b6db8:	bge	0x2b6e30
000098:0x002b6dc0:	movefm	@c02, list
000098:0x002b6dd0:	movefm	@c03, m_PlayerList
000098:0x002b6de0:	icall	
000098:0x002b6df0:	movetm	player, #return
000099:0x002b6e00:	movefm	@c00, player
000099:0x002b6e10:	icall	
000099:0x002b6e20:	release	player
000099:0x002b6e28:	jump	0x2b6d68
000103:0x002b6e30:	movem	#return, ids
000103:0x002b6e40:	release	ids
000103:0x002b6e48:	rts
000103:0x002b6e50:	release	ids
000103:0x002b6e58:	rts
ClientData::SyncEvent_OnEntityKilled()
000108:0x002b6e60:	movefm	@c00, entity_killed_data
000108:0x002b6e70:	movefm	@c01, entity_killed_data
000108:0x002b6e80:	movefm	@c02, entity_killed_data
000108:0x002b6e90:	movefm	@c03, entity_killed_data
000108:0x002b6ea0:	icall	
000108:0x002b6ed0:	rts
ClientData::SyncEvent_OnPlayerIgnitedFireplace()
000113:0x002b6ed8:	icall	
000113:0x002b6f08:	rts
Canvas::Canvas()
//scripts/3_Game/canvas.c
000021:0x002b6fb0:	new	m_Pixels, array<@array<PIXEL>>
000023:0x002b6fd0:	move	m_SizeX, size_x
000024:0x002b6fe0:	move	m_SizeY, size_y
000025:0x002b6ff0:	imove	i, 0x000000
000025:0x002b7000:	jump	0x2b7020
000025:0x002b7008:	move	@m00, i
000025:0x002b7018:	inc	i
000025:0x002b7020:	cmpi	i, size_y
000025:0x002b7030:	bge	0x2b70f8
000027:0x002b7038:	new	x_line, array<PIXEL>
000028:0x002b7058:	imove	z, 0x000000
000028:0x002b7068:	jump	0x2b7088
000028:0x002b7070:	move	@m00, z
000028:0x002b7080:	inc	z
000028:0x002b7088:	cmpi	z, size_x
000028:0x002b7098:	bge	0x2b70b8
000030:0x002b70a0:	icall	
000030:0x002b70b0:	jump	0x2b7070
000032:0x002b70b8:	movefm	@c00, x_line
000032:0x002b70c8:	movefm	[0xb5bc4850], m_Pixels
000032:0x002b70d8:	icall	
000032:0x002b70e8:	release	x_line
000032:0x002b70f0:	jump	0x2b7008
000032:0x002b70f8:	rts
Canvas::DrawPixel()
000039:0x002b7100:	subi	@m01, m_SizeX, _i1
000039:0x002b7110:	move	@m00, @m01
000039:0x002b7120:	cmpi	x, @m00
000039:0x002b7130:	bgt	0x2b7170
000039:0x002b7138:	subi	@m01, m_SizeY, _i1
000039:0x002b7148:	move	@m00, @m01
000039:0x002b7158:	cmpi	y, @m00
000039:0x002b7168:	ble	0x2b7178
000040:0x002b7170:	rts
000042:0x002b7178:	movefm	[0xb5bc4850], m_Pixels
000042:0x002b7188:	icall	
000042:0x002b7198:	icall	
000042:0x002b71a8:	rts
Canvas::PrintOut()
000047:0x002b72a0:	moves	line, _s''
000048:0x002b72b0:	subi	y_lines, m_SizeY, _i1
000049:0x002b72c0:	move	i, y_lines
000049:0x002b72d0:	jump	0x2b72f0
000049:0x002b72d8:	move	@m00, i
000049:0x002b72e8:	dec	i
000049:0x002b72f0:	cmpi	i, _i0
000049:0x002b7300:	blt	0x2b7410
000051:0x002b7308:	moves	line, _s''
000052:0x002b7318:	imove	z, 0x000000
000052:0x002b7328:	jump	0x2b7348
000052:0x002b7330:	move	@m00, z
000052:0x002b7340:	inc	z
000052:0x002b7348:	cmpi	z, m_SizeX
000052:0x002b7358:	bge	0x2b73f8
000054:0x002b7360:	movefm	[0xb5bc4850], m_Pixels
000054:0x002b7370:	icall	
000054:0x002b7380:	icall	
000054:0x002b7390:	cmpi	#return, _i0
000054:0x002b73a0:	beq	0x2b73d0
000056:0x002b73a8:	moves	@s00, _s'X'
000056:0x002b73b8:	adds	line, line, @s00
000056:0x002b73c8:	jump	0x2b73f0
000060:0x002b73d0:	moves	@s00, _s' '
000060:0x002b73e0:	adds	line, line, @s00
000060:0x002b73f0:	jump	0x2b7330
000063:0x002b73f8:	icall	Print(line)
000063:0x002b7408:	jump	0x2b72d8
000063:0x002b7410:	rts
Canvas::SaveToFile()
000069:0x002b7530:	adds	@s01, _s'$profile:', filename
000069:0x002b7540:	moves	@s00, @s01
000069:0x002b7550:	icall	OpenFile(@s00, _i4)
000069:0x002b7560:	movea	file, #return
000071:0x002b7570:	moves	line, _s''
000072:0x002b7580:	subi	y_lines, m_SizeY, _i1
000073:0x002b7590:	move	i, y_lines
000073:0x002b75a0:	jump	0x2b75c0
000073:0x002b75a8:	move	@m00, i
000073:0x002b75b8:	dec	i
000073:0x002b75c0:	cmpi	i, _i0
000073:0x002b75d0:	blt	0x2b76e0
000075:0x002b75d8:	moves	line, _s''
000076:0x002b75e8:	imove	z, 0x000000
000076:0x002b75f8:	jump	0x2b7618
000076:0x002b7600:	move	@m00, z
000076:0x002b7610:	inc	z
000076:0x002b7618:	cmpi	z, m_SizeX
000076:0x002b7628:	bge	0x2b76c8
000078:0x002b7630:	movefm	[0xb5bc4850], m_Pixels
000078:0x002b7640:	icall	
000078:0x002b7650:	icall	
000078:0x002b7660:	cmpi	#return, _i0
000078:0x002b7670:	beq	0x2b76a0
000080:0x002b7678:	moves	@s00, _s'X'
000080:0x002b7688:	adds	line, line, @s00
000080:0x002b7698:	jump	0x2b76c0
000084:0x002b76a0:	moves	@s00, _s' '
000084:0x002b76b0:	adds	line, line, @s00
000084:0x002b76c0:	jump	0x2b7600
000087:0x002b76c8:	icall	FPrintln(file, line)
000087:0x002b76d8:	jump	0x2b75a8
000087:0x002b76e0:	rts
PPEFXAA::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppefxaa.c
000008:0x002b76e8:	imove	#return, 0x000011
000008:0x002b76f8:	rts
000008:0x002b7700:	rts
PPEFXAA::GetDefaultMaterialPath()
000013:0x002b7730:	moves	#return, _s'Graphics/Materials/postprocess/fxaa'
000013:0x002b7740:	rts
000013:0x002b7748:	rts
PPEFXAA::RegisterMaterialParameters()
000018:0x002b7750:	call	
000018:0x002b7770:	rts
ConnectErrorClientModule::ConnectErrorClientModule()
//scripts/3_Game/global\errormodulehandler\connecterrorclientmodule.c
000027:0x002b77b0:	ncalli	ConnectErrorClientModule.SetCategory(_i1)
000027:0x002b77c0:	rts
ConnectErrorClientModule::InitOptionalVariables()
000032:0x002b77c8:	call	
000034:0x002b77d8:	moves	m_Header, _s'#server_browser_connecting_failed'
000034:0x002b77e8:	rts
ConnectErrorClientModule::FillErrorDataMap()
000039:0x002b7930:	call	
000041:0x002b7940:	call	
000042:0x002b7968:	call	
000043:0x002b7990:	call	
000044:0x002b79b8:	call	
000045:0x002b79e0:	call	
000047:0x002b7a08:	call	
000048:0x002b7a30:	call	
000049:0x002b7a58:	call	
000051:0x002b7a80:	call	
000052:0x002b7aa8:	call	
000054:0x002b7ad0:	call	
000055:0x002b7ae8:	call	
000055:0x002b7b00:	rts
ConnectErrorClientModule::OnEvent()
000061:0x002b7b30:	movea	#switch, eventTypeId
000061:0x002b7b40:	movea	@m00, MPSessionPlayerReadyEventTypeID
000061:0x002b7b50:	cmpc	@m00, #switch
000061:0x002b7b60:	bne	0x2b7b98
000064:0x002b7b68:	ncalli	DayZGame.GetUIManager()
000064:0x002b7b70:	move	[0xb5c1ac28], m_LastErrorThrown
000064:0x002b7b80:	ncalli	UIManager.CloseSpecificDialog([0xb5c1ac28])
000065:0x002b7b90:	jump	0x2b7ba0
000068:0x002b7b98:	jump	0x2b7ba0
000068:0x002b7ba0:	rts
PPEMatClassParameterInt::PPEMatClassParameterInt()
//scripts/3_Game/ppemanager\materials\matparameters\ppematclassparameterint.c
000010:0x002b7ba8:	new	m_LayerInfo, map<int,@array<int>>
000010:0x002b7bc8:	rts
PPEMatClassParameterInt::InitDefaults()
000015:0x002b7bd0:	movefm	@c00, m_Defaults
000015:0x002b7be0:	icall	CastTo(m_Int, @c00)
000016:0x002b7bf0:	movefm	[0xb5b35490], m_Int
000016:0x002b7c00:	movec	@c00, [0xb5b35490]
000016:0x002b7c10:	move	m_ValueDefault, param2
000016:0x002b7c20:	rts
PPEMatClassParameterInt::InitCuttent()
000021:0x002b7c28:	move	p1, m_ValueDefault
000021:0x002b7c38:	new	m_CurrentValues, Param1<int>
000021:0x002b7c60:	rts
PPEMatClassParameterInt::GetParameterVarType()
000026:0x002b7c68:	imove	#return, 0x000002
000026:0x002b7c78:	rts
000026:0x002b7c80:	rts
PPEMatClassParameterInt::Update()
000031:0x002b7ec8:	call	
000031:0x002b7ee8:	movem	p_total, p_total
000031:0x002b7ef8:	move	setting_defaults, setting_defaults
000031:0x002b7f08:	release	p_total
000033:0x002b7f10:	imove	active_request_count, 0x000000
000037:0x002b7f20:	imove	setting_value_zero, 0x000000
000039:0x002b7f30:	imove	int_value_temp, 0x000000
000040:0x002b7f40:	move	int_value_total, m_ValueDefault
000042:0x002b7f50:	cmpcm	p_total, null
000042:0x002b7f60:	bne	0x2b7f90
000044:0x002b7f68:	new	p_total, Param1<int>
000047:0x002b7f90:	movefm	[0xb5b35828], m_RequestMap
000047:0x002b7fa0:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000047:0x002b7fa8:	move	@m00, #return
000047:0x002b7fb8:	cmpi	@m00, _i0
000047:0x002b7fc8:	ble	0x2b7ff0
000049:0x002b7fd0:	movefm	[0xb5b90170], m_LayerInfo
000049:0x002b7fe0:	ncalli	map<int,@array<int>>.Clear()
000049:0x002b7fe8:	jump	0x2b8078
000054:0x002b7ff0:	call	
000054:0x002b8000:	movem	p_total, p_total
000054:0x002b8010:	release	p_total
000055:0x002b8018:	move	parameter_idx, m_ParameterIndex
000055:0x002b8028:	movefm	[0xb5b35de0], m_Parent
000055:0x002b8038:	call	
000056:0x002b8048:	release	req_data
000056:0x002b8050:	movem	p_total, p_total
000056:0x002b8060:	move	setting_defaults, setting_defaults
000056:0x002b8070:	rts
000059:0x002b8078:	imove	i, 0x000000
000059:0x002b8088:	jump	0x2b80a8
000059:0x002b8090:	move	@m00, i
000059:0x002b80a0:	inc	i
000059:0x002b80a8:	movefm	[0xb5b35828], m_RequestMap
000059:0x002b80b8:	ncalli	map<int,@PPERequestParamDataBase>.Count()
000059:0x002b80c0:	cmpi	i, #return
000059:0x002b80d0:	bge	0x2b84e8
000061:0x002b80d8:	movefm	[0xb5b35828], m_RequestMap
000061:0x002b80e8:	icall	
000061:0x002b80f8:	icall	SafeCastType([0xb5b36020], @c01, #return)
000061:0x002b8110:	movetm	req_data, @c01
000063:0x002b8120:	cmpcm	req_data, null
000063:0x002b8130:	bne	0x2b8220
000065:0x002b8138:	icall	ToString(this)
000065:0x002b8148:	adds	@s05, _s'Debug | PPEMatClassParameterInt | req_data not found! | ', #return
000065:0x002b8158:	moves	@s04, @s05
000065:0x002b8168:	adds	@s04, @s04, _s' | mat/par: '
000065:0x002b8178:	moves	@s03, @s04
000065:0x002b8188:	icall	ToString(m_MaterialIndex)
000065:0x002b8198:	adds	@s03, @s03, #return
000065:0x002b81a8:	moves	@s02, @s03
000065:0x002b81b8:	adds	@s02, @s02, _s'/'
000065:0x002b81c8:	moves	@s01, @s02
000065:0x002b81d8:	icall	ToString(m_ParameterIndex)
000065:0x002b81e8:	adds	@s01, @s01, #return
000065:0x002b81f8:	moves	@s00, @s01
000065:0x002b8208:	call	Error(@s00)
000066:0x002b8218:	jump	0x2b8090
000069:0x002b8220:	call	
000069:0x002b8230:	move	setting_value_zero, #return
000071:0x002b8240:	cmpi	setting_value_zero, _i0
000071:0x002b8250:	beq	0x2b82b0
000071:0x002b8258:	call	
000071:0x002b8268:	cmpi	#return, _i0
000071:0x002b8278:	bne	0x2b82b0
000071:0x002b8280:	call	
000071:0x002b8290:	cmpi	#return, _i0
000071:0x002b82a0:	bne	0x2b82b0
000074:0x002b82a8:	jump	0x2b8090
000077:0x002b82b0:	cmpi	setting_value_zero, _i0
000077:0x002b82c0:	beq	0x2b82f0
000079:0x002b82c8:	movefm	@c00, req_data
000079:0x002b82d8:	imove	m_IntTarget, 0x000000
000079:0x002b82e8:	jump	0x2b8308
000084:0x002b82f0:	move	@m00, active_request_count
000084:0x002b8300:	inc	active_request_count
000089:0x002b8308:	movefm	@c00, req_data
000089:0x002b8318:	movefm	@c01, req_data
000089:0x002b8328:	move	m_IntLast, m_IntCurrent
000091:0x002b8338:	call	
000091:0x002b8348:	cmpi	#return, _i0
000091:0x002b8358:	bne	0x2b83f8
000091:0x002b8360:	call	
000091:0x002b8370:	cmpi	#return, _i0
000091:0x002b8380:	beq	0x2b83f8
000093:0x002b8388:	movefm	@c00, req_data
000093:0x002b8398:	move	int_value_temp, m_IntCurrent
000094:0x002b83a8:	call	
000094:0x002b83b8:	move	value, int_value_temp
000094:0x002b83c8:	call	
000094:0x002b83d8:	call	
000096:0x002b83f0:	jump	0x2b8090
000099:0x002b83f8:	movefm	@c00, req_data
000099:0x002b8408:	move	int_value_temp, m_IntTarget
000102:0x002b8418:	call	
000103:0x002b8428:	cmpi	setting_value_zero, _i0
000103:0x002b8438:	beq	0x2b8458
000105:0x002b8440:	call	
000105:0x002b8450:	jump	0x2b84c0
000110:0x002b8458:	movefm	@c00, req_data
000110:0x002b8468:	move	int_value_temp, m_IntTarget
000111:0x002b8478:	call	
000111:0x002b8488:	move	value, int_value_temp
000111:0x002b8498:	call	
000111:0x002b84a8:	call	
000114:0x002b84c0:	movefm	@c00, req_data
000114:0x002b84d0:	move	m_IntCurrent, int_value_temp
000114:0x002b84e0:	jump	0x2b8090
000117:0x002b84e8:	cmpi	active_request_count, _i0
000117:0x002b84f8:	bne	0x2b8530
000119:0x002b8500:	call	
000119:0x002b8510:	movem	p_total, p_total
000119:0x002b8520:	release	p_total
000119:0x002b8528:	jump	0x2b89c0
000127:0x002b8530:	imove	override_active, 0x000000
000129:0x002b8540:	imove	i, 0x000000
000129:0x002b8550:	jump	0x2b8570
000129:0x002b8558:	move	@m00, i
000129:0x002b8568:	inc	i
000129:0x002b8570:	movefm	[0xb5b90170], m_LayerInfo
000129:0x002b8580:	ncalli	map<int,@array<int>>.Count()
000129:0x002b8588:	cmpi	i, #return
000129:0x002b8598:	bge	0x2b8960
000131:0x002b85a0:	cmpi	override_active, _i0
000131:0x002b85b0:	beq	0x2b85c0
000132:0x002b85b8:	jump	0x2b8960
000134:0x002b85c0:	movefm	[0xd31561b0], m_CommandLayersArray
000134:0x002b85d0:	icall	
000134:0x002b85e0:	movefm	[0xb5b90170], m_LayerInfo
000134:0x002b85f0:	icall	
000134:0x002b8600:	push	#return
000134:0x002b8608:	icall	
000134:0x002b8618:	move	@m01, #return
000134:0x002b8628:	pop	#return
000134:0x002b8630:	move	value, @m01
000135:0x002b8640:	movefm	[0xd31561b0], m_CommandLayersArray
000135:0x002b8650:	icall	
000135:0x002b8660:	movefm	[0xb5b90170], m_LayerInfo
000135:0x002b8670:	icall	
000135:0x002b8680:	push	#return
000135:0x002b8688:	icall	
000135:0x002b8698:	move	@m01, #return
000135:0x002b86a8:	pop	#return
000135:0x002b86b0:	move	operator, @m01
000137:0x002b86c0:	move	#switch, operator
000137:0x002b86d0:	imove	@m00, 0x000000
000137:0x002b86e0:	cmpi	@m00, #switch
000137:0x002b86f0:	bne	0x2b8748
000140:0x002b86f8:	citf	@f00, int_value_total
000140:0x002b8708:	citf	@f01, value
000140:0x002b8718:	icall	Min(@f00, @f01)
000140:0x002b8728:	cfti	int_value_total, #return
000141:0x002b8738:	jump	0x2b8930
000141:0x002b8740:	jump	0x2b8770
000141:0x002b8748:	imove	@m00, 0x000001
000141:0x002b8758:	cmpi	@m00, #switch
000141:0x002b8768:	bne	0x2b87c0
000144:0x002b8770:	citf	@f00, int_value_total
000144:0x002b8780:	citf	@f01, value
000144:0x002b8790:	icall	Max(@f00, @f01)
000144:0x002b87a0:	cfti	int_value_total, #return
000145:0x002b87b0:	jump	0x2b8930
000145:0x002b87b8:	jump	0x2b87e8
000145:0x002b87c0:	imove	@m00, 0x00000a
000145:0x002b87d0:	cmpi	@m00, #switch
000145:0x002b87e0:	bne	0x2b8808
000148:0x002b87e8:	move	int_value_total, value
000149:0x002b87f8:	jump	0x2b8930
000149:0x002b8800:	jump	0x2b8830
000149:0x002b8808:	imove	@m00, 0x000009
000149:0x002b8818:	cmpi	@m00, #switch
000149:0x002b8828:	bne	0x2b8848
000152:0x002b8830:	move	int_value_total, value
000153:0x002b8840:	jump	0x2b8930
000156:0x002b8848:	icall	ToString(operator)
000156:0x002b8858:	adds	@s05, _s'PPEMatClassParameterInt | Invalid operator ', #return
000156:0x002b8868:	moves	@s04, @s05
000156:0x002b8878:	adds	@s04, @s04, _s' in mat/par: '
000156:0x002b8888:	moves	@s03, @s04
000156:0x002b8898:	icall	ToString(m_MaterialIndex)
000156:0x002b88a8:	adds	@s03, @s03, #return
000156:0x002b88b8:	moves	@s02, @s03
000156:0x002b88c8:	adds	@s02, @s02, _s'/'
000156:0x002b88d8:	moves	@s01, @s02
000156:0x002b88e8:	icall	ToString(m_ParameterIndex)
000156:0x002b88f8:	adds	@s01, @s01, #return
000156:0x002b8908:	moves	@s00, @s01
000156:0x002b8918:	call	Error(@s00)
000157:0x002b8928:	jump	0x2b8930
000160:0x002b8930:	cmpi	operator, OVERRIDE
000160:0x002b8940:	bne	0x2b8958
000163:0x002b8948:	imove	override_active, 0x000001
000163:0x002b8958:	jump	0x2b8558
000167:0x002b8960:	movefm	[0xd31561b0], m_CommandLayersArray
000167:0x002b8970:	ncalli	array<int>.Clear()
000169:0x002b8978:	movefm	@c01, p_total
000169:0x002b8988:	icall	SafeCastType([0xb5b34040], @c00, @c01)
000169:0x002b89a0:	movec	@c02, @c00
000169:0x002b89b0:	move	param1, int_value_total
000173:0x002b89c0:	move	parameter_idx, m_ParameterIndex
000173:0x002b89d0:	movefm	[0xb5b35de0], m_Parent
000173:0x002b89e0:	call	
000175:0x002b89f0:	movem	m_CurrentValues, p_total
000175:0x002b8a00:	release	req_data
000175:0x002b8a08:	movem	p_total, p_total
000175:0x002b8a18:	move	setting_defaults, setting_defaults
000175:0x002b8a28:	rts
PPEMatClassParameterInt::PrepareLayerInfo()
000180:0x002b8a30:	new	@c01, array<int>
000180:0x002b8a50:	pushc	@c01
000180:0x002b8a58:	icall	
000180:0x002b8a68:	icall	
000180:0x002b8a78:	movefm	[0xb5b90170], m_LayerInfo
000180:0x002b8a88:	icall	
000180:0x002b8a98:	popc	@c01
000180:0x002b8aa0:	release	@c01
000181:0x002b8aa8:	call	
000181:0x002b8ab8:	rts
PPEMatClassParameterInt::SetParameterValueDefault()
000187:0x002b8ac0:	movefm	@c01, m_Defaults
000187:0x002b8ad0:	icall	SafeCastType([0xb5b35490], @c00, @c01)
000187:0x002b8ae8:	movec	@c02, @c00
000187:0x002b8af8:	move	p1, param2
000187:0x002b8b08:	new	p_total, Param1<int>
000188:0x002b8b30:	movem	m_CurrentValues, p_total
000188:0x002b8b40:	movem	p_total, p_total
000188:0x002b8b50:	rts
PPEMatClassParameterTexture::GetParameterVarType()
//scripts/3_Game/ppemanager\materials\matparameters\ppematclassparametertexture.c
000005:0x002b8b58:	imove	#return, 0x000020
000005:0x002b8b68:	rts
000005:0x002b8b70:	rts
JsonApiStruct::OnPack()
//scripts/3_Game/http\jsonapistruct.c
000031:0x002b8ba0:	icall	Print(_s'OnPack() ')
000031:0x002b8bb0:	rts
JsonApiStruct::OnObject()
000062:0x002b8be0:	adds	@s01, _s'OnObject: ', name
000062:0x002b8bf0:	moves	@s00, @s01
000062:0x002b8c00:	icall	Print(@s00)
000062:0x002b8c10:	rts
JsonApiStruct::OnInteger()
000070:0x002b8c40:	icall	ToString(value)
000070:0x002b8c50:	adds	@s01, _s'OnInteger: ', #return
000070:0x002b8c60:	moves	@s00, @s01
000070:0x002b8c70:	icall	Print(@s00)
000070:0x002b8c80:	rts
JsonApiStruct::OnFloat()
000078:0x002b8cb0:	icall	ToString(value)
000078:0x002b8cc0:	adds	@s01, _s'OnFloat: ', #return
000078:0x002b8cd0:	moves	@s00, @s01
000078:0x002b8ce0:	icall	Print(@s00)
000078:0x002b8cf0:	rts
JsonApiStruct::OnBoolean()
000086:0x002b8d20:	call	ToString(value)
000086:0x002b8d30:	move	value, value
000086:0x002b8d40:	adds	@s01, _s'OnBoolean: ', #return
000086:0x002b8d50:	moves	@s00, @s01
000086:0x002b8d60:	icall	Print(@s00)
000086:0x002b8d70:	rts
JsonApiStruct::OnString()
000094:0x002b8da0:	adds	@s01, _s'OnString: ', value
000094:0x002b8db0:	moves	@s00, @s01
000094:0x002b8dc0:	icall	Print(@s00)
000094:0x002b8dd0:	rts
JsonApiStruct::OnVector()
000102:0x002b8e00:	icall	ToString(value, _i1)
000102:0x002b8e10:	adds	@s01, _s'OnVector: ', #return
000102:0x002b8e20:	moves	@s00, @s01
000102:0x002b8e30:	icall	Print(@s00)
000102:0x002b8e40:	rts
JsonApiStruct::OnStartArray()
000110:0x002b8e70:	adds	@s01, _s'OnStartArray: ', name
000110:0x002b8e80:	moves	@s00, @s01
000110:0x002b8e90:	icall	Print(@s00)
000110:0x002b8ea0:	rts
JsonApiStruct::OnEndArray()
000118:0x002b8ed0:	icall	ToString(itemCount)
000118:0x002b8ee0:	adds	@s01, _s'OnEndArray: ', #return
000118:0x002b8ef0:	moves	@s00, @s01
000118:0x002b8f00:	icall	Print(@s00)
000118:0x002b8f10:	rts
JsonApiStruct::OnItemObject()
000126:0x002b8f40:	adds	@s01, _s'OnItemObject: ', name
000126:0x002b8f50:	moves	@s00, @s01
000126:0x002b8f60:	icall	Print(@s00)
000126:0x002b8f70:	rts
JsonApiStruct::OnItemInteger()
000134:0x002b8fa0:	icall	ToString(value)
000134:0x002b8fb0:	adds	@s01, _s'OnItemInteger: ', #return
000134:0x002b8fc0:	moves	@s00, @s01
000134:0x002b8fd0:	icall	Print(@s00)
000134:0x002b8fe0:	rts
JsonApiStruct::OnItemFloat()
000142:0x002b9010:	icall	ToString(value)
000142:0x002b9020:	adds	@s01, _s'OnItemFloat: ', #return
000142:0x002b9030:	moves	@s00, @s01
000142:0x002b9040:	icall	Print(@s00)
000142:0x002b9050:	rts
JsonApiStruct::OnItemBoolean()
000150:0x002b9080:	call	ToString(value)
000150:0x002b9090:	move	value, value
000150:0x002b90a0:	adds	@s01, _s'OnItemBoolean: ', #return
000150:0x002b90b0:	moves	@s00, @s01
000150:0x002b90c0:	icall	Print(@s00)
000150:0x002b90d0:	rts
JsonApiStruct::OnItemString()
000158:0x002b9100:	adds	@s01, _s'OnItemString: ', value
000158:0x002b9110:	moves	@s00, @s01
000158:0x002b9120:	icall	Print(@s00)
000158:0x002b9130:	rts
JsonApiStruct::OnItemVector()
000166:0x002b9160:	icall	ToString(value, _i1)
000166:0x002b9170:	adds	@s01, _s'OnItemVector: ', #return
000166:0x002b9180:	moves	@s00, @s01
000166:0x002b9190:	icall	Print(@s00)
000166:0x002b91a0:	rts
HiddenSelectionsData::HiddenSelectionsData()
//scripts/3_Game/hiddenselectionsdata.c
000009:0x002b9248:	new	m_HiddenSelections, array<string>
000009:0x002b9268:	new	m_HiddenSelectionsTextures, array<string>
000009:0x002b9288:	new	m_HiddenSelectionsMaterials, array<string>
000009:0x002b92a8:	new	m_HiddenSelectionNameToIndex, map<string,int>
000011:0x002b92c8:	ncall	GetGame()
000011:0x002b92d0:	icall	Format(_s'CfgVehicles %1 hiddenSelections', type, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000011:0x002b9300:	movefm	[0xb5bda188], m_HiddenSelections
000011:0x002b9310:	ncalli	CGame.ConfigGetTextArray(#return, [0xb5bda188])
000012:0x002b9320:	ncall	GetGame()
000012:0x002b9328:	icall	Format(_s'CfgVehicles %1 hiddenSelectionsTextures', type, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000012:0x002b9358:	movefm	[0xb5bda188], m_HiddenSelectionsTextures
000012:0x002b9368:	ncalli	CGame.ConfigGetTextArray(#return, [0xb5bda188])
000013:0x002b9378:	ncall	GetGame()
000013:0x002b9380:	icall	Format(_s'CfgVehicles %1 hiddenSelectionsMaterials', type, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000013:0x002b93b0:	movefm	[0xb5bda188], m_HiddenSelectionsMaterials
000013:0x002b93c0:	ncalli	CGame.ConfigGetTextArray(#return, [0xb5bda188])
000015:0x002b93d0:	imove	i, 0x000000
000015:0x002b93e0:	jump	0x2b93f0
000015:0x002b93e8:	inc	i
000015:0x002b93f0:	movefm	[0xd31562c0], m_HiddenSelections
000015:0x002b9400:	ncalli	array<string>.Count()
000015:0x002b9408:	cmpi	i, #return
000015:0x002b9418:	bge	0x2b9468
000016:0x002b9420:	movefm	[0xd31562c0], m_HiddenSelections
000016:0x002b9430:	icall	
000016:0x002b9440:	movefm	[0xd3157f58], m_HiddenSelectionNameToIndex
000016:0x002b9450:	icall	
000016:0x002b9460:	jump	0x2b93e8
000016:0x002b9468:	rts
HiddenSelectionsData::GetHiddenSelectionIndex()
000022:0x002b9498:	movefm	[0xd3157f58], m_HiddenSelectionNameToIndex
000022:0x002b94a8:	icall	
000022:0x002b94b8:	cmpi	#return, _i0
000022:0x002b94c8:	beq	0x2b94e8
000023:0x002b94d0:	move	#return, index
000023:0x002b94e0:	rts
000025:0x002b94e8:	imove	#return, 0xffffffff
000025:0x002b94f8:	rts
000025:0x002b9500:	rts
HiddenSelectionsData::GetHiddenSelectionsTextures()
000030:0x002b9508:	movem	#return, m_HiddenSelectionsTextures
000030:0x002b9518:	rts
000030:0x002b9520:	rts
HiddenSelectionsData::GetHiddenSelectionsMaterials()
000035:0x002b9528:	movem	#return, m_HiddenSelectionsMaterials
000035:0x002b9538:	rts
000035:0x002b9540:	rts
HiddenSelectionsData::GetHiddenSelectionsConfig()
000040:0x002b95a8:	new	hiddenSelections, array<string>
000041:0x002b95c8:	ncall	GetGame()
000041:0x002b95d0:	icall	Format(_s'CfgVehicles %1 hiddenSelections', type, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000041:0x002b9600:	movefm	[0xb5bda188], hiddenSelections
000041:0x002b9610:	ncalli	CGame.ConfigGetTextArray(#return, [0xb5bda188])
000042:0x002b9620:	movem	#return, hiddenSelections
000042:0x002b9630:	release	hiddenSelections
000042:0x002b9638:	rts
000042:0x002b9640:	release	hiddenSelections
000042:0x002b9648:	rts
HiddenSelectionsData::GetHiddenSelectionsTexturesConfig()
000047:0x002b96b8:	new	hiddenSelectionsTextures, array<string>
000048:0x002b96d8:	ncall	GetGame()
000048:0x002b96e0:	icall	Format(_s'CfgVehicles %1 hiddenSelectionsTextures', type, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000048:0x002b9710:	movefm	[0xb5bda188], hiddenSelectionsTextures
000048:0x002b9720:	ncalli	CGame.ConfigGetTextArray(#return, [0xb5bda188])
000049:0x002b9730:	movem	#return, hiddenSelectionsTextures
000049:0x002b9740:	release	hiddenSelectionsTextures
000049:0x002b9748:	rts
000049:0x002b9750:	release	hiddenSelectionsTextures
000049:0x002b9758:	rts
HiddenSelectionsData::GetHiddenSelectionsMaterialsConfig()
000054:0x002b97c8:	new	hiddenSelectionsMaterials, array<string>
000055:0x002b97e8:	ncall	GetGame()
000055:0x002b97f0:	icall	Format(_s'CfgVehicles %1 hiddenSelectionsMaterials', type, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000055:0x002b9820:	movefm	[0xb5bda188], hiddenSelectionsMaterials
000055:0x002b9830:	ncalli	CGame.ConfigGetTextArray(#return, [0xb5bda188])
000056:0x002b9840:	movem	#return, hiddenSelectionsMaterials
000056:0x002b9850:	release	hiddenSelectionsMaterials
000056:0x002b9858:	rts
000056:0x002b9860:	release	hiddenSelectionsMaterials
000056:0x002b9868:	rts
EffCoolantSteam::SetParticleStateLight()
//scripts/3_Game/effects\effectparticle\vehiclesmoke\coolantsteam.c
000005:0x002b9870:	call	
000006:0x002b9880:	call	
000006:0x002b9890:	rts
EffCoolantSteam::SetParticleStateHeavy()
000011:0x002b9898:	call	
000012:0x002b98a8:	call	
000012:0x002b98b8:	rts
EffCoolantSteam::UpdateParticle()
000017:0x002b9ae8:	call	
000017:0x002b9af8:	movefm	@c02, #return
000017:0x002b9b08:	icall	SafeCastType([0xb5b28ab8], @c01, @c02)
000017:0x002b9b20:	movetm	parent, @c01
000017:0x002b9b30:	release	#return
000018:0x002b9b38:	call	
000018:0x002b9b48:	movem	p, #return
000018:0x002b9b58:	release	#return
000020:0x002b9b60:	cmpcm	parent, null
000020:0x002b9b70:	beq	0x2b9db8
000020:0x002b9b78:	cmpcm	p, null
000020:0x002b9b88:	beq	0x2b9db8
000022:0x002b9b90:	call	
000022:0x002b9ba0:	move	speed, #return
000024:0x002b9bb0:	subf	@f01, _f100.000000, speed
000024:0x002b9bc0:	move	@f00, @f01
000024:0x002b9bd0:	divf	lifetime_scale, @f00, _f100.000000
000025:0x002b9be0:	cmpf	lifetime_scale, _f0.100000
000025:0x002b9bf0:	bge	0x2b9c08
000026:0x002b9bf8:	imove	lifetime_scale, 0.10000
000028:0x002b9c08:	mulf	@f01, speed, _f0.020000
000028:0x002b9c18:	move	@f00, @f01
000028:0x002b9c28:	addf	birthrate_scale, _f1.000000, @f00
000030:0x002b9c38:	mulf	@f01, speed, _f0.200000
000030:0x002b9c48:	move	@f00, @f01
000030:0x002b9c58:	addf	speed_scale, _f1.000000, @f00
000031:0x002b9c68:	cmpf	speed_scale, _f10.000000
000031:0x002b9c78:	ble	0x2b9c90
000032:0x002b9c80:	imove	speed_scale, 10.00000
000034:0x002b9c90:	mulf	@f01, speed, _f0.050000
000034:0x002b9ca0:	move	@f00, @f01
000034:0x002b9cb0:	addf	size_scale, _f1.000000, @f00
000036:0x002b9cc0:	cmpf	size_scale, _f2.500000
000036:0x002b9cd0:	ble	0x2b9ce8
000037:0x002b9cd8:	imove	size_scale, 2.50000
000039:0x002b9ce8:	mulf	gravity_add, speed, _f0.005000
000041:0x002b9cf8:	call	
000042:0x002b9d10:	call	
000043:0x002b9d28:	call	
000044:0x002b9d40:	call	
000045:0x002b9d58:	call	
000046:0x002b9d70:	call	
000047:0x002b9d88:	call	
000048:0x002b9da0:	call	
000048:0x002b9db8:	release	parent
000048:0x002b9dc0:	release	p
000048:0x002b9dc8:	rts
BiosUserManager::SelectUserEx()
//scripts/3_Game/services\biosusermanager.c
000092:0x002b9e28:	ncalli	BiosUserManager.GetSelectedUser()
000092:0x002b9e30:	movetm	selectedUser, #return
000093:0x002b9e40:	cmpcm	selectedUser, null
000093:0x002b9e50:	beq	0x2b9f10
000093:0x002b9e58:	cmpm	selectedUser, user
000093:0x002b9e68:	beq	0x2b9f10
000093:0x002b9e70:	call	
000093:0x002b9e80:	move	@m00, #return
000093:0x002b9e90:	cmpi	@m00, MAIN_MENU
000093:0x002b9ea0:	beq	0x2b9f10
000095:0x002b9ea8:	movefm	[0xb5bba9a8], user
000095:0x002b9eb8:	ncalli	BiosUserManager.SelectUser([0xb5bba9a8])
000096:0x002b9ec8:	noti	@m01, SELECT_USER
000096:0x002b9ed8:	andi	@m01, DISCONNECT_SESSION_FLAGS_FORCE, @m01
000096:0x002b9ee8:	move	@m00, @m01
000096:0x002b9ef8:	call	
000096:0x002b9f08:	jump	0x2b9f30
000099:0x002b9f10:	movefm	[0xb5bba9a8], user
000099:0x002b9f20:	ncalli	BiosUserManager.SelectUser([0xb5bba9a8])
000099:0x002b9f30:	release	selectedUser
000099:0x002b9f38:	rts
BiosUserManager::OnUserDatabaseId()
000109:0x002b9f40:	call	ErrorCaught(error)
000109:0x002b9f50:	cmpi	#return, _i0
000109:0x002b9f60:	bne	0x2b9f78
000111:0x002b9f68:	call	
000111:0x002b9f78:	rts
BiosUserManager::OnUserLoggedOn()
000121:0x002b9f80:	call	ErrorCaught(error)
000121:0x002b9f90:	cmpi	#return, _i0
000121:0x002b9fa0:	beq	0x2b9fd0
000123:0x002b9fa8:	ncall	GetGame()
000123:0x002b9fb0:	ncalli	CGame.GetInput()
000123:0x002b9fb8:	ncalli	Input.ResetActiveGamepad()
000124:0x002b9fc0:	call	
000124:0x002b9fd0:	rts
BiosUserManager::OnUserPicked()
000135:0x002b9fd8:	cmpcm	user, null
000135:0x002b9fe8:	bne	0x2ba020
000137:0x002b9ff0:	ncall	GetGame()
000137:0x002b9ff8:	ncalli	CGame.GetInput()
000137:0x002ba000:	ncalli	Input.ResetActiveGamepad()
000138:0x002ba008:	call	
000138:0x002ba018:	jump	0x2ba0e0
000140:0x002ba020:	call	ErrorCaught(error)
000140:0x002ba030:	cmpi	#return, _i0
000140:0x002ba040:	bne	0x2ba0e0
000142:0x002ba048:	call	
000143:0x002ba058:	ncall	GetGame()
000143:0x002ba060:	ncalli	CGame.GetMission()
000143:0x002ba068:	cmpc	#return, null
000143:0x002ba078:	beq	0x2ba0a0
000144:0x002ba080:	ncall	GetGame()
000144:0x002ba088:	ncalli	CGame.GetMission()
000144:0x002ba090:	call	
000145:0x002ba0a0:	call	
000146:0x002ba0b0:	ncall	GetGame()
000146:0x002ba0b8:	ncalli	CGame.GetInput()
000146:0x002ba0c0:	call	
000146:0x002ba0d0:	call	
000146:0x002ba0e0:	rts
BiosUserManager::OnLoggedOn()
000153:0x002ba0e8:	cmpcm	user, null
000153:0x002ba0f8:	beq	0x2ba160
000153:0x002ba100:	ncalli	BiosUserManager.GetSelectedUser()
000153:0x002ba108:	movec	@c00, #return
000153:0x002ba118:	cmpmc	@c00, user
000153:0x002ba128:	bne	0x2ba160
000154:0x002ba130:	ncall	GetGame()
000154:0x002ba138:	ncalli	CGame.GetInput()
000154:0x002ba140:	call	
000154:0x002ba150:	call	
000154:0x002ba160:	rts
BiosUserManager::OnLoggedOff()
000160:0x002ba168:	call	
000160:0x002ba178:	rts
BiosUserManager::OnSignedOut()
000182:0x002ba180:	ncalli	BiosUserManager.GetSelectedUser()
000182:0x002ba188:	cmpcm	user, #return
000182:0x002ba198:	bne	0x2ba218
000184:0x002ba1a0:	movetm	user, null
000184:0x002ba1b0:	call	
000185:0x002ba1c0:	ncall	GetGame()
000185:0x002ba1c8:	ncalli	CGame.GetInput()
000185:0x002ba1d0:	ncalli	Input.ResetActiveGamepad()
000186:0x002ba1d8:	noti	@m01, SELECT_USER
000186:0x002ba1e8:	andi	@m01, DISCONNECT_SESSION_FLAGS_FORCE, @m01
000186:0x002ba1f8:	move	@m00, @m01
000186:0x002ba208:	call	
000186:0x002ba218:	rts
BiosUserManager::OnJoin()
000202:0x002ba220:	call	ErrorCaught(error)
000202:0x002ba230:	cmpi	#return, _i0
000202:0x002ba240:	bne	0x2ba398
000204:0x002ba248:	call	SetBiosUser(joiner)
000206:0x002ba258:	call	
000207:0x002ba268:	call	SetSessionHandle(handle)
000209:0x002ba278:	call	
000209:0x002ba288:	move	@m00, #return
000209:0x002ba298:	cmpi	@m00, IN_GAME
000209:0x002ba2a8:	bne	0x2ba2d8
000211:0x002ba2b0:	call	
000212:0x002ba2c0:	call	GetSession()
000212:0x002ba2d0:	jump	0x2ba390
000216:0x002ba2d8:	ncall	GetGame()
000216:0x002ba2e0:	ncalli	CGame.GetUIManager()
000216:0x002ba2e8:	cmpm	#return, null
000216:0x002ba2f8:	beq	0x2ba370
000216:0x002ba300:	ncall	GetGame()
000216:0x002ba308:	ncalli	CGame.GetInput()
000216:0x002ba310:	ncalli	Input.IsActiveGamepadSelected()
000216:0x002ba318:	cmpi	#return, _i0
000216:0x002ba328:	beq	0x2ba370
000218:0x002ba330:	ncall	GetGame()
000218:0x002ba338:	ncalli	CGame.GetUIManager()
000218:0x002ba340:	call	
000219:0x002ba350:	ncall	GetGame()
000219:0x002ba358:	ncalli	CGame.GetInput()
000219:0x002ba360:	ncalli	Input.IdentifyGamepad(_i-1)
000221:0x002ba370:	call	
000222:0x002ba380:	call	
000222:0x002ba390:	jump	0x2ba3a8
000227:0x002ba398:	call	
000227:0x002ba3a8:	rts
BiosUserManager::OnPartyHost()
000245:0x002ba3b0:	call	
000256:0x002ba3c0:	ncall	GetGame()
000256:0x002ba3c8:	ncalli	CGame.GetUIManager()
000256:0x002ba3d0:	cmpm	#return, null
000256:0x002ba3e0:	beq	0x2ba408
000258:0x002ba3e8:	ncall	GetGame()
000258:0x002ba3f0:	ncalli	CGame.GetUIManager()
000258:0x002ba3f8:	call	
000261:0x002ba408:	call	SetPendingInviteList(invitee_list)
000262:0x002ba418:	call	
000262:0x002ba428:	move	@m00, #return
000262:0x002ba438:	cmpi	@m00, IN_GAME
000262:0x002ba448:	beq	0x2ba5b0
000262:0x002ba450:	call	
000262:0x002ba460:	move	@m00, #return
000262:0x002ba470:	cmpi	@m00, CONNECTING
000262:0x002ba480:	beq	0x2ba5b0
000264:0x002ba488:	ncall	GetGame()
000264:0x002ba490:	ncalli	CGame.GetUIManager()
000264:0x002ba498:	ncalli	UIManager.GetMenu()
000264:0x002ba4a0:	cmpm	#return, null
000264:0x002ba4b0:	beq	0x2ba508
000264:0x002ba4b8:	ncall	GetGame()
000264:0x002ba4c0:	ncalli	CGame.GetUIManager()
000264:0x002ba4c8:	ncalli	UIManager.GetMenu()
000264:0x002ba4d0:	call	
000264:0x002ba4e0:	move	@m00, #return
000264:0x002ba4f0:	cmpi	@m00, MENU_MAIN
000264:0x002ba500:	beq	0x2ba580
000266:0x002ba508:	ncall	GetGame()
000266:0x002ba510:	ncalli	CGame.GetUIManager()
000266:0x002ba518:	pushc	#return
000266:0x002ba520:	ncall	GetGame()
000266:0x002ba528:	movec	@c01, #return
000266:0x002ba538:	popc	#return
000266:0x002ba540:	pushc	#return
000266:0x002ba548:	ncalli	CGame.GetUIManager()
000266:0x002ba550:	movec	@c02, #return
000266:0x002ba560:	popc	#return
000266:0x002ba568:	ncalli	UIManager.GetMenu()
000266:0x002ba570:	ncalli	UIManager.EnterScriptedMenu(MENU_MAIN, #return)
000268:0x002ba580:	call	
000269:0x002ba590:	call	
000270:0x002ba5a0:	call	
000270:0x002ba5b0:	rts
BiosUserManager::OnGameNameChanged()
000282:0x002ba5b8:	ncalli	BiosUserManager.GetSelectedUser()
000282:0x002ba5c0:	cmpcm	user, #return
000282:0x002ba5d0:	bne	0x2ba648
000284:0x002ba5d8:	ncalli	BiosUser.GetName()
000284:0x002ba5e0:	ncalli	DayZGame.SetPlayerName(#return)
000288:0x002ba5f0:	ncall	GetGame()
000288:0x002ba5f8:	ncalli	CGame.GetUIManager()
000288:0x002ba600:	ncalli	UIManager.GetMenu()
000288:0x002ba608:	cmpm	#return, null
000288:0x002ba618:	beq	0x2ba648
000290:0x002ba620:	ncall	GetGame()
000290:0x002ba628:	ncalli	CGame.GetUIManager()
000290:0x002ba630:	ncalli	UIManager.GetMenu()
000290:0x002ba638:	call	
000290:0x002ba648:	rts
BiosUserManager::GetUser()
000297:0x002ba6f0:	new	user_list, array<@BiosUser>
000298:0x002ba710:	movefm	[0xb5bba868], user_list
000298:0x002ba720:	ncalli	BiosUserManager.GetUserList([0xb5bba868])
000299:0x002ba730:	ncalli	array<@BiosUser>.Count()
000299:0x002ba738:	move	#cnt, #return
000299:0x002ba748:	imove	#key, 0x000000
000299:0x002ba758:	jump	0x2ba768
000299:0x002ba760:	inc	#key
000299:0x002ba768:	cmpi	#key, #cnt
000299:0x002ba778:	bge	0x2ba800
000299:0x002ba780:	icall	
000299:0x002ba790:	movetm	user, #return
000301:0x002ba7a0:	ncalli	BiosUser.GetUid()
000301:0x002ba7a8:	moves	@s00, #return
000301:0x002ba7b8:	cmps	@s00, user_id
000301:0x002ba7c8:	bne	0x2ba7f8
000303:0x002ba7d0:	movem	#return, user
000303:0x002ba7e0:	release	user
000303:0x002ba7e8:	release	user_list
000303:0x002ba7f0:	rts
000303:0x002ba7f8:	jump	0x2ba760
000303:0x002ba800:	release	user
000306:0x002ba808:	movetm	#return, null
000306:0x002ba818:	release	user_list
000306:0x002ba820:	rts
000306:0x002ba828:	release	user_list
000306:0x002ba830:	rts
TryAcquireInventoryJunctureFromServer()
//scripts/3_Game/systems\inventory\junctures.c
000004:0x002ba8d8:	ncalli	InventoryLocation.GetItem()
000004:0x002ba8e0:	ncalli	InventoryLocation.GetParent()
000004:0x002ba8e8:	pushc	#return
000004:0x002ba8f0:	ncalli	InventoryLocation.GetParent()
000004:0x002ba8f8:	movec	@c01, #return
000004:0x002ba908:	popc	#return
000004:0x002ba910:	call	
000004:0x002ba928:	cmpi	#return, _i0
000004:0x002ba938:	beq	0x2bad50
000006:0x002ba940:	ncalli	InventoryLocation.GetItem()
000006:0x002ba948:	cmpm	#return, null
000006:0x002ba958:	beq	0x2ba990
000006:0x002ba960:	ncalli	InventoryLocation.GetItem()
000006:0x002ba968:	call	
000006:0x002ba978:	cmpi	#return, _i0
000006:0x002ba988:	bne	0x2baa30
000006:0x002ba990:	ncalli	InventoryLocation.GetParent()
000006:0x002ba998:	cmpm	#return, null
000006:0x002ba9a8:	beq	0x2ba9e0
000006:0x002ba9b0:	ncalli	InventoryLocation.GetParent()
000006:0x002ba9b8:	call	
000006:0x002ba9c8:	cmpi	#return, _i0
000006:0x002ba9d8:	bne	0x2baa30
000006:0x002ba9e0:	ncalli	InventoryLocation.GetParent()
000006:0x002ba9e8:	cmpm	#return, null
000006:0x002ba9f8:	beq	0x2baa48
000006:0x002baa00:	ncalli	InventoryLocation.GetParent()
000006:0x002baa08:	call	
000006:0x002baa18:	cmpi	#return, _i0
000006:0x002baa28:	beq	0x2baa48
000008:0x002baa30:	imove	#return, 0x000002
000008:0x002baa40:	rts
000010:0x002baa48:	imove	test_dst_occupancy, 0x000001
000011:0x002baa58:	ncall	GetGame()
000011:0x002baa60:	ncalli	InventoryLocation.GetItem()
000011:0x002baa68:	call	
000011:0x002baa88:	cmpi	#return, _i0
000011:0x002baa98:	beq	0x2babf8
000013:0x002baaa0:	call	GetDebugName#206374(player)
000013:0x002baab0:	adds	@s07, _s'[syncinv] juncture needed and acquired, player=', #return
000013:0x002baac0:	moves	@s06, @s07
000013:0x002baad0:	adds	@s06, @s06, _s' STS = '
000013:0x002baae0:	moves	@s05, @s06
000013:0x002baaf0:	ncalli	Man.GetSimulationTimeStamp()
000013:0x002baaf8:	icall	ToString(#return)
000013:0x002bab08:	adds	@s05, @s05, #return
000013:0x002bab18:	moves	@s04, @s05
000013:0x002bab28:	adds	@s04, @s04, _s' src='
000013:0x002bab38:	moves	@s03, @s04
000013:0x002bab48:	call	DumpToStringNullSafe(src)
000013:0x002bab58:	adds	@s03, @s03, #return
000013:0x002bab68:	moves	@s02, @s03
000013:0x002bab78:	adds	@s02, @s02, _s' dst='
000013:0x002bab88:	moves	@s01, @s02
000013:0x002bab98:	call	DumpToStringNullSafe(dst)
000013:0x002baba8:	adds	@s01, @s01, #return
000013:0x002babb8:	moves	@s00, @s01
000013:0x002babc8:	call	syncDebugPrint(@s00)
000014:0x002babd8:	imove	#return, 0x000001
000014:0x002babe8:	rts
000014:0x002babf0:	jump	0x2bad48
000018:0x002babf8:	call	GetDebugName#206374(player)
000018:0x002bac08:	adds	@s07, _s'[syncinv] juncture request DENIED, player=', #return
000018:0x002bac18:	moves	@s06, @s07
000018:0x002bac28:	adds	@s06, @s06, _s' STS = '
000018:0x002bac38:	moves	@s05, @s06
000018:0x002bac48:	ncalli	Man.GetSimulationTimeStamp()
000018:0x002bac50:	icall	ToString(#return)
000018:0x002bac60:	adds	@s05, @s05, #return
000018:0x002bac70:	moves	@s04, @s05
000018:0x002bac80:	adds	@s04, @s04, _s' src='
000018:0x002bac90:	moves	@s03, @s04
000018:0x002baca0:	call	DumpToStringNullSafe(src)
000018:0x002bacb0:	adds	@s03, @s03, #return
000018:0x002bacc0:	moves	@s02, @s03
000018:0x002bacd0:	adds	@s02, @s02, _s' dst='
000018:0x002bace0:	moves	@s01, @s02
000018:0x002bacf0:	call	DumpToStringNullSafe(dst)
000018:0x002bad00:	adds	@s01, @s01, #return
000018:0x002bad10:	moves	@s00, @s01
000018:0x002bad20:	call	syncDebugPrint(@s00)
000019:0x002bad30:	imove	#return, 0x000002
000019:0x002bad40:	rts
000019:0x002bad48:	jump	0x2baea0
000024:0x002bad50:	call	GetDebugName#206374(player)
000024:0x002bad60:	adds	@s07, _s'[syncinv] juncture not required, player=', #return
000024:0x002bad70:	moves	@s06, @s07
000024:0x002bad80:	adds	@s06, @s06, _s' STS = '
000024:0x002bad90:	moves	@s05, @s06
000024:0x002bada0:	ncalli	Man.GetSimulationTimeStamp()
000024:0x002bada8:	icall	ToString(#return)
000024:0x002badb8:	adds	@s05, @s05, #return
000024:0x002badc8:	moves	@s04, @s05
000024:0x002badd8:	adds	@s04, @s04, _s' src='
000024:0x002bade8:	moves	@s03, @s04
000024:0x002badf8:	call	DumpToStringNullSafe(src)
000024:0x002bae08:	adds	@s03, @s03, #return
000024:0x002bae18:	moves	@s02, @s03
000024:0x002bae28:	adds	@s02, @s02, _s' dst='
000024:0x002bae38:	moves	@s01, @s02
000024:0x002bae48:	call	DumpToStringNullSafe(dst)
000024:0x002bae58:	adds	@s01, @s01, #return
000024:0x002bae68:	moves	@s00, @s01
000024:0x002bae78:	call	syncDebugPrint(@s00)
000025:0x002bae88:	imove	#return, 0x000000
000025:0x002bae98:	rts
000025:0x002baea0:	rts
TryAcquireTwoInventoryJuncturesFromServer()
000040:0x002baf20:	ncalli	InventoryLocation.GetItem()
000040:0x002baf28:	ncalli	InventoryLocation.GetParent()
000040:0x002baf30:	pushc	#return
000040:0x002baf38:	ncalli	InventoryLocation.GetParent()
000040:0x002baf40:	movec	@c01, #return
000040:0x002baf50:	popc	#return
000040:0x002baf58:	call	
000040:0x002baf70:	move	need_j1, #return
000041:0x002baf80:	ncalli	InventoryLocation.GetItem()
000041:0x002baf88:	ncalli	InventoryLocation.GetParent()
000041:0x002baf90:	pushc	#return
000041:0x002baf98:	ncalli	InventoryLocation.GetParent()
000041:0x002bafa0:	movec	@c01, #return
000041:0x002bafb0:	popc	#return
000041:0x002bafb8:	call	
000041:0x002bafd0:	move	need_j2, #return
000042:0x002bafe0:	cmpi	need_j1, _i0
000042:0x002baff0:	bne	0x2bb010
000042:0x002baff8:	cmpi	need_j2, _i0
000042:0x002bb008:	beq	0x2bb3b0
000044:0x002bb010:	cmpi	need_j1, _i0
000044:0x002bb020:	beq	0x2bb190
000046:0x002bb028:	ncalli	InventoryLocation.GetItem()
000046:0x002bb030:	cmpm	#return, null
000046:0x002bb040:	beq	0x2bb078
000046:0x002bb048:	ncalli	InventoryLocation.GetItem()
000046:0x002bb050:	call	
000046:0x002bb060:	cmpi	#return, _i0
000046:0x002bb070:	bne	0x2bb118
000046:0x002bb078:	ncalli	InventoryLocation.GetParent()
000046:0x002bb080:	cmpm	#return, null
000046:0x002bb090:	beq	0x2bb0c8
000046:0x002bb098:	ncalli	InventoryLocation.GetParent()
000046:0x002bb0a0:	call	
000046:0x002bb0b0:	cmpi	#return, _i0
000046:0x002bb0c0:	bne	0x2bb118
000046:0x002bb0c8:	ncalli	InventoryLocation.GetParent()
000046:0x002bb0d0:	cmpm	#return, null
000046:0x002bb0e0:	beq	0x2bb130
000046:0x002bb0e8:	ncalli	InventoryLocation.GetParent()
000046:0x002bb0f0:	call	
000046:0x002bb100:	cmpi	#return, _i0
000046:0x002bb110:	beq	0x2bb130
000048:0x002bb118:	imove	#return, 0x000002
000048:0x002bb128:	rts
000050:0x002bb130:	ncall	GetGame()
000050:0x002bb138:	ncalli	InventoryLocation.GetItem()
000050:0x002bb140:	call	
000050:0x002bb160:	cmpi	#return, _i0
000050:0x002bb170:	bne	0x2bb190
000058:0x002bb178:	imove	#return, 0x000002
000058:0x002bb188:	rts
000062:0x002bb190:	cmpi	need_j2, _i0
000062:0x002bb1a0:	beq	0x2bb390
000064:0x002bb1a8:	ncalli	InventoryLocation.GetItem()
000064:0x002bb1b0:	cmpm	#return, null
000064:0x002bb1c0:	beq	0x2bb1f8
000064:0x002bb1c8:	ncalli	InventoryLocation.GetItem()
000064:0x002bb1d0:	call	
000064:0x002bb1e0:	cmpi	#return, _i0
000064:0x002bb1f0:	bne	0x2bb298
000064:0x002bb1f8:	ncalli	InventoryLocation.GetParent()
000064:0x002bb200:	cmpm	#return, null
000064:0x002bb210:	beq	0x2bb248
000064:0x002bb218:	ncalli	InventoryLocation.GetParent()
000064:0x002bb220:	call	
000064:0x002bb230:	cmpi	#return, _i0
000064:0x002bb240:	bne	0x2bb298
000064:0x002bb248:	ncalli	InventoryLocation.GetParent()
000064:0x002bb250:	cmpm	#return, null
000064:0x002bb260:	beq	0x2bb2f0
000064:0x002bb268:	ncalli	InventoryLocation.GetParent()
000064:0x002bb270:	call	
000064:0x002bb280:	cmpi	#return, _i0
000064:0x002bb290:	beq	0x2bb2f0
000066:0x002bb298:	cmpi	need_j1, _i0
000066:0x002bb2a8:	beq	0x2bb2d8
000068:0x002bb2b0:	ncall	GetGame()
000068:0x002bb2b8:	ncalli	InventoryLocation.GetItem()
000068:0x002bb2c0:	call	
000070:0x002bb2d8:	imove	#return, 0x000002
000070:0x002bb2e8:	rts
000072:0x002bb2f0:	ncall	GetGame()
000072:0x002bb2f8:	ncalli	InventoryLocation.GetItem()
000072:0x002bb300:	call	
000072:0x002bb320:	cmpi	#return, _i0
000072:0x002bb330:	bne	0x2bb390
000075:0x002bb338:	cmpi	need_j1, _i0
000075:0x002bb348:	beq	0x2bb378
000077:0x002bb350:	ncall	GetGame()
000077:0x002bb358:	ncalli	InventoryLocation.GetItem()
000077:0x002bb360:	call	
000080:0x002bb378:	imove	#return, 0x000002
000080:0x002bb388:	rts
000084:0x002bb390:	imove	#return, 0x000001
000084:0x002bb3a0:	rts
000084:0x002bb3a8:	jump	0x2bb5a0
000094:0x002bb3b0:	call	GetDebugName#206374(player)
000094:0x002bb3c0:	adds	@s11, _s'[syncinv] junctures not required, player=', #return
000094:0x002bb3d0:	moves	@s10, @s11
000094:0x002bb3e0:	adds	@s10, @s10, _s' STS = '
000094:0x002bb3f0:	moves	@s09, @s10
000094:0x002bb400:	ncalli	Man.GetSimulationTimeStamp()
000094:0x002bb408:	icall	ToString(#return)
000094:0x002bb418:	adds	@s09, @s09, #return
000094:0x002bb428:	moves	@s08, @s09
000094:0x002bb438:	adds	@s08, @s08, _s' src1='
000094:0x002bb448:	moves	@s07, @s08
000094:0x002bb458:	call	DumpToStringNullSafe(src1)
000094:0x002bb468:	adds	@s07, @s07, #return
000094:0x002bb478:	moves	@s06, @s07
000094:0x002bb488:	adds	@s06, @s06, _s' src2='
000094:0x002bb498:	moves	@s05, @s06
000094:0x002bb4a8:	call	DumpToStringNullSafe(src2)
000094:0x002bb4b8:	adds	@s05, @s05, #return
000094:0x002bb4c8:	moves	@s04, @s05
000094:0x002bb4d8:	adds	@s04, @s04, _s' dst1='
000094:0x002bb4e8:	moves	@s03, @s04
000094:0x002bb4f8:	call	DumpToStringNullSafe(dst1)
000094:0x002bb508:	adds	@s03, @s03, #return
000094:0x002bb518:	moves	@s02, @s03
000094:0x002bb528:	adds	@s02, @s02, _s' dst2='
000094:0x002bb538:	moves	@s01, @s02
000094:0x002bb548:	call	DumpToStringNullSafe(dst2)
000094:0x002bb558:	adds	@s01, @s01, #return
000094:0x002bb568:	moves	@s00, @s01
000094:0x002bb578:	call	syncDebugPrint(@s00)
000095:0x002bb588:	imove	#return, 0x000000
000095:0x002bb598:	rts
000095:0x002bb5a0:	rts
PPERadialBlur::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\pperadialblur.c
000016:0x002bb5a8:	imove	#return, 0x000009
000016:0x002bb5b8:	rts
000016:0x002bb5c0:	rts
PPERadialBlur::GetDefaultMaterialPath()
000021:0x002bb5f0:	moves	#return, _s'Graphics/Materials/postprocess/radialblur'
000021:0x002bb600:	rts
000021:0x002bb608:	rts
PPERadialBlur::RegisterMaterialParameters()
000026:0x002bb660:	call	
000027:0x002bb680:	call	
000028:0x002bb6a0:	call	
000029:0x002bb6c0:	call	
000030:0x002bb6e0:	call	
000030:0x002bb700:	rts
ClientKickedModule::ClientKickedModule()
//scripts/3_Game/global\errormodulehandler\clientkickedmodule.c
000178:0x002bb738:	ncalli	ClientKickedModule.SetCategory(_i4)
000178:0x002bb748:	rts
ClientKickedModule::InitOptionalVariables()
000183:0x002bb7a0:	call	
000185:0x002bb7b0:	moves	m_Header, _s'#menu_warning'
000186:0x002bb7c0:	moves	m_Prefix, _s'#STR_MP_KICKED_CLIENT
'
000186:0x002bb7d0:	rts
ClientKickedModule::FillErrorDataMap()
000191:0x002bc700:	call	
000193:0x002bc710:	call	
000194:0x002bc738:	call	
000195:0x002bc760:	call	
000197:0x002bc788:	call	
000198:0x002bc7b0:	call	
000199:0x002bc7c8:	call	
000200:0x002bc7f0:	call	
000201:0x002bc818:	call	
000202:0x002bc840:	adds	@s01, _s'#STR_modified_data', VERIFY
000202:0x002bc850:	moves	@s00, @s01
000202:0x002bc860:	call	
000203:0x002bc888:	call	
000204:0x002bc8b0:	call	
000206:0x002bc8d8:	call	
000207:0x002bc900:	call	
000208:0x002bc928:	call	
000209:0x002bc950:	adds	@s01, _s'#STR_bank_count', VERIFY
000209:0x002bc960:	moves	@s00, @s01
000209:0x002bc970:	call	
000210:0x002bc998:	call	
000211:0x002bc9c0:	call	
000213:0x002bc9e8:	call	
000215:0x002bca10:	call	
000216:0x002bca28:	call	
000219:0x002bca40:	call	
000220:0x002bca68:	call	
000221:0x002bca90:	call	
000222:0x002bcab8:	call	
000223:0x002bcae0:	call	
000224:0x002bcb08:	call	
000225:0x002bcb30:	call	
000226:0x002bcb58:	call	
000227:0x002bcb80:	call	
000228:0x002bcba8:	call	
000229:0x002bcbd0:	call	
000230:0x002bcbf8:	call	
000231:0x002bcc20:	call	
000232:0x002bcc48:	call	
000233:0x002bcc70:	call	
000234:0x002bcc98:	call	
000235:0x002bccc0:	call	
000236:0x002bcce8:	call	
000237:0x002bcd10:	call	
000238:0x002bcd38:	call	
000239:0x002bcd60:	call	
000240:0x002bcd88:	call	
000243:0x002bcdb0:	call	
000244:0x002bcdd8:	call	
000245:0x002bce00:	call	
000246:0x002bce28:	call	
000247:0x002bce50:	call	
000248:0x002bce78:	call	
000251:0x002bcea0:	call	
000252:0x002bcec8:	call	
000253:0x002bcef0:	call	
000256:0x002bcf18:	call	
000257:0x002bcf40:	call	
000258:0x002bcf68:	call	
000259:0x002bcf90:	adds	@s01, _s'#STR_ve_missing_mod', MODS
000259:0x002bcfa0:	moves	@s00, @s01
000259:0x002bcfb0:	call	
000260:0x002bcfe0:	adds	@s01, _s'#STR_ve_extra_mod', MODS
000260:0x002bcff0:	moves	@s00, @s01
000260:0x002bd000:	call	
000261:0x002bd030:	adds	@s01, _s'#STR_ve_client_corrupt', VERIFY
000261:0x002bd040:	moves	@s00, @s01
000261:0x002bd050:	call	
000262:0x002bd078:	call	
000263:0x002bd0a0:	adds	@s07, _s'#STR_ve_unexpected_mod_pbo0', _s'
'
000263:0x002bd0b0:	moves	@s06, @s07
000263:0x002bd0c0:	adds	@s06, @s06, _s'#STR_ve_unexpected_mod_pbo1'
000263:0x002bd0d0:	moves	@s05, @s06
000263:0x002bd0e0:	adds	@s05, @s05, _s'
'
000263:0x002bd0f0:	moves	@s04, @s05
000263:0x002bd100:	adds	@s04, @s04, _s'#STR_ve_unexpected_mod_pbo2'
000263:0x002bd110:	moves	@s03, @s04
000263:0x002bd120:	adds	@s03, @s03, _s'
'
000263:0x002bd130:	moves	@s02, @s03
000263:0x002bd140:	adds	@s02, @s02, _s'#STR_ve_unexpected_mod_pbo3'
000263:0x002bd150:	moves	@s01, @s02
000263:0x002bd160:	adds	@s01, @s01, _s'
'
000263:0x002bd170:	moves	@s00, @s01
000263:0x002bd180:	call	
000264:0x002bd1b0:	adds	@s07, _s'#STR_ve_unexpected_mod_pbo0', _s'
'
000264:0x002bd1c0:	moves	@s06, @s07
000264:0x002bd1d0:	adds	@s06, @s06, _s'#STR_ve_unexpected_mod_pbo1'
000264:0x002bd1e0:	moves	@s05, @s06
000264:0x002bd1f0:	adds	@s05, @s05, _s'
'
000264:0x002bd200:	moves	@s04, @s05
000264:0x002bd210:	adds	@s04, @s04, _s'#STR_ve_unexpected_mod_pbo2'
000264:0x002bd220:	moves	@s03, @s04
000264:0x002bd230:	adds	@s03, @s03, _s'
'
000264:0x002bd240:	moves	@s02, @s03
000264:0x002bd250:	adds	@s02, @s02, _s'#STR_ve_unexpected_mod_pbo3'
000264:0x002bd260:	moves	@s01, @s02
000264:0x002bd270:	adds	@s01, @s01, _s'
'
000264:0x002bd280:	moves	@s00, @s01
000264:0x002bd290:	call	
000265:0x002bd2c0:	adds	@s01, _s'#STR_ve_um_client_updated', SERVER_MUST_UPDATE
000265:0x002bd2d0:	moves	@s00, @s01
000265:0x002bd2e0:	call	
000266:0x002bd308:	adds	@s01, _s'#STR_ve_um_server_updated', CLIENT_MUST_UPDATE
000266:0x002bd318:	moves	@s00, @s01
000266:0x002bd328:	call	
000267:0x002bd350:	call	
000268:0x002bd378:	adds	@s01, _s'#STR_ve_patched_pbo', VERIFY
000268:0x002bd388:	moves	@s00, @s01
000268:0x002bd398:	call	
000269:0x002bd3c0:	adds	@s01, _s'#STR_ve_integrity', VERIFY
000269:0x002bd3d0:	moves	@s00, @s01
000269:0x002bd3e0:	call	
000270:0x002bd408:	adds	@s01, _s'#STR_ve_missing_bising', VERIFY
000270:0x002bd418:	moves	@s00, @s01
000270:0x002bd428:	call	
000271:0x002bd458:	call	
000272:0x002bd480:	adds	@s02, _s'#STR_ve_m_rogue_pbo0', _s'
'
000272:0x002bd490:	moves	@s01, @s02
000272:0x002bd4a0:	adds	@s01, @s01, _s'#STR_ve_m_rogue_pbo1'
000272:0x002bd4b0:	moves	@s00, @s01
000272:0x002bd4c0:	call	
000273:0x002bd4e8:	adds	@s01, _s'#STR_ve_m_client_updated', SERVER_MUST_UPDATE
000273:0x002bd4f8:	moves	@s00, @s01
000273:0x002bd508:	call	
000274:0x002bd530:	adds	@s03, _s'#STR_ve_m_server_updated0', _s'
'
000274:0x002bd540:	moves	@s02, @s03
000274:0x002bd550:	adds	@s02, @s02, _s'#STR_ve_m_server_updated1'
000274:0x002bd560:	moves	@s01, @s02
000274:0x002bd570:	adds	@s01, @s01, CLIENT_MUST_UPDATE
000274:0x002bd580:	moves	@s00, @s01
000274:0x002bd590:	call	
000275:0x002bd5b8:	adds	@s03, _s'#STR_ve_m_server_corrupt0', _s'
'
000275:0x002bd5c8:	moves	@s02, @s03
000275:0x002bd5d8:	adds	@s02, @s02, _s'#STR_ve_m_server_corrupt1'
000275:0x002bd5e8:	moves	@s01, @s02
000275:0x002bd5f8:	adds	@s01, @s01, _s'
'
000275:0x002bd608:	moves	@s00, @s01
000275:0x002bd618:	call	
000276:0x002bd640:	adds	@s03, _s'#STR_ve_m_client_corrupt0', _s'
'
000276:0x002bd650:	moves	@s02, @s03
000276:0x002bd660:	adds	@s02, @s02, _s'#STR_ve_m_client_corrupt1'
000276:0x002bd670:	moves	@s01, @s02
000276:0x002bd680:	adds	@s01, @s01, VERIFY
000276:0x002bd690:	moves	@s00, @s01
000276:0x002bd6a0:	call	
000277:0x002bd6c8:	call	
000278:0x002bd6f0:	adds	@s01, VERIFY, _s' (.gproj)'
000278:0x002bd700:	moves	@s00, @s01
000278:0x002bd710:	call	
000281:0x002bd738:	adds	@s01, _s'#STR_pbo_mismatch', VERIFY
000281:0x002bd748:	moves	@s00, @s01
000281:0x002bd758:	call	
000282:0x002bd788:	call	
000283:0x002bd7b0:	adds	@s01, _s'#STR_pbo_client_updated', SERVER_MUST_UPDATE
000283:0x002bd7c0:	moves	@s00, @s01
000283:0x002bd7d0:	call	
000284:0x002bd7f8:	adds	@s01, _s'#STR_pbo_server_updated', CLIENT_MUST_UPDATE
000284:0x002bd808:	moves	@s00, @s01
000284:0x002bd818:	call	
000287:0x002bd840:	call	
000288:0x002bd868:	call	
000291:0x002bd890:	call	
000292:0x002bd8b8:	call	
000293:0x002bd8e0:	call	
000294:0x002bd908:	call	
000295:0x002bd930:	call	
000296:0x002bd958:	call	
000297:0x002bd980:	call	
000300:0x002bd9a8:	call	
000301:0x002bd9d0:	call	
000302:0x002bd9f8:	call	
000303:0x002bda20:	call	
000304:0x002bda48:	call	
000305:0x002bda70:	call	
000306:0x002bda98:	call	
000307:0x002bdac0:	call	
000308:0x002bdae8:	call	
000309:0x002bdb10:	call	
000312:0x002bdb38:	call	
000313:0x002bdb60:	call	
000314:0x002bdb88:	call	
000315:0x002bdbb0:	call	
000316:0x002bdbd8:	call	
000319:0x002bdc00:	call	
000320:0x002bdc28:	call	
000321:0x002bdc50:	call	
000324:0x002bdc78:	call	
000327:0x002bdca0:	call	
000328:0x002bdcc8:	call	
000329:0x002bdcf0:	call	
000330:0x002bdd18:	call	
000331:0x002bdd40:	call	
000332:0x002bdd68:	call	
000332:0x002bdd90:	rts
Tabber::OnWidgetScriptInit()
//scripts/3_Game/gui\tabber.c
000011:0x002bdd98:	ncalli	Widget.SetHandler(this)
000012:0x002bdda8:	move	index, SelectedTab
000012:0x002bddb8:	call	
000012:0x002bddc8:	rts
Tabber::OnClick()
000018:0x002bde20:	cmpcm	w, null
000018:0x002bde30:	beq	0x2bdf38
000018:0x002bde38:	ncalli	Widget.GetParent()
000018:0x002bde40:	movec	@c00, #return
000018:0x002bde50:	cmpmc	@c00, ButtonsPanel
000018:0x002bde60:	bne	0x2bdf38
000020:0x002bde68:	imove	SelectedTab, 0x000000
000021:0x002bde78:	movefm	[0xd31345a8], ButtonsPanel
000021:0x002bde88:	ncalli	Widget.GetChildren()
000021:0x002bde90:	movetm	iw, #return
000022:0x002bdea0:	cmpcm	iw, null
000022:0x002bdeb0:	beq	0x2bdf10
000024:0x002bdeb8:	cmpm	iw, w
000024:0x002bdec8:	bne	0x2bded8
000024:0x002bded0:	jump	0x2bdf10
000025:0x002bded8:	move	@m00, SelectedTab
000025:0x002bdee8:	inc	SelectedTab
000026:0x002bdef0:	ncalli	Widget.GetSibling()
000026:0x002bdef8:	movetm	iw, #return
000026:0x002bdf08:	jump	0x2bdea0
000029:0x002bdf10:	move	index, SelectedTab
000029:0x002bdf20:	call	
000029:0x002bdf30:	release	iw
000032:0x002bdf38:	imove	#return, 0x000000
000032:0x002bdf48:	rts
000032:0x002bdf50:	rts
Tabber::SelectTab()
000038:0x002bdfa8:	icall	Print(index)
000039:0x002bdfb8:	imove	n, 0x000000
000040:0x002bdfc8:	movefm	[0xd31345a8], ContentPanel
000040:0x002bdfd8:	ncalli	Widget.GetChildren()
000040:0x002bdfe0:	movetm	w, #return
000041:0x002bdff0:	cmpcm	w, null
000041:0x002be000:	beq	0x2be080
000043:0x002be008:	cmpi	n, index
000043:0x002be018:	bne	0x2be038
000045:0x002be020:	ncalli	Widget.Show(true, _i1)
000045:0x002be030:	jump	0x2be048
000049:0x002be038:	ncalli	Widget.Show(false, _i1)
000051:0x002be048:	move	@m00, n
000051:0x002be058:	inc	n
000052:0x002be060:	ncalli	Widget.GetSibling()
000052:0x002be068:	movetm	w, #return
000052:0x002be078:	jump	0x2bdff0
000052:0x002be080:	release	w
000052:0x002be088:	rts
PPERequester_CameraADS::SetValuesOptics()
//scripts/3_Game/ppemanager\requesters\ppercameraads_opt.c
000006:0x002be090:	ncall	GetGame()
000006:0x002be098:	ncalli	CGame.ResetPPMask()
000007:0x002be0a0:	ncalli	array<float>.Count()
000007:0x002be0a8:	move	@m00, #return
000007:0x002be0b8:	cmpi	@m00, _i4
000007:0x002be0c8:	beq	0x2be130
000009:0x002be0d0:	new	mask_array, array<float>
000009:0x002be0f0:	icall	
000009:0x002be100:	icall	
000009:0x002be110:	icall	
000009:0x002be120:	icall	
000011:0x002be130:	ncall	GetGame()
000011:0x002be138:	icall	
000011:0x002be148:	push	#return
000011:0x002be150:	icall	
000011:0x002be160:	move	@f01, #return
000011:0x002be170:	pop	#return
000011:0x002be178:	push	#return
000011:0x002be180:	icall	
000011:0x002be190:	move	@f02, #return
000011:0x002be1a0:	pop	#return
000011:0x002be1a8:	push	#return
000011:0x002be1b0:	icall	
000011:0x002be1c0:	move	@f03, #return
000011:0x002be1d0:	pop	#return
000011:0x002be1d8:	ncalli	CGame.AddPPMask(#return, @f01, @f02, @f03)
000014:0x002be1f0:	ncalli	array<float>.Count()
000014:0x002be1f8:	move	@m00, #return
000014:0x002be208:	cmpi	@m00, _i4
000014:0x002be218:	beq	0x2be280
000016:0x002be220:	new	lens_array, array<float>
000016:0x002be240:	icall	
000016:0x002be250:	icall	
000016:0x002be260:	icall	
000016:0x002be270:	icall	
000018:0x002be280:	icall	
000018:0x002be290:	call	
000019:0x002be2b8:	icall	
000019:0x002be2c8:	call	
000020:0x002be2f0:	icall	
000020:0x002be300:	call	
000021:0x002be328:	icall	
000021:0x002be338:	call	
000024:0x002be360:	call	
000027:0x002be378:	call	
000027:0x002be3a0:	movem	mask_array, mask_array
000027:0x002be3b0:	movem	lens_array, lens_array
000027:0x002be3c0:	rts
PPERequester_CameraADS::SetValuesIronsights()
000033:0x002be3c8:	ncall	GetGame()
000033:0x002be3d0:	ncalli	CGame.ResetPPMask()
000036:0x002be3d8:	call	
000037:0x002be3f0:	call	
000038:0x002be408:	call	
000039:0x002be420:	call	
000042:0x002be438:	icall	
000042:0x002be448:	cfti	val, #return
000042:0x002be458:	call	
000043:0x002be478:	icall	
000043:0x002be488:	call	
000044:0x002be4b0:	icall	
000044:0x002be4c0:	call	
000045:0x002be4e8:	icall	
000045:0x002be4f8:	call	
000046:0x002be520:	icall	
000046:0x002be530:	call	
000047:0x002be558:	icall	
000047:0x002be568:	call	
000050:0x002be590:	call	
000050:0x002be5a8:	movem	DOF_array, DOF_array
000050:0x002be5b8:	rts
PPERequester_CameraADS::OnStop()
000055:0x002be5c0:	call	
000057:0x002be5d0:	ncall	GetGame()
000057:0x002be5d8:	cmpc	#return, null
000057:0x002be5e8:	bne	0x2be5f8
000058:0x002be5f0:	rts
000060:0x002be5f8:	ncall	GetGame()
000060:0x002be600:	ncalli	CGame.ResetPPMask()
000060:0x002be608:	rts
PPEGlow::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppeglow.c
000078:0x002be610:	imove	#return, 0x00000f
000078:0x002be620:	rts
000078:0x002be628:	rts
PPEGlow::GetDefaultMaterialPath()
000083:0x002be658:	moves	#return, _s'Graphics/Materials/postprocess/glow'
000083:0x002be668:	rts
000083:0x002be670:	rts
PPEGlow::RegisterMaterialParameters()
000089:0x002be9c0:	call	
000090:0x002be9e0:	call	
000091:0x002bea00:	call	
000092:0x002bea20:	call	
000093:0x002bea40:	call	
000094:0x002bea60:	imove	default_value, 0x000001
000094:0x002bea70:	call	
000096:0x002bea88:	call	
000097:0x002beaa8:	call	
000098:0x002beac8:	call	
000099:0x002beae8:	call	
000100:0x002beb08:	call	
000101:0x002beb28:	call	
000102:0x002beb48:	call	
000103:0x002beb68:	call	
000105:0x002beb88:	call	
000106:0x002beba8:	call	
000107:0x002bebc8:	call	
000110:0x002bebe8:	call	
000111:0x002bec08:	call	
000112:0x002bec28:	call	
000113:0x002bec48:	call	
000114:0x002bec68:	call	
000115:0x002bec90:	call	
000116:0x002becb8:	call	
000117:0x002bece0:	new	@c01, array<float>
000117:0x002bed00:	pushc	@c01
000117:0x002bed08:	icall	
000117:0x002bed18:	icall	
000117:0x002bed28:	icall	
000117:0x002bed38:	icall	
000117:0x002bed48:	call	
000117:0x002bed60:	popc	@c01
000117:0x002bed68:	release	@c01
000118:0x002bed70:	call	
000119:0x002bed90:	call	
000121:0x002bedb8:	call	
000122:0x002bedd8:	call	
000123:0x002bedf8:	call	
000124:0x002bee18:	call	
000124:0x002bee38:	rts
HandAnimatedMoveToDst_W4T_Basic::OnEntry()
//scripts/3_Game/systems\inventory\handanimatedforceswapping.c
000009:0x002bef08:	movefm	@c01, e
000009:0x002bef18:	movem	player, m_Player
000010:0x002bef28:	cmpcm	m_Dst, null
000010:0x002bef38:	beq	0x2bf228
000010:0x002bef40:	movefm	[0xb5b18280], m_Dst
000010:0x002bef50:	ncalli	InventoryLocation.IsValid()
000010:0x002bef58:	cmpi	#return, _i0
000010:0x002bef68:	beq	0x2bf228
000012:0x002bef70:	movefm	[0xb5b18280], m_Dst
000012:0x002bef80:	ncalli	InventoryLocation.GetItem()
000012:0x002bef88:	movetm	item, #return
000013:0x002bef98:	new	src, InventoryLocation
000014:0x002befb8:	ncalli	EntityAI.GetInventory()
000014:0x002befc0:	movefm	[0xb5bad1f8], src
000014:0x002befd0:	ncalli	GameInventory.GetCurrentInventoryLocation([0xb5bad1f8])
000014:0x002befe0:	cmpi	#return, _i0
000014:0x002beff0:	beq	0x2bf090
000016:0x002beff8:	movefm	[0xb5bad978], src
000016:0x002bf008:	movefm	[0xb5bad9a0], m_Dst
000016:0x002bf018:	ncall	LocationCanMoveEntity([0xb5bad978], [0xb5bad9a0])
000016:0x002bf028:	cmpi	#return, _i0
000016:0x002bf038:	beq	0x2bf088
000018:0x002bf040:	movefm	[0xb5badea8], src
000018:0x002bf050:	movefm	[0xb5baded0], m_Dst
000018:0x002bf060:	ncall	LocationSyncMoveEntity([0xb5badea8], [0xb5baded0])
000019:0x002bf070:	call	
000019:0x002bf080:	jump	0x2bf088
000019:0x002bf088:	jump	0x2bf210
000032:0x002bf090:	movefm	@c00, e
000032:0x002bf0a0:	movem	o, m_Player
000032:0x002bf0b0:	call	GetDebugName#206374(o)
000032:0x002bf0c0:	adds	@s07, _s'[hndfsm] ', #return
000032:0x002bf0d0:	moves	@s06, @s07
000032:0x002bf0e0:	adds	@s06, @s06, _s' STS = '
000032:0x002bf0f0:	moves	@s05, @s06
000032:0x002bf100:	movefm	@c01, e
000032:0x002bf110:	movefm	[0xb5b2afc0], m_Player
000032:0x002bf120:	ncalli	DayZPlayer.GetSimulationTimeStamp()
000032:0x002bf128:	icall	ToString(#return)
000032:0x002bf138:	adds	@s05, @s05, #return
000032:0x002bf148:	moves	@s04, @s05
000032:0x002bf158:	adds	@s04, @s04, _s' HandAnimatedMoveToDst_W4T_Basic - item '
000032:0x002bf168:	moves	@s03, @s04
000032:0x002bf178:	icall	ToString(item)
000032:0x002bf188:	adds	@s03, @s03, #return
000032:0x002bf198:	moves	@s02, @s03
000032:0x002bf1a8:	adds	@s02, @s02, _s' has no Inventory or Location, inv='
000032:0x002bf1b8:	moves	@s01, @s02
000032:0x002bf1c8:	ncalli	EntityAI.GetInventory()
000032:0x002bf1d0:	icall	ToString(#return)
000032:0x002bf1e0:	adds	@s01, @s01, #return
000032:0x002bf1f0:	moves	@s00, @s01
000032:0x002bf200:	call	Error(@s00)
000032:0x002bf210:	release	item
000032:0x002bf218:	release	src
000032:0x002bf220:	jump	0x2bf238
000035:0x002bf228:	call	Error(_s'[hndfsm] HandAnimatedMoveToDst_W4T_Basic - event has no valid m_Dst')
000037:0x002bf238:	call	
000037:0x002bf248:	release	player
000037:0x002bf250:	rts
HandAnimatedMoveToDst_W4T_Basic::OnAbort()
000042:0x002bf258:	movetm	m_Dst, null
000043:0x002bf268:	call	
000043:0x002bf278:	rts
HandAnimatedMoveToDst_W4T_Basic::OnExit()
000048:0x002bf280:	movetm	m_Dst, null
000049:0x002bf290:	call	
000049:0x002bf2a0:	rts
HandAnimatedMoveToDst_W4T_Basic::IsWaitingForActionFinish()
000052:0x002bf2a8:	imove	#return, 0x000001
000052:0x002bf2b8:	rts
000052:0x002bf2c0:	rts
HandForceSwappingAnimated_Show::OnEntry()
000066:0x002bf2f0:	cmpcm	m_Src1, null
000066:0x002bf300:	beq	0x2bf3e0
000066:0x002bf308:	cmpcm	m_Src2, null
000066:0x002bf318:	beq	0x2bf3e0
000066:0x002bf320:	cmpcm	m_Dst1, null
000066:0x002bf330:	beq	0x2bf3e0
000066:0x002bf338:	cmpcm	m_Dst2, null
000066:0x002bf348:	beq	0x2bf3e0
000072:0x002bf350:	movefm	[0xb5badf20], m_Src1
000072:0x002bf360:	movefm	[0xb5badf48], m_Src2
000072:0x002bf370:	movefm	[0xb5badf70], m_Dst1
000072:0x002bf380:	movefm	[0xb5badf98], m_Dst2
000072:0x002bf390:	ncall	LocationSwap([0xb5badf20], [0xb5badf48], [0xb5badf70], [0xb5badf98])
000073:0x002bf3a8:	movefm	@c00, e
000073:0x002bf3b8:	movefm	[0xb5b2afc0], m_Player
000073:0x002bf3c8:	call	
000073:0x002bf3d8:	jump	0x2bf3f0
000081:0x002bf3e0:	call	Error(_s'[hndfsm] HandForceSwappingAnimated_Show is not properly configured!')
000083:0x002bf3f0:	call	
000083:0x002bf400:	rts
HandForceSwappingAnimated_Show::OnAbort()
000088:0x002bf408:	movetm	m_Src1, null
000089:0x002bf418:	movetm	m_Src2, null
000090:0x002bf428:	movetm	m_Dst1, null
000091:0x002bf438:	movetm	m_Dst2, null
000092:0x002bf448:	call	
000092:0x002bf458:	rts
HandForceSwappingAnimated_Show::OnExit()
000097:0x002bf460:	movetm	m_Src1, null
000098:0x002bf470:	movetm	m_Src2, null
000099:0x002bf480:	movetm	m_Dst1, null
000100:0x002bf490:	movetm	m_Dst2, null
000101:0x002bf4a0:	call	
000101:0x002bf4b0:	rts
HandForceSwappingAnimated_Show::IsWaitingForActionFinish()
000104:0x002bf4b8:	imove	#return, 0x000001
000104:0x002bf4c8:	rts
000104:0x002bf4d0:	rts
HandForceSwappingAnimated_Show::HandForceSwappingAnimated_Show()
000055:0x002bf4d8:	movetm	m_Src1, null
000055:0x002bf4e8:	movetm	m_Src2, null
000055:0x002bf4f8:	movetm	m_Dst1, null
000055:0x002bf508:	movetm	m_Dst2, null
000055:0x002bf518:	rts
HandAnimatedForceSwapping::HandAnimatedForceSwapping()
000119:0x002bf598:	movetm	m_Src1, null
000119:0x002bf5a8:	movetm	m_Src2, null
000119:0x002bf5b8:	movetm	m_Dst1, null
000119:0x002bf5c8:	movetm	m_Dst2, null
000122:0x002bf5d8:	new	m_Start, HandStartHidingAnimated
000123:0x002bf608:	new	m_Show, HandAnimatedMoveToDst_W4T
000124:0x002bf638:	new	m_Hide, HandAnimatedMoveToDst_W4T_Basic
000127:0x002bf660:	new	_fin_, HandEventHumanCommandActionFinished
000128:0x002bf688:	new	_AEh_, HandAnimEventChanged
000129:0x002bf6b0:	new	__Xd_, HandEventDestroyed
000131:0x002bf6d8:	new	m_FSM, HandFSM
000133:0x002bf700:	movem	src, m_Start
000133:0x002bf710:	movem	dst, m_Hide
000133:0x002bf720:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000133:0x002bf758:	pushc	@c00
000133:0x002bf760:	movefm	[0xb5b3f2a8], m_FSM
000133:0x002bf770:	call	
000133:0x002bf780:	popc	@c00
000133:0x002bf788:	release	@c00
000134:0x002bf790:	movem	src, m_Hide
000134:0x002bf7a0:	movem	dst, m_Show
000134:0x002bf7b0:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000134:0x002bf7e8:	pushc	@c00
000134:0x002bf7f0:	movefm	[0xb5b3f2a8], m_FSM
000134:0x002bf800:	call	
000134:0x002bf810:	popc	@c00
000134:0x002bf818:	release	@c00
000135:0x002bf820:	movem	src, m_Show
000135:0x002bf830:	movetm	dst, null
000135:0x002bf840:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000135:0x002bf878:	pushc	@c00
000135:0x002bf880:	movefm	[0xb5b3f2a8], m_FSM
000135:0x002bf890:	call	
000135:0x002bf8a0:	popc	@c00
000135:0x002bf8a8:	release	@c00
000136:0x002bf8b0:	movem	src, m_Hide
000136:0x002bf8c0:	movetm	dst, null
000136:0x002bf8d0:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000136:0x002bf908:	pushc	@c00
000136:0x002bf910:	movefm	[0xb5b3f2a8], m_FSM
000136:0x002bf920:	call	
000136:0x002bf930:	popc	@c00
000136:0x002bf938:	release	@c00
000137:0x002bf940:	movem	src, m_Show
000137:0x002bf950:	movetm	dst, null
000137:0x002bf960:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000137:0x002bf998:	pushc	@c00
000137:0x002bf9a0:	movefm	[0xb5b3f2a8], m_FSM
000137:0x002bf9b0:	call	
000137:0x002bf9c0:	popc	@c00
000137:0x002bf9c8:	release	@c00
000138:0x002bf9d0:	movem	src, m_Hide
000138:0x002bf9e0:	movetm	dst, null
000138:0x002bf9f0:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000138:0x002bfa28:	pushc	@c00
000138:0x002bfa30:	movefm	[0xb5b3f2a8], m_FSM
000138:0x002bfa40:	call	
000138:0x002bfa50:	popc	@c00
000138:0x002bfa58:	release	@c00
000140:0x002bfa60:	movem	initial_state, m_Start
000140:0x002bfa70:	movefm	[0xb5b3f2a8], m_FSM
000140:0x002bfa80:	call	
000140:0x002bfa90:	release	_fin_
000140:0x002bfa98:	release	_AEh_
000140:0x002bfaa0:	release	__Xd_
000140:0x002bfaa8:	rts
HandAnimatedForceSwapping::OnEntry()
000145:0x002bfb00:	movefm	@c02, e
000145:0x002bfb10:	icall	SafeCastType([0xb5b36268], @c01, @c02)
000145:0x002bfb28:	movetm	efs, @c01
000146:0x002bfb38:	cmpcm	efs, null
000146:0x002bfb48:	beq	0x2bff38
000148:0x002bfb50:	call	
000148:0x002bfb60:	ncalli	InventoryLocation.GetType()
000148:0x002bfb68:	move	@m00, #return
000148:0x002bfb78:	cmpi	@m00, _i4
000148:0x002bfb88:	bne	0x2bfca8
000150:0x002bfb90:	movefm	[0xb5b3c9b0], m_Start
000150:0x002bfba0:	movec	@c00, [0xb5b3c9b0]
000150:0x002bfbb0:	movefm	@c01, efs
000150:0x002bfbc0:	move	m_ActionType, m_AnimationID
000152:0x002bfbd0:	call	
000152:0x002bfbe0:	movem	m_Src1, #return
000152:0x002bfbf0:	release	#return
000153:0x002bfbf8:	movefm	@c01, efs
000153:0x002bfc08:	movem	m_Src2, m_Src2
000154:0x002bfc18:	call	
000154:0x002bfc28:	movem	m_Dst1, #return
000154:0x002bfc38:	release	#return
000155:0x002bfc40:	movefm	@c01, efs
000155:0x002bfc50:	movem	m_Dst2, m_Dst2
000157:0x002bfc60:	movefm	[0xb5b393d0], m_Show
000157:0x002bfc70:	movec	@c00, [0xb5b393d0]
000157:0x002bfc80:	movefm	@c01, efs
000157:0x002bfc90:	move	m_ActionType, m_Animation2ID
000157:0x002bfca0:	jump	0x2bfdb8
000161:0x002bfca8:	movefm	[0xb5b3c9b0], m_Start
000161:0x002bfcb8:	movec	@c00, [0xb5b3c9b0]
000161:0x002bfcc8:	movefm	@c01, efs
000161:0x002bfcd8:	move	m_ActionType, m_Animation2ID
000163:0x002bfce8:	movefm	@c01, efs
000163:0x002bfcf8:	movem	m_Src1, m_Src2
000164:0x002bfd08:	call	
000164:0x002bfd18:	movem	m_Src2, #return
000164:0x002bfd28:	release	#return
000165:0x002bfd30:	movefm	@c01, efs
000165:0x002bfd40:	movem	m_Dst1, m_Dst2
000166:0x002bfd50:	call	
000166:0x002bfd60:	movem	m_Dst2, #return
000166:0x002bfd70:	release	#return
000168:0x002bfd78:	movefm	[0xb5b393d0], m_Show
000168:0x002bfd88:	movec	@c00, [0xb5b393d0]
000168:0x002bfd98:	movefm	@c01, efs
000168:0x002bfda8:	move	m_ActionType, m_AnimationID
000168:0x002bfdb8:	release	#return
000171:0x002bfdc0:	movefm	[0xb5b39830], m_Hide
000171:0x002bfdd0:	movec	@c00, [0xb5b39830]
000171:0x002bfde0:	movem	m_Dst, m_Dst1
000172:0x002bfdf0:	movefm	[0xb5b393d0], m_Show
000172:0x002bfe00:	movec	@c00, [0xb5b393d0]
000172:0x002bfe10:	movem	m_Dst, m_Dst2
000174:0x002bfe20:	ncall	GetGame()
000174:0x002bfe28:	ncalli	CGame.IsDedicatedServer()
000174:0x002bfe30:	cmpi	#return, _i0
000174:0x002bfe40:	bne	0x2bff38
000176:0x002bfe48:	movefm	@c00, e
000176:0x002bfe58:	movefm	[0xb5b2afc0], m_Player
000176:0x002bfe68:	call	
000176:0x002bfe78:	movefm	[0xb5b18280], m_Dst1
000176:0x002bfe88:	ncalli	InventoryLocation.GetItem()
000176:0x002bfe90:	movem	dst, m_Dst1
000176:0x002bfea0:	call	
000176:0x002bfeb8:	release	#return
000177:0x002bfec0:	movefm	@c00, e
000177:0x002bfed0:	movefm	[0xb5b2afc0], m_Player
000177:0x002bfee0:	call	
000177:0x002bfef0:	movefm	[0xb5b18280], m_Dst2
000177:0x002bff00:	ncalli	InventoryLocation.GetItem()
000177:0x002bff08:	movem	dst, m_Dst2
000177:0x002bff18:	call	
000177:0x002bff30:	release	#return
000181:0x002bff38:	call	
000181:0x002bff48:	release	efs
000181:0x002bff50:	rts
HandAnimatedForceSwapping::OnAbort()
000186:0x002bff58:	ncall	GetGame()
000186:0x002bff60:	ncalli	CGame.IsDedicatedServer()
000186:0x002bff68:	cmpi	#return, _i0
000186:0x002bff78:	bne	0x2c0078
000188:0x002bff80:	movefm	@c00, e
000188:0x002bff90:	movefm	[0xb5b2afc0], m_Player
000188:0x002bffa0:	call	
000188:0x002bffb0:	movefm	[0xb5b18280], m_Dst1
000188:0x002bffc0:	ncalli	InventoryLocation.GetItem()
000188:0x002bffc8:	movem	dst, m_Dst1
000188:0x002bffd8:	call	
000188:0x002bfff0:	release	#return
000189:0x002bfff8:	movefm	@c00, e
000189:0x002c0008:	movefm	[0xb5b2afc0], m_Player
000189:0x002c0018:	call	
000189:0x002c0028:	movefm	[0xb5b18280], m_Dst2
000189:0x002c0038:	ncalli	InventoryLocation.GetItem()
000189:0x002c0040:	movem	dst, m_Dst2
000189:0x002c0050:	call	
000189:0x002c0068:	release	#return
000189:0x002c0070:	jump	0x2c0118
000193:0x002c0078:	ncall	GetGame()
000193:0x002c0080:	movefm	@c01, e
000193:0x002c0090:	movefm	[0xb5bdb770], m_Player
000193:0x002c00a0:	movefm	[0xb5b18280], m_Dst1
000193:0x002c00b0:	ncalli	InventoryLocation.GetItem()
000193:0x002c00b8:	ncalli	CGame.ClearJuncture([0xb5bdb770], #return)
000194:0x002c00c8:	ncall	GetGame()
000194:0x002c00d0:	movefm	@c01, e
000194:0x002c00e0:	movefm	[0xb5bdb770], m_Player
000194:0x002c00f0:	movefm	[0xb5b18280], m_Dst2
000194:0x002c0100:	ncalli	InventoryLocation.GetItem()
000194:0x002c0108:	ncalli	CGame.ClearJuncture([0xb5bdb770], #return)
000197:0x002c0118:	movetm	m_Src1, null
000198:0x002c0128:	movetm	m_Src2, null
000199:0x002c0138:	movetm	m_Dst1, null
000200:0x002c0148:	movetm	m_Dst2, null
000202:0x002c0158:	call	
000202:0x002c0168:	rts
HandAnimatedForceSwapping::OnExit()
000207:0x002c0170:	ncall	GetGame()
000207:0x002c0178:	ncalli	CGame.IsDedicatedServer()
000207:0x002c0180:	cmpi	#return, _i0
000207:0x002c0190:	bne	0x2c0290
000209:0x002c0198:	movefm	@c00, e
000209:0x002c01a8:	movefm	[0xb5b2afc0], m_Player
000209:0x002c01b8:	call	
000209:0x002c01c8:	movefm	[0xb5b18280], m_Dst1
000209:0x002c01d8:	ncalli	InventoryLocation.GetItem()
000209:0x002c01e0:	movem	dst, m_Dst1
000209:0x002c01f0:	call	
000209:0x002c0208:	release	#return
000210:0x002c0210:	movefm	@c00, e
000210:0x002c0220:	movefm	[0xb5b2afc0], m_Player
000210:0x002c0230:	call	
000210:0x002c0240:	movefm	[0xb5b18280], m_Dst2
000210:0x002c0250:	ncalli	InventoryLocation.GetItem()
000210:0x002c0258:	movem	dst, m_Dst2
000210:0x002c0268:	call	
000210:0x002c0280:	release	#return
000210:0x002c0288:	jump	0x2c0330
000214:0x002c0290:	ncall	GetGame()
000214:0x002c0298:	movefm	@c01, e
000214:0x002c02a8:	movefm	[0xb5bdb770], m_Player
000214:0x002c02b8:	movefm	[0xb5b18280], m_Dst1
000214:0x002c02c8:	ncalli	InventoryLocation.GetItem()
000214:0x002c02d0:	ncalli	CGame.ClearJuncture([0xb5bdb770], #return)
000215:0x002c02e0:	ncall	GetGame()
000215:0x002c02e8:	movefm	@c01, e
000215:0x002c02f8:	movefm	[0xb5bdb770], m_Player
000215:0x002c0308:	movefm	[0xb5b18280], m_Dst2
000215:0x002c0318:	ncalli	InventoryLocation.GetItem()
000215:0x002c0320:	ncalli	CGame.ClearJuncture([0xb5bdb770], #return)
000218:0x002c0330:	movetm	m_Src1, null
000219:0x002c0340:	movetm	m_Src2, null
000220:0x002c0350:	movetm	m_Dst1, null
000221:0x002c0360:	movetm	m_Dst2, null
000223:0x002c0370:	call	
000223:0x002c0380:	rts
HandAnimatedForceSwapping_Inst::HandAnimatedForceSwapping_Inst()
000237:0x002c0400:	movetm	m_Src1, null
000237:0x002c0410:	movetm	m_Src2, null
000237:0x002c0420:	movetm	m_Dst1, null
000237:0x002c0430:	movetm	m_Dst2, null
000240:0x002c0440:	new	m_Start, HandStartHidingAnimated
000241:0x002c0470:	new	m_Swap, HandForceSwappingAnimated_Show
000244:0x002c04a0:	new	_fin_, HandEventHumanCommandActionFinished
000245:0x002c04c8:	new	_AEh_, HandAnimEventChanged
000246:0x002c04f0:	new	__Xd_, HandEventDestroyed
000248:0x002c0518:	new	m_FSM, HandFSM
000250:0x002c0540:	movem	src, m_Start
000250:0x002c0550:	movem	dst, m_Swap
000250:0x002c0560:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000250:0x002c0598:	pushc	@c00
000250:0x002c05a0:	movefm	[0xb5b3f2a8], m_FSM
000250:0x002c05b0:	call	
000250:0x002c05c0:	popc	@c00
000250:0x002c05c8:	release	@c00
000251:0x002c05d0:	movem	src, m_Swap
000251:0x002c05e0:	movetm	dst, null
000251:0x002c05f0:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000251:0x002c0628:	pushc	@c00
000251:0x002c0630:	movefm	[0xb5b3f2a8], m_FSM
000251:0x002c0640:	call	
000251:0x002c0650:	popc	@c00
000251:0x002c0658:	release	@c00
000252:0x002c0660:	movem	src, m_Swap
000252:0x002c0670:	movetm	dst, null
000252:0x002c0680:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000252:0x002c06b8:	pushc	@c00
000252:0x002c06c0:	movefm	[0xb5b3f2a8], m_FSM
000252:0x002c06d0:	call	
000252:0x002c06e0:	popc	@c00
000252:0x002c06e8:	release	@c00
000254:0x002c06f0:	movem	initial_state, m_Start
000254:0x002c0700:	movefm	[0xb5b3f2a8], m_FSM
000254:0x002c0710:	call	
000254:0x002c0720:	release	_fin_
000254:0x002c0728:	release	_AEh_
000254:0x002c0730:	release	__Xd_
000254:0x002c0738:	rts
HandAnimatedForceSwapping_Inst::OnEntry()
000259:0x002c0768:	movefm	@c02, e
000259:0x002c0778:	icall	SafeCastType([0xb5b36268], @c01, @c02)
000259:0x002c0790:	movetm	efs, @c01
000260:0x002c07a0:	cmpcm	efs, null
000260:0x002c07b0:	beq	0x2c0c00
000262:0x002c07b8:	call	
000262:0x002c07c8:	ncalli	InventoryLocation.GetType()
000262:0x002c07d0:	move	@m00, #return
000262:0x002c07e0:	cmpi	@m00, _i4
000262:0x002c07f0:	bne	0x2c0910
000264:0x002c07f8:	movefm	[0xb5b3c9b0], m_Start
000264:0x002c0808:	movec	@c00, [0xb5b3c9b0]
000264:0x002c0818:	movefm	@c01, efs
000264:0x002c0828:	move	m_ActionType, m_AnimationID
000266:0x002c0838:	call	
000266:0x002c0848:	movem	m_Src1, #return
000266:0x002c0858:	release	#return
000267:0x002c0860:	movefm	@c01, efs
000267:0x002c0870:	movem	m_Src2, m_Src2
000268:0x002c0880:	call	
000268:0x002c0890:	movem	m_Dst1, #return
000268:0x002c08a0:	release	#return
000269:0x002c08a8:	movefm	@c01, efs
000269:0x002c08b8:	movem	m_Dst2, m_Dst2
000271:0x002c08c8:	movefm	[0xb5b3b160], m_Swap
000271:0x002c08d8:	movec	@c00, [0xb5b3b160]
000271:0x002c08e8:	movefm	@c01, efs
000271:0x002c08f8:	move	m_ActionType, m_Animation2ID
000271:0x002c0908:	jump	0x2c0a20
000275:0x002c0910:	movefm	[0xb5b3c9b0], m_Start
000275:0x002c0920:	movec	@c00, [0xb5b3c9b0]
000275:0x002c0930:	movefm	@c01, efs
000275:0x002c0940:	move	m_ActionType, m_Animation2ID
000277:0x002c0950:	movefm	@c01, efs
000277:0x002c0960:	movem	m_Src1, m_Src2
000278:0x002c0970:	call	
000278:0x002c0980:	movem	m_Src2, #return
000278:0x002c0990:	release	#return
000279:0x002c0998:	movefm	@c01, efs
000279:0x002c09a8:	movem	m_Dst1, m_Dst2
000280:0x002c09b8:	call	
000280:0x002c09c8:	movem	m_Dst2, #return
000280:0x002c09d8:	release	#return
000282:0x002c09e0:	movefm	[0xb5b3b160], m_Swap
000282:0x002c09f0:	movec	@c00, [0xb5b3b160]
000282:0x002c0a00:	movefm	@c01, efs
000282:0x002c0a10:	move	m_ActionType, m_AnimationID
000282:0x002c0a20:	release	#return
000285:0x002c0a28:	movefm	[0xb5b3b160], m_Swap
000285:0x002c0a38:	movec	@c00, [0xb5b3b160]
000285:0x002c0a48:	movem	m_Src1, m_Src1
000286:0x002c0a58:	movefm	[0xb5b3b160], m_Swap
000286:0x002c0a68:	movec	@c00, [0xb5b3b160]
000286:0x002c0a78:	movem	m_Dst1, m_Dst1
000287:0x002c0a88:	movefm	[0xb5b3b160], m_Swap
000287:0x002c0a98:	movec	@c00, [0xb5b3b160]
000287:0x002c0aa8:	movem	m_Src2, m_Src2
000288:0x002c0ab8:	movefm	[0xb5b3b160], m_Swap
000288:0x002c0ac8:	movec	@c00, [0xb5b3b160]
000288:0x002c0ad8:	movem	m_Dst2, m_Dst2
000290:0x002c0ae8:	ncall	GetGame()
000290:0x002c0af0:	ncalli	CGame.IsDedicatedServer()
000290:0x002c0af8:	cmpi	#return, _i0
000290:0x002c0b08:	bne	0x2c0c00
000292:0x002c0b10:	movefm	@c00, e
000292:0x002c0b20:	movefm	[0xb5b2afc0], m_Player
000292:0x002c0b30:	call	
000292:0x002c0b40:	movefm	[0xb5b18280], m_Dst1
000292:0x002c0b50:	ncalli	InventoryLocation.GetItem()
000292:0x002c0b58:	movem	dst, m_Dst1
000292:0x002c0b68:	call	
000292:0x002c0b80:	release	#return
000293:0x002c0b88:	movefm	@c00, e
000293:0x002c0b98:	movefm	[0xb5b2afc0], m_Player
000293:0x002c0ba8:	call	
000293:0x002c0bb8:	movefm	[0xb5b18280], m_Dst2
000293:0x002c0bc8:	ncalli	InventoryLocation.GetItem()
000293:0x002c0bd0:	movem	dst, m_Dst2
000293:0x002c0be0:	call	
000293:0x002c0bf8:	release	#return
000297:0x002c0c00:	call	
000297:0x002c0c10:	release	efs
000297:0x002c0c18:	rts
HandAnimatedForceSwapping_Inst::OnAbort()
000302:0x002c0c20:	ncall	GetGame()
000302:0x002c0c28:	ncalli	CGame.IsDedicatedServer()
000302:0x002c0c30:	cmpi	#return, _i0
000302:0x002c0c40:	bne	0x2c0d40
000304:0x002c0c48:	movefm	@c00, e
000304:0x002c0c58:	movefm	[0xb5b2afc0], m_Player
000304:0x002c0c68:	call	
000304:0x002c0c78:	movefm	[0xb5b18280], m_Dst1
000304:0x002c0c88:	ncalli	InventoryLocation.GetItem()
000304:0x002c0c90:	movem	dst, m_Dst1
000304:0x002c0ca0:	call	
000304:0x002c0cb8:	release	#return
000305:0x002c0cc0:	movefm	@c00, e
000305:0x002c0cd0:	movefm	[0xb5b2afc0], m_Player
000305:0x002c0ce0:	call	
000305:0x002c0cf0:	movefm	[0xb5b18280], m_Dst2
000305:0x002c0d00:	ncalli	InventoryLocation.GetItem()
000305:0x002c0d08:	movem	dst, m_Dst2
000305:0x002c0d18:	call	
000305:0x002c0d30:	release	#return
000305:0x002c0d38:	jump	0x2c0de0
000309:0x002c0d40:	ncall	GetGame()
000309:0x002c0d48:	movefm	@c01, e
000309:0x002c0d58:	movefm	[0xb5bdb770], m_Player
000309:0x002c0d68:	movefm	[0xb5b18280], m_Dst1
000309:0x002c0d78:	ncalli	InventoryLocation.GetItem()
000309:0x002c0d80:	ncalli	CGame.ClearJuncture([0xb5bdb770], #return)
000310:0x002c0d90:	ncall	GetGame()
000310:0x002c0d98:	movefm	@c01, e
000310:0x002c0da8:	movefm	[0xb5bdb770], m_Player
000310:0x002c0db8:	movefm	[0xb5b18280], m_Dst2
000310:0x002c0dc8:	ncalli	InventoryLocation.GetItem()
000310:0x002c0dd0:	ncalli	CGame.ClearJuncture([0xb5bdb770], #return)
000313:0x002c0de0:	movetm	m_Src1, null
000314:0x002c0df0:	movetm	m_Src2, null
000315:0x002c0e00:	movetm	m_Dst1, null
000316:0x002c0e10:	movetm	m_Dst2, null
000318:0x002c0e20:	call	
000318:0x002c0e30:	rts
HandAnimatedForceSwapping_Inst::OnExit()
000323:0x002c0e38:	ncall	GetGame()
000323:0x002c0e40:	ncalli	CGame.IsDedicatedServer()
000323:0x002c0e48:	cmpi	#return, _i0
000323:0x002c0e58:	bne	0x2c0f58
000325:0x002c0e60:	movefm	@c00, e
000325:0x002c0e70:	movefm	[0xb5b2afc0], m_Player
000325:0x002c0e80:	call	
000325:0x002c0e90:	movefm	[0xb5b18280], m_Dst1
000325:0x002c0ea0:	ncalli	InventoryLocation.GetItem()
000325:0x002c0ea8:	movem	dst, m_Dst1
000325:0x002c0eb8:	call	
000325:0x002c0ed0:	release	#return
000326:0x002c0ed8:	movefm	@c00, e
000326:0x002c0ee8:	movefm	[0xb5b2afc0], m_Player
000326:0x002c0ef8:	call	
000326:0x002c0f08:	movefm	[0xb5b18280], m_Dst2
000326:0x002c0f18:	ncalli	InventoryLocation.GetItem()
000326:0x002c0f20:	movem	dst, m_Dst2
000326:0x002c0f30:	call	
000326:0x002c0f48:	release	#return
000326:0x002c0f50:	jump	0x2c0ff8
000330:0x002c0f58:	ncall	GetGame()
000330:0x002c0f60:	movefm	@c01, e
000330:0x002c0f70:	movefm	[0xb5bdb770], m_Player
000330:0x002c0f80:	movefm	[0xb5b18280], m_Dst1
000330:0x002c0f90:	ncalli	InventoryLocation.GetItem()
000330:0x002c0f98:	ncalli	CGame.ClearJuncture([0xb5bdb770], #return)
000331:0x002c0fa8:	ncall	GetGame()
000331:0x002c0fb0:	movefm	@c01, e
000331:0x002c0fc0:	movefm	[0xb5bdb770], m_Player
000331:0x002c0fd0:	movefm	[0xb5b18280], m_Dst2
000331:0x002c0fe0:	ncalli	InventoryLocation.GetItem()
000331:0x002c0fe8:	ncalli	CGame.ClearJuncture([0xb5bdb770], #return)
000334:0x002c0ff8:	movetm	m_Src1, null
000335:0x002c1008:	movetm	m_Src2, null
000336:0x002c1018:	movetm	m_Dst1, null
000337:0x002c1028:	movetm	m_Dst2, null
000339:0x002c1038:	call	
000339:0x002c1048:	rts
EmbededButtonScript::OnWidgetScriptInit()
//scripts/3_Game/gui\embeded.c
000007:0x002c1078:	ncalli	Widget.GetChildren()
000007:0x002c1080:	icall	SafeCastType([0xd31362c0], @c01, #return)
000007:0x002c1098:	movetm	button, @c01
000008:0x002c10a8:	moves	[0xd3160dc0], Caption
000008:0x002c10b8:	ncalli	ButtonWidget.SetText([0xd3160dc0])
000008:0x002c10c8:	release	button
000008:0x002c10d0:	rts
InventoryItem::InventoryItem()
//scripts/3_Game/entities\inventoryitem.c
000033:0x002c1100:	imove	m_IsMeleeWeapon, 0x000000
000035:0x002c1110:	call	
000037:0x002c1120:	ncalli	InventoryItem.ConfigIsExisting(_s'isMeleeWeapon')
000037:0x002c1130:	cmpi	#return, _i0
000037:0x002c1140:	beq	0x2c1168
000038:0x002c1148:	call	
000038:0x002c1158:	move	m_IsMeleeWeapon, #return
000038:0x002c1168:	rts
InventoryItem::OnUseFromInventory()
000049:0x002c1170:	imove	#return, 0x000000
000049:0x002c1180:	rts
000049:0x002c1188:	rts
InventoryItem::GetTooltip()
000056:0x002c11e0:	call	
000056:0x002c11f0:	moves	temp, output
000056:0x002c1200:	cmpi	#return, _i0
000056:0x002c1210:	bne	0x2c1238
000057:0x002c1218:	icall	
000057:0x002c1228:	moves	temp, #return
000058:0x002c1238:	moves	#return, temp
000058:0x002c1248:	rts
000058:0x002c1250:	rts
InventoryItem::IsInventoryItem()
000063:0x002c1258:	imove	#return, 0x000001
000063:0x002c1268:	rts
000063:0x002c1270:	rts
InventoryItem::GetMeleeMode()
000068:0x002c1278:	imove	#return, 0x000000
000068:0x002c1288:	rts
000068:0x002c1290:	rts
InventoryItem::GetMeleeHeavyMode()
000073:0x002c1298:	imove	#return, 0x000001
000073:0x002c12a8:	rts
000073:0x002c12b0:	rts
InventoryItem::GetMeleeSprintMode()
000078:0x002c12b8:	imove	#return, 0x000002
000078:0x002c12c8:	rts
000078:0x002c12d0:	rts
InventoryItem::IsMeleeWeapon()
000083:0x002c12d8:	move	#return, m_IsMeleeWeapon
000083:0x002c12e8:	rts
000083:0x002c12f0:	rts
InventoryItem::IsMeleeFinisher()
000088:0x002c12f8:	imove	#return, 0x000000
000088:0x002c1308:	rts
000088:0x002c1310:	rts
InventoryItem::PlayImpactSound()
000094:0x002c1390:	cmpcm	m_SoundImpactTable, null
000094:0x002c13a0:	bne	0x2c13b0
000095:0x002c13a8:	rts
000097:0x002c13b0:	movefm	[0xb5b3afe8], m_SoundImpactTable
000097:0x002c13c0:	call	
000097:0x002c13d0:	movem	soundBuilder, #return
000097:0x002c13e0:	release	#return
000098:0x002c13e8:	cmpcm	soundBuilder, null
000098:0x002c13f8:	beq	0x2c14b0
000100:0x002c1400:	ncalli	SoundObjectBuilder.SetVariable(_s'weight', weight)
000101:0x002c1410:	ncalli	SoundObjectBuilder.SetVariable(_s'speed', velocity)
000102:0x002c1420:	ncalli	InventoryItem.GetPosition()
000102:0x002c1428:	ncalli	SoundObjectBuilder.UpdateEnvSoundControllers(#return)
000104:0x002c1438:	call	
000104:0x002c1448:	movem	soundObject, #return
000104:0x002c1458:	release	#return
000105:0x002c1460:	cmpcm	soundObject, null
000105:0x002c1470:	beq	0x2c14a8
000107:0x002c1478:	ncalli	SoundObject.SetKind(_i1)
000108:0x002c1488:	call	
000108:0x002c14a0:	release	#return
000108:0x002c14a8:	release	soundObject
000108:0x002c14b0:	release	soundBuilder
000108:0x002c14b8:	rts
InventoryItem::InitImpactSoundData()
000117:0x002c1590:	moves	soundImpactType, _s'default'
000118:0x002c15a0:	ncalli	InventoryItem.ConfigIsExisting(_s'soundImpactType')
000118:0x002c15b0:	cmpi	#return, _i0
000118:0x002c15c0:	beq	0x2c15e8
000119:0x002c15c8:	icall	
000119:0x002c15d8:	moves	soundImpactType, #return
000121:0x002c15e8:	call	GetInstance()
000121:0x002c15f8:	adds	@s01, soundImpactType, _s'_Impact_LookupTable'
000121:0x002c1608:	moves	@s00, @s01
000121:0x002c1618:	call	
000121:0x002c1628:	movem	m_SoundImpactTable, #return
000121:0x002c1638:	release	#return
000121:0x002c1640:	release	#return
000121:0x002c1648:	rts
InventoryItem::PlaySound#192003()
000128:0x002c1678:	cmpcm	so, null
000128:0x002c1688:	bne	0x2c16a8
000129:0x002c1690:	movetm	#return, null
000129:0x002c16a0:	rts
000131:0x002c16a8:	ncalli	InventoryItem.GetPosition()
000131:0x002c16b0:	ncalli	SoundObject.SetPosition(#return)
000132:0x002c16c0:	ncall	GetGame()
000132:0x002c16c8:	ncalli	CGame.GetSoundScene()
000132:0x002c16d0:	movefm	[0xb5c2ca40], so
000132:0x002c16e0:	movefm	[0xb5c2ca68], sob
000132:0x002c16f0:	ncalli	AbstractSoundScene.Play3D([0xb5c2ca40], [0xb5c2ca68])
000132:0x002c1700:	movetm	wave, #return
000134:0x002c1710:	movem	#return, wave
000134:0x002c1720:	release	wave
000134:0x002c1728:	rts
000134:0x002c1730:	release	wave
000134:0x002c1738:	rts
InventoryItem::PlaySoundByAnimEvent()
000140:0x002c17b8:	ncalli	InventoryItem.GetInventoryItemType()
000140:0x002c17c0:	call	
000140:0x002c17d0:	movem	soundEvent, #return
000140:0x002c17e0:	release	#return
000141:0x002c17e8:	cmpcm	soundEvent, null
000141:0x002c17f8:	beq	0x2c1898
000143:0x002c1800:	call	
000143:0x002c1810:	movem	builder, #return
000143:0x002c1820:	release	#return
000144:0x002c1828:	call	
000144:0x002c1838:	movem	soundObject, #return
000144:0x002c1848:	release	#return
000145:0x002c1850:	cmpcm	soundObject, null
000145:0x002c1860:	beq	0x2c1888
000146:0x002c1868:	call	
000146:0x002c1880:	release	#return
000146:0x002c1888:	release	builder
000146:0x002c1890:	release	soundObject
000146:0x002c1898:	release	soundEvent
000146:0x002c18a0:	rts
InventoryItem::GetImpactSurfaceType()
000155:0x002c18f8:	imove	liquid, 0xffffffff
000156:0x002c1908:	call	
000156:0x002c1920:	move	liquid, liquid
000156:0x002c1930:	moves	#return, #return
000156:0x002c1940:	rts
000156:0x002c1948:	rts
InventoryItem::GetImpactSurfaceTypeEx()
000163:0x002c1b28:	icall	GetWorldBounds(this, mins, maxs)
000164:0x002c1b40:	subv	size, maxs, mins
000166:0x002c1b50:	movec	@c00, impact
000166:0x002c1b60:	icall	Normalized(RelativeVelocityBefore)
000166:0x002c1b70:	ncall	Length(size)
000166:0x002c1b80:	scalev	add, #return, #return
000168:0x002c1b90:	movefm	@c02, other
000168:0x002c1ba0:	icall	SafeCastType([0xb5b006f0], @c01, @c02)
000168:0x002c1bb8:	movec	@c00, impact
000168:0x002c1bc8:	addv	@v01, Position, add
000168:0x002c1bd8:	movev	@v00, @v01
000168:0x002c1be8:	movec	@c03, impact
000168:0x002c1bf8:	subv	@v02, Position, add
000168:0x002c1c08:	movev	@v01, @v02
000168:0x002c1c18:	icall	GetHitSurface(@c01, @v00, @v01, surfaceImpact)
000168:0x002c1c30:	cmpi	#return, _i0
000168:0x002c1c40:	beq	0x2c1c70
000174:0x002c1c48:	moves	#return, surfaceImpact
000174:0x002c1c58:	move	liquid, liquid
000174:0x002c1c68:	rts
000177:0x002c1c70:	ncall	GetGame()
000177:0x002c1c78:	icall	
000178:0x002c1c90:	moves	#return, surfaceImpact
000178:0x002c1ca0:	move	liquid, liquid
000178:0x002c1cb0:	rts
000178:0x002c1cb8:	move	liquid, liquid
000178:0x002c1cc8:	rts
InventoryItem::GetRuinedMeleeAmmoType()
000184:0x002c1cf8:	moves	#return, _s'MeleeSoft'
000184:0x002c1d08:	rts
000184:0x002c1d10:	rts
InventoryItem::ProcessImpactSound()
000190:0x002c1d40:	imove	liquidType, 0xffffffff
000191:0x002c1d50:	call	
000191:0x002c1d70:	move	surfaceHash, surfaceHash
000191:0x002c1d80:	move	liquidType, liquidType
000191:0x002c1d90:	move	#return, #return
000191:0x002c1da0:	move	surfaceHash, surfaceHash
000191:0x002c1db0:	rts
000191:0x002c1db8:	move	surfaceHash, surfaceHash
000191:0x002c1dc8:	rts
InventoryItem::ProcessImpactSoundEx()
000198:0x002c1ed8:	movec	@c00, extra
000198:0x002c1ee8:	movev	[0xd315e360], RelativeVelocityBefore
000198:0x002c1ef8:	ncall	Length([0xd315e360])
000198:0x002c1f08:	move	impactVelocity, #return
000199:0x002c1f18:	cmpf	impactVelocity, _f0.300000
000199:0x002c1f28:	bge	0x2c1f68
000200:0x002c1f30:	imove	#return, 0.00000
000200:0x002c1f40:	move	surfaceHash, surfaceHash
000200:0x002c1f50:	move	liquidType, liquidType
000200:0x002c1f60:	rts
000202:0x002c1f68:	ncall	GetGame()
000202:0x002c1f70:	ncalli	CGame.GetTickTime()
000202:0x002c1f78:	move	tickTime, #return
000203:0x002c1f88:	addf	@f01, m_SoundContactTickTime, SOUND_CONTACT_SKIP
000203:0x002c1f98:	move	@f00, @f01
000203:0x002c1fa8:	cmpf	@f00, tickTime
000203:0x002c1fb8:	ble	0x2c1ff8
000204:0x002c1fc0:	imove	#return, 0.00000
000204:0x002c1fd0:	move	surfaceHash, surfaceHash
000204:0x002c1fe0:	move	liquidType, liquidType
000204:0x002c1ff0:	rts
000206:0x002c1ff8:	call	
000206:0x002c2010:	move	liquidType, liquid
000206:0x002c2020:	moves	surfaceName, #return
000207:0x002c2030:	cmps	surfaceName, _s''
000207:0x002c2040:	bne	0x2c2080
000208:0x002c2048:	imove	#return, 0.00000
000208:0x002c2058:	move	surfaceHash, surfaceHash
000208:0x002c2068:	move	liquidType, liquidType
000208:0x002c2078:	rts
000219:0x002c2080:	move	m_SoundContactTickTime, tickTime
000221:0x002c2090:	ncall	Hash(surfaceName)
000221:0x002c20a0:	move	surfaceHash, #return
000222:0x002c20b0:	move	#return, impactVelocity
000222:0x002c20c0:	move	surfaceHash, surfaceHash
000222:0x002c20d0:	move	liquidType, liquidType
000222:0x002c20e0:	rts
000222:0x002c20e8:	move	surfaceHash, surfaceHash
000222:0x002c20f8:	move	liquidType, liquidType
000222:0x002c2108:	rts
PPEWetDistort::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppewetdistort.c
000025:0x002c2110:	imove	#return, 0x00000b
000025:0x002c2120:	rts
000025:0x002c2128:	rts
PPEWetDistort::GetDefaultMaterialPath()
000030:0x002c2158:	moves	#return, _s'Graphics/Materials/postprocess/wetdistort'
000030:0x002c2168:	rts
000030:0x002c2170:	rts
PPEWetDistort::RegisterMaterialParameters()
000035:0x002c2538:	call	
000036:0x002c2558:	call	
000037:0x002c2578:	call	
000038:0x002c2598:	call	
000039:0x002c25b8:	call	
000040:0x002c25d8:	call	
000041:0x002c25f8:	call	
000042:0x002c2618:	call	
000043:0x002c2638:	call	
000044:0x002c2658:	call	
000045:0x002c2678:	call	
000046:0x002c2698:	call	
000047:0x002c26b8:	call	
000048:0x002c26d8:	call	
000049:0x002c26f8:	call	
000050:0x002c2718:	call	
000051:0x002c2738:	call	
000052:0x002c2758:	call	
000052:0x002c2778:	rts
Param3<float,float,float>::Param3()
//scripts/1_Core/param.c
000096:0x002c2970:	move	param1, p1
000097:0x002c2980:	move	param2, p2
000098:0x002c2990:	move	param3, p3
000098:0x002c29a0:	rts
Param3<float,float,float>::Serialize()
000103:0x002c29a8:	icall	
000103:0x002c29b8:	cmpi	#return, _i0
000103:0x002c29c8:	beq	0x2c2a38
000103:0x002c29d0:	icall	
000103:0x002c29e0:	cmpi	#return, _i0
000103:0x002c29f0:	beq	0x2c2a38
000103:0x002c29f8:	icall	
000103:0x002c2a08:	cmpi	#return, _i0
000103:0x002c2a18:	beq	0x2c2a38
000103:0x002c2a20:	imove	#return, 0x000001
000103:0x002c2a30:	jump	0x2c2a48
000103:0x002c2a38:	imove	#return, 0x000000
000103:0x002c2a48:	rts
000103:0x002c2a50:	rts
Param3<float,float,float>::Deserializer()
000108:0x002c2a58:	icall	
000108:0x002c2a68:	cmpi	#return, _i0
000108:0x002c2a78:	beq	0x2c2ae8
000108:0x002c2a80:	icall	
000108:0x002c2a90:	cmpi	#return, _i0
000108:0x002c2aa0:	beq	0x2c2ae8
000108:0x002c2aa8:	icall	
000108:0x002c2ab8:	cmpi	#return, _i0
000108:0x002c2ac8:	beq	0x2c2ae8
000108:0x002c2ad0:	imove	#return, 0x000001
000108:0x002c2ae0:	jump	0x2c2af8
000108:0x002c2ae8:	imove	#return, 0x000000
000108:0x002c2af8:	rts
000108:0x002c2b00:	rts
PPERequester_ShockHitReaction::OnStart()
//scripts/3_Game/ppemanager\requesters\ppershockhit.c
000010:0x002c2b08:	call	
000012:0x002c2b18:	movefm	@c01, par
000012:0x002c2b28:	icall	SafeCastType([0xb5dc0800], @c00, @c01)
000012:0x002c2b40:	movec	@c02, @c00
000012:0x002c2b50:	move	m_Gauss, param1
000013:0x002c2b60:	movefm	@c01, par
000013:0x002c2b70:	icall	SafeCastType([0xb5dc0800], @c00, @c01)
000013:0x002c2b88:	movec	@c02, @c00
000013:0x002c2b98:	move	m_VignetteIntensity, param2
000014:0x002c2ba8:	movefm	@c01, par
000014:0x002c2bb8:	icall	SafeCastType([0xb5dc0800], @c00, @c01)
000014:0x002c2bd0:	movec	@c02, @c00
000014:0x002c2be0:	move	m_OverlayFactor, param3
000016:0x002c2bf0:	new	m_OverlayColor, array<float>
000016:0x002c2c10:	movefm	[0xd3156238], m_OverlayColor
000016:0x002c2c20:	icall	
000016:0x002c2c30:	movefm	[0xd3156238], m_OverlayColor
000016:0x002c2c40:	icall	
000016:0x002c2c50:	movefm	[0xd3156238], m_OverlayColor
000016:0x002c2c60:	icall	
000016:0x002c2c70:	movefm	[0xd3156238], m_OverlayColor
000016:0x002c2c80:	icall	
000017:0x002c2c90:	cmpf	m_OverlayFactor, _f0.000000
000017:0x002c2ca0:	ble	0x2c2d48
000018:0x002c2ca8:	new	m_OverlayColor, array<float>
000018:0x002c2cc8:	movefm	[0xd3156238], m_OverlayColor
000018:0x002c2cd8:	icall	
000018:0x002c2ce8:	movefm	[0xd3156238], m_OverlayColor
000018:0x002c2cf8:	icall	
000018:0x002c2d08:	movefm	[0xd3156238], m_OverlayColor
000018:0x002c2d18:	icall	
000018:0x002c2d28:	movefm	[0xd3156238], m_OverlayColor
000018:0x002c2d38:	icall	
000021:0x002c2d48:	move	val, m_Gauss
000021:0x002c2d58:	call	
000023:0x002c2d80:	move	val, m_VignetteIntensity
000023:0x002c2d90:	call	
000026:0x002c2db8:	move	val, m_OverlayFactor
000026:0x002c2dc8:	call	
000027:0x002c2df0:	movem	val, m_OverlayColor
000027:0x002c2e00:	call	
000027:0x002c2e20:	rts
BitArray::IDToIndex()
//scripts/3_Game/tools\bitarray.c
000009:0x002c2ea8:	call	IDToNumOfItems(id)
000009:0x002c2eb8:	move	m_NumOfItems, #return
000010:0x002c2ec8:	muli	@m01, m_NumOfItems, BIT_INT_SIZE
000010:0x002c2ed8:	move	@m00, @m01
000010:0x002c2ee8:	subi	@m00, id, @m00
000010:0x002c2ef8:	move	@m01, @m00
000010:0x002c2f08:	subi	index, @m01, _i1
000011:0x002c2f18:	move	#return, index
000011:0x002c2f28:	rts
000011:0x002c2f30:	rts
BitArray::IDToMask()
000016:0x002c2fb0:	call	IDToIndex(id)
000016:0x002c2fc0:	move	index, #return
000017:0x002c2fd0:	lsli	bit, _i1, index
000018:0x002c2fe0:	move	#return, bit
000018:0x002c2ff0:	rts
000018:0x002c2ff8:	rts
BitArray::CreateMaskArray()
000023:0x002c3078:	call	IDToNumOfItems(size)
000023:0x002c3088:	move	m_NumOfItems, #return
000024:0x002c3098:	new	bit_array, array<int>
000026:0x002c30b8:	imove	i, 0x000000
000026:0x002c30c8:	jump	0x2c30e8
000026:0x002c30d0:	move	@m00, i
000026:0x002c30e0:	inc	i
000026:0x002c30e8:	cmpi	i, m_NumOfItems
000026:0x002c30f8:	bgt	0x2c3118
000028:0x002c3100:	icall	
000028:0x002c3110:	jump	0x2c30d0
000031:0x002c3118:	movem	#return, bit_array
000031:0x002c3128:	release	bit_array
000031:0x002c3130:	rts
000031:0x002c3138:	release	bit_array
000031:0x002c3140:	rts
BitArray::GetBitCount()
000036:0x002c3148:	ncalli	array<int>.Count()
000036:0x002c3150:	muli	#return, #return, BIT_INT_SIZE
000036:0x002c3160:	rts
000036:0x002c3168:	rts
BitArray::IDToNumOfItems()
000042:0x002c3198:	divi	m_NumOfItems, id, BIT_INT_SIZE
000043:0x002c31a8:	modi	@m01, id, BIT_INT_SIZE
000043:0x002c31b8:	move	@m00, @m01
000043:0x002c31c8:	cmpi	@m00, _i0
000043:0x002c31d8:	bne	0x2c31f8
000043:0x002c31e0:	move	@m00, m_NumOfItems
000043:0x002c31f0:	dec	m_NumOfItems
000044:0x002c31f8:	move	#return, m_NumOfItems
000044:0x002c3208:	rts
000044:0x002c3210:	rts
BitArray::CreateArrayWithID()
000049:0x002c32b8:	call	IDToNumOfItems(id)
000049:0x002c32c8:	move	m_NumOfItems, #return
000050:0x002c32d8:	call	IDToMask(id)
000050:0x002c32e8:	move	bit, #return
000052:0x002c32f8:	new	bit_array, array<int>
000054:0x002c3318:	imove	i, 0x000000
000054:0x002c3328:	jump	0x2c3348
000054:0x002c3330:	move	@m00, i
000054:0x002c3340:	inc	i
000054:0x002c3348:	cmpi	i, m_NumOfItems
000054:0x002c3358:	bgt	0x2c3378
000056:0x002c3360:	icall	
000056:0x002c3370:	jump	0x2c3330
000058:0x002c3378:	icall	
000059:0x002c3388:	movem	#return, bit_array
000059:0x002c3398:	release	bit_array
000059:0x002c33a0:	rts
000059:0x002c33a8:	release	bit_array
000059:0x002c33b0:	rts
BitArray::IsMaskContainID()
000064:0x002c34c0:	call	IDToNumOfItems(id)
000064:0x002c34d0:	move	@m00, #return
000064:0x002c34e0:	ncalli	array<int>.Count()
000064:0x002c34e8:	cmpi	@m00, #return
000064:0x002c34f8:	ble	0x2c3520
000066:0x002c3500:	imove	#return, 0x000000
000066:0x002c3510:	rts
000066:0x002c3518:	jump	0x2c35f0
000070:0x002c3520:	call	IDToMask(id)
000070:0x002c3530:	move	index_mask, #return
000071:0x002c3540:	call	IDToNumOfItems(id)
000071:0x002c3550:	move	num_of_items, #return
000072:0x002c3560:	icall	
000072:0x002c3570:	move	array_mask, #return
000074:0x002c3580:	andi	@m01, index_mask, array_mask
000074:0x002c3590:	move	@m00, @m01
000074:0x002c35a0:	cmpi	@m00, _i0
000074:0x002c35b0:	beq	0x2c35d8
000076:0x002c35b8:	imove	#return, 0x000001
000076:0x002c35c8:	rts
000076:0x002c35d0:	jump	0x2c35f0
000080:0x002c35d8:	imove	#return, 0x000000
000080:0x002c35e8:	rts
000080:0x002c35f0:	rts
BitArray::AddIDToMask()
000087:0x002c36a0:	call	IDToNumOfItems(id)
000087:0x002c36b0:	move	@m00, #return
000087:0x002c36c0:	ncalli	array<int>.Count()
000087:0x002c36c8:	cmpi	@m00, #return
000087:0x002c36d8:	ble	0x2c3700
000089:0x002c36e0:	imove	#return, 0x000000
000089:0x002c36f0:	rts
000089:0x002c36f8:	jump	0x2c3788
000093:0x002c3700:	call	IDToNumOfItems(id)
000093:0x002c3710:	move	num_of_items, #return
000094:0x002c3720:	call	IDToMask(id)
000094:0x002c3730:	move	bit, #return
000095:0x002c3740:	icall	
000095:0x002c3750:	ori	new_mask, #return, bit
000096:0x002c3760:	icall	
000097:0x002c3770:	imove	#return, 0x000001
000097:0x002c3780:	rts
000097:0x002c3788:	rts
Hit_Concrete::Hit_Concrete()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_concrete.c
000005:0x002c3790:	call	
000006:0x002c37a0:	call	
000007:0x002c37b0:	call	
000009:0x002c37c0:	imove	m_AngledEnter, 0.50000
000009:0x002c37d0:	rts
EffVomitBlood::EffVomitBlood()
//scripts/3_Game/effects\effectparticle\vomitblood.c
000005:0x002c37d8:	call	
000005:0x002c37e8:	rts
AITargetCallbacks::GetHeadPositionWS()
//scripts/3_Game/systems\ai\aitarget_callbacks.c
000010:0x002c37f0:	movev	#return, Zero
000010:0x002c3800:	rts
000010:0x002c3808:	rts
AITargetCallbacks::GetVisionPointPositionWS()
000011:0x002c3810:	movev	#return, Zero
000011:0x002c3820:	rts
000011:0x002c3828:	rts
AITargetCallbacks::GetMaxVisionRangeModifier()
000013:0x002c3830:	imove	#return, 1.00000
000013:0x002c3840:	rts
000013:0x002c3848:	rts
PPERequester_MenuEffects::SetBlurIntensity()
//scripts/3_Game/ppemanager\requesters\ppermenueffects.c
000005:0x002c3850:	call	
000005:0x002c3878:	rts
PPERequester_MenuEffects::SetVignetteIntensity()
000010:0x002c3880:	call	
000011:0x002c38a8:	new	@c01, array<float>
000011:0x002c38c8:	pushc	@c01
000011:0x002c38d0:	icall	
000011:0x002c38e0:	icall	
000011:0x002c38f0:	icall	
000011:0x002c3900:	icall	
000011:0x002c3910:	call	
000011:0x002c3930:	popc	@c01
000011:0x002c3938:	release	@c01
000011:0x002c3940:	rts
EffBulletImpactBase::EffBulletImpactBase()
//scripts/3_Game/effects\effectparticle\bulletimpactbase.c
000035:0x002c3970:	imove	MIN_SCALING_PARAM, 0.10000
000035:0x002c3980:	imove	m_ParticleEnter, 0xffffffff
000035:0x002c3990:	imove	m_ParticleExit, 0xffffffff
000035:0x002c39a0:	imove	m_ParticleRicochet, 0xffffffff
000035:0x002c39b0:	imove	m_EnterSplashCoef, 0.00300
000035:0x002c39c0:	imove	m_ExitSplashCoef, 0.00200
000035:0x002c39d0:	imove	m_RicochetSplashCoef, 0.00200
000035:0x002c39e0:	imove	m_EnterAngledSplashCoef, 0.01000
000035:0x002c39f0:	imove	m_AngledEnter, 0.40000
000035:0x002c3a00:	rts
EffBulletImpactBase::SetEnterParticle()
000047:0x002c3a08:	move	m_ParticleEnter, id
000047:0x002c3a18:	rts
EffBulletImpactBase::SetExitParticle()
000052:0x002c3a20:	move	m_ParticleExit, id
000052:0x002c3a30:	rts
EffBulletImpactBase::SetRicochetParticle()
000057:0x002c3a38:	move	m_ParticleRicochet, id
000057:0x002c3a48:	rts
EffBulletImpactBase::SetSingleParticle()
000062:0x002c3a50:	call	
000063:0x002c3a60:	call	
000064:0x002c3a70:	call	
000064:0x002c3a80:	rts
EffBulletImpactBase::SetAngledEnterValue()
000069:0x002c3a88:	move	m_AngledEnter, f
000069:0x002c3a98:	rts
EffBulletImpactBase::EvaluateEffect()
000074:0x002c3ac8:	movem	m_DirectHit, directHit
000075:0x002c3ad8:	movev	m_Pos, pos
000076:0x002c3ae8:	move	m_ImpactType, impact_type
000077:0x002c3af8:	move	m_ComponentIndex, componentIndex
000078:0x002c3b08:	movev	m_SurfNormal, surfNormal
000079:0x002c3b18:	movev	m_ExitPos, exitPos
000080:0x002c3b28:	movev	m_InSpeed, inSpeed
000081:0x002c3b38:	movev	m_OutSpeed, outSpeed
000082:0x002c3b48:	moves	m_AmmoType, ammoType
000083:0x002c3b58:	ncall	GetGame()
000083:0x002c3b60:	adds	@s02, _s'CfgAmmo ', ammoType
000083:0x002c3b70:	moves	@s01, @s02
000083:0x002c3b80:	adds	@s01, @s01, _s' weight'
000083:0x002c3b90:	moves	@s00, @s01
000083:0x002c3ba0:	ncalli	CGame.ConfigGetFloat(@s00)
000083:0x002c3bb0:	move	m_Weight, #return
000085:0x002c3bc0:	movev	[0xd315e360], m_InSpeed
000085:0x002c3bd0:	ncall	Length([0xd315e360])
000085:0x002c3be0:	movev	[0xd315e360], m_OutSpeed
000085:0x002c3bf0:	push	#return
000085:0x002c3bf8:	ncall	Length([0xd315e360])
000085:0x002c3c08:	move	@f01, #return
000085:0x002c3c18:	pop	#return
000085:0x002c3c20:	move	weight, m_Weight
000085:0x002c3c30:	call	
000085:0x002c3c50:	move	m_StoppingForce, #return
000085:0x002c3c60:	rts
EffBulletImpactBase::CalculateStoppingForce()
000090:0x002c3cb8:	cmpi	m_ImpactType, MELEE
000090:0x002c3cc8:	bne	0x2c3cf8
000092:0x002c3cd0:	icall	RandomFloat(_f50.000000, _f100.000000)
000092:0x002c3ce0:	move	#return, #return
000092:0x002c3cf0:	rts
000095:0x002c3cf8:	divf	projectile_weight_coef, weight, DEFAULT_PROJECTILE_WEIGHT
000097:0x002c3d08:	subf	@f01, in_speedf, out_speedf
000097:0x002c3d18:	move	@f00, @f01
000097:0x002c3d28:	mulf	stopping_force, @f00, projectile_weight_coef
000099:0x002c3d38:	move	#return, stopping_force
000099:0x002c3d48:	rts
000099:0x002c3d50:	rts
EffBulletImpactBase::OnEnterCalculations()
000105:0x002c3f38:	mulf	velocity_min, m_StoppingForce, m_EnterSplashCoef
000106:0x002c3f48:	mulf	velocity_max, m_StoppingForce, m_EnterSplashCoef
000107:0x002c3f58:	mulf	size, m_StoppingForce, m_EnterSplashCoef
000108:0x002c3f68:	mulf	birth_rate, m_StoppingForce, m_EnterSplashCoef
000109:0x002c3f78:	move	air_resistance, velocity_min
000110:0x002c3f88:	mulf	lifetime, m_StoppingForce, m_EnterSplashCoef
000111:0x002c3f98:	mulf	lifetime_rnd, m_StoppingForce, m_EnterSplashCoef
000113:0x002c3fa8:	cmps	m_AmmoType, _s'Bullet_12GaugePellets'
000113:0x002c3fb8:	bne	0x2c4020
000115:0x002c3fc0:	imove	@f00, 0.50000
000115:0x002c3fd0:	mulf	birth_rate, birth_rate, @f00
000116:0x002c3fe0:	imove	@f00, 2.00000
000116:0x002c3ff0:	mulf	velocity_min, velocity_min, @f00
000117:0x002c4000:	imove	@f00, 2.00000
000117:0x002c4010:	mulf	velocity_max, velocity_max, @f00
000121:0x002c4020:	cmpf	velocity_min, _f0.750000
000121:0x002c4030:	bge	0x2c4048
000122:0x002c4038:	imove	velocity_min, 0.75000
000124:0x002c4048:	cmpf	size, _f0.750000
000124:0x002c4058:	bge	0x2c4070
000125:0x002c4060:	imove	size, 0.75000
000127:0x002c4070:	cmpf	lifetime, _f0.500000
000127:0x002c4080:	bge	0x2c4098
000128:0x002c4088:	imove	lifetime, 0.50000
000130:0x002c4098:	cmpf	lifetime_rnd, _f0.500000
000130:0x002c40a8:	bge	0x2c40c0
000131:0x002c40b0:	imove	lifetime_rnd, 0.50000
000133:0x002c40c0:	cmpf	velocity_max, _f1.000000
000133:0x002c40d0:	bge	0x2c40e8
000134:0x002c40d8:	imove	velocity_max, 1.00000
000145:0x002c40e8:	call	
000146:0x002c4100:	call	
000147:0x002c4118:	call	
000148:0x002c4130:	call	
000149:0x002c4148:	call	
000150:0x002c4160:	call	
000151:0x002c4178:	call	
000152:0x002c4190:	call	
000152:0x002c41a8:	rts
EffBulletImpactBase::OnExitCalculations()
000157:0x002c4250:	mulf	@f01, outSpeedf, m_ExitSplashCoef
000157:0x002c4260:	move	@f00, @f01
000157:0x002c4270:	addf	velocity_min, _f1.000000, @f00
000158:0x002c4280:	mulf	@f01, outSpeedf, m_ExitSplashCoef
000158:0x002c4290:	move	@f00, @f01
000158:0x002c42a0:	addf	velocity_max, _f1.000000, @f00
000159:0x002c42b0:	mulf	@f01, outSpeedf, m_ExitSplashCoef
000159:0x002c42c0:	move	@f00, @f01
000159:0x002c42d0:	addf	size, _f1.000000, @f00
000160:0x002c42e0:	mulf	@f01, outSpeedf, m_ExitSplashCoef
000160:0x002c42f0:	move	@f00, @f01
000160:0x002c4300:	addf	birth_rate, _f1.000000, @f00
000162:0x002c4310:	cmpf	velocity_min, MIN_SCALING_PARAM
000162:0x002c4320:	bge	0x2c4338
000163:0x002c4328:	move	velocity_min, MIN_SCALING_PARAM
000165:0x002c4338:	cmpf	size, MIN_SCALING_PARAM
000165:0x002c4348:	bge	0x2c4360
000166:0x002c4350:	move	size, MIN_SCALING_PARAM
000168:0x002c4360:	cmpf	birth_rate, MIN_SCALING_PARAM
000168:0x002c4370:	bge	0x2c4388
000169:0x002c4378:	move	birth_rate, MIN_SCALING_PARAM
000171:0x002c4388:	call	
000172:0x002c43a0:	call	
000173:0x002c43b8:	call	
000174:0x002c43d0:	call	
000174:0x002c43e8:	rts
EffBulletImpactBase::OnRicochetCalculations()
000179:0x002c4490:	mulf	@f01, m_StoppingForce, m_RicochetSplashCoef
000179:0x002c44a0:	move	@f00, @f01
000179:0x002c44b0:	addf	velocity_min, MIN_SCALING_PARAM, @f00
000180:0x002c44c0:	mulf	@f01, m_StoppingForce, m_RicochetSplashCoef
000180:0x002c44d0:	move	@f00, @f01
000180:0x002c44e0:	addf	velocity_max, MIN_SCALING_PARAM, @f00
000181:0x002c44f0:	mulf	@f01, m_StoppingForce, m_RicochetSplashCoef
000181:0x002c4500:	move	@f00, @f01
000181:0x002c4510:	addf	size, MIN_SCALING_PARAM, @f00
000182:0x002c4520:	mulf	@f01, m_StoppingForce, m_RicochetSplashCoef
000182:0x002c4530:	move	@f00, @f01
000182:0x002c4540:	addf	birth_rate, MIN_SCALING_PARAM, @f00
000184:0x002c4550:	cmpf	velocity_min, MIN_SCALING_PARAM
000184:0x002c4560:	bge	0x2c4578
000185:0x002c4568:	move	velocity_min, MIN_SCALING_PARAM
000187:0x002c4578:	cmpf	size, MIN_SCALING_PARAM
000187:0x002c4588:	bge	0x2c45a0
000188:0x002c4590:	move	size, MIN_SCALING_PARAM
000190:0x002c45a0:	cmpf	birth_rate, MIN_SCALING_PARAM
000190:0x002c45b0:	bge	0x2c45c8
000191:0x002c45b8:	move	birth_rate, MIN_SCALING_PARAM
000193:0x002c45c8:	call	
000194:0x002c45e0:	call	
000195:0x002c45f8:	call	
000196:0x002c4610:	call	
000196:0x002c4628:	rts
EffBulletImpactBase::OnEnterAngledCalculations()
000201:0x002c46d0:	mulf	@f01, m_StoppingForce, m_EnterAngledSplashCoef
000201:0x002c46e0:	move	@f00, @f01
000201:0x002c46f0:	addf	velocity_min, MIN_SCALING_PARAM, @f00
000202:0x002c4700:	mulf	@f01, m_StoppingForce, m_EnterAngledSplashCoef
000202:0x002c4710:	move	@f00, @f01
000202:0x002c4720:	addf	velocity_max, MIN_SCALING_PARAM, @f00
000203:0x002c4730:	mulf	@f01, m_StoppingForce, m_EnterAngledSplashCoef
000203:0x002c4740:	move	@f00, @f01
000203:0x002c4750:	addf	size, MIN_SCALING_PARAM, @f00
000204:0x002c4760:	mulf	@f01, m_StoppingForce, m_EnterAngledSplashCoef
000204:0x002c4770:	move	@f00, @f01
000204:0x002c4780:	addf	birth_rate, MIN_SCALING_PARAM, @f00
000206:0x002c4790:	cmpf	velocity_min, MIN_SCALING_PARAM
000206:0x002c47a0:	bge	0x2c47b8
000207:0x002c47a8:	move	velocity_min, MIN_SCALING_PARAM
000209:0x002c47b8:	cmpf	size, MIN_SCALING_PARAM
000209:0x002c47c8:	bge	0x2c47e0
000210:0x002c47d0:	move	size, MIN_SCALING_PARAM
000212:0x002c47e0:	cmpf	birth_rate, MIN_SCALING_PARAM
000212:0x002c47f0:	bge	0x2c4808
000213:0x002c47f8:	move	birth_rate, MIN_SCALING_PARAM
000215:0x002c4808:	call	
000216:0x002c4820:	call	
000217:0x002c4838:	call	
000218:0x002c4850:	call	
000218:0x002c4868:	rts
EffBulletImpactBase::Event_OnStarted()
000225:0x002c4dc8:	movev	[0xd315e360], m_OutSpeed
000225:0x002c4dd8:	ncall	Length([0xd315e360])
000225:0x002c4de8:	move	outSpeedf, #return
000227:0x002c4df8:	call	GetInstance()
000227:0x002c4e08:	movem	gPM, #return
000227:0x002c4e18:	release	#return
000229:0x002c4e20:	cmpi	m_ImpactType, RICOCHET
000229:0x002c4e30:	bne	0x2c4f10
000231:0x002c4e38:	move	particle_id, m_ParticleRicochet
000231:0x002c4e48:	movev	global_pos, m_Pos
000231:0x002c4e58:	call	
000231:0x002c4e70:	movem	p, #return
000231:0x002c4e80:	release	#return
000233:0x002c4e88:	cmpcm	p, null
000233:0x002c4e98:	beq	0x2c4f08
000235:0x002c4ea0:	icall	VectorToAngles(m_OutSpeed)
000235:0x002c4eb0:	movev	particle_orientation, #return
000236:0x002c4ec0:	addv	@v00, particle_orientation, _v<0.000000,-90.000000,0.000000>
000236:0x002c4ed0:	movev	particle_orientation, @v00
000237:0x002c4ee0:	ncalli	Particle.SetOrientation(particle_orientation)
000239:0x002c4ef0:	call	
000239:0x002c4f08:	jump	0x2c5280
000244:0x002c4f10:	move	particle_id, m_ParticleEnter
000244:0x002c4f20:	movev	global_pos, m_Pos
000244:0x002c4f30:	call	
000244:0x002c4f48:	movem	p, #return
000244:0x002c4f58:	release	#return
000246:0x002c4f60:	cmpcm	p, null
000246:0x002c4f70:	beq	0x2c5008
000248:0x002c4f78:	cmpv	m_SurfNormal, INVALID
000248:0x002c4f88:	beq	0x2c4fd8
000250:0x002c4f90:	icall	VectorToAngles(m_SurfNormal)
000250:0x002c4fa0:	movev	particle_orientation, #return
000251:0x002c4fb0:	addv	@v00, particle_orientation, _v<0.000000,270.000000,0.000000>
000251:0x002c4fc0:	movev	particle_orientation, @v00
000251:0x002c4fd0:	jump	0x2c4fe8
000255:0x002c4fd8:	movev	particle_orientation, _v<0.000000,0.000000,0.000000>
000258:0x002c4fe8:	ncalli	Particle.SetOrientation(particle_orientation)
000260:0x002c4ff8:	call	
000263:0x002c5008:	cmpf	outSpeedf, _f0.000000
000263:0x002c5018:	ble	0x2c5110
000263:0x002c5020:	cmpv	m_SurfNormal, INVALID
000263:0x002c5030:	beq	0x2c5110
000265:0x002c5038:	move	particle_id, m_ParticleExit
000265:0x002c5048:	movev	global_pos, m_ExitPos
000265:0x002c5058:	call	
000265:0x002c5070:	movem	p, #return
000265:0x002c5080:	release	#return
000267:0x002c5088:	cmpcm	p, null
000267:0x002c5098:	beq	0x2c5108
000269:0x002c50a0:	icall	VectorToAngles(m_OutSpeed)
000269:0x002c50b0:	movev	particle_orientation, #return
000270:0x002c50c0:	addv	@v00, particle_orientation, _v<0.000000,-90.000000,0.000000>
000270:0x002c50d0:	movev	particle_orientation, @v00
000271:0x002c50e0:	ncalli	Particle.SetOrientation(particle_orientation)
000273:0x002c50f0:	call	
000273:0x002c5108:	jump	0x2c5280
000278:0x002c5110:	cmpv	m_SurfNormal, INVALID
000278:0x002c5120:	beq	0x2c5280
000280:0x002c5128:	icall	Normalized(m_SurfNormal)
000280:0x002c5138:	movev	surfNormalN, #return
000281:0x002c5148:	icall	Normalized(m_InSpeed)
000281:0x002c5158:	movev	inSpeedN, #return
000282:0x002c5168:	addv	bounce_ori, surfNormalN, inSpeedN
000284:0x002c5178:	call	Dot(bounce_ori, surfNormalN)
000284:0x002c5190:	move	dot, #return
000286:0x002c51a0:	cmpf	dot, m_AngledEnter
000286:0x002c51b0:	ble	0x2c5280
000288:0x002c51b8:	move	particle_id, m_ParticleRicochet
000288:0x002c51c8:	movev	global_pos, m_Pos
000288:0x002c51d8:	call	
000288:0x002c51f0:	movem	p, #return
000288:0x002c5200:	release	#return
000290:0x002c5208:	cmpcm	p, null
000290:0x002c5218:	beq	0x2c5280
000292:0x002c5220:	icall	VectorToAngles(bounce_ori)
000292:0x002c5230:	movev	particle_orientation, #return
000293:0x002c5240:	addv	@v00, particle_orientation, _v<0.000000,-90.000000,0.000000>
000293:0x002c5250:	movev	particle_orientation, @v00
000294:0x002c5260:	ncalli	Particle.SetOrientation(particle_orientation)
000296:0x002c5270:	call	
000303:0x002c5280:	cmpcm	p, null
000303:0x002c5290:	beq	0x2c52a8
000305:0x002c5298:	call	
000311:0x002c52a8:	ncall	Type(this)
000311:0x002c52b8:	movea	@m00, #return
000311:0x002c52c8:	cmpi	@m00, _T(Hit_MeatBones)
000311:0x002c52d8:	beq	0x2c55b0
000313:0x002c52e0:	ncall	GetGame()
000313:0x002c52e8:	ncalli	CGame.GetCurrentCameraPosition()
000313:0x002c52f0:	movev	camera_pos, #return
000314:0x002c5300:	movev	[0xd315e4b8], m_Pos
000314:0x002c5310:	ncall	Distance(camera_pos, [0xd315e4b8])
000314:0x002c5320:	move	distance, #return
000317:0x002c5330:	mulf	scaling_by_distance, distance, _f0.010000
000320:0x002c5340:	ncall	GetCurrentFOV()
000320:0x002c5348:	move	current_FOV, #return
000321:0x002c5358:	call	GetDayZGame()
000321:0x002c5368:	call	GetUserFOVFromConfig()
000321:0x002c5378:	move	config_FOV, #return
000322:0x002c5388:	divf	FOV_scale, current_FOV, config_FOV
000323:0x002c5398:	mulf	@f01, scaling_by_distance, FOV_scale
000323:0x002c53a8:	move	@f00, @f01
000323:0x002c53b8:	addf	@f00, _f1.000000, @f00
000323:0x002c53c8:	move	scaling_by_distance, @f00
000325:0x002c53d8:	cmpf	scaling_by_distance, _f1.100000
000325:0x002c53e8:	ble	0x2c55b0
000327:0x002c53f0:	movev	global_pos, m_Pos
000327:0x002c5400:	call	
000327:0x002c5418:	movem	p_distant, #return
000327:0x002c5428:	release	#return
000329:0x002c5430:	icall	VectorToAngles(m_SurfNormal)
000329:0x002c5440:	movev	particle_orientation, #return
000330:0x002c5450:	ifv	@f00, particle_orientation[0x000001]
000330:0x002c5460:	addf	@f00, @f00, _f270.000000
000330:0x002c5470:	itv	particle_orientation[0x000001], @f00
000331:0x002c5480:	ncalli	Particle.SetOrientation(particle_orientation)
000333:0x002c5490:	subf	@f01, scaling_by_distance, _f0.500000
000333:0x002c54a0:	move	@f00, @f01
000333:0x002c54b0:	call	
000334:0x002c54c8:	mulf	@f01, scaling_by_distance, _f0.100000
000334:0x002c54d8:	move	@f00, @f01
000334:0x002c54e8:	call	
000335:0x002c5500:	mulf	@f01, scaling_by_distance, _f0.100000
000335:0x002c5510:	move	@f00, @f01
000335:0x002c5520:	call	
000336:0x002c5538:	mulf	@f01, scaling_by_distance, _f0.300000
000336:0x002c5548:	move	@f00, @f01
000336:0x002c5558:	call	
000337:0x002c5570:	mulf	@f01, scaling_by_distance, _f0.300000
000337:0x002c5580:	move	@f00, @f01
000337:0x002c5590:	call	
000337:0x002c55a8:	release	p_distant
000337:0x002c55b0:	release	p
000337:0x002c55b8:	release	gPM
000337:0x002c55c0:	rts
PPERain::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\pperain.c
000035:0x002c55c8:	imove	#return, 0x000007
000035:0x002c55d8:	rts
000035:0x002c55e0:	rts
PPERain::GetDefaultMaterialPath()
000040:0x002c5610:	moves	#return, _s'Graphics/Materials/postprocess/rain'
000040:0x002c5620:	rts
000040:0x002c5628:	rts
PPERain::RegisterMaterialParameters()
000045:0x002c59a0:	call	
000046:0x002c59c0:	call	
000047:0x002c59e0:	call	
000048:0x002c5a00:	call	
000049:0x002c5a20:	call	
000050:0x002c5a40:	call	
000051:0x002c5a60:	call	
000052:0x002c5a80:	call	
000053:0x002c5aa0:	call	
000054:0x002c5ac0:	call	
000055:0x002c5ae0:	call	
000056:0x002c5b00:	call	
000057:0x002c5b20:	call	
000058:0x002c5b40:	call	
000059:0x002c5b60:	call	
000060:0x002c5b80:	call	
000061:0x002c5ba0:	call	
000062:0x002c5bc0:	call	
000063:0x002c5be0:	call	
000063:0x002c5c00:	rts
PPERequester_FlashbangEffects::OnStart()
//scripts/3_Game/ppemanager\requesters\pperflashbangeffects.c
000010:0x002c5c08:	cmpi	m_IsRunning, _i0
000010:0x002c5c18:	bne	0x2c5d08
000012:0x002c5c20:	ncall	GetGame()
000012:0x002c5c28:	ncalli	CGame.GetMission()
000012:0x002c5c30:	cmpc	#return, null
000012:0x002c5c40:	beq	0x2c5d00
000012:0x002c5c48:	ncall	GetGame()
000012:0x002c5c50:	ncalli	CGame.GetMission()
000012:0x002c5c58:	call	
000012:0x002c5c68:	cmpcm	#return, null
000012:0x002c5c78:	beq	0x2c5d00
000013:0x002c5c80:	ncall	GetGame()
000013:0x002c5c88:	ncalli	CGame.GetMission()
000013:0x002c5c90:	call	
000013:0x002c5ca0:	new	@c01, array<int>
000013:0x002c5cc0:	pushc	@c01
000013:0x002c5cc8:	icall	
000013:0x002c5cd8:	call	
000013:0x002c5ce8:	popc	@c01
000013:0x002c5cf0:	release	@c01
000013:0x002c5cf8:	release	#return
000013:0x002c5d00:	release	#return
000016:0x002c5d08:	call	
000016:0x002c5d18:	rts
PPERequester_FlashbangEffects::OnStop()
000021:0x002c5d20:	call	
000023:0x002c5d30:	imove	m_Intensity, 0.00000
000024:0x002c5d40:	imove	m_Exposure, 0.00000
000026:0x002c5d50:	ncall	GetGame()
000026:0x002c5d58:	ncalli	CGame.GetMission()
000026:0x002c5d60:	cmpc	#return, null
000026:0x002c5d70:	beq	0x2c5e30
000026:0x002c5d78:	ncall	GetGame()
000026:0x002c5d80:	ncalli	CGame.GetMission()
000026:0x002c5d88:	call	
000026:0x002c5d98:	cmpcm	#return, null
000026:0x002c5da8:	beq	0x2c5e30
000027:0x002c5db0:	ncall	GetGame()
000027:0x002c5db8:	ncalli	CGame.GetMission()
000027:0x002c5dc0:	call	
000027:0x002c5dd0:	new	@c01, array<int>
000027:0x002c5df0:	pushc	@c01
000027:0x002c5df8:	icall	
000027:0x002c5e08:	call	
000027:0x002c5e18:	popc	@c01
000027:0x002c5e20:	release	@c01
000027:0x002c5e28:	release	#return
000027:0x002c5e30:	release	#return
000027:0x002c5e38:	rts
PPERequester_FlashbangEffects::OnUpdate()
000032:0x002c5e68:	call	
000034:0x002c5e78:	ncall	GetGame()
000034:0x002c5e80:	cmpc	#return, null
000034:0x002c5e90:	beq	0x2c5f90
000034:0x002c5e98:	ncall	GetGame()
000034:0x002c5ea0:	ncalli	CGame.GetMission()
000034:0x002c5ea8:	cmpc	#return, null
000034:0x002c5eb8:	beq	0x2c5f90
000034:0x002c5ec0:	ncall	GetGame()
000034:0x002c5ec8:	ncalli	CGame.GetMission()
000034:0x002c5ed0:	call	
000034:0x002c5ee0:	cmpcm	#return, null
000034:0x002c5ef0:	beq	0x2c5f90
000036:0x002c5ef8:	subf	@f01, _f1.000000, m_Intensity
000036:0x002c5f08:	move	@f00, @f01
000036:0x002c5f18:	new	par, Param1<float>
000037:0x002c5f40:	ncall	GetGame()
000037:0x002c5f48:	ncalli	CGame.GetMission()
000037:0x002c5f50:	call	
000037:0x002c5f60:	call	
000037:0x002c5f80:	release	#return
000037:0x002c5f88:	release	par
000037:0x002c5f90:	release	#return
000037:0x002c5f98:	rts
PPERequester_FlashbangEffects::SetFlashbangIntensity()
000043:0x002c5ff8:	move	m_Intensity, intensity
000044:0x002c6008:	new	overlay_color, array<float>
000044:0x002c6028:	icall	
000044:0x002c6038:	icall	
000044:0x002c6048:	icall	
000044:0x002c6058:	icall	
000045:0x002c6068:	cmpf	daytime_toggle, _f5.000000
000045:0x002c6078:	bgt	0x2c60d0
000047:0x002c6080:	mulf	@f02, intensity, daytime_toggle
000047:0x002c6090:	move	@f01, @f02
000047:0x002c60a0:	icall	Clamp(@f01, _f0.000000, EXPOSURE_MAX)
000047:0x002c60b8:	move	m_Exposure, #return
000047:0x002c60c8:	jump	0x2c6138
000051:0x002c60d0:	call	EaseInQuart(intensity)
000051:0x002c60e0:	move	m_Exposure, #return
000052:0x002c60f0:	mulf	@f02, EXPOSURE_MAX, m_Exposure
000052:0x002c6100:	move	@f01, @f02
000052:0x002c6110:	icall	Clamp(@f01, _f0.000000, EXPOSURE_MAX)
000052:0x002c6128:	move	m_Exposure, #return
000054:0x002c6138:	icall	
000057:0x002c6148:	call	
000059:0x002c6170:	call	
000060:0x002c6198:	call	
000062:0x002c61b8:	move	val, m_Exposure
000062:0x002c61c8:	call	
000062:0x002c61f0:	release	overlay_color
000062:0x002c61f8:	rts
JsonFileLoader<ObjectSpawnerJson>::JsonLoadFile()
//scripts/3_Game/tools\jsonfileloader.c
000007:0x002c6600:	icall	FileExist(filename)
000007:0x002c6610:	cmpi	#return, _i0
000007:0x002c6620:	beq	0x2c6760
000013:0x002c6628:	icall	OpenFile(filename, _i1)
000013:0x002c6638:	movea	handle, #return
000014:0x002c6648:	cmpc	handle, _i0
000014:0x002c6658:	bne	0x2c6678
000015:0x002c6660:	movem	data, data
000015:0x002c6670:	rts
000018:0x002c6678:	icall	FGets(handle, line_content)
000018:0x002c6688:	move	@m00, #return
000018:0x002c6698:	cmpi	@m00, _i0
000018:0x002c66a8:	blt	0x2c66d8
000020:0x002c66b0:	moves	@s00, line_content
000020:0x002c66c0:	adds	file_content, file_content, @s00
000020:0x002c66d0:	jump	0x2c6678
000023:0x002c66d8:	icall	CloseFile(handle)
000025:0x002c66e8:	cmpcm	m_Serializer, null
000025:0x002c66f8:	bne	0x2c6720
000026:0x002c6700:	new	m_Serializer, JsonSerializer
000028:0x002c6720:	icall	
000028:0x002c6738:	cmpi	#return, _i0
000028:0x002c6748:	bne	0x2c6760
000029:0x002c6750:	call	Error(error)
000029:0x002c6760:	movem	data, data
000029:0x002c6770:	rts
JsonFileLoader<ObjectSpawnerJson>::JsonSaveFile()
000036:0x002c67c8:	cmpcm	m_Serializer, null
000036:0x002c67d8:	bne	0x2c6800
000037:0x002c67e0:	new	m_Serializer, JsonSerializer
000039:0x002c6800:	icall	
000041:0x002c6818:	icall	OpenFile(filename, _i4)
000041:0x002c6828:	movea	handle, #return
000042:0x002c6838:	cmpc	handle, _i0
000042:0x002c6848:	bne	0x2c6858
000043:0x002c6850:	rts
000045:0x002c6858:	icall	FPrint(handle, file_content)
000047:0x002c6868:	icall	CloseFile(handle)
000047:0x002c6878:	rts
JsonFileLoader<ObjectSpawnerJson>::JsonLoadData()
000053:0x002c68a8:	cmpcm	m_Serializer, null
000053:0x002c68b8:	bne	0x2c68e0
000054:0x002c68c0:	new	m_Serializer, JsonSerializer
000056:0x002c68e0:	icall	
000056:0x002c68f8:	cmpi	#return, _i0
000056:0x002c6908:	bne	0x2c6920
000057:0x002c6910:	call	Error(error)
000057:0x002c6920:	movem	data, data
000057:0x002c6930:	rts
JsonFileLoader<ObjectSpawnerJson>::JsonMakeData()
000063:0x002c6960:	cmpcm	m_Serializer, null
000063:0x002c6970:	bne	0x2c6998
000064:0x002c6978:	new	m_Serializer, JsonSerializer
000066:0x002c6998:	icall	
000067:0x002c69b0:	moves	#return, string_data
000067:0x002c69c0:	rts
000067:0x002c69c8:	rts
ObjectSpawnerHandler::SpawnObjects()
//scripts/3_Game/objectspawner.c
000008:0x002c6a70:	call	GetObjectSpawnersArr()
000008:0x002c6a80:	cmpcm	#return, null
000008:0x002c6a90:	beq	0x2c6ca8
000008:0x002c6a98:	call	GetObjectSpawnersArr()
000008:0x002c6aa8:	ncalli	array<string>.Count()
000008:0x002c6ab0:	move	@m00, #return
000008:0x002c6ac0:	cmpi	@m00, _i0
000008:0x002c6ad0:	ble	0x2c6ca8
000010:0x002c6ad8:	call	GetObjectSpawnersArr()
000010:0x002c6ae8:	movem	arr, #return
000010:0x002c6af8:	release	#return
000011:0x002c6b00:	ncalli	array<string>.Count()
000011:0x002c6b08:	move	#cnt, #return
000011:0x002c6b18:	imove	#key, 0x000000
000011:0x002c6b28:	jump	0x2c6b38
000011:0x002c6b30:	inc	#key
000011:0x002c6b38:	cmpi	#key, #cnt
000011:0x002c6b48:	bge	0x2c6ca0
000011:0x002c6b50:	icall	
000011:0x002c6b60:	moves	spawner_json, #return
000013:0x002c6b70:	adds	path, _s'$mission:', spawner_json
000015:0x002c6b80:	icall	FileExist(path)
000015:0x002c6b90:	cmpi	#return, _i0
000015:0x002c6ba0:	beq	0x2c6c98
000019:0x002c6ba8:	call	JsonLoadFile(path, spawner)
000019:0x002c6bc0:	movem	spawner, data
000019:0x002c6bd0:	release	data
000023:0x002c6bd8:	movefm	@c00, spawner
000023:0x002c6be8:	movem	#array, Objects
000023:0x002c6bf8:	ncalli	array<@ITEM_SpawnerObject>.Count()
000023:0x002c6c00:	move	#cnt, #return
000023:0x002c6c10:	imove	#key, 0x000000
000023:0x002c6c20:	jump	0x2c6c30
000023:0x002c6c28:	inc	#key
000023:0x002c6c30:	cmpi	#key, #cnt
000023:0x002c6c40:	bge	0x2c6c80
000023:0x002c6c48:	icall	
000023:0x002c6c58:	movetm	o, #return
000025:0x002c6c68:	call	SpawnObject(o)
000025:0x002c6c78:	jump	0x2c6c28
000025:0x002c6c80:	release	#array
000025:0x002c6c88:	release	o
000025:0x002c6c90:	release	spawner
000025:0x002c6c98:	jump	0x2c6b30
000025:0x002c6ca0:	release	arr
000025:0x002c6ca8:	release	#return
000025:0x002c6cb0:	release	#return
000025:0x002c6cb8:	rts
ObjectSpawnerHandler::SpawnObject()
000038:0x002c6d60:	movefm	@c00, item
000038:0x002c6d70:	move	scale, scale
000039:0x002c6d80:	cmpf	scale, _f0.000000
000039:0x002c6d90:	bne	0x2c6da8
000040:0x002c6d98:	imove	scale, 1.00000
000042:0x002c6da8:	movefm	@c00, item
000042:0x002c6db8:	moves	@s00, name
000042:0x002c6dc8:	call	Contains(@s00, _s'\')
000042:0x002c6de0:	cmpi	#return, _i0
000042:0x002c6df0:	bne	0x2c6e48
000042:0x002c6df8:	movefm	@c00, item
000042:0x002c6e08:	moves	@s00, name
000042:0x002c6e18:	call	Contains(@s00, _s'/')
000042:0x002c6e30:	cmpi	#return, _i0
000042:0x002c6e40:	beq	0x2c6f70
000044:0x002c6e48:	movefm	@c00, item
000044:0x002c6e58:	moves	path, name
000044:0x002c6e68:	call	ValidatePath(path)
000044:0x002c6e78:	cmpi	#return, _i0
000044:0x002c6e88:	beq	0x2c6f68
000045:0x002c6e90:	ncall	GetGame()
000045:0x002c6e98:	movefm	@c01, item
000045:0x002c6ea8:	moves	[0xb5bda7e8], name
000045:0x002c6eb8:	movefm	@c02, item
000045:0x002c6ec8:	movea	arr, pos
000045:0x002c6ed8:	call	ArrayToVec(arr)
000045:0x002c6ee8:	movefm	@c03, item
000045:0x002c6ef8:	movea	arr, ypr
000045:0x002c6f08:	pushv	#return
000045:0x002c6f10:	call	ArrayToVec(arr)
000045:0x002c6f20:	movev	@v01, #return
000045:0x002c6f30:	popv	#return
000045:0x002c6f38:	ncalli	CGame.CreateStaticObjectUsingP3D([0xb5bda7e8], #return, @v01, scale, _i0)
000045:0x002c6f58:	movetm	object, #return
000045:0x002c6f68:	jump	0x2c7188
000049:0x002c6f70:	imove	@m01, 0x000022
000049:0x002c6f80:	move	@m00, @m01
000049:0x002c6f90:	ori	@m00, @m00, ECE_CREATEPHYSICS
000049:0x002c6fa0:	move	@m01, @m00
000049:0x002c6fb0:	ori	@m01, @m01, ECE_NOLIFETIME
000049:0x002c6fc0:	move	@m00, @m01
000049:0x002c6fd0:	ori	flags, @m00, ECE_DYNAMIC_PERSISTENCY
000051:0x002c6fe0:	movefm	@c00, item
000051:0x002c6ff0:	cmpi	enableCEPersistency, _i0
000051:0x002c7000:	beq	0x2c7068
000053:0x002c7008:	noti	@m01, ECE_DYNAMIC_PERSISTENCY
000053:0x002c7018:	move	@m00, @m01
000053:0x002c7028:	andi	flags, flags, @m00
000054:0x002c7038:	noti	@m01, ECE_NOLIFETIME
000054:0x002c7048:	move	@m00, @m01
000054:0x002c7058:	andi	flags, flags, @m00
000057:0x002c7068:	ncall	GetGame()
000057:0x002c7070:	movefm	@c01, item
000057:0x002c7080:	moves	[0xb5bdab88], name
000057:0x002c7090:	movefm	@c02, item
000057:0x002c70a0:	movea	arr, pos
000057:0x002c70b0:	call	ArrayToVec(arr)
000057:0x002c70c0:	ncalli	CGame.CreateObjectEx([0xb5bdab88], #return, flags, RF_IGNORE)
000057:0x002c70d8:	movetm	object, #return
000058:0x002c70e8:	cmpcm	object, null
000058:0x002c70f8:	beq	0x2c7188
000060:0x002c7100:	movefm	@c00, item
000060:0x002c7110:	movea	arr, ypr
000060:0x002c7120:	call	ArrayToVec(arr)
000060:0x002c7130:	ncalli	Object.SetOrientation(#return)
000061:0x002c7140:	movefm	@c00, item
000061:0x002c7150:	cmpf	scale, _f1.000000
000061:0x002c7160:	beq	0x2c7188
000062:0x002c7168:	movefm	[0xd3173388], object
000062:0x002c7178:	ncall	SetScale([0xd3173388], scale)
000066:0x002c7188:	cmpcm	object, null
000066:0x002c7198:	bne	0x2c71e0
000067:0x002c71a0:	movefm	@c00, item
000067:0x002c71b0:	adds	@s01, _s'Object spawner failed to spawn ', name
000067:0x002c71c0:	moves	@s00, @s01
000067:0x002c71d0:	icall	PrintToRPT(@s00)
000067:0x002c71e0:	release	object
000067:0x002c71e8:	rts
ObjectSpawnerHandler::OnGameplayDataHandlerLoad()
000072:0x002c71f0:	call	SpawnObjects()
000073:0x002c7200:	ncall	GetGame()
000073:0x002c7208:	ncalli	CGame.GetWorld()
000073:0x002c7210:	ncalli	World.ProcessMarkedObjectsForPathgraphUpdate()
000073:0x002c7218:	rts
ObjectSpawnerHandler::ValidatePath()
000079:0x002c7298:	ncalli	array<string>.Count()
000079:0x002c72a0:	move	#cnt, #return
000079:0x002c72b0:	imove	#key, 0x000000
000079:0x002c72c0:	jump	0x2c72d0
000079:0x002c72c8:	inc	#key
000079:0x002c72d0:	cmpi	#key, #cnt
000079:0x002c72e0:	bge	0x2c7368
000079:0x002c72e8:	icall	
000079:0x002c72f8:	moves	p, #return
000081:0x002c7308:	call	Contains(path, p)
000081:0x002c7320:	moves	path, value
000081:0x002c7330:	cmpi	#return, _i0
000081:0x002c7340:	beq	0x2c7360
000082:0x002c7348:	imove	#return, 0x000001
000082:0x002c7358:	rts
000082:0x002c7360:	jump	0x2c72c8
000084:0x002c7368:	imove	#return, 0x000000
000084:0x002c7378:	rts
000084:0x002c7380:	rts
SpawnDataConverter::SpawnObjects()
000112:0x002c73b0:	ncalli	array<@ITEM_SpawnerObject>.Clear()
000113:0x002c73b8:	call	SpawnInit()
000114:0x002c73c8:	new	j, ObjectSpawnerJson
000115:0x002c73e8:	movefm	@c00, j
000115:0x002c73f8:	movem	Objects, Objects
000116:0x002c7408:	call	JsonSaveFile(m_Path, j)
000116:0x002c7420:	release	j
000116:0x002c7428:	rts
SpawnDataConverter::SpawnInit()
000121:0x002c7618:	call	AddSpawnData(_s'Land_Wall_Gate_FenR', _v<8406.501953,107.736824,12782.338867>, _v<0.000000,0.000000,0.000000>)
000122:0x002c7630:	call	AddSpawnData(_s'Land_Wall_Gate_FenR', _v<8410.501953,107.736824,12782.338867>, _v<0.000000,0.000000,0.000000>)
000123:0x002c7648:	call	AddSpawnData(_s'Land_Wall_Gate_FenR', _v<8416.501953,107.736824,12782.338867>, _v<0.000000,0.000000,0.000000>)
000124:0x002c7660:	call	AddSpawnData(_s'Land_Wall_Gate_FenR', _v<8422.501953,107.736824,12782.338867>, _v<0.000000,0.000000,0.000000>)
000124:0x002c7678:	rts
SpawnDataConverter::AddSpawnData()
000129:0x002c76a8:	new	obj, ITEM_SpawnerObject
000130:0x002c76c8:	movefm	@c00, obj
000130:0x002c76d8:	moves	name, objectName
000131:0x002c76e8:	movefm	@c00, obj
000131:0x002c76f8:	ifv	@f00, position[0x000000]
000131:0x002c7708:	itv	pos[0x000000], @f00
000132:0x002c7718:	movefm	@c00, obj
000132:0x002c7728:	ifv	@f00, position[0x000001]
000132:0x002c7738:	itv	pos[0x000001], @f00
000133:0x002c7748:	movefm	@c00, obj
000133:0x002c7758:	ifv	@f00, position[0x000002]
000133:0x002c7768:	itv	pos[0x000002], @f00
000135:0x002c7778:	movefm	@c00, obj
000135:0x002c7788:	ifv	@f00, orientation[0x000000]
000135:0x002c7798:	itv	ypr[0x000000], @f00
000136:0x002c77a8:	movefm	@c00, obj
000136:0x002c77b8:	ifv	@f00, orientation[0x000001]
000136:0x002c77c8:	itv	ypr[0x000001], @f00
000137:0x002c77d8:	movefm	@c00, obj
000137:0x002c77e8:	ifv	@f00, orientation[0x000002]
000137:0x002c77f8:	itv	ypr[0x000002], @f00
000139:0x002c7808:	movefm	@c00, obj
000139:0x002c7818:	icall	
000139:0x002c7828:	release	obj
000139:0x002c7830:	rts
CallQueueContext::CallQueueContext()
//scripts/3_Game/tools\tools.c
000024:0x002c7838:	movec	m_target, target
000025:0x002c7848:	moves	m_function, fn
000026:0x002c7858:	movem	m_params, params
000027:0x002c7868:	imove	m_valid, 0x000001
000027:0x002c7878:	rts
CallQueueContext::Call()
000032:0x002c7880:	movem	params, m_params
000032:0x002c7890:	call	
000032:0x002c78a0:	rts
CallQueueContext::CallParams()
000037:0x002c78a8:	cmpcm	params, null
000037:0x002c78b8:	beq	0x2c7918
000039:0x002c78c0:	ncall	GetGame()
000039:0x002c78c8:	movec	@c00, #return
000039:0x002c78d8:	movec	@c01, GameScript
000039:0x002c78e8:	movefm	@c02, params
000039:0x002c78f8:	icall	
000039:0x002c7910:	jump	0x2c7958
000043:0x002c7918:	ncall	GetGame()
000043:0x002c7920:	movec	@c00, #return
000043:0x002c7930:	movec	@c01, GameScript
000043:0x002c7940:	icall	
000043:0x002c7958:	rts
CallQueueContext::Invalidate()
000048:0x002c7960:	imove	m_valid, 0x000000
000048:0x002c7970:	rts
CallQueueContext::IsValid()
000052:0x002c7978:	move	#return, m_valid
000052:0x002c7988:	rts
000052:0x002c7990:	rts
CallQueue::CallQueue()
000072:0x002c7998:	imove	m_processing, 0x000000
000072:0x002c79a8:	rts
CallQueue::Tick()
000080:0x002c79d8:	cmpi	m_processing, _i0
000080:0x002c79e8:	beq	0x2c79f8
000080:0x002c79f0:	rts
000082:0x002c79f8:	imove	m_processing, 0x000001
000084:0x002c7a08:	ncalli	CallQueue.Count()
000084:0x002c7a10:	move	@m00, #return
000084:0x002c7a20:	cmpi	@m00, _i0
000084:0x002c7a30:	ble	0x2c7ac8
000086:0x002c7a38:	icall	
000086:0x002c7a48:	movetm	ctx, #return
000087:0x002c7a58:	call	
000087:0x002c7a68:	cmpi	#return, _i0
000087:0x002c7a78:	bne	0x2c7a98
000089:0x002c7a80:	ncalli	CallQueue.Remove(_i0)
000089:0x002c7a90:	jump	0x2c7ab8
000093:0x002c7a98:	ncalli	CallQueue.Remove(_i0)
000094:0x002c7aa8:	call	
000094:0x002c7ab8:	release	ctx
000094:0x002c7ac0:	jump	0x2c7a08
000098:0x002c7ac8:	imove	m_processing, 0x000000
000098:0x002c7ad8:	rts
CallQueue::Call()
000110:0x002c7ae0:	new	@c00, CallQueueContext
000110:0x002c7b10:	pushc	@c00
000110:0x002c7b18:	icall	
000110:0x002c7b28:	popc	@c00
000110:0x002c7b30:	release	@c00
000110:0x002c7b38:	rts
CallQueue::RemoveCalls()
000120:0x002c7b90:	ncalli	CallQueue.Count()
000120:0x002c7b98:	cmpi	#return, _i0
000120:0x002c7ba8:	beq	0x2c7c68
000122:0x002c7bb0:	ncalli	CallQueue.Count()
000122:0x002c7bb8:	subi	i, #return, _i1
000122:0x002c7bc8:	jump	0x2c7be8
000122:0x002c7bd0:	move	@m00, i
000122:0x002c7be0:	dec	i
000122:0x002c7be8:	cmpi	i, _i0
000122:0x002c7bf8:	blt	0x2c7c68
000124:0x002c7c00:	icall	
000124:0x002c7c10:	movetm	ctx, #return
000125:0x002c7c20:	movefm	@c00, ctx
000125:0x002c7c30:	cmpc	m_target, obj
000125:0x002c7c40:	bne	0x2c7c58
000127:0x002c7c48:	call	
000127:0x002c7c58:	release	ctx
000127:0x002c7c60:	jump	0x2c7bd0
000127:0x002c7c68:	rts
DragQueue::DragQueue()
000159:0x002c7c70:	new	m_mouse_params, Param3<int,int,bool>
000159:0x002c7ca0:	rts
DragQueue::Tick()
000167:0x002c7df8:	cmpi	m_processing, _i0
000167:0x002c7e08:	beq	0x2c7e18
000167:0x002c7e10:	rts
000169:0x002c7e18:	imove	m_processing, 0x000001
000171:0x002c7e28:	imove	last_index, 0x000000
000174:0x002c7e38:	imove	is_holding, 0x000000
000177:0x002c7e48:	ncall	GetMouseState(_i0)
000177:0x002c7e58:	andi	@m01, #return, _i-2147483648
000177:0x002c7e68:	move	@m00, @m01
000177:0x002c7e78:	cmpi	@m00, _i0
000177:0x002c7e88:	beq	0x2c7ea0
000179:0x002c7e90:	imove	is_holding, 0x000001
000182:0x002c7ea0:	icall	GetMousePos(mouse_x, mouse_y)
000184:0x002c7eb0:	cmpi	is_holding, _i0
000184:0x002c7ec0:	beq	0x2c7f38
000184:0x002c7ec8:	movefm	[0xb5b348c8], m_mouse_params
000184:0x002c7ed8:	movec	@c00, [0xb5b348c8]
000184:0x002c7ee8:	cmpi	mouse_x, param1
000184:0x002c7ef8:	bne	0x2c7f38
000184:0x002c7f00:	movefm	[0xb5b348c8], m_mouse_params
000184:0x002c7f10:	movec	@c01, [0xb5b348c8]
000184:0x002c7f20:	cmpi	mouse_y, param2
000184:0x002c7f30:	beq	0x2c8098
000186:0x002c7f38:	movefm	[0xb5b348c8], m_mouse_params
000186:0x002c7f48:	movec	@c02, [0xb5b348c8]
000186:0x002c7f58:	move	param1, mouse_x
000187:0x002c7f68:	movefm	[0xb5b348c8], m_mouse_params
000187:0x002c7f78:	movec	@c00, [0xb5b348c8]
000187:0x002c7f88:	move	param2, mouse_y
000188:0x002c7f98:	movefm	[0xb5b348c8], m_mouse_params
000188:0x002c7fa8:	movec	@c00, [0xb5b348c8]
000188:0x002c7fb8:	move	param3, is_holding
000190:0x002c7fc8:	ncalli	DragQueue.Count()
000190:0x002c7fd0:	move	@m00, #return
000190:0x002c7fe0:	cmpi	@m00, last_index
000190:0x002c7ff0:	ble	0x2c8098
000192:0x002c7ff8:	icall	
000192:0x002c8008:	movetm	ctx, #return
000193:0x002c8018:	call	
000193:0x002c8028:	cmpi	#return, _i0
000193:0x002c8038:	bne	0x2c8058
000195:0x002c8040:	ncalli	DragQueue.Remove(last_index)
000195:0x002c8050:	jump	0x2c8090
000199:0x002c8058:	movem	params, m_mouse_params
000199:0x002c8068:	call	
000200:0x002c8078:	move	@m00, last_index
000200:0x002c8088:	inc	last_index
000200:0x002c8090:	jump	0x2c7fc8
000206:0x002c8098:	cmpi	is_holding, _i0
000206:0x002c80a8:	bne	0x2c80b8
000208:0x002c80b0:	ncalli	DragQueue.Clear()
000211:0x002c80b8:	imove	m_processing, 0x000000
000211:0x002c80c8:	release	ctx
000211:0x002c80d0:	rts
TimerBase::~TimerBase()
000229:0x002c80d8:	cmpcm	m_timerQueue, null
000229:0x002c80e8:	bne	0x2c80f8
000229:0x002c80f0:	rts
000231:0x002c80f8:	call	
000231:0x002c8108:	rts
TimerBase::Pause()
000240:0x002c8110:	call	
000240:0x002c8120:	rts
TimerBase::Continue()
000248:0x002c8128:	call	
000248:0x002c8138:	rts
TimerBase::Stop()
000256:0x002c8140:	call	
000257:0x002c8150:	imove	m_time, 0.00000
000257:0x002c8160:	rts
TimerBase::IsRunning()
000265:0x002c8168:	move	#return, m_running
000265:0x002c8178:	rts
000265:0x002c8180:	rts
TimerBase::Tick()
000273:0x002c8188:	call	
000273:0x002c8198:	cmpi	#return, _i0
000273:0x002c81a8:	beq	0x2c8270
000275:0x002c81b0:	addf	@f00, m_time, timeslice
000275:0x002c81c0:	move	m_time, @f00
000277:0x002c81d0:	cmpf	m_time, m_duration
000277:0x002c81e0:	blt	0x2c8260
000279:0x002c81e8:	cmpi	m_loop, _i0
000279:0x002c81f8:	beq	0x2c8228
000281:0x002c8200:	subf	@f00, m_time, m_duration
000281:0x002c8210:	move	m_time, @f00
000281:0x002c8220:	jump	0x2c8248
000285:0x002c8228:	call	
000286:0x002c8238:	imove	m_time, 0.00000
000289:0x002c8248:	call	
000289:0x002c8258:	jump	0x2c8270
000293:0x002c8260:	call	
000293:0x002c8270:	rts
TimerBase::OnTimerQueueDestoryed()
000303:0x002c8278:	movetm	m_timerQueue, NULL
000303:0x002c8288:	rts
TimerBase::GetTime()
000307:0x002c8290:	move	#return, m_time
000307:0x002c82a0:	rts
000307:0x002c82a8:	rts
TimerBase::GetDuration()
000311:0x002c82b0:	move	#return, m_duration
000311:0x002c82c0:	rts
000311:0x002c82c8:	rts
TimerBase::GetRemaining()
000315:0x002c82d0:	subf	#return, m_duration, m_time
000315:0x002c82e0:	rts
000315:0x002c82e8:	rts
TimerBase::OnInit()
000320:0x002c8318:	imove	m_duration, 1.00000
000321:0x002c8328:	imove	m_loop, 0x000000
000322:0x002c8338:	imove	m_time, 0.00000
000323:0x002c8348:	imove	m_running, 0x000000
000324:0x002c8358:	ncall	GetGame()
000324:0x002c8360:	cmpc	#return, null
000324:0x002c8370:	beq	0x2c83b0
000325:0x002c8378:	ncall	GetGame()
000325:0x002c8380:	call	
000325:0x002c8390:	movem	m_timerQueue, #return
000325:0x002c83a0:	release	#return
000325:0x002c83a8:	jump	0x2c83c0
000327:0x002c83b0:	icall	ErrorEx(_s'Attempting to Init a timer when the game does not exist (GetGame() == null)', _i2)
000327:0x002c83c0:	rts
TimerBase::OnStart()
000332:0x002c83c8:	move	m_duration, duration
000333:0x002c83d8:	move	m_loop, loop
000334:0x002c83e8:	imove	m_time, 0.00000
000335:0x002c83f8:	call	
000335:0x002c8408:	rts
TimerBase::SetRunning()
000342:0x002c8438:	imove	index, 0xffffffff
000344:0x002c8448:	cmpi	m_running, running
000344:0x002c8458:	bne	0x2c8468
000344:0x002c8460:	rts
000346:0x002c8468:	move	m_running, running
000347:0x002c8478:	cmpcm	m_timerQueue, NULL
000347:0x002c8488:	bne	0x2c8498
000347:0x002c8490:	rts
000349:0x002c8498:	cmpi	running, _i0
000349:0x002c84a8:	beq	0x2c8520
000351:0x002c84b0:	movefm	[0xb5b39b68], m_timerQueue
000351:0x002c84c0:	icall	
000351:0x002c84d0:	move	@m00, #return
000351:0x002c84e0:	cmpi	@m00, _i-1
000351:0x002c84f0:	bne	0x2c8518
000353:0x002c84f8:	movefm	[0xb5b39b68], m_timerQueue
000353:0x002c8508:	icall	
000353:0x002c8518:	jump	0x2c8588
000358:0x002c8520:	movefm	[0xb5b39b68], m_timerQueue
000358:0x002c8530:	icall	
000358:0x002c8540:	move	index, #return
000359:0x002c8550:	cmpi	index, _i-1
000359:0x002c8560:	beq	0x2c8588
000361:0x002c8568:	movefm	[0xb5b39b68], m_timerQueue
000361:0x002c8578:	ncalli	array<TimerBase>.Remove(index)
000361:0x002c8588:	rts
TimerQueue::TimerQueue()
000378:0x002c8590:	imove	m_processing, 0x000000
000378:0x002c85a0:	rts
TimerQueue::~TimerQueue()
000384:0x002c85d0:	ncalli	TimerQueue.Count()
000384:0x002c85d8:	cmpi	#return, _i0
000384:0x002c85e8:	beq	0x2c8670
000386:0x002c85f0:	ncalli	TimerQueue.Count()
000386:0x002c85f8:	subi	i, #return, _i1
000386:0x002c8608:	jump	0x2c8628
000386:0x002c8610:	move	@m00, i
000386:0x002c8620:	dec	i
000386:0x002c8628:	cmpi	i, _i0
000386:0x002c8638:	blt	0x2c8668
000388:0x002c8640:	icall	
000388:0x002c8650:	call	
000388:0x002c8660:	jump	0x2c8610
000391:0x002c8668:	ncalli	TimerQueue.Clear()
000391:0x002c8670:	rts
TimerQueue::Tick()
000398:0x002c86a0:	cmpi	m_processing, _i0
000398:0x002c86b0:	beq	0x2c86c0
000398:0x002c86b8:	rts
000400:0x002c86c0:	imove	m_processing, 0x000001
000402:0x002c86d0:	ncalli	TimerQueue.Count()
000402:0x002c86d8:	cmpi	#return, _i0
000402:0x002c86e8:	beq	0x2c8768
000404:0x002c86f0:	ncalli	TimerQueue.Count()
000404:0x002c86f8:	subi	i, #return, _i1
000404:0x002c8708:	jump	0x2c8728
000404:0x002c8710:	move	@m00, i
000404:0x002c8720:	dec	i
000404:0x002c8728:	cmpi	i, _i0
000404:0x002c8738:	blt	0x2c8768
000406:0x002c8740:	icall	
000406:0x002c8750:	call	
000406:0x002c8760:	jump	0x2c8710
000410:0x002c8768:	imove	m_processing, 0x000000
000410:0x002c8778:	rts
WidgetFadeTimer::WidgetFadeTimer()
000426:0x002c8780:	call	
000427:0x002c8790:	imove	m_fadeIn, 0x000001
000427:0x002c87a0:	rts
WidgetFadeTimer::FadeIn()
000438:0x002c8820:	ncalli	Widget.GetAlpha()
000438:0x002c8828:	move	alpha, #return
000440:0x002c8838:	cmpi	continue_, _i0
000440:0x002c8848:	beq	0x2c8890
000440:0x002c8850:	cmpf	alpha, _f0.950000
000440:0x002c8860:	ble	0x2c8890
000442:0x002c8868:	ncalli	Widget.SetAlpha(_f1.000000)
000443:0x002c8878:	ncalli	Widget.Show(true, _i1)
000444:0x002c8888:	rts
000447:0x002c8890:	movem	m_widget, w
000448:0x002c88a0:	imove	m_fadeIn, 0x000001
000450:0x002c88b0:	call	
000452:0x002c88c8:	cmpcm	m_widget, null
000452:0x002c88d8:	beq	0x2c8948
000454:0x002c88e0:	movefm	[0xd31345a8], m_widget
000454:0x002c88f0:	ncalli	Widget.GetAlpha()
000454:0x002c88f8:	move	alpha, #return
000455:0x002c8908:	movefm	[0xd31345a8], m_widget
000455:0x002c8918:	ncalli	Widget.SetAlpha(_f0.000000)
000456:0x002c8928:	movefm	[0xd31345a8], m_widget
000456:0x002c8938:	ncalli	Widget.Show(true, _i1)
000459:0x002c8948:	cmpi	continue_, _i0
000459:0x002c8958:	beq	0x2c8980
000461:0x002c8960:	mulf	@f00, alpha, time
000461:0x002c8970:	move	m_time, @f00
000461:0x002c8980:	rts
WidgetFadeTimer::FadeOut()
000473:0x002c8988:	ncalli	Widget.GetAlpha()
000473:0x002c8990:	move	m_alpha, #return
000475:0x002c89a0:	cmpi	continue_, _i0
000475:0x002c89b0:	beq	0x2c89f8
000475:0x002c89b8:	cmpf	m_alpha, _f0.050000
000475:0x002c89c8:	bge	0x2c89f8
000477:0x002c89d0:	ncalli	Widget.SetAlpha(_f0.000000)
000478:0x002c89e0:	ncalli	Widget.Show(false, _i1)
000479:0x002c89f0:	rts
000482:0x002c89f8:	movem	m_widget, w
000483:0x002c8a08:	imove	m_fadeIn, 0x000000
000485:0x002c8a18:	call	
000487:0x002c8a30:	cmpcm	m_widget, null
000487:0x002c8a40:	beq	0x2c8ac0
000487:0x002c8a48:	cmpi	continue_, _i0
000487:0x002c8a58:	bne	0x2c8ac0
000489:0x002c8a60:	imove	m_alpha, 1.00000
000490:0x002c8a70:	move	[0xd31601b0], m_alpha
000490:0x002c8a80:	movefm	[0xd31345a8], m_widget
000490:0x002c8a90:	ncalli	Widget.SetAlpha([0xd31601b0])
000491:0x002c8aa0:	movefm	[0xd31345a8], m_widget
000491:0x002c8ab0:	ncalli	Widget.Show(true, _i1)
000494:0x002c8ac0:	cmpi	continue_, _i0
000494:0x002c8ad0:	beq	0x2c8b18
000496:0x002c8ad8:	subf	@f01, _f1.000000, m_alpha
000496:0x002c8ae8:	move	@f00, @f01
000496:0x002c8af8:	mulf	@f00, @f00, time
000496:0x002c8b08:	move	m_time, @f00
000496:0x002c8b18:	rts
WidgetFadeTimer::OnTimer()
000502:0x002c8b20:	cmpcm	m_widget, null
000502:0x002c8b30:	beq	0x2c8bb8
000504:0x002c8b38:	cmpi	m_fadeIn, _i0
000504:0x002c8b48:	beq	0x2c8b78
000506:0x002c8b50:	movefm	[0xd31345a8], m_widget
000506:0x002c8b60:	ncalli	Widget.SetAlpha(_f1.000000)
000506:0x002c8b70:	jump	0x2c8bb8
000510:0x002c8b78:	movefm	[0xd31345a8], m_widget
000510:0x002c8b88:	ncalli	Widget.SetAlpha(_f0.000000)
000511:0x002c8b98:	movefm	[0xd31345a8], m_widget
000511:0x002c8ba8:	ncalli	Widget.Show(false, _i1)
000511:0x002c8bb8:	rts
WidgetFadeTimer::OnUpdate()
000518:0x002c8c40:	divf	timeDiff, m_time, m_duration
000519:0x002c8c50:	icall	Max(_f0.000000, timeDiff)
000519:0x002c8c60:	move	progress, #return
000521:0x002c8c70:	cmpcm	m_widget, null
000521:0x002c8c80:	beq	0x2c8d08
000523:0x002c8c88:	cmpi	m_fadeIn, _i0
000523:0x002c8c98:	beq	0x2c8cc8
000525:0x002c8ca0:	movefm	[0xd31345a8], m_widget
000525:0x002c8cb0:	ncalli	Widget.SetAlpha(timeDiff)
000525:0x002c8cc0:	jump	0x2c8d08
000529:0x002c8cc8:	subf	@f01, m_alpha, timeDiff
000529:0x002c8cd8:	move	@f00, @f01
000529:0x002c8ce8:	movefm	[0xd31345a8], m_widget
000529:0x002c8cf8:	ncalli	Widget.SetAlpha(@f00)
000529:0x002c8d08:	rts
Timer::Timer()
000573:0x002c8d10:	call	
000573:0x002c8d20:	rts
Timer::Run()
000586:0x002c8d28:	movem	m_target, obj
000587:0x002c8d38:	moves	m_function, fn_name
000589:0x002c8d48:	movem	m_params, params
000590:0x002c8d58:	call	
000590:0x002c8d70:	rts
Timer::OnTimer()
000595:0x002c8d78:	cmpcm	m_params, null
000595:0x002c8d88:	beq	0x2c8e08
000597:0x002c8d90:	ncall	GetGame()
000597:0x002c8d98:	movec	@c00, #return
000597:0x002c8da8:	movec	@c01, GameScript
000597:0x002c8db8:	movefm	@c02, m_target
000597:0x002c8dc8:	movefm	@c03, m_params
000597:0x002c8dd8:	icall	
000598:0x002c8df0:	movetm	m_params, NULL
000598:0x002c8e00:	jump	0x2c8e58
000602:0x002c8e08:	ncall	GetGame()
000602:0x002c8e10:	movec	@c00, #return
000602:0x002c8e20:	movec	@c01, GameScript
000602:0x002c8e30:	movefm	@c02, m_target
000602:0x002c8e40:	icall	
000602:0x002c8e58:	rts
Timer::Stop()
000608:0x002c8e60:	call	
000609:0x002c8e70:	movetm	m_params, NULL
000609:0x002c8e80:	rts
AnimationTimer::AnimationTimer()
000652:0x002c8e88:	call	
000652:0x002c8e98:	rts
AnimationTimer::~AnimationTimer()
000657:0x002c8ea0:	call	
000657:0x002c8eb0:	rts
AnimationTimer::Run()
000662:0x002c8eb8:	call	
000663:0x002c8ec8:	movem	m_TargetObject, obj
000664:0x002c8ed8:	moves	m_UpdateFunction, updateFunc
000665:0x002c8ee8:	moves	m_FinishedFunction, finishedFunc
000666:0x002c8ef8:	move	m_TargetValueOriginal, targetVal
000667:0x002c8f08:	move	m_TargetValue, targetVal
000668:0x002c8f18:	move	m_time, speed
000669:0x002c8f28:	move	m_loop, loop
000670:0x002c8f38:	imove	m_Active, 0x000001
000671:0x002c8f48:	movem	m_Params, params
000672:0x002c8f58:	move	m_Value, startingVal
000672:0x002c8f68:	rts
AnimationTimer::GetValue()
000679:0x002c8f70:	move	#return, m_Value
000679:0x002c8f80:	rts
000679:0x002c8f88:	rts
AnimationTimer::IsRunning()
000684:0x002c8f90:	move	#return, m_Active
000684:0x002c8fa0:	rts
000684:0x002c8fa8:	rts
AnimationTimer::Tick()
000691:0x002c9000:	cmpi	m_Active, _i0
000691:0x002c9010:	bne	0x2c9020
000692:0x002c9018:	rts
000695:0x002c9020:	subf	@f02, m_TargetValue, m_Value
000695:0x002c9030:	move	@f01, @f02
000695:0x002c9040:	icall	AbsFloat(@f01)
000695:0x002c9050:	move	diff, #return
000696:0x002c9060:	mulf	step, m_time, timeslice
000698:0x002c9070:	cmpf	diff, step
000698:0x002c9080:	bge	0x2c9160
000700:0x002c9088:	move	m_Value, m_TargetValue
000701:0x002c9098:	cmpi	m_loop, _i0
000701:0x002c90a8:	bne	0x2c90c8
000703:0x002c90b0:	imove	m_Active, 0x000000
000703:0x002c90c0:	jump	0x2c9108
000707:0x002c90c8:	cmpf	m_TargetValue, m_TargetValueOriginal
000707:0x002c90d8:	bne	0x2c90f8
000709:0x002c90e0:	imove	m_TargetValue, 0.00000
000709:0x002c90f0:	jump	0x2c9108
000713:0x002c90f8:	move	m_TargetValue, m_TargetValueOriginal
000717:0x002c9108:	ncall	GetGame()
000717:0x002c9110:	movec	@c00, #return
000717:0x002c9120:	movec	@c01, GameScript
000717:0x002c9130:	movefm	@c02, m_TargetObject
000717:0x002c9140:	icall	
000717:0x002c9158:	jump	0x2c91c0
000721:0x002c9160:	cmpf	m_TargetValue, m_Value
000721:0x002c9170:	ble	0x2c91a0
000723:0x002c9178:	move	@f00, step
000723:0x002c9188:	addf	m_Value, m_Value, @f00
000723:0x002c9198:	jump	0x2c91c0
000727:0x002c91a0:	move	@f00, step
000727:0x002c91b0:	subf	m_Value, m_Value, @f00
000731:0x002c91c0:	ncall	GetGame()
000731:0x002c91c8:	movec	@c00, #return
000731:0x002c91d8:	movec	@c01, GameScript
000731:0x002c91e8:	movefm	@c02, m_TargetObject
000731:0x002c91f8:	icall	
000731:0x002c9210:	rts
AnimatorTimer::Animate()
000750:0x002c9218:	move	m_target_value, val
000751:0x002c9228:	imove	m_loop, 0x000000
000752:0x002c9238:	move	m_time, speed
000753:0x002c9248:	imove	m_active, 0x000001
000753:0x002c9258:	rts
AnimatorTimer::AnimateLoop()
000762:0x002c9260:	imove	m_value, 0.00000
000763:0x002c9270:	imove	m_target_value, 0.00000
000764:0x002c9280:	imove	m_loop, 0x000001
000765:0x002c9290:	move	m_time, speed
000766:0x002c92a0:	imove	m_active, 0x000001
000766:0x002c92b0:	rts
AnimatorTimer::GetValue()
000773:0x002c92b8:	move	#return, m_value
000773:0x002c92c8:	rts
000773:0x002c92d0:	rts
AnimatorTimer::GetTargetValue()
000780:0x002c92d8:	move	#return, m_target_value
000780:0x002c92e8:	rts
000780:0x002c92f0:	rts
AnimatorTimer::SetValue()
000787:0x002c92f8:	move	m_value, val
000788:0x002c9308:	move	m_target_value, val
000788:0x002c9318:	rts
AnimatorTimer::IsRunning()
000793:0x002c9320:	move	#return, m_active
000793:0x002c9330:	rts
000793:0x002c9338:	rts
AnimatorTimer::Tick()
000800:0x002c9390:	cmpi	m_active, _i0
000800:0x002c93a0:	bne	0x2c93b0
000800:0x002c93a8:	rts
000802:0x002c93b0:	cmpi	m_loop, _i0
000802:0x002c93c0:	beq	0x2c9470
000804:0x002c93c8:	mulf	@f02, m_time, PI2
000804:0x002c93d8:	move	@f01, @f02
000804:0x002c93e8:	mulf	@f00, @f01, timeslice
000804:0x002c93f8:	addf	m_target_value, m_target_value, @f00
000805:0x002c9408:	cmpf	m_target_value, PI2
000805:0x002c9418:	ble	0x2c9448
000805:0x002c9420:	imove	@f00, 6.28319
000805:0x002c9430:	subf	m_target_value, m_target_value, @f00
000805:0x002c9440:	jump	0x2c9408
000807:0x002c9448:	icall	Sin(m_target_value)
000807:0x002c9458:	move	m_value, #return
000807:0x002c9468:	jump	0x2c9560
000811:0x002c9470:	subf	@f02, m_target_value, m_value
000811:0x002c9480:	move	@f01, @f02
000811:0x002c9490:	icall	AbsFloat(@f01)
000811:0x002c94a0:	move	diff, #return
000812:0x002c94b0:	mulf	step, m_time, timeslice
000814:0x002c94c0:	cmpf	diff, step
000814:0x002c94d0:	bge	0x2c9500
000816:0x002c94d8:	move	m_value, m_target_value
000817:0x002c94e8:	imove	m_active, 0x000000
000817:0x002c94f8:	jump	0x2c9560
000821:0x002c9500:	cmpf	m_target_value, m_value
000821:0x002c9510:	ble	0x2c9540
000823:0x002c9518:	move	@f00, step
000823:0x002c9528:	addf	m_value, m_value, @f00
000823:0x002c9538:	jump	0x2c9560
000827:0x002c9540:	move	@f00, step
000827:0x002c9550:	subf	m_value, m_value, @f00
000827:0x002c9560:	rts
AnimatorTimer::AnimatorTimer()
000735:0x002c9568:	imove	m_active, 0x000000
000735:0x002c9578:	imove	m_loop, 0x000000
000735:0x002c9588:	imove	m_target_value, 0.00000
000735:0x002c9598:	imove	m_value, 0.00000
000735:0x002c95a8:	imove	m_time, 0.00000
000735:0x002c95b8:	rts
GetTemperatureColor()
000981:0x002c9728:	imove	alpha, 0x0000ff
000982:0x002c9738:	imove	red, 0x000099
000983:0x002c9748:	imove	green, 0x000099
000984:0x002c9758:	imove	blue, 0x000099
000985:0x002c9768:	cmpi	temperature, _i20
000985:0x002c9778:	bge	0x2c9a28
000987:0x002c9780:	subi	@m00, temperature, _i20
000987:0x002c9790:	move	temperature, @m00
000988:0x002c97a0:	citf	@f00, temperature
000988:0x002c97b0:	icall	Clamp(@f00, _f-50.000000, _f50.000000)
000988:0x002c97c8:	cfti	temperature, #return
000989:0x002c97d8:	icall	AbsInt(temperature)
000989:0x002c97e8:	move	temperature, #return
000991:0x002c97f8:	citf	@f03, red
000991:0x002c9808:	divf	@f03, @f03, _f50.000000
000991:0x002c9818:	move	@f02, @f03
000991:0x002c9828:	citf	@f03, temperature
000991:0x002c9838:	mulf	@f02, @f02, @f03
000991:0x002c9848:	move	@f01, @f02
000991:0x002c9858:	citf	@f02, red
000991:0x002c9868:	subf	@f01, @f02, @f01
000991:0x002c9878:	move	@f00, @f01
000991:0x002c9888:	icall	Clamp(@f00, _f0.000000, _f255.000000)
000991:0x002c98a0:	cfti	red, #return
000992:0x002c98b0:	citf	@f03, green
000992:0x002c98c0:	divf	@f03, @f03, _f50.000000
000992:0x002c98d0:	move	@f02, @f03
000992:0x002c98e0:	citf	@f03, temperature
000992:0x002c98f0:	mulf	@f02, @f02, @f03
000992:0x002c9900:	move	@f01, @f02
000992:0x002c9910:	citf	@f02, green
000992:0x002c9920:	subf	@f01, @f02, @f01
000992:0x002c9930:	move	@f00, @f01
000992:0x002c9940:	icall	Clamp(@f00, _f0.000000, _f255.000000)
000992:0x002c9958:	cfti	green, #return
000993:0x002c9968:	citf	@f03, blue
000993:0x002c9978:	divf	@f03, @f03, _f50.000000
000993:0x002c9988:	move	@f02, @f03
000993:0x002c9998:	citf	@f03, temperature
000993:0x002c99a8:	mulf	@f02, @f02, @f03
000993:0x002c99b8:	move	@f01, @f02
000993:0x002c99c8:	citf	@f02, blue
000993:0x002c99d8:	addf	@f01, @f02, @f01
000993:0x002c99e8:	move	@f00, @f01
000993:0x002c99f8:	icall	Clamp(@f00, _f0.000000, _f255.000000)
000993:0x002c9a10:	cfti	blue, #return
000993:0x002c9a20:	jump	0x2c9ca0
000995:0x002c9a28:	cmpi	temperature, _i20
000995:0x002c9a38:	ble	0x2c9ca0
000997:0x002c9a40:	citf	@f00, temperature
000997:0x002c9a50:	icall	Clamp(@f00, _f-100.000000, _f100.000000)
000997:0x002c9a68:	cfti	temperature, #return
000998:0x002c9a78:	citf	@f03, blue
000998:0x002c9a88:	divf	@f03, @f03, _f100.000000
000998:0x002c9a98:	move	@f02, @f03
000998:0x002c9aa8:	citf	@f03, temperature
000998:0x002c9ab8:	mulf	@f02, @f02, @f03
000998:0x002c9ac8:	move	@f01, @f02
000998:0x002c9ad8:	citf	@f02, blue
000998:0x002c9ae8:	subf	@f01, @f02, @f01
000998:0x002c9af8:	move	@f00, @f01
000998:0x002c9b08:	icall	Clamp(@f00, _f0.000000, _f255.000000)
000998:0x002c9b20:	cfti	blue, #return
000999:0x002c9b30:	citf	@f03, green
000999:0x002c9b40:	divf	@f03, @f03, _f100.000000
000999:0x002c9b50:	move	@f02, @f03
000999:0x002c9b60:	citf	@f03, temperature
000999:0x002c9b70:	mulf	@f02, @f02, @f03
000999:0x002c9b80:	move	@f01, @f02
000999:0x002c9b90:	citf	@f02, green
000999:0x002c9ba0:	subf	@f01, @f02, @f01
000999:0x002c9bb0:	move	@f00, @f01
000999:0x002c9bc0:	icall	Clamp(@f00, _f0.000000, _f255.000000)
000999:0x002c9bd8:	cfti	green, #return
001000:0x002c9be8:	citf	@f03, red
001000:0x002c9bf8:	divf	@f03, @f03, _f100.000000
001000:0x002c9c08:	move	@f02, @f03
001000:0x002c9c18:	citf	@f03, temperature
001000:0x002c9c28:	mulf	@f02, @f02, @f03
001000:0x002c9c38:	move	@f01, @f02
001000:0x002c9c48:	citf	@f02, red
001000:0x002c9c58:	addf	@f01, @f02, @f01
001000:0x002c9c68:	move	@f00, @f01
001000:0x002c9c78:	icall	Clamp(@f00, _f0.000000, _f255.000000)
001000:0x002c9c90:	cfti	red, #return
001003:0x002c9ca0:	call	ARGB(alpha, red, green, blue)
001003:0x002c9cc0:	move	color, #return
001004:0x002c9cd0:	move	#return, color
001004:0x002c9ce0:	rts
001004:0x002c9ce8:	rts
GetProfileValueBool()
001011:0x002c9d18:	ncall	GetGame()
001011:0x002c9d20:	icall	
001011:0x002c9d30:	cmpi	#return, _i0
001011:0x002c9d40:	beq	0x2c9db8
001013:0x002c9d48:	cmps	value, _s'true'
001013:0x002c9d58:	beq	0x2c9d78
001013:0x002c9d60:	cmps	value, _s'1'
001013:0x002c9d70:	bne	0x2c9d98
001015:0x002c9d78:	imove	#return, 0x000001
001015:0x002c9d88:	rts
001015:0x002c9d90:	jump	0x2c9db0
001019:0x002c9d98:	imove	#return, 0x000000
001019:0x002c9da8:	rts
001019:0x002c9db0:	jump	0x2c9dd0
001024:0x002c9db8:	move	#return, def
001024:0x002c9dc8:	rts
001024:0x002c9dd0:	rts
SetProfileValueBool()
001031:0x002c9dd8:	cmpi	value, _i0
001031:0x002c9de8:	beq	0x2c9e10
001033:0x002c9df0:	ncall	GetGame()
001033:0x002c9df8:	ncalli	CGame.SetProfileString(name, _s'1')
001033:0x002c9e08:	jump	0x2c9e28
001037:0x002c9e10:	ncall	GetGame()
001037:0x002c9e18:	ncalli	CGame.SetProfileString(name, _s'0')
001037:0x002c9e28:	rts
GetNumberOfSetBits()
001044:0x002c9e30:	icall	GetNumberOfSetBits(i)
001044:0x002c9e40:	move	#return, #return
001044:0x002c9e50:	rts
001044:0x002c9e58:	rts
World::SetAperture()
//scripts/3_Game/global\world.c
000139:0x002c9eb8:	cmpf	invDiameter, _f0.000000
000139:0x002c9ec8:	bgt	0x2c9ee8
000141:0x002c9ed0:	ncalli	World.SetEyeAccom(_f-1.000000)
000141:0x002c9ee0:	jump	0x2c9f28
000145:0x002c9ee8:	divf	apertureArea, _f1.000000, invDiameter
000146:0x002c9ef8:	mulf	@f01, apertureArea, apertureArea
000146:0x002c9f08:	move	@f00, @f01
000146:0x002c9f18:	ncalli	World.SetEyeAccom(@f00)
000146:0x002c9f28:	rts
ParticleList::RegisterParticle()
//scripts/3_Game/particles\particlelist.c
000310:0x002c9f30:	call	GetPathToParticles()
000310:0x002c9f40:	call	RegisterParticle#202692(#return, file_name)
000310:0x002c9f58:	move	#return, #return
000310:0x002c9f68:	rts
000310:0x002c9f70:	rts
ParticleList::RegisterParticle#202692()
000316:0x002ca170:	cmpcm	m_ParticlePaths, null
000316:0x002ca180:	bne	0x2ca1a8
000317:0x002ca188:	new	m_ParticlePaths, map<int,string>
000319:0x002ca1a8:	cmpcm	m_ParticleNames, null
000319:0x002ca1b8:	bne	0x2ca1e0
000320:0x002ca1c0:	new	m_ParticleNames, map<string,int>
000322:0x002ca1e0:	icall	Format(_s'%1%2', root_path, file_name, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000322:0x002ca210:	moves	path, #return
000323:0x002ca220:	icall	Format(_s'%1.ptc', path, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000323:0x002ca250:	moves	fullPath, #return
000325:0x002ca260:	icall	FileExist(fullPath)
000325:0x002ca270:	cmpi	#return, _i0
000325:0x002ca280:	bne	0x2ca2c8
000331:0x002ca288:	icall	Format(_s'Particle file not found! <%1> Correct path to this particle in script file ParticleList.c!%2', fullPath, devMsgSuffix, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000331:0x002ca2b8:	icall	ErrorEx(#return, _i1)
000336:0x002ca2c8:	icall	
000336:0x002ca2d8:	cmpi	#return, _i0
000336:0x002ca2e8:	beq	0x2ca3f8
000339:0x002ca2f0:	call	
000339:0x002ca308:	move	existingPathId, key
000339:0x002ca318:	cmpi	#return, _i0
000339:0x002ca328:	beq	0x2ca3b0
000341:0x002ca330:	cmpi	existingNameId, existingPathId
000341:0x002ca340:	bne	0x2ca368
000343:0x002ca348:	move	#return, existingNameId
000343:0x002ca358:	rts
000343:0x002ca360:	jump	0x2ca3a8
000347:0x002ca368:	icall	Format(_s'ParticleNames and ParticlePaths array are containing conflicting data. ID %1 vs ID %2', existingNameId, existingPathId, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000347:0x002ca398:	icall	ErrorEx(#return, _i2)
000347:0x002ca3a8:	jump	0x2ca3f0
000352:0x002ca3b0:	icall	Format(_s'Duplicate particle filename: %1; GetParticleIDByName will only work with the first path if there are two different paths.', file_name, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000352:0x002ca3e0:	icall	ErrorEx(#return, _i1)
000352:0x002ca3f0:	jump	0x2ca428
000357:0x002ca3f8:	addi	@m01, m_lastID, _i1
000357:0x002ca408:	move	@m00, @m01
000357:0x002ca418:	icall	
000360:0x002ca428:	inc	m_lastID
000361:0x002ca430:	icall	
000362:0x002ca440:	move	#return, m_lastID
000362:0x002ca450:	rts
000362:0x002ca458:	rts
ParticleList::GetRegisteredParticlesCount()
000367:0x002ca460:	move	#return, m_lastID
000367:0x002ca470:	rts
000367:0x002ca478:	rts
ParticleList::IsValidId()
000373:0x002ca480:	cmpi	id, NONE
000373:0x002ca490:	beq	0x2ca4c8
000373:0x002ca498:	cmpi	id, INVALID
000373:0x002ca4a8:	beq	0x2ca4c8
000373:0x002ca4b0:	imove	#return, 0x000001
000373:0x002ca4c0:	jump	0x2ca4d8
000373:0x002ca4c8:	imove	#return, 0x000000
000373:0x002ca4d8:	rts
000373:0x002ca4e0:	rts
ParticleList::GetParticlePath()
000380:0x002ca538:	icall	
000380:0x002ca548:	cmpi	#return, _i0
000380:0x002ca558:	bne	0x2ca5a0
000381:0x002ca560:	icall	Format(_s'No particle registered with id: %1', particle_id, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000381:0x002ca590:	icall	ErrorEx(#return, _i1)
000382:0x002ca5a0:	moves	#return, path
000382:0x002ca5b0:	rts
000382:0x002ca5b8:	rts
ParticleList::GetParticleFullPath()
000388:0x002ca5c0:	call	GetParticlePath(particle_id)
000388:0x002ca5d0:	icall	Format(_s'%1.ptc', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000388:0x002ca600:	moves	#return, #return
000388:0x002ca610:	rts
000388:0x002ca618:	rts
ParticleList::GetParticleID()
000394:0x002ca670:	call	
000394:0x002ca680:	move	id, #return
000395:0x002ca690:	call	IsValidId(id)
000395:0x002ca6a0:	cmpi	#return, _i0
000395:0x002ca6b0:	bne	0x2ca6f8
000396:0x002ca6b8:	icall	Format(_s'No particle registered with path: %1', particle_file, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000396:0x002ca6e8:	icall	ErrorEx(#return, _i1)
000397:0x002ca6f8:	move	#return, id
000397:0x002ca708:	rts
000397:0x002ca710:	rts
ParticleList::GetParticleIDByName()
000403:0x002ca768:	imove	id, 0x000000
000404:0x002ca778:	icall	
000404:0x002ca788:	cmpi	#return, _i0
000404:0x002ca798:	bne	0x2ca7e0
000405:0x002ca7a0:	icall	Format(_s'No particle registered with name: %1', name, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000405:0x002ca7d0:	icall	ErrorEx(#return, _i1)
000406:0x002ca7e0:	move	#return, id
000406:0x002ca7f0:	rts
000406:0x002ca7f8:	rts
ParticleList::GetPathToParticles()
000412:0x002ca828:	moves	#return, _s'graphics/particles/'
000412:0x002ca838:	rts
000412:0x002ca840:	rts
ParticleList::PreloadParticles()
000418:0x002ca8c0:	ncall	GetGame()
000418:0x002ca8c8:	ncalli	CGame.IsServer()
000418:0x002ca8d0:	cmpi	#return, _i0
000418:0x002ca8e0:	beq	0x2ca910
000418:0x002ca8e8:	ncall	GetGame()
000418:0x002ca8f0:	ncalli	CGame.IsMultiplayer()
000418:0x002ca8f8:	cmpi	#return, _i0
000418:0x002ca908:	bne	0x2ca9d8
000420:0x002ca910:	ncalli	map<int,string>.Count()
000420:0x002ca918:	move	count, #return
000422:0x002ca928:	imove	i, 0x000000
000422:0x002ca938:	jump	0x2ca948
000422:0x002ca940:	inc	i
000422:0x002ca948:	cmpi	i, count
000422:0x002ca958:	bge	0x2ca9d8
000424:0x002ca960:	icall	
000424:0x002ca970:	icall	Format(_s'%1.ptc', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000424:0x002ca9a0:	ncall	GetObject(#return)
000424:0x002ca9b0:	movea	vobj, #return
000425:0x002ca9c0:	ncall	ReleaseObject(vobj, _i0)
000425:0x002ca9d0:	jump	0x2ca940
000425:0x002ca9d8:	rts
HandStateBase::HandStateBase()
//scripts/3_Game/systems\inventory\handstatebase.c
000011:0x002ca9e0:	movem	m_Player, player
000011:0x002ca9f0:	movem	m_parentState, parent
000011:0x002caa00:	rts
HandStateBase::SetParentState()
000016:0x002caa08:	movem	m_parentState, parent
000016:0x002caa18:	rts
HandStateBase::GetParentState()
000020:0x002caa20:	movem	#return, m_parentState
000020:0x002caa30:	rts
000020:0x002caa38:	rts
HandStateBase::HasFSM()
000022:0x002caa40:	cmpcm	m_FSM, NULL
000022:0x002caa50:	beq	0x2caa70
000022:0x002caa58:	imove	#return, 0x000001
000022:0x002caa68:	jump	0x2caa80
000022:0x002caa70:	imove	#return, 0x000000
000022:0x002caa80:	rts
000022:0x002caa88:	rts
HandStateBase::GetFSM()
000023:0x002caa90:	movem	#return, m_FSM
000023:0x002caaa0:	rts
000023:0x002caaa8:	rts
HandStateBase::ProcessEvent()
000027:0x002caab0:	call	
000027:0x002caac0:	cmpi	#return, _i0
000027:0x002caad0:	beq	0x2cab10
000028:0x002caad8:	movefm	[0xb5b3f2a8], m_FSM
000028:0x002caae8:	call	
000028:0x002caaf8:	move	#return, #return
000028:0x002cab08:	rts
000029:0x002cab10:	imove	#return, 0x000000
000029:0x002cab20:	rts
000029:0x002cab28:	rts
HandStateBase::AddTransition()
000037:0x002cab58:	call	
000037:0x002cab68:	cmpi	#return, _i0
000037:0x002cab78:	beq	0x2caba8
000038:0x002cab80:	movefm	[0xb5b3f2a8], m_FSM
000038:0x002cab90:	call	
000038:0x002caba0:	jump	0x2cabb8
000040:0x002caba8:	call	Error(_s'[hndfsm] adding transition to state without FSM. Configure FSM first.')
000040:0x002cabb8:	rts
HandStateBase::OnEntry()
000051:0x002cac10:	call	
000051:0x002cac20:	cmpi	#return, _i0
000051:0x002cac30:	beq	0x2cae88
000051:0x002cac38:	movefm	[0xb5b3f2a8], m_FSM
000051:0x002cac48:	call	
000051:0x002cac58:	cmpi	#return, _i0
000051:0x002cac68:	bne	0x2cae88
000053:0x002cac70:	cmpcm	e, null
000053:0x002cac80:	beq	0x2cade8
000054:0x002cac88:	movefm	@c00, e
000054:0x002cac98:	movem	o, m_Player
000054:0x002caca8:	call	GetDebugName#206374(o)
000054:0x002cacb8:	adds	@s06, _s'[hndfsm] { ', #return
000054:0x002cacc8:	moves	@s05, @s06
000054:0x002cacd8:	adds	@s05, @s05, _s' STS = '
000054:0x002cace8:	moves	@s04, @s05
000054:0x002cacf8:	movefm	@c01, e
000054:0x002cad08:	movefm	[0xb5b2afc0], m_Player
000054:0x002cad18:	ncalli	DayZPlayer.GetSimulationTimeStamp()
000054:0x002cad20:	icall	ToString(#return)
000054:0x002cad30:	adds	@s04, @s04, #return
000054:0x002cad40:	moves	@s03, @s04
000054:0x002cad50:	adds	@s03, @s03, _s' '
000054:0x002cad60:	moves	@s02, @s03
000054:0x002cad70:	ncall	Type(this)
000054:0x002cad80:	ncall	ToString(#return)
000054:0x002cad90:	adds	@s02, @s02, #return
000054:0x002cada0:	moves	@s01, @s02
000054:0x002cadb0:	adds	@s01, @s01, _s'  Has Sub-FSM! Starting submachine...'
000054:0x002cadc0:	moves	@s00, @s01
000054:0x002cadd0:	call	hndDebugPrint(@s00)
000054:0x002cade0:	jump	0x2cae58
000056:0x002cade8:	ncall	Type(this)
000056:0x002cadf8:	ncall	ToString(#return)
000056:0x002cae08:	adds	@s02, _s'[hndfsm] { ', #return
000056:0x002cae18:	moves	@s01, @s02
000056:0x002cae28:	adds	@s01, @s01, _s'  Has Sub-FSM! Starting submachine...'
000056:0x002cae38:	moves	@s00, @s01
000056:0x002cae48:	call	hndDebugPrint(@s00)
000057:0x002cae58:	movefm	[0xb5b3f2a8], m_FSM
000057:0x002cae68:	call	
000057:0x002cae80:	jump	0x2cb030
000061:0x002cae88:	cmpcm	e, null
000061:0x002cae98:	beq	0x2cafe0
000062:0x002caea0:	movefm	@c00, e
000062:0x002caeb0:	movem	o, m_Player
000062:0x002caec0:	call	GetDebugName#206374(o)
000062:0x002caed0:	adds	@s05, _s'[hndfsm] { ', #return
000062:0x002caee0:	moves	@s04, @s05
000062:0x002caef0:	adds	@s04, @s04, _s' STS = '
000062:0x002caf00:	moves	@s03, @s04
000062:0x002caf10:	movefm	@c01, e
000062:0x002caf20:	movefm	[0xb5b2afc0], m_Player
000062:0x002caf30:	ncalli	DayZPlayer.GetSimulationTimeStamp()
000062:0x002caf38:	icall	ToString(#return)
000062:0x002caf48:	adds	@s03, @s03, #return
000062:0x002caf58:	moves	@s02, @s03
000062:0x002caf68:	adds	@s02, @s02, _s' '
000062:0x002caf78:	moves	@s01, @s02
000062:0x002caf88:	ncall	Type(this)
000062:0x002caf98:	ncall	ToString(#return)
000062:0x002cafa8:	adds	@s01, @s01, #return
000062:0x002cafb8:	moves	@s00, @s01
000062:0x002cafc8:	call	hndDebugPrint(@s00)
000062:0x002cafd8:	jump	0x2cb030
000064:0x002cafe0:	ncall	Type(this)
000064:0x002caff0:	ncall	ToString(#return)
000064:0x002cb000:	adds	@s01, _s'[hndfsm] { ', #return
000064:0x002cb010:	moves	@s00, @s01
000064:0x002cb020:	call	hndDebugPrint(@s00)
000064:0x002cb030:	rts
HandStateBase::OnUpdate()
000075:0x002cb038:	call	
000075:0x002cb048:	cmpi	#return, _i0
000075:0x002cb058:	beq	0x2cb0d0
000075:0x002cb060:	movefm	[0xb5b3f2a8], m_FSM
000075:0x002cb070:	call	
000075:0x002cb080:	cmpi	#return, _i0
000075:0x002cb090:	beq	0x2cb0d0
000076:0x002cb098:	movefm	[0xb5b3f2a8], m_FSM
000076:0x002cb0a8:	call	
000076:0x002cb0b8:	call	
000076:0x002cb0c8:	release	#return
000076:0x002cb0d0:	rts
HandStateBase::OnAbort()
000085:0x002cb178:	call	
000085:0x002cb188:	cmpi	#return, _i0
000085:0x002cb198:	beq	0x2cb268
000085:0x002cb1a0:	movefm	[0xb5b3f2a8], m_FSM
000085:0x002cb1b0:	call	
000085:0x002cb1c0:	cmpi	#return, _i0
000085:0x002cb1d0:	beq	0x2cb268
000087:0x002cb1d8:	ncall	Type(this)
000087:0x002cb1e8:	ncall	ToString(#return)
000087:0x002cb1f8:	adds	@s02, _s'[hndfsm] OnAbort ', #return
000087:0x002cb208:	moves	@s01, @s02
000087:0x002cb218:	adds	@s01, @s01, _s'  Has Sub-FSM! Aborting submachine...'
000087:0x002cb228:	moves	@s00, @s01
000087:0x002cb238:	call	hndDebugPrint(@s00)
000088:0x002cb248:	movefm	[0xb5b3f2a8], m_FSM
000088:0x002cb258:	call	
000091:0x002cb268:	movefm	@c00, e
000091:0x002cb278:	movem	o, m_Player
000091:0x002cb288:	call	GetDebugName#206374(o)
000091:0x002cb298:	adds	@s05, _s'[hndfsm] } ', #return
000091:0x002cb2a8:	moves	@s04, @s05
000091:0x002cb2b8:	adds	@s04, @s04, _s' STS = '
000091:0x002cb2c8:	moves	@s03, @s04
000091:0x002cb2d8:	movefm	@c01, e
000091:0x002cb2e8:	movefm	[0xb5b2afc0], m_Player
000091:0x002cb2f8:	ncalli	DayZPlayer.GetSimulationTimeStamp()
000091:0x002cb300:	icall	ToString(#return)
000091:0x002cb310:	adds	@s03, @s03, #return
000091:0x002cb320:	moves	@s02, @s03
000091:0x002cb330:	adds	@s02, @s02, _s' ABORTED '
000091:0x002cb340:	moves	@s01, @s02
000091:0x002cb350:	ncall	Type(this)
000091:0x002cb360:	ncall	ToString(#return)
000091:0x002cb370:	adds	@s01, @s01, #return
000091:0x002cb380:	moves	@s00, @s01
000091:0x002cb390:	call	hndDebugPrint(@s00)
000091:0x002cb3a0:	rts
HandStateBase::OnExit()
000100:0x002cb3a8:	movefm	@c00, e
000100:0x002cb3b8:	movem	o, m_Player
000100:0x002cb3c8:	call	GetDebugName#206374(o)
000100:0x002cb3d8:	adds	@s05, _s'[hndfsm] } ', #return
000100:0x002cb3e8:	moves	@s04, @s05
000100:0x002cb3f8:	adds	@s04, @s04, _s' STS = '
000100:0x002cb408:	moves	@s03, @s04
000100:0x002cb418:	movefm	@c01, e
000100:0x002cb428:	movefm	[0xb5b2afc0], m_Player
000100:0x002cb438:	ncalli	DayZPlayer.GetSimulationTimeStamp()
000100:0x002cb440:	icall	ToString(#return)
000100:0x002cb450:	adds	@s03, @s03, #return
000100:0x002cb460:	moves	@s02, @s03
000100:0x002cb470:	adds	@s02, @s02, _s' '
000100:0x002cb480:	moves	@s01, @s02
000100:0x002cb490:	ncall	Type(this)
000100:0x002cb4a0:	ncall	ToString(#return)
000100:0x002cb4b0:	adds	@s01, @s01, #return
000100:0x002cb4c0:	moves	@s00, @s01
000100:0x002cb4d0:	call	hndDebugPrint(@s00)
000100:0x002cb4e0:	rts
HandStateBase::IsWaitingForActionFinish()
000107:0x002cb4e8:	call	
000107:0x002cb4f8:	cmpi	#return, _i0
000107:0x002cb508:	beq	0x2cb5a8
000107:0x002cb510:	movefm	[0xb5b3f2a8], m_FSM
000107:0x002cb520:	call	
000107:0x002cb530:	cmpi	#return, _i0
000107:0x002cb540:	beq	0x2cb5a8
000107:0x002cb548:	movefm	[0xb5b3f2a8], m_FSM
000107:0x002cb558:	call	
000107:0x002cb568:	call	
000107:0x002cb578:	cmpi	#return, _i0
000107:0x002cb588:	beq	0x2cb5a8
000107:0x002cb590:	imove	#return, 0x000001
000107:0x002cb5a0:	jump	0x2cb5b8
000107:0x002cb5a8:	imove	#return, 0x000000
000107:0x002cb5b8:	release	#return
000107:0x002cb5c0:	rts
000107:0x002cb5c8:	rts
HandStateBase::IsIdle()
000113:0x002cb5d0:	imove	#return, 0x000000
000113:0x002cb5e0:	rts
000113:0x002cb5e8:	rts
HandStateBase::OnStateChanged()
000129:0x002cb5f0:	movefm	[0xb5b266d0], m_Player
000129:0x002cb600:	call	
000129:0x002cb610:	call	
000129:0x002cb628:	release	#return
000129:0x002cb630:	rts
EffVehicleSmoke::EffVehicleSmoke()
//scripts/3_Game/effects\effectparticle\vehiclesmoke.c
000005:0x002cb638:	call	
000005:0x002cb648:	rts
EffVehicleSmoke::SetParticleStateLight()
000011:0x002cb650:	call	
000011:0x002cb660:	rts
EffVehicleSmoke::SetParticleStateHeavy()
000017:0x002cb668:	call	
000017:0x002cb678:	rts
EffVehicleSmoke::SetParticleState()
000022:0x002cb6d8:	call	
000022:0x002cb6e8:	move	was_playing, #return
000024:0x002cb6f8:	call	
000026:0x002cb708:	call	
000028:0x002cb718:	cmpi	was_playing, _i0
000028:0x002cb728:	beq	0x2cb740
000030:0x002cb730:	call	
000030:0x002cb740:	rts
PPESSAO::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppessao.c
000027:0x002cb748:	imove	#return, 0x000002
000027:0x002cb758:	rts
000027:0x002cb760:	rts
PPESSAO::GetDefaultMaterialPath()
000033:0x002cb8d0:	new	options, GameOptions
000035:0x002cb8f0:	ncalli	GameOptions.GetOptionByType(_i10)
000035:0x002cb900:	icall	SafeCastType([0xb5b228c8], @c01, #return)
000035:0x002cb918:	movetm	loa, @c01
000036:0x002cb928:	moves	ret, _s''
000037:0x002cb938:	ncalli	ListOptionsAccess.GetIndex()
000037:0x002cb940:	move	#switch, #return
000037:0x002cb950:	imove	@m00, 0x000000
000037:0x002cb960:	cmpi	@m00, #switch
000037:0x002cb970:	bne	0x2cb998
000040:0x002cb978:	moves	ret, _s'Graphics/Materials/postprocess/hbao_low'
000041:0x002cb988:	jump	0x2cba68
000041:0x002cb990:	jump	0x2cb9c0
000041:0x002cb998:	imove	@m00, 0x000001
000041:0x002cb9a8:	cmpi	@m00, #switch
000041:0x002cb9b8:	bne	0x2cb9e0
000044:0x002cb9c0:	moves	ret, _s'Graphics/Materials/postprocess/hbao_medium'
000045:0x002cb9d0:	jump	0x2cba68
000045:0x002cb9d8:	jump	0x2cba08
000045:0x002cb9e0:	imove	@m00, 0x000002
000045:0x002cb9f0:	cmpi	@m00, #switch
000045:0x002cba00:	bne	0x2cba28
000048:0x002cba08:	moves	ret, _s'Graphics/Materials/postprocess/hbao_high'
000049:0x002cba18:	jump	0x2cba68
000049:0x002cba20:	jump	0x2cba50
000049:0x002cba28:	imove	@m00, 0x000003
000049:0x002cba38:	cmpi	@m00, #switch
000049:0x002cba48:	bne	0x2cba68
000052:0x002cba50:	moves	ret, _s'Graphics/Materials/postprocess/hbao_highest'
000053:0x002cba60:	jump	0x2cba68
000055:0x002cba68:	moves	#return, ret
000055:0x002cba78:	release	options
000055:0x002cba80:	release	loa
000055:0x002cba88:	rts
000055:0x002cba90:	release	options
000055:0x002cba98:	release	loa
000055:0x002cbaa0:	rts
PPESSAO::RegisterMaterialParameters()
000061:0x002cbcd8:	call	
000062:0x002cbcf8:	call	
000063:0x002cbd18:	call	
000064:0x002cbd38:	call	
000065:0x002cbd58:	call	
000066:0x002cbd78:	call	
000067:0x002cbd98:	call	
000068:0x002cbdb8:	call	
000069:0x002cbdd8:	call	
000070:0x002cbdf8:	call	
000071:0x002cbe18:	call	
000072:0x002cbe38:	call	
000073:0x002cbe58:	call	
000074:0x002cbe78:	call	
000075:0x002cbe98:	call	
000075:0x002cbeb8:	rts
Hit_ErrorNoMaterial::Hit_ErrorNoMaterial()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_error.c
000008:0x002cbec0:	call	
000008:0x002cbed0:	rts
EffExhaustSmoke::SetParticleStateLight()
//scripts/3_Game/effects\effectparticle\vehiclesmoke\exhaustsmoke.c
000005:0x002cbfa0:	call	
000007:0x002cbfb0:	call	
000007:0x002cbfc0:	movefm	@c02, #return
000007:0x002cbfd0:	icall	SafeCastType([0xb5b28ab8], @c01, @c02)
000007:0x002cbfe8:	movetm	parent, @c01
000007:0x002cbff8:	release	#return
000008:0x002cc000:	call	
000008:0x002cc010:	movem	p, #return
000008:0x002cc020:	release	#return
000010:0x002cc028:	cmpcm	parent, null
000010:0x002cc038:	beq	0x2cc178
000010:0x002cc040:	cmpcm	p, null
000010:0x002cc050:	beq	0x2cc178
000012:0x002cc058:	call	
000012:0x002cc068:	move	speed, #return
000015:0x002cc078:	cmpf	speed, _f100.000000
000015:0x002cc088:	bge	0x2cc0d8
000016:0x002cc090:	subf	@f01, _f100.000000, speed
000016:0x002cc0a0:	move	@f00, @f01
000016:0x002cc0b0:	divf	@f00, @f00, _f100.000000
000016:0x002cc0c0:	move	lifetime_scale, @f00
000016:0x002cc0d0:	jump	0x2cc0e8
000018:0x002cc0d8:	imove	lifetime_scale, 0.10000
000020:0x002cc0e8:	mulf	@f01, speed, _f0.100000
000020:0x002cc0f8:	move	@f00, @f01
000020:0x002cc108:	addf	birthrate_scale, _f1.000000, @f00
000022:0x002cc118:	call	
000023:0x002cc130:	call	
000024:0x002cc148:	call	
000025:0x002cc160:	call	
000025:0x002cc178:	release	parent
000025:0x002cc180:	release	p
000025:0x002cc188:	rts
ObjectSnapCallback::OnFirstContact()
//scripts/3_Game/entities\object.c
000042:0x002cc190:	imove	#return, 0x000000
000042:0x002cc1a0:	rts
000042:0x002cc1a8:	rts
ObjectSnapCallback::OnQuery()
000051:0x002cc1b0:	imove	#return, 0x000001
000051:0x002cc1c0:	rts
000051:0x002cc1c8:	rts
ObjectSnapCallback::OnCollide()
000060:0x002cc1d0:	imove	#return, 0x000001
000060:0x002cc1e0:	rts
000060:0x002cc1e8:	rts
Object::CanBeSkinned()
000071:0x002cc1f0:	imove	#return, 0x000000
000071:0x002cc200:	rts
000071:0x002cc208:	rts
Object::Delete()
000084:0x002cc250:	ncall	GetGame()
000084:0x002cc258:	call	
000084:0x002cc268:	pushc	#return
000084:0x002cc270:	ncall	GetGame()
000084:0x002cc278:	movec	@c00, #return
000084:0x002cc288:	popc	#return
000084:0x002cc290:	movec	@c01, @c00
000084:0x002cc2a0:	icall	SetInstance([0xb5dca250], @c01)
000084:0x002cc2b0:	icall	
000084:0x002cc2e0:	release	#return
000084:0x002cc2e8:	rts
Object::GetLODByName()
000108:0x002cc3c0:	new	lods, array<LOD>
000109:0x002cc3e0:	movefm	[0xb5b65a50], lods
000109:0x002cc3f0:	ncalli	Object.GetLODS([0xb5b65a50])
000111:0x002cc400:	imove	i, 0x000000
000111:0x002cc410:	jump	0x2cc420
000111:0x002cc418:	inc	i
000111:0x002cc420:	ncalli	array<LOD>.Count()
000111:0x002cc428:	cmpi	i, #return
000111:0x002cc438:	bge	0x2cc4e0
000113:0x002cc440:	icall	
000113:0x002cc450:	ncalli	Object.GetLODName(#return)
000113:0x002cc460:	moves	lod_name, #return
000114:0x002cc470:	icall	ToLower(lod_name)
000115:0x002cc480:	icall	ToLower(name)
000116:0x002cc490:	cmps	lod_name, name
000116:0x002cc4a0:	bne	0x2cc4d8
000118:0x002cc4a8:	icall	
000118:0x002cc4b8:	movec	#return, #return
000118:0x002cc4c8:	release	lods
000118:0x002cc4d0:	rts
000118:0x002cc4d8:	jump	0x2cc418
000122:0x002cc4e0:	movec	#return, NULL
000122:0x002cc4f0:	release	lods
000122:0x002cc4f8:	rts
000122:0x002cc500:	release	lods
000122:0x002cc508:	rts
Object::GetHiddenSelections()
000128:0x002cc510:	call	
000128:0x002cc520:	call	GetHiddenSelectionsConfig(#return)
000128:0x002cc530:	movem	#return, #return
000128:0x002cc540:	release	#return
000128:0x002cc548:	rts
000128:0x002cc550:	rts
Object::GetHiddenSelectionsTextures()
000134:0x002cc558:	call	
000134:0x002cc568:	call	GetHiddenSelectionsTexturesConfig(#return)
000134:0x002cc578:	movem	#return, #return
000134:0x002cc588:	release	#return
000134:0x002cc590:	rts
000134:0x002cc598:	rts
Object::GetHiddenSelectionsMaterials()
000140:0x002cc5a0:	call	
000140:0x002cc5b0:	call	GetHiddenSelectionsMaterialsConfig(#return)
000140:0x002cc5c0:	movem	#return, #return
000140:0x002cc5d0:	release	#return
000140:0x002cc5d8:	rts
000140:0x002cc5e0:	rts
Object::Explode()
000146:0x002cc638:	cmps	ammoType, _s''
000146:0x002cc648:	bne	0x2cc670
000147:0x002cc650:	icall	
000147:0x002cc660:	moves	ammoType, #return
000149:0x002cc670:	cmps	ammoType, _s''
000149:0x002cc680:	bne	0x2cc698
000150:0x002cc688:	moves	ammoType, _s'Dummy_Heavy'
000152:0x002cc698:	ncall	GetGame()
000152:0x002cc6a0:	ncalli	CGame.IsServer()
000152:0x002cc6a8:	cmpi	#return, _i0
000152:0x002cc6b8:	beq	0x2cc720
000154:0x002cc6c0:	call	
000155:0x002cc6d0:	icall	SafeCastType([0xb5b25dc0], @c01, this)
000155:0x002cc6e8:	movec	[0xb5c2ee98], null
000155:0x002cc6f8:	ncalli	Object.GetPosition()
000155:0x002cc700:	ncall	ExplosionDamage(@c01, [0xb5c2ee98], ammoType, #return, damageType)
000155:0x002cc720:	rts
Param1<EntityAI>::Param1()
//scripts/1_Core/param.c
000038:0x002cc840:	movem	param1, p1
000038:0x002cc850:	rts
Param1<EntityAI>::Serialize()
000043:0x002cc858:	icall	
000043:0x002cc868:	move	#return, #return
000043:0x002cc878:	rts
000043:0x002cc880:	rts
Param1<EntityAI>::Deserializer()
000048:0x002cc888:	icall	
000048:0x002cc898:	move	#return, #return
000048:0x002cc8a8:	rts
000048:0x002cc8b0:	rts
Object::SynchExplosion()
//scripts/3_Game/entities\object.c
000161:0x002cc8e0:	ncall	GetGame()
000161:0x002cc8e8:	ncalli	CGame.IsDedicatedServer()
000161:0x002cc8f0:	cmpi	#return, _i0
000161:0x002cc900:	beq	0x2cc978
000163:0x002cc908:	movetm	p1, null
000163:0x002cc918:	new	p, Param1<EntityAI>
000164:0x002cc940:	ncall	GetGame()
000164:0x002cc948:	call	
000164:0x002cc968:	release	p
000164:0x002cc970:	jump	0x2cc9b0
000166:0x002cc978:	ncall	GetGame()
000166:0x002cc980:	ncalli	CGame.IsMultiplayer()
000166:0x002cc988:	cmpi	#return, _i0
000166:0x002cc998:	bne	0x2cc9b0
000168:0x002cc9a0:	call	
000168:0x002cc9b0:	rts
Object::OnExplodeClient()
000175:0x002cca18:	icall	
000175:0x002cca28:	moves	ammoType, #return
000177:0x002cca38:	cmps	ammoType, _s''
000177:0x002cca48:	bne	0x2cca60
000178:0x002cca50:	moves	ammoType, _s'Dummy_Heavy'
000180:0x002cca60:	ncalli	Object.GetPosition()
000180:0x002cca68:	movev	pos, #return
000183:0x002cca78:	call	PlayAmmoParticle(ammoType, pos)
000186:0x002cca90:	call	PlayAmmoEffect(ammoType, pos)
000186:0x002ccaa8:	rts
Object::GetSurfaceNoise()
000377:0x002ccae8:	ncalli	Object.GetPosition()
000377:0x002ccaf0:	movev	position, #return
000378:0x002ccb00:	ncall	GetGame()
000378:0x002ccb08:	movec	[0xb5bdd0b8], NULL
000378:0x002ccb18:	ncalli	CGame.SurfaceGetNoiseMultiplier([0xb5bdd0b8], position, _i-1)
000378:0x002ccb30:	move	#return, #return
000378:0x002ccb40:	rts
000378:0x002ccb48:	rts
Object::GetSurfaceType()
000387:0x002ccc00:	ncall	GetGame()
000387:0x002ccc08:	icall	
000391:0x002ccc20:	moves	#return, surface_type
000391:0x002ccc30:	rts
000391:0x002ccc38:	rts
Object::HasSelection()
000397:0x002ccc90:	new	selections, array<string>
000398:0x002cccb0:	movefm	[0xb5b66e00], selections
000398:0x002cccc0:	ncalli	Object.GetSelectionList([0xb5b66e00])
000400:0x002cccd0:	imove	i, 0x000000
000400:0x002ccce0:	jump	0x2cccf0
000400:0x002ccce8:	inc	i
000400:0x002cccf0:	ncalli	array<string>.Count()
000400:0x002cccf8:	cmpi	i, #return
000400:0x002ccd08:	bge	0x2ccd70
000402:0x002ccd10:	icall	
000402:0x002ccd20:	moves	@s00, #return
000402:0x002ccd30:	cmps	@s00, selection
000402:0x002ccd40:	bne	0x2ccd68
000404:0x002ccd48:	imove	#return, 0x000001
000404:0x002ccd58:	release	selections
000404:0x002ccd60:	rts
000404:0x002ccd68:	jump	0x2ccce8
000408:0x002ccd70:	imove	#return, 0x000000
000408:0x002ccd80:	release	selections
000408:0x002ccd88:	rts
000408:0x002ccd90:	release	selections
000408:0x002ccd98:	rts
Object::HasAnimation()
000414:0x002ccec0:	call	
000414:0x002cced0:	adds	@s01, _s'CfgVehicles ', #return
000414:0x002ccee0:	moves	@s00, @s01
000414:0x002ccef0:	adds	cfg_path_vehicles, @s00, _s' '
000415:0x002ccf00:	ncall	GetGame()
000415:0x002ccf08:	ncalli	CGame.ConfigIsExisting(cfg_path_vehicles)
000415:0x002ccf18:	cmpi	#return, _i0
000415:0x002ccf28:	beq	0x2ccfb8
000415:0x002ccf30:	ncall	GetGame()
000415:0x002ccf38:	adds	@s02, cfg_path_vehicles, _s'AnimationSources '
000415:0x002ccf48:	moves	@s01, @s02
000415:0x002ccf58:	adds	@s01, @s01, anim_name
000415:0x002ccf68:	moves	@s00, @s01
000415:0x002ccf78:	ncalli	CGame.ConfigIsExisting(@s00)
000415:0x002ccf88:	cmpi	#return, _i0
000415:0x002ccf98:	beq	0x2ccfb8
000417:0x002ccfa0:	imove	#return, 0x000001
000417:0x002ccfb0:	rts
000420:0x002ccfb8:	call	
000420:0x002ccfc8:	adds	@s01, _s'CfgWeapons ', #return
000420:0x002ccfd8:	moves	@s00, @s01
000420:0x002ccfe8:	adds	cfg_path_weapons, @s00, _s' '
000421:0x002ccff8:	ncall	GetGame()
000421:0x002cd000:	ncalli	CGame.ConfigIsExisting(cfg_path_weapons)
000421:0x002cd010:	cmpi	#return, _i0
000421:0x002cd020:	beq	0x2cd0b0
000421:0x002cd028:	ncall	GetGame()
000421:0x002cd030:	adds	@s02, cfg_path_weapons, _s'AnimationSources '
000421:0x002cd040:	moves	@s01, @s02
000421:0x002cd050:	adds	@s01, @s01, anim_name
000421:0x002cd060:	moves	@s00, @s01
000421:0x002cd070:	ncalli	CGame.ConfigIsExisting(@s00)
000421:0x002cd080:	cmpi	#return, _i0
000421:0x002cd090:	beq	0x2cd0b0
000423:0x002cd098:	imove	#return, 0x000001
000423:0x002cd0a8:	rts
000426:0x002cd0b0:	call	
000426:0x002cd0c0:	adds	@s01, _s'CfgMagazines ', #return
000426:0x002cd0d0:	moves	@s00, @s01
000426:0x002cd0e0:	adds	cfg_path_magazines, @s00, _s' '
000427:0x002cd0f0:	ncall	GetGame()
000427:0x002cd0f8:	ncalli	CGame.ConfigIsExisting(cfg_path_magazines)
000427:0x002cd108:	cmpi	#return, _i0
000427:0x002cd118:	beq	0x2cd1a8
000427:0x002cd120:	ncall	GetGame()
000427:0x002cd128:	adds	@s02, cfg_path_magazines, _s'AnimationSources '
000427:0x002cd138:	moves	@s01, @s02
000427:0x002cd148:	adds	@s01, @s01, anim_name
000427:0x002cd158:	moves	@s00, @s01
000427:0x002cd168:	ncalli	CGame.ConfigIsExisting(@s00)
000427:0x002cd178:	cmpi	#return, _i0
000427:0x002cd188:	beq	0x2cd1a8
000429:0x002cd190:	imove	#return, 0x000001
000429:0x002cd1a0:	rts
000432:0x002cd1a8:	imove	#return, 0x000000
000432:0x002cd1b8:	rts
000432:0x002cd1c0:	rts
Object::GetType()
000460:0x002cd1f0:	ncall	GetGame()
000460:0x002cd1f8:	icall	
000462:0x002cd208:	moves	#return, ret
000462:0x002cd218:	rts
000462:0x002cd220:	rts
Object::GetDisplayName()
000470:0x002cd250:	call	
000470:0x002cd260:	moves	tmp, output
000470:0x002cd270:	cmpi	#return, _i0
000470:0x002cd280:	beq	0x2cd2b0
000472:0x002cd288:	icall	TranslateString(tmp)
000472:0x002cd298:	moves	tmp, #return
000472:0x002cd2a8:	jump	0x2cd2c8
000477:0x002cd2b0:	ncall	GetGame()
000477:0x002cd2b8:	icall	
000479:0x002cd2c8:	moves	#return, tmp
000479:0x002cd2d8:	rts
000479:0x002cd2e0:	rts
Object::DisplayNameRuinAttach()
000485:0x002cd2e8:	imove	#return, 0x000000
000485:0x002cd2f8:	rts
000485:0x002cd300:	rts
Object::GetModelName()
000491:0x002cd308:	ncall	GetGame()
000491:0x002cd310:	call	
000491:0x002cd320:	call	
000491:0x002cd330:	moves	#return, #return
000491:0x002cd340:	rts
000491:0x002cd348:	rts
Object::Release()
000498:0x002cd350:	ncall	GetGame()
000498:0x002cd358:	ncalli	CGame.ObjectRelease(this)
000498:0x002cd368:	move	#return, #return
000498:0x002cd378:	rts
000498:0x002cd380:	rts
Object::IsKindOf()
000504:0x002cd388:	ncall	GetGame()
000504:0x002cd390:	call	
000504:0x002cd3a8:	move	#return, #return
000504:0x002cd3b8:	rts
000504:0x002cd3c0:	rts
Object::IsAlive()
000510:0x002cd3c8:	ncalli	Object.IsDamageDestroyed()
000510:0x002cd3d0:	cmpi	#return, _i0
000510:0x002cd3e0:	beq	0x2cd400
000510:0x002cd3e8:	imove	@m00, 0x000000
000510:0x002cd3f8:	jump	0x2cd410
000510:0x002cd400:	imove	@m00, 0x000001
000510:0x002cd410:	move	#return, @m00
000510:0x002cd420:	rts
000510:0x002cd428:	rts
Object::IsMan()
000516:0x002cd430:	imove	#return, 0x000000
000516:0x002cd440:	rts
000516:0x002cd448:	rts
Object::IsDayZCreature()
000522:0x002cd450:	imove	#return, 0x000000
000522:0x002cd460:	rts
000522:0x002cd468:	rts
Object::IsEntityAI()
000528:0x002cd470:	imove	#return, 0x000000
000528:0x002cd480:	rts
000528:0x002cd488:	rts
Object::IsStaticTransmitter()
000534:0x002cd490:	imove	#return, 0x000000
000534:0x002cd4a0:	rts
000534:0x002cd4a8:	rts
Object::IsTransmitter()
000540:0x002cd4b0:	imove	#return, 0x000000
000540:0x002cd4c0:	rts
000540:0x002cd4c8:	rts
Object::IsItemBase()
000546:0x002cd4d0:	imove	#return, 0x000000
000546:0x002cd4e0:	rts
000546:0x002cd4e8:	rts
Object::IsContainer()
000552:0x002cd4f0:	imove	#return, 0x000000
000552:0x002cd500:	rts
000552:0x002cd508:	rts
Object::IsMagazine()
000558:0x002cd510:	imove	#return, 0x000000
000558:0x002cd520:	rts
000558:0x002cd528:	rts
Object::IsAmmoPile()
000564:0x002cd530:	imove	#return, 0x000000
000564:0x002cd540:	rts
000564:0x002cd548:	rts
Object::IsInventoryItem()
000570:0x002cd550:	imove	#return, 0x000000
000570:0x002cd560:	rts
000570:0x002cd568:	rts
Object::IsClothing()
000576:0x002cd570:	imove	#return, 0x000000
000576:0x002cd580:	rts
000576:0x002cd588:	rts
Object::IsFireplace()
000582:0x002cd590:	imove	#return, 0x000000
000582:0x002cd5a0:	rts
000582:0x002cd5a8:	rts
Object::IsTree()
000588:0x002cd5b0:	imove	#return, 0x000000
000588:0x002cd5c0:	rts
000588:0x002cd5c8:	rts
Object::IsRock()
000594:0x002cd5d0:	imove	#return, 0x000000
000594:0x002cd5e0:	rts
000594:0x002cd5e8:	rts
Object::IsWoodBase()
000600:0x002cd5f0:	imove	#return, 0x000000
000600:0x002cd600:	rts
000600:0x002cd608:	rts
Object::IsBush()
000606:0x002cd610:	imove	#return, 0x000000
000606:0x002cd620:	rts
000606:0x002cd628:	rts
Object::IsCuttable()
000611:0x002cd630:	imove	#return, 0x000000
000611:0x002cd640:	rts
000611:0x002cd648:	rts
Object::IsPeltBase()
000617:0x002cd650:	imove	#return, 0x000000
000617:0x002cd660:	rts
000617:0x002cd668:	rts
Object::IsWeapon()
000623:0x002cd670:	imove	#return, 0x000000
000623:0x002cd680:	rts
000623:0x002cd688:	rts
Object::IsMeleeWeapon()
000629:0x002cd690:	imove	#return, 0x000000
000629:0x002cd6a0:	rts
000629:0x002cd6a8:	rts
Object::IsBuilding()
000635:0x002cd6b0:	imove	#return, 0x000000
000635:0x002cd6c0:	rts
000635:0x002cd6c8:	rts
Object::GetWaterSourceObjectType()
000640:0x002cd6d0:	imove	#return, 0xffffffff
000640:0x002cd6e0:	rts
000640:0x002cd6e8:	rts
Object::IsWell()
000647:0x002cd6f0:	imove	#return, 0x000000
000647:0x002cd700:	rts
000647:0x002cd708:	rts
Object::ShootsExplosiveAmmo()
000652:0x002cd710:	imove	#return, 0x000000
000652:0x002cd720:	rts
000652:0x002cd728:	rts
Object::IsFuelStation()
000658:0x002cd730:	imove	#return, 0x000000
000658:0x002cd740:	rts
000658:0x002cd748:	rts
Object::IsTransport()
000664:0x002cd750:	imove	#return, 0x000000
000664:0x002cd760:	rts
000664:0x002cd768:	rts
Object::IsElectricAppliance()
000670:0x002cd770:	imove	#return, 0x000000
000670:0x002cd780:	rts
000670:0x002cd788:	rts
Object::CanUseConstruction()
000676:0x002cd790:	imove	#return, 0x000000
000676:0x002cd7a0:	rts
000676:0x002cd7a8:	rts
Object::CanUseConstructionBuild()
000682:0x002cd7b0:	imove	#return, 0x000000
000682:0x002cd7c0:	rts
000682:0x002cd7c8:	rts
Object::CanUseHandConstruction()
000688:0x002cd7d0:	imove	#return, 0x000000
000688:0x002cd7e0:	rts
000688:0x002cd7e8:	rts
Object::IsBeingBackstabbed()
000693:0x002cd7f0:	imove	#return, 0x000000
000693:0x002cd800:	rts
000693:0x002cd808:	rts
Object::IsFood()
000701:0x002cd810:	call	
000701:0x002cd820:	cmpi	#return, _i0
000701:0x002cd830:	bne	0x2cd8b0
000701:0x002cd838:	call	
000701:0x002cd848:	cmpi	#return, _i0
000701:0x002cd858:	bne	0x2cd8b0
000701:0x002cd860:	call	
000701:0x002cd870:	cmpi	#return, _i0
000701:0x002cd880:	bne	0x2cd8b0
000701:0x002cd888:	call	
000701:0x002cd898:	cmpi	#return, _i0
000701:0x002cd8a8:	beq	0x2cd8c8
000701:0x002cd8b0:	imove	#return, 0x000001
000701:0x002cd8c0:	jump	0x2cd8d8
000701:0x002cd8c8:	imove	#return, 0x000000
000701:0x002cd8d8:	rts
000701:0x002cd8e0:	rts
Object::IsFruit()
000706:0x002cd8e8:	imove	#return, 0x000000
000706:0x002cd8f8:	rts
000706:0x002cd900:	rts
Object::IsMeat()
000711:0x002cd908:	imove	#return, 0x000000
000711:0x002cd918:	rts
000711:0x002cd920:	rts
Object::IsCorpse()
000716:0x002cd928:	imove	#return, 0x000000
000716:0x002cd938:	rts
000716:0x002cd940:	rts
Object::IsMushroom()
000721:0x002cd948:	imove	#return, 0x000000
000721:0x002cd958:	rts
000721:0x002cd960:	rts
Object::IsHealthVisible()
000727:0x002cd968:	imove	#return, 0x000001
000727:0x002cd978:	rts
000727:0x002cd980:	rts
Object::ShowZonesHealth()
000733:0x002cd988:	imove	#return, 0x000000
000733:0x002cd998:	rts
000733:0x002cd9a0:	rts
Object::IsParticle()
000738:0x002cd9a8:	imove	#return, 0x000000
000738:0x002cd9b8:	rts
000738:0x002cd9c0:	rts
Object::IsItemTent()
000743:0x002cd9c8:	imove	#return, 0x000000
000743:0x002cd9d8:	rts
000743:0x002cd9e0:	rts
Object::IsScriptedLight()
000748:0x002cd9e8:	imove	#return, 0x000000
000748:0x002cd9f8:	rts
000748:0x002cda00:	rts
Object::IsHologram()
000753:0x002cda08:	imove	#return, 0x000000
000753:0x002cda18:	rts
000753:0x002cda20:	rts
Object::HasProxyParts()
000758:0x002cda28:	imove	#return, 0x000000
000758:0x002cda38:	rts
000758:0x002cda40:	rts
Object::CanObstruct()
000763:0x002cda48:	ncalli	Object.IsPlainObject()
000763:0x002cda50:	cmpi	#return, _i0
000763:0x002cda60:	beq	0x2cdaa0
000763:0x002cda68:	ncalli	Object.IsScenery()
000763:0x002cda70:	cmpi	#return, _i0
000763:0x002cda80:	bne	0x2cdaa0
000763:0x002cda88:	imove	#return, 0x000001
000763:0x002cda98:	jump	0x2cdab0
000763:0x002cdaa0:	imove	#return, 0x000000
000763:0x002cdab0:	rts
000763:0x002cdab8:	rts
Object::CanProxyObstruct()
000768:0x002cdac0:	call	
000768:0x002cdad0:	cmpi	#return, _i0
000768:0x002cdae0:	bne	0x2cdb10
000768:0x002cdae8:	call	
000768:0x002cdaf8:	cmpi	#return, _i0
000768:0x002cdb08:	beq	0x2cdb28
000768:0x002cdb10:	imove	#return, 0x000001
000768:0x002cdb20:	jump	0x2cdb38
000768:0x002cdb28:	imove	#return, 0x000000
000768:0x002cdb38:	rts
000768:0x002cdb40:	rts
Object::CanBeIgnoredByDroppedItem()
000773:0x002cdb48:	call	
000773:0x002cdb58:	cmpi	#return, _i0
000773:0x002cdb68:	bne	0x2cdc10
000773:0x002cdb70:	call	
000773:0x002cdb80:	cmpi	#return, _i0
000773:0x002cdb90:	bne	0x2cdc10
000773:0x002cdb98:	call	
000773:0x002cdba8:	cmpi	#return, _i0
000773:0x002cdbb8:	bne	0x2cdc10
000773:0x002cdbc0:	call	
000773:0x002cdbd0:	cmpi	#return, _i0
000773:0x002cdbe0:	bne	0x2cdc10
000773:0x002cdbe8:	call	
000773:0x002cdbf8:	cmpi	#return, _i0
000773:0x002cdc08:	beq	0x2cdc28
000773:0x002cdc10:	imove	#return, 0x000001
000773:0x002cdc20:	jump	0x2cdc38
000773:0x002cdc28:	imove	#return, 0x000000
000773:0x002cdc38:	rts
000773:0x002cdc40:	rts
Object::CanBeAutoDeleted()
000778:0x002cdc48:	imove	#return, 0x000001
000778:0x002cdc58:	rts
000778:0x002cdc60:	rts
Object::DisableVicinityIcon()
000784:0x002cdc68:	imove	#return, 0x000000
000784:0x002cdc78:	rts
000784:0x002cdc80:	rts
Object::GetNetworkIDString()
000794:0x002cdcd8:	icall	
000795:0x002cdce8:	icall	ToString(high)
000795:0x002cdcf8:	pushs	#return
000795:0x002cdd00:	icall	ToString(low)
000795:0x002cdd10:	moves	@s00, #return
000795:0x002cdd20:	pops	#return
000795:0x002cdd28:	adds	#return, #return, @s00
000795:0x002cdd38:	rts
000795:0x002cdd40:	rts
Object::GetDebugName#206374()
000800:0x002cdd70:	cmpcm	o, null
000800:0x002cdd80:	beq	0x2cdde0
000801:0x002cdd88:	call	
000801:0x002cdd98:	adds	@s01, #return, _s':'
000801:0x002cdda8:	moves	@s00, @s01
000801:0x002cddb8:	call	
000801:0x002cddc8:	adds	#return, @s00, #return
000801:0x002cddd8:	rts
000802:0x002cdde0:	moves	#return, _s'null'
000802:0x002cddf0:	rts
000802:0x002cddf8:	rts
Object::RPC()
000811:0x002cde00:	ncall	GetGame()
000811:0x002cde08:	movefm	[0xb5bdc290], params
000811:0x002cde18:	movefm	[0xb5bdc2e0], recipient
000811:0x002cde28:	ncalli	CGame.RPC(this, rpc_type, [0xb5bdc290], guaranteed, [0xb5bdc2e0])
000811:0x002cde48:	rts
Object::RPCSingleParam()
000817:0x002cde50:	ncall	GetGame()
000817:0x002cde58:	call	
000817:0x002cde78:	rts
Object::GetSelectionPositionOld()
000829:0x002cde80:	ncall	GetGame()
000829:0x002cde88:	ncalli	CGame.ObjectGetSelectionPosition(this, name)
000829:0x002cde98:	movev	#return, #return
000829:0x002cdea8:	rts
000829:0x002cdeb0:	rts
Object::GetSelectionPositionLS()
000834:0x002cdeb8:	ncall	GetGame()
000834:0x002cdec0:	ncalli	CGame.ObjectGetSelectionPositionLS(this, name)
000834:0x002cded0:	movev	#return, #return
000834:0x002cdee0:	rts
000834:0x002cdee8:	rts
Object::GetSelectionPositionMS()
000839:0x002cdef0:	ncall	GetGame()
000839:0x002cdef8:	ncalli	CGame.ObjectGetSelectionPositionMS(this, name)
000839:0x002cdf08:	movev	#return, #return
000839:0x002cdf18:	rts
000839:0x002cdf20:	rts
Object::GetSelectionPositionWS()
000844:0x002cdf28:	ncall	GetGame()
000844:0x002cdf30:	ncalli	CGame.ObjectGetSelectionPositionWS(this, name)
000844:0x002cdf40:	movev	#return, #return
000844:0x002cdf50:	rts
000844:0x002cdf58:	rts
Object::ModelToWorld()
000850:0x002cdf60:	ncall	GetGame()
000850:0x002cdf68:	ncalli	CGame.ObjectModelToWorld(this, modelPos)
000850:0x002cdf78:	movev	#return, #return
000850:0x002cdf88:	rts
000850:0x002cdf90:	rts
Object::WorldToModel()
000855:0x002cdf98:	ncall	GetGame()
000855:0x002cdfa0:	ncalli	CGame.ObjectWorldToModel(this, worldPos)
000855:0x002cdfb0:	movev	#return, #return
000855:0x002cdfc0:	rts
000855:0x002cdfc8:	rts
Object::ConfigGetBool()
000871:0x002cdfd0:	icall	
000871:0x002cdfe0:	move	@m00, #return
000871:0x002cdff0:	cmpi	@m00, _i1
000871:0x002ce000:	bne	0x2ce020
000871:0x002ce008:	imove	#return, 0x000001
000871:0x002ce018:	jump	0x2ce030
000871:0x002ce020:	imove	#return, 0x000000
000871:0x002ce030:	rts
000871:0x002ce038:	rts
Object::KindOf()
000916:0x002ce1c0:	imove	found, 0x000000
000917:0x002ce1d0:	call	
000917:0x002ce1e0:	moves	item_name, #return
000918:0x002ce1f0:	new	item_tag_array, array<string>
000919:0x002ce210:	adds	@s02, _s'cfgVehicles ', item_name
000919:0x002ce220:	moves	@s01, @s02
000919:0x002ce230:	adds	@s01, @s01, _s' itemInfo'
000919:0x002ce240:	moves	@s00, @s01
000919:0x002ce250:	movefm	[0xb5b691a0], item_tag_array
000919:0x002ce260:	ncalli	Object.ConfigGetTextArray(@s00, [0xb5b691a0])
000921:0x002ce270:	ncalli	array<string>.Count()
000921:0x002ce278:	move	array_size, #return
000922:0x002ce288:	imove	i, 0x000000
000922:0x002ce298:	jump	0x2ce2b8
000922:0x002ce2a0:	move	@m00, i
000922:0x002ce2b0:	inc	i
000922:0x002ce2b8:	cmpi	i, array_size
000922:0x002ce2c8:	bge	0x2ce328
000924:0x002ce2d0:	icall	
000924:0x002ce2e0:	moves	@s00, #return
000924:0x002ce2f0:	cmps	@s00, tag
000924:0x002ce300:	bne	0x2ce320
000926:0x002ce308:	imove	found, 0x000001
000927:0x002ce318:	jump	0x2ce328
000927:0x002ce320:	jump	0x2ce2a0
000930:0x002ce328:	move	#return, found
000930:0x002ce338:	release	item_tag_array
000930:0x002ce340:	rts
000930:0x002ce348:	release	item_tag_array
000930:0x002ce350:	rts
Object::IsAnyInherited()
000936:0x002ce3a8:	imove	i, 0x000000
000936:0x002ce3b8:	jump	0x2ce3d8
000936:0x002ce3c0:	move	@m00, i
000936:0x002ce3d0:	inc	i
000936:0x002ce3d8:	ncalli	array<typename>.Count()
000936:0x002ce3e0:	cmpi	i, #return
000936:0x002ce3f0:	bge	0x2ce478
000938:0x002ce3f8:	cmpi	ret, _i0
000938:0x002ce408:	bne	0x2ce448
000938:0x002ce410:	icall	
000938:0x002ce420:	ncall	IsInherited(this, #return)
000938:0x002ce430:	cmpi	#return, _i0
000938:0x002ce440:	beq	0x2ce460
000938:0x002ce448:	imove	ret, 0x000001
000938:0x002ce458:	jump	0x2ce470
000938:0x002ce460:	imove	ret, 0x000000
000938:0x002ce470:	jump	0x2ce3c0
000940:0x002ce478:	move	#return, ret
000940:0x002ce488:	rts
000940:0x002ce490:	rts
Object::DecreaseHealth#207003()
001024:0x002ce530:	ncalli	Object.DecreaseHealth(zoneName, healthType, value)
001026:0x002ce548:	ncalli	Object.GetHealth(zoneName, healthType)
001026:0x002ce558:	move	result_health, #return
001028:0x002ce568:	cmpi	auto_delete, _i0
001028:0x002ce578:	beq	0x2ce630
001028:0x002ce580:	cmpf	result_health, _f0.000000
001028:0x002ce590:	bgt	0x2ce630
001030:0x002ce598:	ncall	GetGame()
001030:0x002ce5a0:	call	
001030:0x002ce5b0:	pushc	#return
001030:0x002ce5b8:	ncall	GetGame()
001030:0x002ce5c0:	movec	@c00, #return
001030:0x002ce5d0:	popc	#return
001030:0x002ce5d8:	movec	@c01, @c00
001030:0x002ce5e8:	icall	SetInstance([0xb5dcc530], @c01)
001030:0x002ce5f8:	icall	
001030:0x002ce628:	release	#return
001030:0x002ce630:	rts
Object::GetHealth#207069()
001037:0x002ce638:	ncalli	Object.GetHealth(_s'', _s'')
001037:0x002ce648:	move	#return, #return
001037:0x002ce658:	rts
001037:0x002ce660:	rts
Object::GetHealth01#207083()
001042:0x002ce668:	ncalli	Object.GetHealth01(_s'', _s'')
001042:0x002ce678:	move	#return, #return
001042:0x002ce688:	rts
001042:0x002ce690:	rts
Object::GetMaxHealth#207097()
001047:0x002ce698:	ncalli	Object.GetMaxHealth(_s'', _s'')
001047:0x002ce6a8:	move	#return, #return
001047:0x002ce6b8:	rts
001047:0x002ce6c0:	rts
Object::SetHealth#207111()
001052:0x002ce6c8:	ncalli	Object.SetHealth(_s'', _s'', health)
001052:0x002ce6e0:	rts
Object::SetGlobalHealth()
001057:0x002ce6e8:	ncalli	Object.SetHealth(_s'', _s'', health)
001057:0x002ce700:	rts
Object::SetHealthLevel()
001062:0x002ce708:	ncalli	Object.GetHealthLevelValue(healthLevel, zone)
001062:0x002ce718:	call	
001062:0x002ce730:	rts
Object::AddHealthLevel()
001067:0x002ce7e8:	ncalli	Object.GetNumberOfHealthLevels(zone)
001067:0x002ce7f8:	subi	maxHealthLevel, #return, _i1
001068:0x002ce808:	ncalli	Object.GetHealthLevel(zone)
001068:0x002ce818:	citf	@f01, #return
001068:0x002ce828:	citf	@f02, healthLevelDelta
001068:0x002ce838:	addf	@f01, @f01, @f02
001068:0x002ce848:	move	@f00, @f01
001068:0x002ce858:	citf	@f01, maxHealthLevel
001068:0x002ce868:	icall	Clamp(@f00, _f0.000000, @f01)
001068:0x002ce880:	cfti	newHealthLevel, #return
001069:0x002ce890:	call	
001069:0x002ce8a8:	rts
Object::SetHealth01()
001075:0x002ce8b0:	ncalli	Object.GetMaxHealth(zoneName, healthType)
001075:0x002ce8c0:	mulf	@f01, #return, coef
001075:0x002ce8d0:	move	@f00, @f01
001075:0x002ce8e0:	ncalli	Object.SetHealth(zoneName, healthType, @f00)
001075:0x002ce8f8:	rts
Object::SetHealthMax()
001080:0x002ce900:	ncalli	Object.GetMaxHealth(zoneName, healthType)
001080:0x002ce910:	ncalli	Object.SetHealth(zoneName, healthType, #return)
001080:0x002ce928:	rts
Object::AddHealth#207282()
001085:0x002ce930:	ncalli	Object.AddHealth(_s'', _s'', add_health)
001085:0x002ce948:	rts
Object::DecreaseHealth#207299()
001090:0x002ce950:	call	
001090:0x002ce970:	rts
Object::DecreaseHealthCoef()
001095:0x002cea88:	call	
001095:0x002cea98:	move	current_health, #return
001096:0x002ceaa8:	call	
001096:0x002ceab8:	subf	final_health_coef, #return, dec_health_coef
001097:0x002ceac8:	call	
001097:0x002cead8:	mulf	final_health, #return, final_health_coef
001098:0x002ceae8:	subf	@f01, current_health, final_health
001098:0x002ceaf8:	move	@f00, @f01
001098:0x002ceb08:	ncalli	Object.DecreaseHealth(_s'', _s'', @f00)
001098:0x002ceb20:	rts
Object::EEOnDamageCalculated()
001119:0x002ceb28:	imove	#return, 0x000001
001119:0x002ceb38:	rts
001119:0x002ceb40:	rts
Object::IsRuined()
001194:0x002ceb48:	ncalli	Object.IsDamageDestroyed()
001194:0x002ceb50:	move	#return, #return
001194:0x002ceb60:	rts
001194:0x002ceb68:	rts
Object::GetActions()
001203:0x002ceb70:	movem	actions, actions
001203:0x002ceb80:	rts
Object::PlaySound()
001210:0x002ceb88:	ncall	GetGame()
001210:0x002ceb90:	ncalli	CGame.CreateSoundOnObject(this, sound_name, range, false, create_local)
001210:0x002cebb0:	movetm	#return, #return
001210:0x002cebc0:	rts
001210:0x002cebc8:	rts
Object::PlaySoundLoop()
001216:0x002cebd0:	ncall	GetGame()
001216:0x002cebd8:	ncalli	CGame.CreateSoundOnObject(this, sound_name, range, true, create_local)
001216:0x002cebf8:	movetm	#return, #return
001216:0x002cec08:	rts
001216:0x002cec10:	rts
Object::PlaySoundSet()
001222:0x002cec18:	ncall	GetGame()
001222:0x002cec20:	cmpc	#return, null
001222:0x002cec30:	beq	0x2ced58
001222:0x002cec38:	ncall	GetGame()
001222:0x002cec40:	ncalli	CGame.IsDedicatedServer()
001222:0x002cec48:	cmpi	#return, _i0
001222:0x002cec58:	bne	0x2ced58
001224:0x002cec60:	cmpcm	sound, null
001224:0x002cec70:	beq	0x2cece8
001226:0x002cec78:	cmpi	loop, _i0
001226:0x002cec88:	beq	0x2cecc0
001228:0x002cec90:	imove	#return, 0x000001
001228:0x002ceca0:	movem	sound, sound
001228:0x002cecb0:	rts
001228:0x002cecb8:	jump	0x2cece8
001232:0x002cecc0:	call	
001232:0x002cecd0:	movem	sound, sound
001232:0x002cece0:	release	sound
001236:0x002cece8:	call	PlaySoundOnObject(sound_set, this, fade_in, fade_out, loop)
001236:0x002ced08:	movem	sound, #return
001236:0x002ced18:	release	#return
001237:0x002ced20:	call	
001239:0x002ced30:	imove	#return, 0x000001
001239:0x002ced40:	movem	sound, sound
001239:0x002ced50:	rts
001242:0x002ced58:	imove	#return, 0x000000
001242:0x002ced68:	movem	sound, sound
001242:0x002ced78:	rts
001242:0x002ced80:	movem	sound, sound
001242:0x002ced90:	rts
Object::PlaySoundSetLoop()
001248:0x002ced98:	call	
001248:0x002cedb8:	movem	sound, sound
001248:0x002cedc8:	release	sound
001248:0x002cedd0:	move	#return, #return
001248:0x002cede0:	movem	sound, sound
001248:0x002cedf0:	rts
001248:0x002cedf8:	movem	sound, sound
001248:0x002cee08:	rts
Object::PlaySoundSetAtMemoryPointLoopedSafe()
001254:0x002cee10:	cmpcm	sound, null
001254:0x002cee20:	beq	0x2cee60
001254:0x002cee28:	call	
001254:0x002cee38:	cmpi	#return, _i0
001254:0x002cee48:	beq	0x2cee60
001256:0x002cee50:	call	
001258:0x002cee60:	call	
001258:0x002cee80:	movem	sound, sound
001258:0x002cee90:	release	sound
001258:0x002cee98:	move	#return, #return
001258:0x002ceea8:	movem	sound, sound
001258:0x002ceeb8:	rts
001258:0x002ceec0:	movem	sound, sound
001258:0x002ceed0:	rts
Object::PlaySoundSetAtMemoryPointLooped()
001263:0x002ceed8:	call	
001263:0x002cef00:	movem	sound, sound
001263:0x002cef10:	release	sound
001263:0x002cef18:	move	#return, #return
001263:0x002cef28:	movem	sound, sound
001263:0x002cef38:	rts
001263:0x002cef40:	movem	sound, sound
001263:0x002cef50:	rts
Object::PlaySoundSetAtMemoryPoint()
001271:0x002cefb8:	ncalli	Object.MemoryPointExists(memoryPoint)
001271:0x002cefc8:	cmpi	#return, _i0
001271:0x002cefd8:	beq	0x2cf028
001273:0x002cefe0:	ncalli	Object.GetMemoryPointPos(memoryPoint)
001273:0x002ceff0:	movev	pos, #return
001274:0x002cf000:	call	
001274:0x002cf010:	movev	pos, #return
001274:0x002cf020:	jump	0x2cf090
001278:0x002cf028:	icall	Format(_s'Memory point %1 not found when playing soundset %2 at memory point location', memoryPoint, soundSet, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
001278:0x002cf058:	icall	ErrorEx(#return, _i2)
001279:0x002cf068:	imove	#return, 0x000000
001279:0x002cf078:	movem	sound, sound
001279:0x002cf088:	rts
001282:0x002cf090:	call	PlaySoundEnviroment(soundSet, pos, play_fade_in, stop_fade_out, looped)
001282:0x002cf0b0:	movem	sound, #return
001282:0x002cf0c0:	release	#return
001283:0x002cf0c8:	imove	#return, 0x000001
001283:0x002cf0d8:	movem	sound, sound
001283:0x002cf0e8:	rts
001283:0x002cf0f0:	movem	sound, sound
001283:0x002cf100:	rts
Object::StopSoundSet()
001289:0x002cf108:	cmpcm	sound, null
001289:0x002cf118:	beq	0x2cf1b0
001289:0x002cf120:	ncall	GetGame()
001289:0x002cf128:	cmpc	#return, null
001289:0x002cf138:	beq	0x2cf1b0
001289:0x002cf140:	ncall	GetGame()
001289:0x002cf148:	ncalli	CGame.IsDedicatedServer()
001289:0x002cf150:	cmpi	#return, _i0
001289:0x002cf160:	bne	0x2cf1b0
001291:0x002cf168:	call	
001292:0x002cf178:	movetm	sound, null
001294:0x002cf188:	imove	#return, 0x000001
001294:0x002cf198:	movem	sound, sound
001294:0x002cf1a8:	rts
001297:0x002cf1b0:	imove	#return, 0x000000
001297:0x002cf1c0:	movem	sound, sound
001297:0x002cf1d0:	rts
001297:0x002cf1d8:	movem	sound, sound
001297:0x002cf1e8:	rts
Object::HasNetworkID()
001308:0x002cf290:	imove	lo, 0x000000
001309:0x002cf2a0:	imove	hi, 0x000000
001310:0x002cf2b0:	icall	
001311:0x002cf2c0:	move	@m00, lo
001311:0x002cf2d0:	move	@m01, hi
001311:0x002cf2e0:	ori	#return, @m00, @m01
001311:0x002cf2f0:	rts
001311:0x002cf2f8:	rts
Object::NameOverride()
001316:0x002cf300:	imove	#return, 0x000000
001316:0x002cf310:	moves	output, output
001316:0x002cf320:	rts
001316:0x002cf328:	moves	output, output
001316:0x002cf338:	rts
Object::DescriptionOverride()
001321:0x002cf340:	imove	#return, 0x000000
001321:0x002cf350:	moves	output, output
001321:0x002cf360:	rts
001321:0x002cf368:	moves	output, output
001321:0x002cf378:	rts
Object::CanBeRepairedToPristine()
001328:0x002cf380:	imove	#return, 0x000000
001328:0x002cf390:	rts
001328:0x002cf398:	rts
Object::GetCenter()
001333:0x002cf3c8:	ncalli	Object.MemoryPointExists(_s'ce_center')
001333:0x002cf3d8:	cmpi	#return, _i0
001333:0x002cf3e8:	beq	0x2cf430
001336:0x002cf3f0:	ncalli	Object.GetMemoryPointPos(_s'ce_center')
001336:0x002cf400:	call	
001336:0x002cf410:	movev	#return, #return
001336:0x002cf420:	rts
001336:0x002cf428:	jump	0x2cf468
001341:0x002cf430:	ncalli	Object.GetPosition()
001341:0x002cf438:	ncall	Vector(_f0.000000, _f0.200000, _f0.000000)
001341:0x002cf450:	addv	#return, #return, #return
001341:0x002cf460:	rts
001341:0x002cf468:	rts
Object::AddArrow()
001351:0x002cf570:	ncalli	Object.GetFireGeometryLevel()
001351:0x002cf578:	icall	
001351:0x002cf588:	move	pivot, #return
001355:0x002cf598:	cmpi	pivot, _i-1
001355:0x002cf5a8:	bne	0x2cf5c8
001357:0x002cf5b0:	icall	GetTransform(this, parentTransMat)
001357:0x002cf5c0:	jump	0x2cf5d8
001361:0x002cf5c8:	ncalli	Object.GetBoneTransformWS(pivot, parentTransMat)
001364:0x002cf5d8:	ncall	GetScale(this)
001364:0x002cf5e8:	move	scale, #return
001365:0x002cf5f8:	mulf	@f01, scale, scale
001365:0x002cf608:	move	@f00, @f01
001365:0x002cf618:	divf	@f00, _f1.000000, @f00
001365:0x002cf628:	move	scale, @f00
001367:0x002cf638:	icall	GetTransform(arrow, arrowTransMat)
001368:0x002cf648:	icall	MatrixInvMultiply4(parentTransMat, arrowTransMat, arrowTransMat)
001371:0x002cf660:	icall	MatrixOrthogonalize4(arrowTransMat)
001373:0x002cf670:	cfv	@v00, arrowTransMat[_i3]
001373:0x002cf680:	scalev	@v00, @v00, scale
001373:0x002cf690:	ctv	arrowTransMat[_i3], @v00
001375:0x002cf6a0:	movefm	[0xd3172f58], arrow
001375:0x002cf6b0:	ncall	SetTransform([0xd3172f58], arrowTransMat)
001377:0x002cf6c0:	movefm	[0xd3173778], arrow
001377:0x002cf6d0:	ncall	AddChild(this, [0xd3173778], pivot, _i0)
001377:0x002cf6e8:	rts
Object::CanBeActionTarget()
001382:0x002cf6f0:	call	
001382:0x002cf700:	cmpi	#return, _i0
001382:0x002cf710:	beq	0x2cf730
001382:0x002cf718:	imove	@m00, 0x000000
001382:0x002cf728:	jump	0x2cf740
001382:0x002cf730:	imove	@m00, 0x000001
001382:0x002cf740:	move	#return, @m00
001382:0x002cf750:	rts
001382:0x002cf758:	rts
SoundObjectBuilder::BuildSoundObject()
//scripts/3_Game/sound.c
000051:0x002cf760:	ncall	GetGame()
000051:0x002cf768:	ncalli	CGame.GetSoundScene()
000051:0x002cf770:	ncalli	AbstractSoundScene.BuildSoundObject(this)
000051:0x002cf780:	movetm	#return, #return
000051:0x002cf790:	rts
000051:0x002cf798:	rts
AbstractWaveEvents::AbstractWaveEvents()
000081:0x002cf7a0:	new	Event_OnSoundWaveStarted, ScriptInvoker
000081:0x002cf7c0:	new	Event_OnSoundWaveStopped, ScriptInvoker
000081:0x002cf7e0:	new	Event_OnSoundWaveLoaded, ScriptInvoker
000081:0x002cf800:	new	Event_OnSoundWaveHeaderLoaded, ScriptInvoker
000081:0x002cf820:	new	Event_OnSoundWaveEnded, ScriptInvoker
000081:0x002cf840:	rts
AbstractWave::InitEvents()
000094:0x002cf870:	new	events, AbstractWaveEvents
000095:0x002cf890:	movefm	@c00, events
000095:0x002cf8a0:	icall	
000095:0x002cf8b0:	release	events
000095:0x002cf8b8:	rts
AbstractWave::AbstractWave()
000102:0x002cf8c0:	call	
000102:0x002cf8d0:	rts
AbstractWave::PlayWithOffset()
000112:0x002cf8d8:	icall	
000113:0x002cf8e0:	icall	
000113:0x002cf8f0:	rts
AbstractWave::GetEvents()
000137:0x002cf8f8:	icall	
000137:0x002cf900:	icall	SafeCastType([0xb5b3e2a0], @c01, #return)
000137:0x002cf918:	movetm	#return, @c01
000137:0x002cf928:	rts
000137:0x002cf930:	rts
AbstractWave::OnPlay()
000142:0x002cf938:	call	
000142:0x002cf948:	movefm	@c00, #return
000142:0x002cf958:	movefm	@c01, Event_OnSoundWaveStarted
000142:0x002cf968:	icall	
000142:0x002cf998:	release	#return
000142:0x002cf9a0:	rts
AbstractWave::OnStop()
000147:0x002cf9a8:	call	
000147:0x002cf9b8:	movefm	@c00, #return
000147:0x002cf9c8:	movefm	@c01, Event_OnSoundWaveStopped
000147:0x002cf9d8:	icall	
000147:0x002cfa08:	release	#return
000147:0x002cfa10:	rts
AbstractWave::OnLoad()
000152:0x002cfa18:	call	
000152:0x002cfa28:	movefm	@c00, #return
000152:0x002cfa38:	movefm	@c01, Event_OnSoundWaveLoaded
000152:0x002cfa48:	icall	
000152:0x002cfa78:	release	#return
000152:0x002cfa80:	rts
AbstractWave::OnHeaderLoad()
000157:0x002cfa88:	call	
000157:0x002cfa98:	movefm	@c00, #return
000157:0x002cfaa8:	movefm	@c01, Event_OnSoundWaveHeaderLoaded
000157:0x002cfab8:	icall	
000157:0x002cfae8:	release	#return
000157:0x002cfaf0:	rts
AbstractWave::OnEnd()
000162:0x002cfaf8:	call	
000162:0x002cfb08:	movefm	@c00, #return
000162:0x002cfb18:	movefm	@c01, Event_OnSoundWaveEnded
000162:0x002cfb28:	icall	
000162:0x002cfb58:	release	#return
000162:0x002cfb60:	rts
PPEMatClassParameterCommandData::PPEMatClassParameterCommandData()
//scripts/3_Game/ppemanager\materials\matparameters\ppematclassparametercommanddata.c
000022:0x002cfb68:	move	m_MaterialIndex, mat_idx
000023:0x002cfb78:	move	m_ParameterIndex, parameter_idx
000024:0x002cfb88:	movem	m_Parent, parent
000026:0x002cfb98:	new	m_CommandLayersArray, array<int>
000027:0x002cfbb8:	imove	m_UpdatedCount, 0x000000
000028:0x002cfbc8:	new	m_RequestMap, map<int,@PPERequestParamDataBase>
000028:0x002cfbe8:	rts
PPEMatClassParameterCommandData::GetParameterVarType()
000033:0x002cfbf0:	imove	#return, 0xffffffff
000033:0x002cfc00:	rts
000033:0x002cfc08:	rts
PPEMatClassParameterCommandData::SetMaterialIndex()
000038:0x002cfc10:	move	m_MaterialIndex, value
000038:0x002cfc20:	rts
PPEMatClassParameterCommandData::SetParameterIndex()
000043:0x002cfc28:	move	m_ParameterIndex, value
000043:0x002cfc38:	rts
PPEMatClassParameterCommandData::SetParent()
000048:0x002cfc40:	movem	m_Parent, parent
000048:0x002cfc50:	rts
PPEMatClassParameterCommandData::InsertRequestData()
000053:0x002cfc58:	call	
000053:0x002cfc68:	movefm	@c00, request_data
000053:0x002cfc78:	movefm	[0xb5b35828], m_RequestMap
000053:0x002cfc88:	icall	
000053:0x002cfc98:	rts
PPEMatClassParameterCommandData::Update()
000059:0x002cfd98:	cmpcm	m_Dependencies, null
000059:0x002cfda8:	beq	0x2cffc8
000059:0x002cfdb0:	movefm	[0xb5b90170], m_Dependencies
000059:0x002cfdc0:	ncalli	map<int,@array<int>>.Count()
000059:0x002cfdc8:	move	@m00, #return
000059:0x002cfdd8:	cmpi	@m00, _i0
000059:0x002cfde8:	ble	0x2cffc8
000059:0x002cfdf0:	cmpi	order, DEPENDENCY_ORDER_HIGHEST
000059:0x002cfe00:	bge	0x2cffc8
000061:0x002cfe08:	imove	key_mat, 0xffffffff
000062:0x002cfe18:	imove	element_par, 0xffffffff
000063:0x002cfe28:	imove	i, 0x000000
000063:0x002cfe38:	jump	0x2cfe58
000063:0x002cfe40:	move	@m00, i
000063:0x002cfe50:	inc	i
000063:0x002cfe58:	movefm	[0xb5b90170], m_Dependencies
000063:0x002cfe68:	ncalli	map<int,@array<int>>.Count()
000063:0x002cfe70:	cmpi	i, #return
000063:0x002cfe80:	bge	0x2cffc8
000065:0x002cfe88:	movefm	[0xb5b90170], m_Dependencies
000065:0x002cfe98:	icall	
000065:0x002cfea8:	move	key_mat, #return
000066:0x002cfeb8:	imove	j, 0x000000
000066:0x002cfec8:	jump	0x2cfee8
000066:0x002cfed0:	move	@m00, j
000066:0x002cfee0:	inc	j
000066:0x002cfee8:	movefm	[0xb5b90170], m_Dependencies
000066:0x002cfef8:	icall	
000066:0x002cff08:	ncalli	array<int>.Count()
000066:0x002cff10:	cmpi	j, #return
000066:0x002cff20:	bge	0x2cffc0
000068:0x002cff28:	movefm	[0xb5b90170], m_Dependencies
000068:0x002cff38:	icall	
000068:0x002cff48:	icall	
000068:0x002cff58:	move	element_par, #return
000069:0x002cff68:	call	GetPPEManager()
000069:0x002cff78:	addi	@m01, order, _i1
000069:0x002cff88:	move	@m00, @m01
000069:0x002cff98:	call	
000069:0x002cffb0:	release	#return
000069:0x002cffb8:	jump	0x2cfed0
000069:0x002cffc0:	jump	0x2cfe40
000069:0x002cffc8:	movem	p_total, p_total
000069:0x002cffd8:	move	setting_defaults, setting_defaults
000069:0x002cffe8:	rts
PPEMatClassParameterCommandData::ModifyResultValues()
000076:0x002cfff0:	movem	result_values, result_values
000076:0x002d0000:	rts
PPEMatClassParameterCommandData::AddPriorityInfo()
000083:0x002d0008:	movefm	[0xd31561b0], m_CommandLayersArray
000083:0x002d0018:	icall	
000083:0x002d0028:	move	@m00, #return
000083:0x002d0038:	cmpi	@m00, _i-1
000083:0x002d0048:	bne	0x2d0098
000085:0x002d0050:	movefm	[0xd31561b0], m_CommandLayersArray
000085:0x002d0060:	icall	
000086:0x002d0070:	movefm	[0xd31561b0], m_CommandLayersArray
000086:0x002d0080:	ncalli	array<int>.Sort(_i0)
000086:0x002d0090:	jump	0x2d0098
000086:0x002d0098:	rts
PPEMatClassParameterCommandData::RegisterDefaults()
000102:0x002d00a0:	movem	m_Defaults, p
000103:0x002d00b0:	call	
000104:0x002d00c0:	call	
000104:0x002d00d0:	rts
PPEMatClassParameterCommandData::SetParameterValueDefault()
000111:0x002d00d8:	movem	p_total, p_total
000111:0x002d00e8:	rts
PPEMatClassParameterCommandData::GetDefaultValues()
000118:0x002d00f0:	movem	#return, m_Defaults
000118:0x002d0100:	rts
000118:0x002d0108:	rts
PPEMatClassParameterCommandData::GetCurrentValues()
000124:0x002d0110:	movem	#return, m_CurrentValues
000124:0x002d0120:	rts
000124:0x002d0128:	rts
PPERequester_UnconEffects::OnStart()
//scripts/3_Game/ppemanager\requesters\pperunconeffects.c
000007:0x002d0130:	call	
000009:0x002d0140:	movefm	@c01, par
000009:0x002d0150:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000009:0x002d0168:	movec	@c02, @c00
000009:0x002d0178:	move	m_Intensity, param1
000011:0x002d0188:	move	val, m_Intensity
000011:0x002d0198:	call	
000012:0x002d01c0:	new	@c01, array<float>
000012:0x002d01e0:	pushc	@c01
000012:0x002d01e8:	icall	
000012:0x002d01f8:	icall	
000012:0x002d0208:	icall	
000012:0x002d0218:	icall	
000012:0x002d0228:	call	
000012:0x002d0248:	popc	@c01
000012:0x002d0250:	release	@c01
000012:0x002d0258:	rts
NoticeSpacer::OnEvent()
//scripts/3_Game/gui\spacers\noticespacer.c
000006:0x002d0260:	call	
000008:0x002d0270:	call	
000008:0x002d0290:	move	#return, #return
000008:0x002d02a0:	rts
000008:0x002d02a8:	rts
DebugPrint::OnInit()
//scripts/3_Game/tools\debugprint.c
000016:0x002d0378:	ctv	s_MsgPrefix[MSG_LOG], _s'Log'
000017:0x002d0388:	ctv	s_MsgPrefix[MSG_WARNING], _s'Warning'
000018:0x002d0398:	ctv	s_MsgPrefix[MSG_ERROR], _s'Error'
000020:0x002d03a8:	moves	s_MsgStackMarkStart, _s'-- Stack trace --'
000021:0x002d03b8:	imove	s_MsgStackMarked, 0x000000
000022:0x002d03c8:	moves	s_MsgStackMarkEnd, _s'-----------------'
000024:0x002d03d8:	imove	s_TraceAllLogs, 0x000000
000024:0x002d03e8:	rts
DebugPrint::Log()
000039:0x002d03f0:	call	LogMessage(msg, MSG_LOG, s_TraceAllLogs)
000039:0x002d0408:	rts
DebugPrint::LogAndTrace()
000058:0x002d0410:	call	LogMessage(msg, MSG_LOG, true)
000058:0x002d0428:	rts
DebugPrint::LogWarning()
000073:0x002d0430:	call	LogMessage(msg, MSG_WARNING, s_TraceAllLogs)
000073:0x002d0448:	rts
DebugPrint::LogWarningAndTrace()
000092:0x002d0450:	call	LogMessage(msg, MSG_WARNING, true)
000092:0x002d0468:	rts
DebugPrint::LogError()
000107:0x002d0470:	call	LogMessage(msg, MSG_ERROR, s_TraceAllLogs)
000107:0x002d0488:	rts
DebugPrint::LogErrorAndTrace()
000126:0x002d0490:	call	LogMessage(msg, MSG_ERROR, true)
000126:0x002d04a8:	rts
DebugPrint::AdjustDebugLog()
000143:0x002d04b0:	call	IsStackTrace(msg)
000143:0x002d04c0:	cmpi	#return, _i0
000143:0x002d04d0:	beq	0x2d0500
000145:0x002d04d8:	call	TrimStackTrace(msg)
000145:0x002d04e8:	moves	#return, #return
000145:0x002d04f8:	rts
000148:0x002d0500:	call	IsDebugLog(msg)
000148:0x002d0510:	cmpi	#return, _i0
000148:0x002d0520:	beq	0x2d0550
000150:0x002d0528:	call	TrimDebugLog(msg)
000150:0x002d0538:	moves	#return, #return
000150:0x002d0548:	rts
000153:0x002d0550:	moves	#return, msg
000153:0x002d0560:	rts
000153:0x002d0568:	rts
DebugPrint::EnableTracingLogs()
000158:0x002d0570:	move	s_TraceAllLogs, enable
000158:0x002d0580:	rts
DebugPrint::IsDebugLog()
000163:0x002d05b0:	imove	i, 0x000000
000163:0x002d05c0:	jump	0x2d05d0
000163:0x002d05c8:	inc	i
000163:0x002d05d0:	cmpi	i, MSG_COUNT
000163:0x002d05e0:	bge	0x2d0650
000165:0x002d05e8:	cfv	@s00, s_MsgPrefix[i]
000165:0x002d05f8:	ncall	IndexOf(msg, @s00)
000165:0x002d0608:	move	@m00, #return
000165:0x002d0618:	cmpi	@m00, _i-1
000165:0x002d0628:	beq	0x2d0648
000167:0x002d0630:	imove	#return, 0x000001
000167:0x002d0640:	rts
000167:0x002d0648:	jump	0x2d05c8
000171:0x002d0650:	imove	#return, 0x000000
000171:0x002d0660:	rts
000171:0x002d0668:	rts
DebugPrint::TrimDebugLog()
000175:0x002d0778:	ncall	Length(msg)
000175:0x002d0788:	move	msg_lenght, #return
000176:0x002d0798:	ncall	IndexOf(msg, _s''')
000176:0x002d07a8:	addi	log_start, #return, _i1
000178:0x002d07b8:	cmpi	log_start, _i-1
000178:0x002d07c8:	bne	0x2d07e8
000180:0x002d07d0:	moves	#return, msg
000180:0x002d07e0:	rts
000183:0x002d07e8:	subi	@m01, msg_lenght, log_start
000183:0x002d07f8:	move	@m00, @m01
000183:0x002d0808:	subi	log_lenght, @m00, _i2
000185:0x002d0818:	icall	Substring(msg, log_start, log_lenght)
000185:0x002d0830:	moves	#return, #return
000185:0x002d0840:	rts
000185:0x002d0848:	rts
DebugPrint::IsStackTrace()
000189:0x002d0850:	cmpi	s_MsgStackMarked, _i0
000189:0x002d0860:	beq	0x2d08c8
000189:0x002d0868:	ncall	IndexOf(msg, s_MsgStackMarkEnd)
000189:0x002d0878:	move	@m00, #return
000189:0x002d0888:	cmpi	@m00, _i-1
000189:0x002d0898:	beq	0x2d08c8
000191:0x002d08a0:	imove	s_MsgStackMarked, 0x000000
000192:0x002d08b0:	imove	#return, 0x000000
000192:0x002d08c0:	rts
000195:0x002d08c8:	cmpi	s_MsgStackMarked, _i0
000195:0x002d08d8:	beq	0x2d08f8
000197:0x002d08e0:	imove	#return, 0x000001
000197:0x002d08f0:	rts
000200:0x002d08f8:	ncall	IndexOf(msg, s_MsgStackMarkStart)
000200:0x002d0908:	move	@m00, #return
000200:0x002d0918:	cmpi	@m00, _i-1
000200:0x002d0928:	beq	0x2d0958
000202:0x002d0930:	imove	s_MsgStackMarked, 0x000001
000203:0x002d0940:	imove	#return, 0x000001
000203:0x002d0950:	rts
000206:0x002d0958:	imove	#return, 0x000000
000206:0x002d0968:	rts
000206:0x002d0970:	rts
DebugPrint::TrimStackTrace()
000210:0x002d09a0:	ncall	IndexOf(msg, _s'DebugPrint.c')
000210:0x002d09b0:	move	@m00, #return
000210:0x002d09c0:	cmpi	@m00, _i-1
000210:0x002d09d0:	beq	0x2d09f0
000212:0x002d09d8:	moves	#return, Empty
000212:0x002d09e8:	rts
000215:0x002d09f0:	moves	#return, msg
000215:0x002d0a00:	rts
000215:0x002d0a08:	rts
DebugPrint::LogMessage()
000220:0x002d0ab0:	cfv	@s02, s_MsgPrefix[msg_type]
000220:0x002d0ac0:	adds	@s02, _s'[', @s02
000220:0x002d0ad0:	moves	@s01, @s02
000220:0x002d0ae0:	adds	@s01, @s01, _s']: '
000220:0x002d0af0:	moves	@s00, @s01
000220:0x002d0b00:	adds	mesg, @s00, msg
000222:0x002d0b10:	icall	Print(mesg)
000224:0x002d0b20:	cmpi	trace, _i0
000224:0x002d0b30:	beq	0x2d0b40
000226:0x002d0b38:	icall	DumpStack()
000226:0x002d0b40:	rts
Hit_Sand::Hit_Sand()
//scripts/3_Game/effects\effectparticle\bulletimpactbase\hit_sand.c
000005:0x002d0b48:	call	
000006:0x002d0b58:	call	
000007:0x002d0b68:	call	
000007:0x002d0b78:	rts
BIOSErrorModule::BIOSErrorModule()
//scripts/3_Game/global\errormodulehandler\bioserrormodule.c
000066:0x002d0b80:	ncalli	BIOSErrorModule.SetCategory(_i5)
000066:0x002d0b90:	rts
BIOSErrorModule::InitOptionalVariables()
000071:0x002d0bc0:	call	
000073:0x002d0bd0:	moves	m_Header, _s'#STR_BIOS_BIOSError'
000073:0x002d0be0:	rts
BIOSErrorModule::FillErrorDataMap()
000078:0x002d1278:	call	
000080:0x002d1288:	call	
000081:0x002d12a0:	call	
000082:0x002d12b8:	call	
000083:0x002d12d0:	call	
000084:0x002d12e8:	call	
000085:0x002d1300:	call	
000086:0x002d1318:	call	
000087:0x002d1330:	call	
000088:0x002d1348:	call	
000090:0x002d1360:	call	
000092:0x002d1378:	call	
000093:0x002d1390:	call	
000095:0x002d13a8:	call	
000096:0x002d13c0:	call	
000097:0x002d13d8:	call	
000099:0x002d13f0:	call	
000101:0x002d1408:	call	
000102:0x002d1420:	call	
000104:0x002d1438:	call	
000106:0x002d1450:	call	
000107:0x002d1468:	call	
000107:0x002d1480:	rts
BIOSErrorModule::InsertBIOSError()
000115:0x002d1488:	call	
000115:0x002d14a0:	rts
ModStructure::ModStructure()
//scripts/3_Game/client\mods\modstructure.c
000015:0x002d14a8:	move	m_ModIndex, index
000016:0x002d14b8:	moves	m_ModPath, path
000017:0x002d14c8:	call	
000017:0x002d14d8:	rts
ModStructure::LoadData()
000022:0x002d15f8:	ncall	GetGame()
000022:0x002d1600:	moves	[0xb5bda430], m_ModPath
000022:0x002d1610:	ncalli	CGame.ConfigIsExisting([0xb5bda430])
000022:0x002d1620:	cmpi	#return, _i0
000022:0x002d1630:	beq	0x2d17c0
000024:0x002d1638:	ncall	GetGame()
000024:0x002d1640:	adds	@s01, m_ModPath, _s' name'
000024:0x002d1650:	moves	@s00, @s01
000024:0x002d1660:	icall	
000025:0x002d1670:	ncall	GetGame()
000025:0x002d1678:	adds	@s01, m_ModPath, _s' picture'
000025:0x002d1688:	moves	@s00, @s01
000025:0x002d1698:	icall	
000026:0x002d16a8:	ncall	GetGame()
000026:0x002d16b0:	adds	@s01, m_ModPath, _s' logo'
000026:0x002d16c0:	moves	@s00, @s01
000026:0x002d16d0:	icall	
000027:0x002d16e0:	ncall	GetGame()
000027:0x002d16e8:	adds	@s01, m_ModPath, _s' logoSmall'
000027:0x002d16f8:	moves	@s00, @s01
000027:0x002d1708:	icall	
000028:0x002d1718:	ncall	GetGame()
000028:0x002d1720:	adds	@s01, m_ModPath, _s' logoOver'
000028:0x002d1730:	moves	@s00, @s01
000028:0x002d1740:	icall	
000029:0x002d1750:	ncall	GetGame()
000029:0x002d1758:	adds	@s01, m_ModPath, _s' tooltip'
000029:0x002d1768:	moves	@s00, @s01
000029:0x002d1778:	icall	
000030:0x002d1788:	ncall	GetGame()
000030:0x002d1790:	adds	@s01, m_ModPath, _s' overview'
000030:0x002d17a0:	moves	@s00, @s01
000030:0x002d17b0:	icall	
000030:0x002d17c0:	rts
ModStructure::GetModName()
000036:0x002d17c8:	moves	#return, m_ModName
000036:0x002d17d8:	rts
000036:0x002d17e0:	rts
ModStructure::GetModLogo()
000041:0x002d17e8:	moves	#return, m_ModName
000041:0x002d17f8:	rts
000041:0x002d1800:	rts
ModStructure::GetModLogoSmall()
000046:0x002d1808:	moves	#return, m_ModName
000046:0x002d1818:	rts
000046:0x002d1820:	rts
ModStructure::GetModLogoOver()
000051:0x002d1828:	moves	#return, m_ModName
000051:0x002d1838:	rts
000051:0x002d1840:	rts
ModStructure::GetModActionURL()
000056:0x002d1848:	moves	#return, m_ModName
000056:0x002d1858:	rts
000056:0x002d1860:	rts
ModStructure::GetModToltip()
000061:0x002d1868:	moves	#return, m_ModName
000061:0x002d1878:	rts
000061:0x002d1880:	rts
ModStructure::GetModOverview()
000066:0x002d1888:	moves	#return, m_ModName
000066:0x002d1898:	rts
000066:0x002d18a0:	rts
EffBulletImpactTest::EffBulletImpactTest()
//scripts/3_Game/effects\effectparticle\bulletimpacttest.c
000005:0x002d18a8:	call	
000005:0x002d18b8:	rts
DayZInfectedType::RegisterHitComponentsForAI()
//scripts/3_Game/entities\dayzinfectedtype.c
000027:0x002d1960:	new	m_HitComponentsForAI, array<@DayZAIHitComponent>
000030:0x002d1980:	moves	m_DefaultHitComponent, _s'Torso'
000032:0x002d1990:	moves	m_DefaultHitPositionComponent, _s'Spine1'
000035:0x002d19a0:	new	m_SuitableFinisherHitComponents, array<string>
000036:0x002d19c0:	movefm	[0xd31562c0], m_SuitableFinisherHitComponents
000036:0x002d19d0:	icall	
000037:0x002d19e0:	movefm	[0xd31562c0], m_SuitableFinisherHitComponents
000037:0x002d19f0:	icall	
000038:0x002d1a00:	movefm	[0xd31562c0], m_SuitableFinisherHitComponents
000038:0x002d1a10:	icall	
000041:0x002d1a20:	movem	pHitComponents, m_HitComponentsForAI
000041:0x002d1a30:	call	RegisterHitComponent(pHitComponents, _s'Head', _f2.000000)
000042:0x002d1a48:	movem	pHitComponents, m_HitComponentsForAI
000042:0x002d1a58:	call	RegisterHitComponent(pHitComponents, _s'LeftArm', _f50.000000)
000043:0x002d1a70:	movem	pHitComponents, m_HitComponentsForAI
000043:0x002d1a80:	call	RegisterHitComponent(pHitComponents, _s'Torso', _f65.000000)
000044:0x002d1a98:	movem	pHitComponents, m_HitComponentsForAI
000044:0x002d1aa8:	call	RegisterHitComponent(pHitComponents, _s'RightArm', _f50.000000)
000045:0x002d1ac0:	movem	pHitComponents, m_HitComponentsForAI
000045:0x002d1ad0:	call	RegisterHitComponent(pHitComponents, _s'LeftLeg', _f50.000000)
000046:0x002d1ae8:	movem	pHitComponents, m_HitComponentsForAI
000046:0x002d1af8:	call	RegisterHitComponent(pHitComponents, _s'RightLeg', _f50.000000)
000046:0x002d1b10:	rts
DayZInfectedType::RegisterAttacks()
000057:0x002d1e40:	ncalli	DayZInfectedType.GetName()
000057:0x002d1e48:	icall	Format(_s'cfgVehicles %1 AttackActions AttackShort ammoType', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000057:0x002d1e78:	moves	lightAttPath, #return
000058:0x002d1e88:	ncalli	DayZInfectedType.GetName()
000058:0x002d1e90:	icall	Format(_s'cfgVehicles %1 AttackActions AttackLong ammoType', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000058:0x002d1ec0:	moves	heavyAttPath, #return
000059:0x002d1ed0:	ncalli	DayZInfectedType.GetName()
000059:0x002d1ed8:	icall	Format(_s'cfgVehicles %1 AttackActions AttackRun ammoType', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000059:0x002d1f08:	moves	chaseAttPath, #return
000062:0x002d1f18:	ncall	GetGame()
000062:0x002d1f20:	icall	
000064:0x002d1f30:	ncall	GetGame()
000064:0x002d1f38:	icall	
000066:0x002d1f48:	ncall	GetGame()
000066:0x002d1f50:	icall	
000069:0x002d1f60:	new	m_ChaseAttacksGroup, array<@DayZInfectedAttackType>
000072:0x002d1f80:	call	
000073:0x002d1fb0:	call	
000077:0x002d1fe0:	new	m_FightAttacksGroup, array<@DayZInfectedAttackType>
000080:0x002d2000:	call	
000081:0x002d2030:	call	
000084:0x002d2060:	call	
000085:0x002d2090:	call	
000086:0x002d20c0:	call	
000087:0x002d20f0:	call	
000090:0x002d2120:	call	
000091:0x002d2150:	call	
000092:0x002d2180:	call	
000093:0x002d21b0:	call	
000093:0x002d21e0:	rts
DayZInfectedType::ChooseAttack()
000098:0x002d23f0:	call	
000098:0x002d2400:	movem	attackGroup, #return
000098:0x002d2410:	release	#return
000100:0x002d2418:	imove	highestUtility, -1.00000
000101:0x002d2428:	movetm	mostSuitableAttack, null
000103:0x002d2438:	ncall	GetWorldTime()
000103:0x002d2440:	cfti	@m01, pDistance
000103:0x002d2450:	citf	@f01, @m01
000103:0x002d2460:	addf	@f00, #return, @f01
000103:0x002d2470:	cfti	@m01, @f00
000103:0x002d2480:	move	@m00, @m01
000103:0x002d2490:	icall	Randomize(@m00)
000105:0x002d24a0:	imove	i, 0x000000
000105:0x002d24b0:	jump	0x2d24c0
000105:0x002d24b8:	inc	i
000105:0x002d24c0:	ncalli	array<@DayZInfectedAttackType>.Count()
000105:0x002d24c8:	cmpi	i, #return
000105:0x002d24d8:	bge	0x2d25b8
000107:0x002d24e0:	call	RandomFloat01()
000107:0x002d24f0:	move	rnd, #return
000108:0x002d2500:	icall	
000108:0x002d2510:	movetm	attackType, #return
000109:0x002d2520:	call	
000109:0x002d2540:	move	utility, #return
000110:0x002d2550:	cmpf	utility, _f0.000000
000110:0x002d2560:	bgt	0x2d2570
000111:0x002d2568:	jump	0x2d24b8
000113:0x002d2570:	cmpf	utility, highestUtility
000113:0x002d2580:	ble	0x2d25a8
000115:0x002d2588:	movem	mostSuitableAttack, attackType
000116:0x002d2598:	move	highestUtility, utility
000116:0x002d25a8:	release	attackType
000116:0x002d25b0:	jump	0x2d24b8
000121:0x002d25b8:	movem	#return, mostSuitableAttack
000121:0x002d25c8:	release	attackGroup
000121:0x002d25d0:	release	mostSuitableAttack
000121:0x002d25d8:	rts
000121:0x002d25e0:	release	attackGroup
000121:0x002d25e8:	release	mostSuitableAttack
000121:0x002d25f0:	rts
DayZInfectedType::GetHitComponentForAI()
000128:0x002d2620:	movem	pHitComponents, m_HitComponentsForAI
000128:0x002d2630:	call	SelectMostProbableHitComponent(pHitComponents, hitComp)
000128:0x002d2648:	moves	hitComp, pHitComponent
000128:0x002d2658:	cmpi	#return, _i0
000128:0x002d2668:	beq	0x2d2688
000130:0x002d2670:	moves	#return, hitComp
000130:0x002d2680:	rts
000133:0x002d2688:	call	
000133:0x002d2698:	moves	#return, #return
000133:0x002d26a8:	rts
000133:0x002d26b0:	rts
DayZInfectedType::GetDefaultHitComponent()
000138:0x002d26b8:	moves	#return, m_DefaultHitComponent
000138:0x002d26c8:	rts
000138:0x002d26d0:	rts
DayZInfectedType::GetDefaultHitPositionComponent()
000143:0x002d26d8:	moves	#return, m_DefaultHitPositionComponent
000143:0x002d26e8:	rts
000143:0x002d26f0:	rts
DayZInfectedType::GetSuitableFinisherHitComponents()
000148:0x002d26f8:	movem	#return, m_SuitableFinisherHitComponents
000148:0x002d2708:	rts
000148:0x002d2710:	rts
DayZInfectedType::RegisterAttack()
000157:0x002d2768:	new	newType, DayZInfectedAttackType
000159:0x002d2788:	movefm	@c00, newType
000159:0x002d2798:	move	m_Distance, pDistance
000160:0x002d27a8:	movefm	@c00, newType
000160:0x002d27b8:	move	m_Pitch, pPitch
000161:0x002d27c8:	movefm	@c00, newType
000161:0x002d27d8:	move	m_Type, pType
000162:0x002d27e8:	movefm	@c00, newType
000162:0x002d27f8:	move	m_Subtype, pSubtype
000163:0x002d2808:	movefm	@c00, newType
000163:0x002d2818:	moves	m_AmmoType, pAmmoType
000164:0x002d2828:	movefm	@c00, newType
000164:0x002d2838:	move	m_IsHeavy, pIsHeavy
000165:0x002d2848:	movefm	@c00, newType
000165:0x002d2858:	move	m_Cooldown, pCooldown
000166:0x002d2868:	movefm	@c00, newType
000166:0x002d2878:	move	m_Probability, pProbability
000168:0x002d2888:	call	
000168:0x002d2898:	movefm	@c00, newType
000168:0x002d28a8:	icall	
000168:0x002d28b8:	release	#return
000168:0x002d28c0:	release	newType
000168:0x002d28c8:	rts
DayZInfectedType::ComputeAttackUtility()
000174:0x002d2ae0:	movefm	@c00, pAttackType
000174:0x002d2af0:	cmpi	m_Pitch, pPitch
000174:0x002d2b00:	beq	0x2d2b20
000175:0x002d2b08:	imove	#return, 0.00000
000175:0x002d2b18:	rts
000178:0x002d2b20:	movefm	@c00, pAttackType
000178:0x002d2b30:	subf	distDiff, m_Distance, pTargetDistance
000179:0x002d2b40:	cmpf	distDiff, _f0.000000
000179:0x002d2b50:	bge	0x2d2b70
000180:0x002d2b58:	imove	#return, 0.00000
000180:0x002d2b68:	rts
000182:0x002d2b70:	divf	distDiffFrac, distDiff, _f10.000000
000183:0x002d2b80:	subf	@f01, _f1.000000, distDiffFrac
000183:0x002d2b90:	move	@f00, @f01
000183:0x002d2ba0:	mulf	utilityDistance, @f00, _f100.000000
000186:0x002d2bb0:	movefm	@c00, pAttackType
000186:0x002d2bc0:	subf	probDiff, m_Probability, pProbability
000187:0x002d2bd0:	cmpf	probDiff, _f0.000000
000187:0x002d2be0:	bge	0x2d2c00
000188:0x002d2be8:	imove	#return, 0.00000
000188:0x002d2bf8:	rts
000190:0x002d2c00:	subf	@f01, _f1.000000, probDiff
000190:0x002d2c10:	move	@f00, @f01
000190:0x002d2c20:	mulf	utilityProbability, @f00, _f10.000000
000193:0x002d2c30:	addf	util, utilityDistance, utilityProbability
000196:0x002d2c40:	move	#return, util
000196:0x002d2c50:	rts
000196:0x002d2c58:	rts
DayZInfectedType::GetAttackGroup()
000201:0x002d2c88:	move	#switch, pType
000201:0x002d2c98:	imove	@m00, 0x000000
000201:0x002d2ca8:	cmpi	@m00, #switch
000201:0x002d2cb8:	bne	0x2d2ce0
000204:0x002d2cc0:	movem	#return, m_ChaseAttacksGroup
000204:0x002d2cd0:	rts
000204:0x002d2cd8:	jump	0x2d2d08
000204:0x002d2ce0:	imove	@m00, 0x000001
000204:0x002d2cf0:	cmpi	@m00, #switch
000204:0x002d2d00:	bne	0x2d2d20
000207:0x002d2d08:	movem	#return, m_FightAttacksGroup
000207:0x002d2d18:	rts
000210:0x002d2d20:	movetm	#return, NULL
000210:0x002d2d30:	rts
000210:0x002d2d38:	rts
DestructionEffectBase::~DestructionEffectBase()
//scripts/3_Game/effects\destructioneffects\destructioneffectbase.c
000030:0x002d2d40:	cmpcm	m_POneTime, null
000030:0x002d2d50:	beq	0x2d2d78
000032:0x002d2d58:	movefm	[0xb5b275f0], m_POneTime
000032:0x002d2d68:	call	
000034:0x002d2d78:	cmpcm	m_PPersistent, null
000034:0x002d2d88:	beq	0x2d2db0
000036:0x002d2d90:	movefm	[0xb5b275f0], m_PPersistent
000036:0x002d2da0:	call	
000039:0x002d2db0:	movem	effect, m_SOneTime
000039:0x002d2dc0:	call	DestroyEffect(effect)
000040:0x002d2dd0:	movem	effect, m_SPersistent
000040:0x002d2de0:	call	DestroyEffect(effect)
000040:0x002d2df0:	rts
DestructionEffectBase::HasExplosionDamage()
000047:0x002d2df8:	cmpi	m_HasExplosionDamage, _i0
000047:0x002d2e08:	beq	0x2d2e40
000047:0x002d2e10:	cmps	m_AmmoType, _s''
000047:0x002d2e20:	beq	0x2d2e40
000047:0x002d2e28:	imove	#return, 0x000001
000047:0x002d2e38:	jump	0x2d2e50
000047:0x002d2e40:	imove	#return, 0x000000
000047:0x002d2e50:	rts
000047:0x002d2e58:	rts
DestructionEffectBase::DealExplosionDamage()
000052:0x002d2e60:	movefm	[0xb5c2ee70], m_Entity
000052:0x002d2e70:	movec	[0xb5c2ee98], null
000052:0x002d2e80:	moves	[0xb5c2eec0], m_AmmoType
000052:0x002d2e90:	movefm	[0xb5b25dc0], m_Entity
000052:0x002d2ea0:	ncalli	EntityAI.GetPosition()
000052:0x002d2ea8:	move	[0xb5c2ef20], m_DamageType
000052:0x002d2eb8:	ncall	ExplosionDamage([0xb5c2ee70], [0xb5c2ee98], [0xb5c2eec0], #return, [0xb5c2ef20])
000052:0x002d2ed8:	rts
DestructionEffectBase::OnHealthLevelChanged()
000057:0x002d2f20:	movem	m_Entity, entity
000058:0x002d2f30:	call	
000060:0x002d2f40:	ncall	GetGame()
000060:0x002d2f48:	ncalli	CGame.IsServer()
000060:0x002d2f50:	cmpi	#return, _i0
000060:0x002d2f60:	beq	0x2d30b0
000062:0x002d2f68:	move	pState, m_EntityIsTakeable
000062:0x002d2f78:	call	
000064:0x002d2f88:	cmpi	oldLevel, _i-1
000064:0x002d2f98:	bne	0x2d2fc8
000064:0x002d2fa0:	movefm	@c00, entity
000064:0x002d2fb0:	cmpi	m_Initialized, _i0
000064:0x002d2fc0:	beq	0x2d3098
000066:0x002d2fc8:	cmps	m_ReplaceWithEntity, _s''
000066:0x002d2fd8:	beq	0x2d3048
000068:0x002d2fe0:	ncall	GetGame()
000068:0x002d2fe8:	call	
000068:0x002d2ff8:	icall	SetInstance([0xb5dd0f20], this)
000068:0x002d3008:	icall	
000068:0x002d3040:	release	#return
000070:0x002d3048:	call	
000070:0x002d3058:	cmpi	#return, _i0
000070:0x002d3068:	beq	0x2d3080
000072:0x002d3070:	call	
000074:0x002d3080:	call	
000076:0x002d3098:	call	
000080:0x002d30b0:	cmpi	oldLevel, _i-1
000080:0x002d30c0:	bne	0x2d30f0
000080:0x002d30c8:	movefm	@c00, entity
000080:0x002d30d8:	cmpi	m_Initialized, _i0
000080:0x002d30e8:	beq	0x2d3258
000082:0x002d30f0:	move	particleType, m_ParticleOneTime
000082:0x002d3100:	call	
000082:0x002d3118:	movem	m_POneTime, #return
000082:0x002d3128:	release	#return
000084:0x002d3130:	cmpcm	m_POneTime, null
000084:0x002d3140:	beq	0x2d3168
000086:0x002d3148:	movefm	[0xb5b275f0], m_POneTime
000086:0x002d3158:	ncalli	ParticleSource.SetOwner(this)
000089:0x002d3168:	call	
000091:0x002d3180:	movem	sound, m_SOneTime
000091:0x002d3190:	moves	sound_set, m_SoundSetOneTime
000091:0x002d31a0:	movefm	[0xb5b25dc0], m_Entity
000091:0x002d31b0:	call	
000091:0x002d31d0:	movem	m_SOneTime, sound
000091:0x002d31e0:	release	sound
000092:0x002d31e8:	movem	sound, m_SPersistent
000092:0x002d31f8:	moves	sound_set, m_SoundSetPersistent
000092:0x002d3208:	movefm	[0xb5b25dc0], m_Entity
000092:0x002d3218:	call	
000092:0x002d3238:	movem	m_SPersistent, sound
000092:0x002d3248:	release	sound
000092:0x002d3250:	jump	0x2d32d8
000096:0x002d3258:	call	
000097:0x002d3270:	movem	sound, m_SPersistent
000097:0x002d3280:	moves	sound_set, m_SoundSetPersistent
000097:0x002d3290:	movefm	[0xb5b25dc0], m_Entity
000097:0x002d32a0:	call	
000097:0x002d32c0:	movem	m_SPersistent, sound
000097:0x002d32d0:	release	sound
000100:0x002d32d8:	move	particleType, m_ParticlePersistent
000100:0x002d32e8:	call	
000100:0x002d3300:	movem	m_PPersistent, #return
000100:0x002d3310:	release	#return
000102:0x002d3318:	cmpcm	m_PPersistent, null
000102:0x002d3328:	beq	0x2d3350
000104:0x002d3330:	movefm	[0xb5b275f0], m_PPersistent
000104:0x002d3340:	ncalli	ParticleSource.SetOwner(this)
000104:0x002d3350:	rts
DestructionEffectBase::ReplaceEntityServer()
000112:0x002d3380:	ncall	GetGame()
000112:0x002d3388:	moves	[0xb5bdab88], m_ReplaceWithEntity
000112:0x002d3398:	movefm	[0xb5b25dc0], m_Entity
000112:0x002d33a8:	ncalli	EntityAI.GetPosition()
000112:0x002d33b0:	ncalli	CGame.CreateObjectEx([0xb5bdab88], #return, ECE_OBJECT_SWAP, RF_ORIGINAL)
000112:0x002d33c8:	icall	SafeCastType([0xb5b25dc0], @c01, #return)
000112:0x002d33e0:	movetm	dead_entity, @c01
000113:0x002d33f0:	movefm	[0xb5b25dc0], m_Entity
000113:0x002d3400:	ncalli	EntityAI.GetOrientation()
000113:0x002d3408:	ncalli	EntityAI.SetOrientation(#return)
000114:0x002d3418:	cmpi	m_KeepHealthOnReplace, _i0
000114:0x002d3428:	beq	0x2d3460
000116:0x002d3430:	movefm	[0xb5b25dc0], m_Entity
000116:0x002d3440:	call	
000116:0x002d3450:	call	
000118:0x002d3460:	movefm	[0xb5b25dc0], m_Entity
000118:0x002d3470:	call	
000118:0x002d3480:	release	dead_entity
000118:0x002d3488:	rts
DestructionEffectBase::PlayParticle()
000123:0x002d3550:	cmpcm	m_Entity, null
000123:0x002d3560:	bne	0x2d3590
000125:0x002d3568:	icall	ErrorEx(_s'Missing entity - something went wrong', _i2)
000126:0x002d3578:	movetm	#return, null
000126:0x002d3588:	rts
000128:0x002d3590:	cmpi	particleType, _i0
000128:0x002d35a0:	beq	0x2d3690
000130:0x002d35a8:	call	GetInstance()
000130:0x002d35b8:	movefm	[0xb5b25dc0], m_Entity
000130:0x002d35c8:	ncalli	EntityAI.GetPosition()
000130:0x002d35d0:	call	
000130:0x002d35e8:	movem	p, #return
000130:0x002d35f8:	release	#return
000130:0x002d3600:	release	#return
000131:0x002d3608:	cmpi	attach, _i0
000131:0x002d3618:	beq	0x2d3668
000131:0x002d3620:	cmpcm	p, null
000131:0x002d3630:	beq	0x2d3668
000133:0x002d3638:	movem	parent, m_Entity
000133:0x002d3648:	call	
000135:0x002d3668:	movem	#return, p
000135:0x002d3678:	release	p
000135:0x002d3680:	rts
000135:0x002d3688:	release	p
000137:0x002d3690:	movetm	#return, null
000137:0x002d36a0:	rts
000137:0x002d36a8:	rts
PPENone::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\ppenone.c
000006:0x002d36b0:	imove	#return, 0x000000
000006:0x002d36c0:	rts
000006:0x002d36c8:	rts
PPENone::GetDefaultMaterialPath()
000011:0x002d36d0:	moves	#return, _s''
000011:0x002d36e0:	rts
000011:0x002d36e8:	rts
UndergroundTriggerCarrierBase::SetIndex()
//scripts/3_Game/triggercarrierbase.c
000007:0x002d36f0:	move	m_TriggerIndex, index
000008:0x002d3700:	ncalli	UndergroundTriggerCarrierBase.SetSynchDirty()
000008:0x002d3708:	rts
UndergroundTriggerCarrierBase::UndergroundTriggerCarrierBase()
000001:0x002d3710:	imove	m_TriggerIndex, 0xffffffff
000001:0x002d3720:	rts
AnalyticsManagerClient::RegisterEvents()
//scripts/3_Game/analytics\analyticsmanagerclient.c
000008:0x002d37a8:	icall	SetInstance([0xb5dd1768], this)
000008:0x002d37b8:	icall	
000009:0x002d37c8:	icall	SetInstance([0xb5dd17a8], this)
000009:0x002d37d8:	icall	
000009:0x002d37e8:	rts
AnalyticsManagerClient::UnregisterEvents()
000014:0x002d3870:	icall	SetInstance([0xb5dd1830], this)
000014:0x002d3880:	icall	
000015:0x002d3890:	icall	SetInstance([0xb5dd1870], this)
000015:0x002d38a0:	icall	
000015:0x002d38b0:	rts
AnalyticsManagerClient::OnActionEat()
000023:0x002d38b8:	call	OnActionEat()
000023:0x002d38c8:	rts
AnalyticsManagerClient::OnActionDrink()
000031:0x002d38d0:	call	OnActionDrink()
000031:0x002d38e0:	rts
AnalyticsManagerClient::OnActionCookedSteak()
000039:0x002d38e8:	call	OnCookedSteak()
000039:0x002d38f8:	rts
AnalyticsManagerClient::OnActionFinishedShaveSelf()
000047:0x002d3900:	call	OnActionShave()
000047:0x002d3910:	rts
AnalyticsManagerClient::OnActionFinishedGutDeer()
000055:0x002d3918:	call	OnActionGutDeer()
000055:0x002d3928:	rts
AnalyticsManagerClient::OnActionRestrain()
000063:0x002d3930:	call	OnActionHandcuff()
000063:0x002d3940:	rts
AnalyticsManagerClient::OnActionBandageTarget()
000071:0x002d3948:	call	OnActionMedsSurvivor()
000071:0x002d3958:	rts
AnalyticsManagerClient::OnItemAttachedAtPlayer()
000084:0x002d3be8:	call	GetDayZGame()
000084:0x002d3bf8:	call	
000084:0x002d3c08:	move	@m00, #return
000084:0x002d3c18:	cmpi	@m00, IN_GAME
000084:0x002d3c28:	beq	0x2d3c40
000086:0x002d3c30:	release	inventory
000086:0x002d3c38:	rts
000089:0x002d3c40:	ncall	GetGame()
000089:0x002d3c48:	ncalli	CGame.GetPlayer()
000089:0x002d3c50:	movetm	player, #return
000090:0x002d3c60:	cmpcm	player, null
000090:0x002d3c70:	bne	0x2d3c90
000092:0x002d3c78:	release	inventory
000092:0x002d3c80:	release	player
000092:0x002d3c88:	rts
000095:0x002d3c90:	call	
000095:0x002d3ca0:	movem	inventory, #return
000095:0x002d3cb0:	release	#return
000097:0x002d3cb8:	cmpcm	player, null
000097:0x002d3cc8:	beq	0x2d4098
000097:0x002d3cd0:	cmpcm	inventory, null
000097:0x002d3ce0:	beq	0x2d4098
000099:0x002d3ce8:	imove	i, 0x000000
000099:0x002d3cf8:	jump	0x2d3d08
000099:0x002d3d00:	inc	i
000099:0x002d3d08:	cmpi	i, GEAR_COUNT
000099:0x002d3d18:	bge	0x2d3ed8
000101:0x002d3d20:	cfv	@s00, m_FullGear[i]
000101:0x002d3d30:	ncall	GetSlotIdFromString(@s00)
000101:0x002d3d40:	move	slot_id, #return
000102:0x002d3d50:	ncalli	HumanInventory.FindAttachment(slot_id)
000102:0x002d3d60:	movetm	att_item, #return
000104:0x002d3d70:	cmpcm	att_item, null
000104:0x002d3d80:	bne	0x2d3d90
000107:0x002d3d88:	jump	0x2d3d00
000111:0x002d3d90:	call	
000111:0x002d3da0:	cmpi	#return, _i0
000111:0x002d3db0:	beq	0x2d3dd0
000112:0x002d3db8:	imove	weapon_present, 0x000001
000112:0x002d3dc8:	jump	0x2d3ec8
000114:0x002d3dd0:	call	
000114:0x002d3de0:	cmpi	#return, _i0
000114:0x002d3df0:	bne	0x2d3e50
000114:0x002d3df8:	ncalli	EntityAI.GetInventory()
000114:0x002d3e00:	ncall	GetSlotIdFromString(_s'Melee')
000114:0x002d3e10:	ncalli	GameInventory.HasInventorySlot(#return)
000114:0x002d3e20:	cmpi	#return, _i0
000114:0x002d3e30:	beq	0x2d3e50
000115:0x002d3e38:	imove	melee_present, 0x000001
000115:0x002d3e48:	jump	0x2d3ec8
000117:0x002d3e50:	call	
000117:0x002d3e60:	cmpi	#return, _i0
000117:0x002d3e70:	bne	0x2d3ec8
000117:0x002d3e78:	ncalli	EntityAI.GetInventory()
000117:0x002d3e80:	ncall	GetSlotIdFromString(_s'Back')
000117:0x002d3e90:	ncalli	GameInventory.HasInventorySlot(#return)
000117:0x002d3ea0:	cmpi	#return, _i0
000117:0x002d3eb0:	beq	0x2d3ec8
000118:0x002d3eb8:	imove	backpack_present, 0x000001
000118:0x002d3ec8:	release	att_item
000118:0x002d3ed0:	jump	0x2d3d00
000123:0x002d3ed8:	ncalli	HumanInventory.GetEntityInHands()
000123:0x002d3ee0:	movetm	att_item, #return
000124:0x002d3ef0:	cmpcm	att_item, null
000124:0x002d3f00:	beq	0x2d4040
000127:0x002d3f08:	call	
000127:0x002d3f18:	cmpi	#return, _i0
000127:0x002d3f28:	beq	0x2d3f48
000128:0x002d3f30:	imove	weapon_present, 0x000001
000128:0x002d3f40:	jump	0x2d4040
000130:0x002d3f48:	call	
000130:0x002d3f58:	cmpi	#return, _i0
000130:0x002d3f68:	bne	0x2d3fc8
000130:0x002d3f70:	ncalli	EntityAI.GetInventory()
000130:0x002d3f78:	ncall	GetSlotIdFromString(_s'Melee')
000130:0x002d3f88:	ncalli	GameInventory.HasInventorySlot(#return)
000130:0x002d3f98:	cmpi	#return, _i0
000130:0x002d3fa8:	beq	0x2d3fc8
000131:0x002d3fb0:	imove	melee_present, 0x000001
000131:0x002d3fc0:	jump	0x2d4040
000133:0x002d3fc8:	call	
000133:0x002d3fd8:	cmpi	#return, _i0
000133:0x002d3fe8:	bne	0x2d4040
000133:0x002d3ff0:	ncalli	EntityAI.GetInventory()
000133:0x002d3ff8:	ncall	GetSlotIdFromString(_s'Back')
000133:0x002d4008:	ncalli	GameInventory.HasInventorySlot(#return)
000133:0x002d4018:	cmpi	#return, _i0
000133:0x002d4028:	beq	0x2d4040
000134:0x002d4030:	imove	backpack_present, 0x000001
000137:0x002d4040:	cmpi	weapon_present, _i0
000137:0x002d4050:	beq	0x2d4098
000137:0x002d4058:	cmpi	melee_present, _i0
000137:0x002d4068:	beq	0x2d4098
000137:0x002d4070:	cmpi	backpack_present, _i0
000137:0x002d4080:	beq	0x2d4098
000140:0x002d4088:	call	OnEquippedFullGear()
000140:0x002d4098:	release	inventory
000140:0x002d40a0:	release	player
000140:0x002d40a8:	rts
AnalyticsManagerClient::Event_OnPlayerIgnitedFireplace()
000150:0x002d40d8:	move	#switch, ignite_type
000150:0x002d40e8:	imove	@m00, 0x000001
000150:0x002d40f8:	cmpi	@m00, #switch
000150:0x002d4108:	bne	0x2d4130
000154:0x002d4110:	call	OnActionIgniteMatchbox()
000155:0x002d4120:	jump	0x2d41b8
000155:0x002d4128:	jump	0x2d4158
000155:0x002d4130:	imove	@m00, 0x000002
000155:0x002d4140:	cmpi	@m00, #switch
000155:0x002d4150:	bne	0x2d4178
000159:0x002d4158:	call	OnActionIgniteRoadflare()
000160:0x002d4168:	jump	0x2d41b8
000160:0x002d4170:	jump	0x2d41a0
000160:0x002d4178:	imove	@m00, 0x000003
000160:0x002d4188:	cmpi	@m00, #switch
000160:0x002d4198:	bne	0x2d41b8
000164:0x002d41a0:	call	OnActionIgniteDrill()
000165:0x002d41b0:	jump	0x2d41b8
000165:0x002d41b8:	rts
AnalyticsManagerClient::Event_OnEntityKilled()
000175:0x002d41c0:	cmpcm	killer, null
000175:0x002d41d0:	beq	0x2d4288
000175:0x002d41d8:	call	
000175:0x002d41e8:	cmpi	#return, _i0
000175:0x002d41f8:	beq	0x2d4288
000175:0x002d4200:	ncalli	EntityAI.GetID()
000175:0x002d4208:	move	@m00, #return
000175:0x002d4218:	ncall	GetGame()
000175:0x002d4220:	ncalli	CGame.GetPlayer()
000175:0x002d4228:	push	#return
000175:0x002d4230:	ncalli	DayZPlayer.GetID()
000175:0x002d4238:	move	@m02, #return
000175:0x002d4248:	pop	#return
000175:0x002d4250:	cmpi	@m00, @m02
000175:0x002d4260:	bne	0x2d4288
000177:0x002d4268:	call	OnPlayerKilled(victim, killer, source, is_headshot)
000177:0x002d4288:	rts
EffBreathVapourMedium::EffBreathVapourMedium()
//scripts/3_Game/effects\effectparticle\player\effbreathvapourmedium.c
000005:0x002d4290:	call	
000005:0x002d42a0:	rts
PPEDOF::GetPostProcessEffectID()
//scripts/3_Game/ppemanager\materials\matclasses\exceptions\ppedof.c
000024:0x002d42a8:	imove	#return, 0x000033
000024:0x002d42b8:	rts
000024:0x002d42c0:	rts
PPEDOF::RegisterMaterialParameters()
000030:0x002d43b8:	call	
000032:0x002d43d0:	call	
000033:0x002d43f0:	call	
000034:0x002d4410:	call	
000035:0x002d4430:	call	
000036:0x002d4450:	call	
000036:0x002d4470:	rts
PPEDOF::ApplyValueChanges()
000041:0x002d4478:	movefm	[0xd31561b0], m_UpdatedParameters
000041:0x002d4488:	ncalli	array<int>.Count()
000041:0x002d4490:	move	@m00, #return
000041:0x002d44a0:	cmpi	@m00, _i0
000041:0x002d44b0:	ble	0x2d44c8
000043:0x002d44b8:	call	
000046:0x002d44c8:	movefm	[0xd31561b0], m_UpdatedParameters
000046:0x002d44d8:	ncalli	array<int>.Clear()
000046:0x002d44e0:	rts
PPEDOF::SetFinalParameterValue()
000052:0x002d4638:	call	
000052:0x002d4648:	call	
000052:0x002d4658:	movem	enabled_par, #return
000052:0x002d4668:	release	#return
000052:0x002d4670:	release	#return
000053:0x002d4678:	movefm	@c01, enabled_par
000053:0x002d4688:	icall	SafeCastType([0xb5bfdc40], @c00, @c01)
000053:0x002d46a0:	movec	@c02, @c00
000053:0x002d46b0:	move	is_enabled, param1
000055:0x002d46c0:	cmpi	is_enabled, _i0
000055:0x002d46d0:	beq	0x2d4918
000057:0x002d46d8:	new	array_values, array<float>
000057:0x002d46f8:	icall	
000059:0x002d4708:	imove	i, 0x000001
000059:0x002d4718:	jump	0x2d4738
000059:0x002d4720:	move	@m00, i
000059:0x002d4730:	inc	i
000059:0x002d4738:	imove	@m01, 0x000006
000059:0x002d4748:	move	@m00, @m01
000059:0x002d4758:	cmpi	i, @m00
000059:0x002d4768:	bge	0x2d4818
000061:0x002d4770:	call	
000061:0x002d4780:	call	
000061:0x002d4790:	movem	values, #return
000061:0x002d47a0:	release	#return
000061:0x002d47a8:	release	#return
000062:0x002d47b0:	movefm	@c01, values
000062:0x002d47c0:	icall	SafeCastType([0xb5b347b0], @c00, @c01)
000062:0x002d47d8:	movec	@c02, @c00
000062:0x002d47e8:	move	value_var_float, param1
000063:0x002d47f8:	icall	
000063:0x002d4808:	release	values
000063:0x002d4810:	jump	0x2d4720
000066:0x002d4818:	icall	
000066:0x002d4828:	push	#return
000066:0x002d4830:	icall	
000066:0x002d4840:	move	@f01, #return
000066:0x002d4850:	pop	#return
000066:0x002d4858:	push	#return
000066:0x002d4860:	icall	
000066:0x002d4870:	move	@f02, #return
000066:0x002d4880:	pop	#return
000066:0x002d4888:	push	#return
000066:0x002d4890:	icall	
000066:0x002d48a0:	move	@f03, #return
000066:0x002d48b0:	pop	#return
000066:0x002d48b8:	push	#return
000066:0x002d48c0:	icall	
000066:0x002d48d0:	move	@f04, #return
000066:0x002d48e0:	pop	#return
000066:0x002d48e8:	ncalli	DayZGame.OverrideDOF(true, #return, @f01, @f02, @f03, @f04)
000066:0x002d4908:	release	array_values
000066:0x002d4910:	jump	0x2d4938
000070:0x002d4918:	ncalli	DayZGame.OverrideDOF(false, _f0.000000, _f0.000000, _f0.000000, _f0.000000, _f1.000000)
000070:0x002d4938:	release	enabled_par
000070:0x002d4940:	rts
HandAnimatedSwapping::HandAnimatedSwapping()
//scripts/3_Game/systems\inventory\handanimatedswapping.c
000016:0x002d4998:	movetm	m_Src1, null
000016:0x002d49a8:	movetm	m_Src2, null
000016:0x002d49b8:	movetm	m_Dst1, null
000016:0x002d49c8:	movetm	m_Dst2, null
000019:0x002d49d8:	new	m_Hide, HandStartHidingAnimated
000020:0x002d4a08:	new	m_Show, HandSwappingAnimated_Show
000023:0x002d4a38:	new	_fin_, HandEventHumanCommandActionFinished
000024:0x002d4a60:	new	_AEh_, HandAnimEventChanged
000026:0x002d4a88:	new	m_FSM, HandFSM
000028:0x002d4ab0:	movem	src, m_Hide
000028:0x002d4ac0:	movem	dst, m_Show
000028:0x002d4ad0:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000028:0x002d4b08:	pushc	@c00
000028:0x002d4b10:	movefm	[0xb5b3f2a8], m_FSM
000028:0x002d4b20:	call	
000028:0x002d4b30:	popc	@c00
000028:0x002d4b38:	release	@c00
000029:0x002d4b40:	movem	src, m_Show
000029:0x002d4b50:	movetm	dst, null
000029:0x002d4b60:	new	@c00, FSMTransition<HandStateBase,HandEventBase,HandActionBase,HandGuardBase>
000029:0x002d4b98:	pushc	@c00
000029:0x002d4ba0:	movefm	[0xb5b3f2a8], m_FSM
000029:0x002d4bb0:	call	
000029:0x002d4bc0:	popc	@c00
000029:0x002d4bc8:	release	@c00
000031:0x002d4bd0:	movem	initial_state, m_Hide
000031:0x002d4be0:	movefm	[0xb5b3f2a8], m_FSM
000031:0x002d4bf0:	call	
000031:0x002d4c00:	release	_fin_
000031:0x002d4c08:	release	_AEh_
000031:0x002d4c10:	rts
HandAnimatedSwapping::OnEntry()
000036:0x002d4c40:	movefm	@c02, e
000036:0x002d4c50:	icall	SafeCastType([0xb5b36208], @c01, @c02)
000036:0x002d4c68:	movetm	es, @c01
000037:0x002d4c78:	cmpcm	es, null
000037:0x002d4c88:	beq	0x2d4f78
000039:0x002d4c90:	call	
000039:0x002d4ca0:	movem	m_Src1, #return
000039:0x002d4cb0:	release	#return
000040:0x002d4cb8:	movefm	@c01, es
000040:0x002d4cc8:	movem	m_Src2, m_Src2
000041:0x002d4cd8:	call	
000041:0x002d4ce8:	movem	m_Dst1, #return
000041:0x002d4cf8:	release	#return
000042:0x002d4d00:	movefm	@c01, es
000042:0x002d4d10:	movem	m_Dst2, m_Dst2
000044:0x002d4d20:	movefm	[0xb5b3c8e8], m_Show
000044:0x002d4d30:	movec	@c00, [0xb5b3c8e8]
000044:0x002d4d40:	movem	m_Src1, m_Src1
000045:0x002d4d50:	movefm	[0xb5b3c8e8], m_Show
000045:0x002d4d60:	movec	@c00, [0xb5b3c8e8]
000045:0x002d4d70:	movem	m_Src2, m_Src2
000046:0x002d4d80:	movefm	[0xb5b3c8e8], m_Show
000046:0x002d4d90:	movec	@c00, [0xb5b3c8e8]
000046:0x002d4da0:	movem	m_Dst1, m_Dst1
000047:0x002d4db0:	movefm	[0xb5b3c8e8], m_Show
000047:0x002d4dc0:	movec	@c00, [0xb5b3c8e8]
000047:0x002d4dd0:	movem	m_Dst2, m_Dst2
000049:0x002d4de0:	movefm	[0xb5b3c9b0], m_Hide
000049:0x002d4df0:	movec	@c00, [0xb5b3c9b0]
000049:0x002d4e00:	movefm	@c01, es
000049:0x002d4e10:	move	m_ActionType, m_AnimationID
000050:0x002d4e20:	movefm	[0xb5b3c8e8], m_Show
000050:0x002d4e30:	movec	@c00, [0xb5b3c8e8]
000050:0x002d4e40:	movefm	@c01, es
000050:0x002d4e50:	move	m_ActionType, m_Animation2ID
000052:0x002d4e60:	ncall	GetGame()
000052:0x002d4e68:	ncalli	CGame.IsDedicatedServer()
000052:0x002d4e70:	cmpi	#return, _i0
000052:0x002d4e80:	bne	0x2d4f78
000054:0x002d4e88:	movefm	@c00, e
000054:0x002d4e98:	movefm	[0xb5b2afc0], m_Player
000054:0x002d4ea8:	call	
000054:0x002d4eb8:	movefm	[0xb5b18280], m_Dst2
000054:0x002d4ec8:	ncalli	InventoryLocation.GetItem()
000054:0x002d4ed0:	movem	dst, m_Dst2
000054:0x002d4ee0:	call	
000054:0x002d4ef8:	release	#return
000055:0x002d4f00:	movefm	@c00, e
000055:0x002d4f10:	movefm	[0xb5b2afc0], m_Player
000055:0x002d4f20:	call	
000055:0x002d4f30:	movefm	[0xb5b18280], m_Dst1
000055:0x002d4f40:	ncalli	InventoryLocation.GetItem()
000055:0x002d4f48:	movem	dst, m_Dst1
000055:0x002d4f58:	call	
000055:0x002d4f70:	release	#return
000059:0x002d4f78:	call	
000059:0x002d4f88:	release	es
000059:0x002d4f90:	rts
HandAnimatedSwapping::OnAbort()
000064:0x002d4f98:	ncall	GetGame()
000064:0x002d4fa0:	ncalli	CGame.IsDedicatedServer()
000064:0x002d4fa8:	cmpi	#return, _i0
000064:0x002d4fb8:	bne	0x2d50b8
000066:0x002d4fc0:	movefm	@c00, e
000066:0x002d4fd0:	movefm	[0xb5b2afc0], m_Player
000066:0x002d4fe0:	call	
000066:0x002d4ff0:	movefm	[0xb5b18280], m_Dst2
000066:0x002d5000:	ncalli	InventoryLocation.GetItem()
000066:0x002d5008:	movem	dst, m_Dst2
000066:0x002d5018:	call	
000066:0x002d5030:	release	#return
000067:0x002d5038:	movefm	@c00, e
000067:0x002d5048:	movefm	[0xb5b2afc0], m_Player
000067:0x002d5058:	call	
000067:0x002d5068:	movefm	[0xb5b18280], m_Dst1
000067:0x002d5078:	ncalli	InventoryLocation.GetItem()
000067:0x002d5080:	movem	dst, m_Dst1
000067:0x002d5090:	call	
000067:0x002d50a8:	release	#return
000067:0x002d50b0:	jump	0x2d5158
000071:0x002d50b8:	ncall	GetGame()
000071:0x002d50c0:	movefm	@c01, e
000071:0x002d50d0:	movefm	[0xb5bdb770], m_Player
000071:0x002d50e0:	movefm	[0xb5b18280], m_Dst2
000071:0x002d50f0:	ncalli	InventoryLocation.GetItem()
000071:0x002d50f8:	ncalli	CGame.ClearJuncture([0xb5bdb770], #return)
000072:0x002d5108:	ncall	GetGame()
000072:0x002d5110:	movefm	@c01, e
000072:0x002d5120:	movefm	[0xb5bdb770], m_Player
000072:0x002d5130:	movefm	[0xb5b18280], m_Dst1
000072:0x002d5140:	ncalli	InventoryLocation.GetItem()
000072:0x002d5148:	ncalli	CGame.ClearJuncture([0xb5bdb770], #return)
000075:0x002d5158:	movetm	m_Src1, null
000076:0x002d5168:	movetm	m_Src2, null
000077:0x002d5178:	movetm	m_Dst1, null
000078:0x002d5188:	movetm	m_Dst2, null
000080:0x002d5198:	call	
000080:0x002d51a8:	rts
HandAnimatedSwapping::OnExit()
000085:0x002d51b0:	ncall	GetGame()
000085:0x002d51b8:	ncalli	CGame.IsDedicatedServer()
000085:0x002d51c0:	cmpi	#return, _i0
000085:0x002d51d0:	bne	0x2d52c8
000087:0x002d51d8:	movefm	@c00, e
000087:0x002d51e8:	movefm	[0xb5b2afc0], m_Player
000087:0x002d51f8:	call	
000087:0x002d5208:	movefm	[0xb5b18280], m_Dst2
000087:0x002d5218:	ncalli	InventoryLocation.GetItem()
000087:0x002d5220:	movem	dst, m_Dst2
000087:0x002d5230:	call	
000087:0x002d5248:	release	#return
000088:0x002d5250:	movefm	@c00, e
000088:0x002d5260:	movefm	[0xb5b2afc0], m_Player
000088:0x002d5270:	call	
000088:0x002d5280:	movefm	[0xb5b18280], m_Dst1
000088:0x002d5290:	ncalli	InventoryLocation.GetItem()
000088:0x002d5298:	movem	dst, m_Dst1
000088:0x002d52a8:	call	
000088:0x002d52c0:	release	#return
000091:0x002d52c8:	movetm	m_Src1, null
000092:0x002d52d8:	movetm	m_Src2, null
000093:0x002d52e8:	movetm	m_Dst1, null
000094:0x002d52f8:	movetm	m_Dst2, null
000096:0x002d5308:	call	
000096:0x002d5318:	rts
HumanCommandActionCallback::GetStateString()
//scripts/3_Game/human.c
000363:0x002d54b0:	move	#switch, pState
000363:0x002d54c0:	imove	@m00, 0x000000
000363:0x002d54d0:	cmpi	@m00, #switch
000363:0x002d54e0:	bne	0x2d5508
000365:0x002d54e8:	moves	#return, _s'NONE'
000365:0x002d54f8:	rts
000365:0x002d5500:	jump	0x2d5530
000365:0x002d5508:	imove	@m00, 0x000001
000365:0x002d5518:	cmpi	@m00, #switch
000365:0x002d5528:	bne	0x2d5550
000367:0x002d5530:	moves	#return, _s'LOOP_IN'
000367:0x002d5540:	rts
000367:0x002d5548:	jump	0x2d5578
000367:0x002d5550:	imove	@m00, 0x000002
000367:0x002d5560:	cmpi	@m00, #switch
000367:0x002d5570:	bne	0x2d5598
000368:0x002d5578:	moves	#return, _s'LOOP_LOOP'
000368:0x002d5588:	rts
000368:0x002d5590:	jump	0x2d55c0
000368:0x002d5598:	imove	@m00, 0x000003
000368:0x002d55a8:	cmpi	@m00, #switch
000368:0x002d55b8:	bne	0x2d55e0
000369:0x002d55c0:	moves	#return, _s'LOOP_END'
000369:0x002d55d0:	rts
000369:0x002d55d8:	jump	0x2d5608
000369:0x002d55e0:	imove	@m00, 0x000004
000369:0x002d55f0:	cmpi	@m00, #switch
000369:0x002d5600:	bne	0x2d5628
000370:0x002d5608:	moves	#return, _s'LOOP_END2'
000370:0x002d5618:	rts
000370:0x002d5620:	jump	0x2d5650
000370:0x002d5628:	imove	@m00, 0x000005
000370:0x002d5638:	cmpi	@m00, #switch
000370:0x002d5648:	bne	0x2d5670
000371:0x002d5650:	moves	#return, _s'LOOP_LOOP2'
000371:0x002d5660:	rts
000371:0x002d5668:	jump	0x2d5698
000371:0x002d5670:	imove	@m00, 0x000006
000371:0x002d5680:	cmpi	@m00, #switch
000371:0x002d5690:	bne	0x2d56b8
000372:0x002d5698:	moves	#return, _s'LOOP_ACTION'
000372:0x002d56a8:	rts
000372:0x002d56b0:	jump	0x2d56e0
000372:0x002d56b8:	imove	@m00, 0x000007
000372:0x002d56c8:	cmpi	@m00, #switch
000372:0x002d56d8:	bne	0x2d56f8
000375:0x002d56e0:	moves	#return, _s'ONE TIME'
000375:0x002d56f0:	rts
000378:0x002d56f8:	moves	#return, _s'Undef'
000378:0x002d5708:	rts
000378:0x002d5710:	rts
HumanCommandActionCallback::GetStateString#216215()
000385:0x002d5718:	ncalli	HumanCommandActionCallback.GetState()
000385:0x002d5720:	call	GetStateString(#return)
000385:0x002d5730:	moves	#return, #return
000385:0x002d5740:	rts
000385:0x002d5748:	rts
HumanCommandActionCallback::IsUserActionCallback()
000406:0x002d5750:	imove	#return, 0x000000
000406:0x002d5760:	rts
000406:0x002d5768:	rts
HumanCommandActionCallback::IsGestureCallback()
000411:0x002d5770:	imove	#return, 0x000000
000411:0x002d5780:	rts
000411:0x002d5788:	rts
HumanCommandActionCallback::IsSymptomCallback()
000416:0x002d5790:	imove	#return, 0x000000
000416:0x002d57a0:	rts
000416:0x002d57a8:	rts
HumanCommandDeathCallback::ShouldSimulationBeDisabled()
000594:0x002d57b0:	imove	#return, 0x000001
000594:0x002d57c0:	rts
000594:0x002d57c8:	rts
HumanCommandVehicle::IsObjectIgnoredOnGettingOut()
000704:0x002d5820:	movefm	@c00, entity
000704:0x002d5830:	icall	CastTo(object, @c00)
000704:0x002d5840:	cmpi	#return, _i0
000704:0x002d5850:	bne	0x2d5878
000706:0x002d5858:	imove	#return, 0x000001
000706:0x002d5868:	release	object
000706:0x002d5870:	rts
000709:0x002d5878:	ncalli	HumanCommandVehicle.GetTransport()
000709:0x002d5880:	movetm	transport, #return
000710:0x002d5890:	cmpcm	transport, null
000710:0x002d58a0:	bne	0x2d58d0
000712:0x002d58a8:	imove	#return, 0x000001
000712:0x002d58b8:	release	object
000712:0x002d58c0:	release	transport
000712:0x002d58c8:	rts
000715:0x002d58d0:	cmpm	object, transport
000715:0x002d58e0:	beq	0x2d5918
000715:0x002d58e8:	ncalli	Object.GetParent()
000715:0x002d58f0:	movec	@c00, #return
000715:0x002d5900:	cmpmc	@c00, transport
000715:0x002d5910:	bne	0x2d5940
000717:0x002d5918:	imove	#return, 0x000001
000717:0x002d5928:	release	object
000717:0x002d5930:	release	transport
000717:0x002d5938:	rts
000720:0x002d5940:	call	
000720:0x002d5950:	move	#return, #return
000720:0x002d5960:	release	object
000720:0x002d5968:	release	transport
000720:0x002d5970:	rts
000720:0x002d5978:	release	object
000720:0x002d5980:	release	transport
000720:0x002d5988:	rts
WeaponActionTypeToString()
000927:0x002d5b20:	move	#switch, A
000927:0x002d5b30:	imove	@m00, 0x00000f
000927:0x002d5b40:	cmpi	@m00, #switch
000927:0x002d5b50:	bne	0x2d5b78
000929:0x002d5b58:	moves	#return, _s'Weapon interrupt'
000929:0x002d5b68:	rts
000929:0x002d5b70:	jump	0x2d5ba0
000929:0x002d5b78:	imove	@m00, 0xffffffff
000929:0x002d5b88:	cmpi	@m00, #switch
000929:0x002d5b98:	bne	0x2d5bc0
000930:0x002d5ba0:	moves	#return, _s'---'
000930:0x002d5bb0:	rts
000930:0x002d5bb8:	jump	0x2d5be8
000930:0x002d5bc0:	imove	@m00, 0x000000
000930:0x002d5bd0:	cmpi	@m00, #switch
000930:0x002d5be0:	bne	0x2d5c20
000931:0x002d5be8:	call	EnumToString(_T(WeaponActionReloadTypes), AT)
000931:0x002d5c00:	moves	#return, #return
000931:0x002d5c10:	rts
000931:0x002d5c18:	jump	0x2d5c48
000931:0x002d5c20:	imove	@m00, 0x000001
000931:0x002d5c30:	cmpi	@m00, #switch
000931:0x002d5c40:	bne	0x2d5c80
000932:0x002d5c48:	call	EnumToString(_T(WeaponActionMechanismTypes), AT)
000932:0x002d5c60:	moves	#return, #return
000932:0x002d5c70:	rts
000932:0x002d5c78:	jump	0x2d5ca8
000932:0x002d5c80:	imove	@m00, 0x000002
000932:0x002d5c90:	cmpi	@m00, #switch
000932:0x002d5ca0:	bne	0x2d5ce0
000933:0x002d5ca8:	call	EnumToString(_T(WeaponActionChamberingTypes), AT)
000933:0x002d5cc0:	moves	#return, #return
000933:0x002d5cd0:	rts
000933:0x002d5cd8:	jump	0x2d5d08
000933:0x002d5ce0:	imove	@m00, 0x000003
000933:0x002d5cf0:	cmpi	@m00, #switch
000933:0x002d5d00:	bne	0x2d5d40
000934:0x002d5d08:	call	EnumToString(_T(WeaponActionChamberingLoaderTypes), AT)
000934:0x002d5d20:	moves	#return, #return
000934:0x002d5d30:	rts
000934:0x002d5d38:	jump	0x2d5d68
000934:0x002d5d40:	imove	@m00, 0x000004
000934:0x002d5d50:	cmpi	@m00, #switch
000934:0x002d5d60:	bne	0x2d5da0
000935:0x002d5d68:	call	EnumToString(_T(WeaponActionUnjammingTypes), AT)
000935:0x002d5d80:	moves	#return, #return
000935:0x002d5d90:	rts
000935:0x002d5d98:	jump	0x2d5dc8
000935:0x002d5da0:	imove	@m00, 0x000005
000935:0x002d5db0:	cmpi	@m00, #switch
000935:0x002d5dc0:	bne	0x2d5e00
000936:0x002d5dc8:	call	EnumToString(_T(WeaponActionFireTypes), AT)
000936:0x002d5de0:	moves	#return, #return
000936:0x002d5df0:	rts
000936:0x002d5df8:	jump	0x2d5e28
000936:0x002d5e00:	imove	@m00, 0x000006
000936:0x002d5e10:	cmpi	@m00, #switch
000936:0x002d5e20:	bne	0x2d5e60
000937:0x002d5e28:	call	EnumToString(_T(WeaponHideShowTypes), AT)
000937:0x002d5e40:	moves	#return, #return
000937:0x002d5e50:	rts
000937:0x002d5e58:	jump	0x2d5e88
000937:0x002d5e60:	imove	@m00, 0x000007
000937:0x002d5e70:	cmpi	@m00, #switch
000937:0x002d5e80:	bne	0x2d5eb8
000938:0x002d5e88:	call	EnumToString(_T(WeaponHideShowTypes), AT)
000938:0x002d5ea0:	moves	#return, #return
000938:0x002d5eb0:	rts
000940:0x002d5eb8:	moves	#return, _s'---'
000940:0x002d5ec8:	rts
000940:0x002d5ed0:	rts
HumanCommandWeapons::RegisterDefaultEvents()
001013:0x002d6270:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_AttachmentHide', ATTACHMENT_HIDE)
001014:0x002d6280:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_AttachmentShow', ATTACHMENT_SHOW)
001015:0x002d6290:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_BulletEject', BULLET_EJECT)
001016:0x002d62a0:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_BulletHide', BULLET_HIDE)
001017:0x002d62b0:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_BulletHide2', BULLET_HIDE2)
001018:0x002d62c0:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_BulletInChamber', BULLET_IN_CHAMBER)
001019:0x002d62d0:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_BulletInMagazine', BULLET_IN_MAGAZINE)
001020:0x002d62e0:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_BulletShow', BULLET_SHOW)
001021:0x002d62f0:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_BulletShow2', BULLET_SHOW2)
001022:0x002d6300:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_CanUnjam_End', CANUNJAM_END)
001023:0x002d6310:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_CanUnjam_Start', CANUNJAM_START)
001024:0x002d6320:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_Cocked', COCKED)
001025:0x002d6330:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_MagazineAttached', MAGAZINE_ATTACHED)
001026:0x002d6340:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_MagazineDetached', MAGAZINE_DETACHED)
001027:0x002d6350:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_MagazineHide', MAGAZINE_HIDE)
001028:0x002d6360:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_MagazineShow', MAGAZINE_SHOW)
001029:0x002d6370:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_SliderOpen', SLIDER_OPEN)
001030:0x002d6380:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_Unjammed', UNJAMMED)
001031:0x002d6390:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_Hammer_Uncocked', HAMMER_UNCOCKED)
001032:0x002d63a0:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_Hammer_Cocked', HAMMER_COCKED)
001033:0x002d63b0:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_Change_Hide', CHANGE_HIDE)
001034:0x002d63c0:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_Change_Show', CHANGE_SHOW)
001035:0x002d63d0:	ncalli	HumanCommandWeapons.RegisterEvent(_s'Weapon_CylinderRotate', CYLINDER_ROTATE)
001035:0x002d63e0:	rts
HumanMovementState::IsRaised()
001126:0x002d6420:	cmpi	m_iStanceIdx, _i3
001126:0x002d6430:	blt	0x2d6450
001126:0x002d6438:	imove	#return, 0x000001
001126:0x002d6448:	jump	0x2d6460
001126:0x002d6450:	imove	#return, 0x000000
001126:0x002d6460:	rts
001126:0x002d6468:	rts
HumanMovementState::IsRaisedInProne()
001132:0x002d64a8:	cmpi	m_iStanceIdx, _i5
001132:0x002d64b8:	bne	0x2d64d8
001132:0x002d64c0:	imove	#return, 0x000001
001132:0x002d64d0:	jump	0x2d64e8
001132:0x002d64d8:	imove	#return, 0x000000
001132:0x002d64e8:	rts
001132:0x002d64f0:	rts
HumanMovementState::IsInProne()
001138:0x002d6528:	cmpi	m_iStanceIdx, _i2
001138:0x002d6538:	bne	0x2d6558
001138:0x002d6540:	imove	#return, 0x000001
001138:0x002d6550:	jump	0x2d6568
001138:0x002d6558:	imove	#return, 0x000000
001138:0x002d6568:	rts
001138:0x002d6570:	rts
HumanMovementState::IsInRaisedProne()
001144:0x002d6578:	cmpi	m_iStanceIdx, _i5
001144:0x002d6588:	bne	0x2d65a8
001144:0x002d6590:	imove	#return, 0x000001
001144:0x002d65a0:	jump	0x2d65b8
001144:0x002d65a8:	imove	#return, 0x000000
001144:0x002d65b8:	rts
001144:0x002d65c0:	rts
HumanMovementState::IsLeaning()
001150:0x002d65c8:	cmpf	m_fLeaning, _f0.000000
001150:0x002d65d8:	beq	0x2d65f8
001150:0x002d65e0:	imove	#return, 0x000001
001150:0x002d65f0:	jump	0x2d6608
001150:0x002d65f8:	imove	#return, 0x000000
001150:0x002d6608:	rts
001150:0x002d6610:	rts
HumanMovementState::HumanMovementState()
001114:0x002d6618:	imove	m_LocalMovement, 0xffffffff
001114:0x002d6628:	rts
Achievements::OnActionEat()
//scripts/3_Game/services\achievementsxbox.c
000064:0x002d6660:	icall	SendEventAction(_i0)
000064:0x002d6670:	call	CheckError(#return)
000064:0x002d6680:	rts
Achievements::OnActionDrink()
000072:0x002d66b8:	icall	SendEventAction(_i1)
000072:0x002d66c8:	call	CheckError(#return)
000072:0x002d66d8:	rts
Achievements::OnEquippedFullGear()
000080:0x002d6718:	icall	SendEventAction(_i2)
000080:0x002d6728:	call	CheckError(#return)
000080:0x002d6738:	rts
Achievements::OnCookedSteak()
000088:0x002d6778:	icall	SendEventAction(_i3)
000088:0x002d6788:	call	CheckError(#return)
000088:0x002d6798:	rts
Achievements::OnActionIgniteMatchbox()
000096:0x002d67e0:	icall	SendEventAction(_i4)
000096:0x002d67f0:	call	CheckError(#return)
000096:0x002d6800:	rts
Achievements::OnActionIgniteRoadflare()
000104:0x002d6848:	icall	SendEventAction(_i5)
000104:0x002d6858:	call	CheckError(#return)
000104:0x002d6868:	rts
Achievements::OnActionIgniteDrill()
000112:0x002d68b0:	icall	SendEventAction(_i6)
000112:0x002d68c0:	call	CheckError(#return)
000112:0x002d68d0:	rts
Achievements::OnActionShave()
000120:0x002d6908:	icall	SendEventAction(_i7)
000120:0x002d6918:	call	CheckError(#return)
000120:0x002d6928:	rts
Achievements::OnActionGutDeer()
000128:0x002d6960:	icall	SendEventAction(_i8)
000128:0x002d6970:	call	CheckError(#return)
000128:0x002d6980:	rts
Achievements::OnActionMedsSurvivor()
000136:0x002d69c8:	icall	SendEventAction(_i9)
000136:0x002d69d8:	call	CheckError(#return)
000136:0x002d69e8:	rts
Achievements::OnActionHandcuff()
000144:0x002d6a30:	icall	SendEventAction(_i10)
000144:0x002d6a40:	call	CheckError(#return)
000144:0x002d6a50:	rts
Achievements::OnPlayerKilled()
000152:0x002d6dc0:	imove	target_id, 0x000000
000153:0x002d6dd0:	imove	target_rank_id, 0x000000
000154:0x002d6de0:	imove	range_id, 0x000000
000155:0x002d6df0:	imove	hit_id, 0x000000
000156:0x002d6e00:	imove	distance, 0.00000
000158:0x002d6e10:	call	
000158:0x002d6e20:	cmpi	#return, _i0
000158:0x002d6e30:	beq	0x2d6e90
000160:0x002d6e38:	imove	target_id, 0x000001
000161:0x002d6e48:	imove	target_rank_id, 0x000001
000163:0x002d6e58:	call	
000163:0x002d6e68:	cmpi	#return, _i0
000163:0x002d6e78:	beq	0x2d6e90
000165:0x002d6e80:	imove	target_rank_id, 0x000002
000169:0x002d6e90:	cmpcm	source, null
000169:0x002d6ea0:	beq	0x2d6fb0
000171:0x002d6ea8:	call	
000171:0x002d6eb8:	cmpi	#return, _i0
000171:0x002d6ec8:	beq	0x2d6ee8
000173:0x002d6ed0:	imove	range_id, 0x000001
000173:0x002d6ee0:	jump	0x2d6fb0
000175:0x002d6ee8:	call	
000175:0x002d6ef8:	cmpi	#return, _i0
000175:0x002d6f08:	beq	0x2d6fb0
000175:0x002d6f10:	cmpcm	killer, null
000175:0x002d6f20:	beq	0x2d6fb0
000177:0x002d6f28:	imove	range_id, 0x000002
000178:0x002d6f38:	ncalli	EntityAI.GetPosition()
000178:0x002d6f40:	pushv	#return
000178:0x002d6f48:	ncalli	EntityAI.GetPosition()
000178:0x002d6f50:	movev	@v01, #return
000178:0x002d6f60:	popv	#return
000178:0x002d6f68:	ncall	Distance(#return, @v01)
000178:0x002d6f78:	move	distance, #return
000180:0x002d6f88:	cmpi	is_headshot, _i0
000180:0x002d6f98:	beq	0x2d6fb0
000182:0x002d6fa0:	imove	hit_id, 0x000001
000187:0x002d6fb0:	icall	SendEventKill(target_id, target_rank_id, range_id, hit_id, distance)
000187:0x002d6fd0:	call	CheckError(#return)
000187:0x002d6fe0:	rts
Achievements::CheckError()
000195:0x002d7038:	cmpi	error, _i0
000195:0x002d7048:	beq	0x2d7090
000197:0x002d7050:	icall	ToString(error)
000197:0x002d7060:	adds	@s01, _s'Achievements: Cannot send achievement event. Error ID: ', #return
000197:0x002d7070:	moves	@s00, @s01
000197:0x002d7080:	icall	Print(@s00)
000197:0x002d7090:	rts
AnalyticsManagerServer::OnPlayerConnect()
//scripts/3_Game/analytics\analyticsmanagerserver.c
000011:0x002d7098:	ncalli	Man.StatRegister(STAT_DISTANCE)
000012:0x002d70a8:	ncalli	Man.StatRegister(STAT_PLAYTIME)
000013:0x002d70b8:	ncalli	Man.StatRegister(STAT_PLAYERS_KILLED)
000014:0x002d70c8:	ncalli	Man.StatRegister(STAT_INFECTED_KILLED)
000015:0x002d70d8:	ncalli	Man.StatRegister(STAT_LONGEST_SURVIVOR_HIT)
000015:0x002d70e8:	rts
AnalyticsManagerServer::OnPlayerDisconnect()
000022:0x002d70f0:	ncalli	Man.StatUpdateByPosition(STAT_DISTANCE)
000023:0x002d7100:	ncalli	Man.StatUpdateByTime(STAT_PLAYTIME)
000023:0x002d7110:	rts
AnalyticsManagerServer::OnEntityHit()
000043:0x002d7170:	cmpcm	source, null
000043:0x002d7180:	beq	0x2d7200
000045:0x002d7188:	ncalli	EntityAI.GetHierarchyRootPlayer()
000045:0x002d7190:	movetm	survivor, #return
000046:0x002d71a0:	cmpcm	survivor, null
000046:0x002d71b0:	beq	0x2d71f8
000046:0x002d71b8:	call	
000046:0x002d71c8:	cmpi	#return, _i0
000046:0x002d71d8:	beq	0x2d71f8
000048:0x002d71e0:	call	
000048:0x002d71f8:	release	survivor
000048:0x002d7200:	rts
AnalyticsManagerServer::OnPlayerToPlayerHit()
000056:0x002d7318:	ncalli	Man.StatGet(STAT_LONGEST_SURVIVOR_HIT)
000056:0x002d7328:	move	longest_hit_dist, #return
000057:0x002d7338:	ncalli	Man.GetPosition()
000057:0x002d7340:	pushv	#return
000057:0x002d7348:	ncalli	Man.GetPosition()
000057:0x002d7350:	movev	@v01, #return
000057:0x002d7360:	popv	#return
000057:0x002d7368:	ncall	Distance(#return, @v01)
000057:0x002d7378:	move	current_dist, #return
000060:0x002d7388:	cmpf	longest_hit_dist, current_dist
000060:0x002d7398:	bge	0x2d73c0
000062:0x002d73a0:	subf	@f00, current_dist, longest_hit_dist
000062:0x002d73b0:	move	dist_update, @f00
000074:0x002d73c0:	ncalli	Man.StatUpdate(STAT_LONGEST_SURVIVOR_HIT, dist_update)
000074:0x002d73d0:	rts
AnalyticsManagerServer::OnEntityKilled()
000080:0x002d7488:	movefm	@c02, killer
000080:0x002d7498:	icall	SafeCastType([0xb5b25dc0], @c01, @c02)
000080:0x002d74b0:	movetm	killer_entity, @c01
000081:0x002d74c0:	cmpcm	killer_entity, null
000081:0x002d74d0:	beq	0x2d7598
000083:0x002d74d8:	ncalli	EntityAI.GetHierarchyRootPlayer()
000083:0x002d74e0:	movetm	killer_survivor, #return
000084:0x002d74f0:	cmpcm	killer_survivor, null
000084:0x002d7500:	beq	0x2d7590
000086:0x002d7508:	call	
000086:0x002d7518:	cmpi	#return, _i0
000086:0x002d7528:	beq	0x2d7550
000088:0x002d7530:	call	
000088:0x002d7548:	jump	0x2d7590
000090:0x002d7550:	call	
000090:0x002d7560:	cmpi	#return, _i0
000090:0x002d7570:	beq	0x2d7590
000092:0x002d7578:	call	
000092:0x002d7590:	release	killer_survivor
000092:0x002d7598:	release	killer_entity
000092:0x002d75a0:	rts
AnalyticsManagerServer::OnPlayerKilled()
000109:0x002d75a8:	ncalli	Man.StatUpdate(STAT_PLAYERS_KILLED, _f1.000000)
000109:0x002d75b8:	rts
AnalyticsManagerServer::OnInfectedKilled()
000124:0x002d75c0:	ncalli	Man.StatUpdate(STAT_INFECTED_KILLED, _f1.000000)
000124:0x002d75d0:	rts
#InitGlobals()
//scripts/3_Game/gui\credits\jsondatacreditsdepartment.c
000001:0x002da658:	noti	@m00, IGNORE_WHEN_IN_GAME
000001:0x002da668:	andi	DISCONNECT_SESSION_FLAGS_FORCE, MAX, @m00
000001:0x002da678:	noti	@m00, JOIN_ERROR_CHECK
000001:0x002da688:	andi	DISCONNECT_SESSION_FLAGS_JOIN, MAX, @m00
000001:0x002da698:	imove	DISCONNECT_SESSION_FLAGS_ALL, 0x7fffffff
000001:0x002da6a8:	imove	@m00, 0x000000
000001:0x002da6b8:	ctv	NullStringArray[@m00], _s''
000001:0x002da6c8:	inc	@m00
000001:0x002da6d0:	adds	LOGIN_PREFIX, _s'#STR_LOGIN_PREFIX', _s'
'
000001:0x002da6e0:	adds	RESPAWN_PREFIX, _s'#STR_RESPAWN_PREFIX', _s'
'
000001:0x002da6f0:	adds	VE_PREFIX, _s'#STR_VE_PREFIX', _s'
'
000001:0x002da700:	adds	VERIFY, _s'
', _s'#STR_VERIFY'
000001:0x002da710:	adds	@s03, _s'
', _s'#STR_MODS0'
000001:0x002da720:	moves	@s02, @s03
000001:0x002da730:	adds	@s02, @s02, _s'
'
000001:0x002da740:	moves	@s01, @s02
000001:0x002da750:	adds	@s01, @s01, _s'#STR_MODS1'
000001:0x002da760:	moves	@s00, @s01
000001:0x002da770:	adds	MODS, @s00, _s'
'
000001:0x002da780:	adds	SERVER_MUST_UPDATE, _s'
', _s'#STR_S_UPDATE'
000001:0x002da790:	adds	@s01, _s'
', _s'#STR_C_UPDATE'
000001:0x002da7a0:	moves	@s00, @s01
000001:0x002da7b0:	adds	CLIENT_MUST_UPDATE, @s00, VERIFY
000001:0x002da7c0:	new	m_RemoteReceivers, map<int,EntityAI>
000001:0x002da7e0:	imove	@m00, 0x000000
000001:0x002da7f0:	ctv	m_FullGear[@m00], _s'Shoulder'
000001:0x002da800:	inc	@m00
000001:0x002da808:	ctv	m_FullGear[@m00], _s'Melee'
000001:0x002da818:	inc	@m00
000001:0x002da820:	ctv	m_FullGear[@m00], _s'Back'
000001:0x002da830:	inc	@m00
000001:0x002da838:	new	m_Items, array<@ITEM_DataBase>
000001:0x002da858:	new	m_Data, CfgGameplayJson
000001:0x002da878:	imove	m_inventory_check_context, 0x000000
000001:0x002da888:	imove	@m00, 0x000000
000001:0x002da898:	ftv	m_ColorValueTotal[@m00], _f0.000000
000001:0x002da8a8:	inc	@m00
000001:0x002da8b0:	ftv	m_ColorValueTotal[@m00], _f0.000000
000001:0x002da8c0:	inc	@m00
000001:0x002da8c8:	ftv	m_ColorValueTotal[@m00], _f0.000000
000001:0x002da8d8:	inc	@m00
000001:0x002da8e0:	ftv	m_ColorValueTotal[@m00], _f0.000000
000001:0x002da8f0:	inc	@m00
000001:0x002da8f8:	new	m_FriendsAsyncInvoker, ScriptInvoker
000001:0x002da918:	new	m_PermissionsAsyncInvoker, ScriptInvoker
000001:0x002da938:	new	m_ServersAsyncInvoker, ScriptInvoker
000001:0x002da958:	new	m_ServerAsyncInvoker, ScriptInvoker
000001:0x002da978:	new	m_MuteUpdateAsyncInvoker, ScriptInvoker
000001:0x002da998:	new	m_ServerModLoadAsyncInvoker, ScriptInvoker
000001:0x002da9b8:	new	VALID_PATHS, array<string>
000001:0x002da9d8:	icall	
000001:0x002da9e8:	icall	
000001:0x002da9f8:	icall	
000001:0x002daa08:	icall	
000001:0x002daa18:	icall	
000001:0x002daa28:	icall	
000001:0x002daa38:	icall	
000001:0x002daa48:	icall	
000001:0x002daa58:	call	RegisterRequester(_T(PPERequester_InventoryBlur))
000001:0x002daa68:	move	REQ_INVENTORYBLUR, #return
000001:0x002daa78:	call	RegisterRequester(_T(PPERequester_ControllerDisconnectBlur))
000001:0x002daa88:	move	REQ_CONTROLLERDISCONNECT, #return
000001:0x002daa98:	call	RegisterRequester(_T(PPERequester_GlassesSportBlack))
000001:0x002daaa8:	move	REQ_GLASSESSPORTBLACK, #return
000001:0x002daab8:	call	RegisterRequester(_T(PPERequester_GlassesSportBlue))
000001:0x002daac8:	move	REQ_GLASSESSPORTBLUE, #return
000001:0x002daad8:	call	RegisterRequester(_T(PPERequester_GlassesSportGreen))
000001:0x002daae8:	move	REQ_GLASSESSPORTGREEN, #return
000001:0x002daaf8:	call	RegisterRequester(_T(PPERequester_GlassesSportOrange))
000001:0x002dab08:	move	REQ_GLASSESSPORTORANGE, #return
000001:0x002dab18:	call	RegisterRequester(_T(PPERequester_GlassesAviator))
000001:0x002dab28:	move	REQ_GLASSESAVIATOR, #return
000001:0x002dab38:	call	RegisterRequester(_T(PPERequester_GlassesDesignerBlack))
000001:0x002dab48:	move	REQ_GLASSESDESIGNER, #return
000001:0x002dab58:	call	RegisterRequester(_T(PPERequester_TacticalGoggles))
000001:0x002dab68:	move	REQ_GLASSESTACTICAL, #return
000001:0x002dab78:	call	RegisterRequester(_T(PPERequester_MotoHelmetBlack))
000001:0x002dab88:	move	REQ_MOTOHELMETBLACK, #return
000001:0x002dab98:	call	RegisterRequester(_T(PPERequester_WeldingMask))
000001:0x002daba8:	move	REQ_GLASSESWELDING, #return
000001:0x002dabb8:	call	RegisterRequester(_T(PPERequester_CameraNV))
000001:0x002dabc8:	move	REQ_CAMERANV, #return
000001:0x002dabd8:	call	RegisterRequester(_T(PPERequester_CameraADS))
000001:0x002dabe8:	move	REQ_CAMERAADS, #return
000001:0x002dabf8:	call	RegisterRequester(_T(PPERequester_BloodLoss))
000001:0x002dac08:	move	REQ_BLOODLOSS, #return
000001:0x002dac18:	call	RegisterRequester(_T(PPERequester_DeathDarkening))
000001:0x002dac28:	move	REQ_DEATHEFFECTS, #return
000001:0x002dac38:	call	RegisterRequester(_T(PPERequester_UnconEffects))
000001:0x002dac48:	move	REQ_UNCONEFFECTS, #return
000001:0x002dac58:	call	RegisterRequester(_T(PPERequester_TunnelVisionEffects))
000001:0x002dac68:	move	REQ_TUNELVISSION, #return
000001:0x002dac78:	call	RegisterRequester(_T(PPERequester_BurlapSackEffects))
000001:0x002dac88:	move	REQ_BURLAPSACK, #return
000001:0x002dac98:	call	RegisterRequester(_T(PPERequester_IntroChromAbb))
000001:0x002daca8:	move	REQ_INTROCHROMABB, #return
000001:0x002dacb8:	call	RegisterRequester(_T(PPERequester_FeverEffects))
000001:0x002dacc8:	move	REQ_FEVEREFFECTS, #return
000001:0x002dacd8:	call	RegisterRequester(_T(PPERequester_FlashbangEffects))
000001:0x002dace8:	move	REQ_FLASHBANGEFFECTS, #return
000001:0x002dacf8:	call	RegisterRequester(_T(PPERequester_ShockHitReaction))
000001:0x002dad08:	move	REQ_SHOCKHITEFFECTS, #return
000001:0x002dad18:	call	RegisterRequester(_T(PPERequester_HealthHitReaction))
000001:0x002dad28:	move	REQ_HEALTHHITEFFECTS, #return
000001:0x002dad38:	call	RegisterRequester(_T(PPERequester_MenuEffects))
000001:0x002dad48:	move	REQ_MENUEFFECTS, #return
000001:0x002dad58:	call	RegisterRequester(_T(PPERequester_ControlsBlur))
000001:0x002dad68:	move	REQ_CONTROLLERBLUR, #return
000001:0x002dad78:	call	RegisterRequester(_T(PPERequester_ServerBrowserBlur))
000001:0x002dad88:	move	REQ_SERVERBROWSEREFFECTS, #return
000001:0x002dad98:	call	RegisterRequester(_T(PPERequester_TutorialMenu))
000001:0x002dada8:	move	REQ_TUTORIALEFFECTS, #return
000001:0x002dadb8:	call	RegisterRequester(_T(PPERequester_ContaminatedAreaTint))
000001:0x002dadc8:	move	REQ_CONTAMINATEDAREA, #return
000001:0x002dadd8:	call	RegisterRequester(_T(PPERequester_SpookyAreaTint))
000001:0x002dade8:	move	REQ_SPOOKYAREA, #return
000001:0x002dadf8:	call	RegisterRequester(_T(PPERequester_PainBlur))
000001:0x002dae08:	move	REQ_PAINBLUR, #return
000001:0x002dae18:	call	RegisterRequester(_T(PPERUndergroundAcco))
000001:0x002dae28:	move	REQ_UNDERGROUND, #return
000001:0x002dae38:	call	RegisterRequester(_T(PPERequester_Drowning))
000001:0x002dae48:	move	REQ_DROWNING, #return
000001:0x002dae58:	imove	flags, 0x00000a
000001:0x002dae68:	imove	flags, 0x000048
000001:0x002dae78:	imove	flags, 0x00000c
000001:0x002dae88:	imove	flags, 0x000048
000001:0x002dae98:	imove	STATS_COUNT, 0x000003
000001:0x002daea8:	new	m_AmmoShakeParams, AmmoCamParams
000001:0x002daec8:	new	Event_OnRPC, ScriptInvoker
000001:0x002daee8:	new	m_NoiseParams, NoiseParams
000001:0x002daf08:	call	RegisterSurface(_s'Hit_Plastic')
000001:0x002daf18:	move	PLASTIC, #return
000001:0x002daf28:	call	RegisterSurface(_s'Hit_Sand')
000001:0x002daf38:	move	SAND, #return
000001:0x002daf48:	call	RegisterSurface(_s'Hit_Textile')
000001:0x002daf58:	move	TEXTILE, #return
000001:0x002daf68:	call	RegisterSurface(_s'Hit_Concrete')
000001:0x002daf78:	move	CONCRETE, #return
000001:0x002daf88:	call	RegisterSurface(_s'Hit_Gravel')
000001:0x002daf98:	move	GRAVEL, #return
000001:0x002dafa8:	call	RegisterSurface(_s'Hit_Dirt')
000001:0x002dafb8:	move	DIRT, #return
000001:0x002dafc8:	call	RegisterSurface(_s'Hit_Foliage')
000001:0x002dafd8:	move	FOLIAGE, #return
000001:0x002dafe8:	call	RegisterSurface(_s'Hit_Grass')
000001:0x002daff8:	move	GRASS, #return
000001:0x002db008:	call	RegisterSurface(_s'Hit_Wood')
000001:0x002db018:	move	WOOD, #return
000001:0x002db028:	call	RegisterSurface(_s'Hit_Metal')
000001:0x002db038:	move	METAL, #return
000001:0x002db048:	call	RegisterSurface(_s'Hit_Glass')
000001:0x002db058:	move	GLASS, #return
000001:0x002db068:	call	RegisterSurface(_s'Hit_Glass_Thin')
000001:0x002db078:	move	GLASS_THIN, #return
000001:0x002db088:	call	RegisterSurface(_s'Hit_Water')
000001:0x002db098:	move	WATER, #return
000001:0x002db0a8:	call	RegisterSurface(_s'Hit_Rubber')
000001:0x002db0b8:	move	RUBBER, #return
000001:0x002db0c8:	call	RegisterSurface(_s'Hit_Plaster')
000001:0x002db0d8:	move	PLASTER, #return
000001:0x002db0e8:	call	RegisterSurface(_s'Hit_MeatBones')
000001:0x002db0f8:	move	MEATBONES, #return
000001:0x002db108:	call	RegisterSurface(_s'Hit_MeatBones_MeleeShovel')
000001:0x002db118:	move	MEATBONES_SHOVEL, #return
000001:0x002db128:	call	RegisterSurface(_s'Hit_MeatBones_MeleePipeWrench')
000001:0x002db138:	move	MEATBONES_PIPEWRENCH, #return
000001:0x002db148:	call	RegisterSurface(_s'Hit_MeatBones_MeleeWrench')
000001:0x002db158:	move	MEATBONES_WRENCH, #return
000001:0x002db168:	call	RegisterSurface(_s'Hit_MeatBones_MeleeFist')
000001:0x002db178:	move	MEATBONES_FIST, #return
000001:0x002db188:	call	RegisterSurface(_s'Hit_Undefined')
000001:0x002db198:	move	UNDEFINED, #return
000001:0x002db1a8:	call	RegisterSurface(_s'Hit_ErrorNoMaterial')
000001:0x002db1b8:	move	ERROR_NO_MATERIAL, #return
000001:0x002db1c8:	call	RegisterIgnoredAmmo(_s'MeleeFist')
000001:0x002db1d8:	move	FIST, #return
000001:0x002db1e8:	call	RegisterIgnoredAmmo(_s'MeleeFist_Heavy')
000001:0x002db1f8:	move	FIST_HEAVY, #return
000001:0x002db208:	call	RegisterIgnoredAmmo(_s'MeleeSoft')
000001:0x002db218:	move	SOFT, #return
000001:0x002db228:	call	RegisterIgnoredAmmo(_s'MeleeSoft_Heavy')
000001:0x002db238:	move	SOFT_HEAVY, #return
000001:0x002db248:	call	RegisterIgnoredAmmo(_s'Dummy_Light')
000001:0x002db258:	move	DUMMY, #return
000001:0x002db268:	call	RegisterIgnoredAmmo(_s'Dummy_Heavy')
000001:0x002db278:	move	DUMMY_HEAVY, #return
000001:0x002db288:	imove	@m01, 0x015180
000001:0x002db298:	move	@m00, @m01
000001:0x002db2a8:	muli	REFRESHER_MAX_DURATION_DEFAULT, @m00, _i40
000001:0x002db2b8:	imove	@m01, 0x015180
000001:0x002db2c8:	move	@m00, @m01
000001:0x002db2d8:	muli	REFRESHER_FREQUENCY_DEFAULT, @m00, _i5
000001:0x002db2e8:	new	SyncEvent_OnPlayerListUpdate, ScriptInvoker
000001:0x002db308:	new	SyncEvent_OnEntityKilled, ScriptInvoker
000001:0x002db328:	new	SyncEvent_OnPlayerIgnitedFireplace, ScriptInvoker
000001:0x002db348:	new	m_PlayerBaseList, array<Man>
000001:0x002db368:	new	m_VONManager, VONManagerBase
000001:0x002db388:	new	m_WeightDebugData, map<EntityAI,@WeightDebugData>
000001:0x002db3a8:	new	m_AttachmentSlots, array<int>
000001:0x002db3c8:	icall	
000001:0x002db3d8:	icall	
000001:0x002db3e8:	icall	
000001:0x002db3f8:	icall	
000001:0x002db408:	icall	
000001:0x002db418:	icall	
000001:0x002db428:	icall	
000001:0x002db438:	icall	
000001:0x002db448:	icall	
000001:0x002db458:	icall	
000001:0x002db468:	icall	
000001:0x002db478:	icall	
000001:0x002db488:	icall	
000001:0x002db498:	new	m_ConfigArrayNames, array<string>
000001:0x002db4b8:	icall	
000001:0x002db4c8:	icall	
000001:0x002db4d8:	icall	
000001:0x002db4e8:	icall	
000001:0x002db4f8:	icall	
000001:0x002db508:	icall	
000001:0x002db518:	icall	
000001:0x002db528:	icall	
000001:0x002db538:	icall	
000001:0x002db548:	icall	
000001:0x002db558:	icall	
000001:0x002db568:	icall	
000001:0x002db578:	icall	
000001:0x002db588:	imove	@m01, 0x000006
000001:0x002db598:	move	@m00, @m01
000001:0x002db5a8:	ori	VAR_TYPE_BLENDABLE, @m00, VAR_TYPE_COLOR
000001:0x002db5b8:	imove	FLAGS, 0x000000
000001:0x002db5c8:	new	m_Mappings, map<int,string>
000001:0x002db5e8:	call	RegisterParticle(_s'_test_orientation')
000001:0x002db5f8:	move	PARTICLE_TEST, #return
000001:0x002db608:	call	RegisterParticle(_s'debug_dot')
000001:0x002db618:	move	DEBUG_DOT, #return
000001:0x002db628:	call	RegisterParticle(_s'fire_small_camp_01_start')
000001:0x002db638:	move	CAMP_FIRE_START, #return
000001:0x002db648:	call	RegisterParticle(_s'fire_small_camp_01')
000001:0x002db658:	move	CAMP_SMALL_FIRE, #return
000001:0x002db668:	call	RegisterParticle(_s'fire_medium_camp_01')
000001:0x002db678:	move	CAMP_NORMAL_FIRE, #return
000001:0x002db688:	call	RegisterParticle(_s'smoke_small_camp_01')
000001:0x002db698:	move	CAMP_SMALL_SMOKE, #return
000001:0x002db6a8:	call	RegisterParticle(_s'smoke_medium_camp_01')
000001:0x002db6b8:	move	CAMP_NORMAL_SMOKE, #return
000001:0x002db6c8:	call	RegisterParticle(_s'fire_small_camp_01_end')
000001:0x002db6d8:	move	CAMP_FIRE_END, #return
000001:0x002db6e8:	call	RegisterParticle(_s'steam_medium_camp_2end')
000001:0x002db6f8:	move	CAMP_STEAM_2END, #return
000001:0x002db708:	call	RegisterParticle(_s'default_01')
000001:0x002db718:	move	CAMP_STEAM_EXTINGUISH_START, #return
000001:0x002db728:	call	RegisterParticle(_s'fire_small_stove_01')
000001:0x002db738:	move	CAMP_STOVE_FIRE, #return
000001:0x002db748:	call	RegisterParticle(_s'fire_small_stove_01_start')
000001:0x002db758:	move	CAMP_STOVE_FIRE_START, #return
000001:0x002db768:	call	RegisterParticle(_s'fire_small_stove_01_end')
000001:0x002db778:	move	CAMP_STOVE_FIRE_END, #return
000001:0x002db788:	call	RegisterParticle(_s'fire_extinguish_wind')
000001:0x002db798:	move	CAMP_NO_IGNITE_WIND, #return
000001:0x002db7a8:	call	RegisterParticle(_s'fire_small_house_01_start')
000001:0x002db7b8:	move	HOUSE_FIRE_START, #return
000001:0x002db7c8:	call	RegisterParticle(_s'fire_small_house_01')
000001:0x002db7d8:	move	HOUSE_SMALL_FIRE, #return
000001:0x002db7e8:	call	RegisterParticle(_s'smoke_small_house_01')
000001:0x002db7f8:	move	HOUSE_SMALL_SMOKE, #return
000001:0x002db808:	call	RegisterParticle(_s'fire_medium_house_01')
000001:0x002db818:	move	HOUSE_NORMAL_FIRE, #return
000001:0x002db828:	call	RegisterParticle(_s'smoke_medium_house_01')
000001:0x002db838:	move	HOUSE_NORMAL_SMOKE, #return
000001:0x002db848:	call	RegisterParticle(_s'fire_small_house_01_end')
000001:0x002db858:	move	HOUSE_FIRE_END, #return
000001:0x002db868:	call	RegisterParticle(_s'steam_medium_house_2end')
000001:0x002db878:	move	HOUSE_FIRE_STEAM_2END, #return
000001:0x002db888:	call	RegisterParticle(_s'fire_small_barrel_01_start')
000001:0x002db898:	move	BARREL_FIRE_START, #return
000001:0x002db8a8:	call	RegisterParticle(_s'fire_small_barrel_01')
000001:0x002db8b8:	move	BARREL_SMALL_FIRE, #return
000001:0x002db8c8:	call	RegisterParticle(_s'smoke_small_barrel_01')
000001:0x002db8d8:	move	BARREL_SMALL_SMOKE, #return
000001:0x002db8e8:	call	RegisterParticle(_s'fire_medium_barrel_01')
000001:0x002db8f8:	move	BARREL_NORMAL_FIRE, #return
000001:0x002db908:	call	RegisterParticle(_s'smoke_medium_barrel_01')
000001:0x002db918:	move	BARREL_NORMAL_SMOKE, #return
000001:0x002db928:	call	RegisterParticle(_s'fire_small_barrel_01_end')
000001:0x002db938:	move	BARREL_FIRE_END, #return
000001:0x002db948:	call	RegisterParticle(_s'steam_medium_camp_2end')
000001:0x002db958:	move	BARREL_FIRE_STEAM_2END, #return
000001:0x002db968:	call	RegisterParticle(_s'fire_small_oven_01_start')
000001:0x002db978:	move	OVEN_FIRE_START, #return
000001:0x002db988:	call	RegisterParticle(_s'fire_small_oven_01')
000001:0x002db998:	move	OVEN_SMALL_FIRE, #return
000001:0x002db9a8:	call	RegisterParticle(_s'fire_medium_oven_01')
000001:0x002db9b8:	move	OVEN_NORMAL_FIRE, #return
000001:0x002db9c8:	call	RegisterParticle(_s'fire_small_ovenl_01_end')
000001:0x002db9d8:	move	OVEN_FIRE_END, #return
000001:0x002db9e8:	call	RegisterParticle(_s'cooking_boiling_empty')
000001:0x002db9f8:	move	COOKING_BOILING_EMPTY, #return
000001:0x002dba08:	call	RegisterParticle(_s'cooking_boiling_start')
000001:0x002dba18:	move	COOKING_BOILING_START, #return
000001:0x002dba28:	call	RegisterParticle(_s'cooking_boiling_done')
000001:0x002dba38:	move	COOKING_BOILING_DONE, #return
000001:0x002dba48:	call	RegisterParticle(_s'cooking_baking_start')
000001:0x002dba58:	move	COOKING_BAKING_START, #return
000001:0x002dba68:	call	RegisterParticle(_s'cooking_baking_done')
000001:0x002dba78:	move	COOKING_BAKING_DONE, #return
000001:0x002dba88:	call	RegisterParticle(_s'cooking_drying_start')
000001:0x002dba98:	move	COOKING_DRYING_START, #return
000001:0x002dbaa8:	call	RegisterParticle(_s'cooking_drying_done')
000001:0x002dbab8:	move	COOKING_DRYING_DONE, #return
000001:0x002dbac8:	call	RegisterParticle(_s'cooking_burning_done')
000001:0x002dbad8:	move	COOKING_BURNING_DONE, #return
000001:0x002dbae8:	call	RegisterParticle(_s'fire_small_torch_01')
000001:0x002dbaf8:	move	TORCH_T3, #return
000001:0x002dbb08:	call	RegisterParticle(_s'fire_small_torch_02')
000001:0x002dbb18:	move	TORCH_T1, #return
000001:0x002dbb28:	call	RegisterParticle(_s'fire_small_torch_03')
000001:0x002dbb38:	move	TORCH_T2, #return
000001:0x002dbb48:	call	RegisterParticle(_s'fire_small_broom_torch_01')
000001:0x002dbb58:	move	BROOM_TORCH_T1, #return
000001:0x002dbb68:	call	RegisterParticle(_s'fire_small_broom_torch_02')
000001:0x002dbb78:	move	BROOM_TORCH_T2, #return
000001:0x002dbb88:	call	RegisterParticle(_s'fire_small_broom_torch_03')
000001:0x002dbb98:	move	BROOM_TORCH_T3, #return
000001:0x002dbba8:	call	RegisterParticle(_s'fire_small_roadflare_red_04')
000001:0x002dbbb8:	move	ROADFLARE_BURNING_INIT, #return
000001:0x002dbbc8:	call	RegisterParticle(_s'fire_small_roadflare_red_01')
000001:0x002dbbd8:	move	ROADFLARE_BURNING_MAIN, #return
000001:0x002dbbe8:	call	RegisterParticle(_s'fire_small_roadflare_red_02')
000001:0x002dbbf8:	move	ROADFLARE_BURNING_ENDING, #return
000001:0x002dbc08:	call	RegisterParticle(_s'fire_small_roadflare_red_03')
000001:0x002dbc18:	move	ROADFLARE_BURNING_SMOKE, #return
000001:0x002dbc28:	call	RegisterParticle(_s'fire_small_roadflare_red_04')
000001:0x002dbc38:	move	FLAREPROJ_FIRE, #return
000001:0x002dbc48:	call	RegisterParticle(_s'fire_small_flare_yellow_01')
000001:0x002dbc58:	move	FLAREPROJ_ACTIVATE, #return
000001:0x002dbc68:	call	RegisterParticle(_s'fire_small_flare_red_01')
000001:0x002dbc78:	move	FLAREPROJ_ACTIVATE_RED, #return
000001:0x002dbc88:	call	RegisterParticle(_s'fire_small_flare_green_01')
000001:0x002dbc98:	move	FLAREPROJ_ACTIVATE_GREEN, #return
000001:0x002dbca8:	call	RegisterParticle(_s'fire_small_flare_blue_01')
000001:0x002dbcb8:	move	FLAREPROJ_ACTIVATE_BLUE, #return
000001:0x002dbcc8:	call	RegisterParticle(_s'digging_ground')
000001:0x002dbcd8:	move	DIGGING_STASH, #return
000001:0x002dbce8:	call	RegisterParticle(_s'smoke_RDG2_black_01')
000001:0x002dbcf8:	move	GRENADE_RDG2_BLACK_START, #return
000001:0x002dbd08:	call	RegisterParticle(_s'smoke_RDG2_black_02')
000001:0x002dbd18:	move	GRENADE_RDG2_BLACK_LOOP, #return
000001:0x002dbd28:	call	RegisterParticle(_s'smoke_RDG2_black_03')
000001:0x002dbd38:	move	GRENADE_RDG2_BLACK_END, #return
000001:0x002dbd48:	call	RegisterParticle(_s'smoke_RDG2_white_01')
000001:0x002dbd58:	move	GRENADE_RDG2_WHITE_START, #return
000001:0x002dbd68:	call	RegisterParticle(_s'smoke_RDG2_white_02')
000001:0x002dbd78:	move	GRENADE_RDG2_WHITE_LOOP, #return
000001:0x002dbd88:	call	RegisterParticle(_s'smoke_RDG2_white_03')
000001:0x002dbd98:	move	GRENADE_RDG2_WHITE_END, #return
000001:0x002dbda8:	call	RegisterParticle(_s'smoke_M18_green_01')
000001:0x002dbdb8:	move	GRENADE_M18_GREEN_START, #return
000001:0x002dbdc8:	call	RegisterParticle(_s'smoke_M18_green_02')
000001:0x002dbdd8:	move	GRENADE_M18_GREEN_LOOP, #return
000001:0x002dbde8:	call	RegisterParticle(_s'smoke_M18_green_03')
000001:0x002dbdf8:	move	GRENADE_M18_GREEN_END, #return
000001:0x002dbe08:	call	RegisterParticle(_s'smoke_M18_purple_01')
000001:0x002dbe18:	move	GRENADE_M18_PURPLE_START, #return
000001:0x002dbe28:	call	RegisterParticle(_s'smoke_M18_purple_02')
000001:0x002dbe38:	move	GRENADE_M18_PURPLE_LOOP, #return
000001:0x002dbe48:	call	RegisterParticle(_s'smoke_M18_purple_03')
000001:0x002dbe58:	move	GRENADE_M18_PURPLE_END, #return
000001:0x002dbe68:	call	RegisterParticle(_s'smoke_M18_red_01')
000001:0x002dbe78:	move	GRENADE_M18_RED_START, #return
000001:0x002dbe88:	call	RegisterParticle(_s'smoke_M18_red_02')
000001:0x002dbe98:	move	GRENADE_M18_RED_LOOP, #return
000001:0x002dbea8:	call	RegisterParticle(_s'smoke_M18_red_03')
000001:0x002dbeb8:	move	GRENADE_M18_RED_END, #return
000001:0x002dbec8:	call	RegisterParticle(_s'smoke_M18_white_01')
000001:0x002dbed8:	move	GRENADE_M18_WHITE_START, #return
000001:0x002dbee8:	call	RegisterParticle(_s'smoke_M18_white_02')
000001:0x002dbef8:	move	GRENADE_M18_WHITE_LOOP, #return
000001:0x002dbf08:	call	RegisterParticle(_s'smoke_M18_white_03')
000001:0x002dbf18:	move	GRENADE_M18_WHITE_END, #return
000001:0x002dbf28:	call	RegisterParticle(_s'smoke_M18_yellow_01')
000001:0x002dbf38:	move	GRENADE_M18_YELLOW_START, #return
000001:0x002dbf48:	call	RegisterParticle(_s'smoke_M18_yellow_02')
000001:0x002dbf58:	move	GRENADE_M18_YELLOW_LOOP, #return
000001:0x002dbf68:	call	RegisterParticle(_s'smoke_M18_yellow_03')
000001:0x002dbf78:	move	GRENADE_M18_YELLOW_END, #return
000001:0x002dbf88:	call	RegisterParticle(_s'smoke_M18_black_01')
000001:0x002dbf98:	move	GRENADE_M18_BLACK_START, #return
000001:0x002dbfa8:	call	RegisterParticle(_s'smoke_M18_black_02')
000001:0x002dbfb8:	move	GRENADE_M18_BLACK_LOOP, #return
000001:0x002dbfc8:	call	RegisterParticle(_s'smoke_M18_black_03')
000001:0x002dbfd8:	move	GRENADE_M18_BLACK_END, #return
000001:0x002dbfe8:	call	RegisterParticle(_s'explosion_M84_01')
000001:0x002dbff8:	move	GRENADE_M84, #return
000001:0x002dc008:	call	RegisterParticle(_s'explosion_RGD5_01')
000001:0x002dc018:	move	RGD5, #return
000001:0x002dc028:	call	RegisterParticle(_s'explosion_M67_01')
000001:0x002dc038:	move	M67, #return
000001:0x002dc048:	call	RegisterParticle(_s'smoke_small_generator_01')
000001:0x002dc058:	move	POWER_GENERATOR_SMOKE, #return
000001:0x002dc068:	call	RegisterParticle(_s'electro_shortc2')
000001:0x002dc078:	move	BARBED_WIRE_SPARKS, #return
000001:0x002dc088:	call	RegisterParticle(_s'easter_egg_activate')
000001:0x002dc098:	move	EASTER_EGG_ACTIVATE, #return
000001:0x002dc0a8:	call	RegisterParticle(_s'blood_bleeding_01')
000001:0x002dc0b8:	move	BLEEDING_SOURCE, #return
000001:0x002dc0c8:	call	RegisterParticle(_s'blood_bleeding_02')
000001:0x002dc0d8:	move	BLEEDING_SOURCE_LIGHT, #return
000001:0x002dc0e8:	call	RegisterParticle(_s'blood_surface_drops')
000001:0x002dc0f8:	move	BLOOD_SURFACE_DROPS, #return
000001:0x002dc108:	call	RegisterParticle(_s'blood_surface_chunks')
000001:0x002dc118:	move	BLOOD_SURFACE_CHUNKS, #return
000001:0x002dc128:	call	RegisterParticle(_s'character_vomit_01')
000001:0x002dc138:	move	VOMIT, #return
000001:0x002dc148:	call	RegisterParticle(_s'breath_vapour_light')
000001:0x002dc158:	move	BREATH_VAPOUR_LIGHT, #return
000001:0x002dc168:	call	RegisterParticle(_s'breath_vapour_medium')
000001:0x002dc178:	move	BREATH_VAPOUR_MEDIUM, #return
000001:0x002dc188:	call	RegisterParticle(_s'breath_vapour_heavy')
000001:0x002dc198:	move	BREATH_VAPOUR_HEAVY, #return
000001:0x002dc1a8:	call	RegisterParticle(_s'character_vomit_puddle')
000001:0x002dc1b8:	move	VOMIT_CHUNKS, #return
000001:0x002dc1c8:	call	RegisterParticle(_s'weapon_shot_Flame_3D_4star')
000001:0x002dc1d8:	move	GUN_MUZZLE_FLASH_SVD_STAR, #return
000001:0x002dc1e8:	call	RegisterParticle(_s'weapon_shot_Flame_3D')
000001:0x002dc1f8:	move	GUN_SOLO_MUZZLE_FLASH, #return
000001:0x002dc208:	call	RegisterParticle(_s'weapon_shot_fnx_01')
000001:0x002dc218:	move	GUN_FNX, #return
000001:0x002dc228:	call	RegisterParticle(_s'weapon_shot_fnx_02')
000001:0x002dc238:	move	GUN_FNX_SUPPRESSED, #return
000001:0x002dc248:	call	RegisterParticle(_s'weapon_shot_fnx_01')
000001:0x002dc258:	move	GUN_PARTICLE_TEST, #return
000001:0x002dc268:	call	RegisterParticle(_s'weapon_shot_chamber_smoke')
000001:0x002dc278:	move	GUN_PARTICLE_CASING, #return
000001:0x002dc288:	call	RegisterParticle(_s'weapon_shot_chamber_smoke_raise')
000001:0x002dc298:	move	GUN_PARTICLE_CASING_RAISE, #return
000001:0x002dc2a8:	call	RegisterParticle(_s'weapon_shot_cz75_01')
000001:0x002dc2b8:	move	GUN_CZ75, #return
000001:0x002dc2c8:	call	RegisterParticle(_s'weapon_shot_akm_01')
000001:0x002dc2d8:	move	GUN_AKM, #return
000001:0x002dc2e8:	call	RegisterParticle(_s'weapon_shot_akm_02')
000001:0x002dc2f8:	move	GUN_AKM_SUPPRESSED, #return
000001:0x002dc308:	call	RegisterParticle(_s'weapon_shot_izh18_01')
000001:0x002dc318:	move	GUN_IZH18, #return
000001:0x002dc328:	call	RegisterParticle(_s'weapon_shot_izh18_02')
000001:0x002dc338:	move	GUN_IZH18_SUPPRESSED, #return
000001:0x002dc348:	call	RegisterParticle(_s'weapon_shot_mp5k_01')
000001:0x002dc358:	move	GUN_MP5K, #return
000001:0x002dc368:	call	RegisterParticle(_s'weapon_shot_mp5k_02_boris')
000001:0x002dc378:	move	GUN_MP5K_2, #return
000001:0x002dc388:	call	RegisterParticle(_s'weapon_shot_mp5k_02')
000001:0x002dc398:	move	GUN_MP5K_SUPPRESSED, #return
000001:0x002dc3a8:	call	RegisterParticle(_s'weapon_shot_mp5k_02')
000001:0x002dc3b8:	move	GUN_MP5K_COMPENSATOR, #return
000001:0x002dc3c8:	call	RegisterParticle(_s'weapon_shot_ump45_01')
000001:0x002dc3d8:	move	GUN_UMP45, #return
000001:0x002dc3e8:	call	RegisterParticle(_s'weapon_shot_m4a1_01')
000001:0x002dc3f8:	move	GUN_M4A1, #return
000001:0x002dc408:	call	RegisterParticle(_s'weapon_shot_mp133_01')
000001:0x002dc418:	move	GUN_MP133, #return
000001:0x002dc428:	call	RegisterParticle(_s'weapon_shot_pellets')
000001:0x002dc438:	move	GUN_PELLETS, #return
000001:0x002dc448:	call	RegisterParticle(_s'weapon_shot_mosin9130_01')
000001:0x002dc458:	move	GUN_MOSIN9130, #return
000001:0x002dc468:	call	RegisterParticle(_s'weapon_shot_mosin_compensator_01')
000001:0x002dc478:	move	GUN_MOSIN_COMPENSATOR, #return
000001:0x002dc488:	call	RegisterParticle(_s'weapon_shot_cz527_01')
000001:0x002dc498:	move	GUN_CZ527, #return
000001:0x002dc4a8:	call	RegisterParticle(_s'weapon_shot_sks_01')
000001:0x002dc4b8:	move	GUN_SKS, #return
000001:0x002dc4c8:	call	RegisterParticle(_s'weapon_shot_winch70_01')
000001:0x002dc4d8:	move	GUN_WINCHESTER70, #return
000001:0x002dc4e8:	call	RegisterParticle(_s'weapon_shot_vss_01')
000001:0x002dc4f8:	move	GUN_VSS, #return
000001:0x002dc508:	call	RegisterParticle(_s'weapon_shot_ak74_01')
000001:0x002dc518:	move	GUN_AK74, #return
000001:0x002dc528:	call	RegisterParticle(_s'weapon_shot_ak101_01')
000001:0x002dc538:	move	GUN_AK101, #return
000001:0x002dc548:	call	RegisterParticle(_s'weapon_shot_magnum_01')
000001:0x002dc558:	move	GUN_MAGNUM, #return
000001:0x002dc568:	call	RegisterParticle(_s'weapon_shot_cz61_01')
000001:0x002dc578:	move	GUN_CZ61, #return
000001:0x002dc588:	call	RegisterParticle(_s'weapon_shot_winded_smoke')
000001:0x002dc598:	move	GUN_LONG_WINDED_SMOKE, #return
000001:0x002dc5a8:	call	RegisterParticle(_s'weapon_shot_winded_smoke_small')
000001:0x002dc5b8:	move	GUN_LONG_WINDED_SMOKE_SMALL, #return
000001:0x002dc5c8:	call	RegisterParticle(_s'smoking_barrel')
000001:0x002dc5d8:	move	SMOKING_BARREL, #return
000001:0x002dc5e8:	call	RegisterParticle(_s'smoking_barrel_small')
000001:0x002dc5f8:	move	SMOKING_BARREL_SMALL, #return
000001:0x002dc608:	call	RegisterParticle(_s'smoking_barrel_heavy')
000001:0x002dc618:	move	SMOKING_BARREL_HEAVY, #return
000001:0x002dc628:	call	RegisterParticle(_s'smoking_barrel_steam')
000001:0x002dc638:	move	SMOKING_BARREL_STEAM, #return
000001:0x002dc648:	call	RegisterParticle(_s'smoking_barrel_steam_small')
000001:0x002dc658:	move	SMOKING_BARREL_STEAM_SMALL, #return
000001:0x002dc668:	call	RegisterParticle(_s'weapon_shot_chamber_spark')
000001:0x002dc678:	move	SMARKS_CHAMBER, #return
000001:0x002dc688:	call	RegisterParticle(_s'impacts/bullet_impact_placeholder')
000001:0x002dc698:	move	IMPACT_TEST, #return
000001:0x002dc6a8:	call	RegisterParticle(_s'impacts/distant_dust')
000001:0x002dc6b8:	move	IMPACT_DISTANT_DUST, #return
000001:0x002dc6c8:	call	RegisterParticle(_s'impacts/bullet_riochet_placeholder')
000001:0x002dc6d8:	move	IMPACT_TEST_RICOCHET, #return
000001:0x002dc6e8:	call	RegisterParticle(_s'_test_orientation_02')
000001:0x002dc6f8:	move	IMPACT_TEST2, #return
000001:0x002dc708:	call	RegisterParticle(_s'impacts/_test_impact_enter_debug')
000001:0x002dc718:	move	IMPACT_TEST_ENTER_DEBUG, #return
000001:0x002dc728:	call	RegisterParticle(_s'impacts/_test_impact_ricochet_debug')
000001:0x002dc738:	move	IMPACT_TEST_RICOCHET_DEBUG, #return
000001:0x002dc748:	call	RegisterParticle(_s'impacts/_test_impact_exit_debug')
000001:0x002dc758:	move	IMPACT_TEST_EXIT_DEBUG, #return
000001:0x002dc768:	call	RegisterParticle(_s'_test_no_material')
000001:0x002dc778:	move	IMPACT_TEST_NO_MATERIAL_ERROR, #return
000001:0x002dc788:	call	RegisterParticle(_s'impacts/hit_wood_ent_01')
000001:0x002dc798:	move	IMPACT_WOOD_ENTER, #return
000001:0x002dc7a8:	call	RegisterParticle(_s'impacts/hit_wood_ric_01')
000001:0x002dc7b8:	move	IMPACT_WOOD_RICOCHET, #return
000001:0x002dc7c8:	call	RegisterParticle(_s'impacts/hit_wood_ext_01')
000001:0x002dc7d8:	move	IMPACT_WOOD_EXIT, #return
000001:0x002dc7e8:	call	RegisterParticle(_s'impacts/hit_concrete_ent_01')
000001:0x002dc7f8:	move	IMPACT_CONCRETE_ENTER, #return
000001:0x002dc808:	call	RegisterParticle(_s'impacts/hit_concrete_ric_01')
000001:0x002dc818:	move	IMPACT_CONCRETE_RICOCHET, #return
000001:0x002dc828:	call	RegisterParticle(_s'impacts/hit_concrete_ext_01')
000001:0x002dc838:	move	IMPACT_CONCRETE_EXIT, #return
000001:0x002dc848:	call	RegisterParticle(_s'impacts/hit_foliage_ent_01')
000001:0x002dc858:	move	IMPACT_FOLIAGE_ENTER, #return
000001:0x002dc868:	call	RegisterParticle(_s'impacts/hit_foliage_ric_01')
000001:0x002dc878:	move	IMPACT_FOLIAGE_RICOCHET, #return
000001:0x002dc888:	call	RegisterParticle(_s'impacts/hit_foliage_ext_01')
000001:0x002dc898:	move	IMPACT_FOLIAGE_EXIT, #return
000001:0x002dc8a8:	call	RegisterParticle(_s'impacts/hit_grass_ent_01')
000001:0x002dc8b8:	move	IMPACT_GRASS_ENTER, #return
000001:0x002dc8c8:	call	RegisterParticle(_s'impacts/hit_grass_ric_01')
000001:0x002dc8d8:	move	IMPACT_GRASS_RICOCHET, #return
000001:0x002dc8e8:	call	RegisterParticle(_s'impacts/hit_dirt_ent_01')
000001:0x002dc8f8:	move	IMPACT_DIRT_ENTER, #return
000001:0x002dc908:	call	RegisterParticle(_s'impacts/hit_dirt_ric_01')
000001:0x002dc918:	move	IMPACT_DIRT_RICOCHET, #return
000001:0x002dc928:	call	RegisterParticle(_s'impacts/hit_dirt_ext_01')
000001:0x002dc938:	move	IMPACT_DIRT_EXIT, #return
000001:0x002dc948:	call	RegisterParticle(_s'impacts/hit_rubber_ent_01')
000001:0x002dc958:	move	IMPACT_RUBBER_ENTER, #return
000001:0x002dc968:	call	RegisterParticle(_s'impacts/hit_rubber_ric_01')
000001:0x002dc978:	move	IMPACT_RUBBER_RICOCHET, #return
000001:0x002dc988:	call	RegisterParticle(_s'impacts/hit_rubber_ext_01')
000001:0x002dc998:	move	IMPACT_RUBBER_EXIT, #return
000001:0x002dc9a8:	call	RegisterParticle(_s'impacts/hit_gravel_ent_01')
000001:0x002dc9b8:	move	IMPACT_GRAVEL_ENTER, #return
000001:0x002dc9c8:	call	RegisterParticle(_s'impacts/hit_gravel_ric_01')
000001:0x002dc9d8:	move	IMPACT_GRAVEL_RICOCHET, #return
000001:0x002dc9e8:	call	RegisterParticle(_s'impacts/hit_gravel_ext_01')
000001:0x002dc9f8:	move	IMPACT_GRAVEL_EXIT, #return
000001:0x002dca08:	call	RegisterParticle(_s'impacts/hit_plaster_ent_01')
000001:0x002dca18:	move	IMPACT_PLASTER_ENTER, #return
000001:0x002dca28:	call	RegisterParticle(_s'impacts/hit_plaster_ric_01')
000001:0x002dca38:	move	IMPACT_PLASTER_RICOCHET, #return
000001:0x002dca48:	call	RegisterParticle(_s'impacts/hit_plaster_ext_01')
000001:0x002dca58:	move	IMPACT_PLASTER_EXIT, #return
000001:0x002dca68:	call	RegisterParticle(_s'impacts/hit_metal_ent_01')
000001:0x002dca78:	move	IMPACT_METAL_ENTER, #return
000001:0x002dca88:	call	RegisterParticle(_s'impacts/hit_metal_ric_01')
000001:0x002dca98:	move	IMPACT_METAL_RICOCHET, #return
000001:0x002dcaa8:	call	RegisterParticle(_s'impacts/hit_metal_ext_01')
000001:0x002dcab8:	move	IMPACT_METAL_EXIT, #return
000001:0x002dcac8:	call	RegisterParticle(_s'impacts/hit_meat_ent_01')
000001:0x002dcad8:	move	IMPACT_MEAT_ENTER, #return
000001:0x002dcae8:	call	RegisterParticle(_s'impacts/hit_meat_ric_01')
000001:0x002dcaf8:	move	IMPACT_MEAT_RICOCHET, #return
000001:0x002dcb08:	call	RegisterParticle(_s'impacts/hit_meat_ext_01')
000001:0x002dcb18:	move	IMPACT_MEAT_EXIT, #return
000001:0x002dcb28:	call	RegisterParticle(_s'impacts/hit_meatbones_ent_01')
000001:0x002dcb38:	move	IMPACT_MEATBONES_ENTER, #return
000001:0x002dcb48:	call	RegisterParticle(_s'impacts/hit_meatbones_ent_01')
000001:0x002dcb58:	move	IMPACT_MEATBONES_RICOCHET, #return
000001:0x002dcb68:	call	RegisterParticle(_s'impacts/hit_meatbones_ext_01')
000001:0x002dcb78:	move	IMPACT_MEATBONES_EXIT, #return
000001:0x002dcb88:	call	RegisterParticle(_s'impacts/hit_glass_ent_01')
000001:0x002dcb98:	move	IMPACT_GLASS_ENTER, #return
000001:0x002dcba8:	call	RegisterParticle(_s'impacts/hit_glass_ric_01')
000001:0x002dcbb8:	move	IMPACT_GLASS_RICOCHET, #return
000001:0x002dcbc8:	call	RegisterParticle(_s'impacts/hit_glass_ext_01')
000001:0x002dcbd8:	move	IMPACT_GLASS_EXIT, #return
000001:0x002dcbe8:	call	RegisterParticle(_s'impacts/hit_water_ent_01')
000001:0x002dcbf8:	move	IMPACT_WATER_SMALL_ENTER, #return
000001:0x002dcc08:	call	RegisterParticle(_s'impacts/hit_water_ent_02')
000001:0x002dcc18:	move	IMPACT_WATER_MEDIUM_ENTER, #return
000001:0x002dcc28:	call	RegisterParticle(_s'impacts/hit_water_ent_03')
000001:0x002dcc38:	move	IMPACT_WATER_LARGE_ENTER, #return
000001:0x002dcc48:	call	RegisterParticle(_s'impacts/hit_textile_ent_01')
000001:0x002dcc58:	move	IMPACT_TEXTILE_ENTER, #return
000001:0x002dcc68:	call	RegisterParticle(_s'impacts/hit_textile_ric_01')
000001:0x002dcc78:	move	IMPACT_TEXTILE_RICOCHET, #return
000001:0x002dcc88:	call	RegisterParticle(_s'impacts/hit_textile_ext_01')
000001:0x002dcc98:	move	IMPACT_TEXTILE_EXIT, #return
000001:0x002dcca8:	call	RegisterParticle(_s'impacts/hit_sand_ent_01')
000001:0x002dccb8:	move	IMPACT_SAND_ENTER, #return
000001:0x002dccc8:	call	RegisterParticle(_s'impacts/hit_sand_ric_01')
000001:0x002dccd8:	move	IMPACT_SAND_RICOCHET, #return
000001:0x002dcce8:	call	RegisterParticle(_s'impacts/hit_sand_ext_01')
000001:0x002dccf8:	move	IMPACT_SAND_EXIT, #return
000001:0x002dcd08:	call	RegisterParticle(_s'impacts/hit_plastic_ent_01')
000001:0x002dcd18:	move	IMPACT_PLASTIC_ENTER, #return
000001:0x002dcd28:	call	RegisterParticle(_s'impacts/hit_plastic_ric_01')
000001:0x002dcd38:	move	IMPACT_PLASTIC_RICOCHET, #return
000001:0x002dcd48:	call	RegisterParticle(_s'impacts/hit_plastic_ext_01')
000001:0x002dcd58:	move	IMPACT_PLASTIC_EXIT, #return
000001:0x002dcd68:	call	RegisterParticle(_s'explosion_landmine_01')
000001:0x002dcd78:	move	EXPLOSION_LANDMINE, #return
000001:0x002dcd88:	call	RegisterParticle(_s'explosion_placeholder')
000001:0x002dcd98:	move	EXPLOSION_TEST, #return
000001:0x002dcda8:	call	RegisterParticle(_s'smoke_heli_wreck_01')
000001:0x002dcdb8:	move	SMOKING_HELI_WRECK, #return
000001:0x002dcdc8:	call	RegisterParticle(_s'smoke_santa_wreck')
000001:0x002dcdd8:	move	AURORA_SANTA_WRECK, #return
000001:0x002dcde8:	call	RegisterParticle(_s'smoke_generic_wreck')
000001:0x002dcdf8:	move	SMOKE_GENERIC_WRECK, #return
000001:0x002dce08:	call	RegisterParticle(_s'menu_engine_fire')
000001:0x002dce18:	move	SMOKING_CAR_ENGINE, #return
000001:0x002dce28:	call	RegisterParticle(_s'menu_evaporation')
000001:0x002dce38:	move	EVAPORATION, #return
000001:0x002dce48:	call	RegisterParticle(_s'Hatchback_coolant_overheating')
000001:0x002dce58:	move	HATCHBACK_COOLANT_OVERHEATING, #return
000001:0x002dce68:	call	RegisterParticle(_s'Hatchback_coolant_overheated')
000001:0x002dce78:	move	HATCHBACK_COOLANT_OVERHEATED, #return
000001:0x002dce88:	call	RegisterParticle(_s'Hatchback_engine_failing')
000001:0x002dce98:	move	HATCHBACK_ENGINE_OVERHEATING, #return
000001:0x002dcea8:	call	RegisterParticle(_s'Hatchback_engine_failure')
000001:0x002dceb8:	move	HATCHBACK_ENGINE_OVERHEATED, #return
000001:0x002dcec8:	call	RegisterParticle(_s'Hatchback_exhaust')
000001:0x002dced8:	move	HATCHBACK_EXHAUST_SMOKE, #return
000001:0x002dcee8:	call	RegisterParticle(_s'env_fly_swarm_01')
000001:0x002dcef8:	move	ENV_SWARMING_FLIES, #return
000001:0x002dcf08:	call	RegisterParticle(_s'fire_bonfire')
000001:0x002dcf18:	move	BONFIRE_FIRE, #return
000001:0x002dcf28:	call	RegisterParticle(_s'smoke_bonfire')
000001:0x002dcf38:	move	BONFIRE_SMOKE, #return
000001:0x002dcf48:	call	RegisterParticle(_s'spooky_mist')
000001:0x002dcf58:	move	SPOOKY_MIST, #return
000001:0x002dcf68:	call	RegisterParticle(_s'character_vomitBlood_01')
000001:0x002dcf78:	move	VOMIT_BLOOD, #return
000001:0x002dcf88:	call	RegisterParticle(_s'contaminated_area_gas_around_tiny')
000001:0x002dcf98:	move	CONTAMINATED_AREA_GAS_TINY, #return
000001:0x002dcfa8:	call	RegisterParticle(_s'contaminated_area_gas_around')
000001:0x002dcfb8:	move	CONTAMINATED_AREA_GAS_AROUND, #return
000001:0x002dcfc8:	call	RegisterParticle(_s'contaminated_area_gas_bigass')
000001:0x002dcfd8:	move	CONTAMINATED_AREA_GAS_BIGASS, #return
000001:0x002dcfe8:	call	RegisterParticle(_s'contaminated_area_gas_ground')
000001:0x002dcff8:	move	CONTAMINATED_AREA_GAS_GROUND, #return
000001:0x002dd008:	call	RegisterParticle(_s'contaminated_area_gas_shell')
000001:0x002dd018:	move	CONTAMINATED_AREA_GAS_SHELL, #return
000001:0x002dd028:	call	RegisterParticle(_s'fireworks_small_01')
000001:0x002dd038:	move	FIREWORKS_SHOT, #return
000001:0x002dd048:	call	RegisterParticle(_s'fireworks_large_01_Red')
000001:0x002dd058:	move	FIREWORKS_EXPLOSION_RED, #return
000001:0x002dd068:	call	RegisterParticle(_s'fireworks_large_01_Green')
000001:0x002dd078:	move	FIREWORKS_EXPLOSION_GREEN, #return
000001:0x002dd088:	call	RegisterParticle(_s'fireworks_large_01_Blue')
000001:0x002dd098:	move	FIREWORKS_EXPLOSION_BLUE, #return
000001:0x002dd0a8:	call	RegisterParticle(_s'fireworks_large_01_Yellow')
000001:0x002dd0b8:	move	FIREWORKS_EXPLOSION_YELLOW, #return
000001:0x002dd0c8:	call	RegisterParticle(_s'fireworks_large_01_Pink')
000001:0x002dd0d8:	move	FIREWORKS_EXPLOSION_PINK, #return
000001:0x002dd0e8:	call	RegisterParticle(_s'fireworks_small_04')
000001:0x002dd0f8:	move	FIREWORKS_FUSE, #return
000001:0x002dd108:	call	RegisterParticle(_s'fireworks_small_02')
000001:0x002dd118:	move	FIREWORKS_AFTERBURN_START, #return
000001:0x002dd128:	call	RegisterParticle(_s'fireworks_small_03')
000001:0x002dd138:	move	FIREWORKS_AFTERBURN_END, #return
000001:0x002dd148:	call	RegisterParticle(_s'contaminated_area_gas_grenade')
000001:0x002dd158:	move	GRENADE_CHEM_BREAK, #return
000001:0x002dd168:	call	RegisterParticle(_s'explosion_claymore_01')
000001:0x002dd178:	move	CLAYMORE_EXPLOSION, #return
000001:0x002dd188:	call	RegisterParticle(_s'explosion_plastic_01')
000001:0x002dd198:	move	PLASTIC_EXPLOSION, #return
000001:0x002dd1a8:	call	RegisterParticle(_s'water_jet')
000001:0x002dd1b8:	move	WATER_JET, #return
000001:0x002dd1c8:	call	RegisterParticle(_s'water_jet_weak')
000001:0x002dd1d8:	move	WATER_JET_WEAK, #return
000001:0x002dd1e8:	call	RegisterParticle(_s'water_spilling')
000001:0x002dd1f8:	move	WATER_SPILLING, #return
000001:0x002dd208:	call	RegisterParticle(_s'breath_bubbles')
000001:0x002dd218:	move	DROWNING_BUBBLES, #return
000001:0x002dd228:	new	Objects, array<@ITEM_SpawnerObject>
000001:0x002dd248:	call	GetEnumSize(_T(EDLCId))
000001:0x002dd258:	move	length, #return
000001:0x002dd268:	new	m_Serializer, JsonSerializer
000001:0x002dd288:	new	m_Serializer, JsonSerializer
000001:0x002dd2a8:	new	m_Serializer, JsonSerializer
000001:0x002dd2c8:	imove	@m00, 0x000000
000001:0x002dd2d8:	ctv	images[@m00], _s'{655A1BF79F5B291}Gui/textures/loading_screens/loading_screen_1_co.edds'
000001:0x002dd2e8:	inc	@m00
000001:0x002dd2f0:	ctv	images[@m00], _s'{84BE5F7442BD4B}Gui/textures/loading_screens/loading_screen_2_co.edds'
000001:0x002dd300:	inc	@m00
000001:0x002dd308:	imove	eptModule, 0x000002
000001:0x002dd318:	imove	allocAmount, 0x000009
000001:0x002dd328:	imove	releaseAmount, 0x000006
000001:0x002dd338:	new	m_Serializer, JsonSerializer
000001:0x002dd358:	new	m_Serializer, JsonSerializer
000001:0x002dd378:	imove	directionCount, 0x000004
000001:0x002dd388:	new	m_Serializer, JsonSerializer
000001:0x002dd3a8:	new	m_Serializer, JsonSerializer
000001:0x002dd3c8:	rts
