Param2<int,typename>::Param2()
//scripts/1_Core/param.c
000066:0x00056b98:	move	param1, p1
000067:0x00056ba8:	movea	param2, p2
000067:0x00056bb8:	rts
Param2<int,typename>::Serialize()
000072:0x00056bc0:	icall	
000072:0x00056bd0:	cmpi	#return, _i0
000072:0x00056be0:	beq	0x056c28
000072:0x00056be8:	icall	
000072:0x00056bf8:	cmpi	#return, _i0
000072:0x00056c08:	beq	0x056c28
000072:0x00056c10:	imove	#return, 0x000001
000072:0x00056c20:	jump	0x056c38
000072:0x00056c28:	imove	#return, 0x000000
000072:0x00056c38:	rts
000072:0x00056c40:	rts
Param2<int,typename>::Deserializer()
000077:0x00056c48:	icall	
000077:0x00056c58:	cmpi	#return, _i0
000077:0x00056c68:	beq	0x056cb0
000077:0x00056c70:	icall	
000077:0x00056c80:	cmpi	#return, _i0
000077:0x00056c90:	beq	0x056cb0
000077:0x00056c98:	imove	#return, 0x000001
000077:0x00056ca8:	jump	0x056cc0
000077:0x00056cb0:	imove	#return, 0x000000
000077:0x00056cc0:	rts
000077:0x00056cc8:	rts
Param2<float,typename>::Param2()
000066:0x00056df0:	move	param1, p1
000067:0x00056e00:	movea	param2, p2
000067:0x00056e10:	rts
Param2<float,typename>::Serialize()
000072:0x00056e18:	icall	
000072:0x00056e28:	cmpi	#return, _i0
000072:0x00056e38:	beq	0x056e80
000072:0x00056e40:	icall	
000072:0x00056e50:	cmpi	#return, _i0
000072:0x00056e60:	beq	0x056e80
000072:0x00056e68:	imove	#return, 0x000001
000072:0x00056e78:	jump	0x056e90
000072:0x00056e80:	imove	#return, 0x000000
000072:0x00056e90:	rts
000072:0x00056e98:	rts
Param2<float,typename>::Deserializer()
000077:0x00056ea0:	icall	
000077:0x00056eb0:	cmpi	#return, _i0
000077:0x00056ec0:	beq	0x056f08
000077:0x00056ec8:	icall	
000077:0x00056ed8:	cmpi	#return, _i0
000077:0x00056ee8:	beq	0x056f08
000077:0x00056ef0:	imove	#return, 0x000001
000077:0x00056f00:	jump	0x056f18
000077:0x00056f08:	imove	#return, 0x000000
000077:0x00056f18:	rts
000077:0x00056f20:	rts
Param2<int,string>::Param2()
000066:0x00057048:	move	param1, p1
000067:0x00057058:	moves	param2, p2
000067:0x00057068:	rts
Param2<int,string>::Serialize()
000072:0x00057070:	icall	
000072:0x00057080:	cmpi	#return, _i0
000072:0x00057090:	beq	0x0570d8
000072:0x00057098:	icall	
000072:0x000570a8:	cmpi	#return, _i0
000072:0x000570b8:	beq	0x0570d8
000072:0x000570c0:	imove	#return, 0x000001
000072:0x000570d0:	jump	0x0570e8
000072:0x000570d8:	imove	#return, 0x000000
000072:0x000570e8:	rts
000072:0x000570f0:	rts
Param2<int,string>::Deserializer()
000077:0x000570f8:	icall	
000077:0x00057108:	cmpi	#return, _i0
000077:0x00057118:	beq	0x057160
000077:0x00057120:	icall	
000077:0x00057130:	cmpi	#return, _i0
000077:0x00057140:	beq	0x057160
000077:0x00057148:	imove	#return, 0x000001
000077:0x00057158:	jump	0x057170
000077:0x00057160:	imove	#return, 0x000000
000077:0x00057170:	rts
000077:0x00057178:	rts
Param2<float,string>::Param2()
000066:0x000572a0:	move	param1, p1
000067:0x000572b0:	moves	param2, p2
000067:0x000572c0:	rts
Param2<float,string>::Serialize()
000072:0x000572c8:	icall	
000072:0x000572d8:	cmpi	#return, _i0
000072:0x000572e8:	beq	0x057330
000072:0x000572f0:	icall	
000072:0x00057300:	cmpi	#return, _i0
000072:0x00057310:	beq	0x057330
000072:0x00057318:	imove	#return, 0x000001
000072:0x00057328:	jump	0x057340
000072:0x00057330:	imove	#return, 0x000000
000072:0x00057340:	rts
000072:0x00057348:	rts
Param2<float,string>::Deserializer()
000077:0x00057350:	icall	
000077:0x00057360:	cmpi	#return, _i0
000077:0x00057370:	beq	0x0573b8
000077:0x00057378:	icall	
000077:0x00057388:	cmpi	#return, _i0
000077:0x00057398:	beq	0x0573b8
000077:0x000573a0:	imove	#return, 0x000001
000077:0x000573b0:	jump	0x0573c8
000077:0x000573b8:	imove	#return, 0x000000
000077:0x000573c8:	rts
000077:0x000573d0:	rts
array<typename>::InsertAll()
//scripts/1_Core/proto\enscript.c
000427:0x00057d28:	imove	i, 0x000000
000427:0x00057d38:	jump	0x057d58
000427:0x00057d40:	move	@m00, i
000427:0x00057d50:	inc	i
000427:0x00057d58:	ncalli	array<typename>.Count()
000427:0x00057d60:	cmpi	i, #return
000427:0x00057d70:	bge	0x057da0
000429:0x00057d78:	icall	
000429:0x00057d88:	icall	
000429:0x00057d98:	jump	0x057d40
000429:0x00057da0:	rts
array<typename>::RemoveItem()
000479:0x00057e00:	icall	
000479:0x00057e10:	move	remove_index, #return
000481:0x00057e20:	cmpi	remove_index, _i0
000481:0x00057e30:	blt	0x057e48
000483:0x00057e38:	ncalli	array<typename>.RemoveOrdered(remove_index)
000483:0x00057e48:	rts
array<typename>::RemoveItemUnOrdered()
000489:0x00057e78:	icall	
000489:0x00057e88:	move	remove_index, #return
000491:0x00057e98:	cmpi	remove_index, _i0
000491:0x00057ea8:	blt	0x057ec0
000493:0x00057eb0:	ncalli	array<typename>.Remove(remove_index)
000493:0x00057ec0:	rts
array<typename>::IsValidIndex()
000499:0x00057ef0:	cmpi	index, _i-1
000499:0x00057f00:	ble	0x057f40
000499:0x00057f08:	ncalli	array<typename>.Count()
000499:0x00057f10:	cmpi	index, #return
000499:0x00057f20:	bge	0x057f40
000499:0x00057f28:	imove	#return, 0x000001
000499:0x00057f38:	jump	0x057f50
000499:0x00057f40:	imove	#return, 0x000000
000499:0x00057f50:	rts
000499:0x00057f58:	rts
array<typename>::Debug()
000525:0x000580b0:	ncalli	array<typename>.Count()
000525:0x000580b8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x000580e8:	icall	Print(#return)
000526:0x000580f8:	imove	i, 0x000000
000526:0x00058108:	jump	0x058128
000526:0x00058110:	move	@m00, i
000526:0x00058120:	inc	i
000526:0x00058128:	ncalli	array<typename>.Count()
000526:0x00058130:	cmpi	i, #return
000526:0x00058140:	bge	0x0581b0
000528:0x00058148:	icall	
000528:0x00058158:	movea	item, #return
000529:0x00058168:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00058198:	icall	Print(#return)
000529:0x000581a8:	jump	0x058110
000529:0x000581b0:	rts
array<typename>::GetRandomIndex()
000544:0x000581b8:	ncalli	array<typename>.Count()
000544:0x000581c0:	move	@m00, #return
000544:0x000581d0:	cmpi	@m00, _i0
000544:0x000581e0:	ble	0x058218
000546:0x000581e8:	ncalli	array<typename>.Count()
000546:0x000581f0:	icall	RandomInt(_i0, #return)
000546:0x00058200:	move	#return, #return
000546:0x00058210:	rts
000549:0x00058218:	imove	#return, 0xffffffff
000549:0x00058228:	rts
000549:0x00058230:	rts
array<typename>::GetRandomElement()
000563:0x00058238:	call	
000563:0x00058248:	icall	
000563:0x00058258:	movea	#return, #return
000563:0x00058268:	rts
000563:0x00058270:	rts
array<typename>::SwapItems()
000568:0x000582c8:	icall	
000568:0x000582d8:	movea	item1, #return
000569:0x000582e8:	icall	
000569:0x000582f8:	icall	
000570:0x00058308:	icall	
000570:0x00058318:	rts
array<typename>::InsertArray()
000575:0x00058370:	imove	i, 0x000000
000575:0x00058380:	jump	0x0583a0
000575:0x00058388:	move	@m00, i
000575:0x00058398:	inc	i
000575:0x000583a0:	ncalli	array<typename>.Count()
000575:0x000583a8:	cmpi	i, #return
000575:0x000583b8:	bge	0x0583f8
000577:0x000583c0:	icall	
000577:0x000583d0:	movea	item, #return
000578:0x000583e0:	icall	
000578:0x000583f0:	jump	0x058388
000578:0x000583f8:	rts
array<typename>::Invert()
000584:0x000584f0:	imove	left, 0x000000
000585:0x00058500:	ncalli	array<typename>.Count()
000585:0x00058508:	subi	right, #return, _i1
000586:0x00058518:	cmpi	right, _i0
000586:0x00058528:	ble	0x0585d0
000588:0x00058530:	cmpi	left, right
000588:0x00058540:	bge	0x0585d0
000590:0x00058548:	icall	
000590:0x00058558:	movea	temp, #return
000591:0x00058568:	move	@m00, left
000591:0x00058578:	inc	left
000591:0x00058580:	icall	
000591:0x00058590:	icall	
000592:0x000585a0:	move	@m00, right
000592:0x000585b0:	dec	right
000592:0x000585b8:	icall	
000592:0x000585c8:	jump	0x058530
000592:0x000585d0:	rts
array<typename>::MoveIndex()
000612:0x00058680:	ncalli	array<typename>.Count()
000612:0x00058688:	move	count, #return
000613:0x00058698:	move	new_index, curr_index
000615:0x000586a8:	cmpi	move_number, _i0
000615:0x000586b8:	ble	0x0586e0
000617:0x000586c0:	addi	@m00, curr_index, move_number
000617:0x000586d0:	move	new_index, @m00
000620:0x000586e0:	cmpi	move_number, _i0
000620:0x000586f0:	bge	0x058798
000622:0x000586f8:	subi	@m00, curr_index, move_number
000622:0x00058708:	move	new_index, @m00
000624:0x00058718:	cmpi	new_index, _i0
000624:0x00058728:	bge	0x058798
000626:0x00058730:	subi	@m01, _i0, count
000626:0x00058740:	cmpi	new_index, @m01
000626:0x00058750:	bgt	0x058778
000628:0x00058758:	modi	@m00, new_index, count
000628:0x00058768:	move	new_index, @m00
000631:0x00058778:	addi	@m00, new_index, count
000631:0x00058788:	move	new_index, @m00
000635:0x00058798:	cmpi	new_index, count
000635:0x000587a8:	blt	0x0587d0
000637:0x000587b0:	modi	@m00, new_index, count
000637:0x000587c0:	move	new_index, @m00
000641:0x000587d0:	move	#return, new_index
000641:0x000587e0:	rts
000641:0x000587e8:	rts
array<typename>::ShuffleArray()
000646:0x00058818:	imove	i, 0x000000
000646:0x00058828:	jump	0x058848
000646:0x00058830:	move	@m00, i
000646:0x00058840:	inc	i
000646:0x00058848:	ncalli	array<typename>.Count()
000646:0x00058850:	cmpi	i, #return
000646:0x00058860:	bge	0x058898
000648:0x00058868:	call	
000648:0x00058878:	call	
000648:0x00058890:	jump	0x058830
000648:0x00058898:	rts
array<typename>::DifferentAtPosition()
000666:0x00058930:	ncalli	array<typename>.Count()
000666:0x00058938:	move	@m00, #return
000666:0x00058948:	push	#return
000666:0x00058950:	ncalli	array<typename>.Count()
000666:0x00058958:	move	@m02, #return
000666:0x00058968:	pop	#return
000666:0x00058970:	cmpi	@m00, @m02
000666:0x00058980:	beq	0x0589b0
000668:0x00058988:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00058998:	imove	#return, 0xffffffff
000669:0x000589a8:	rts
000672:0x000589b0:	imove	i, 0x000000
000672:0x000589c0:	jump	0x0589d0
000672:0x000589c8:	inc	i
000672:0x000589d0:	ncalli	array<typename>.Count()
000672:0x000589d8:	cmpi	i, #return
000672:0x000589e8:	bge	0x058a78
000674:0x000589f0:	icall	
000674:0x00058a00:	movea	@m00, #return
000674:0x00058a10:	pushr	#return
000674:0x00058a18:	icall	
000674:0x00058a28:	movea	@m02, #return
000674:0x00058a38:	popr	#return
000674:0x00058a40:	cmpi	@m00, @m02
000674:0x00058a50:	beq	0x058a70
000676:0x00058a58:	move	#return, i
000676:0x00058a68:	rts
000676:0x00058a70:	jump	0x0589c8
000680:0x00058a78:	imove	#return, 0xffffffff
000680:0x00058a88:	rts
000680:0x00058a90:	rts
array<Managed>::InsertAll()
000427:0x00059268:	imove	i, 0x000000
000427:0x00059278:	jump	0x059298
000427:0x00059280:	move	@m00, i
000427:0x00059290:	inc	i
000427:0x00059298:	ncalli	array<Managed>.Count()
000427:0x000592a0:	cmpi	i, #return
000427:0x000592b0:	bge	0x0592e0
000429:0x000592b8:	icall	
000429:0x000592c8:	icall	
000429:0x000592d8:	jump	0x059280
000429:0x000592e0:	rts
array<Managed>::RemoveItem()
000479:0x00059310:	movefm	@c00, value
000479:0x00059320:	icall	
000479:0x00059330:	move	remove_index, #return
000481:0x00059340:	cmpi	remove_index, _i0
000481:0x00059350:	blt	0x059368
000483:0x00059358:	ncalli	array<Managed>.RemoveOrdered(remove_index)
000483:0x00059368:	rts
array<Managed>::RemoveItemUnOrdered()
000489:0x00059398:	movefm	@c00, value
000489:0x000593a8:	icall	
000489:0x000593b8:	move	remove_index, #return
000491:0x000593c8:	cmpi	remove_index, _i0
000491:0x000593d8:	blt	0x0593f0
000493:0x000593e0:	ncalli	array<Managed>.Remove(remove_index)
000493:0x000593f0:	rts
array<Managed>::IsValidIndex()
000499:0x000593f8:	cmpi	index, _i-1
000499:0x00059408:	ble	0x059448
000499:0x00059410:	ncalli	array<Managed>.Count()
000499:0x00059418:	cmpi	index, #return
000499:0x00059428:	bge	0x059448
000499:0x00059430:	imove	#return, 0x000001
000499:0x00059440:	jump	0x059458
000499:0x00059448:	imove	#return, 0x000000
000499:0x00059458:	rts
000499:0x00059460:	rts
array<Managed>::Debug()
000525:0x000594b8:	ncalli	array<Managed>.Count()
000525:0x000594c0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x000594f0:	icall	Print(#return)
000526:0x00059500:	imove	i, 0x000000
000526:0x00059510:	jump	0x059530
000526:0x00059518:	move	@m00, i
000526:0x00059528:	inc	i
000526:0x00059530:	ncalli	array<Managed>.Count()
000526:0x00059538:	cmpi	i, #return
000526:0x00059548:	bge	0x0595c0
000528:0x00059550:	icall	
000528:0x00059560:	movetm	item, #return
000529:0x00059570:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x000595a0:	icall	Print(#return)
000529:0x000595b0:	release	item
000529:0x000595b8:	jump	0x059518
000529:0x000595c0:	rts
array<Managed>::GetRandomIndex()
000544:0x000595c8:	ncalli	array<Managed>.Count()
000544:0x000595d0:	move	@m00, #return
000544:0x000595e0:	cmpi	@m00, _i0
000544:0x000595f0:	ble	0x059628
000546:0x000595f8:	ncalli	array<Managed>.Count()
000546:0x00059600:	icall	RandomInt(_i0, #return)
000546:0x00059610:	move	#return, #return
000546:0x00059620:	rts
000549:0x00059628:	imove	#return, 0xffffffff
000549:0x00059638:	rts
000549:0x00059640:	rts
array<Managed>::GetRandomElement()
000563:0x00059648:	call	
000563:0x00059658:	icall	
000563:0x00059668:	movetm	#return, #return
000563:0x00059678:	rts
000563:0x00059680:	rts
array<Managed>::SwapItems()
000568:0x000596b0:	icall	
000568:0x000596c0:	movetm	item1, #return
000569:0x000596d0:	icall	
000569:0x000596e0:	icall	
000570:0x000596f0:	movefm	@c00, item1
000570:0x00059700:	icall	
000570:0x00059710:	release	item1
000570:0x00059718:	rts
array<Managed>::InsertArray()
000575:0x00059770:	imove	i, 0x000000
000575:0x00059780:	jump	0x0597a0
000575:0x00059788:	move	@m00, i
000575:0x00059798:	inc	i
000575:0x000597a0:	ncalli	array<Managed>.Count()
000575:0x000597a8:	cmpi	i, #return
000575:0x000597b8:	bge	0x059810
000577:0x000597c0:	icall	
000577:0x000597d0:	movetm	item, #return
000578:0x000597e0:	movefm	@c00, item
000578:0x000597f0:	icall	
000578:0x00059800:	release	item
000578:0x00059808:	jump	0x059788
000578:0x00059810:	rts
array<Managed>::Invert()
000584:0x00059890:	imove	left, 0x000000
000585:0x000598a0:	ncalli	array<Managed>.Count()
000585:0x000598a8:	subi	right, #return, _i1
000586:0x000598b8:	cmpi	right, _i0
000586:0x000598c8:	ble	0x059988
000588:0x000598d0:	cmpi	left, right
000588:0x000598e0:	bge	0x059988
000590:0x000598e8:	icall	
000590:0x000598f8:	movetm	temp, #return
000591:0x00059908:	move	@m00, left
000591:0x00059918:	inc	left
000591:0x00059920:	icall	
000591:0x00059930:	icall	
000592:0x00059940:	move	@m00, right
000592:0x00059950:	dec	right
000592:0x00059958:	movefm	@c00, temp
000592:0x00059968:	icall	
000592:0x00059978:	release	temp
000592:0x00059980:	jump	0x0598d0
000592:0x00059988:	rts
array<Managed>::MoveIndex()
000612:0x000599e0:	ncalli	array<Managed>.Count()
000612:0x000599e8:	move	count, #return
000613:0x000599f8:	move	new_index, curr_index
000615:0x00059a08:	cmpi	move_number, _i0
000615:0x00059a18:	ble	0x059a40
000617:0x00059a20:	addi	@m00, curr_index, move_number
000617:0x00059a30:	move	new_index, @m00
000620:0x00059a40:	cmpi	move_number, _i0
000620:0x00059a50:	bge	0x059af8
000622:0x00059a58:	subi	@m00, curr_index, move_number
000622:0x00059a68:	move	new_index, @m00
000624:0x00059a78:	cmpi	new_index, _i0
000624:0x00059a88:	bge	0x059af8
000626:0x00059a90:	subi	@m01, _i0, count
000626:0x00059aa0:	cmpi	new_index, @m01
000626:0x00059ab0:	bgt	0x059ad8
000628:0x00059ab8:	modi	@m00, new_index, count
000628:0x00059ac8:	move	new_index, @m00
000631:0x00059ad8:	addi	@m00, new_index, count
000631:0x00059ae8:	move	new_index, @m00
000635:0x00059af8:	cmpi	new_index, count
000635:0x00059b08:	blt	0x059b30
000637:0x00059b10:	modi	@m00, new_index, count
000637:0x00059b20:	move	new_index, @m00
000641:0x00059b30:	move	#return, new_index
000641:0x00059b40:	rts
000641:0x00059b48:	rts
array<Managed>::ShuffleArray()
000646:0x00059b78:	imove	i, 0x000000
000646:0x00059b88:	jump	0x059ba8
000646:0x00059b90:	move	@m00, i
000646:0x00059ba0:	inc	i
000646:0x00059ba8:	ncalli	array<Managed>.Count()
000646:0x00059bb0:	cmpi	i, #return
000646:0x00059bc0:	bge	0x059bf8
000648:0x00059bc8:	call	
000648:0x00059bd8:	call	
000648:0x00059bf0:	jump	0x059b90
000648:0x00059bf8:	rts
array<Managed>::DifferentAtPosition()
000666:0x00059c28:	ncalli	array<Managed>.Count()
000666:0x00059c30:	move	@m00, #return
000666:0x00059c40:	push	#return
000666:0x00059c48:	ncalli	array<Managed>.Count()
000666:0x00059c50:	move	@m02, #return
000666:0x00059c60:	pop	#return
000666:0x00059c68:	cmpi	@m00, @m02
000666:0x00059c78:	beq	0x059ca8
000668:0x00059c80:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00059c90:	imove	#return, 0xffffffff
000669:0x00059ca0:	rts
000672:0x00059ca8:	imove	i, 0x000000
000672:0x00059cb8:	jump	0x059cc8
000672:0x00059cc0:	inc	i
000672:0x00059cc8:	ncalli	array<Managed>.Count()
000672:0x00059cd0:	cmpi	i, #return
000672:0x00059ce0:	bge	0x059d70
000674:0x00059ce8:	icall	
000674:0x00059cf8:	movec	@c00, #return
000674:0x00059d08:	pushc	#return
000674:0x00059d10:	icall	
000674:0x00059d20:	movec	@c02, #return
000674:0x00059d30:	popc	#return
000674:0x00059d38:	cmpc	@c00, @c02
000674:0x00059d48:	beq	0x059d68
000676:0x00059d50:	move	#return, i
000676:0x00059d60:	rts
000676:0x00059d68:	jump	0x059cc0
000680:0x00059d70:	imove	#return, 0xffffffff
000680:0x00059d80:	rts
000680:0x00059d88:	rts
array<@Managed>::InsertAll()
000427:0x0005a1a0:	imove	i, 0x000000
000427:0x0005a1b0:	jump	0x05a1d0
000427:0x0005a1b8:	move	@m00, i
000427:0x0005a1c8:	inc	i
000427:0x0005a1d0:	ncalli	array<Managed>.Count()
000427:0x0005a1d8:	cmpi	i, #return
000427:0x0005a1e8:	bge	0x05a218
000429:0x0005a1f0:	icall	
000429:0x0005a200:	icall	
000429:0x0005a210:	jump	0x05a1b8
000429:0x0005a218:	rts
array<@Managed>::RemoveItem()
000479:0x0005a248:	movefm	@c00, value
000479:0x0005a258:	icall	
000479:0x0005a268:	move	remove_index, #return
000481:0x0005a278:	cmpi	remove_index, _i0
000481:0x0005a288:	blt	0x05a2a0
000483:0x0005a290:	ncalli	array<@Managed>.RemoveOrdered(remove_index)
000483:0x0005a2a0:	rts
array<@Managed>::RemoveItemUnOrdered()
000489:0x0005a2d0:	movefm	@c00, value
000489:0x0005a2e0:	icall	
000489:0x0005a2f0:	move	remove_index, #return
000491:0x0005a300:	cmpi	remove_index, _i0
000491:0x0005a310:	blt	0x05a328
000493:0x0005a318:	ncalli	array<@Managed>.Remove(remove_index)
000493:0x0005a328:	rts
array<@Managed>::IsValidIndex()
000499:0x0005a330:	cmpi	index, _i-1
000499:0x0005a340:	ble	0x05a380
000499:0x0005a348:	ncalli	array<@Managed>.Count()
000499:0x0005a350:	cmpi	index, #return
000499:0x0005a360:	bge	0x05a380
000499:0x0005a368:	imove	#return, 0x000001
000499:0x0005a378:	jump	0x05a390
000499:0x0005a380:	imove	#return, 0x000000
000499:0x0005a390:	rts
000499:0x0005a398:	rts
array<@Managed>::Debug()
000525:0x0005a3f0:	ncalli	array<@Managed>.Count()
000525:0x0005a3f8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0005a428:	icall	Print(#return)
000526:0x0005a438:	imove	i, 0x000000
000526:0x0005a448:	jump	0x05a468
000526:0x0005a450:	move	@m00, i
000526:0x0005a460:	inc	i
000526:0x0005a468:	ncalli	array<@Managed>.Count()
000526:0x0005a470:	cmpi	i, #return
000526:0x0005a480:	bge	0x05a4f8
000528:0x0005a488:	icall	
000528:0x0005a498:	movetm	item, #return
000529:0x0005a4a8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0005a4d8:	icall	Print(#return)
000529:0x0005a4e8:	release	item
000529:0x0005a4f0:	jump	0x05a450
000529:0x0005a4f8:	rts
array<@Managed>::GetRandomIndex()
000544:0x0005a500:	ncalli	array<@Managed>.Count()
000544:0x0005a508:	move	@m00, #return
000544:0x0005a518:	cmpi	@m00, _i0
000544:0x0005a528:	ble	0x05a560
000546:0x0005a530:	ncalli	array<@Managed>.Count()
000546:0x0005a538:	icall	RandomInt(_i0, #return)
000546:0x0005a548:	move	#return, #return
000546:0x0005a558:	rts
000549:0x0005a560:	imove	#return, 0xffffffff
000549:0x0005a570:	rts
000549:0x0005a578:	rts
array<@Managed>::GetRandomElement()
000563:0x0005a580:	call	
000563:0x0005a590:	icall	
000563:0x0005a5a0:	movetm	#return, #return
000563:0x0005a5b0:	rts
000563:0x0005a5b8:	rts
array<@Managed>::SwapItems()
000568:0x0005a5e8:	icall	
000568:0x0005a5f8:	movetm	item1, #return
000569:0x0005a608:	icall	
000569:0x0005a618:	icall	
000570:0x0005a628:	movefm	@c00, item1
000570:0x0005a638:	icall	
000570:0x0005a648:	release	item1
000570:0x0005a650:	rts
array<@Managed>::InsertArray()
000575:0x0005a6a8:	imove	i, 0x000000
000575:0x0005a6b8:	jump	0x05a6d8
000575:0x0005a6c0:	move	@m00, i
000575:0x0005a6d0:	inc	i
000575:0x0005a6d8:	ncalli	array<Managed>.Count()
000575:0x0005a6e0:	cmpi	i, #return
000575:0x0005a6f0:	bge	0x05a748
000577:0x0005a6f8:	icall	
000577:0x0005a708:	movetm	item, #return
000578:0x0005a718:	movefm	@c00, item
000578:0x0005a728:	icall	
000578:0x0005a738:	release	item
000578:0x0005a740:	jump	0x05a6c0
000578:0x0005a748:	rts
array<@Managed>::Invert()
000584:0x0005a7c8:	imove	left, 0x000000
000585:0x0005a7d8:	ncalli	array<@Managed>.Count()
000585:0x0005a7e0:	subi	right, #return, _i1
000586:0x0005a7f0:	cmpi	right, _i0
000586:0x0005a800:	ble	0x05a8c0
000588:0x0005a808:	cmpi	left, right
000588:0x0005a818:	bge	0x05a8c0
000590:0x0005a820:	icall	
000590:0x0005a830:	movetm	temp, #return
000591:0x0005a840:	move	@m00, left
000591:0x0005a850:	inc	left
000591:0x0005a858:	icall	
000591:0x0005a868:	icall	
000592:0x0005a878:	move	@m00, right
000592:0x0005a888:	dec	right
000592:0x0005a890:	movefm	@c00, temp
000592:0x0005a8a0:	icall	
000592:0x0005a8b0:	release	temp
000592:0x0005a8b8:	jump	0x05a808
000592:0x0005a8c0:	rts
array<@Managed>::MoveIndex()
000612:0x0005a918:	ncalli	array<@Managed>.Count()
000612:0x0005a920:	move	count, #return
000613:0x0005a930:	move	new_index, curr_index
000615:0x0005a940:	cmpi	move_number, _i0
000615:0x0005a950:	ble	0x05a978
000617:0x0005a958:	addi	@m00, curr_index, move_number
000617:0x0005a968:	move	new_index, @m00
000620:0x0005a978:	cmpi	move_number, _i0
000620:0x0005a988:	bge	0x05aa30
000622:0x0005a990:	subi	@m00, curr_index, move_number
000622:0x0005a9a0:	move	new_index, @m00
000624:0x0005a9b0:	cmpi	new_index, _i0
000624:0x0005a9c0:	bge	0x05aa30
000626:0x0005a9c8:	subi	@m01, _i0, count
000626:0x0005a9d8:	cmpi	new_index, @m01
000626:0x0005a9e8:	bgt	0x05aa10
000628:0x0005a9f0:	modi	@m00, new_index, count
000628:0x0005aa00:	move	new_index, @m00
000631:0x0005aa10:	addi	@m00, new_index, count
000631:0x0005aa20:	move	new_index, @m00
000635:0x0005aa30:	cmpi	new_index, count
000635:0x0005aa40:	blt	0x05aa68
000637:0x0005aa48:	modi	@m00, new_index, count
000637:0x0005aa58:	move	new_index, @m00
000641:0x0005aa68:	move	#return, new_index
000641:0x0005aa78:	rts
000641:0x0005aa80:	rts
array<@Managed>::ShuffleArray()
000646:0x0005aab0:	imove	i, 0x000000
000646:0x0005aac0:	jump	0x05aae0
000646:0x0005aac8:	move	@m00, i
000646:0x0005aad8:	inc	i
000646:0x0005aae0:	ncalli	array<@Managed>.Count()
000646:0x0005aae8:	cmpi	i, #return
000646:0x0005aaf8:	bge	0x05ab30
000648:0x0005ab00:	call	
000648:0x0005ab10:	call	
000648:0x0005ab28:	jump	0x05aac8
000648:0x0005ab30:	rts
array<@Managed>::DifferentAtPosition()
000666:0x0005ab60:	ncalli	array<@Managed>.Count()
000666:0x0005ab68:	move	@m00, #return
000666:0x0005ab78:	ncalli	array<Managed>.Count()
000666:0x0005ab80:	cmpi	@m00, #return
000666:0x0005ab90:	beq	0x05abc0
000668:0x0005ab98:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0005aba8:	imove	#return, 0xffffffff
000669:0x0005abb8:	rts
000672:0x0005abc0:	imove	i, 0x000000
000672:0x0005abd0:	jump	0x05abe0
000672:0x0005abd8:	inc	i
000672:0x0005abe0:	ncalli	array<Managed>.Count()
000672:0x0005abe8:	cmpi	i, #return
000672:0x0005abf8:	bge	0x05ac68
000674:0x0005ac00:	icall	
000674:0x0005ac10:	movec	@c00, #return
000674:0x0005ac20:	icall	
000674:0x0005ac30:	cmpc	@c00, #return
000674:0x0005ac40:	beq	0x05ac60
000676:0x0005ac48:	move	#return, i
000676:0x0005ac58:	rts
000676:0x0005ac60:	jump	0x05abd8
000680:0x0005ac68:	imove	#return, 0xffffffff
000680:0x0005ac78:	rts
000680:0x0005ac80:	rts
array<Class>::InsertAll()
000427:0x0005b278:	imove	i, 0x000000
000427:0x0005b288:	jump	0x05b2a8
000427:0x0005b290:	move	@m00, i
000427:0x0005b2a0:	inc	i
000427:0x0005b2a8:	ncalli	array<Class>.Count()
000427:0x0005b2b0:	cmpi	i, #return
000427:0x0005b2c0:	bge	0x05b2f0
000429:0x0005b2c8:	icall	
000429:0x0005b2d8:	icall	
000429:0x0005b2e8:	jump	0x05b290
000429:0x0005b2f0:	rts
array<Class>::RemoveItem()
000479:0x0005b320:	icall	
000479:0x0005b330:	move	remove_index, #return
000481:0x0005b340:	cmpi	remove_index, _i0
000481:0x0005b350:	blt	0x05b368
000483:0x0005b358:	ncalli	array<Class>.RemoveOrdered(remove_index)
000483:0x0005b368:	rts
array<Class>::RemoveItemUnOrdered()
000489:0x0005b398:	icall	
000489:0x0005b3a8:	move	remove_index, #return
000491:0x0005b3b8:	cmpi	remove_index, _i0
000491:0x0005b3c8:	blt	0x05b3e0
000493:0x0005b3d0:	ncalli	array<Class>.Remove(remove_index)
000493:0x0005b3e0:	rts
array<Class>::IsValidIndex()
000499:0x0005b3e8:	cmpi	index, _i-1
000499:0x0005b3f8:	ble	0x05b438
000499:0x0005b400:	ncalli	array<Class>.Count()
000499:0x0005b408:	cmpi	index, #return
000499:0x0005b418:	bge	0x05b438
000499:0x0005b420:	imove	#return, 0x000001
000499:0x0005b430:	jump	0x05b448
000499:0x0005b438:	imove	#return, 0x000000
000499:0x0005b448:	rts
000499:0x0005b450:	rts
array<Class>::Debug()
000525:0x0005b4a8:	ncalli	array<Class>.Count()
000525:0x0005b4b0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0005b4e0:	icall	Print(#return)
000526:0x0005b4f0:	imove	i, 0x000000
000526:0x0005b500:	jump	0x05b520
000526:0x0005b508:	move	@m00, i
000526:0x0005b518:	inc	i
000526:0x0005b520:	ncalli	array<Class>.Count()
000526:0x0005b528:	cmpi	i, #return
000526:0x0005b538:	bge	0x05b5a8
000528:0x0005b540:	icall	
000528:0x0005b550:	movec	item, #return
000529:0x0005b560:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0005b590:	icall	Print(#return)
000529:0x0005b5a0:	jump	0x05b508
000529:0x0005b5a8:	rts
array<Class>::GetRandomIndex()
000544:0x0005b5b0:	ncalli	array<Class>.Count()
000544:0x0005b5b8:	move	@m00, #return
000544:0x0005b5c8:	cmpi	@m00, _i0
000544:0x0005b5d8:	ble	0x05b610
000546:0x0005b5e0:	ncalli	array<Class>.Count()
000546:0x0005b5e8:	icall	RandomInt(_i0, #return)
000546:0x0005b5f8:	move	#return, #return
000546:0x0005b608:	rts
000549:0x0005b610:	imove	#return, 0xffffffff
000549:0x0005b620:	rts
000549:0x0005b628:	rts
array<Class>::GetRandomElement()
000563:0x0005b630:	call	
000563:0x0005b640:	icall	
000563:0x0005b650:	movec	#return, #return
000563:0x0005b660:	rts
000563:0x0005b668:	rts
array<Class>::SwapItems()
000568:0x0005b698:	icall	
000568:0x0005b6a8:	movec	item1, #return
000569:0x0005b6b8:	icall	
000569:0x0005b6c8:	icall	
000570:0x0005b6d8:	icall	
000570:0x0005b6e8:	rts
array<Class>::InsertArray()
000575:0x0005b740:	imove	i, 0x000000
000575:0x0005b750:	jump	0x05b770
000575:0x0005b758:	move	@m00, i
000575:0x0005b768:	inc	i
000575:0x0005b770:	ncalli	array<Class>.Count()
000575:0x0005b778:	cmpi	i, #return
000575:0x0005b788:	bge	0x05b7c8
000577:0x0005b790:	icall	
000577:0x0005b7a0:	movec	item, #return
000578:0x0005b7b0:	icall	
000578:0x0005b7c0:	jump	0x05b758
000578:0x0005b7c8:	rts
array<Class>::Invert()
000584:0x0005b848:	imove	left, 0x000000
000585:0x0005b858:	ncalli	array<Class>.Count()
000585:0x0005b860:	subi	right, #return, _i1
000586:0x0005b870:	cmpi	right, _i0
000586:0x0005b880:	ble	0x05b928
000588:0x0005b888:	cmpi	left, right
000588:0x0005b898:	bge	0x05b928
000590:0x0005b8a0:	icall	
000590:0x0005b8b0:	movec	temp, #return
000591:0x0005b8c0:	move	@m00, left
000591:0x0005b8d0:	inc	left
000591:0x0005b8d8:	icall	
000591:0x0005b8e8:	icall	
000592:0x0005b8f8:	move	@m00, right
000592:0x0005b908:	dec	right
000592:0x0005b910:	icall	
000592:0x0005b920:	jump	0x05b888
000592:0x0005b928:	rts
array<Class>::MoveIndex()
000612:0x0005b980:	ncalli	array<Class>.Count()
000612:0x0005b988:	move	count, #return
000613:0x0005b998:	move	new_index, curr_index
000615:0x0005b9a8:	cmpi	move_number, _i0
000615:0x0005b9b8:	ble	0x05b9e0
000617:0x0005b9c0:	addi	@m00, curr_index, move_number
000617:0x0005b9d0:	move	new_index, @m00
000620:0x0005b9e0:	cmpi	move_number, _i0
000620:0x0005b9f0:	bge	0x05ba98
000622:0x0005b9f8:	subi	@m00, curr_index, move_number
000622:0x0005ba08:	move	new_index, @m00
000624:0x0005ba18:	cmpi	new_index, _i0
000624:0x0005ba28:	bge	0x05ba98
000626:0x0005ba30:	subi	@m01, _i0, count
000626:0x0005ba40:	cmpi	new_index, @m01
000626:0x0005ba50:	bgt	0x05ba78
000628:0x0005ba58:	modi	@m00, new_index, count
000628:0x0005ba68:	move	new_index, @m00
000631:0x0005ba78:	addi	@m00, new_index, count
000631:0x0005ba88:	move	new_index, @m00
000635:0x0005ba98:	cmpi	new_index, count
000635:0x0005baa8:	blt	0x05bad0
000637:0x0005bab0:	modi	@m00, new_index, count
000637:0x0005bac0:	move	new_index, @m00
000641:0x0005bad0:	move	#return, new_index
000641:0x0005bae0:	rts
000641:0x0005bae8:	rts
array<Class>::ShuffleArray()
000646:0x0005bb18:	imove	i, 0x000000
000646:0x0005bb28:	jump	0x05bb48
000646:0x0005bb30:	move	@m00, i
000646:0x0005bb40:	inc	i
000646:0x0005bb48:	ncalli	array<Class>.Count()
000646:0x0005bb50:	cmpi	i, #return
000646:0x0005bb60:	bge	0x05bb98
000648:0x0005bb68:	call	
000648:0x0005bb78:	call	
000648:0x0005bb90:	jump	0x05bb30
000648:0x0005bb98:	rts
array<Class>::DifferentAtPosition()
000666:0x0005bbc8:	ncalli	array<Class>.Count()
000666:0x0005bbd0:	move	@m00, #return
000666:0x0005bbe0:	push	#return
000666:0x0005bbe8:	ncalli	array<Class>.Count()
000666:0x0005bbf0:	move	@m02, #return
000666:0x0005bc00:	pop	#return
000666:0x0005bc08:	cmpi	@m00, @m02
000666:0x0005bc18:	beq	0x05bc48
000668:0x0005bc20:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0005bc30:	imove	#return, 0xffffffff
000669:0x0005bc40:	rts
000672:0x0005bc48:	imove	i, 0x000000
000672:0x0005bc58:	jump	0x05bc68
000672:0x0005bc60:	inc	i
000672:0x0005bc68:	ncalli	array<Class>.Count()
000672:0x0005bc70:	cmpi	i, #return
000672:0x0005bc80:	bge	0x05bd10
000674:0x0005bc88:	icall	
000674:0x0005bc98:	movec	@c00, #return
000674:0x0005bca8:	pushc	#return
000674:0x0005bcb0:	icall	
000674:0x0005bcc0:	movec	@c02, #return
000674:0x0005bcd0:	popc	#return
000674:0x0005bcd8:	cmpc	@c00, @c02
000674:0x0005bce8:	beq	0x05bd08
000676:0x0005bcf0:	move	#return, i
000676:0x0005bd00:	rts
000676:0x0005bd08:	jump	0x05bc60
000680:0x0005bd10:	imove	#return, 0xffffffff
000680:0x0005bd20:	rts
000680:0x0005bd28:	rts
array<int>::InsertAll()
000427:0x0005c320:	imove	i, 0x000000
000427:0x0005c330:	jump	0x05c350
000427:0x0005c338:	move	@m00, i
000427:0x0005c348:	inc	i
000427:0x0005c350:	ncalli	array<int>.Count()
000427:0x0005c358:	cmpi	i, #return
000427:0x0005c368:	bge	0x05c398
000429:0x0005c370:	icall	
000429:0x0005c380:	icall	
000429:0x0005c390:	jump	0x05c338
000429:0x0005c398:	rts
array<int>::RemoveItem()
000479:0x0005c3c8:	icall	
000479:0x0005c3d8:	move	remove_index, #return
000481:0x0005c3e8:	cmpi	remove_index, _i0
000481:0x0005c3f8:	blt	0x05c410
000483:0x0005c400:	ncalli	array<int>.RemoveOrdered(remove_index)
000483:0x0005c410:	rts
array<int>::RemoveItemUnOrdered()
000489:0x0005c440:	icall	
000489:0x0005c450:	move	remove_index, #return
000491:0x0005c460:	cmpi	remove_index, _i0
000491:0x0005c470:	blt	0x05c488
000493:0x0005c478:	ncalli	array<int>.Remove(remove_index)
000493:0x0005c488:	rts
array<int>::IsValidIndex()
000499:0x0005c490:	cmpi	index, _i-1
000499:0x0005c4a0:	ble	0x05c4e0
000499:0x0005c4a8:	ncalli	array<int>.Count()
000499:0x0005c4b0:	cmpi	index, #return
000499:0x0005c4c0:	bge	0x05c4e0
000499:0x0005c4c8:	imove	#return, 0x000001
000499:0x0005c4d8:	jump	0x05c4f0
000499:0x0005c4e0:	imove	#return, 0x000000
000499:0x0005c4f0:	rts
000499:0x0005c4f8:	rts
array<int>::Debug()
000525:0x0005c550:	ncalli	array<int>.Count()
000525:0x0005c558:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0005c588:	icall	Print(#return)
000526:0x0005c598:	imove	i, 0x000000
000526:0x0005c5a8:	jump	0x05c5c8
000526:0x0005c5b0:	move	@m00, i
000526:0x0005c5c0:	inc	i
000526:0x0005c5c8:	ncalli	array<int>.Count()
000526:0x0005c5d0:	cmpi	i, #return
000526:0x0005c5e0:	bge	0x05c650
000528:0x0005c5e8:	icall	
000528:0x0005c5f8:	move	item, #return
000529:0x0005c608:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0005c638:	icall	Print(#return)
000529:0x0005c648:	jump	0x05c5b0
000529:0x0005c650:	rts
array<int>::GetRandomIndex()
000544:0x0005c658:	ncalli	array<int>.Count()
000544:0x0005c660:	move	@m00, #return
000544:0x0005c670:	cmpi	@m00, _i0
000544:0x0005c680:	ble	0x05c6b8
000546:0x0005c688:	ncalli	array<int>.Count()
000546:0x0005c690:	icall	RandomInt(_i0, #return)
000546:0x0005c6a0:	move	#return, #return
000546:0x0005c6b0:	rts
000549:0x0005c6b8:	imove	#return, 0xffffffff
000549:0x0005c6c8:	rts
000549:0x0005c6d0:	rts
array<int>::GetRandomElement()
000563:0x0005c6d8:	call	
000563:0x0005c6e8:	icall	
000563:0x0005c6f8:	move	#return, #return
000563:0x0005c708:	rts
000563:0x0005c710:	rts
array<int>::SwapItems()
000568:0x0005c740:	icall	
000568:0x0005c750:	move	item1, #return
000569:0x0005c760:	icall	
000569:0x0005c770:	icall	
000570:0x0005c780:	icall	
000570:0x0005c790:	rts
array<int>::InsertArray()
000575:0x0005c7e8:	imove	i, 0x000000
000575:0x0005c7f8:	jump	0x05c818
000575:0x0005c800:	move	@m00, i
000575:0x0005c810:	inc	i
000575:0x0005c818:	ncalli	array<int>.Count()
000575:0x0005c820:	cmpi	i, #return
000575:0x0005c830:	bge	0x05c870
000577:0x0005c838:	icall	
000577:0x0005c848:	move	item, #return
000578:0x0005c858:	icall	
000578:0x0005c868:	jump	0x05c800
000578:0x0005c870:	rts
array<int>::Invert()
000584:0x0005c8f0:	imove	left, 0x000000
000585:0x0005c900:	ncalli	array<int>.Count()
000585:0x0005c908:	subi	right, #return, _i1
000586:0x0005c918:	cmpi	right, _i0
000586:0x0005c928:	ble	0x05c9d0
000588:0x0005c930:	cmpi	left, right
000588:0x0005c940:	bge	0x05c9d0
000590:0x0005c948:	icall	
000590:0x0005c958:	move	temp, #return
000591:0x0005c968:	move	@m00, left
000591:0x0005c978:	inc	left
000591:0x0005c980:	icall	
000591:0x0005c990:	icall	
000592:0x0005c9a0:	move	@m00, right
000592:0x0005c9b0:	dec	right
000592:0x0005c9b8:	icall	
000592:0x0005c9c8:	jump	0x05c930
000592:0x0005c9d0:	rts
array<int>::MoveIndex()
000612:0x0005ca28:	ncalli	array<int>.Count()
000612:0x0005ca30:	move	count, #return
000613:0x0005ca40:	move	new_index, curr_index
000615:0x0005ca50:	cmpi	move_number, _i0
000615:0x0005ca60:	ble	0x05ca88
000617:0x0005ca68:	addi	@m00, curr_index, move_number
000617:0x0005ca78:	move	new_index, @m00
000620:0x0005ca88:	cmpi	move_number, _i0
000620:0x0005ca98:	bge	0x05cb40
000622:0x0005caa0:	subi	@m00, curr_index, move_number
000622:0x0005cab0:	move	new_index, @m00
000624:0x0005cac0:	cmpi	new_index, _i0
000624:0x0005cad0:	bge	0x05cb40
000626:0x0005cad8:	subi	@m01, _i0, count
000626:0x0005cae8:	cmpi	new_index, @m01
000626:0x0005caf8:	bgt	0x05cb20
000628:0x0005cb00:	modi	@m00, new_index, count
000628:0x0005cb10:	move	new_index, @m00
000631:0x0005cb20:	addi	@m00, new_index, count
000631:0x0005cb30:	move	new_index, @m00
000635:0x0005cb40:	cmpi	new_index, count
000635:0x0005cb50:	blt	0x05cb78
000637:0x0005cb58:	modi	@m00, new_index, count
000637:0x0005cb68:	move	new_index, @m00
000641:0x0005cb78:	move	#return, new_index
000641:0x0005cb88:	rts
000641:0x0005cb90:	rts
array<int>::ShuffleArray()
000646:0x0005cbc0:	imove	i, 0x000000
000646:0x0005cbd0:	jump	0x05cbf0
000646:0x0005cbd8:	move	@m00, i
000646:0x0005cbe8:	inc	i
000646:0x0005cbf0:	ncalli	array<int>.Count()
000646:0x0005cbf8:	cmpi	i, #return
000646:0x0005cc08:	bge	0x05cc40
000648:0x0005cc10:	call	
000648:0x0005cc20:	call	
000648:0x0005cc38:	jump	0x05cbd8
000648:0x0005cc40:	rts
array<int>::DifferentAtPosition()
000666:0x0005cc70:	ncalli	array<int>.Count()
000666:0x0005cc78:	move	@m00, #return
000666:0x0005cc88:	push	#return
000666:0x0005cc90:	ncalli	array<int>.Count()
000666:0x0005cc98:	move	@m02, #return
000666:0x0005cca8:	pop	#return
000666:0x0005ccb0:	cmpi	@m00, @m02
000666:0x0005ccc0:	beq	0x05ccf0
000668:0x0005ccc8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0005ccd8:	imove	#return, 0xffffffff
000669:0x0005cce8:	rts
000672:0x0005ccf0:	imove	i, 0x000000
000672:0x0005cd00:	jump	0x05cd10
000672:0x0005cd08:	inc	i
000672:0x0005cd10:	ncalli	array<int>.Count()
000672:0x0005cd18:	cmpi	i, #return
000672:0x0005cd28:	bge	0x05cdb8
000674:0x0005cd30:	icall	
000674:0x0005cd40:	move	@m00, #return
000674:0x0005cd50:	push	#return
000674:0x0005cd58:	icall	
000674:0x0005cd68:	move	@m02, #return
000674:0x0005cd78:	pop	#return
000674:0x0005cd80:	cmpi	@m00, @m02
000674:0x0005cd90:	beq	0x05cdb0
000676:0x0005cd98:	move	#return, i
000676:0x0005cda8:	rts
000676:0x0005cdb0:	jump	0x05cd08
000680:0x0005cdb8:	imove	#return, 0xffffffff
000680:0x0005cdc8:	rts
000680:0x0005cdd0:	rts
array<float>::InsertAll()
000427:0x0005d3c8:	imove	i, 0x000000
000427:0x0005d3d8:	jump	0x05d3f8
000427:0x0005d3e0:	move	@m00, i
000427:0x0005d3f0:	inc	i
000427:0x0005d3f8:	ncalli	array<float>.Count()
000427:0x0005d400:	cmpi	i, #return
000427:0x0005d410:	bge	0x05d440
000429:0x0005d418:	icall	
000429:0x0005d428:	icall	
000429:0x0005d438:	jump	0x05d3e0
000429:0x0005d440:	rts
array<float>::RemoveItem()
000479:0x0005d470:	icall	
000479:0x0005d480:	move	remove_index, #return
000481:0x0005d490:	cmpi	remove_index, _i0
000481:0x0005d4a0:	blt	0x05d4b8
000483:0x0005d4a8:	ncalli	array<float>.RemoveOrdered(remove_index)
000483:0x0005d4b8:	rts
array<float>::RemoveItemUnOrdered()
000489:0x0005d4e8:	icall	
000489:0x0005d4f8:	move	remove_index, #return
000491:0x0005d508:	cmpi	remove_index, _i0
000491:0x0005d518:	blt	0x05d530
000493:0x0005d520:	ncalli	array<float>.Remove(remove_index)
000493:0x0005d530:	rts
array<float>::IsValidIndex()
000499:0x0005d538:	cmpi	index, _i-1
000499:0x0005d548:	ble	0x05d588
000499:0x0005d550:	ncalli	array<float>.Count()
000499:0x0005d558:	cmpi	index, #return
000499:0x0005d568:	bge	0x05d588
000499:0x0005d570:	imove	#return, 0x000001
000499:0x0005d580:	jump	0x05d598
000499:0x0005d588:	imove	#return, 0x000000
000499:0x0005d598:	rts
000499:0x0005d5a0:	rts
array<float>::Debug()
000525:0x0005d5f8:	ncalli	array<float>.Count()
000525:0x0005d600:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0005d630:	icall	Print(#return)
000526:0x0005d640:	imove	i, 0x000000
000526:0x0005d650:	jump	0x05d670
000526:0x0005d658:	move	@m00, i
000526:0x0005d668:	inc	i
000526:0x0005d670:	ncalli	array<float>.Count()
000526:0x0005d678:	cmpi	i, #return
000526:0x0005d688:	bge	0x05d6f8
000528:0x0005d690:	icall	
000528:0x0005d6a0:	move	item, #return
000529:0x0005d6b0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0005d6e0:	icall	Print(#return)
000529:0x0005d6f0:	jump	0x05d658
000529:0x0005d6f8:	rts
array<float>::GetRandomIndex()
000544:0x0005d700:	ncalli	array<float>.Count()
000544:0x0005d708:	move	@m00, #return
000544:0x0005d718:	cmpi	@m00, _i0
000544:0x0005d728:	ble	0x05d760
000546:0x0005d730:	ncalli	array<float>.Count()
000546:0x0005d738:	icall	RandomInt(_i0, #return)
000546:0x0005d748:	move	#return, #return
000546:0x0005d758:	rts
000549:0x0005d760:	imove	#return, 0xffffffff
000549:0x0005d770:	rts
000549:0x0005d778:	rts
array<float>::GetRandomElement()
000563:0x0005d780:	call	
000563:0x0005d790:	icall	
000563:0x0005d7a0:	move	#return, #return
000563:0x0005d7b0:	rts
000563:0x0005d7b8:	rts
array<float>::SwapItems()
000568:0x0005d7e8:	icall	
000568:0x0005d7f8:	move	item1, #return
000569:0x0005d808:	icall	
000569:0x0005d818:	icall	
000570:0x0005d828:	icall	
000570:0x0005d838:	rts
array<float>::InsertArray()
000575:0x0005d890:	imove	i, 0x000000
000575:0x0005d8a0:	jump	0x05d8c0
000575:0x0005d8a8:	move	@m00, i
000575:0x0005d8b8:	inc	i
000575:0x0005d8c0:	ncalli	array<float>.Count()
000575:0x0005d8c8:	cmpi	i, #return
000575:0x0005d8d8:	bge	0x05d918
000577:0x0005d8e0:	icall	
000577:0x0005d8f0:	move	item, #return
000578:0x0005d900:	icall	
000578:0x0005d910:	jump	0x05d8a8
000578:0x0005d918:	rts
array<float>::Invert()
000584:0x0005d998:	imove	left, 0x000000
000585:0x0005d9a8:	ncalli	array<float>.Count()
000585:0x0005d9b0:	subi	right, #return, _i1
000586:0x0005d9c0:	cmpi	right, _i0
000586:0x0005d9d0:	ble	0x05da78
000588:0x0005d9d8:	cmpi	left, right
000588:0x0005d9e8:	bge	0x05da78
000590:0x0005d9f0:	icall	
000590:0x0005da00:	move	temp, #return
000591:0x0005da10:	move	@m00, left
000591:0x0005da20:	inc	left
000591:0x0005da28:	icall	
000591:0x0005da38:	icall	
000592:0x0005da48:	move	@m00, right
000592:0x0005da58:	dec	right
000592:0x0005da60:	icall	
000592:0x0005da70:	jump	0x05d9d8
000592:0x0005da78:	rts
array<float>::MoveIndex()
000612:0x0005dad0:	ncalli	array<float>.Count()
000612:0x0005dad8:	move	count, #return
000613:0x0005dae8:	move	new_index, curr_index
000615:0x0005daf8:	cmpi	move_number, _i0
000615:0x0005db08:	ble	0x05db30
000617:0x0005db10:	addi	@m00, curr_index, move_number
000617:0x0005db20:	move	new_index, @m00
000620:0x0005db30:	cmpi	move_number, _i0
000620:0x0005db40:	bge	0x05dbe8
000622:0x0005db48:	subi	@m00, curr_index, move_number
000622:0x0005db58:	move	new_index, @m00
000624:0x0005db68:	cmpi	new_index, _i0
000624:0x0005db78:	bge	0x05dbe8
000626:0x0005db80:	subi	@m01, _i0, count
000626:0x0005db90:	cmpi	new_index, @m01
000626:0x0005dba0:	bgt	0x05dbc8
000628:0x0005dba8:	modi	@m00, new_index, count
000628:0x0005dbb8:	move	new_index, @m00
000631:0x0005dbc8:	addi	@m00, new_index, count
000631:0x0005dbd8:	move	new_index, @m00
000635:0x0005dbe8:	cmpi	new_index, count
000635:0x0005dbf8:	blt	0x05dc20
000637:0x0005dc00:	modi	@m00, new_index, count
000637:0x0005dc10:	move	new_index, @m00
000641:0x0005dc20:	move	#return, new_index
000641:0x0005dc30:	rts
000641:0x0005dc38:	rts
array<float>::ShuffleArray()
000646:0x0005dc68:	imove	i, 0x000000
000646:0x0005dc78:	jump	0x05dc98
000646:0x0005dc80:	move	@m00, i
000646:0x0005dc90:	inc	i
000646:0x0005dc98:	ncalli	array<float>.Count()
000646:0x0005dca0:	cmpi	i, #return
000646:0x0005dcb0:	bge	0x05dce8
000648:0x0005dcb8:	call	
000648:0x0005dcc8:	call	
000648:0x0005dce0:	jump	0x05dc80
000648:0x0005dce8:	rts
array<float>::DifferentAtPosition()
000666:0x0005dd18:	ncalli	array<float>.Count()
000666:0x0005dd20:	move	@m00, #return
000666:0x0005dd30:	push	#return
000666:0x0005dd38:	ncalli	array<float>.Count()
000666:0x0005dd40:	move	@m02, #return
000666:0x0005dd50:	pop	#return
000666:0x0005dd58:	cmpi	@m00, @m02
000666:0x0005dd68:	beq	0x05dd98
000668:0x0005dd70:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0005dd80:	imove	#return, 0xffffffff
000669:0x0005dd90:	rts
000672:0x0005dd98:	imove	i, 0x000000
000672:0x0005dda8:	jump	0x05ddb8
000672:0x0005ddb0:	inc	i
000672:0x0005ddb8:	ncalli	array<float>.Count()
000672:0x0005ddc0:	cmpi	i, #return
000672:0x0005ddd0:	bge	0x05de60
000674:0x0005ddd8:	icall	
000674:0x0005dde8:	move	@f00, #return
000674:0x0005ddf8:	push	#return
000674:0x0005de00:	icall	
000674:0x0005de10:	move	@f02, #return
000674:0x0005de20:	pop	#return
000674:0x0005de28:	cmpf	@f00, @f02
000674:0x0005de38:	beq	0x05de58
000676:0x0005de40:	move	#return, i
000676:0x0005de50:	rts
000676:0x0005de58:	jump	0x05ddb0
000680:0x0005de60:	imove	#return, 0xffffffff
000680:0x0005de70:	rts
000680:0x0005de78:	rts
array<string>::InsertAll()
000427:0x0005e470:	imove	i, 0x000000
000427:0x0005e480:	jump	0x05e4a0
000427:0x0005e488:	move	@m00, i
000427:0x0005e498:	inc	i
000427:0x0005e4a0:	ncalli	array<string>.Count()
000427:0x0005e4a8:	cmpi	i, #return
000427:0x0005e4b8:	bge	0x05e4e8
000429:0x0005e4c0:	icall	
000429:0x0005e4d0:	icall	
000429:0x0005e4e0:	jump	0x05e488
000429:0x0005e4e8:	rts
array<string>::RemoveItem()
000479:0x0005e518:	icall	
000479:0x0005e528:	move	remove_index, #return
000481:0x0005e538:	cmpi	remove_index, _i0
000481:0x0005e548:	blt	0x05e560
000483:0x0005e550:	ncalli	array<string>.RemoveOrdered(remove_index)
000483:0x0005e560:	rts
array<string>::RemoveItemUnOrdered()
000489:0x0005e590:	icall	
000489:0x0005e5a0:	move	remove_index, #return
000491:0x0005e5b0:	cmpi	remove_index, _i0
000491:0x0005e5c0:	blt	0x05e5d8
000493:0x0005e5c8:	ncalli	array<string>.Remove(remove_index)
000493:0x0005e5d8:	rts
array<string>::IsValidIndex()
000499:0x0005e5e0:	cmpi	index, _i-1
000499:0x0005e5f0:	ble	0x05e630
000499:0x0005e5f8:	ncalli	array<string>.Count()
000499:0x0005e600:	cmpi	index, #return
000499:0x0005e610:	bge	0x05e630
000499:0x0005e618:	imove	#return, 0x000001
000499:0x0005e628:	jump	0x05e640
000499:0x0005e630:	imove	#return, 0x000000
000499:0x0005e640:	rts
000499:0x0005e648:	rts
array<string>::Debug()
000525:0x0005e6a0:	ncalli	array<string>.Count()
000525:0x0005e6a8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0005e6d8:	icall	Print(#return)
000526:0x0005e6e8:	imove	i, 0x000000
000526:0x0005e6f8:	jump	0x05e718
000526:0x0005e700:	move	@m00, i
000526:0x0005e710:	inc	i
000526:0x0005e718:	ncalli	array<string>.Count()
000526:0x0005e720:	cmpi	i, #return
000526:0x0005e730:	bge	0x05e7a0
000528:0x0005e738:	icall	
000528:0x0005e748:	moves	item, #return
000529:0x0005e758:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0005e788:	icall	Print(#return)
000529:0x0005e798:	jump	0x05e700
000529:0x0005e7a0:	rts
array<string>::GetRandomIndex()
000544:0x0005e7a8:	ncalli	array<string>.Count()
000544:0x0005e7b0:	move	@m00, #return
000544:0x0005e7c0:	cmpi	@m00, _i0
000544:0x0005e7d0:	ble	0x05e808
000546:0x0005e7d8:	ncalli	array<string>.Count()
000546:0x0005e7e0:	icall	RandomInt(_i0, #return)
000546:0x0005e7f0:	move	#return, #return
000546:0x0005e800:	rts
000549:0x0005e808:	imove	#return, 0xffffffff
000549:0x0005e818:	rts
000549:0x0005e820:	rts
array<string>::GetRandomElement()
000563:0x0005e828:	call	
000563:0x0005e838:	icall	
000563:0x0005e848:	moves	#return, #return
000563:0x0005e858:	rts
000563:0x0005e860:	rts
array<string>::SwapItems()
000568:0x0005e890:	icall	
000568:0x0005e8a0:	moves	item1, #return
000569:0x0005e8b0:	icall	
000569:0x0005e8c0:	icall	
000570:0x0005e8d0:	icall	
000570:0x0005e8e0:	rts
array<string>::InsertArray()
000575:0x0005e938:	imove	i, 0x000000
000575:0x0005e948:	jump	0x05e968
000575:0x0005e950:	move	@m00, i
000575:0x0005e960:	inc	i
000575:0x0005e968:	ncalli	array<string>.Count()
000575:0x0005e970:	cmpi	i, #return
000575:0x0005e980:	bge	0x05e9c0
000577:0x0005e988:	icall	
000577:0x0005e998:	moves	item, #return
000578:0x0005e9a8:	icall	
000578:0x0005e9b8:	jump	0x05e950
000578:0x0005e9c0:	rts
array<string>::Invert()
000584:0x0005ea40:	imove	left, 0x000000
000585:0x0005ea50:	ncalli	array<string>.Count()
000585:0x0005ea58:	subi	right, #return, _i1
000586:0x0005ea68:	cmpi	right, _i0
000586:0x0005ea78:	ble	0x05eb20
000588:0x0005ea80:	cmpi	left, right
000588:0x0005ea90:	bge	0x05eb20
000590:0x0005ea98:	icall	
000590:0x0005eaa8:	moves	temp, #return
000591:0x0005eab8:	move	@m00, left
000591:0x0005eac8:	inc	left
000591:0x0005ead0:	icall	
000591:0x0005eae0:	icall	
000592:0x0005eaf0:	move	@m00, right
000592:0x0005eb00:	dec	right
000592:0x0005eb08:	icall	
000592:0x0005eb18:	jump	0x05ea80
000592:0x0005eb20:	rts
array<string>::MoveIndex()
000612:0x0005eb78:	ncalli	array<string>.Count()
000612:0x0005eb80:	move	count, #return
000613:0x0005eb90:	move	new_index, curr_index
000615:0x0005eba0:	cmpi	move_number, _i0
000615:0x0005ebb0:	ble	0x05ebd8
000617:0x0005ebb8:	addi	@m00, curr_index, move_number
000617:0x0005ebc8:	move	new_index, @m00
000620:0x0005ebd8:	cmpi	move_number, _i0
000620:0x0005ebe8:	bge	0x05ec90
000622:0x0005ebf0:	subi	@m00, curr_index, move_number
000622:0x0005ec00:	move	new_index, @m00
000624:0x0005ec10:	cmpi	new_index, _i0
000624:0x0005ec20:	bge	0x05ec90
000626:0x0005ec28:	subi	@m01, _i0, count
000626:0x0005ec38:	cmpi	new_index, @m01
000626:0x0005ec48:	bgt	0x05ec70
000628:0x0005ec50:	modi	@m00, new_index, count
000628:0x0005ec60:	move	new_index, @m00
000631:0x0005ec70:	addi	@m00, new_index, count
000631:0x0005ec80:	move	new_index, @m00
000635:0x0005ec90:	cmpi	new_index, count
000635:0x0005eca0:	blt	0x05ecc8
000637:0x0005eca8:	modi	@m00, new_index, count
000637:0x0005ecb8:	move	new_index, @m00
000641:0x0005ecc8:	move	#return, new_index
000641:0x0005ecd8:	rts
000641:0x0005ece0:	rts
array<string>::ShuffleArray()
000646:0x0005ed10:	imove	i, 0x000000
000646:0x0005ed20:	jump	0x05ed40
000646:0x0005ed28:	move	@m00, i
000646:0x0005ed38:	inc	i
000646:0x0005ed40:	ncalli	array<string>.Count()
000646:0x0005ed48:	cmpi	i, #return
000646:0x0005ed58:	bge	0x05ed90
000648:0x0005ed60:	call	
000648:0x0005ed70:	call	
000648:0x0005ed88:	jump	0x05ed28
000648:0x0005ed90:	rts
array<string>::DifferentAtPosition()
000666:0x0005edc0:	ncalli	array<string>.Count()
000666:0x0005edc8:	move	@m00, #return
000666:0x0005edd8:	push	#return
000666:0x0005ede0:	ncalli	array<string>.Count()
000666:0x0005ede8:	move	@m02, #return
000666:0x0005edf8:	pop	#return
000666:0x0005ee00:	cmpi	@m00, @m02
000666:0x0005ee10:	beq	0x05ee40
000668:0x0005ee18:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0005ee28:	imove	#return, 0xffffffff
000669:0x0005ee38:	rts
000672:0x0005ee40:	imove	i, 0x000000
000672:0x0005ee50:	jump	0x05ee60
000672:0x0005ee58:	inc	i
000672:0x0005ee60:	ncalli	array<string>.Count()
000672:0x0005ee68:	cmpi	i, #return
000672:0x0005ee78:	bge	0x05ef08
000674:0x0005ee80:	icall	
000674:0x0005ee90:	moves	@s00, #return
000674:0x0005eea0:	pushs	#return
000674:0x0005eea8:	icall	
000674:0x0005eeb8:	moves	@s02, #return
000674:0x0005eec8:	pops	#return
000674:0x0005eed0:	cmps	@s00, @s02
000674:0x0005eee0:	beq	0x05ef00
000676:0x0005eee8:	move	#return, i
000676:0x0005eef8:	rts
000676:0x0005ef00:	jump	0x05ee58
000680:0x0005ef08:	imove	#return, 0xffffffff
000680:0x0005ef18:	rts
000680:0x0005ef20:	rts
array<bool>::InsertAll()
000427:0x0005f518:	imove	i, 0x000000
000427:0x0005f528:	jump	0x05f548
000427:0x0005f530:	move	@m00, i
000427:0x0005f540:	inc	i
000427:0x0005f548:	ncalli	array<bool>.Count()
000427:0x0005f550:	cmpi	i, #return
000427:0x0005f560:	bge	0x05f590
000429:0x0005f568:	icall	
000429:0x0005f578:	icall	
000429:0x0005f588:	jump	0x05f530
000429:0x0005f590:	rts
array<bool>::RemoveItem()
000479:0x0005f5c0:	icall	
000479:0x0005f5d0:	move	remove_index, #return
000481:0x0005f5e0:	cmpi	remove_index, _i0
000481:0x0005f5f0:	blt	0x05f608
000483:0x0005f5f8:	ncalli	array<bool>.RemoveOrdered(remove_index)
000483:0x0005f608:	rts
array<bool>::RemoveItemUnOrdered()
000489:0x0005f638:	icall	
000489:0x0005f648:	move	remove_index, #return
000491:0x0005f658:	cmpi	remove_index, _i0
000491:0x0005f668:	blt	0x05f680
000493:0x0005f670:	ncalli	array<bool>.Remove(remove_index)
000493:0x0005f680:	rts
array<bool>::IsValidIndex()
000499:0x0005f688:	cmpi	index, _i-1
000499:0x0005f698:	ble	0x05f6d8
000499:0x0005f6a0:	ncalli	array<bool>.Count()
000499:0x0005f6a8:	cmpi	index, #return
000499:0x0005f6b8:	bge	0x05f6d8
000499:0x0005f6c0:	imove	#return, 0x000001
000499:0x0005f6d0:	jump	0x05f6e8
000499:0x0005f6d8:	imove	#return, 0x000000
000499:0x0005f6e8:	rts
000499:0x0005f6f0:	rts
array<bool>::Debug()
000525:0x0005f748:	ncalli	array<bool>.Count()
000525:0x0005f750:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0005f780:	icall	Print(#return)
000526:0x0005f790:	imove	i, 0x000000
000526:0x0005f7a0:	jump	0x05f7c0
000526:0x0005f7a8:	move	@m00, i
000526:0x0005f7b8:	inc	i
000526:0x0005f7c0:	ncalli	array<bool>.Count()
000526:0x0005f7c8:	cmpi	i, #return
000526:0x0005f7d8:	bge	0x05f848
000528:0x0005f7e0:	icall	
000528:0x0005f7f0:	move	item, #return
000529:0x0005f800:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0005f830:	icall	Print(#return)
000529:0x0005f840:	jump	0x05f7a8
000529:0x0005f848:	rts
array<bool>::GetRandomIndex()
000544:0x0005f850:	ncalli	array<bool>.Count()
000544:0x0005f858:	move	@m00, #return
000544:0x0005f868:	cmpi	@m00, _i0
000544:0x0005f878:	ble	0x05f8b0
000546:0x0005f880:	ncalli	array<bool>.Count()
000546:0x0005f888:	icall	RandomInt(_i0, #return)
000546:0x0005f898:	move	#return, #return
000546:0x0005f8a8:	rts
000549:0x0005f8b0:	imove	#return, 0xffffffff
000549:0x0005f8c0:	rts
000549:0x0005f8c8:	rts
array<bool>::GetRandomElement()
000563:0x0005f8d0:	call	
000563:0x0005f8e0:	icall	
000563:0x0005f8f0:	move	#return, #return
000563:0x0005f900:	rts
000563:0x0005f908:	rts
array<bool>::SwapItems()
000568:0x0005f938:	icall	
000568:0x0005f948:	move	item1, #return
000569:0x0005f958:	icall	
000569:0x0005f968:	icall	
000570:0x0005f978:	icall	
000570:0x0005f988:	rts
array<bool>::InsertArray()
000575:0x0005f9e0:	imove	i, 0x000000
000575:0x0005f9f0:	jump	0x05fa10
000575:0x0005f9f8:	move	@m00, i
000575:0x0005fa08:	inc	i
000575:0x0005fa10:	ncalli	array<bool>.Count()
000575:0x0005fa18:	cmpi	i, #return
000575:0x0005fa28:	bge	0x05fa68
000577:0x0005fa30:	icall	
000577:0x0005fa40:	move	item, #return
000578:0x0005fa50:	icall	
000578:0x0005fa60:	jump	0x05f9f8
000578:0x0005fa68:	rts
array<bool>::Invert()
000584:0x0005fae8:	imove	left, 0x000000
000585:0x0005faf8:	ncalli	array<bool>.Count()
000585:0x0005fb00:	subi	right, #return, _i1
000586:0x0005fb10:	cmpi	right, _i0
000586:0x0005fb20:	ble	0x05fbc8
000588:0x0005fb28:	cmpi	left, right
000588:0x0005fb38:	bge	0x05fbc8
000590:0x0005fb40:	icall	
000590:0x0005fb50:	move	temp, #return
000591:0x0005fb60:	move	@m00, left
000591:0x0005fb70:	inc	left
000591:0x0005fb78:	icall	
000591:0x0005fb88:	icall	
000592:0x0005fb98:	move	@m00, right
000592:0x0005fba8:	dec	right
000592:0x0005fbb0:	icall	
000592:0x0005fbc0:	jump	0x05fb28
000592:0x0005fbc8:	rts
array<bool>::MoveIndex()
000612:0x0005fc20:	ncalli	array<bool>.Count()
000612:0x0005fc28:	move	count, #return
000613:0x0005fc38:	move	new_index, curr_index
000615:0x0005fc48:	cmpi	move_number, _i0
000615:0x0005fc58:	ble	0x05fc80
000617:0x0005fc60:	addi	@m00, curr_index, move_number
000617:0x0005fc70:	move	new_index, @m00
000620:0x0005fc80:	cmpi	move_number, _i0
000620:0x0005fc90:	bge	0x05fd38
000622:0x0005fc98:	subi	@m00, curr_index, move_number
000622:0x0005fca8:	move	new_index, @m00
000624:0x0005fcb8:	cmpi	new_index, _i0
000624:0x0005fcc8:	bge	0x05fd38
000626:0x0005fcd0:	subi	@m01, _i0, count
000626:0x0005fce0:	cmpi	new_index, @m01
000626:0x0005fcf0:	bgt	0x05fd18
000628:0x0005fcf8:	modi	@m00, new_index, count
000628:0x0005fd08:	move	new_index, @m00
000631:0x0005fd18:	addi	@m00, new_index, count
000631:0x0005fd28:	move	new_index, @m00
000635:0x0005fd38:	cmpi	new_index, count
000635:0x0005fd48:	blt	0x05fd70
000637:0x0005fd50:	modi	@m00, new_index, count
000637:0x0005fd60:	move	new_index, @m00
000641:0x0005fd70:	move	#return, new_index
000641:0x0005fd80:	rts
000641:0x0005fd88:	rts
array<bool>::ShuffleArray()
000646:0x0005fdb8:	imove	i, 0x000000
000646:0x0005fdc8:	jump	0x05fde8
000646:0x0005fdd0:	move	@m00, i
000646:0x0005fde0:	inc	i
000646:0x0005fde8:	ncalli	array<bool>.Count()
000646:0x0005fdf0:	cmpi	i, #return
000646:0x0005fe00:	bge	0x05fe38
000648:0x0005fe08:	call	
000648:0x0005fe18:	call	
000648:0x0005fe30:	jump	0x05fdd0
000648:0x0005fe38:	rts
array<bool>::DifferentAtPosition()
000666:0x0005fe68:	ncalli	array<bool>.Count()
000666:0x0005fe70:	move	@m00, #return
000666:0x0005fe80:	push	#return
000666:0x0005fe88:	ncalli	array<bool>.Count()
000666:0x0005fe90:	move	@m02, #return
000666:0x0005fea0:	pop	#return
000666:0x0005fea8:	cmpi	@m00, @m02
000666:0x0005feb8:	beq	0x05fee8
000668:0x0005fec0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0005fed0:	imove	#return, 0xffffffff
000669:0x0005fee0:	rts
000672:0x0005fee8:	imove	i, 0x000000
000672:0x0005fef8:	jump	0x05ff08
000672:0x0005ff00:	inc	i
000672:0x0005ff08:	ncalli	array<bool>.Count()
000672:0x0005ff10:	cmpi	i, #return
000672:0x0005ff20:	bge	0x05ffb0
000674:0x0005ff28:	icall	
000674:0x0005ff38:	move	@m00, #return
000674:0x0005ff48:	push	#return
000674:0x0005ff50:	icall	
000674:0x0005ff60:	move	@m02, #return
000674:0x0005ff70:	pop	#return
000674:0x0005ff78:	cmpi	@m00, @m02
000674:0x0005ff88:	beq	0x05ffa8
000676:0x0005ff90:	move	#return, i
000676:0x0005ffa0:	rts
000676:0x0005ffa8:	jump	0x05ff00
000680:0x0005ffb0:	imove	#return, 0xffffffff
000680:0x0005ffc0:	rts
000680:0x0005ffc8:	rts
array<vector>::InsertAll()
000427:0x00060650:	imove	i, 0x000000
000427:0x00060660:	jump	0x060680
000427:0x00060668:	move	@m00, i
000427:0x00060678:	inc	i
000427:0x00060680:	ncalli	array<vector>.Count()
000427:0x00060688:	cmpi	i, #return
000427:0x00060698:	bge	0x0606c8
000429:0x000606a0:	icall	
000429:0x000606b0:	icall	
000429:0x000606c0:	jump	0x060668
000429:0x000606c8:	rts
array<vector>::RemoveItem()
000479:0x000606f8:	icall	
000479:0x00060708:	move	remove_index, #return
000481:0x00060718:	cmpi	remove_index, _i0
000481:0x00060728:	blt	0x060740
000483:0x00060730:	ncalli	array<vector>.RemoveOrdered(remove_index)
000483:0x00060740:	rts
array<vector>::RemoveItemUnOrdered()
000489:0x00060770:	icall	
000489:0x00060780:	move	remove_index, #return
000491:0x00060790:	cmpi	remove_index, _i0
000491:0x000607a0:	blt	0x0607b8
000493:0x000607a8:	ncalli	array<vector>.Remove(remove_index)
000493:0x000607b8:	rts
array<vector>::IsValidIndex()
000499:0x000607c0:	cmpi	index, _i-1
000499:0x000607d0:	ble	0x060810
000499:0x000607d8:	ncalli	array<vector>.Count()
000499:0x000607e0:	cmpi	index, #return
000499:0x000607f0:	bge	0x060810
000499:0x000607f8:	imove	#return, 0x000001
000499:0x00060808:	jump	0x060820
000499:0x00060810:	imove	#return, 0x000000
000499:0x00060820:	rts
000499:0x00060828:	rts
array<vector>::Debug()
000525:0x00060890:	ncalli	array<vector>.Count()
000525:0x00060898:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x000608c8:	icall	Print(#return)
000526:0x000608d8:	imove	i, 0x000000
000526:0x000608e8:	jump	0x060908
000526:0x000608f0:	move	@m00, i
000526:0x00060900:	inc	i
000526:0x00060908:	ncalli	array<vector>.Count()
000526:0x00060910:	cmpi	i, #return
000526:0x00060920:	bge	0x060990
000528:0x00060928:	icall	
000528:0x00060938:	movev	item, #return
000529:0x00060948:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00060978:	icall	Print(#return)
000529:0x00060988:	jump	0x0608f0
000529:0x00060990:	rts
array<vector>::GetRandomIndex()
000544:0x00060998:	ncalli	array<vector>.Count()
000544:0x000609a0:	move	@m00, #return
000544:0x000609b0:	cmpi	@m00, _i0
000544:0x000609c0:	ble	0x0609f8
000546:0x000609c8:	ncalli	array<vector>.Count()
000546:0x000609d0:	icall	RandomInt(_i0, #return)
000546:0x000609e0:	move	#return, #return
000546:0x000609f0:	rts
000549:0x000609f8:	imove	#return, 0xffffffff
000549:0x00060a08:	rts
000549:0x00060a10:	rts
array<vector>::GetRandomElement()
000563:0x00060a18:	call	
000563:0x00060a28:	icall	
000563:0x00060a38:	movev	#return, #return
000563:0x00060a48:	rts
000563:0x00060a50:	rts
array<vector>::SwapItems()
000568:0x00060a90:	icall	
000568:0x00060aa0:	movev	item1, #return
000569:0x00060ab0:	icall	
000569:0x00060ac0:	icall	
000570:0x00060ad0:	icall	
000570:0x00060ae0:	rts
array<vector>::InsertArray()
000575:0x00060b48:	imove	i, 0x000000
000575:0x00060b58:	jump	0x060b78
000575:0x00060b60:	move	@m00, i
000575:0x00060b70:	inc	i
000575:0x00060b78:	ncalli	array<vector>.Count()
000575:0x00060b80:	cmpi	i, #return
000575:0x00060b90:	bge	0x060bd0
000577:0x00060b98:	icall	
000577:0x00060ba8:	movev	item, #return
000578:0x00060bb8:	icall	
000578:0x00060bc8:	jump	0x060b60
000578:0x00060bd0:	rts
array<vector>::Invert()
000584:0x00060c60:	imove	left, 0x000000
000585:0x00060c70:	ncalli	array<vector>.Count()
000585:0x00060c78:	subi	right, #return, _i1
000586:0x00060c88:	cmpi	right, _i0
000586:0x00060c98:	ble	0x060d40
000588:0x00060ca0:	cmpi	left, right
000588:0x00060cb0:	bge	0x060d40
000590:0x00060cb8:	icall	
000590:0x00060cc8:	movev	temp, #return
000591:0x00060cd8:	move	@m00, left
000591:0x00060ce8:	inc	left
000591:0x00060cf0:	icall	
000591:0x00060d00:	icall	
000592:0x00060d10:	move	@m00, right
000592:0x00060d20:	dec	right
000592:0x00060d28:	icall	
000592:0x00060d38:	jump	0x060ca0
000592:0x00060d40:	rts
array<vector>::MoveIndex()
000612:0x00060d98:	ncalli	array<vector>.Count()
000612:0x00060da0:	move	count, #return
000613:0x00060db0:	move	new_index, curr_index
000615:0x00060dc0:	cmpi	move_number, _i0
000615:0x00060dd0:	ble	0x060df8
000617:0x00060dd8:	addi	@m00, curr_index, move_number
000617:0x00060de8:	move	new_index, @m00
000620:0x00060df8:	cmpi	move_number, _i0
000620:0x00060e08:	bge	0x060eb0
000622:0x00060e10:	subi	@m00, curr_index, move_number
000622:0x00060e20:	move	new_index, @m00
000624:0x00060e30:	cmpi	new_index, _i0
000624:0x00060e40:	bge	0x060eb0
000626:0x00060e48:	subi	@m01, _i0, count
000626:0x00060e58:	cmpi	new_index, @m01
000626:0x00060e68:	bgt	0x060e90
000628:0x00060e70:	modi	@m00, new_index, count
000628:0x00060e80:	move	new_index, @m00
000631:0x00060e90:	addi	@m00, new_index, count
000631:0x00060ea0:	move	new_index, @m00
000635:0x00060eb0:	cmpi	new_index, count
000635:0x00060ec0:	blt	0x060ee8
000637:0x00060ec8:	modi	@m00, new_index, count
000637:0x00060ed8:	move	new_index, @m00
000641:0x00060ee8:	move	#return, new_index
000641:0x00060ef8:	rts
000641:0x00060f00:	rts
array<vector>::ShuffleArray()
000646:0x00060f30:	imove	i, 0x000000
000646:0x00060f40:	jump	0x060f60
000646:0x00060f48:	move	@m00, i
000646:0x00060f58:	inc	i
000646:0x00060f60:	ncalli	array<vector>.Count()
000646:0x00060f68:	cmpi	i, #return
000646:0x00060f78:	bge	0x060fb0
000648:0x00060f80:	call	
000648:0x00060f90:	call	
000648:0x00060fa8:	jump	0x060f48
000648:0x00060fb0:	rts
array<vector>::DifferentAtPosition()
000666:0x00060fe0:	ncalli	array<vector>.Count()
000666:0x00060fe8:	move	@m00, #return
000666:0x00060ff8:	push	#return
000666:0x00061000:	ncalli	array<vector>.Count()
000666:0x00061008:	move	@m02, #return
000666:0x00061018:	pop	#return
000666:0x00061020:	cmpi	@m00, @m02
000666:0x00061030:	beq	0x061060
000668:0x00061038:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00061048:	imove	#return, 0xffffffff
000669:0x00061058:	rts
000672:0x00061060:	imove	i, 0x000000
000672:0x00061070:	jump	0x061080
000672:0x00061078:	inc	i
000672:0x00061080:	ncalli	array<vector>.Count()
000672:0x00061088:	cmpi	i, #return
000672:0x00061098:	bge	0x061128
000674:0x000610a0:	icall	
000674:0x000610b0:	movev	@v00, #return
000674:0x000610c0:	pushv	#return
000674:0x000610c8:	icall	
000674:0x000610d8:	movev	@v02, #return
000674:0x000610e8:	popv	#return
000674:0x000610f0:	cmpv	@v00, @v02
000674:0x00061100:	beq	0x061120
000676:0x00061108:	move	#return, i
000676:0x00061118:	rts
000676:0x00061120:	jump	0x061078
000680:0x00061128:	imove	#return, 0xffffffff
000680:0x00061138:	rts
000680:0x00061140:	rts
set<typename>::InsertSet()
000736:0x00061518:	ncalli	set<typename>.Count()
000736:0x00061520:	move	count, #return
000737:0x00061530:	imove	i, 0x000000
000737:0x00061540:	jump	0x061560
000737:0x00061548:	move	@m00, i
000737:0x00061558:	inc	i
000737:0x00061560:	cmpi	i, count
000737:0x00061570:	bge	0x0615b0
000739:0x00061578:	icall	
000739:0x00061588:	movea	item, #return
000740:0x00061598:	icall	
000740:0x000615a8:	jump	0x061548
000740:0x000615b0:	rts
set<typename>::RemoveItem()
000746:0x000615e0:	icall	
000746:0x000615f0:	move	remove_index, #return
000747:0x00061600:	cmpi	remove_index, _i0
000747:0x00061610:	blt	0x061628
000749:0x00061618:	ncalli	set<typename>.Remove(remove_index)
000749:0x00061628:	rts
set<typename>::RemoveItems()
000755:0x000616a8:	ncalli	set<typename>.Count()
000755:0x000616b0:	move	count, #return
000756:0x000616c0:	imove	i, 0x000000
000756:0x000616d0:	jump	0x0616f0
000756:0x000616d8:	move	@m00, i
000756:0x000616e8:	inc	i
000756:0x000616f0:	cmpi	i, count
000756:0x00061700:	bge	0x061740
000758:0x00061708:	icall	
000758:0x00061718:	movea	item, #return
000759:0x00061728:	call	
000759:0x00061738:	jump	0x0616d8
000759:0x00061740:	rts
set<typename>::Debug()
000765:0x000617f0:	ncalli	set<typename>.Count()
000765:0x000617f8:	icall	Format(_s'Set count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000765:0x00061828:	icall	Print(#return)
000766:0x00061838:	imove	i, 0x000000
000766:0x00061848:	jump	0x061868
000766:0x00061850:	move	@m00, i
000766:0x00061860:	inc	i
000766:0x00061868:	ncalli	set<typename>.Count()
000766:0x00061870:	cmpi	i, #return
000766:0x00061880:	bge	0x0618f0
000768:0x00061888:	icall	
000768:0x00061898:	movea	item, #return
000769:0x000618a8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000769:0x000618d8:	icall	Print(#return)
000769:0x000618e8:	jump	0x061850
000769:0x000618f0:	rts
set<Managed>::InsertSet()
000736:0x00061e48:	ncalli	set<Managed>.Count()
000736:0x00061e50:	move	count, #return
000737:0x00061e60:	imove	i, 0x000000
000737:0x00061e70:	jump	0x061e90
000737:0x00061e78:	move	@m00, i
000737:0x00061e88:	inc	i
000737:0x00061e90:	cmpi	i, count
000737:0x00061ea0:	bge	0x061ef8
000739:0x00061ea8:	icall	
000739:0x00061eb8:	movetm	item, #return
000740:0x00061ec8:	movefm	@c00, item
000740:0x00061ed8:	icall	
000740:0x00061ee8:	release	item
000740:0x00061ef0:	jump	0x061e78
000740:0x00061ef8:	rts
set<Managed>::RemoveItem()
000746:0x00061f28:	movefm	@c00, value
000746:0x00061f38:	icall	
000746:0x00061f48:	move	remove_index, #return
000747:0x00061f58:	cmpi	remove_index, _i0
000747:0x00061f68:	blt	0x061f80
000749:0x00061f70:	ncalli	set<Managed>.Remove(remove_index)
000749:0x00061f80:	rts
set<Managed>::RemoveItems()
000755:0x00062000:	ncalli	set<Managed>.Count()
000755:0x00062008:	move	count, #return
000756:0x00062018:	imove	i, 0x000000
000756:0x00062028:	jump	0x062048
000756:0x00062030:	move	@m00, i
000756:0x00062040:	inc	i
000756:0x00062048:	cmpi	i, count
000756:0x00062058:	bge	0x0620a0
000758:0x00062060:	icall	
000758:0x00062070:	movetm	item, #return
000759:0x00062080:	call	
000759:0x00062090:	release	item
000759:0x00062098:	jump	0x062030
000759:0x000620a0:	rts
set<Managed>::Debug()
000765:0x000620f8:	ncalli	set<Managed>.Count()
000765:0x00062100:	icall	Format(_s'Set count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000765:0x00062130:	icall	Print(#return)
000766:0x00062140:	imove	i, 0x000000
000766:0x00062150:	jump	0x062170
000766:0x00062158:	move	@m00, i
000766:0x00062168:	inc	i
000766:0x00062170:	ncalli	set<Managed>.Count()
000766:0x00062178:	cmpi	i, #return
000766:0x00062188:	bge	0x062200
000768:0x00062190:	icall	
000768:0x000621a0:	movetm	item, #return
000769:0x000621b0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000769:0x000621e0:	icall	Print(#return)
000769:0x000621f0:	release	item
000769:0x000621f8:	jump	0x062158
000769:0x00062200:	rts
set<@Managed>::InsertSet()
000736:0x00062398:	ncalli	set<Managed>.Count()
000736:0x000623a0:	move	count, #return
000737:0x000623b0:	imove	i, 0x000000
000737:0x000623c0:	jump	0x0623e0
000737:0x000623c8:	move	@m00, i
000737:0x000623d8:	inc	i
000737:0x000623e0:	cmpi	i, count
000737:0x000623f0:	bge	0x062448
000739:0x000623f8:	icall	
000739:0x00062408:	movetm	item, #return
000740:0x00062418:	movefm	@c00, item
000740:0x00062428:	icall	
000740:0x00062438:	release	item
000740:0x00062440:	jump	0x0623c8
000740:0x00062448:	rts
set<@Managed>::RemoveItem()
000746:0x00062478:	movefm	@c00, value
000746:0x00062488:	icall	
000746:0x00062498:	move	remove_index, #return
000747:0x000624a8:	cmpi	remove_index, _i0
000747:0x000624b8:	blt	0x0624d0
000749:0x000624c0:	ncalli	set<@Managed>.Remove(remove_index)
000749:0x000624d0:	rts
set<@Managed>::RemoveItems()
000755:0x00062550:	ncalli	set<Managed>.Count()
000755:0x00062558:	move	count, #return
000756:0x00062568:	imove	i, 0x000000
000756:0x00062578:	jump	0x062598
000756:0x00062580:	move	@m00, i
000756:0x00062590:	inc	i
000756:0x00062598:	cmpi	i, count
000756:0x000625a8:	bge	0x0625f0
000758:0x000625b0:	icall	
000758:0x000625c0:	movetm	item, #return
000759:0x000625d0:	call	
000759:0x000625e0:	release	item
000759:0x000625e8:	jump	0x062580
000759:0x000625f0:	rts
set<@Managed>::Debug()
000765:0x00062648:	ncalli	set<@Managed>.Count()
000765:0x00062650:	icall	Format(_s'Set count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000765:0x00062680:	icall	Print(#return)
000766:0x00062690:	imove	i, 0x000000
000766:0x000626a0:	jump	0x0626c0
000766:0x000626a8:	move	@m00, i
000766:0x000626b8:	inc	i
000766:0x000626c0:	ncalli	set<@Managed>.Count()
000766:0x000626c8:	cmpi	i, #return
000766:0x000626d8:	bge	0x062750
000768:0x000626e0:	icall	
000768:0x000626f0:	movetm	item, #return
000769:0x00062700:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000769:0x00062730:	icall	Print(#return)
000769:0x00062740:	release	item
000769:0x00062748:	jump	0x0626a8
000769:0x00062750:	rts
set<Class>::InsertSet()
000736:0x00062ac8:	ncalli	set<Class>.Count()
000736:0x00062ad0:	move	count, #return
000737:0x00062ae0:	imove	i, 0x000000
000737:0x00062af0:	jump	0x062b10
000737:0x00062af8:	move	@m00, i
000737:0x00062b08:	inc	i
000737:0x00062b10:	cmpi	i, count
000737:0x00062b20:	bge	0x062b60
000739:0x00062b28:	icall	
000739:0x00062b38:	movec	item, #return
000740:0x00062b48:	icall	
000740:0x00062b58:	jump	0x062af8
000740:0x00062b60:	rts
set<Class>::RemoveItem()
000746:0x00062b90:	icall	
000746:0x00062ba0:	move	remove_index, #return
000747:0x00062bb0:	cmpi	remove_index, _i0
000747:0x00062bc0:	blt	0x062bd8
000749:0x00062bc8:	ncalli	set<Class>.Remove(remove_index)
000749:0x00062bd8:	rts
set<Class>::RemoveItems()
000755:0x00062c58:	ncalli	set<Class>.Count()
000755:0x00062c60:	move	count, #return
000756:0x00062c70:	imove	i, 0x000000
000756:0x00062c80:	jump	0x062ca0
000756:0x00062c88:	move	@m00, i
000756:0x00062c98:	inc	i
000756:0x00062ca0:	cmpi	i, count
000756:0x00062cb0:	bge	0x062cf0
000758:0x00062cb8:	icall	
000758:0x00062cc8:	movec	item, #return
000759:0x00062cd8:	call	
000759:0x00062ce8:	jump	0x062c88
000759:0x00062cf0:	rts
set<Class>::Debug()
000765:0x00062d48:	ncalli	set<Class>.Count()
000765:0x00062d50:	icall	Format(_s'Set count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000765:0x00062d80:	icall	Print(#return)
000766:0x00062d90:	imove	i, 0x000000
000766:0x00062da0:	jump	0x062dc0
000766:0x00062da8:	move	@m00, i
000766:0x00062db8:	inc	i
000766:0x00062dc0:	ncalli	set<Class>.Count()
000766:0x00062dc8:	cmpi	i, #return
000766:0x00062dd8:	bge	0x062e48
000768:0x00062de0:	icall	
000768:0x00062df0:	movec	item, #return
000769:0x00062e00:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000769:0x00062e30:	icall	Print(#return)
000769:0x00062e40:	jump	0x062da8
000769:0x00062e48:	rts
set<int>::InsertSet()
000736:0x000631c0:	ncalli	set<int>.Count()
000736:0x000631c8:	move	count, #return
000737:0x000631d8:	imove	i, 0x000000
000737:0x000631e8:	jump	0x063208
000737:0x000631f0:	move	@m00, i
000737:0x00063200:	inc	i
000737:0x00063208:	cmpi	i, count
000737:0x00063218:	bge	0x063258
000739:0x00063220:	icall	
000739:0x00063230:	move	item, #return
000740:0x00063240:	icall	
000740:0x00063250:	jump	0x0631f0
000740:0x00063258:	rts
set<int>::RemoveItem()
000746:0x00063288:	icall	
000746:0x00063298:	move	remove_index, #return
000747:0x000632a8:	cmpi	remove_index, _i0
000747:0x000632b8:	blt	0x0632d0
000749:0x000632c0:	ncalli	set<int>.Remove(remove_index)
000749:0x000632d0:	rts
set<int>::RemoveItems()
000755:0x00063350:	ncalli	set<int>.Count()
000755:0x00063358:	move	count, #return
000756:0x00063368:	imove	i, 0x000000
000756:0x00063378:	jump	0x063398
000756:0x00063380:	move	@m00, i
000756:0x00063390:	inc	i
000756:0x00063398:	cmpi	i, count
000756:0x000633a8:	bge	0x0633e8
000758:0x000633b0:	icall	
000758:0x000633c0:	move	item, #return
000759:0x000633d0:	call	
000759:0x000633e0:	jump	0x063380
000759:0x000633e8:	rts
set<int>::Debug()
000765:0x00063440:	ncalli	set<int>.Count()
000765:0x00063448:	icall	Format(_s'Set count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000765:0x00063478:	icall	Print(#return)
000766:0x00063488:	imove	i, 0x000000
000766:0x00063498:	jump	0x0634b8
000766:0x000634a0:	move	@m00, i
000766:0x000634b0:	inc	i
000766:0x000634b8:	ncalli	set<int>.Count()
000766:0x000634c0:	cmpi	i, #return
000766:0x000634d0:	bge	0x063540
000768:0x000634d8:	icall	
000768:0x000634e8:	move	item, #return
000769:0x000634f8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000769:0x00063528:	icall	Print(#return)
000769:0x00063538:	jump	0x0634a0
000769:0x00063540:	rts
set<float>::InsertSet()
000736:0x000638b8:	ncalli	set<float>.Count()
000736:0x000638c0:	move	count, #return
000737:0x000638d0:	imove	i, 0x000000
000737:0x000638e0:	jump	0x063900
000737:0x000638e8:	move	@m00, i
000737:0x000638f8:	inc	i
000737:0x00063900:	cmpi	i, count
000737:0x00063910:	bge	0x063950
000739:0x00063918:	icall	
000739:0x00063928:	move	item, #return
000740:0x00063938:	icall	
000740:0x00063948:	jump	0x0638e8
000740:0x00063950:	rts
set<float>::RemoveItem()
000746:0x00063980:	icall	
000746:0x00063990:	move	remove_index, #return
000747:0x000639a0:	cmpi	remove_index, _i0
000747:0x000639b0:	blt	0x0639c8
000749:0x000639b8:	ncalli	set<float>.Remove(remove_index)
000749:0x000639c8:	rts
set<float>::RemoveItems()
000755:0x00063a48:	ncalli	set<float>.Count()
000755:0x00063a50:	move	count, #return
000756:0x00063a60:	imove	i, 0x000000
000756:0x00063a70:	jump	0x063a90
000756:0x00063a78:	move	@m00, i
000756:0x00063a88:	inc	i
000756:0x00063a90:	cmpi	i, count
000756:0x00063aa0:	bge	0x063ae0
000758:0x00063aa8:	icall	
000758:0x00063ab8:	move	item, #return
000759:0x00063ac8:	call	
000759:0x00063ad8:	jump	0x063a78
000759:0x00063ae0:	rts
set<float>::Debug()
000765:0x00063b38:	ncalli	set<float>.Count()
000765:0x00063b40:	icall	Format(_s'Set count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000765:0x00063b70:	icall	Print(#return)
000766:0x00063b80:	imove	i, 0x000000
000766:0x00063b90:	jump	0x063bb0
000766:0x00063b98:	move	@m00, i
000766:0x00063ba8:	inc	i
000766:0x00063bb0:	ncalli	set<float>.Count()
000766:0x00063bb8:	cmpi	i, #return
000766:0x00063bc8:	bge	0x063c38
000768:0x00063bd0:	icall	
000768:0x00063be0:	move	item, #return
000769:0x00063bf0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000769:0x00063c20:	icall	Print(#return)
000769:0x00063c30:	jump	0x063b98
000769:0x00063c38:	rts
set<string>::InsertSet()
000736:0x00063fb0:	ncalli	set<string>.Count()
000736:0x00063fb8:	move	count, #return
000737:0x00063fc8:	imove	i, 0x000000
000737:0x00063fd8:	jump	0x063ff8
000737:0x00063fe0:	move	@m00, i
000737:0x00063ff0:	inc	i
000737:0x00063ff8:	cmpi	i, count
000737:0x00064008:	bge	0x064048
000739:0x00064010:	icall	
000739:0x00064020:	moves	item, #return
000740:0x00064030:	icall	
000740:0x00064040:	jump	0x063fe0
000740:0x00064048:	rts
set<string>::RemoveItem()
000746:0x00064078:	icall	
000746:0x00064088:	move	remove_index, #return
000747:0x00064098:	cmpi	remove_index, _i0
000747:0x000640a8:	blt	0x0640c0
000749:0x000640b0:	ncalli	set<string>.Remove(remove_index)
000749:0x000640c0:	rts
set<string>::RemoveItems()
000755:0x00064140:	ncalli	set<string>.Count()
000755:0x00064148:	move	count, #return
000756:0x00064158:	imove	i, 0x000000
000756:0x00064168:	jump	0x064188
000756:0x00064170:	move	@m00, i
000756:0x00064180:	inc	i
000756:0x00064188:	cmpi	i, count
000756:0x00064198:	bge	0x0641d8
000758:0x000641a0:	icall	
000758:0x000641b0:	moves	item, #return
000759:0x000641c0:	call	
000759:0x000641d0:	jump	0x064170
000759:0x000641d8:	rts
set<string>::Debug()
000765:0x00064230:	ncalli	set<string>.Count()
000765:0x00064238:	icall	Format(_s'Set count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000765:0x00064268:	icall	Print(#return)
000766:0x00064278:	imove	i, 0x000000
000766:0x00064288:	jump	0x0642a8
000766:0x00064290:	move	@m00, i
000766:0x000642a0:	inc	i
000766:0x000642a8:	ncalli	set<string>.Count()
000766:0x000642b0:	cmpi	i, #return
000766:0x000642c0:	bge	0x064330
000768:0x000642c8:	icall	
000768:0x000642d8:	moves	item, #return
000769:0x000642e8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000769:0x00064318:	icall	Print(#return)
000769:0x00064328:	jump	0x064290
000769:0x00064330:	rts
map<Managed,vector>::GetKeyArray()
000885:0x00064f00:	new	keys, array<Managed>
000886:0x00064f20:	imove	i, 0x000000
000886:0x00064f30:	jump	0x064f50
000886:0x00064f38:	move	@m00, i
000886:0x00064f48:	inc	i
000886:0x00064f50:	ncalli	map<Managed,vector>.Count()
000886:0x00064f58:	cmpi	i, #return
000886:0x00064f68:	bge	0x064f98
000888:0x00064f70:	icall	
000888:0x00064f80:	icall	
000888:0x00064f90:	jump	0x064f38
000890:0x00064f98:	movem	#return, keys
000890:0x00064fa8:	release	keys
000890:0x00064fb0:	rts
000890:0x00064fb8:	release	keys
000890:0x00064fc0:	rts
map<Managed,vector>::GetValueArray()
000895:0x00065048:	new	elements, array<vector>
000896:0x00065068:	imove	i, 0x000000
000896:0x00065078:	jump	0x065098
000896:0x00065080:	move	@m00, i
000896:0x00065090:	inc	i
000896:0x00065098:	ncalli	map<Managed,vector>.Count()
000896:0x000650a0:	cmpi	i, #return
000896:0x000650b0:	bge	0x0650e0
000898:0x000650b8:	icall	
000898:0x000650c8:	icall	
000898:0x000650d8:	jump	0x065080
000900:0x000650e0:	movem	#return, elements
000900:0x000650f0:	release	elements
000900:0x000650f8:	rts
000900:0x00065100:	release	elements
000900:0x00065108:	rts
map<Managed,vector>::ReplaceKey()
000905:0x00065110:	movefm	@c00, old_key
000905:0x00065120:	icall	
000905:0x00065130:	cmpi	#return, _i0
000905:0x00065140:	beq	0x0651c0
000907:0x00065148:	movefm	@c00, new_key
000907:0x00065158:	movefm	@c01, old_key
000907:0x00065168:	icall	
000907:0x00065178:	icall	
000908:0x00065188:	movefm	@c00, old_key
000908:0x00065198:	icall	
000909:0x000651a8:	imove	#return, 0x000001
000909:0x000651b8:	rts
000911:0x000651c0:	imove	#return, 0x000000
000911:0x000651d0:	rts
000911:0x000651d8:	rts
map<Managed,vector>::GetKeyByValue()
000917:0x00065258:	imove	i, 0x000000
000917:0x00065268:	jump	0x065288
000917:0x00065270:	move	@m00, i
000917:0x00065280:	inc	i
000917:0x00065288:	ncalli	map<Managed,vector>.Count()
000917:0x00065290:	cmpi	i, #return
000917:0x000652a0:	bge	0x065310
000919:0x000652a8:	icall	
000919:0x000652b8:	movev	@v00, #return
000919:0x000652c8:	cmpv	@v00, value
000919:0x000652d8:	bne	0x065308
000921:0x000652e0:	icall	
000921:0x000652f0:	movetm	ret, #return
000922:0x00065300:	jump	0x065310
000922:0x00065308:	jump	0x065270
000926:0x00065310:	movem	#return, ret
000926:0x00065320:	release	ret
000926:0x00065328:	rts
000926:0x00065330:	release	ret
000926:0x00065338:	rts
map<Managed,vector>::GetKeyByValueChecked()
000931:0x00065368:	imove	i, 0x000000
000931:0x00065378:	jump	0x065398
000931:0x00065380:	move	@m00, i
000931:0x00065390:	inc	i
000931:0x00065398:	ncalli	map<Managed,vector>.Count()
000931:0x000653a0:	cmpi	i, #return
000931:0x000653b0:	bge	0x065440
000933:0x000653b8:	icall	
000933:0x000653c8:	movev	@v00, #return
000933:0x000653d8:	cmpv	@v00, value
000933:0x000653e8:	bne	0x065438
000935:0x000653f0:	icall	
000935:0x00065400:	movetm	key, #return
000936:0x00065410:	imove	#return, 0x000001
000936:0x00065420:	movem	key, key
000936:0x00065430:	rts
000936:0x00065438:	jump	0x065380
000939:0x00065440:	imove	#return, 0x000000
000939:0x00065450:	movem	key, key
000939:0x00065460:	rts
000939:0x00065468:	movem	key, key
000939:0x00065478:	rts
map<@Managed,vector>::GetKeyArray()
000885:0x000657f8:	new	keys, array<Managed>
000886:0x00065818:	imove	i, 0x000000
000886:0x00065828:	jump	0x065848
000886:0x00065830:	move	@m00, i
000886:0x00065840:	inc	i
000886:0x00065848:	ncalli	map<@Managed,vector>.Count()
000886:0x00065850:	cmpi	i, #return
000886:0x00065860:	bge	0x065890
000888:0x00065868:	icall	
000888:0x00065878:	icall	
000888:0x00065888:	jump	0x065830
000890:0x00065890:	movem	#return, keys
000890:0x000658a0:	release	keys
000890:0x000658a8:	rts
000890:0x000658b0:	release	keys
000890:0x000658b8:	rts
map<@Managed,vector>::GetValueArray()
000895:0x00065910:	new	elements, array<vector>
000896:0x00065930:	imove	i, 0x000000
000896:0x00065940:	jump	0x065960
000896:0x00065948:	move	@m00, i
000896:0x00065958:	inc	i
000896:0x00065960:	ncalli	map<@Managed,vector>.Count()
000896:0x00065968:	cmpi	i, #return
000896:0x00065978:	bge	0x0659a8
000898:0x00065980:	icall	
000898:0x00065990:	icall	
000898:0x000659a0:	jump	0x065948
000900:0x000659a8:	movem	#return, elements
000900:0x000659b8:	release	elements
000900:0x000659c0:	rts
000900:0x000659c8:	release	elements
000900:0x000659d0:	rts
map<@Managed,vector>::ReplaceKey()
000905:0x000659d8:	movefm	@c00, old_key
000905:0x000659e8:	icall	
000905:0x000659f8:	cmpi	#return, _i0
000905:0x00065a08:	beq	0x065a88
000907:0x00065a10:	movefm	@c00, new_key
000907:0x00065a20:	movefm	@c01, old_key
000907:0x00065a30:	icall	
000907:0x00065a40:	icall	
000908:0x00065a50:	movefm	@c00, old_key
000908:0x00065a60:	icall	
000909:0x00065a70:	imove	#return, 0x000001
000909:0x00065a80:	rts
000911:0x00065a88:	imove	#return, 0x000000
000911:0x00065a98:	rts
000911:0x00065aa0:	rts
map<@Managed,vector>::GetKeyByValue()
000917:0x00065af8:	imove	i, 0x000000
000917:0x00065b08:	jump	0x065b28
000917:0x00065b10:	move	@m00, i
000917:0x00065b20:	inc	i
000917:0x00065b28:	ncalli	map<@Managed,vector>.Count()
000917:0x00065b30:	cmpi	i, #return
000917:0x00065b40:	bge	0x065bb0
000919:0x00065b48:	icall	
000919:0x00065b58:	movev	@v00, #return
000919:0x00065b68:	cmpv	@v00, value
000919:0x00065b78:	bne	0x065ba8
000921:0x00065b80:	icall	
000921:0x00065b90:	movetm	ret, #return
000922:0x00065ba0:	jump	0x065bb0
000922:0x00065ba8:	jump	0x065b10
000926:0x00065bb0:	movem	#return, ret
000926:0x00065bc0:	release	ret
000926:0x00065bc8:	rts
000926:0x00065bd0:	release	ret
000926:0x00065bd8:	rts
map<@Managed,vector>::GetKeyByValueChecked()
000931:0x00065c08:	imove	i, 0x000000
000931:0x00065c18:	jump	0x065c38
000931:0x00065c20:	move	@m00, i
000931:0x00065c30:	inc	i
000931:0x00065c38:	ncalli	map<@Managed,vector>.Count()
000931:0x00065c40:	cmpi	i, #return
000931:0x00065c50:	bge	0x065ce0
000933:0x00065c58:	icall	
000933:0x00065c68:	movev	@v00, #return
000933:0x00065c78:	cmpv	@v00, value
000933:0x00065c88:	bne	0x065cd8
000935:0x00065c90:	icall	
000935:0x00065ca0:	movetm	key, #return
000936:0x00065cb0:	imove	#return, 0x000001
000936:0x00065cc0:	movem	key, key
000936:0x00065cd0:	rts
000936:0x00065cd8:	jump	0x065c20
000939:0x00065ce0:	imove	#return, 0x000000
000939:0x00065cf0:	movem	key, key
000939:0x00065d00:	rts
000939:0x00065d08:	movem	key, key
000939:0x00065d18:	rts
map<Managed,typename>::GetKeyArray()
000885:0x000666a8:	new	keys, array<Managed>
000886:0x000666c8:	imove	i, 0x000000
000886:0x000666d8:	jump	0x0666f8
000886:0x000666e0:	move	@m00, i
000886:0x000666f0:	inc	i
000886:0x000666f8:	ncalli	map<Managed,typename>.Count()
000886:0x00066700:	cmpi	i, #return
000886:0x00066710:	bge	0x066740
000888:0x00066718:	icall	
000888:0x00066728:	icall	
000888:0x00066738:	jump	0x0666e0
000890:0x00066740:	movem	#return, keys
000890:0x00066750:	release	keys
000890:0x00066758:	rts
000890:0x00066760:	release	keys
000890:0x00066768:	rts
map<Managed,typename>::GetValueArray()
000895:0x000667c0:	new	elements, array<typename>
000896:0x000667e0:	imove	i, 0x000000
000896:0x000667f0:	jump	0x066810
000896:0x000667f8:	move	@m00, i
000896:0x00066808:	inc	i
000896:0x00066810:	ncalli	map<Managed,typename>.Count()
000896:0x00066818:	cmpi	i, #return
000896:0x00066828:	bge	0x066858
000898:0x00066830:	icall	
000898:0x00066840:	icall	
000898:0x00066850:	jump	0x0667f8
000900:0x00066858:	movem	#return, elements
000900:0x00066868:	release	elements
000900:0x00066870:	rts
000900:0x00066878:	release	elements
000900:0x00066880:	rts
map<Managed,typename>::ReplaceKey()
000905:0x00066888:	movefm	@c00, old_key
000905:0x00066898:	icall	
000905:0x000668a8:	cmpi	#return, _i0
000905:0x000668b8:	beq	0x066938
000907:0x000668c0:	movefm	@c00, new_key
000907:0x000668d0:	movefm	@c01, old_key
000907:0x000668e0:	icall	
000907:0x000668f0:	icall	
000908:0x00066900:	movefm	@c00, old_key
000908:0x00066910:	icall	
000909:0x00066920:	imove	#return, 0x000001
000909:0x00066930:	rts
000911:0x00066938:	imove	#return, 0x000000
000911:0x00066948:	rts
000911:0x00066950:	rts
map<Managed,typename>::GetKeyByValue()
000917:0x000669a8:	imove	i, 0x000000
000917:0x000669b8:	jump	0x0669d8
000917:0x000669c0:	move	@m00, i
000917:0x000669d0:	inc	i
000917:0x000669d8:	ncalli	map<Managed,typename>.Count()
000917:0x000669e0:	cmpi	i, #return
000917:0x000669f0:	bge	0x066a60
000919:0x000669f8:	icall	
000919:0x00066a08:	movea	@m00, #return
000919:0x00066a18:	cmpi	@m00, value
000919:0x00066a28:	bne	0x066a58
000921:0x00066a30:	icall	
000921:0x00066a40:	movetm	ret, #return
000922:0x00066a50:	jump	0x066a60
000922:0x00066a58:	jump	0x0669c0
000926:0x00066a60:	movem	#return, ret
000926:0x00066a70:	release	ret
000926:0x00066a78:	rts
000926:0x00066a80:	release	ret
000926:0x00066a88:	rts
map<Managed,typename>::GetKeyByValueChecked()
000931:0x00066ab8:	imove	i, 0x000000
000931:0x00066ac8:	jump	0x066ae8
000931:0x00066ad0:	move	@m00, i
000931:0x00066ae0:	inc	i
000931:0x00066ae8:	ncalli	map<Managed,typename>.Count()
000931:0x00066af0:	cmpi	i, #return
000931:0x00066b00:	bge	0x066b90
000933:0x00066b08:	icall	
000933:0x00066b18:	movea	@m00, #return
000933:0x00066b28:	cmpi	@m00, value
000933:0x00066b38:	bne	0x066b88
000935:0x00066b40:	icall	
000935:0x00066b50:	movetm	key, #return
000936:0x00066b60:	imove	#return, 0x000001
000936:0x00066b70:	movem	key, key
000936:0x00066b80:	rts
000936:0x00066b88:	jump	0x066ad0
000939:0x00066b90:	imove	#return, 0x000000
000939:0x00066ba0:	movem	key, key
000939:0x00066bb0:	rts
000939:0x00066bb8:	movem	key, key
000939:0x00066bc8:	rts
map<@Managed,typename>::GetKeyArray()
000885:0x00066f18:	new	keys, array<Managed>
000886:0x00066f38:	imove	i, 0x000000
000886:0x00066f48:	jump	0x066f68
000886:0x00066f50:	move	@m00, i
000886:0x00066f60:	inc	i
000886:0x00066f68:	ncalli	map<@Managed,typename>.Count()
000886:0x00066f70:	cmpi	i, #return
000886:0x00066f80:	bge	0x066fb0
000888:0x00066f88:	icall	
000888:0x00066f98:	icall	
000888:0x00066fa8:	jump	0x066f50
000890:0x00066fb0:	movem	#return, keys
000890:0x00066fc0:	release	keys
000890:0x00066fc8:	rts
000890:0x00066fd0:	release	keys
000890:0x00066fd8:	rts
map<@Managed,typename>::GetValueArray()
000895:0x00067030:	new	elements, array<typename>
000896:0x00067050:	imove	i, 0x000000
000896:0x00067060:	jump	0x067080
000896:0x00067068:	move	@m00, i
000896:0x00067078:	inc	i
000896:0x00067080:	ncalli	map<@Managed,typename>.Count()
000896:0x00067088:	cmpi	i, #return
000896:0x00067098:	bge	0x0670c8
000898:0x000670a0:	icall	
000898:0x000670b0:	icall	
000898:0x000670c0:	jump	0x067068
000900:0x000670c8:	movem	#return, elements
000900:0x000670d8:	release	elements
000900:0x000670e0:	rts
000900:0x000670e8:	release	elements
000900:0x000670f0:	rts
map<@Managed,typename>::ReplaceKey()
000905:0x000670f8:	movefm	@c00, old_key
000905:0x00067108:	icall	
000905:0x00067118:	cmpi	#return, _i0
000905:0x00067128:	beq	0x0671a8
000907:0x00067130:	movefm	@c00, new_key
000907:0x00067140:	movefm	@c01, old_key
000907:0x00067150:	icall	
000907:0x00067160:	icall	
000908:0x00067170:	movefm	@c00, old_key
000908:0x00067180:	icall	
000909:0x00067190:	imove	#return, 0x000001
000909:0x000671a0:	rts
000911:0x000671a8:	imove	#return, 0x000000
000911:0x000671b8:	rts
000911:0x000671c0:	rts
map<@Managed,typename>::GetKeyByValue()
000917:0x00067218:	imove	i, 0x000000
000917:0x00067228:	jump	0x067248
000917:0x00067230:	move	@m00, i
000917:0x00067240:	inc	i
000917:0x00067248:	ncalli	map<@Managed,typename>.Count()
000917:0x00067250:	cmpi	i, #return
000917:0x00067260:	bge	0x0672d0
000919:0x00067268:	icall	
000919:0x00067278:	movea	@m00, #return
000919:0x00067288:	cmpi	@m00, value
000919:0x00067298:	bne	0x0672c8
000921:0x000672a0:	icall	
000921:0x000672b0:	movetm	ret, #return
000922:0x000672c0:	jump	0x0672d0
000922:0x000672c8:	jump	0x067230
000926:0x000672d0:	movem	#return, ret
000926:0x000672e0:	release	ret
000926:0x000672e8:	rts
000926:0x000672f0:	release	ret
000926:0x000672f8:	rts
map<@Managed,typename>::GetKeyByValueChecked()
000931:0x00067328:	imove	i, 0x000000
000931:0x00067338:	jump	0x067358
000931:0x00067340:	move	@m00, i
000931:0x00067350:	inc	i
000931:0x00067358:	ncalli	map<@Managed,typename>.Count()
000931:0x00067360:	cmpi	i, #return
000931:0x00067370:	bge	0x067400
000933:0x00067378:	icall	
000933:0x00067388:	movea	@m00, #return
000933:0x00067398:	cmpi	@m00, value
000933:0x000673a8:	bne	0x0673f8
000935:0x000673b0:	icall	
000935:0x000673c0:	movetm	key, #return
000936:0x000673d0:	imove	#return, 0x000001
000936:0x000673e0:	movem	key, key
000936:0x000673f0:	rts
000936:0x000673f8:	jump	0x067340
000939:0x00067400:	imove	#return, 0x000000
000939:0x00067410:	movem	key, key
000939:0x00067420:	rts
000939:0x00067428:	movem	key, key
000939:0x00067438:	rts
map<Managed,Managed>::GetKeyArray()
000885:0x00067dc8:	new	keys, array<Managed>
000886:0x00067de8:	imove	i, 0x000000
000886:0x00067df8:	jump	0x067e18
000886:0x00067e00:	move	@m00, i
000886:0x00067e10:	inc	i
000886:0x00067e18:	ncalli	map<Managed,Managed>.Count()
000886:0x00067e20:	cmpi	i, #return
000886:0x00067e30:	bge	0x067e60
000888:0x00067e38:	icall	
000888:0x00067e48:	icall	
000888:0x00067e58:	jump	0x067e00
000890:0x00067e60:	movem	#return, keys
000890:0x00067e70:	release	keys
000890:0x00067e78:	rts
000890:0x00067e80:	release	keys
000890:0x00067e88:	rts
map<Managed,Managed>::GetValueArray()
000895:0x00067ee0:	new	elements, array<Managed>
000896:0x00067f00:	imove	i, 0x000000
000896:0x00067f10:	jump	0x067f30
000896:0x00067f18:	move	@m00, i
000896:0x00067f28:	inc	i
000896:0x00067f30:	ncalli	map<Managed,Managed>.Count()
000896:0x00067f38:	cmpi	i, #return
000896:0x00067f48:	bge	0x067f78
000898:0x00067f50:	icall	
000898:0x00067f60:	icall	
000898:0x00067f70:	jump	0x067f18
000900:0x00067f78:	movem	#return, elements
000900:0x00067f88:	release	elements
000900:0x00067f90:	rts
000900:0x00067f98:	release	elements
000900:0x00067fa0:	rts
map<Managed,Managed>::ReplaceKey()
000905:0x00067fa8:	movefm	@c00, old_key
000905:0x00067fb8:	icall	
000905:0x00067fc8:	cmpi	#return, _i0
000905:0x00067fd8:	beq	0x068058
000907:0x00067fe0:	movefm	@c00, new_key
000907:0x00067ff0:	movefm	@c01, old_key
000907:0x00068000:	icall	
000907:0x00068010:	icall	
000908:0x00068020:	movefm	@c00, old_key
000908:0x00068030:	icall	
000909:0x00068040:	imove	#return, 0x000001
000909:0x00068050:	rts
000911:0x00068058:	imove	#return, 0x000000
000911:0x00068068:	rts
000911:0x00068070:	rts
map<Managed,Managed>::GetKeyByValue()
000917:0x000680c8:	imove	i, 0x000000
000917:0x000680d8:	jump	0x0680f8
000917:0x000680e0:	move	@m00, i
000917:0x000680f0:	inc	i
000917:0x000680f8:	ncalli	map<Managed,Managed>.Count()
000917:0x00068100:	cmpi	i, #return
000917:0x00068110:	bge	0x068180
000919:0x00068118:	icall	
000919:0x00068128:	movec	@c00, #return
000919:0x00068138:	cmpmc	@c00, value
000919:0x00068148:	bne	0x068178
000921:0x00068150:	icall	
000921:0x00068160:	movetm	ret, #return
000922:0x00068170:	jump	0x068180
000922:0x00068178:	jump	0x0680e0
000926:0x00068180:	movem	#return, ret
000926:0x00068190:	release	ret
000926:0x00068198:	rts
000926:0x000681a0:	release	ret
000926:0x000681a8:	rts
map<Managed,Managed>::GetKeyByValueChecked()
000931:0x000681d8:	imove	i, 0x000000
000931:0x000681e8:	jump	0x068208
000931:0x000681f0:	move	@m00, i
000931:0x00068200:	inc	i
000931:0x00068208:	ncalli	map<Managed,Managed>.Count()
000931:0x00068210:	cmpi	i, #return
000931:0x00068220:	bge	0x0682b0
000933:0x00068228:	icall	
000933:0x00068238:	movec	@c00, #return
000933:0x00068248:	cmpmc	@c00, value
000933:0x00068258:	bne	0x0682a8
000935:0x00068260:	icall	
000935:0x00068270:	movetm	key, #return
000936:0x00068280:	imove	#return, 0x000001
000936:0x00068290:	movem	key, key
000936:0x000682a0:	rts
000936:0x000682a8:	jump	0x0681f0
000939:0x000682b0:	imove	#return, 0x000000
000939:0x000682c0:	movem	key, key
000939:0x000682d0:	rts
000939:0x000682d8:	movem	key, key
000939:0x000682e8:	rts
map<@Managed,@Managed>::GetKeyArray()
000885:0x00068638:	new	keys, array<Managed>
000886:0x00068658:	imove	i, 0x000000
000886:0x00068668:	jump	0x068688
000886:0x00068670:	move	@m00, i
000886:0x00068680:	inc	i
000886:0x00068688:	ncalli	map<@Managed,@Managed>.Count()
000886:0x00068690:	cmpi	i, #return
000886:0x000686a0:	bge	0x0686d0
000888:0x000686a8:	icall	
000888:0x000686b8:	icall	
000888:0x000686c8:	jump	0x068670
000890:0x000686d0:	movem	#return, keys
000890:0x000686e0:	release	keys
000890:0x000686e8:	rts
000890:0x000686f0:	release	keys
000890:0x000686f8:	rts
map<@Managed,@Managed>::GetValueArray()
000895:0x00068750:	new	elements, array<Managed>
000896:0x00068770:	imove	i, 0x000000
000896:0x00068780:	jump	0x0687a0
000896:0x00068788:	move	@m00, i
000896:0x00068798:	inc	i
000896:0x000687a0:	ncalli	map<@Managed,@Managed>.Count()
000896:0x000687a8:	cmpi	i, #return
000896:0x000687b8:	bge	0x0687e8
000898:0x000687c0:	icall	
000898:0x000687d0:	icall	
000898:0x000687e0:	jump	0x068788
000900:0x000687e8:	movem	#return, elements
000900:0x000687f8:	release	elements
000900:0x00068800:	rts
000900:0x00068808:	release	elements
000900:0x00068810:	rts
map<@Managed,@Managed>::ReplaceKey()
000905:0x00068818:	movefm	@c00, old_key
000905:0x00068828:	icall	
000905:0x00068838:	cmpi	#return, _i0
000905:0x00068848:	beq	0x0688c8
000907:0x00068850:	movefm	@c00, new_key
000907:0x00068860:	movefm	@c01, old_key
000907:0x00068870:	icall	
000907:0x00068880:	icall	
000908:0x00068890:	movefm	@c00, old_key
000908:0x000688a0:	icall	
000909:0x000688b0:	imove	#return, 0x000001
000909:0x000688c0:	rts
000911:0x000688c8:	imove	#return, 0x000000
000911:0x000688d8:	rts
000911:0x000688e0:	rts
map<@Managed,@Managed>::GetKeyByValue()
000917:0x00068938:	imove	i, 0x000000
000917:0x00068948:	jump	0x068968
000917:0x00068950:	move	@m00, i
000917:0x00068960:	inc	i
000917:0x00068968:	ncalli	map<@Managed,@Managed>.Count()
000917:0x00068970:	cmpi	i, #return
000917:0x00068980:	bge	0x0689f0
000919:0x00068988:	icall	
000919:0x00068998:	movec	@c00, #return
000919:0x000689a8:	cmpmc	@c00, value
000919:0x000689b8:	bne	0x0689e8
000921:0x000689c0:	icall	
000921:0x000689d0:	movetm	ret, #return
000922:0x000689e0:	jump	0x0689f0
000922:0x000689e8:	jump	0x068950
000926:0x000689f0:	movem	#return, ret
000926:0x00068a00:	release	ret
000926:0x00068a08:	rts
000926:0x00068a10:	release	ret
000926:0x00068a18:	rts
map<@Managed,@Managed>::GetKeyByValueChecked()
000931:0x00068a48:	imove	i, 0x000000
000931:0x00068a58:	jump	0x068a78
000931:0x00068a60:	move	@m00, i
000931:0x00068a70:	inc	i
000931:0x00068a78:	ncalli	map<@Managed,@Managed>.Count()
000931:0x00068a80:	cmpi	i, #return
000931:0x00068a90:	bge	0x068b20
000933:0x00068a98:	icall	
000933:0x00068aa8:	movec	@c00, #return
000933:0x00068ab8:	cmpmc	@c00, value
000933:0x00068ac8:	bne	0x068b18
000935:0x00068ad0:	icall	
000935:0x00068ae0:	movetm	key, #return
000936:0x00068af0:	imove	#return, 0x000001
000936:0x00068b00:	movem	key, key
000936:0x00068b10:	rts
000936:0x00068b18:	jump	0x068a60
000939:0x00068b20:	imove	#return, 0x000000
000939:0x00068b30:	movem	key, key
000939:0x00068b40:	rts
000939:0x00068b48:	movem	key, key
000939:0x00068b58:	rts
map<@Managed,Managed>::GetKeyArray()
000885:0x000691c8:	new	keys, array<Managed>
000886:0x000691e8:	imove	i, 0x000000
000886:0x000691f8:	jump	0x069218
000886:0x00069200:	move	@m00, i
000886:0x00069210:	inc	i
000886:0x00069218:	ncalli	map<@Managed,Managed>.Count()
000886:0x00069220:	cmpi	i, #return
000886:0x00069230:	bge	0x069260
000888:0x00069238:	icall	
000888:0x00069248:	icall	
000888:0x00069258:	jump	0x069200
000890:0x00069260:	movem	#return, keys
000890:0x00069270:	release	keys
000890:0x00069278:	rts
000890:0x00069280:	release	keys
000890:0x00069288:	rts
map<@Managed,Managed>::GetValueArray()
000895:0x000692e0:	new	elements, array<Managed>
000896:0x00069300:	imove	i, 0x000000
000896:0x00069310:	jump	0x069330
000896:0x00069318:	move	@m00, i
000896:0x00069328:	inc	i
000896:0x00069330:	ncalli	map<@Managed,Managed>.Count()
000896:0x00069338:	cmpi	i, #return
000896:0x00069348:	bge	0x069378
000898:0x00069350:	icall	
000898:0x00069360:	icall	
000898:0x00069370:	jump	0x069318
000900:0x00069378:	movem	#return, elements
000900:0x00069388:	release	elements
000900:0x00069390:	rts
000900:0x00069398:	release	elements
000900:0x000693a0:	rts
map<@Managed,Managed>::ReplaceKey()
000905:0x000693a8:	movefm	@c00, old_key
000905:0x000693b8:	icall	
000905:0x000693c8:	cmpi	#return, _i0
000905:0x000693d8:	beq	0x069458
000907:0x000693e0:	movefm	@c00, new_key
000907:0x000693f0:	movefm	@c01, old_key
000907:0x00069400:	icall	
000907:0x00069410:	icall	
000908:0x00069420:	movefm	@c00, old_key
000908:0x00069430:	icall	
000909:0x00069440:	imove	#return, 0x000001
000909:0x00069450:	rts
000911:0x00069458:	imove	#return, 0x000000
000911:0x00069468:	rts
000911:0x00069470:	rts
map<@Managed,Managed>::GetKeyByValue()
000917:0x000694c8:	imove	i, 0x000000
000917:0x000694d8:	jump	0x0694f8
000917:0x000694e0:	move	@m00, i
000917:0x000694f0:	inc	i
000917:0x000694f8:	ncalli	map<@Managed,Managed>.Count()
000917:0x00069500:	cmpi	i, #return
000917:0x00069510:	bge	0x069580
000919:0x00069518:	icall	
000919:0x00069528:	movec	@c00, #return
000919:0x00069538:	cmpmc	@c00, value
000919:0x00069548:	bne	0x069578
000921:0x00069550:	icall	
000921:0x00069560:	movetm	ret, #return
000922:0x00069570:	jump	0x069580
000922:0x00069578:	jump	0x0694e0
000926:0x00069580:	movem	#return, ret
000926:0x00069590:	release	ret
000926:0x00069598:	rts
000926:0x000695a0:	release	ret
000926:0x000695a8:	rts
map<@Managed,Managed>::GetKeyByValueChecked()
000931:0x000695d8:	imove	i, 0x000000
000931:0x000695e8:	jump	0x069608
000931:0x000695f0:	move	@m00, i
000931:0x00069600:	inc	i
000931:0x00069608:	ncalli	map<@Managed,Managed>.Count()
000931:0x00069610:	cmpi	i, #return
000931:0x00069620:	bge	0x0696b0
000933:0x00069628:	icall	
000933:0x00069638:	movec	@c00, #return
000933:0x00069648:	cmpmc	@c00, value
000933:0x00069658:	bne	0x0696a8
000935:0x00069660:	icall	
000935:0x00069670:	movetm	key, #return
000936:0x00069680:	imove	#return, 0x000001
000936:0x00069690:	movem	key, key
000936:0x000696a0:	rts
000936:0x000696a8:	jump	0x0695f0
000939:0x000696b0:	imove	#return, 0x000000
000939:0x000696c0:	movem	key, key
000939:0x000696d0:	rts
000939:0x000696d8:	movem	key, key
000939:0x000696e8:	rts
map<Managed,Class>::GetKeyArray()
000885:0x0006a078:	new	keys, array<Managed>
000886:0x0006a098:	imove	i, 0x000000
000886:0x0006a0a8:	jump	0x06a0c8
000886:0x0006a0b0:	move	@m00, i
000886:0x0006a0c0:	inc	i
000886:0x0006a0c8:	ncalli	map<Managed,Class>.Count()
000886:0x0006a0d0:	cmpi	i, #return
000886:0x0006a0e0:	bge	0x06a110
000888:0x0006a0e8:	icall	
000888:0x0006a0f8:	icall	
000888:0x0006a108:	jump	0x06a0b0
000890:0x0006a110:	movem	#return, keys
000890:0x0006a120:	release	keys
000890:0x0006a128:	rts
000890:0x0006a130:	release	keys
000890:0x0006a138:	rts
map<Managed,Class>::GetValueArray()
000895:0x0006a190:	new	elements, array<Class>
000896:0x0006a1b0:	imove	i, 0x000000
000896:0x0006a1c0:	jump	0x06a1e0
000896:0x0006a1c8:	move	@m00, i
000896:0x0006a1d8:	inc	i
000896:0x0006a1e0:	ncalli	map<Managed,Class>.Count()
000896:0x0006a1e8:	cmpi	i, #return
000896:0x0006a1f8:	bge	0x06a228
000898:0x0006a200:	icall	
000898:0x0006a210:	icall	
000898:0x0006a220:	jump	0x06a1c8
000900:0x0006a228:	movem	#return, elements
000900:0x0006a238:	release	elements
000900:0x0006a240:	rts
000900:0x0006a248:	release	elements
000900:0x0006a250:	rts
map<Managed,Class>::ReplaceKey()
000905:0x0006a258:	movefm	@c00, old_key
000905:0x0006a268:	icall	
000905:0x0006a278:	cmpi	#return, _i0
000905:0x0006a288:	beq	0x06a308
000907:0x0006a290:	movefm	@c00, new_key
000907:0x0006a2a0:	movefm	@c01, old_key
000907:0x0006a2b0:	icall	
000907:0x0006a2c0:	icall	
000908:0x0006a2d0:	movefm	@c00, old_key
000908:0x0006a2e0:	icall	
000909:0x0006a2f0:	imove	#return, 0x000001
000909:0x0006a300:	rts
000911:0x0006a308:	imove	#return, 0x000000
000911:0x0006a318:	rts
000911:0x0006a320:	rts
map<Managed,Class>::GetKeyByValue()
000917:0x0006a378:	imove	i, 0x000000
000917:0x0006a388:	jump	0x06a3a8
000917:0x0006a390:	move	@m00, i
000917:0x0006a3a0:	inc	i
000917:0x0006a3a8:	ncalli	map<Managed,Class>.Count()
000917:0x0006a3b0:	cmpi	i, #return
000917:0x0006a3c0:	bge	0x06a430
000919:0x0006a3c8:	icall	
000919:0x0006a3d8:	movec	@c00, #return
000919:0x0006a3e8:	cmpc	@c00, value
000919:0x0006a3f8:	bne	0x06a428
000921:0x0006a400:	icall	
000921:0x0006a410:	movetm	ret, #return
000922:0x0006a420:	jump	0x06a430
000922:0x0006a428:	jump	0x06a390
000926:0x0006a430:	movem	#return, ret
000926:0x0006a440:	release	ret
000926:0x0006a448:	rts
000926:0x0006a450:	release	ret
000926:0x0006a458:	rts
map<Managed,Class>::GetKeyByValueChecked()
000931:0x0006a488:	imove	i, 0x000000
000931:0x0006a498:	jump	0x06a4b8
000931:0x0006a4a0:	move	@m00, i
000931:0x0006a4b0:	inc	i
000931:0x0006a4b8:	ncalli	map<Managed,Class>.Count()
000931:0x0006a4c0:	cmpi	i, #return
000931:0x0006a4d0:	bge	0x06a560
000933:0x0006a4d8:	icall	
000933:0x0006a4e8:	movec	@c00, #return
000933:0x0006a4f8:	cmpc	@c00, value
000933:0x0006a508:	bne	0x06a558
000935:0x0006a510:	icall	
000935:0x0006a520:	movetm	key, #return
000936:0x0006a530:	imove	#return, 0x000001
000936:0x0006a540:	movem	key, key
000936:0x0006a550:	rts
000936:0x0006a558:	jump	0x06a4a0
000939:0x0006a560:	imove	#return, 0x000000
000939:0x0006a570:	movem	key, key
000939:0x0006a580:	rts
000939:0x0006a588:	movem	key, key
000939:0x0006a598:	rts
map<@Managed,Class>::GetKeyArray()
000885:0x0006a8e8:	new	keys, array<Managed>
000886:0x0006a908:	imove	i, 0x000000
000886:0x0006a918:	jump	0x06a938
000886:0x0006a920:	move	@m00, i
000886:0x0006a930:	inc	i
000886:0x0006a938:	ncalli	map<@Managed,Class>.Count()
000886:0x0006a940:	cmpi	i, #return
000886:0x0006a950:	bge	0x06a980
000888:0x0006a958:	icall	
000888:0x0006a968:	icall	
000888:0x0006a978:	jump	0x06a920
000890:0x0006a980:	movem	#return, keys
000890:0x0006a990:	release	keys
000890:0x0006a998:	rts
000890:0x0006a9a0:	release	keys
000890:0x0006a9a8:	rts
map<@Managed,Class>::GetValueArray()
000895:0x0006aa00:	new	elements, array<Class>
000896:0x0006aa20:	imove	i, 0x000000
000896:0x0006aa30:	jump	0x06aa50
000896:0x0006aa38:	move	@m00, i
000896:0x0006aa48:	inc	i
000896:0x0006aa50:	ncalli	map<@Managed,Class>.Count()
000896:0x0006aa58:	cmpi	i, #return
000896:0x0006aa68:	bge	0x06aa98
000898:0x0006aa70:	icall	
000898:0x0006aa80:	icall	
000898:0x0006aa90:	jump	0x06aa38
000900:0x0006aa98:	movem	#return, elements
000900:0x0006aaa8:	release	elements
000900:0x0006aab0:	rts
000900:0x0006aab8:	release	elements
000900:0x0006aac0:	rts
map<@Managed,Class>::ReplaceKey()
000905:0x0006aac8:	movefm	@c00, old_key
000905:0x0006aad8:	icall	
000905:0x0006aae8:	cmpi	#return, _i0
000905:0x0006aaf8:	beq	0x06ab78
000907:0x0006ab00:	movefm	@c00, new_key
000907:0x0006ab10:	movefm	@c01, old_key
000907:0x0006ab20:	icall	
000907:0x0006ab30:	icall	
000908:0x0006ab40:	movefm	@c00, old_key
000908:0x0006ab50:	icall	
000909:0x0006ab60:	imove	#return, 0x000001
000909:0x0006ab70:	rts
000911:0x0006ab78:	imove	#return, 0x000000
000911:0x0006ab88:	rts
000911:0x0006ab90:	rts
map<@Managed,Class>::GetKeyByValue()
000917:0x0006abe8:	imove	i, 0x000000
000917:0x0006abf8:	jump	0x06ac18
000917:0x0006ac00:	move	@m00, i
000917:0x0006ac10:	inc	i
000917:0x0006ac18:	ncalli	map<@Managed,Class>.Count()
000917:0x0006ac20:	cmpi	i, #return
000917:0x0006ac30:	bge	0x06aca0
000919:0x0006ac38:	icall	
000919:0x0006ac48:	movec	@c00, #return
000919:0x0006ac58:	cmpc	@c00, value
000919:0x0006ac68:	bne	0x06ac98
000921:0x0006ac70:	icall	
000921:0x0006ac80:	movetm	ret, #return
000922:0x0006ac90:	jump	0x06aca0
000922:0x0006ac98:	jump	0x06ac00
000926:0x0006aca0:	movem	#return, ret
000926:0x0006acb0:	release	ret
000926:0x0006acb8:	rts
000926:0x0006acc0:	release	ret
000926:0x0006acc8:	rts
map<@Managed,Class>::GetKeyByValueChecked()
000931:0x0006acf8:	imove	i, 0x000000
000931:0x0006ad08:	jump	0x06ad28
000931:0x0006ad10:	move	@m00, i
000931:0x0006ad20:	inc	i
000931:0x0006ad28:	ncalli	map<@Managed,Class>.Count()
000931:0x0006ad30:	cmpi	i, #return
000931:0x0006ad40:	bge	0x06add0
000933:0x0006ad48:	icall	
000933:0x0006ad58:	movec	@c00, #return
000933:0x0006ad68:	cmpc	@c00, value
000933:0x0006ad78:	bne	0x06adc8
000935:0x0006ad80:	icall	
000935:0x0006ad90:	movetm	key, #return
000936:0x0006ada0:	imove	#return, 0x000001
000936:0x0006adb0:	movem	key, key
000936:0x0006adc0:	rts
000936:0x0006adc8:	jump	0x06ad10
000939:0x0006add0:	imove	#return, 0x000000
000939:0x0006ade0:	movem	key, key
000939:0x0006adf0:	rts
000939:0x0006adf8:	movem	key, key
000939:0x0006ae08:	rts
map<Managed,string>::GetKeyArray()
000885:0x0006b798:	new	keys, array<Managed>
000886:0x0006b7b8:	imove	i, 0x000000
000886:0x0006b7c8:	jump	0x06b7e8
000886:0x0006b7d0:	move	@m00, i
000886:0x0006b7e0:	inc	i
000886:0x0006b7e8:	ncalli	map<Managed,string>.Count()
000886:0x0006b7f0:	cmpi	i, #return
000886:0x0006b800:	bge	0x06b830
000888:0x0006b808:	icall	
000888:0x0006b818:	icall	
000888:0x0006b828:	jump	0x06b7d0
000890:0x0006b830:	movem	#return, keys
000890:0x0006b840:	release	keys
000890:0x0006b848:	rts
000890:0x0006b850:	release	keys
000890:0x0006b858:	rts
map<Managed,string>::GetValueArray()
000895:0x0006b8b0:	new	elements, array<string>
000896:0x0006b8d0:	imove	i, 0x000000
000896:0x0006b8e0:	jump	0x06b900
000896:0x0006b8e8:	move	@m00, i
000896:0x0006b8f8:	inc	i
000896:0x0006b900:	ncalli	map<Managed,string>.Count()
000896:0x0006b908:	cmpi	i, #return
000896:0x0006b918:	bge	0x06b948
000898:0x0006b920:	icall	
000898:0x0006b930:	icall	
000898:0x0006b940:	jump	0x06b8e8
000900:0x0006b948:	movem	#return, elements
000900:0x0006b958:	release	elements
000900:0x0006b960:	rts
000900:0x0006b968:	release	elements
000900:0x0006b970:	rts
map<Managed,string>::ReplaceKey()
000905:0x0006b978:	movefm	@c00, old_key
000905:0x0006b988:	icall	
000905:0x0006b998:	cmpi	#return, _i0
000905:0x0006b9a8:	beq	0x06ba28
000907:0x0006b9b0:	movefm	@c00, new_key
000907:0x0006b9c0:	movefm	@c01, old_key
000907:0x0006b9d0:	icall	
000907:0x0006b9e0:	icall	
000908:0x0006b9f0:	movefm	@c00, old_key
000908:0x0006ba00:	icall	
000909:0x0006ba10:	imove	#return, 0x000001
000909:0x0006ba20:	rts
000911:0x0006ba28:	imove	#return, 0x000000
000911:0x0006ba38:	rts
000911:0x0006ba40:	rts
map<Managed,string>::GetKeyByValue()
000917:0x0006ba98:	imove	i, 0x000000
000917:0x0006baa8:	jump	0x06bac8
000917:0x0006bab0:	move	@m00, i
000917:0x0006bac0:	inc	i
000917:0x0006bac8:	ncalli	map<Managed,string>.Count()
000917:0x0006bad0:	cmpi	i, #return
000917:0x0006bae0:	bge	0x06bb50
000919:0x0006bae8:	icall	
000919:0x0006baf8:	moves	@s00, #return
000919:0x0006bb08:	cmps	@s00, value
000919:0x0006bb18:	bne	0x06bb48
000921:0x0006bb20:	icall	
000921:0x0006bb30:	movetm	ret, #return
000922:0x0006bb40:	jump	0x06bb50
000922:0x0006bb48:	jump	0x06bab0
000926:0x0006bb50:	movem	#return, ret
000926:0x0006bb60:	release	ret
000926:0x0006bb68:	rts
000926:0x0006bb70:	release	ret
000926:0x0006bb78:	rts
map<Managed,string>::GetKeyByValueChecked()
000931:0x0006bba8:	imove	i, 0x000000
000931:0x0006bbb8:	jump	0x06bbd8
000931:0x0006bbc0:	move	@m00, i
000931:0x0006bbd0:	inc	i
000931:0x0006bbd8:	ncalli	map<Managed,string>.Count()
000931:0x0006bbe0:	cmpi	i, #return
000931:0x0006bbf0:	bge	0x06bc80
000933:0x0006bbf8:	icall	
000933:0x0006bc08:	moves	@s00, #return
000933:0x0006bc18:	cmps	@s00, value
000933:0x0006bc28:	bne	0x06bc78
000935:0x0006bc30:	icall	
000935:0x0006bc40:	movetm	key, #return
000936:0x0006bc50:	imove	#return, 0x000001
000936:0x0006bc60:	movem	key, key
000936:0x0006bc70:	rts
000936:0x0006bc78:	jump	0x06bbc0
000939:0x0006bc80:	imove	#return, 0x000000
000939:0x0006bc90:	movem	key, key
000939:0x0006bca0:	rts
000939:0x0006bca8:	movem	key, key
000939:0x0006bcb8:	rts
map<@Managed,string>::GetKeyArray()
000885:0x0006c008:	new	keys, array<Managed>
000886:0x0006c028:	imove	i, 0x000000
000886:0x0006c038:	jump	0x06c058
000886:0x0006c040:	move	@m00, i
000886:0x0006c050:	inc	i
000886:0x0006c058:	ncalli	map<@Managed,string>.Count()
000886:0x0006c060:	cmpi	i, #return
000886:0x0006c070:	bge	0x06c0a0
000888:0x0006c078:	icall	
000888:0x0006c088:	icall	
000888:0x0006c098:	jump	0x06c040
000890:0x0006c0a0:	movem	#return, keys
000890:0x0006c0b0:	release	keys
000890:0x0006c0b8:	rts
000890:0x0006c0c0:	release	keys
000890:0x0006c0c8:	rts
map<@Managed,string>::GetValueArray()
000895:0x0006c120:	new	elements, array<string>
000896:0x0006c140:	imove	i, 0x000000
000896:0x0006c150:	jump	0x06c170
000896:0x0006c158:	move	@m00, i
000896:0x0006c168:	inc	i
000896:0x0006c170:	ncalli	map<@Managed,string>.Count()
000896:0x0006c178:	cmpi	i, #return
000896:0x0006c188:	bge	0x06c1b8
000898:0x0006c190:	icall	
000898:0x0006c1a0:	icall	
000898:0x0006c1b0:	jump	0x06c158
000900:0x0006c1b8:	movem	#return, elements
000900:0x0006c1c8:	release	elements
000900:0x0006c1d0:	rts
000900:0x0006c1d8:	release	elements
000900:0x0006c1e0:	rts
map<@Managed,string>::ReplaceKey()
000905:0x0006c1e8:	movefm	@c00, old_key
000905:0x0006c1f8:	icall	
000905:0x0006c208:	cmpi	#return, _i0
000905:0x0006c218:	beq	0x06c298
000907:0x0006c220:	movefm	@c00, new_key
000907:0x0006c230:	movefm	@c01, old_key
000907:0x0006c240:	icall	
000907:0x0006c250:	icall	
000908:0x0006c260:	movefm	@c00, old_key
000908:0x0006c270:	icall	
000909:0x0006c280:	imove	#return, 0x000001
000909:0x0006c290:	rts
000911:0x0006c298:	imove	#return, 0x000000
000911:0x0006c2a8:	rts
000911:0x0006c2b0:	rts
map<@Managed,string>::GetKeyByValue()
000917:0x0006c308:	imove	i, 0x000000
000917:0x0006c318:	jump	0x06c338
000917:0x0006c320:	move	@m00, i
000917:0x0006c330:	inc	i
000917:0x0006c338:	ncalli	map<@Managed,string>.Count()
000917:0x0006c340:	cmpi	i, #return
000917:0x0006c350:	bge	0x06c3c0
000919:0x0006c358:	icall	
000919:0x0006c368:	moves	@s00, #return
000919:0x0006c378:	cmps	@s00, value
000919:0x0006c388:	bne	0x06c3b8
000921:0x0006c390:	icall	
000921:0x0006c3a0:	movetm	ret, #return
000922:0x0006c3b0:	jump	0x06c3c0
000922:0x0006c3b8:	jump	0x06c320
000926:0x0006c3c0:	movem	#return, ret
000926:0x0006c3d0:	release	ret
000926:0x0006c3d8:	rts
000926:0x0006c3e0:	release	ret
000926:0x0006c3e8:	rts
map<@Managed,string>::GetKeyByValueChecked()
000931:0x0006c418:	imove	i, 0x000000
000931:0x0006c428:	jump	0x06c448
000931:0x0006c430:	move	@m00, i
000931:0x0006c440:	inc	i
000931:0x0006c448:	ncalli	map<@Managed,string>.Count()
000931:0x0006c450:	cmpi	i, #return
000931:0x0006c460:	bge	0x06c4f0
000933:0x0006c468:	icall	
000933:0x0006c478:	moves	@s00, #return
000933:0x0006c488:	cmps	@s00, value
000933:0x0006c498:	bne	0x06c4e8
000935:0x0006c4a0:	icall	
000935:0x0006c4b0:	movetm	key, #return
000936:0x0006c4c0:	imove	#return, 0x000001
000936:0x0006c4d0:	movem	key, key
000936:0x0006c4e0:	rts
000936:0x0006c4e8:	jump	0x06c430
000939:0x0006c4f0:	imove	#return, 0x000000
000939:0x0006c500:	movem	key, key
000939:0x0006c510:	rts
000939:0x0006c518:	movem	key, key
000939:0x0006c528:	rts
map<Managed,int>::GetKeyArray()
000885:0x0006ceb8:	new	keys, array<Managed>
000886:0x0006ced8:	imove	i, 0x000000
000886:0x0006cee8:	jump	0x06cf08
000886:0x0006cef0:	move	@m00, i
000886:0x0006cf00:	inc	i
000886:0x0006cf08:	ncalli	map<Managed,int>.Count()
000886:0x0006cf10:	cmpi	i, #return
000886:0x0006cf20:	bge	0x06cf50
000888:0x0006cf28:	icall	
000888:0x0006cf38:	icall	
000888:0x0006cf48:	jump	0x06cef0
000890:0x0006cf50:	movem	#return, keys
000890:0x0006cf60:	release	keys
000890:0x0006cf68:	rts
000890:0x0006cf70:	release	keys
000890:0x0006cf78:	rts
map<Managed,int>::GetValueArray()
000895:0x0006cfd0:	new	elements, array<int>
000896:0x0006cff0:	imove	i, 0x000000
000896:0x0006d000:	jump	0x06d020
000896:0x0006d008:	move	@m00, i
000896:0x0006d018:	inc	i
000896:0x0006d020:	ncalli	map<Managed,int>.Count()
000896:0x0006d028:	cmpi	i, #return
000896:0x0006d038:	bge	0x06d068
000898:0x0006d040:	icall	
000898:0x0006d050:	icall	
000898:0x0006d060:	jump	0x06d008
000900:0x0006d068:	movem	#return, elements
000900:0x0006d078:	release	elements
000900:0x0006d080:	rts
000900:0x0006d088:	release	elements
000900:0x0006d090:	rts
map<Managed,int>::ReplaceKey()
000905:0x0006d098:	movefm	@c00, old_key
000905:0x0006d0a8:	icall	
000905:0x0006d0b8:	cmpi	#return, _i0
000905:0x0006d0c8:	beq	0x06d148
000907:0x0006d0d0:	movefm	@c00, new_key
000907:0x0006d0e0:	movefm	@c01, old_key
000907:0x0006d0f0:	icall	
000907:0x0006d100:	icall	
000908:0x0006d110:	movefm	@c00, old_key
000908:0x0006d120:	icall	
000909:0x0006d130:	imove	#return, 0x000001
000909:0x0006d140:	rts
000911:0x0006d148:	imove	#return, 0x000000
000911:0x0006d158:	rts
000911:0x0006d160:	rts
map<Managed,int>::GetKeyByValue()
000917:0x0006d1b8:	imove	i, 0x000000
000917:0x0006d1c8:	jump	0x06d1e8
000917:0x0006d1d0:	move	@m00, i
000917:0x0006d1e0:	inc	i
000917:0x0006d1e8:	ncalli	map<Managed,int>.Count()
000917:0x0006d1f0:	cmpi	i, #return
000917:0x0006d200:	bge	0x06d270
000919:0x0006d208:	icall	
000919:0x0006d218:	move	@m00, #return
000919:0x0006d228:	cmpi	@m00, value
000919:0x0006d238:	bne	0x06d268
000921:0x0006d240:	icall	
000921:0x0006d250:	movetm	ret, #return
000922:0x0006d260:	jump	0x06d270
000922:0x0006d268:	jump	0x06d1d0
000926:0x0006d270:	movem	#return, ret
000926:0x0006d280:	release	ret
000926:0x0006d288:	rts
000926:0x0006d290:	release	ret
000926:0x0006d298:	rts
map<Managed,int>::GetKeyByValueChecked()
000931:0x0006d2c8:	imove	i, 0x000000
000931:0x0006d2d8:	jump	0x06d2f8
000931:0x0006d2e0:	move	@m00, i
000931:0x0006d2f0:	inc	i
000931:0x0006d2f8:	ncalli	map<Managed,int>.Count()
000931:0x0006d300:	cmpi	i, #return
000931:0x0006d310:	bge	0x06d3a0
000933:0x0006d318:	icall	
000933:0x0006d328:	move	@m00, #return
000933:0x0006d338:	cmpi	@m00, value
000933:0x0006d348:	bne	0x06d398
000935:0x0006d350:	icall	
000935:0x0006d360:	movetm	key, #return
000936:0x0006d370:	imove	#return, 0x000001
000936:0x0006d380:	movem	key, key
000936:0x0006d390:	rts
000936:0x0006d398:	jump	0x06d2e0
000939:0x0006d3a0:	imove	#return, 0x000000
000939:0x0006d3b0:	movem	key, key
000939:0x0006d3c0:	rts
000939:0x0006d3c8:	movem	key, key
000939:0x0006d3d8:	rts
map<@Managed,int>::GetKeyArray()
000885:0x0006d728:	new	keys, array<Managed>
000886:0x0006d748:	imove	i, 0x000000
000886:0x0006d758:	jump	0x06d778
000886:0x0006d760:	move	@m00, i
000886:0x0006d770:	inc	i
000886:0x0006d778:	ncalli	map<@Managed,int>.Count()
000886:0x0006d780:	cmpi	i, #return
000886:0x0006d790:	bge	0x06d7c0
000888:0x0006d798:	icall	
000888:0x0006d7a8:	icall	
000888:0x0006d7b8:	jump	0x06d760
000890:0x0006d7c0:	movem	#return, keys
000890:0x0006d7d0:	release	keys
000890:0x0006d7d8:	rts
000890:0x0006d7e0:	release	keys
000890:0x0006d7e8:	rts
map<@Managed,int>::GetValueArray()
000895:0x0006d840:	new	elements, array<int>
000896:0x0006d860:	imove	i, 0x000000
000896:0x0006d870:	jump	0x06d890
000896:0x0006d878:	move	@m00, i
000896:0x0006d888:	inc	i
000896:0x0006d890:	ncalli	map<@Managed,int>.Count()
000896:0x0006d898:	cmpi	i, #return
000896:0x0006d8a8:	bge	0x06d8d8
000898:0x0006d8b0:	icall	
000898:0x0006d8c0:	icall	
000898:0x0006d8d0:	jump	0x06d878
000900:0x0006d8d8:	movem	#return, elements
000900:0x0006d8e8:	release	elements
000900:0x0006d8f0:	rts
000900:0x0006d8f8:	release	elements
000900:0x0006d900:	rts
map<@Managed,int>::ReplaceKey()
000905:0x0006d908:	movefm	@c00, old_key
000905:0x0006d918:	icall	
000905:0x0006d928:	cmpi	#return, _i0
000905:0x0006d938:	beq	0x06d9b8
000907:0x0006d940:	movefm	@c00, new_key
000907:0x0006d950:	movefm	@c01, old_key
000907:0x0006d960:	icall	
000907:0x0006d970:	icall	
000908:0x0006d980:	movefm	@c00, old_key
000908:0x0006d990:	icall	
000909:0x0006d9a0:	imove	#return, 0x000001
000909:0x0006d9b0:	rts
000911:0x0006d9b8:	imove	#return, 0x000000
000911:0x0006d9c8:	rts
000911:0x0006d9d0:	rts
map<@Managed,int>::GetKeyByValue()
000917:0x0006da28:	imove	i, 0x000000
000917:0x0006da38:	jump	0x06da58
000917:0x0006da40:	move	@m00, i
000917:0x0006da50:	inc	i
000917:0x0006da58:	ncalli	map<@Managed,int>.Count()
000917:0x0006da60:	cmpi	i, #return
000917:0x0006da70:	bge	0x06dae0
000919:0x0006da78:	icall	
000919:0x0006da88:	move	@m00, #return
000919:0x0006da98:	cmpi	@m00, value
000919:0x0006daa8:	bne	0x06dad8
000921:0x0006dab0:	icall	
000921:0x0006dac0:	movetm	ret, #return
000922:0x0006dad0:	jump	0x06dae0
000922:0x0006dad8:	jump	0x06da40
000926:0x0006dae0:	movem	#return, ret
000926:0x0006daf0:	release	ret
000926:0x0006daf8:	rts
000926:0x0006db00:	release	ret
000926:0x0006db08:	rts
map<@Managed,int>::GetKeyByValueChecked()
000931:0x0006db38:	imove	i, 0x000000
000931:0x0006db48:	jump	0x06db68
000931:0x0006db50:	move	@m00, i
000931:0x0006db60:	inc	i
000931:0x0006db68:	ncalli	map<@Managed,int>.Count()
000931:0x0006db70:	cmpi	i, #return
000931:0x0006db80:	bge	0x06dc10
000933:0x0006db88:	icall	
000933:0x0006db98:	move	@m00, #return
000933:0x0006dba8:	cmpi	@m00, value
000933:0x0006dbb8:	bne	0x06dc08
000935:0x0006dbc0:	icall	
000935:0x0006dbd0:	movetm	key, #return
000936:0x0006dbe0:	imove	#return, 0x000001
000936:0x0006dbf0:	movem	key, key
000936:0x0006dc00:	rts
000936:0x0006dc08:	jump	0x06db50
000939:0x0006dc10:	imove	#return, 0x000000
000939:0x0006dc20:	movem	key, key
000939:0x0006dc30:	rts
000939:0x0006dc38:	movem	key, key
000939:0x0006dc48:	rts
map<Managed,float>::GetKeyArray()
000885:0x0006e5d8:	new	keys, array<Managed>
000886:0x0006e5f8:	imove	i, 0x000000
000886:0x0006e608:	jump	0x06e628
000886:0x0006e610:	move	@m00, i
000886:0x0006e620:	inc	i
000886:0x0006e628:	ncalli	map<Managed,float>.Count()
000886:0x0006e630:	cmpi	i, #return
000886:0x0006e640:	bge	0x06e670
000888:0x0006e648:	icall	
000888:0x0006e658:	icall	
000888:0x0006e668:	jump	0x06e610
000890:0x0006e670:	movem	#return, keys
000890:0x0006e680:	release	keys
000890:0x0006e688:	rts
000890:0x0006e690:	release	keys
000890:0x0006e698:	rts
map<Managed,float>::GetValueArray()
000895:0x0006e6f0:	new	elements, array<float>
000896:0x0006e710:	imove	i, 0x000000
000896:0x0006e720:	jump	0x06e740
000896:0x0006e728:	move	@m00, i
000896:0x0006e738:	inc	i
000896:0x0006e740:	ncalli	map<Managed,float>.Count()
000896:0x0006e748:	cmpi	i, #return
000896:0x0006e758:	bge	0x06e788
000898:0x0006e760:	icall	
000898:0x0006e770:	icall	
000898:0x0006e780:	jump	0x06e728
000900:0x0006e788:	movem	#return, elements
000900:0x0006e798:	release	elements
000900:0x0006e7a0:	rts
000900:0x0006e7a8:	release	elements
000900:0x0006e7b0:	rts
map<Managed,float>::ReplaceKey()
000905:0x0006e7b8:	movefm	@c00, old_key
000905:0x0006e7c8:	icall	
000905:0x0006e7d8:	cmpi	#return, _i0
000905:0x0006e7e8:	beq	0x06e868
000907:0x0006e7f0:	movefm	@c00, new_key
000907:0x0006e800:	movefm	@c01, old_key
000907:0x0006e810:	icall	
000907:0x0006e820:	icall	
000908:0x0006e830:	movefm	@c00, old_key
000908:0x0006e840:	icall	
000909:0x0006e850:	imove	#return, 0x000001
000909:0x0006e860:	rts
000911:0x0006e868:	imove	#return, 0x000000
000911:0x0006e878:	rts
000911:0x0006e880:	rts
map<Managed,float>::GetKeyByValue()
000917:0x0006e8d8:	imove	i, 0x000000
000917:0x0006e8e8:	jump	0x06e908
000917:0x0006e8f0:	move	@m00, i
000917:0x0006e900:	inc	i
000917:0x0006e908:	ncalli	map<Managed,float>.Count()
000917:0x0006e910:	cmpi	i, #return
000917:0x0006e920:	bge	0x06e990
000919:0x0006e928:	icall	
000919:0x0006e938:	move	@f00, #return
000919:0x0006e948:	cmpf	@f00, value
000919:0x0006e958:	bne	0x06e988
000921:0x0006e960:	icall	
000921:0x0006e970:	movetm	ret, #return
000922:0x0006e980:	jump	0x06e990
000922:0x0006e988:	jump	0x06e8f0
000926:0x0006e990:	movem	#return, ret
000926:0x0006e9a0:	release	ret
000926:0x0006e9a8:	rts
000926:0x0006e9b0:	release	ret
000926:0x0006e9b8:	rts
map<Managed,float>::GetKeyByValueChecked()
000931:0x0006e9e8:	imove	i, 0x000000
000931:0x0006e9f8:	jump	0x06ea18
000931:0x0006ea00:	move	@m00, i
000931:0x0006ea10:	inc	i
000931:0x0006ea18:	ncalli	map<Managed,float>.Count()
000931:0x0006ea20:	cmpi	i, #return
000931:0x0006ea30:	bge	0x06eac0
000933:0x0006ea38:	icall	
000933:0x0006ea48:	move	@f00, #return
000933:0x0006ea58:	cmpf	@f00, value
000933:0x0006ea68:	bne	0x06eab8
000935:0x0006ea70:	icall	
000935:0x0006ea80:	movetm	key, #return
000936:0x0006ea90:	imove	#return, 0x000001
000936:0x0006eaa0:	movem	key, key
000936:0x0006eab0:	rts
000936:0x0006eab8:	jump	0x06ea00
000939:0x0006eac0:	imove	#return, 0x000000
000939:0x0006ead0:	movem	key, key
000939:0x0006eae0:	rts
000939:0x0006eae8:	movem	key, key
000939:0x0006eaf8:	rts
map<@Managed,float>::GetKeyArray()
000885:0x0006ee48:	new	keys, array<Managed>
000886:0x0006ee68:	imove	i, 0x000000
000886:0x0006ee78:	jump	0x06ee98
000886:0x0006ee80:	move	@m00, i
000886:0x0006ee90:	inc	i
000886:0x0006ee98:	ncalli	map<@Managed,float>.Count()
000886:0x0006eea0:	cmpi	i, #return
000886:0x0006eeb0:	bge	0x06eee0
000888:0x0006eeb8:	icall	
000888:0x0006eec8:	icall	
000888:0x0006eed8:	jump	0x06ee80
000890:0x0006eee0:	movem	#return, keys
000890:0x0006eef0:	release	keys
000890:0x0006eef8:	rts
000890:0x0006ef00:	release	keys
000890:0x0006ef08:	rts
map<@Managed,float>::GetValueArray()
000895:0x0006ef60:	new	elements, array<float>
000896:0x0006ef80:	imove	i, 0x000000
000896:0x0006ef90:	jump	0x06efb0
000896:0x0006ef98:	move	@m00, i
000896:0x0006efa8:	inc	i
000896:0x0006efb0:	ncalli	map<@Managed,float>.Count()
000896:0x0006efb8:	cmpi	i, #return
000896:0x0006efc8:	bge	0x06eff8
000898:0x0006efd0:	icall	
000898:0x0006efe0:	icall	
000898:0x0006eff0:	jump	0x06ef98
000900:0x0006eff8:	movem	#return, elements
000900:0x0006f008:	release	elements
000900:0x0006f010:	rts
000900:0x0006f018:	release	elements
000900:0x0006f020:	rts
map<@Managed,float>::ReplaceKey()
000905:0x0006f028:	movefm	@c00, old_key
000905:0x0006f038:	icall	
000905:0x0006f048:	cmpi	#return, _i0
000905:0x0006f058:	beq	0x06f0d8
000907:0x0006f060:	movefm	@c00, new_key
000907:0x0006f070:	movefm	@c01, old_key
000907:0x0006f080:	icall	
000907:0x0006f090:	icall	
000908:0x0006f0a0:	movefm	@c00, old_key
000908:0x0006f0b0:	icall	
000909:0x0006f0c0:	imove	#return, 0x000001
000909:0x0006f0d0:	rts
000911:0x0006f0d8:	imove	#return, 0x000000
000911:0x0006f0e8:	rts
000911:0x0006f0f0:	rts
map<@Managed,float>::GetKeyByValue()
000917:0x0006f148:	imove	i, 0x000000
000917:0x0006f158:	jump	0x06f178
000917:0x0006f160:	move	@m00, i
000917:0x0006f170:	inc	i
000917:0x0006f178:	ncalli	map<@Managed,float>.Count()
000917:0x0006f180:	cmpi	i, #return
000917:0x0006f190:	bge	0x06f200
000919:0x0006f198:	icall	
000919:0x0006f1a8:	move	@f00, #return
000919:0x0006f1b8:	cmpf	@f00, value
000919:0x0006f1c8:	bne	0x06f1f8
000921:0x0006f1d0:	icall	
000921:0x0006f1e0:	movetm	ret, #return
000922:0x0006f1f0:	jump	0x06f200
000922:0x0006f1f8:	jump	0x06f160
000926:0x0006f200:	movem	#return, ret
000926:0x0006f210:	release	ret
000926:0x0006f218:	rts
000926:0x0006f220:	release	ret
000926:0x0006f228:	rts
map<@Managed,float>::GetKeyByValueChecked()
000931:0x0006f258:	imove	i, 0x000000
000931:0x0006f268:	jump	0x06f288
000931:0x0006f270:	move	@m00, i
000931:0x0006f280:	inc	i
000931:0x0006f288:	ncalli	map<@Managed,float>.Count()
000931:0x0006f290:	cmpi	i, #return
000931:0x0006f2a0:	bge	0x06f330
000933:0x0006f2a8:	icall	
000933:0x0006f2b8:	move	@f00, #return
000933:0x0006f2c8:	cmpf	@f00, value
000933:0x0006f2d8:	bne	0x06f328
000935:0x0006f2e0:	icall	
000935:0x0006f2f0:	movetm	key, #return
000936:0x0006f300:	imove	#return, 0x000001
000936:0x0006f310:	movem	key, key
000936:0x0006f320:	rts
000936:0x0006f328:	jump	0x06f270
000939:0x0006f330:	imove	#return, 0x000000
000939:0x0006f340:	movem	key, key
000939:0x0006f350:	rts
000939:0x0006f358:	movem	key, key
000939:0x0006f368:	rts
map<Managed,@Managed>::GetKeyArray()
000885:0x0006f9d8:	new	keys, array<Managed>
000886:0x0006f9f8:	imove	i, 0x000000
000886:0x0006fa08:	jump	0x06fa28
000886:0x0006fa10:	move	@m00, i
000886:0x0006fa20:	inc	i
000886:0x0006fa28:	ncalli	map<Managed,@Managed>.Count()
000886:0x0006fa30:	cmpi	i, #return
000886:0x0006fa40:	bge	0x06fa70
000888:0x0006fa48:	icall	
000888:0x0006fa58:	icall	
000888:0x0006fa68:	jump	0x06fa10
000890:0x0006fa70:	movem	#return, keys
000890:0x0006fa80:	release	keys
000890:0x0006fa88:	rts
000890:0x0006fa90:	release	keys
000890:0x0006fa98:	rts
map<Managed,@Managed>::GetValueArray()
000895:0x0006faf0:	new	elements, array<Managed>
000896:0x0006fb10:	imove	i, 0x000000
000896:0x0006fb20:	jump	0x06fb40
000896:0x0006fb28:	move	@m00, i
000896:0x0006fb38:	inc	i
000896:0x0006fb40:	ncalli	map<Managed,@Managed>.Count()
000896:0x0006fb48:	cmpi	i, #return
000896:0x0006fb58:	bge	0x06fb88
000898:0x0006fb60:	icall	
000898:0x0006fb70:	icall	
000898:0x0006fb80:	jump	0x06fb28
000900:0x0006fb88:	movem	#return, elements
000900:0x0006fb98:	release	elements
000900:0x0006fba0:	rts
000900:0x0006fba8:	release	elements
000900:0x0006fbb0:	rts
map<Managed,@Managed>::ReplaceKey()
000905:0x0006fbb8:	movefm	@c00, old_key
000905:0x0006fbc8:	icall	
000905:0x0006fbd8:	cmpi	#return, _i0
000905:0x0006fbe8:	beq	0x06fc68
000907:0x0006fbf0:	movefm	@c00, new_key
000907:0x0006fc00:	movefm	@c01, old_key
000907:0x0006fc10:	icall	
000907:0x0006fc20:	icall	
000908:0x0006fc30:	movefm	@c00, old_key
000908:0x0006fc40:	icall	
000909:0x0006fc50:	imove	#return, 0x000001
000909:0x0006fc60:	rts
000911:0x0006fc68:	imove	#return, 0x000000
000911:0x0006fc78:	rts
000911:0x0006fc80:	rts
map<Managed,@Managed>::GetKeyByValue()
000917:0x0006fcd8:	imove	i, 0x000000
000917:0x0006fce8:	jump	0x06fd08
000917:0x0006fcf0:	move	@m00, i
000917:0x0006fd00:	inc	i
000917:0x0006fd08:	ncalli	map<Managed,@Managed>.Count()
000917:0x0006fd10:	cmpi	i, #return
000917:0x0006fd20:	bge	0x06fd90
000919:0x0006fd28:	icall	
000919:0x0006fd38:	movec	@c00, #return
000919:0x0006fd48:	cmpmc	@c00, value
000919:0x0006fd58:	bne	0x06fd88
000921:0x0006fd60:	icall	
000921:0x0006fd70:	movetm	ret, #return
000922:0x0006fd80:	jump	0x06fd90
000922:0x0006fd88:	jump	0x06fcf0
000926:0x0006fd90:	movem	#return, ret
000926:0x0006fda0:	release	ret
000926:0x0006fda8:	rts
000926:0x0006fdb0:	release	ret
000926:0x0006fdb8:	rts
map<Managed,@Managed>::GetKeyByValueChecked()
000931:0x0006fde8:	imove	i, 0x000000
000931:0x0006fdf8:	jump	0x06fe18
000931:0x0006fe00:	move	@m00, i
000931:0x0006fe10:	inc	i
000931:0x0006fe18:	ncalli	map<Managed,@Managed>.Count()
000931:0x0006fe20:	cmpi	i, #return
000931:0x0006fe30:	bge	0x06fec0
000933:0x0006fe38:	icall	
000933:0x0006fe48:	movec	@c00, #return
000933:0x0006fe58:	cmpmc	@c00, value
000933:0x0006fe68:	bne	0x06feb8
000935:0x0006fe70:	icall	
000935:0x0006fe80:	movetm	key, #return
000936:0x0006fe90:	imove	#return, 0x000001
000936:0x0006fea0:	movem	key, key
000936:0x0006feb0:	rts
000936:0x0006feb8:	jump	0x06fe00
000939:0x0006fec0:	imove	#return, 0x000000
000939:0x0006fed0:	movem	key, key
000939:0x0006fee0:	rts
000939:0x0006fee8:	movem	key, key
000939:0x0006fef8:	rts
map<typename,vector>::GetKeyArray()
000885:0x000705e8:	new	keys, array<typename>
000886:0x00070608:	imove	i, 0x000000
000886:0x00070618:	jump	0x070638
000886:0x00070620:	move	@m00, i
000886:0x00070630:	inc	i
000886:0x00070638:	ncalli	map<typename,vector>.Count()
000886:0x00070640:	cmpi	i, #return
000886:0x00070650:	bge	0x070680
000888:0x00070658:	icall	
000888:0x00070668:	icall	
000888:0x00070678:	jump	0x070620
000890:0x00070680:	movem	#return, keys
000890:0x00070690:	release	keys
000890:0x00070698:	rts
000890:0x000706a0:	release	keys
000890:0x000706a8:	rts
map<typename,vector>::GetValueArray()
000895:0x00070700:	new	elements, array<vector>
000896:0x00070720:	imove	i, 0x000000
000896:0x00070730:	jump	0x070750
000896:0x00070738:	move	@m00, i
000896:0x00070748:	inc	i
000896:0x00070750:	ncalli	map<typename,vector>.Count()
000896:0x00070758:	cmpi	i, #return
000896:0x00070768:	bge	0x070798
000898:0x00070770:	icall	
000898:0x00070780:	icall	
000898:0x00070790:	jump	0x070738
000900:0x00070798:	movem	#return, elements
000900:0x000707a8:	release	elements
000900:0x000707b0:	rts
000900:0x000707b8:	release	elements
000900:0x000707c0:	rts
map<typename,vector>::ReplaceKey()
000905:0x000707c8:	icall	
000905:0x000707d8:	cmpi	#return, _i0
000905:0x000707e8:	beq	0x070838
000907:0x000707f0:	icall	
000907:0x00070800:	icall	
000908:0x00070810:	icall	
000909:0x00070820:	imove	#return, 0x000001
000909:0x00070830:	rts
000911:0x00070838:	imove	#return, 0x000000
000911:0x00070848:	rts
000911:0x00070850:	rts
map<typename,vector>::GetKeyByValue()
000917:0x000708a8:	imove	i, 0x000000
000917:0x000708b8:	jump	0x0708d8
000917:0x000708c0:	move	@m00, i
000917:0x000708d0:	inc	i
000917:0x000708d8:	ncalli	map<typename,vector>.Count()
000917:0x000708e0:	cmpi	i, #return
000917:0x000708f0:	bge	0x070960
000919:0x000708f8:	icall	
000919:0x00070908:	movev	@v00, #return
000919:0x00070918:	cmpv	@v00, value
000919:0x00070928:	bne	0x070958
000921:0x00070930:	icall	
000921:0x00070940:	movea	ret, #return
000922:0x00070950:	jump	0x070960
000922:0x00070958:	jump	0x0708c0
000926:0x00070960:	movea	#return, ret
000926:0x00070970:	rts
000926:0x00070978:	rts
map<typename,vector>::GetKeyByValueChecked()
000931:0x000709a8:	imove	i, 0x000000
000931:0x000709b8:	jump	0x0709d8
000931:0x000709c0:	move	@m00, i
000931:0x000709d0:	inc	i
000931:0x000709d8:	ncalli	map<typename,vector>.Count()
000931:0x000709e0:	cmpi	i, #return
000931:0x000709f0:	bge	0x070a80
000933:0x000709f8:	icall	
000933:0x00070a08:	movev	@v00, #return
000933:0x00070a18:	cmpv	@v00, value
000933:0x00070a28:	bne	0x070a78
000935:0x00070a30:	icall	
000935:0x00070a40:	movea	key, #return
000936:0x00070a50:	imove	#return, 0x000001
000936:0x00070a60:	movea	key, key
000936:0x00070a70:	rts
000936:0x00070a78:	jump	0x0709c0
000939:0x00070a80:	imove	#return, 0x000000
000939:0x00070a90:	movea	key, key
000939:0x00070aa0:	rts
000939:0x00070aa8:	movea	key, key
000939:0x00070ab8:	rts
map<typename,typename>::GetKeyArray()
000885:0x00071128:	new	keys, array<typename>
000886:0x00071148:	imove	i, 0x000000
000886:0x00071158:	jump	0x071178
000886:0x00071160:	move	@m00, i
000886:0x00071170:	inc	i
000886:0x00071178:	ncalli	map<typename,typename>.Count()
000886:0x00071180:	cmpi	i, #return
000886:0x00071190:	bge	0x0711c0
000888:0x00071198:	icall	
000888:0x000711a8:	icall	
000888:0x000711b8:	jump	0x071160
000890:0x000711c0:	movem	#return, keys
000890:0x000711d0:	release	keys
000890:0x000711d8:	rts
000890:0x000711e0:	release	keys
000890:0x000711e8:	rts
map<typename,typename>::GetValueArray()
000895:0x00071240:	new	elements, array<typename>
000896:0x00071260:	imove	i, 0x000000
000896:0x00071270:	jump	0x071290
000896:0x00071278:	move	@m00, i
000896:0x00071288:	inc	i
000896:0x00071290:	ncalli	map<typename,typename>.Count()
000896:0x00071298:	cmpi	i, #return
000896:0x000712a8:	bge	0x0712d8
000898:0x000712b0:	icall	
000898:0x000712c0:	icall	
000898:0x000712d0:	jump	0x071278
000900:0x000712d8:	movem	#return, elements
000900:0x000712e8:	release	elements
000900:0x000712f0:	rts
000900:0x000712f8:	release	elements
000900:0x00071300:	rts
map<typename,typename>::ReplaceKey()
000905:0x00071308:	icall	
000905:0x00071318:	cmpi	#return, _i0
000905:0x00071328:	beq	0x071378
000907:0x00071330:	icall	
000907:0x00071340:	icall	
000908:0x00071350:	icall	
000909:0x00071360:	imove	#return, 0x000001
000909:0x00071370:	rts
000911:0x00071378:	imove	#return, 0x000000
000911:0x00071388:	rts
000911:0x00071390:	rts
map<typename,typename>::GetKeyByValue()
000917:0x000713e8:	imove	i, 0x000000
000917:0x000713f8:	jump	0x071418
000917:0x00071400:	move	@m00, i
000917:0x00071410:	inc	i
000917:0x00071418:	ncalli	map<typename,typename>.Count()
000917:0x00071420:	cmpi	i, #return
000917:0x00071430:	bge	0x0714a0
000919:0x00071438:	icall	
000919:0x00071448:	movea	@m00, #return
000919:0x00071458:	cmpi	@m00, value
000919:0x00071468:	bne	0x071498
000921:0x00071470:	icall	
000921:0x00071480:	movea	ret, #return
000922:0x00071490:	jump	0x0714a0
000922:0x00071498:	jump	0x071400
000926:0x000714a0:	movea	#return, ret
000926:0x000714b0:	rts
000926:0x000714b8:	rts
map<typename,typename>::GetKeyByValueChecked()
000931:0x000714e8:	imove	i, 0x000000
000931:0x000714f8:	jump	0x071518
000931:0x00071500:	move	@m00, i
000931:0x00071510:	inc	i
000931:0x00071518:	ncalli	map<typename,typename>.Count()
000931:0x00071520:	cmpi	i, #return
000931:0x00071530:	bge	0x0715c0
000933:0x00071538:	icall	
000933:0x00071548:	movea	@m00, #return
000933:0x00071558:	cmpi	@m00, value
000933:0x00071568:	bne	0x0715b8
000935:0x00071570:	icall	
000935:0x00071580:	movea	key, #return
000936:0x00071590:	imove	#return, 0x000001
000936:0x000715a0:	movea	key, key
000936:0x000715b0:	rts
000936:0x000715b8:	jump	0x071500
000939:0x000715c0:	imove	#return, 0x000000
000939:0x000715d0:	movea	key, key
000939:0x000715e0:	rts
000939:0x000715e8:	movea	key, key
000939:0x000715f8:	rts
map<typename,Managed>::GetKeyArray()
000885:0x00071f88:	new	keys, array<typename>
000886:0x00071fa8:	imove	i, 0x000000
000886:0x00071fb8:	jump	0x071fd8
000886:0x00071fc0:	move	@m00, i
000886:0x00071fd0:	inc	i
000886:0x00071fd8:	ncalli	map<typename,Managed>.Count()
000886:0x00071fe0:	cmpi	i, #return
000886:0x00071ff0:	bge	0x072020
000888:0x00071ff8:	icall	
000888:0x00072008:	icall	
000888:0x00072018:	jump	0x071fc0
000890:0x00072020:	movem	#return, keys
000890:0x00072030:	release	keys
000890:0x00072038:	rts
000890:0x00072040:	release	keys
000890:0x00072048:	rts
map<typename,Managed>::GetValueArray()
000895:0x000720a0:	new	elements, array<Managed>
000896:0x000720c0:	imove	i, 0x000000
000896:0x000720d0:	jump	0x0720f0
000896:0x000720d8:	move	@m00, i
000896:0x000720e8:	inc	i
000896:0x000720f0:	ncalli	map<typename,Managed>.Count()
000896:0x000720f8:	cmpi	i, #return
000896:0x00072108:	bge	0x072138
000898:0x00072110:	icall	
000898:0x00072120:	icall	
000898:0x00072130:	jump	0x0720d8
000900:0x00072138:	movem	#return, elements
000900:0x00072148:	release	elements
000900:0x00072150:	rts
000900:0x00072158:	release	elements
000900:0x00072160:	rts
map<typename,Managed>::ReplaceKey()
000905:0x00072168:	icall	
000905:0x00072178:	cmpi	#return, _i0
000905:0x00072188:	beq	0x0721d8
000907:0x00072190:	icall	
000907:0x000721a0:	icall	
000908:0x000721b0:	icall	
000909:0x000721c0:	imove	#return, 0x000001
000909:0x000721d0:	rts
000911:0x000721d8:	imove	#return, 0x000000
000911:0x000721e8:	rts
000911:0x000721f0:	rts
map<typename,Managed>::GetKeyByValue()
000917:0x00072248:	imove	i, 0x000000
000917:0x00072258:	jump	0x072278
000917:0x00072260:	move	@m00, i
000917:0x00072270:	inc	i
000917:0x00072278:	ncalli	map<typename,Managed>.Count()
000917:0x00072280:	cmpi	i, #return
000917:0x00072290:	bge	0x072300
000919:0x00072298:	icall	
000919:0x000722a8:	movec	@c00, #return
000919:0x000722b8:	cmpmc	@c00, value
000919:0x000722c8:	bne	0x0722f8
000921:0x000722d0:	icall	
000921:0x000722e0:	movea	ret, #return
000922:0x000722f0:	jump	0x072300
000922:0x000722f8:	jump	0x072260
000926:0x00072300:	movea	#return, ret
000926:0x00072310:	rts
000926:0x00072318:	rts
map<typename,Managed>::GetKeyByValueChecked()
000931:0x00072348:	imove	i, 0x000000
000931:0x00072358:	jump	0x072378
000931:0x00072360:	move	@m00, i
000931:0x00072370:	inc	i
000931:0x00072378:	ncalli	map<typename,Managed>.Count()
000931:0x00072380:	cmpi	i, #return
000931:0x00072390:	bge	0x072420
000933:0x00072398:	icall	
000933:0x000723a8:	movec	@c00, #return
000933:0x000723b8:	cmpmc	@c00, value
000933:0x000723c8:	bne	0x072418
000935:0x000723d0:	icall	
000935:0x000723e0:	movea	key, #return
000936:0x000723f0:	imove	#return, 0x000001
000936:0x00072400:	movea	key, key
000936:0x00072410:	rts
000936:0x00072418:	jump	0x072360
000939:0x00072420:	imove	#return, 0x000000
000939:0x00072430:	movea	key, key
000939:0x00072440:	rts
000939:0x00072448:	movea	key, key
000939:0x00072458:	rts
map<typename,@Managed>::GetKeyArray()
000885:0x000727a8:	new	keys, array<typename>
000886:0x000727c8:	imove	i, 0x000000
000886:0x000727d8:	jump	0x0727f8
000886:0x000727e0:	move	@m00, i
000886:0x000727f0:	inc	i
000886:0x000727f8:	ncalli	map<typename,@Managed>.Count()
000886:0x00072800:	cmpi	i, #return
000886:0x00072810:	bge	0x072840
000888:0x00072818:	icall	
000888:0x00072828:	icall	
000888:0x00072838:	jump	0x0727e0
000890:0x00072840:	movem	#return, keys
000890:0x00072850:	release	keys
000890:0x00072858:	rts
000890:0x00072860:	release	keys
000890:0x00072868:	rts
map<typename,@Managed>::GetValueArray()
000895:0x000728c0:	new	elements, array<Managed>
000896:0x000728e0:	imove	i, 0x000000
000896:0x000728f0:	jump	0x072910
000896:0x000728f8:	move	@m00, i
000896:0x00072908:	inc	i
000896:0x00072910:	ncalli	map<typename,@Managed>.Count()
000896:0x00072918:	cmpi	i, #return
000896:0x00072928:	bge	0x072958
000898:0x00072930:	icall	
000898:0x00072940:	icall	
000898:0x00072950:	jump	0x0728f8
000900:0x00072958:	movem	#return, elements
000900:0x00072968:	release	elements
000900:0x00072970:	rts
000900:0x00072978:	release	elements
000900:0x00072980:	rts
map<typename,@Managed>::ReplaceKey()
000905:0x00072988:	icall	
000905:0x00072998:	cmpi	#return, _i0
000905:0x000729a8:	beq	0x0729f8
000907:0x000729b0:	icall	
000907:0x000729c0:	icall	
000908:0x000729d0:	icall	
000909:0x000729e0:	imove	#return, 0x000001
000909:0x000729f0:	rts
000911:0x000729f8:	imove	#return, 0x000000
000911:0x00072a08:	rts
000911:0x00072a10:	rts
map<typename,@Managed>::GetKeyByValue()
000917:0x00072a68:	imove	i, 0x000000
000917:0x00072a78:	jump	0x072a98
000917:0x00072a80:	move	@m00, i
000917:0x00072a90:	inc	i
000917:0x00072a98:	ncalli	map<typename,@Managed>.Count()
000917:0x00072aa0:	cmpi	i, #return
000917:0x00072ab0:	bge	0x072b20
000919:0x00072ab8:	icall	
000919:0x00072ac8:	movec	@c00, #return
000919:0x00072ad8:	cmpmc	@c00, value
000919:0x00072ae8:	bne	0x072b18
000921:0x00072af0:	icall	
000921:0x00072b00:	movea	ret, #return
000922:0x00072b10:	jump	0x072b20
000922:0x00072b18:	jump	0x072a80
000926:0x00072b20:	movea	#return, ret
000926:0x00072b30:	rts
000926:0x00072b38:	rts
map<typename,@Managed>::GetKeyByValueChecked()
000931:0x00072b68:	imove	i, 0x000000
000931:0x00072b78:	jump	0x072b98
000931:0x00072b80:	move	@m00, i
000931:0x00072b90:	inc	i
000931:0x00072b98:	ncalli	map<typename,@Managed>.Count()
000931:0x00072ba0:	cmpi	i, #return
000931:0x00072bb0:	bge	0x072c40
000933:0x00072bb8:	icall	
000933:0x00072bc8:	movec	@c00, #return
000933:0x00072bd8:	cmpmc	@c00, value
000933:0x00072be8:	bne	0x072c38
000935:0x00072bf0:	icall	
000935:0x00072c00:	movea	key, #return
000936:0x00072c10:	imove	#return, 0x000001
000936:0x00072c20:	movea	key, key
000936:0x00072c30:	rts
000936:0x00072c38:	jump	0x072b80
000939:0x00072c40:	imove	#return, 0x000000
000939:0x00072c50:	movea	key, key
000939:0x00072c60:	rts
000939:0x00072c68:	movea	key, key
000939:0x00072c78:	rts
map<typename,Class>::GetKeyArray()
000885:0x000732e8:	new	keys, array<typename>
000886:0x00073308:	imove	i, 0x000000
000886:0x00073318:	jump	0x073338
000886:0x00073320:	move	@m00, i
000886:0x00073330:	inc	i
000886:0x00073338:	ncalli	map<typename,Class>.Count()
000886:0x00073340:	cmpi	i, #return
000886:0x00073350:	bge	0x073380
000888:0x00073358:	icall	
000888:0x00073368:	icall	
000888:0x00073378:	jump	0x073320
000890:0x00073380:	movem	#return, keys
000890:0x00073390:	release	keys
000890:0x00073398:	rts
000890:0x000733a0:	release	keys
000890:0x000733a8:	rts
map<typename,Class>::GetValueArray()
000895:0x00073400:	new	elements, array<Class>
000896:0x00073420:	imove	i, 0x000000
000896:0x00073430:	jump	0x073450
000896:0x00073438:	move	@m00, i
000896:0x00073448:	inc	i
000896:0x00073450:	ncalli	map<typename,Class>.Count()
000896:0x00073458:	cmpi	i, #return
000896:0x00073468:	bge	0x073498
000898:0x00073470:	icall	
000898:0x00073480:	icall	
000898:0x00073490:	jump	0x073438
000900:0x00073498:	movem	#return, elements
000900:0x000734a8:	release	elements
000900:0x000734b0:	rts
000900:0x000734b8:	release	elements
000900:0x000734c0:	rts
map<typename,Class>::ReplaceKey()
000905:0x000734c8:	icall	
000905:0x000734d8:	cmpi	#return, _i0
000905:0x000734e8:	beq	0x073538
000907:0x000734f0:	icall	
000907:0x00073500:	icall	
000908:0x00073510:	icall	
000909:0x00073520:	imove	#return, 0x000001
000909:0x00073530:	rts
000911:0x00073538:	imove	#return, 0x000000
000911:0x00073548:	rts
000911:0x00073550:	rts
map<typename,Class>::GetKeyByValue()
000917:0x000735a8:	imove	i, 0x000000
000917:0x000735b8:	jump	0x0735d8
000917:0x000735c0:	move	@m00, i
000917:0x000735d0:	inc	i
000917:0x000735d8:	ncalli	map<typename,Class>.Count()
000917:0x000735e0:	cmpi	i, #return
000917:0x000735f0:	bge	0x073660
000919:0x000735f8:	icall	
000919:0x00073608:	movec	@c00, #return
000919:0x00073618:	cmpc	@c00, value
000919:0x00073628:	bne	0x073658
000921:0x00073630:	icall	
000921:0x00073640:	movea	ret, #return
000922:0x00073650:	jump	0x073660
000922:0x00073658:	jump	0x0735c0
000926:0x00073660:	movea	#return, ret
000926:0x00073670:	rts
000926:0x00073678:	rts
map<typename,Class>::GetKeyByValueChecked()
000931:0x000736a8:	imove	i, 0x000000
000931:0x000736b8:	jump	0x0736d8
000931:0x000736c0:	move	@m00, i
000931:0x000736d0:	inc	i
000931:0x000736d8:	ncalli	map<typename,Class>.Count()
000931:0x000736e0:	cmpi	i, #return
000931:0x000736f0:	bge	0x073780
000933:0x000736f8:	icall	
000933:0x00073708:	movec	@c00, #return
000933:0x00073718:	cmpc	@c00, value
000933:0x00073728:	bne	0x073778
000935:0x00073730:	icall	
000935:0x00073740:	movea	key, #return
000936:0x00073750:	imove	#return, 0x000001
000936:0x00073760:	movea	key, key
000936:0x00073770:	rts
000936:0x00073778:	jump	0x0736c0
000939:0x00073780:	imove	#return, 0x000000
000939:0x00073790:	movea	key, key
000939:0x000737a0:	rts
000939:0x000737a8:	movea	key, key
000939:0x000737b8:	rts
map<typename,string>::GetKeyArray()
000885:0x00073e28:	new	keys, array<typename>
000886:0x00073e48:	imove	i, 0x000000
000886:0x00073e58:	jump	0x073e78
000886:0x00073e60:	move	@m00, i
000886:0x00073e70:	inc	i
000886:0x00073e78:	ncalli	map<typename,string>.Count()
000886:0x00073e80:	cmpi	i, #return
000886:0x00073e90:	bge	0x073ec0
000888:0x00073e98:	icall	
000888:0x00073ea8:	icall	
000888:0x00073eb8:	jump	0x073e60
000890:0x00073ec0:	movem	#return, keys
000890:0x00073ed0:	release	keys
000890:0x00073ed8:	rts
000890:0x00073ee0:	release	keys
000890:0x00073ee8:	rts
map<typename,string>::GetValueArray()
000895:0x00073f40:	new	elements, array<string>
000896:0x00073f60:	imove	i, 0x000000
000896:0x00073f70:	jump	0x073f90
000896:0x00073f78:	move	@m00, i
000896:0x00073f88:	inc	i
000896:0x00073f90:	ncalli	map<typename,string>.Count()
000896:0x00073f98:	cmpi	i, #return
000896:0x00073fa8:	bge	0x073fd8
000898:0x00073fb0:	icall	
000898:0x00073fc0:	icall	
000898:0x00073fd0:	jump	0x073f78
000900:0x00073fd8:	movem	#return, elements
000900:0x00073fe8:	release	elements
000900:0x00073ff0:	rts
000900:0x00073ff8:	release	elements
000900:0x00074000:	rts
map<typename,string>::ReplaceKey()
000905:0x00074008:	icall	
000905:0x00074018:	cmpi	#return, _i0
000905:0x00074028:	beq	0x074078
000907:0x00074030:	icall	
000907:0x00074040:	icall	
000908:0x00074050:	icall	
000909:0x00074060:	imove	#return, 0x000001
000909:0x00074070:	rts
000911:0x00074078:	imove	#return, 0x000000
000911:0x00074088:	rts
000911:0x00074090:	rts
map<typename,string>::GetKeyByValue()
000917:0x000740e8:	imove	i, 0x000000
000917:0x000740f8:	jump	0x074118
000917:0x00074100:	move	@m00, i
000917:0x00074110:	inc	i
000917:0x00074118:	ncalli	map<typename,string>.Count()
000917:0x00074120:	cmpi	i, #return
000917:0x00074130:	bge	0x0741a0
000919:0x00074138:	icall	
000919:0x00074148:	moves	@s00, #return
000919:0x00074158:	cmps	@s00, value
000919:0x00074168:	bne	0x074198
000921:0x00074170:	icall	
000921:0x00074180:	movea	ret, #return
000922:0x00074190:	jump	0x0741a0
000922:0x00074198:	jump	0x074100
000926:0x000741a0:	movea	#return, ret
000926:0x000741b0:	rts
000926:0x000741b8:	rts
map<typename,string>::GetKeyByValueChecked()
000931:0x000741e8:	imove	i, 0x000000
000931:0x000741f8:	jump	0x074218
000931:0x00074200:	move	@m00, i
000931:0x00074210:	inc	i
000931:0x00074218:	ncalli	map<typename,string>.Count()
000931:0x00074220:	cmpi	i, #return
000931:0x00074230:	bge	0x0742c0
000933:0x00074238:	icall	
000933:0x00074248:	moves	@s00, #return
000933:0x00074258:	cmps	@s00, value
000933:0x00074268:	bne	0x0742b8
000935:0x00074270:	icall	
000935:0x00074280:	movea	key, #return
000936:0x00074290:	imove	#return, 0x000001
000936:0x000742a0:	movea	key, key
000936:0x000742b0:	rts
000936:0x000742b8:	jump	0x074200
000939:0x000742c0:	imove	#return, 0x000000
000939:0x000742d0:	movea	key, key
000939:0x000742e0:	rts
000939:0x000742e8:	movea	key, key
000939:0x000742f8:	rts
map<typename,int>::GetKeyArray()
000885:0x00074968:	new	keys, array<typename>
000886:0x00074988:	imove	i, 0x000000
000886:0x00074998:	jump	0x0749b8
000886:0x000749a0:	move	@m00, i
000886:0x000749b0:	inc	i
000886:0x000749b8:	ncalli	map<typename,int>.Count()
000886:0x000749c0:	cmpi	i, #return
000886:0x000749d0:	bge	0x074a00
000888:0x000749d8:	icall	
000888:0x000749e8:	icall	
000888:0x000749f8:	jump	0x0749a0
000890:0x00074a00:	movem	#return, keys
000890:0x00074a10:	release	keys
000890:0x00074a18:	rts
000890:0x00074a20:	release	keys
000890:0x00074a28:	rts
map<typename,int>::GetValueArray()
000895:0x00074a80:	new	elements, array<int>
000896:0x00074aa0:	imove	i, 0x000000
000896:0x00074ab0:	jump	0x074ad0
000896:0x00074ab8:	move	@m00, i
000896:0x00074ac8:	inc	i
000896:0x00074ad0:	ncalli	map<typename,int>.Count()
000896:0x00074ad8:	cmpi	i, #return
000896:0x00074ae8:	bge	0x074b18
000898:0x00074af0:	icall	
000898:0x00074b00:	icall	
000898:0x00074b10:	jump	0x074ab8
000900:0x00074b18:	movem	#return, elements
000900:0x00074b28:	release	elements
000900:0x00074b30:	rts
000900:0x00074b38:	release	elements
000900:0x00074b40:	rts
map<typename,int>::ReplaceKey()
000905:0x00074b48:	icall	
000905:0x00074b58:	cmpi	#return, _i0
000905:0x00074b68:	beq	0x074bb8
000907:0x00074b70:	icall	
000907:0x00074b80:	icall	
000908:0x00074b90:	icall	
000909:0x00074ba0:	imove	#return, 0x000001
000909:0x00074bb0:	rts
000911:0x00074bb8:	imove	#return, 0x000000
000911:0x00074bc8:	rts
000911:0x00074bd0:	rts
map<typename,int>::GetKeyByValue()
000917:0x00074c28:	imove	i, 0x000000
000917:0x00074c38:	jump	0x074c58
000917:0x00074c40:	move	@m00, i
000917:0x00074c50:	inc	i
000917:0x00074c58:	ncalli	map<typename,int>.Count()
000917:0x00074c60:	cmpi	i, #return
000917:0x00074c70:	bge	0x074ce0
000919:0x00074c78:	icall	
000919:0x00074c88:	move	@m00, #return
000919:0x00074c98:	cmpi	@m00, value
000919:0x00074ca8:	bne	0x074cd8
000921:0x00074cb0:	icall	
000921:0x00074cc0:	movea	ret, #return
000922:0x00074cd0:	jump	0x074ce0
000922:0x00074cd8:	jump	0x074c40
000926:0x00074ce0:	movea	#return, ret
000926:0x00074cf0:	rts
000926:0x00074cf8:	rts
map<typename,int>::GetKeyByValueChecked()
000931:0x00074d28:	imove	i, 0x000000
000931:0x00074d38:	jump	0x074d58
000931:0x00074d40:	move	@m00, i
000931:0x00074d50:	inc	i
000931:0x00074d58:	ncalli	map<typename,int>.Count()
000931:0x00074d60:	cmpi	i, #return
000931:0x00074d70:	bge	0x074e00
000933:0x00074d78:	icall	
000933:0x00074d88:	move	@m00, #return
000933:0x00074d98:	cmpi	@m00, value
000933:0x00074da8:	bne	0x074df8
000935:0x00074db0:	icall	
000935:0x00074dc0:	movea	key, #return
000936:0x00074dd0:	imove	#return, 0x000001
000936:0x00074de0:	movea	key, key
000936:0x00074df0:	rts
000936:0x00074df8:	jump	0x074d40
000939:0x00074e00:	imove	#return, 0x000000
000939:0x00074e10:	movea	key, key
000939:0x00074e20:	rts
000939:0x00074e28:	movea	key, key
000939:0x00074e38:	rts
map<typename,float>::GetKeyArray()
000885:0x000754a8:	new	keys, array<typename>
000886:0x000754c8:	imove	i, 0x000000
000886:0x000754d8:	jump	0x0754f8
000886:0x000754e0:	move	@m00, i
000886:0x000754f0:	inc	i
000886:0x000754f8:	ncalli	map<typename,float>.Count()
000886:0x00075500:	cmpi	i, #return
000886:0x00075510:	bge	0x075540
000888:0x00075518:	icall	
000888:0x00075528:	icall	
000888:0x00075538:	jump	0x0754e0
000890:0x00075540:	movem	#return, keys
000890:0x00075550:	release	keys
000890:0x00075558:	rts
000890:0x00075560:	release	keys
000890:0x00075568:	rts
map<typename,float>::GetValueArray()
000895:0x000755c0:	new	elements, array<float>
000896:0x000755e0:	imove	i, 0x000000
000896:0x000755f0:	jump	0x075610
000896:0x000755f8:	move	@m00, i
000896:0x00075608:	inc	i
000896:0x00075610:	ncalli	map<typename,float>.Count()
000896:0x00075618:	cmpi	i, #return
000896:0x00075628:	bge	0x075658
000898:0x00075630:	icall	
000898:0x00075640:	icall	
000898:0x00075650:	jump	0x0755f8
000900:0x00075658:	movem	#return, elements
000900:0x00075668:	release	elements
000900:0x00075670:	rts
000900:0x00075678:	release	elements
000900:0x00075680:	rts
map<typename,float>::ReplaceKey()
000905:0x00075688:	icall	
000905:0x00075698:	cmpi	#return, _i0
000905:0x000756a8:	beq	0x0756f8
000907:0x000756b0:	icall	
000907:0x000756c0:	icall	
000908:0x000756d0:	icall	
000909:0x000756e0:	imove	#return, 0x000001
000909:0x000756f0:	rts
000911:0x000756f8:	imove	#return, 0x000000
000911:0x00075708:	rts
000911:0x00075710:	rts
map<typename,float>::GetKeyByValue()
000917:0x00075768:	imove	i, 0x000000
000917:0x00075778:	jump	0x075798
000917:0x00075780:	move	@m00, i
000917:0x00075790:	inc	i
000917:0x00075798:	ncalli	map<typename,float>.Count()
000917:0x000757a0:	cmpi	i, #return
000917:0x000757b0:	bge	0x075820
000919:0x000757b8:	icall	
000919:0x000757c8:	move	@f00, #return
000919:0x000757d8:	cmpf	@f00, value
000919:0x000757e8:	bne	0x075818
000921:0x000757f0:	icall	
000921:0x00075800:	movea	ret, #return
000922:0x00075810:	jump	0x075820
000922:0x00075818:	jump	0x075780
000926:0x00075820:	movea	#return, ret
000926:0x00075830:	rts
000926:0x00075838:	rts
map<typename,float>::GetKeyByValueChecked()
000931:0x00075868:	imove	i, 0x000000
000931:0x00075878:	jump	0x075898
000931:0x00075880:	move	@m00, i
000931:0x00075890:	inc	i
000931:0x00075898:	ncalli	map<typename,float>.Count()
000931:0x000758a0:	cmpi	i, #return
000931:0x000758b0:	bge	0x075940
000933:0x000758b8:	icall	
000933:0x000758c8:	move	@f00, #return
000933:0x000758d8:	cmpf	@f00, value
000933:0x000758e8:	bne	0x075938
000935:0x000758f0:	icall	
000935:0x00075900:	movea	key, #return
000936:0x00075910:	imove	#return, 0x000001
000936:0x00075920:	movea	key, key
000936:0x00075930:	rts
000936:0x00075938:	jump	0x075880
000939:0x00075940:	imove	#return, 0x000000
000939:0x00075950:	movea	key, key
000939:0x00075960:	rts
000939:0x00075968:	movea	key, key
000939:0x00075978:	rts
map<Class,vector>::GetKeyArray()
000885:0x00076068:	new	keys, array<Class>
000886:0x00076088:	imove	i, 0x000000
000886:0x00076098:	jump	0x0760b8
000886:0x000760a0:	move	@m00, i
000886:0x000760b0:	inc	i
000886:0x000760b8:	ncalli	map<Class,vector>.Count()
000886:0x000760c0:	cmpi	i, #return
000886:0x000760d0:	bge	0x076100
000888:0x000760d8:	icall	
000888:0x000760e8:	icall	
000888:0x000760f8:	jump	0x0760a0
000890:0x00076100:	movem	#return, keys
000890:0x00076110:	release	keys
000890:0x00076118:	rts
000890:0x00076120:	release	keys
000890:0x00076128:	rts
map<Class,vector>::GetValueArray()
000895:0x00076180:	new	elements, array<vector>
000896:0x000761a0:	imove	i, 0x000000
000896:0x000761b0:	jump	0x0761d0
000896:0x000761b8:	move	@m00, i
000896:0x000761c8:	inc	i
000896:0x000761d0:	ncalli	map<Class,vector>.Count()
000896:0x000761d8:	cmpi	i, #return
000896:0x000761e8:	bge	0x076218
000898:0x000761f0:	icall	
000898:0x00076200:	icall	
000898:0x00076210:	jump	0x0761b8
000900:0x00076218:	movem	#return, elements
000900:0x00076228:	release	elements
000900:0x00076230:	rts
000900:0x00076238:	release	elements
000900:0x00076240:	rts
map<Class,vector>::ReplaceKey()
000905:0x00076248:	icall	
000905:0x00076258:	cmpi	#return, _i0
000905:0x00076268:	beq	0x0762b8
000907:0x00076270:	icall	
000907:0x00076280:	icall	
000908:0x00076290:	icall	
000909:0x000762a0:	imove	#return, 0x000001
000909:0x000762b0:	rts
000911:0x000762b8:	imove	#return, 0x000000
000911:0x000762c8:	rts
000911:0x000762d0:	rts
map<Class,vector>::GetKeyByValue()
000917:0x00076328:	imove	i, 0x000000
000917:0x00076338:	jump	0x076358
000917:0x00076340:	move	@m00, i
000917:0x00076350:	inc	i
000917:0x00076358:	ncalli	map<Class,vector>.Count()
000917:0x00076360:	cmpi	i, #return
000917:0x00076370:	bge	0x0763e0
000919:0x00076378:	icall	
000919:0x00076388:	movev	@v00, #return
000919:0x00076398:	cmpv	@v00, value
000919:0x000763a8:	bne	0x0763d8
000921:0x000763b0:	icall	
000921:0x000763c0:	movec	ret, #return
000922:0x000763d0:	jump	0x0763e0
000922:0x000763d8:	jump	0x076340
000926:0x000763e0:	movec	#return, ret
000926:0x000763f0:	rts
000926:0x000763f8:	rts
map<Class,vector>::GetKeyByValueChecked()
000931:0x00076428:	imove	i, 0x000000
000931:0x00076438:	jump	0x076458
000931:0x00076440:	move	@m00, i
000931:0x00076450:	inc	i
000931:0x00076458:	ncalli	map<Class,vector>.Count()
000931:0x00076460:	cmpi	i, #return
000931:0x00076470:	bge	0x076500
000933:0x00076478:	icall	
000933:0x00076488:	movev	@v00, #return
000933:0x00076498:	cmpv	@v00, value
000933:0x000764a8:	bne	0x0764f8
000935:0x000764b0:	icall	
000935:0x000764c0:	movec	key, #return
000936:0x000764d0:	imove	#return, 0x000001
000936:0x000764e0:	movec	key, key
000936:0x000764f0:	rts
000936:0x000764f8:	jump	0x076440
000939:0x00076500:	imove	#return, 0x000000
000939:0x00076510:	movec	key, key
000939:0x00076520:	rts
000939:0x00076528:	movec	key, key
000939:0x00076538:	rts
map<Class,typename>::GetKeyArray()
000885:0x00076ba8:	new	keys, array<Class>
000886:0x00076bc8:	imove	i, 0x000000
000886:0x00076bd8:	jump	0x076bf8
000886:0x00076be0:	move	@m00, i
000886:0x00076bf0:	inc	i
000886:0x00076bf8:	ncalli	map<Class,typename>.Count()
000886:0x00076c00:	cmpi	i, #return
000886:0x00076c10:	bge	0x076c40
000888:0x00076c18:	icall	
000888:0x00076c28:	icall	
000888:0x00076c38:	jump	0x076be0
000890:0x00076c40:	movem	#return, keys
000890:0x00076c50:	release	keys
000890:0x00076c58:	rts
000890:0x00076c60:	release	keys
000890:0x00076c68:	rts
map<Class,typename>::GetValueArray()
000895:0x00076cc0:	new	elements, array<typename>
000896:0x00076ce0:	imove	i, 0x000000
000896:0x00076cf0:	jump	0x076d10
000896:0x00076cf8:	move	@m00, i
000896:0x00076d08:	inc	i
000896:0x00076d10:	ncalli	map<Class,typename>.Count()
000896:0x00076d18:	cmpi	i, #return
000896:0x00076d28:	bge	0x076d58
000898:0x00076d30:	icall	
000898:0x00076d40:	icall	
000898:0x00076d50:	jump	0x076cf8
000900:0x00076d58:	movem	#return, elements
000900:0x00076d68:	release	elements
000900:0x00076d70:	rts
000900:0x00076d78:	release	elements
000900:0x00076d80:	rts
map<Class,typename>::ReplaceKey()
000905:0x00076d88:	icall	
000905:0x00076d98:	cmpi	#return, _i0
000905:0x00076da8:	beq	0x076df8
000907:0x00076db0:	icall	
000907:0x00076dc0:	icall	
000908:0x00076dd0:	icall	
000909:0x00076de0:	imove	#return, 0x000001
000909:0x00076df0:	rts
000911:0x00076df8:	imove	#return, 0x000000
000911:0x00076e08:	rts
000911:0x00076e10:	rts
map<Class,typename>::GetKeyByValue()
000917:0x00076e68:	imove	i, 0x000000
000917:0x00076e78:	jump	0x076e98
000917:0x00076e80:	move	@m00, i
000917:0x00076e90:	inc	i
000917:0x00076e98:	ncalli	map<Class,typename>.Count()
000917:0x00076ea0:	cmpi	i, #return
000917:0x00076eb0:	bge	0x076f20
000919:0x00076eb8:	icall	
000919:0x00076ec8:	movea	@m00, #return
000919:0x00076ed8:	cmpi	@m00, value
000919:0x00076ee8:	bne	0x076f18
000921:0x00076ef0:	icall	
000921:0x00076f00:	movec	ret, #return
000922:0x00076f10:	jump	0x076f20
000922:0x00076f18:	jump	0x076e80
000926:0x00076f20:	movec	#return, ret
000926:0x00076f30:	rts
000926:0x00076f38:	rts
map<Class,typename>::GetKeyByValueChecked()
000931:0x00076f68:	imove	i, 0x000000
000931:0x00076f78:	jump	0x076f98
000931:0x00076f80:	move	@m00, i
000931:0x00076f90:	inc	i
000931:0x00076f98:	ncalli	map<Class,typename>.Count()
000931:0x00076fa0:	cmpi	i, #return
000931:0x00076fb0:	bge	0x077040
000933:0x00076fb8:	icall	
000933:0x00076fc8:	movea	@m00, #return
000933:0x00076fd8:	cmpi	@m00, value
000933:0x00076fe8:	bne	0x077038
000935:0x00076ff0:	icall	
000935:0x00077000:	movec	key, #return
000936:0x00077010:	imove	#return, 0x000001
000936:0x00077020:	movec	key, key
000936:0x00077030:	rts
000936:0x00077038:	jump	0x076f80
000939:0x00077040:	imove	#return, 0x000000
000939:0x00077050:	movec	key, key
000939:0x00077060:	rts
000939:0x00077068:	movec	key, key
000939:0x00077078:	rts
map<Class,Managed>::GetKeyArray()
000885:0x00077a08:	new	keys, array<Class>
000886:0x00077a28:	imove	i, 0x000000
000886:0x00077a38:	jump	0x077a58
000886:0x00077a40:	move	@m00, i
000886:0x00077a50:	inc	i
000886:0x00077a58:	ncalli	map<Class,Managed>.Count()
000886:0x00077a60:	cmpi	i, #return
000886:0x00077a70:	bge	0x077aa0
000888:0x00077a78:	icall	
000888:0x00077a88:	icall	
000888:0x00077a98:	jump	0x077a40
000890:0x00077aa0:	movem	#return, keys
000890:0x00077ab0:	release	keys
000890:0x00077ab8:	rts
000890:0x00077ac0:	release	keys
000890:0x00077ac8:	rts
map<Class,Managed>::GetValueArray()
000895:0x00077b20:	new	elements, array<Managed>
000896:0x00077b40:	imove	i, 0x000000
000896:0x00077b50:	jump	0x077b70
000896:0x00077b58:	move	@m00, i
000896:0x00077b68:	inc	i
000896:0x00077b70:	ncalli	map<Class,Managed>.Count()
000896:0x00077b78:	cmpi	i, #return
000896:0x00077b88:	bge	0x077bb8
000898:0x00077b90:	icall	
000898:0x00077ba0:	icall	
000898:0x00077bb0:	jump	0x077b58
000900:0x00077bb8:	movem	#return, elements
000900:0x00077bc8:	release	elements
000900:0x00077bd0:	rts
000900:0x00077bd8:	release	elements
000900:0x00077be0:	rts
map<Class,Managed>::ReplaceKey()
000905:0x00077be8:	icall	
000905:0x00077bf8:	cmpi	#return, _i0
000905:0x00077c08:	beq	0x077c58
000907:0x00077c10:	icall	
000907:0x00077c20:	icall	
000908:0x00077c30:	icall	
000909:0x00077c40:	imove	#return, 0x000001
000909:0x00077c50:	rts
000911:0x00077c58:	imove	#return, 0x000000
000911:0x00077c68:	rts
000911:0x00077c70:	rts
map<Class,Managed>::GetKeyByValue()
000917:0x00077cc8:	imove	i, 0x000000
000917:0x00077cd8:	jump	0x077cf8
000917:0x00077ce0:	move	@m00, i
000917:0x00077cf0:	inc	i
000917:0x00077cf8:	ncalli	map<Class,Managed>.Count()
000917:0x00077d00:	cmpi	i, #return
000917:0x00077d10:	bge	0x077d80
000919:0x00077d18:	icall	
000919:0x00077d28:	movec	@c00, #return
000919:0x00077d38:	cmpmc	@c00, value
000919:0x00077d48:	bne	0x077d78
000921:0x00077d50:	icall	
000921:0x00077d60:	movec	ret, #return
000922:0x00077d70:	jump	0x077d80
000922:0x00077d78:	jump	0x077ce0
000926:0x00077d80:	movec	#return, ret
000926:0x00077d90:	rts
000926:0x00077d98:	rts
map<Class,Managed>::GetKeyByValueChecked()
000931:0x00077dc8:	imove	i, 0x000000
000931:0x00077dd8:	jump	0x077df8
000931:0x00077de0:	move	@m00, i
000931:0x00077df0:	inc	i
000931:0x00077df8:	ncalli	map<Class,Managed>.Count()
000931:0x00077e00:	cmpi	i, #return
000931:0x00077e10:	bge	0x077ea0
000933:0x00077e18:	icall	
000933:0x00077e28:	movec	@c00, #return
000933:0x00077e38:	cmpmc	@c00, value
000933:0x00077e48:	bne	0x077e98
000935:0x00077e50:	icall	
000935:0x00077e60:	movec	key, #return
000936:0x00077e70:	imove	#return, 0x000001
000936:0x00077e80:	movec	key, key
000936:0x00077e90:	rts
000936:0x00077e98:	jump	0x077de0
000939:0x00077ea0:	imove	#return, 0x000000
000939:0x00077eb0:	movec	key, key
000939:0x00077ec0:	rts
000939:0x00077ec8:	movec	key, key
000939:0x00077ed8:	rts
map<Class,@Managed>::GetKeyArray()
000885:0x00078228:	new	keys, array<Class>
000886:0x00078248:	imove	i, 0x000000
000886:0x00078258:	jump	0x078278
000886:0x00078260:	move	@m00, i
000886:0x00078270:	inc	i
000886:0x00078278:	ncalli	map<Class,@Managed>.Count()
000886:0x00078280:	cmpi	i, #return
000886:0x00078290:	bge	0x0782c0
000888:0x00078298:	icall	
000888:0x000782a8:	icall	
000888:0x000782b8:	jump	0x078260
000890:0x000782c0:	movem	#return, keys
000890:0x000782d0:	release	keys
000890:0x000782d8:	rts
000890:0x000782e0:	release	keys
000890:0x000782e8:	rts
map<Class,@Managed>::GetValueArray()
000895:0x00078340:	new	elements, array<Managed>
000896:0x00078360:	imove	i, 0x000000
000896:0x00078370:	jump	0x078390
000896:0x00078378:	move	@m00, i
000896:0x00078388:	inc	i
000896:0x00078390:	ncalli	map<Class,@Managed>.Count()
000896:0x00078398:	cmpi	i, #return
000896:0x000783a8:	bge	0x0783d8
000898:0x000783b0:	icall	
000898:0x000783c0:	icall	
000898:0x000783d0:	jump	0x078378
000900:0x000783d8:	movem	#return, elements
000900:0x000783e8:	release	elements
000900:0x000783f0:	rts
000900:0x000783f8:	release	elements
000900:0x00078400:	rts
map<Class,@Managed>::ReplaceKey()
000905:0x00078408:	icall	
000905:0x00078418:	cmpi	#return, _i0
000905:0x00078428:	beq	0x078478
000907:0x00078430:	icall	
000907:0x00078440:	icall	
000908:0x00078450:	icall	
000909:0x00078460:	imove	#return, 0x000001
000909:0x00078470:	rts
000911:0x00078478:	imove	#return, 0x000000
000911:0x00078488:	rts
000911:0x00078490:	rts
map<Class,@Managed>::GetKeyByValue()
000917:0x000784e8:	imove	i, 0x000000
000917:0x000784f8:	jump	0x078518
000917:0x00078500:	move	@m00, i
000917:0x00078510:	inc	i
000917:0x00078518:	ncalli	map<Class,@Managed>.Count()
000917:0x00078520:	cmpi	i, #return
000917:0x00078530:	bge	0x0785a0
000919:0x00078538:	icall	
000919:0x00078548:	movec	@c00, #return
000919:0x00078558:	cmpmc	@c00, value
000919:0x00078568:	bne	0x078598
000921:0x00078570:	icall	
000921:0x00078580:	movec	ret, #return
000922:0x00078590:	jump	0x0785a0
000922:0x00078598:	jump	0x078500
000926:0x000785a0:	movec	#return, ret
000926:0x000785b0:	rts
000926:0x000785b8:	rts
map<Class,@Managed>::GetKeyByValueChecked()
000931:0x000785e8:	imove	i, 0x000000
000931:0x000785f8:	jump	0x078618
000931:0x00078600:	move	@m00, i
000931:0x00078610:	inc	i
000931:0x00078618:	ncalli	map<Class,@Managed>.Count()
000931:0x00078620:	cmpi	i, #return
000931:0x00078630:	bge	0x0786c0
000933:0x00078638:	icall	
000933:0x00078648:	movec	@c00, #return
000933:0x00078658:	cmpmc	@c00, value
000933:0x00078668:	bne	0x0786b8
000935:0x00078670:	icall	
000935:0x00078680:	movec	key, #return
000936:0x00078690:	imove	#return, 0x000001
000936:0x000786a0:	movec	key, key
000936:0x000786b0:	rts
000936:0x000786b8:	jump	0x078600
000939:0x000786c0:	imove	#return, 0x000000
000939:0x000786d0:	movec	key, key
000939:0x000786e0:	rts
000939:0x000786e8:	movec	key, key
000939:0x000786f8:	rts
map<Class,Class>::GetKeyArray()
000885:0x00078d68:	new	keys, array<Class>
000886:0x00078d88:	imove	i, 0x000000
000886:0x00078d98:	jump	0x078db8
000886:0x00078da0:	move	@m00, i
000886:0x00078db0:	inc	i
000886:0x00078db8:	ncalli	map<Class,Class>.Count()
000886:0x00078dc0:	cmpi	i, #return
000886:0x00078dd0:	bge	0x078e00
000888:0x00078dd8:	icall	
000888:0x00078de8:	icall	
000888:0x00078df8:	jump	0x078da0
000890:0x00078e00:	movem	#return, keys
000890:0x00078e10:	release	keys
000890:0x00078e18:	rts
000890:0x00078e20:	release	keys
000890:0x00078e28:	rts
map<Class,Class>::GetValueArray()
000895:0x00078e80:	new	elements, array<Class>
000896:0x00078ea0:	imove	i, 0x000000
000896:0x00078eb0:	jump	0x078ed0
000896:0x00078eb8:	move	@m00, i
000896:0x00078ec8:	inc	i
000896:0x00078ed0:	ncalli	map<Class,Class>.Count()
000896:0x00078ed8:	cmpi	i, #return
000896:0x00078ee8:	bge	0x078f18
000898:0x00078ef0:	icall	
000898:0x00078f00:	icall	
000898:0x00078f10:	jump	0x078eb8
000900:0x00078f18:	movem	#return, elements
000900:0x00078f28:	release	elements
000900:0x00078f30:	rts
000900:0x00078f38:	release	elements
000900:0x00078f40:	rts
map<Class,Class>::ReplaceKey()
000905:0x00078f48:	icall	
000905:0x00078f58:	cmpi	#return, _i0
000905:0x00078f68:	beq	0x078fb8
000907:0x00078f70:	icall	
000907:0x00078f80:	icall	
000908:0x00078f90:	icall	
000909:0x00078fa0:	imove	#return, 0x000001
000909:0x00078fb0:	rts
000911:0x00078fb8:	imove	#return, 0x000000
000911:0x00078fc8:	rts
000911:0x00078fd0:	rts
map<Class,Class>::GetKeyByValue()
000917:0x00079028:	imove	i, 0x000000
000917:0x00079038:	jump	0x079058
000917:0x00079040:	move	@m00, i
000917:0x00079050:	inc	i
000917:0x00079058:	ncalli	map<Class,Class>.Count()
000917:0x00079060:	cmpi	i, #return
000917:0x00079070:	bge	0x0790e0
000919:0x00079078:	icall	
000919:0x00079088:	movec	@c00, #return
000919:0x00079098:	cmpc	@c00, value
000919:0x000790a8:	bne	0x0790d8
000921:0x000790b0:	icall	
000921:0x000790c0:	movec	ret, #return
000922:0x000790d0:	jump	0x0790e0
000922:0x000790d8:	jump	0x079040
000926:0x000790e0:	movec	#return, ret
000926:0x000790f0:	rts
000926:0x000790f8:	rts
map<Class,Class>::GetKeyByValueChecked()
000931:0x00079128:	imove	i, 0x000000
000931:0x00079138:	jump	0x079158
000931:0x00079140:	move	@m00, i
000931:0x00079150:	inc	i
000931:0x00079158:	ncalli	map<Class,Class>.Count()
000931:0x00079160:	cmpi	i, #return
000931:0x00079170:	bge	0x079200
000933:0x00079178:	icall	
000933:0x00079188:	movec	@c00, #return
000933:0x00079198:	cmpc	@c00, value
000933:0x000791a8:	bne	0x0791f8
000935:0x000791b0:	icall	
000935:0x000791c0:	movec	key, #return
000936:0x000791d0:	imove	#return, 0x000001
000936:0x000791e0:	movec	key, key
000936:0x000791f0:	rts
000936:0x000791f8:	jump	0x079140
000939:0x00079200:	imove	#return, 0x000000
000939:0x00079210:	movec	key, key
000939:0x00079220:	rts
000939:0x00079228:	movec	key, key
000939:0x00079238:	rts
map<Class,string>::GetKeyArray()
000885:0x000798a8:	new	keys, array<Class>
000886:0x000798c8:	imove	i, 0x000000
000886:0x000798d8:	jump	0x0798f8
000886:0x000798e0:	move	@m00, i
000886:0x000798f0:	inc	i
000886:0x000798f8:	ncalli	map<Class,string>.Count()
000886:0x00079900:	cmpi	i, #return
000886:0x00079910:	bge	0x079940
000888:0x00079918:	icall	
000888:0x00079928:	icall	
000888:0x00079938:	jump	0x0798e0
000890:0x00079940:	movem	#return, keys
000890:0x00079950:	release	keys
000890:0x00079958:	rts
000890:0x00079960:	release	keys
000890:0x00079968:	rts
map<Class,string>::GetValueArray()
000895:0x000799c0:	new	elements, array<string>
000896:0x000799e0:	imove	i, 0x000000
000896:0x000799f0:	jump	0x079a10
000896:0x000799f8:	move	@m00, i
000896:0x00079a08:	inc	i
000896:0x00079a10:	ncalli	map<Class,string>.Count()
000896:0x00079a18:	cmpi	i, #return
000896:0x00079a28:	bge	0x079a58
000898:0x00079a30:	icall	
000898:0x00079a40:	icall	
000898:0x00079a50:	jump	0x0799f8
000900:0x00079a58:	movem	#return, elements
000900:0x00079a68:	release	elements
000900:0x00079a70:	rts
000900:0x00079a78:	release	elements
000900:0x00079a80:	rts
map<Class,string>::ReplaceKey()
000905:0x00079a88:	icall	
000905:0x00079a98:	cmpi	#return, _i0
000905:0x00079aa8:	beq	0x079af8
000907:0x00079ab0:	icall	
000907:0x00079ac0:	icall	
000908:0x00079ad0:	icall	
000909:0x00079ae0:	imove	#return, 0x000001
000909:0x00079af0:	rts
000911:0x00079af8:	imove	#return, 0x000000
000911:0x00079b08:	rts
000911:0x00079b10:	rts
map<Class,string>::GetKeyByValue()
000917:0x00079b68:	imove	i, 0x000000
000917:0x00079b78:	jump	0x079b98
000917:0x00079b80:	move	@m00, i
000917:0x00079b90:	inc	i
000917:0x00079b98:	ncalli	map<Class,string>.Count()
000917:0x00079ba0:	cmpi	i, #return
000917:0x00079bb0:	bge	0x079c20
000919:0x00079bb8:	icall	
000919:0x00079bc8:	moves	@s00, #return
000919:0x00079bd8:	cmps	@s00, value
000919:0x00079be8:	bne	0x079c18
000921:0x00079bf0:	icall	
000921:0x00079c00:	movec	ret, #return
000922:0x00079c10:	jump	0x079c20
000922:0x00079c18:	jump	0x079b80
000926:0x00079c20:	movec	#return, ret
000926:0x00079c30:	rts
000926:0x00079c38:	rts
map<Class,string>::GetKeyByValueChecked()
000931:0x00079c68:	imove	i, 0x000000
000931:0x00079c78:	jump	0x079c98
000931:0x00079c80:	move	@m00, i
000931:0x00079c90:	inc	i
000931:0x00079c98:	ncalli	map<Class,string>.Count()
000931:0x00079ca0:	cmpi	i, #return
000931:0x00079cb0:	bge	0x079d40
000933:0x00079cb8:	icall	
000933:0x00079cc8:	moves	@s00, #return
000933:0x00079cd8:	cmps	@s00, value
000933:0x00079ce8:	bne	0x079d38
000935:0x00079cf0:	icall	
000935:0x00079d00:	movec	key, #return
000936:0x00079d10:	imove	#return, 0x000001
000936:0x00079d20:	movec	key, key
000936:0x00079d30:	rts
000936:0x00079d38:	jump	0x079c80
000939:0x00079d40:	imove	#return, 0x000000
000939:0x00079d50:	movec	key, key
000939:0x00079d60:	rts
000939:0x00079d68:	movec	key, key
000939:0x00079d78:	rts
map<Class,int>::GetKeyArray()
000885:0x0007a3e8:	new	keys, array<Class>
000886:0x0007a408:	imove	i, 0x000000
000886:0x0007a418:	jump	0x07a438
000886:0x0007a420:	move	@m00, i
000886:0x0007a430:	inc	i
000886:0x0007a438:	ncalli	map<Class,int>.Count()
000886:0x0007a440:	cmpi	i, #return
000886:0x0007a450:	bge	0x07a480
000888:0x0007a458:	icall	
000888:0x0007a468:	icall	
000888:0x0007a478:	jump	0x07a420
000890:0x0007a480:	movem	#return, keys
000890:0x0007a490:	release	keys
000890:0x0007a498:	rts
000890:0x0007a4a0:	release	keys
000890:0x0007a4a8:	rts
map<Class,int>::GetValueArray()
000895:0x0007a500:	new	elements, array<int>
000896:0x0007a520:	imove	i, 0x000000
000896:0x0007a530:	jump	0x07a550
000896:0x0007a538:	move	@m00, i
000896:0x0007a548:	inc	i
000896:0x0007a550:	ncalli	map<Class,int>.Count()
000896:0x0007a558:	cmpi	i, #return
000896:0x0007a568:	bge	0x07a598
000898:0x0007a570:	icall	
000898:0x0007a580:	icall	
000898:0x0007a590:	jump	0x07a538
000900:0x0007a598:	movem	#return, elements
000900:0x0007a5a8:	release	elements
000900:0x0007a5b0:	rts
000900:0x0007a5b8:	release	elements
000900:0x0007a5c0:	rts
map<Class,int>::ReplaceKey()
000905:0x0007a5c8:	icall	
000905:0x0007a5d8:	cmpi	#return, _i0
000905:0x0007a5e8:	beq	0x07a638
000907:0x0007a5f0:	icall	
000907:0x0007a600:	icall	
000908:0x0007a610:	icall	
000909:0x0007a620:	imove	#return, 0x000001
000909:0x0007a630:	rts
000911:0x0007a638:	imove	#return, 0x000000
000911:0x0007a648:	rts
000911:0x0007a650:	rts
map<Class,int>::GetKeyByValue()
000917:0x0007a6a8:	imove	i, 0x000000
000917:0x0007a6b8:	jump	0x07a6d8
000917:0x0007a6c0:	move	@m00, i
000917:0x0007a6d0:	inc	i
000917:0x0007a6d8:	ncalli	map<Class,int>.Count()
000917:0x0007a6e0:	cmpi	i, #return
000917:0x0007a6f0:	bge	0x07a760
000919:0x0007a6f8:	icall	
000919:0x0007a708:	move	@m00, #return
000919:0x0007a718:	cmpi	@m00, value
000919:0x0007a728:	bne	0x07a758
000921:0x0007a730:	icall	
000921:0x0007a740:	movec	ret, #return
000922:0x0007a750:	jump	0x07a760
000922:0x0007a758:	jump	0x07a6c0
000926:0x0007a760:	movec	#return, ret
000926:0x0007a770:	rts
000926:0x0007a778:	rts
map<Class,int>::GetKeyByValueChecked()
000931:0x0007a7a8:	imove	i, 0x000000
000931:0x0007a7b8:	jump	0x07a7d8
000931:0x0007a7c0:	move	@m00, i
000931:0x0007a7d0:	inc	i
000931:0x0007a7d8:	ncalli	map<Class,int>.Count()
000931:0x0007a7e0:	cmpi	i, #return
000931:0x0007a7f0:	bge	0x07a880
000933:0x0007a7f8:	icall	
000933:0x0007a808:	move	@m00, #return
000933:0x0007a818:	cmpi	@m00, value
000933:0x0007a828:	bne	0x07a878
000935:0x0007a830:	icall	
000935:0x0007a840:	movec	key, #return
000936:0x0007a850:	imove	#return, 0x000001
000936:0x0007a860:	movec	key, key
000936:0x0007a870:	rts
000936:0x0007a878:	jump	0x07a7c0
000939:0x0007a880:	imove	#return, 0x000000
000939:0x0007a890:	movec	key, key
000939:0x0007a8a0:	rts
000939:0x0007a8a8:	movec	key, key
000939:0x0007a8b8:	rts
map<Class,float>::GetKeyArray()
000885:0x0007af28:	new	keys, array<Class>
000886:0x0007af48:	imove	i, 0x000000
000886:0x0007af58:	jump	0x07af78
000886:0x0007af60:	move	@m00, i
000886:0x0007af70:	inc	i
000886:0x0007af78:	ncalli	map<Class,float>.Count()
000886:0x0007af80:	cmpi	i, #return
000886:0x0007af90:	bge	0x07afc0
000888:0x0007af98:	icall	
000888:0x0007afa8:	icall	
000888:0x0007afb8:	jump	0x07af60
000890:0x0007afc0:	movem	#return, keys
000890:0x0007afd0:	release	keys
000890:0x0007afd8:	rts
000890:0x0007afe0:	release	keys
000890:0x0007afe8:	rts
map<Class,float>::GetValueArray()
000895:0x0007b040:	new	elements, array<float>
000896:0x0007b060:	imove	i, 0x000000
000896:0x0007b070:	jump	0x07b090
000896:0x0007b078:	move	@m00, i
000896:0x0007b088:	inc	i
000896:0x0007b090:	ncalli	map<Class,float>.Count()
000896:0x0007b098:	cmpi	i, #return
000896:0x0007b0a8:	bge	0x07b0d8
000898:0x0007b0b0:	icall	
000898:0x0007b0c0:	icall	
000898:0x0007b0d0:	jump	0x07b078
000900:0x0007b0d8:	movem	#return, elements
000900:0x0007b0e8:	release	elements
000900:0x0007b0f0:	rts
000900:0x0007b0f8:	release	elements
000900:0x0007b100:	rts
map<Class,float>::ReplaceKey()
000905:0x0007b108:	icall	
000905:0x0007b118:	cmpi	#return, _i0
000905:0x0007b128:	beq	0x07b178
000907:0x0007b130:	icall	
000907:0x0007b140:	icall	
000908:0x0007b150:	icall	
000909:0x0007b160:	imove	#return, 0x000001
000909:0x0007b170:	rts
000911:0x0007b178:	imove	#return, 0x000000
000911:0x0007b188:	rts
000911:0x0007b190:	rts
map<Class,float>::GetKeyByValue()
000917:0x0007b1e8:	imove	i, 0x000000
000917:0x0007b1f8:	jump	0x07b218
000917:0x0007b200:	move	@m00, i
000917:0x0007b210:	inc	i
000917:0x0007b218:	ncalli	map<Class,float>.Count()
000917:0x0007b220:	cmpi	i, #return
000917:0x0007b230:	bge	0x07b2a0
000919:0x0007b238:	icall	
000919:0x0007b248:	move	@f00, #return
000919:0x0007b258:	cmpf	@f00, value
000919:0x0007b268:	bne	0x07b298
000921:0x0007b270:	icall	
000921:0x0007b280:	movec	ret, #return
000922:0x0007b290:	jump	0x07b2a0
000922:0x0007b298:	jump	0x07b200
000926:0x0007b2a0:	movec	#return, ret
000926:0x0007b2b0:	rts
000926:0x0007b2b8:	rts
map<Class,float>::GetKeyByValueChecked()
000931:0x0007b2e8:	imove	i, 0x000000
000931:0x0007b2f8:	jump	0x07b318
000931:0x0007b300:	move	@m00, i
000931:0x0007b310:	inc	i
000931:0x0007b318:	ncalli	map<Class,float>.Count()
000931:0x0007b320:	cmpi	i, #return
000931:0x0007b330:	bge	0x07b3c0
000933:0x0007b338:	icall	
000933:0x0007b348:	move	@f00, #return
000933:0x0007b358:	cmpf	@f00, value
000933:0x0007b368:	bne	0x07b3b8
000935:0x0007b370:	icall	
000935:0x0007b380:	movec	key, #return
000936:0x0007b390:	imove	#return, 0x000001
000936:0x0007b3a0:	movec	key, key
000936:0x0007b3b0:	rts
000936:0x0007b3b8:	jump	0x07b300
000939:0x0007b3c0:	imove	#return, 0x000000
000939:0x0007b3d0:	movec	key, key
000939:0x0007b3e0:	rts
000939:0x0007b3e8:	movec	key, key
000939:0x0007b3f8:	rts
map<string,vector>::GetKeyArray()
000885:0x0007bae8:	new	keys, array<string>
000886:0x0007bb08:	imove	i, 0x000000
000886:0x0007bb18:	jump	0x07bb38
000886:0x0007bb20:	move	@m00, i
000886:0x0007bb30:	inc	i
000886:0x0007bb38:	ncalli	map<string,vector>.Count()
000886:0x0007bb40:	cmpi	i, #return
000886:0x0007bb50:	bge	0x07bb80
000888:0x0007bb58:	icall	
000888:0x0007bb68:	icall	
000888:0x0007bb78:	jump	0x07bb20
000890:0x0007bb80:	movem	#return, keys
000890:0x0007bb90:	release	keys
000890:0x0007bb98:	rts
000890:0x0007bba0:	release	keys
000890:0x0007bba8:	rts
map<string,vector>::GetValueArray()
000895:0x0007bc00:	new	elements, array<vector>
000896:0x0007bc20:	imove	i, 0x000000
000896:0x0007bc30:	jump	0x07bc50
000896:0x0007bc38:	move	@m00, i
000896:0x0007bc48:	inc	i
000896:0x0007bc50:	ncalli	map<string,vector>.Count()
000896:0x0007bc58:	cmpi	i, #return
000896:0x0007bc68:	bge	0x07bc98
000898:0x0007bc70:	icall	
000898:0x0007bc80:	icall	
000898:0x0007bc90:	jump	0x07bc38
000900:0x0007bc98:	movem	#return, elements
000900:0x0007bca8:	release	elements
000900:0x0007bcb0:	rts
000900:0x0007bcb8:	release	elements
000900:0x0007bcc0:	rts
map<string,vector>::ReplaceKey()
000905:0x0007bcc8:	icall	
000905:0x0007bcd8:	cmpi	#return, _i0
000905:0x0007bce8:	beq	0x07bd38
000907:0x0007bcf0:	icall	
000907:0x0007bd00:	icall	
000908:0x0007bd10:	icall	
000909:0x0007bd20:	imove	#return, 0x000001
000909:0x0007bd30:	rts
000911:0x0007bd38:	imove	#return, 0x000000
000911:0x0007bd48:	rts
000911:0x0007bd50:	rts
map<string,vector>::GetKeyByValue()
000917:0x0007bda8:	imove	i, 0x000000
000917:0x0007bdb8:	jump	0x07bdd8
000917:0x0007bdc0:	move	@m00, i
000917:0x0007bdd0:	inc	i
000917:0x0007bdd8:	ncalli	map<string,vector>.Count()
000917:0x0007bde0:	cmpi	i, #return
000917:0x0007bdf0:	bge	0x07be60
000919:0x0007bdf8:	icall	
000919:0x0007be08:	movev	@v00, #return
000919:0x0007be18:	cmpv	@v00, value
000919:0x0007be28:	bne	0x07be58
000921:0x0007be30:	icall	
000921:0x0007be40:	moves	ret, #return
000922:0x0007be50:	jump	0x07be60
000922:0x0007be58:	jump	0x07bdc0
000926:0x0007be60:	moves	#return, ret
000926:0x0007be70:	rts
000926:0x0007be78:	rts
map<string,vector>::GetKeyByValueChecked()
000931:0x0007bea8:	imove	i, 0x000000
000931:0x0007beb8:	jump	0x07bed8
000931:0x0007bec0:	move	@m00, i
000931:0x0007bed0:	inc	i
000931:0x0007bed8:	ncalli	map<string,vector>.Count()
000931:0x0007bee0:	cmpi	i, #return
000931:0x0007bef0:	bge	0x07bf80
000933:0x0007bef8:	icall	
000933:0x0007bf08:	movev	@v00, #return
000933:0x0007bf18:	cmpv	@v00, value
000933:0x0007bf28:	bne	0x07bf78
000935:0x0007bf30:	icall	
000935:0x0007bf40:	moves	key, #return
000936:0x0007bf50:	imove	#return, 0x000001
000936:0x0007bf60:	moves	key, key
000936:0x0007bf70:	rts
000936:0x0007bf78:	jump	0x07bec0
000939:0x0007bf80:	imove	#return, 0x000000
000939:0x0007bf90:	moves	key, key
000939:0x0007bfa0:	rts
000939:0x0007bfa8:	moves	key, key
000939:0x0007bfb8:	rts
map<string,typename>::GetKeyArray()
000885:0x0007c628:	new	keys, array<string>
000886:0x0007c648:	imove	i, 0x000000
000886:0x0007c658:	jump	0x07c678
000886:0x0007c660:	move	@m00, i
000886:0x0007c670:	inc	i
000886:0x0007c678:	ncalli	map<string,typename>.Count()
000886:0x0007c680:	cmpi	i, #return
000886:0x0007c690:	bge	0x07c6c0
000888:0x0007c698:	icall	
000888:0x0007c6a8:	icall	
000888:0x0007c6b8:	jump	0x07c660
000890:0x0007c6c0:	movem	#return, keys
000890:0x0007c6d0:	release	keys
000890:0x0007c6d8:	rts
000890:0x0007c6e0:	release	keys
000890:0x0007c6e8:	rts
map<string,typename>::GetValueArray()
000895:0x0007c740:	new	elements, array<typename>
000896:0x0007c760:	imove	i, 0x000000
000896:0x0007c770:	jump	0x07c790
000896:0x0007c778:	move	@m00, i
000896:0x0007c788:	inc	i
000896:0x0007c790:	ncalli	map<string,typename>.Count()
000896:0x0007c798:	cmpi	i, #return
000896:0x0007c7a8:	bge	0x07c7d8
000898:0x0007c7b0:	icall	
000898:0x0007c7c0:	icall	
000898:0x0007c7d0:	jump	0x07c778
000900:0x0007c7d8:	movem	#return, elements
000900:0x0007c7e8:	release	elements
000900:0x0007c7f0:	rts
000900:0x0007c7f8:	release	elements
000900:0x0007c800:	rts
map<string,typename>::ReplaceKey()
000905:0x0007c808:	icall	
000905:0x0007c818:	cmpi	#return, _i0
000905:0x0007c828:	beq	0x07c878
000907:0x0007c830:	icall	
000907:0x0007c840:	icall	
000908:0x0007c850:	icall	
000909:0x0007c860:	imove	#return, 0x000001
000909:0x0007c870:	rts
000911:0x0007c878:	imove	#return, 0x000000
000911:0x0007c888:	rts
000911:0x0007c890:	rts
map<string,typename>::GetKeyByValue()
000917:0x0007c8e8:	imove	i, 0x000000
000917:0x0007c8f8:	jump	0x07c918
000917:0x0007c900:	move	@m00, i
000917:0x0007c910:	inc	i
000917:0x0007c918:	ncalli	map<string,typename>.Count()
000917:0x0007c920:	cmpi	i, #return
000917:0x0007c930:	bge	0x07c9a0
000919:0x0007c938:	icall	
000919:0x0007c948:	movea	@m00, #return
000919:0x0007c958:	cmpi	@m00, value
000919:0x0007c968:	bne	0x07c998
000921:0x0007c970:	icall	
000921:0x0007c980:	moves	ret, #return
000922:0x0007c990:	jump	0x07c9a0
000922:0x0007c998:	jump	0x07c900
000926:0x0007c9a0:	moves	#return, ret
000926:0x0007c9b0:	rts
000926:0x0007c9b8:	rts
map<string,typename>::GetKeyByValueChecked()
000931:0x0007c9e8:	imove	i, 0x000000
000931:0x0007c9f8:	jump	0x07ca18
000931:0x0007ca00:	move	@m00, i
000931:0x0007ca10:	inc	i
000931:0x0007ca18:	ncalli	map<string,typename>.Count()
000931:0x0007ca20:	cmpi	i, #return
000931:0x0007ca30:	bge	0x07cac0
000933:0x0007ca38:	icall	
000933:0x0007ca48:	movea	@m00, #return
000933:0x0007ca58:	cmpi	@m00, value
000933:0x0007ca68:	bne	0x07cab8
000935:0x0007ca70:	icall	
000935:0x0007ca80:	moves	key, #return
000936:0x0007ca90:	imove	#return, 0x000001
000936:0x0007caa0:	moves	key, key
000936:0x0007cab0:	rts
000936:0x0007cab8:	jump	0x07ca00
000939:0x0007cac0:	imove	#return, 0x000000
000939:0x0007cad0:	moves	key, key
000939:0x0007cae0:	rts
000939:0x0007cae8:	moves	key, key
000939:0x0007caf8:	rts
map<string,Managed>::GetKeyArray()
000885:0x0007d488:	new	keys, array<string>
000886:0x0007d4a8:	imove	i, 0x000000
000886:0x0007d4b8:	jump	0x07d4d8
000886:0x0007d4c0:	move	@m00, i
000886:0x0007d4d0:	inc	i
000886:0x0007d4d8:	ncalli	map<string,Managed>.Count()
000886:0x0007d4e0:	cmpi	i, #return
000886:0x0007d4f0:	bge	0x07d520
000888:0x0007d4f8:	icall	
000888:0x0007d508:	icall	
000888:0x0007d518:	jump	0x07d4c0
000890:0x0007d520:	movem	#return, keys
000890:0x0007d530:	release	keys
000890:0x0007d538:	rts
000890:0x0007d540:	release	keys
000890:0x0007d548:	rts
map<string,Managed>::GetValueArray()
000895:0x0007d5a0:	new	elements, array<Managed>
000896:0x0007d5c0:	imove	i, 0x000000
000896:0x0007d5d0:	jump	0x07d5f0
000896:0x0007d5d8:	move	@m00, i
000896:0x0007d5e8:	inc	i
000896:0x0007d5f0:	ncalli	map<string,Managed>.Count()
000896:0x0007d5f8:	cmpi	i, #return
000896:0x0007d608:	bge	0x07d638
000898:0x0007d610:	icall	
000898:0x0007d620:	icall	
000898:0x0007d630:	jump	0x07d5d8
000900:0x0007d638:	movem	#return, elements
000900:0x0007d648:	release	elements
000900:0x0007d650:	rts
000900:0x0007d658:	release	elements
000900:0x0007d660:	rts
map<string,Managed>::ReplaceKey()
000905:0x0007d668:	icall	
000905:0x0007d678:	cmpi	#return, _i0
000905:0x0007d688:	beq	0x07d6d8
000907:0x0007d690:	icall	
000907:0x0007d6a0:	icall	
000908:0x0007d6b0:	icall	
000909:0x0007d6c0:	imove	#return, 0x000001
000909:0x0007d6d0:	rts
000911:0x0007d6d8:	imove	#return, 0x000000
000911:0x0007d6e8:	rts
000911:0x0007d6f0:	rts
map<string,Managed>::GetKeyByValue()
000917:0x0007d748:	imove	i, 0x000000
000917:0x0007d758:	jump	0x07d778
000917:0x0007d760:	move	@m00, i
000917:0x0007d770:	inc	i
000917:0x0007d778:	ncalli	map<string,Managed>.Count()
000917:0x0007d780:	cmpi	i, #return
000917:0x0007d790:	bge	0x07d800
000919:0x0007d798:	icall	
000919:0x0007d7a8:	movec	@c00, #return
000919:0x0007d7b8:	cmpmc	@c00, value
000919:0x0007d7c8:	bne	0x07d7f8
000921:0x0007d7d0:	icall	
000921:0x0007d7e0:	moves	ret, #return
000922:0x0007d7f0:	jump	0x07d800
000922:0x0007d7f8:	jump	0x07d760
000926:0x0007d800:	moves	#return, ret
000926:0x0007d810:	rts
000926:0x0007d818:	rts
map<string,Managed>::GetKeyByValueChecked()
000931:0x0007d848:	imove	i, 0x000000
000931:0x0007d858:	jump	0x07d878
000931:0x0007d860:	move	@m00, i
000931:0x0007d870:	inc	i
000931:0x0007d878:	ncalli	map<string,Managed>.Count()
000931:0x0007d880:	cmpi	i, #return
000931:0x0007d890:	bge	0x07d920
000933:0x0007d898:	icall	
000933:0x0007d8a8:	movec	@c00, #return
000933:0x0007d8b8:	cmpmc	@c00, value
000933:0x0007d8c8:	bne	0x07d918
000935:0x0007d8d0:	icall	
000935:0x0007d8e0:	moves	key, #return
000936:0x0007d8f0:	imove	#return, 0x000001
000936:0x0007d900:	moves	key, key
000936:0x0007d910:	rts
000936:0x0007d918:	jump	0x07d860
000939:0x0007d920:	imove	#return, 0x000000
000939:0x0007d930:	moves	key, key
000939:0x0007d940:	rts
000939:0x0007d948:	moves	key, key
000939:0x0007d958:	rts
map<string,@Managed>::GetKeyArray()
000885:0x0007dca8:	new	keys, array<string>
000886:0x0007dcc8:	imove	i, 0x000000
000886:0x0007dcd8:	jump	0x07dcf8
000886:0x0007dce0:	move	@m00, i
000886:0x0007dcf0:	inc	i
000886:0x0007dcf8:	ncalli	map<string,@Managed>.Count()
000886:0x0007dd00:	cmpi	i, #return
000886:0x0007dd10:	bge	0x07dd40
000888:0x0007dd18:	icall	
000888:0x0007dd28:	icall	
000888:0x0007dd38:	jump	0x07dce0
000890:0x0007dd40:	movem	#return, keys
000890:0x0007dd50:	release	keys
000890:0x0007dd58:	rts
000890:0x0007dd60:	release	keys
000890:0x0007dd68:	rts
map<string,@Managed>::GetValueArray()
000895:0x0007ddc0:	new	elements, array<Managed>
000896:0x0007dde0:	imove	i, 0x000000
000896:0x0007ddf0:	jump	0x07de10
000896:0x0007ddf8:	move	@m00, i
000896:0x0007de08:	inc	i
000896:0x0007de10:	ncalli	map<string,@Managed>.Count()
000896:0x0007de18:	cmpi	i, #return
000896:0x0007de28:	bge	0x07de58
000898:0x0007de30:	icall	
000898:0x0007de40:	icall	
000898:0x0007de50:	jump	0x07ddf8
000900:0x0007de58:	movem	#return, elements
000900:0x0007de68:	release	elements
000900:0x0007de70:	rts
000900:0x0007de78:	release	elements
000900:0x0007de80:	rts
map<string,@Managed>::ReplaceKey()
000905:0x0007de88:	icall	
000905:0x0007de98:	cmpi	#return, _i0
000905:0x0007dea8:	beq	0x07def8
000907:0x0007deb0:	icall	
000907:0x0007dec0:	icall	
000908:0x0007ded0:	icall	
000909:0x0007dee0:	imove	#return, 0x000001
000909:0x0007def0:	rts
000911:0x0007def8:	imove	#return, 0x000000
000911:0x0007df08:	rts
000911:0x0007df10:	rts
map<string,@Managed>::GetKeyByValue()
000917:0x0007df68:	imove	i, 0x000000
000917:0x0007df78:	jump	0x07df98
000917:0x0007df80:	move	@m00, i
000917:0x0007df90:	inc	i
000917:0x0007df98:	ncalli	map<string,@Managed>.Count()
000917:0x0007dfa0:	cmpi	i, #return
000917:0x0007dfb0:	bge	0x07e020
000919:0x0007dfb8:	icall	
000919:0x0007dfc8:	movec	@c00, #return
000919:0x0007dfd8:	cmpmc	@c00, value
000919:0x0007dfe8:	bne	0x07e018
000921:0x0007dff0:	icall	
000921:0x0007e000:	moves	ret, #return
000922:0x0007e010:	jump	0x07e020
000922:0x0007e018:	jump	0x07df80
000926:0x0007e020:	moves	#return, ret
000926:0x0007e030:	rts
000926:0x0007e038:	rts
map<string,@Managed>::GetKeyByValueChecked()
000931:0x0007e068:	imove	i, 0x000000
000931:0x0007e078:	jump	0x07e098
000931:0x0007e080:	move	@m00, i
000931:0x0007e090:	inc	i
000931:0x0007e098:	ncalli	map<string,@Managed>.Count()
000931:0x0007e0a0:	cmpi	i, #return
000931:0x0007e0b0:	bge	0x07e140
000933:0x0007e0b8:	icall	
000933:0x0007e0c8:	movec	@c00, #return
000933:0x0007e0d8:	cmpmc	@c00, value
000933:0x0007e0e8:	bne	0x07e138
000935:0x0007e0f0:	icall	
000935:0x0007e100:	moves	key, #return
000936:0x0007e110:	imove	#return, 0x000001
000936:0x0007e120:	moves	key, key
000936:0x0007e130:	rts
000936:0x0007e138:	jump	0x07e080
000939:0x0007e140:	imove	#return, 0x000000
000939:0x0007e150:	moves	key, key
000939:0x0007e160:	rts
000939:0x0007e168:	moves	key, key
000939:0x0007e178:	rts
map<string,Class>::GetKeyArray()
000885:0x0007e7e8:	new	keys, array<string>
000886:0x0007e808:	imove	i, 0x000000
000886:0x0007e818:	jump	0x07e838
000886:0x0007e820:	move	@m00, i
000886:0x0007e830:	inc	i
000886:0x0007e838:	ncalli	map<string,Class>.Count()
000886:0x0007e840:	cmpi	i, #return
000886:0x0007e850:	bge	0x07e880
000888:0x0007e858:	icall	
000888:0x0007e868:	icall	
000888:0x0007e878:	jump	0x07e820
000890:0x0007e880:	movem	#return, keys
000890:0x0007e890:	release	keys
000890:0x0007e898:	rts
000890:0x0007e8a0:	release	keys
000890:0x0007e8a8:	rts
map<string,Class>::GetValueArray()
000895:0x0007e900:	new	elements, array<Class>
000896:0x0007e920:	imove	i, 0x000000
000896:0x0007e930:	jump	0x07e950
000896:0x0007e938:	move	@m00, i
000896:0x0007e948:	inc	i
000896:0x0007e950:	ncalli	map<string,Class>.Count()
000896:0x0007e958:	cmpi	i, #return
000896:0x0007e968:	bge	0x07e998
000898:0x0007e970:	icall	
000898:0x0007e980:	icall	
000898:0x0007e990:	jump	0x07e938
000900:0x0007e998:	movem	#return, elements
000900:0x0007e9a8:	release	elements
000900:0x0007e9b0:	rts
000900:0x0007e9b8:	release	elements
000900:0x0007e9c0:	rts
map<string,Class>::ReplaceKey()
000905:0x0007e9c8:	icall	
000905:0x0007e9d8:	cmpi	#return, _i0
000905:0x0007e9e8:	beq	0x07ea38
000907:0x0007e9f0:	icall	
000907:0x0007ea00:	icall	
000908:0x0007ea10:	icall	
000909:0x0007ea20:	imove	#return, 0x000001
000909:0x0007ea30:	rts
000911:0x0007ea38:	imove	#return, 0x000000
000911:0x0007ea48:	rts
000911:0x0007ea50:	rts
map<string,Class>::GetKeyByValue()
000917:0x0007eaa8:	imove	i, 0x000000
000917:0x0007eab8:	jump	0x07ead8
000917:0x0007eac0:	move	@m00, i
000917:0x0007ead0:	inc	i
000917:0x0007ead8:	ncalli	map<string,Class>.Count()
000917:0x0007eae0:	cmpi	i, #return
000917:0x0007eaf0:	bge	0x07eb60
000919:0x0007eaf8:	icall	
000919:0x0007eb08:	movec	@c00, #return
000919:0x0007eb18:	cmpc	@c00, value
000919:0x0007eb28:	bne	0x07eb58
000921:0x0007eb30:	icall	
000921:0x0007eb40:	moves	ret, #return
000922:0x0007eb50:	jump	0x07eb60
000922:0x0007eb58:	jump	0x07eac0
000926:0x0007eb60:	moves	#return, ret
000926:0x0007eb70:	rts
000926:0x0007eb78:	rts
map<string,Class>::GetKeyByValueChecked()
000931:0x0007eba8:	imove	i, 0x000000
000931:0x0007ebb8:	jump	0x07ebd8
000931:0x0007ebc0:	move	@m00, i
000931:0x0007ebd0:	inc	i
000931:0x0007ebd8:	ncalli	map<string,Class>.Count()
000931:0x0007ebe0:	cmpi	i, #return
000931:0x0007ebf0:	bge	0x07ec80
000933:0x0007ebf8:	icall	
000933:0x0007ec08:	movec	@c00, #return
000933:0x0007ec18:	cmpc	@c00, value
000933:0x0007ec28:	bne	0x07ec78
000935:0x0007ec30:	icall	
000935:0x0007ec40:	moves	key, #return
000936:0x0007ec50:	imove	#return, 0x000001
000936:0x0007ec60:	moves	key, key
000936:0x0007ec70:	rts
000936:0x0007ec78:	jump	0x07ebc0
000939:0x0007ec80:	imove	#return, 0x000000
000939:0x0007ec90:	moves	key, key
000939:0x0007eca0:	rts
000939:0x0007eca8:	moves	key, key
000939:0x0007ecb8:	rts
map<string,string>::GetKeyArray()
000885:0x0007f328:	new	keys, array<string>
000886:0x0007f348:	imove	i, 0x000000
000886:0x0007f358:	jump	0x07f378
000886:0x0007f360:	move	@m00, i
000886:0x0007f370:	inc	i
000886:0x0007f378:	ncalli	map<string,string>.Count()
000886:0x0007f380:	cmpi	i, #return
000886:0x0007f390:	bge	0x07f3c0
000888:0x0007f398:	icall	
000888:0x0007f3a8:	icall	
000888:0x0007f3b8:	jump	0x07f360
000890:0x0007f3c0:	movem	#return, keys
000890:0x0007f3d0:	release	keys
000890:0x0007f3d8:	rts
000890:0x0007f3e0:	release	keys
000890:0x0007f3e8:	rts
map<string,string>::GetValueArray()
000895:0x0007f440:	new	elements, array<string>
000896:0x0007f460:	imove	i, 0x000000
000896:0x0007f470:	jump	0x07f490
000896:0x0007f478:	move	@m00, i
000896:0x0007f488:	inc	i
000896:0x0007f490:	ncalli	map<string,string>.Count()
000896:0x0007f498:	cmpi	i, #return
000896:0x0007f4a8:	bge	0x07f4d8
000898:0x0007f4b0:	icall	
000898:0x0007f4c0:	icall	
000898:0x0007f4d0:	jump	0x07f478
000900:0x0007f4d8:	movem	#return, elements
000900:0x0007f4e8:	release	elements
000900:0x0007f4f0:	rts
000900:0x0007f4f8:	release	elements
000900:0x0007f500:	rts
map<string,string>::ReplaceKey()
000905:0x0007f508:	icall	
000905:0x0007f518:	cmpi	#return, _i0
000905:0x0007f528:	beq	0x07f578
000907:0x0007f530:	icall	
000907:0x0007f540:	icall	
000908:0x0007f550:	icall	
000909:0x0007f560:	imove	#return, 0x000001
000909:0x0007f570:	rts
000911:0x0007f578:	imove	#return, 0x000000
000911:0x0007f588:	rts
000911:0x0007f590:	rts
map<string,string>::GetKeyByValue()
000917:0x0007f5e8:	imove	i, 0x000000
000917:0x0007f5f8:	jump	0x07f618
000917:0x0007f600:	move	@m00, i
000917:0x0007f610:	inc	i
000917:0x0007f618:	ncalli	map<string,string>.Count()
000917:0x0007f620:	cmpi	i, #return
000917:0x0007f630:	bge	0x07f6a0
000919:0x0007f638:	icall	
000919:0x0007f648:	moves	@s00, #return
000919:0x0007f658:	cmps	@s00, value
000919:0x0007f668:	bne	0x07f698
000921:0x0007f670:	icall	
000921:0x0007f680:	moves	ret, #return
000922:0x0007f690:	jump	0x07f6a0
000922:0x0007f698:	jump	0x07f600
000926:0x0007f6a0:	moves	#return, ret
000926:0x0007f6b0:	rts
000926:0x0007f6b8:	rts
map<string,string>::GetKeyByValueChecked()
000931:0x0007f6e8:	imove	i, 0x000000
000931:0x0007f6f8:	jump	0x07f718
000931:0x0007f700:	move	@m00, i
000931:0x0007f710:	inc	i
000931:0x0007f718:	ncalli	map<string,string>.Count()
000931:0x0007f720:	cmpi	i, #return
000931:0x0007f730:	bge	0x07f7c0
000933:0x0007f738:	icall	
000933:0x0007f748:	moves	@s00, #return
000933:0x0007f758:	cmps	@s00, value
000933:0x0007f768:	bne	0x07f7b8
000935:0x0007f770:	icall	
000935:0x0007f780:	moves	key, #return
000936:0x0007f790:	imove	#return, 0x000001
000936:0x0007f7a0:	moves	key, key
000936:0x0007f7b0:	rts
000936:0x0007f7b8:	jump	0x07f700
000939:0x0007f7c0:	imove	#return, 0x000000
000939:0x0007f7d0:	moves	key, key
000939:0x0007f7e0:	rts
000939:0x0007f7e8:	moves	key, key
000939:0x0007f7f8:	rts
map<string,int>::GetKeyArray()
000885:0x0007fe68:	new	keys, array<string>
000886:0x0007fe88:	imove	i, 0x000000
000886:0x0007fe98:	jump	0x07feb8
000886:0x0007fea0:	move	@m00, i
000886:0x0007feb0:	inc	i
000886:0x0007feb8:	ncalli	map<string,int>.Count()
000886:0x0007fec0:	cmpi	i, #return
000886:0x0007fed0:	bge	0x07ff00
000888:0x0007fed8:	icall	
000888:0x0007fee8:	icall	
000888:0x0007fef8:	jump	0x07fea0
000890:0x0007ff00:	movem	#return, keys
000890:0x0007ff10:	release	keys
000890:0x0007ff18:	rts
000890:0x0007ff20:	release	keys
000890:0x0007ff28:	rts
map<string,int>::GetValueArray()
000895:0x0007ff80:	new	elements, array<int>
000896:0x0007ffa0:	imove	i, 0x000000
000896:0x0007ffb0:	jump	0x07ffd0
000896:0x0007ffb8:	move	@m00, i
000896:0x0007ffc8:	inc	i
000896:0x0007ffd0:	ncalli	map<string,int>.Count()
000896:0x0007ffd8:	cmpi	i, #return
000896:0x0007ffe8:	bge	0x080018
000898:0x0007fff0:	icall	
000898:0x00080000:	icall	
000898:0x00080010:	jump	0x07ffb8
000900:0x00080018:	movem	#return, elements
000900:0x00080028:	release	elements
000900:0x00080030:	rts
000900:0x00080038:	release	elements
000900:0x00080040:	rts
map<string,int>::ReplaceKey()
000905:0x00080048:	icall	
000905:0x00080058:	cmpi	#return, _i0
000905:0x00080068:	beq	0x0800b8
000907:0x00080070:	icall	
000907:0x00080080:	icall	
000908:0x00080090:	icall	
000909:0x000800a0:	imove	#return, 0x000001
000909:0x000800b0:	rts
000911:0x000800b8:	imove	#return, 0x000000
000911:0x000800c8:	rts
000911:0x000800d0:	rts
map<string,int>::GetKeyByValue()
000917:0x00080128:	imove	i, 0x000000
000917:0x00080138:	jump	0x080158
000917:0x00080140:	move	@m00, i
000917:0x00080150:	inc	i
000917:0x00080158:	ncalli	map<string,int>.Count()
000917:0x00080160:	cmpi	i, #return
000917:0x00080170:	bge	0x0801e0
000919:0x00080178:	icall	
000919:0x00080188:	move	@m00, #return
000919:0x00080198:	cmpi	@m00, value
000919:0x000801a8:	bne	0x0801d8
000921:0x000801b0:	icall	
000921:0x000801c0:	moves	ret, #return
000922:0x000801d0:	jump	0x0801e0
000922:0x000801d8:	jump	0x080140
000926:0x000801e0:	moves	#return, ret
000926:0x000801f0:	rts
000926:0x000801f8:	rts
map<string,int>::GetKeyByValueChecked()
000931:0x00080228:	imove	i, 0x000000
000931:0x00080238:	jump	0x080258
000931:0x00080240:	move	@m00, i
000931:0x00080250:	inc	i
000931:0x00080258:	ncalli	map<string,int>.Count()
000931:0x00080260:	cmpi	i, #return
000931:0x00080270:	bge	0x080300
000933:0x00080278:	icall	
000933:0x00080288:	move	@m00, #return
000933:0x00080298:	cmpi	@m00, value
000933:0x000802a8:	bne	0x0802f8
000935:0x000802b0:	icall	
000935:0x000802c0:	moves	key, #return
000936:0x000802d0:	imove	#return, 0x000001
000936:0x000802e0:	moves	key, key
000936:0x000802f0:	rts
000936:0x000802f8:	jump	0x080240
000939:0x00080300:	imove	#return, 0x000000
000939:0x00080310:	moves	key, key
000939:0x00080320:	rts
000939:0x00080328:	moves	key, key
000939:0x00080338:	rts
map<string,float>::GetKeyArray()
000885:0x000809a8:	new	keys, array<string>
000886:0x000809c8:	imove	i, 0x000000
000886:0x000809d8:	jump	0x0809f8
000886:0x000809e0:	move	@m00, i
000886:0x000809f0:	inc	i
000886:0x000809f8:	ncalli	map<string,float>.Count()
000886:0x00080a00:	cmpi	i, #return
000886:0x00080a10:	bge	0x080a40
000888:0x00080a18:	icall	
000888:0x00080a28:	icall	
000888:0x00080a38:	jump	0x0809e0
000890:0x00080a40:	movem	#return, keys
000890:0x00080a50:	release	keys
000890:0x00080a58:	rts
000890:0x00080a60:	release	keys
000890:0x00080a68:	rts
map<string,float>::GetValueArray()
000895:0x00080ac0:	new	elements, array<float>
000896:0x00080ae0:	imove	i, 0x000000
000896:0x00080af0:	jump	0x080b10
000896:0x00080af8:	move	@m00, i
000896:0x00080b08:	inc	i
000896:0x00080b10:	ncalli	map<string,float>.Count()
000896:0x00080b18:	cmpi	i, #return
000896:0x00080b28:	bge	0x080b58
000898:0x00080b30:	icall	
000898:0x00080b40:	icall	
000898:0x00080b50:	jump	0x080af8
000900:0x00080b58:	movem	#return, elements
000900:0x00080b68:	release	elements
000900:0x00080b70:	rts
000900:0x00080b78:	release	elements
000900:0x00080b80:	rts
map<string,float>::ReplaceKey()
000905:0x00080b88:	icall	
000905:0x00080b98:	cmpi	#return, _i0
000905:0x00080ba8:	beq	0x080bf8
000907:0x00080bb0:	icall	
000907:0x00080bc0:	icall	
000908:0x00080bd0:	icall	
000909:0x00080be0:	imove	#return, 0x000001
000909:0x00080bf0:	rts
000911:0x00080bf8:	imove	#return, 0x000000
000911:0x00080c08:	rts
000911:0x00080c10:	rts
map<string,float>::GetKeyByValue()
000917:0x00080c68:	imove	i, 0x000000
000917:0x00080c78:	jump	0x080c98
000917:0x00080c80:	move	@m00, i
000917:0x00080c90:	inc	i
000917:0x00080c98:	ncalli	map<string,float>.Count()
000917:0x00080ca0:	cmpi	i, #return
000917:0x00080cb0:	bge	0x080d20
000919:0x00080cb8:	icall	
000919:0x00080cc8:	move	@f00, #return
000919:0x00080cd8:	cmpf	@f00, value
000919:0x00080ce8:	bne	0x080d18
000921:0x00080cf0:	icall	
000921:0x00080d00:	moves	ret, #return
000922:0x00080d10:	jump	0x080d20
000922:0x00080d18:	jump	0x080c80
000926:0x00080d20:	moves	#return, ret
000926:0x00080d30:	rts
000926:0x00080d38:	rts
map<string,float>::GetKeyByValueChecked()
000931:0x00080d68:	imove	i, 0x000000
000931:0x00080d78:	jump	0x080d98
000931:0x00080d80:	move	@m00, i
000931:0x00080d90:	inc	i
000931:0x00080d98:	ncalli	map<string,float>.Count()
000931:0x00080da0:	cmpi	i, #return
000931:0x00080db0:	bge	0x080e40
000933:0x00080db8:	icall	
000933:0x00080dc8:	move	@f00, #return
000933:0x00080dd8:	cmpf	@f00, value
000933:0x00080de8:	bne	0x080e38
000935:0x00080df0:	icall	
000935:0x00080e00:	moves	key, #return
000936:0x00080e10:	imove	#return, 0x000001
000936:0x00080e20:	moves	key, key
000936:0x00080e30:	rts
000936:0x00080e38:	jump	0x080d80
000939:0x00080e40:	imove	#return, 0x000000
000939:0x00080e50:	moves	key, key
000939:0x00080e60:	rts
000939:0x00080e68:	moves	key, key
000939:0x00080e78:	rts
map<int,vector>::GetKeyArray()
000885:0x00081568:	new	keys, array<int>
000886:0x00081588:	imove	i, 0x000000
000886:0x00081598:	jump	0x0815b8
000886:0x000815a0:	move	@m00, i
000886:0x000815b0:	inc	i
000886:0x000815b8:	ncalli	map<int,vector>.Count()
000886:0x000815c0:	cmpi	i, #return
000886:0x000815d0:	bge	0x081600
000888:0x000815d8:	icall	
000888:0x000815e8:	icall	
000888:0x000815f8:	jump	0x0815a0
000890:0x00081600:	movem	#return, keys
000890:0x00081610:	release	keys
000890:0x00081618:	rts
000890:0x00081620:	release	keys
000890:0x00081628:	rts
map<int,vector>::GetValueArray()
000895:0x00081680:	new	elements, array<vector>
000896:0x000816a0:	imove	i, 0x000000
000896:0x000816b0:	jump	0x0816d0
000896:0x000816b8:	move	@m00, i
000896:0x000816c8:	inc	i
000896:0x000816d0:	ncalli	map<int,vector>.Count()
000896:0x000816d8:	cmpi	i, #return
000896:0x000816e8:	bge	0x081718
000898:0x000816f0:	icall	
000898:0x00081700:	icall	
000898:0x00081710:	jump	0x0816b8
000900:0x00081718:	movem	#return, elements
000900:0x00081728:	release	elements
000900:0x00081730:	rts
000900:0x00081738:	release	elements
000900:0x00081740:	rts
map<int,vector>::ReplaceKey()
000905:0x00081748:	icall	
000905:0x00081758:	cmpi	#return, _i0
000905:0x00081768:	beq	0x0817b8
000907:0x00081770:	icall	
000907:0x00081780:	icall	
000908:0x00081790:	icall	
000909:0x000817a0:	imove	#return, 0x000001
000909:0x000817b0:	rts
000911:0x000817b8:	imove	#return, 0x000000
000911:0x000817c8:	rts
000911:0x000817d0:	rts
map<int,vector>::GetKeyByValue()
000917:0x00081828:	imove	i, 0x000000
000917:0x00081838:	jump	0x081858
000917:0x00081840:	move	@m00, i
000917:0x00081850:	inc	i
000917:0x00081858:	ncalli	map<int,vector>.Count()
000917:0x00081860:	cmpi	i, #return
000917:0x00081870:	bge	0x0818e0
000919:0x00081878:	icall	
000919:0x00081888:	movev	@v00, #return
000919:0x00081898:	cmpv	@v00, value
000919:0x000818a8:	bne	0x0818d8
000921:0x000818b0:	icall	
000921:0x000818c0:	move	ret, #return
000922:0x000818d0:	jump	0x0818e0
000922:0x000818d8:	jump	0x081840
000926:0x000818e0:	move	#return, ret
000926:0x000818f0:	rts
000926:0x000818f8:	rts
map<int,vector>::GetKeyByValueChecked()
000931:0x00081928:	imove	i, 0x000000
000931:0x00081938:	jump	0x081958
000931:0x00081940:	move	@m00, i
000931:0x00081950:	inc	i
000931:0x00081958:	ncalli	map<int,vector>.Count()
000931:0x00081960:	cmpi	i, #return
000931:0x00081970:	bge	0x081a00
000933:0x00081978:	icall	
000933:0x00081988:	movev	@v00, #return
000933:0x00081998:	cmpv	@v00, value
000933:0x000819a8:	bne	0x0819f8
000935:0x000819b0:	icall	
000935:0x000819c0:	move	key, #return
000936:0x000819d0:	imove	#return, 0x000001
000936:0x000819e0:	move	key, key
000936:0x000819f0:	rts
000936:0x000819f8:	jump	0x081940
000939:0x00081a00:	imove	#return, 0x000000
000939:0x00081a10:	move	key, key
000939:0x00081a20:	rts
000939:0x00081a28:	move	key, key
000939:0x00081a38:	rts
map<int,typename>::GetKeyArray()
000885:0x000820a8:	new	keys, array<int>
000886:0x000820c8:	imove	i, 0x000000
000886:0x000820d8:	jump	0x0820f8
000886:0x000820e0:	move	@m00, i
000886:0x000820f0:	inc	i
000886:0x000820f8:	ncalli	map<int,typename>.Count()
000886:0x00082100:	cmpi	i, #return
000886:0x00082110:	bge	0x082140
000888:0x00082118:	icall	
000888:0x00082128:	icall	
000888:0x00082138:	jump	0x0820e0
000890:0x00082140:	movem	#return, keys
000890:0x00082150:	release	keys
000890:0x00082158:	rts
000890:0x00082160:	release	keys
000890:0x00082168:	rts
map<int,typename>::GetValueArray()
000895:0x000821c0:	new	elements, array<typename>
000896:0x000821e0:	imove	i, 0x000000
000896:0x000821f0:	jump	0x082210
000896:0x000821f8:	move	@m00, i
000896:0x00082208:	inc	i
000896:0x00082210:	ncalli	map<int,typename>.Count()
000896:0x00082218:	cmpi	i, #return
000896:0x00082228:	bge	0x082258
000898:0x00082230:	icall	
000898:0x00082240:	icall	
000898:0x00082250:	jump	0x0821f8
000900:0x00082258:	movem	#return, elements
000900:0x00082268:	release	elements
000900:0x00082270:	rts
000900:0x00082278:	release	elements
000900:0x00082280:	rts
map<int,typename>::ReplaceKey()
000905:0x00082288:	icall	
000905:0x00082298:	cmpi	#return, _i0
000905:0x000822a8:	beq	0x0822f8
000907:0x000822b0:	icall	
000907:0x000822c0:	icall	
000908:0x000822d0:	icall	
000909:0x000822e0:	imove	#return, 0x000001
000909:0x000822f0:	rts
000911:0x000822f8:	imove	#return, 0x000000
000911:0x00082308:	rts
000911:0x00082310:	rts
map<int,typename>::GetKeyByValue()
000917:0x00082368:	imove	i, 0x000000
000917:0x00082378:	jump	0x082398
000917:0x00082380:	move	@m00, i
000917:0x00082390:	inc	i
000917:0x00082398:	ncalli	map<int,typename>.Count()
000917:0x000823a0:	cmpi	i, #return
000917:0x000823b0:	bge	0x082420
000919:0x000823b8:	icall	
000919:0x000823c8:	movea	@m00, #return
000919:0x000823d8:	cmpi	@m00, value
000919:0x000823e8:	bne	0x082418
000921:0x000823f0:	icall	
000921:0x00082400:	move	ret, #return
000922:0x00082410:	jump	0x082420
000922:0x00082418:	jump	0x082380
000926:0x00082420:	move	#return, ret
000926:0x00082430:	rts
000926:0x00082438:	rts
map<int,typename>::GetKeyByValueChecked()
000931:0x00082468:	imove	i, 0x000000
000931:0x00082478:	jump	0x082498
000931:0x00082480:	move	@m00, i
000931:0x00082490:	inc	i
000931:0x00082498:	ncalli	map<int,typename>.Count()
000931:0x000824a0:	cmpi	i, #return
000931:0x000824b0:	bge	0x082540
000933:0x000824b8:	icall	
000933:0x000824c8:	movea	@m00, #return
000933:0x000824d8:	cmpi	@m00, value
000933:0x000824e8:	bne	0x082538
000935:0x000824f0:	icall	
000935:0x00082500:	move	key, #return
000936:0x00082510:	imove	#return, 0x000001
000936:0x00082520:	move	key, key
000936:0x00082530:	rts
000936:0x00082538:	jump	0x082480
000939:0x00082540:	imove	#return, 0x000000
000939:0x00082550:	move	key, key
000939:0x00082560:	rts
000939:0x00082568:	move	key, key
000939:0x00082578:	rts
map<int,Managed>::GetKeyArray()
000885:0x00082f08:	new	keys, array<int>
000886:0x00082f28:	imove	i, 0x000000
000886:0x00082f38:	jump	0x082f58
000886:0x00082f40:	move	@m00, i
000886:0x00082f50:	inc	i
000886:0x00082f58:	ncalli	map<int,Managed>.Count()
000886:0x00082f60:	cmpi	i, #return
000886:0x00082f70:	bge	0x082fa0
000888:0x00082f78:	icall	
000888:0x00082f88:	icall	
000888:0x00082f98:	jump	0x082f40
000890:0x00082fa0:	movem	#return, keys
000890:0x00082fb0:	release	keys
000890:0x00082fb8:	rts
000890:0x00082fc0:	release	keys
000890:0x00082fc8:	rts
map<int,Managed>::GetValueArray()
000895:0x00083020:	new	elements, array<Managed>
000896:0x00083040:	imove	i, 0x000000
000896:0x00083050:	jump	0x083070
000896:0x00083058:	move	@m00, i
000896:0x00083068:	inc	i
000896:0x00083070:	ncalli	map<int,Managed>.Count()
000896:0x00083078:	cmpi	i, #return
000896:0x00083088:	bge	0x0830b8
000898:0x00083090:	icall	
000898:0x000830a0:	icall	
000898:0x000830b0:	jump	0x083058
000900:0x000830b8:	movem	#return, elements
000900:0x000830c8:	release	elements
000900:0x000830d0:	rts
000900:0x000830d8:	release	elements
000900:0x000830e0:	rts
map<int,Managed>::ReplaceKey()
000905:0x000830e8:	icall	
000905:0x000830f8:	cmpi	#return, _i0
000905:0x00083108:	beq	0x083158
000907:0x00083110:	icall	
000907:0x00083120:	icall	
000908:0x00083130:	icall	
000909:0x00083140:	imove	#return, 0x000001
000909:0x00083150:	rts
000911:0x00083158:	imove	#return, 0x000000
000911:0x00083168:	rts
000911:0x00083170:	rts
map<int,Managed>::GetKeyByValue()
000917:0x000831c8:	imove	i, 0x000000
000917:0x000831d8:	jump	0x0831f8
000917:0x000831e0:	move	@m00, i
000917:0x000831f0:	inc	i
000917:0x000831f8:	ncalli	map<int,Managed>.Count()
000917:0x00083200:	cmpi	i, #return
000917:0x00083210:	bge	0x083280
000919:0x00083218:	icall	
000919:0x00083228:	movec	@c00, #return
000919:0x00083238:	cmpmc	@c00, value
000919:0x00083248:	bne	0x083278
000921:0x00083250:	icall	
000921:0x00083260:	move	ret, #return
000922:0x00083270:	jump	0x083280
000922:0x00083278:	jump	0x0831e0
000926:0x00083280:	move	#return, ret
000926:0x00083290:	rts
000926:0x00083298:	rts
map<int,Managed>::GetKeyByValueChecked()
000931:0x000832c8:	imove	i, 0x000000
000931:0x000832d8:	jump	0x0832f8
000931:0x000832e0:	move	@m00, i
000931:0x000832f0:	inc	i
000931:0x000832f8:	ncalli	map<int,Managed>.Count()
000931:0x00083300:	cmpi	i, #return
000931:0x00083310:	bge	0x0833a0
000933:0x00083318:	icall	
000933:0x00083328:	movec	@c00, #return
000933:0x00083338:	cmpmc	@c00, value
000933:0x00083348:	bne	0x083398
000935:0x00083350:	icall	
000935:0x00083360:	move	key, #return
000936:0x00083370:	imove	#return, 0x000001
000936:0x00083380:	move	key, key
000936:0x00083390:	rts
000936:0x00083398:	jump	0x0832e0
000939:0x000833a0:	imove	#return, 0x000000
000939:0x000833b0:	move	key, key
000939:0x000833c0:	rts
000939:0x000833c8:	move	key, key
000939:0x000833d8:	rts
map<int,@Managed>::GetKeyArray()
000885:0x00083728:	new	keys, array<int>
000886:0x00083748:	imove	i, 0x000000
000886:0x00083758:	jump	0x083778
000886:0x00083760:	move	@m00, i
000886:0x00083770:	inc	i
000886:0x00083778:	ncalli	map<int,@Managed>.Count()
000886:0x00083780:	cmpi	i, #return
000886:0x00083790:	bge	0x0837c0
000888:0x00083798:	icall	
000888:0x000837a8:	icall	
000888:0x000837b8:	jump	0x083760
000890:0x000837c0:	movem	#return, keys
000890:0x000837d0:	release	keys
000890:0x000837d8:	rts
000890:0x000837e0:	release	keys
000890:0x000837e8:	rts
map<int,@Managed>::GetValueArray()
000895:0x00083840:	new	elements, array<Managed>
000896:0x00083860:	imove	i, 0x000000
000896:0x00083870:	jump	0x083890
000896:0x00083878:	move	@m00, i
000896:0x00083888:	inc	i
000896:0x00083890:	ncalli	map<int,@Managed>.Count()
000896:0x00083898:	cmpi	i, #return
000896:0x000838a8:	bge	0x0838d8
000898:0x000838b0:	icall	
000898:0x000838c0:	icall	
000898:0x000838d0:	jump	0x083878
000900:0x000838d8:	movem	#return, elements
000900:0x000838e8:	release	elements
000900:0x000838f0:	rts
000900:0x000838f8:	release	elements
000900:0x00083900:	rts
map<int,@Managed>::ReplaceKey()
000905:0x00083908:	icall	
000905:0x00083918:	cmpi	#return, _i0
000905:0x00083928:	beq	0x083978
000907:0x00083930:	icall	
000907:0x00083940:	icall	
000908:0x00083950:	icall	
000909:0x00083960:	imove	#return, 0x000001
000909:0x00083970:	rts
000911:0x00083978:	imove	#return, 0x000000
000911:0x00083988:	rts
000911:0x00083990:	rts
map<int,@Managed>::GetKeyByValue()
000917:0x000839e8:	imove	i, 0x000000
000917:0x000839f8:	jump	0x083a18
000917:0x00083a00:	move	@m00, i
000917:0x00083a10:	inc	i
000917:0x00083a18:	ncalli	map<int,@Managed>.Count()
000917:0x00083a20:	cmpi	i, #return
000917:0x00083a30:	bge	0x083aa0
000919:0x00083a38:	icall	
000919:0x00083a48:	movec	@c00, #return
000919:0x00083a58:	cmpmc	@c00, value
000919:0x00083a68:	bne	0x083a98
000921:0x00083a70:	icall	
000921:0x00083a80:	move	ret, #return
000922:0x00083a90:	jump	0x083aa0
000922:0x00083a98:	jump	0x083a00
000926:0x00083aa0:	move	#return, ret
000926:0x00083ab0:	rts
000926:0x00083ab8:	rts
map<int,@Managed>::GetKeyByValueChecked()
000931:0x00083ae8:	imove	i, 0x000000
000931:0x00083af8:	jump	0x083b18
000931:0x00083b00:	move	@m00, i
000931:0x00083b10:	inc	i
000931:0x00083b18:	ncalli	map<int,@Managed>.Count()
000931:0x00083b20:	cmpi	i, #return
000931:0x00083b30:	bge	0x083bc0
000933:0x00083b38:	icall	
000933:0x00083b48:	movec	@c00, #return
000933:0x00083b58:	cmpmc	@c00, value
000933:0x00083b68:	bne	0x083bb8
000935:0x00083b70:	icall	
000935:0x00083b80:	move	key, #return
000936:0x00083b90:	imove	#return, 0x000001
000936:0x00083ba0:	move	key, key
000936:0x00083bb0:	rts
000936:0x00083bb8:	jump	0x083b00
000939:0x00083bc0:	imove	#return, 0x000000
000939:0x00083bd0:	move	key, key
000939:0x00083be0:	rts
000939:0x00083be8:	move	key, key
000939:0x00083bf8:	rts
map<int,Class>::GetKeyArray()
000885:0x00084268:	new	keys, array<int>
000886:0x00084288:	imove	i, 0x000000
000886:0x00084298:	jump	0x0842b8
000886:0x000842a0:	move	@m00, i
000886:0x000842b0:	inc	i
000886:0x000842b8:	ncalli	map<int,Class>.Count()
000886:0x000842c0:	cmpi	i, #return
000886:0x000842d0:	bge	0x084300
000888:0x000842d8:	icall	
000888:0x000842e8:	icall	
000888:0x000842f8:	jump	0x0842a0
000890:0x00084300:	movem	#return, keys
000890:0x00084310:	release	keys
000890:0x00084318:	rts
000890:0x00084320:	release	keys
000890:0x00084328:	rts
map<int,Class>::GetValueArray()
000895:0x00084380:	new	elements, array<Class>
000896:0x000843a0:	imove	i, 0x000000
000896:0x000843b0:	jump	0x0843d0
000896:0x000843b8:	move	@m00, i
000896:0x000843c8:	inc	i
000896:0x000843d0:	ncalli	map<int,Class>.Count()
000896:0x000843d8:	cmpi	i, #return
000896:0x000843e8:	bge	0x084418
000898:0x000843f0:	icall	
000898:0x00084400:	icall	
000898:0x00084410:	jump	0x0843b8
000900:0x00084418:	movem	#return, elements
000900:0x00084428:	release	elements
000900:0x00084430:	rts
000900:0x00084438:	release	elements
000900:0x00084440:	rts
map<int,Class>::ReplaceKey()
000905:0x00084448:	icall	
000905:0x00084458:	cmpi	#return, _i0
000905:0x00084468:	beq	0x0844b8
000907:0x00084470:	icall	
000907:0x00084480:	icall	
000908:0x00084490:	icall	
000909:0x000844a0:	imove	#return, 0x000001
000909:0x000844b0:	rts
000911:0x000844b8:	imove	#return, 0x000000
000911:0x000844c8:	rts
000911:0x000844d0:	rts
map<int,Class>::GetKeyByValue()
000917:0x00084528:	imove	i, 0x000000
000917:0x00084538:	jump	0x084558
000917:0x00084540:	move	@m00, i
000917:0x00084550:	inc	i
000917:0x00084558:	ncalli	map<int,Class>.Count()
000917:0x00084560:	cmpi	i, #return
000917:0x00084570:	bge	0x0845e0
000919:0x00084578:	icall	
000919:0x00084588:	movec	@c00, #return
000919:0x00084598:	cmpc	@c00, value
000919:0x000845a8:	bne	0x0845d8
000921:0x000845b0:	icall	
000921:0x000845c0:	move	ret, #return
000922:0x000845d0:	jump	0x0845e0
000922:0x000845d8:	jump	0x084540
000926:0x000845e0:	move	#return, ret
000926:0x000845f0:	rts
000926:0x000845f8:	rts
map<int,Class>::GetKeyByValueChecked()
000931:0x00084628:	imove	i, 0x000000
000931:0x00084638:	jump	0x084658
000931:0x00084640:	move	@m00, i
000931:0x00084650:	inc	i
000931:0x00084658:	ncalli	map<int,Class>.Count()
000931:0x00084660:	cmpi	i, #return
000931:0x00084670:	bge	0x084700
000933:0x00084678:	icall	
000933:0x00084688:	movec	@c00, #return
000933:0x00084698:	cmpc	@c00, value
000933:0x000846a8:	bne	0x0846f8
000935:0x000846b0:	icall	
000935:0x000846c0:	move	key, #return
000936:0x000846d0:	imove	#return, 0x000001
000936:0x000846e0:	move	key, key
000936:0x000846f0:	rts
000936:0x000846f8:	jump	0x084640
000939:0x00084700:	imove	#return, 0x000000
000939:0x00084710:	move	key, key
000939:0x00084720:	rts
000939:0x00084728:	move	key, key
000939:0x00084738:	rts
map<int,string>::GetKeyArray()
000885:0x00084da8:	new	keys, array<int>
000886:0x00084dc8:	imove	i, 0x000000
000886:0x00084dd8:	jump	0x084df8
000886:0x00084de0:	move	@m00, i
000886:0x00084df0:	inc	i
000886:0x00084df8:	ncalli	map<int,string>.Count()
000886:0x00084e00:	cmpi	i, #return
000886:0x00084e10:	bge	0x084e40
000888:0x00084e18:	icall	
000888:0x00084e28:	icall	
000888:0x00084e38:	jump	0x084de0
000890:0x00084e40:	movem	#return, keys
000890:0x00084e50:	release	keys
000890:0x00084e58:	rts
000890:0x00084e60:	release	keys
000890:0x00084e68:	rts
map<int,string>::GetValueArray()
000895:0x00084ec0:	new	elements, array<string>
000896:0x00084ee0:	imove	i, 0x000000
000896:0x00084ef0:	jump	0x084f10
000896:0x00084ef8:	move	@m00, i
000896:0x00084f08:	inc	i
000896:0x00084f10:	ncalli	map<int,string>.Count()
000896:0x00084f18:	cmpi	i, #return
000896:0x00084f28:	bge	0x084f58
000898:0x00084f30:	icall	
000898:0x00084f40:	icall	
000898:0x00084f50:	jump	0x084ef8
000900:0x00084f58:	movem	#return, elements
000900:0x00084f68:	release	elements
000900:0x00084f70:	rts
000900:0x00084f78:	release	elements
000900:0x00084f80:	rts
map<int,string>::ReplaceKey()
000905:0x00084f88:	icall	
000905:0x00084f98:	cmpi	#return, _i0
000905:0x00084fa8:	beq	0x084ff8
000907:0x00084fb0:	icall	
000907:0x00084fc0:	icall	
000908:0x00084fd0:	icall	
000909:0x00084fe0:	imove	#return, 0x000001
000909:0x00084ff0:	rts
000911:0x00084ff8:	imove	#return, 0x000000
000911:0x00085008:	rts
000911:0x00085010:	rts
map<int,string>::GetKeyByValue()
000917:0x00085068:	imove	i, 0x000000
000917:0x00085078:	jump	0x085098
000917:0x00085080:	move	@m00, i
000917:0x00085090:	inc	i
000917:0x00085098:	ncalli	map<int,string>.Count()
000917:0x000850a0:	cmpi	i, #return
000917:0x000850b0:	bge	0x085120
000919:0x000850b8:	icall	
000919:0x000850c8:	moves	@s00, #return
000919:0x000850d8:	cmps	@s00, value
000919:0x000850e8:	bne	0x085118
000921:0x000850f0:	icall	
000921:0x00085100:	move	ret, #return
000922:0x00085110:	jump	0x085120
000922:0x00085118:	jump	0x085080
000926:0x00085120:	move	#return, ret
000926:0x00085130:	rts
000926:0x00085138:	rts
map<int,string>::GetKeyByValueChecked()
000931:0x00085168:	imove	i, 0x000000
000931:0x00085178:	jump	0x085198
000931:0x00085180:	move	@m00, i
000931:0x00085190:	inc	i
000931:0x00085198:	ncalli	map<int,string>.Count()
000931:0x000851a0:	cmpi	i, #return
000931:0x000851b0:	bge	0x085240
000933:0x000851b8:	icall	
000933:0x000851c8:	moves	@s00, #return
000933:0x000851d8:	cmps	@s00, value
000933:0x000851e8:	bne	0x085238
000935:0x000851f0:	icall	
000935:0x00085200:	move	key, #return
000936:0x00085210:	imove	#return, 0x000001
000936:0x00085220:	move	key, key
000936:0x00085230:	rts
000936:0x00085238:	jump	0x085180
000939:0x00085240:	imove	#return, 0x000000
000939:0x00085250:	move	key, key
000939:0x00085260:	rts
000939:0x00085268:	move	key, key
000939:0x00085278:	rts
map<int,int>::GetKeyArray()
000885:0x000858e8:	new	keys, array<int>
000886:0x00085908:	imove	i, 0x000000
000886:0x00085918:	jump	0x085938
000886:0x00085920:	move	@m00, i
000886:0x00085930:	inc	i
000886:0x00085938:	ncalli	map<int,int>.Count()
000886:0x00085940:	cmpi	i, #return
000886:0x00085950:	bge	0x085980
000888:0x00085958:	icall	
000888:0x00085968:	icall	
000888:0x00085978:	jump	0x085920
000890:0x00085980:	movem	#return, keys
000890:0x00085990:	release	keys
000890:0x00085998:	rts
000890:0x000859a0:	release	keys
000890:0x000859a8:	rts
map<int,int>::GetValueArray()
000895:0x00085a00:	new	elements, array<int>
000896:0x00085a20:	imove	i, 0x000000
000896:0x00085a30:	jump	0x085a50
000896:0x00085a38:	move	@m00, i
000896:0x00085a48:	inc	i
000896:0x00085a50:	ncalli	map<int,int>.Count()
000896:0x00085a58:	cmpi	i, #return
000896:0x00085a68:	bge	0x085a98
000898:0x00085a70:	icall	
000898:0x00085a80:	icall	
000898:0x00085a90:	jump	0x085a38
000900:0x00085a98:	movem	#return, elements
000900:0x00085aa8:	release	elements
000900:0x00085ab0:	rts
000900:0x00085ab8:	release	elements
000900:0x00085ac0:	rts
map<int,int>::ReplaceKey()
000905:0x00085ac8:	icall	
000905:0x00085ad8:	cmpi	#return, _i0
000905:0x00085ae8:	beq	0x085b38
000907:0x00085af0:	icall	
000907:0x00085b00:	icall	
000908:0x00085b10:	icall	
000909:0x00085b20:	imove	#return, 0x000001
000909:0x00085b30:	rts
000911:0x00085b38:	imove	#return, 0x000000
000911:0x00085b48:	rts
000911:0x00085b50:	rts
map<int,int>::GetKeyByValue()
000917:0x00085ba8:	imove	i, 0x000000
000917:0x00085bb8:	jump	0x085bd8
000917:0x00085bc0:	move	@m00, i
000917:0x00085bd0:	inc	i
000917:0x00085bd8:	ncalli	map<int,int>.Count()
000917:0x00085be0:	cmpi	i, #return
000917:0x00085bf0:	bge	0x085c60
000919:0x00085bf8:	icall	
000919:0x00085c08:	move	@m00, #return
000919:0x00085c18:	cmpi	@m00, value
000919:0x00085c28:	bne	0x085c58
000921:0x00085c30:	icall	
000921:0x00085c40:	move	ret, #return
000922:0x00085c50:	jump	0x085c60
000922:0x00085c58:	jump	0x085bc0
000926:0x00085c60:	move	#return, ret
000926:0x00085c70:	rts
000926:0x00085c78:	rts
map<int,int>::GetKeyByValueChecked()
000931:0x00085ca8:	imove	i, 0x000000
000931:0x00085cb8:	jump	0x085cd8
000931:0x00085cc0:	move	@m00, i
000931:0x00085cd0:	inc	i
000931:0x00085cd8:	ncalli	map<int,int>.Count()
000931:0x00085ce0:	cmpi	i, #return
000931:0x00085cf0:	bge	0x085d80
000933:0x00085cf8:	icall	
000933:0x00085d08:	move	@m00, #return
000933:0x00085d18:	cmpi	@m00, value
000933:0x00085d28:	bne	0x085d78
000935:0x00085d30:	icall	
000935:0x00085d40:	move	key, #return
000936:0x00085d50:	imove	#return, 0x000001
000936:0x00085d60:	move	key, key
000936:0x00085d70:	rts
000936:0x00085d78:	jump	0x085cc0
000939:0x00085d80:	imove	#return, 0x000000
000939:0x00085d90:	move	key, key
000939:0x00085da0:	rts
000939:0x00085da8:	move	key, key
000939:0x00085db8:	rts
map<int,float>::GetKeyArray()
000885:0x00086428:	new	keys, array<int>
000886:0x00086448:	imove	i, 0x000000
000886:0x00086458:	jump	0x086478
000886:0x00086460:	move	@m00, i
000886:0x00086470:	inc	i
000886:0x00086478:	ncalli	map<int,float>.Count()
000886:0x00086480:	cmpi	i, #return
000886:0x00086490:	bge	0x0864c0
000888:0x00086498:	icall	
000888:0x000864a8:	icall	
000888:0x000864b8:	jump	0x086460
000890:0x000864c0:	movem	#return, keys
000890:0x000864d0:	release	keys
000890:0x000864d8:	rts
000890:0x000864e0:	release	keys
000890:0x000864e8:	rts
map<int,float>::GetValueArray()
000895:0x00086540:	new	elements, array<float>
000896:0x00086560:	imove	i, 0x000000
000896:0x00086570:	jump	0x086590
000896:0x00086578:	move	@m00, i
000896:0x00086588:	inc	i
000896:0x00086590:	ncalli	map<int,float>.Count()
000896:0x00086598:	cmpi	i, #return
000896:0x000865a8:	bge	0x0865d8
000898:0x000865b0:	icall	
000898:0x000865c0:	icall	
000898:0x000865d0:	jump	0x086578
000900:0x000865d8:	movem	#return, elements
000900:0x000865e8:	release	elements
000900:0x000865f0:	rts
000900:0x000865f8:	release	elements
000900:0x00086600:	rts
map<int,float>::ReplaceKey()
000905:0x00086608:	icall	
000905:0x00086618:	cmpi	#return, _i0
000905:0x00086628:	beq	0x086678
000907:0x00086630:	icall	
000907:0x00086640:	icall	
000908:0x00086650:	icall	
000909:0x00086660:	imove	#return, 0x000001
000909:0x00086670:	rts
000911:0x00086678:	imove	#return, 0x000000
000911:0x00086688:	rts
000911:0x00086690:	rts
map<int,float>::GetKeyByValue()
000917:0x000866e8:	imove	i, 0x000000
000917:0x000866f8:	jump	0x086718
000917:0x00086700:	move	@m00, i
000917:0x00086710:	inc	i
000917:0x00086718:	ncalli	map<int,float>.Count()
000917:0x00086720:	cmpi	i, #return
000917:0x00086730:	bge	0x0867a0
000919:0x00086738:	icall	
000919:0x00086748:	move	@f00, #return
000919:0x00086758:	cmpf	@f00, value
000919:0x00086768:	bne	0x086798
000921:0x00086770:	icall	
000921:0x00086780:	move	ret, #return
000922:0x00086790:	jump	0x0867a0
000922:0x00086798:	jump	0x086700
000926:0x000867a0:	move	#return, ret
000926:0x000867b0:	rts
000926:0x000867b8:	rts
map<int,float>::GetKeyByValueChecked()
000931:0x000867e8:	imove	i, 0x000000
000931:0x000867f8:	jump	0x086818
000931:0x00086800:	move	@m00, i
000931:0x00086810:	inc	i
000931:0x00086818:	ncalli	map<int,float>.Count()
000931:0x00086820:	cmpi	i, #return
000931:0x00086830:	bge	0x0868c0
000933:0x00086838:	icall	
000933:0x00086848:	move	@f00, #return
000933:0x00086858:	cmpf	@f00, value
000933:0x00086868:	bne	0x0868b8
000935:0x00086870:	icall	
000935:0x00086880:	move	key, #return
000936:0x00086890:	imove	#return, 0x000001
000936:0x000868a0:	move	key, key
000936:0x000868b0:	rts
000936:0x000868b8:	jump	0x086800
000939:0x000868c0:	imove	#return, 0x000000
000939:0x000868d0:	move	key, key
000939:0x000868e0:	rts
000939:0x000868e8:	move	key, key
000939:0x000868f8:	rts
array<ParamEnum>::InsertAll()
000427:0x00087130:	imove	i, 0x000000
000427:0x00087140:	jump	0x087160
000427:0x00087148:	move	@m00, i
000427:0x00087158:	inc	i
000427:0x00087160:	ncalli	array<ParamEnum>.Count()
000427:0x00087168:	cmpi	i, #return
000427:0x00087178:	bge	0x0871a8
000429:0x00087180:	icall	
000429:0x00087190:	icall	
000429:0x000871a0:	jump	0x087148
000429:0x000871a8:	rts
array<ParamEnum>::RemoveItem()
000479:0x000871d8:	movefm	@c00, value
000479:0x000871e8:	icall	
000479:0x000871f8:	move	remove_index, #return
000481:0x00087208:	cmpi	remove_index, _i0
000481:0x00087218:	blt	0x087230
000483:0x00087220:	ncalli	array<ParamEnum>.RemoveOrdered(remove_index)
000483:0x00087230:	rts
array<ParamEnum>::RemoveItemUnOrdered()
000489:0x00087260:	movefm	@c00, value
000489:0x00087270:	icall	
000489:0x00087280:	move	remove_index, #return
000491:0x00087290:	cmpi	remove_index, _i0
000491:0x000872a0:	blt	0x0872b8
000493:0x000872a8:	ncalli	array<ParamEnum>.Remove(remove_index)
000493:0x000872b8:	rts
array<ParamEnum>::IsValidIndex()
000499:0x000872c0:	cmpi	index, _i-1
000499:0x000872d0:	ble	0x087310
000499:0x000872d8:	ncalli	array<ParamEnum>.Count()
000499:0x000872e0:	cmpi	index, #return
000499:0x000872f0:	bge	0x087310
000499:0x000872f8:	imove	#return, 0x000001
000499:0x00087308:	jump	0x087320
000499:0x00087310:	imove	#return, 0x000000
000499:0x00087320:	rts
000499:0x00087328:	rts
array<ParamEnum>::Debug()
000525:0x00087380:	ncalli	array<ParamEnum>.Count()
000525:0x00087388:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x000873b8:	icall	Print(#return)
000526:0x000873c8:	imove	i, 0x000000
000526:0x000873d8:	jump	0x0873f8
000526:0x000873e0:	move	@m00, i
000526:0x000873f0:	inc	i
000526:0x000873f8:	ncalli	array<ParamEnum>.Count()
000526:0x00087400:	cmpi	i, #return
000526:0x00087410:	bge	0x087488
000528:0x00087418:	icall	
000528:0x00087428:	movetm	item, #return
000529:0x00087438:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00087468:	icall	Print(#return)
000529:0x00087478:	release	item
000529:0x00087480:	jump	0x0873e0
000529:0x00087488:	rts
array<ParamEnum>::GetRandomIndex()
000544:0x00087490:	ncalli	array<ParamEnum>.Count()
000544:0x00087498:	move	@m00, #return
000544:0x000874a8:	cmpi	@m00, _i0
000544:0x000874b8:	ble	0x0874f0
000546:0x000874c0:	ncalli	array<ParamEnum>.Count()
000546:0x000874c8:	icall	RandomInt(_i0, #return)
000546:0x000874d8:	move	#return, #return
000546:0x000874e8:	rts
000549:0x000874f0:	imove	#return, 0xffffffff
000549:0x00087500:	rts
000549:0x00087508:	rts
array<ParamEnum>::GetRandomElement()
000563:0x00087510:	call	
000563:0x00087520:	icall	
000563:0x00087530:	movetm	#return, #return
000563:0x00087540:	rts
000563:0x00087548:	rts
array<ParamEnum>::SwapItems()
000568:0x00087578:	icall	
000568:0x00087588:	movetm	item1, #return
000569:0x00087598:	icall	
000569:0x000875a8:	icall	
000570:0x000875b8:	movefm	@c00, item1
000570:0x000875c8:	icall	
000570:0x000875d8:	release	item1
000570:0x000875e0:	rts
array<ParamEnum>::InsertArray()
000575:0x00087638:	imove	i, 0x000000
000575:0x00087648:	jump	0x087668
000575:0x00087650:	move	@m00, i
000575:0x00087660:	inc	i
000575:0x00087668:	ncalli	array<ParamEnum>.Count()
000575:0x00087670:	cmpi	i, #return
000575:0x00087680:	bge	0x0876d8
000577:0x00087688:	icall	
000577:0x00087698:	movetm	item, #return
000578:0x000876a8:	movefm	@c00, item
000578:0x000876b8:	icall	
000578:0x000876c8:	release	item
000578:0x000876d0:	jump	0x087650
000578:0x000876d8:	rts
array<ParamEnum>::Invert()
000584:0x00087758:	imove	left, 0x000000
000585:0x00087768:	ncalli	array<ParamEnum>.Count()
000585:0x00087770:	subi	right, #return, _i1
000586:0x00087780:	cmpi	right, _i0
000586:0x00087790:	ble	0x087850
000588:0x00087798:	cmpi	left, right
000588:0x000877a8:	bge	0x087850
000590:0x000877b0:	icall	
000590:0x000877c0:	movetm	temp, #return
000591:0x000877d0:	move	@m00, left
000591:0x000877e0:	inc	left
000591:0x000877e8:	icall	
000591:0x000877f8:	icall	
000592:0x00087808:	move	@m00, right
000592:0x00087818:	dec	right
000592:0x00087820:	movefm	@c00, temp
000592:0x00087830:	icall	
000592:0x00087840:	release	temp
000592:0x00087848:	jump	0x087798
000592:0x00087850:	rts
array<ParamEnum>::MoveIndex()
000612:0x000878a8:	ncalli	array<ParamEnum>.Count()
000612:0x000878b0:	move	count, #return
000613:0x000878c0:	move	new_index, curr_index
000615:0x000878d0:	cmpi	move_number, _i0
000615:0x000878e0:	ble	0x087908
000617:0x000878e8:	addi	@m00, curr_index, move_number
000617:0x000878f8:	move	new_index, @m00
000620:0x00087908:	cmpi	move_number, _i0
000620:0x00087918:	bge	0x0879c0
000622:0x00087920:	subi	@m00, curr_index, move_number
000622:0x00087930:	move	new_index, @m00
000624:0x00087940:	cmpi	new_index, _i0
000624:0x00087950:	bge	0x0879c0
000626:0x00087958:	subi	@m01, _i0, count
000626:0x00087968:	cmpi	new_index, @m01
000626:0x00087978:	bgt	0x0879a0
000628:0x00087980:	modi	@m00, new_index, count
000628:0x00087990:	move	new_index, @m00
000631:0x000879a0:	addi	@m00, new_index, count
000631:0x000879b0:	move	new_index, @m00
000635:0x000879c0:	cmpi	new_index, count
000635:0x000879d0:	blt	0x0879f8
000637:0x000879d8:	modi	@m00, new_index, count
000637:0x000879e8:	move	new_index, @m00
000641:0x000879f8:	move	#return, new_index
000641:0x00087a08:	rts
000641:0x00087a10:	rts
array<ParamEnum>::ShuffleArray()
000646:0x00087a40:	imove	i, 0x000000
000646:0x00087a50:	jump	0x087a70
000646:0x00087a58:	move	@m00, i
000646:0x00087a68:	inc	i
000646:0x00087a70:	ncalli	array<ParamEnum>.Count()
000646:0x00087a78:	cmpi	i, #return
000646:0x00087a88:	bge	0x087ac0
000648:0x00087a90:	call	
000648:0x00087aa0:	call	
000648:0x00087ab8:	jump	0x087a58
000648:0x00087ac0:	rts
array<ParamEnum>::DifferentAtPosition()
000666:0x00087af0:	ncalli	array<ParamEnum>.Count()
000666:0x00087af8:	move	@m00, #return
000666:0x00087b08:	push	#return
000666:0x00087b10:	ncalli	array<ParamEnum>.Count()
000666:0x00087b18:	move	@m02, #return
000666:0x00087b28:	pop	#return
000666:0x00087b30:	cmpi	@m00, @m02
000666:0x00087b40:	beq	0x087b70
000668:0x00087b48:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00087b58:	imove	#return, 0xffffffff
000669:0x00087b68:	rts
000672:0x00087b70:	imove	i, 0x000000
000672:0x00087b80:	jump	0x087b90
000672:0x00087b88:	inc	i
000672:0x00087b90:	ncalli	array<ParamEnum>.Count()
000672:0x00087b98:	cmpi	i, #return
000672:0x00087ba8:	bge	0x087c38
000674:0x00087bb0:	icall	
000674:0x00087bc0:	movec	@c00, #return
000674:0x00087bd0:	pushc	#return
000674:0x00087bd8:	icall	
000674:0x00087be8:	movec	@c02, #return
000674:0x00087bf8:	popc	#return
000674:0x00087c00:	cmpc	@c00, @c02
000674:0x00087c10:	beq	0x087c30
000676:0x00087c18:	move	#return, i
000676:0x00087c28:	rts
000676:0x00087c30:	jump	0x087b88
000680:0x00087c38:	imove	#return, 0xffffffff
000680:0x00087c48:	rts
000680:0x00087c50:	rts
array<@ParamEnum>::InsertAll()
000427:0x00088068:	imove	i, 0x000000
000427:0x00088078:	jump	0x088098
000427:0x00088080:	move	@m00, i
000427:0x00088090:	inc	i
000427:0x00088098:	ncalli	array<ParamEnum>.Count()
000427:0x000880a0:	cmpi	i, #return
000427:0x000880b0:	bge	0x0880e0
000429:0x000880b8:	icall	
000429:0x000880c8:	icall	
000429:0x000880d8:	jump	0x088080
000429:0x000880e0:	rts
array<@ParamEnum>::RemoveItem()
000479:0x00088110:	movefm	@c00, value
000479:0x00088120:	icall	
000479:0x00088130:	move	remove_index, #return
000481:0x00088140:	cmpi	remove_index, _i0
000481:0x00088150:	blt	0x088168
000483:0x00088158:	ncalli	array<@ParamEnum>.RemoveOrdered(remove_index)
000483:0x00088168:	rts
array<@ParamEnum>::RemoveItemUnOrdered()
000489:0x00088198:	movefm	@c00, value
000489:0x000881a8:	icall	
000489:0x000881b8:	move	remove_index, #return
000491:0x000881c8:	cmpi	remove_index, _i0
000491:0x000881d8:	blt	0x0881f0
000493:0x000881e0:	ncalli	array<@ParamEnum>.Remove(remove_index)
000493:0x000881f0:	rts
array<@ParamEnum>::IsValidIndex()
000499:0x000881f8:	cmpi	index, _i-1
000499:0x00088208:	ble	0x088248
000499:0x00088210:	ncalli	array<@ParamEnum>.Count()
000499:0x00088218:	cmpi	index, #return
000499:0x00088228:	bge	0x088248
000499:0x00088230:	imove	#return, 0x000001
000499:0x00088240:	jump	0x088258
000499:0x00088248:	imove	#return, 0x000000
000499:0x00088258:	rts
000499:0x00088260:	rts
array<@ParamEnum>::Debug()
000525:0x000882b8:	ncalli	array<@ParamEnum>.Count()
000525:0x000882c0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x000882f0:	icall	Print(#return)
000526:0x00088300:	imove	i, 0x000000
000526:0x00088310:	jump	0x088330
000526:0x00088318:	move	@m00, i
000526:0x00088328:	inc	i
000526:0x00088330:	ncalli	array<@ParamEnum>.Count()
000526:0x00088338:	cmpi	i, #return
000526:0x00088348:	bge	0x0883c0
000528:0x00088350:	icall	
000528:0x00088360:	movetm	item, #return
000529:0x00088370:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x000883a0:	icall	Print(#return)
000529:0x000883b0:	release	item
000529:0x000883b8:	jump	0x088318
000529:0x000883c0:	rts
array<@ParamEnum>::GetRandomIndex()
000544:0x000883c8:	ncalli	array<@ParamEnum>.Count()
000544:0x000883d0:	move	@m00, #return
000544:0x000883e0:	cmpi	@m00, _i0
000544:0x000883f0:	ble	0x088428
000546:0x000883f8:	ncalli	array<@ParamEnum>.Count()
000546:0x00088400:	icall	RandomInt(_i0, #return)
000546:0x00088410:	move	#return, #return
000546:0x00088420:	rts
000549:0x00088428:	imove	#return, 0xffffffff
000549:0x00088438:	rts
000549:0x00088440:	rts
array<@ParamEnum>::GetRandomElement()
000563:0x00088448:	call	
000563:0x00088458:	icall	
000563:0x00088468:	movetm	#return, #return
000563:0x00088478:	rts
000563:0x00088480:	rts
array<@ParamEnum>::SwapItems()
000568:0x000884b0:	icall	
000568:0x000884c0:	movetm	item1, #return
000569:0x000884d0:	icall	
000569:0x000884e0:	icall	
000570:0x000884f0:	movefm	@c00, item1
000570:0x00088500:	icall	
000570:0x00088510:	release	item1
000570:0x00088518:	rts
array<@ParamEnum>::InsertArray()
000575:0x00088570:	imove	i, 0x000000
000575:0x00088580:	jump	0x0885a0
000575:0x00088588:	move	@m00, i
000575:0x00088598:	inc	i
000575:0x000885a0:	ncalli	array<ParamEnum>.Count()
000575:0x000885a8:	cmpi	i, #return
000575:0x000885b8:	bge	0x088610
000577:0x000885c0:	icall	
000577:0x000885d0:	movetm	item, #return
000578:0x000885e0:	movefm	@c00, item
000578:0x000885f0:	icall	
000578:0x00088600:	release	item
000578:0x00088608:	jump	0x088588
000578:0x00088610:	rts
array<@ParamEnum>::Invert()
000584:0x00088690:	imove	left, 0x000000
000585:0x000886a0:	ncalli	array<@ParamEnum>.Count()
000585:0x000886a8:	subi	right, #return, _i1
000586:0x000886b8:	cmpi	right, _i0
000586:0x000886c8:	ble	0x088788
000588:0x000886d0:	cmpi	left, right
000588:0x000886e0:	bge	0x088788
000590:0x000886e8:	icall	
000590:0x000886f8:	movetm	temp, #return
000591:0x00088708:	move	@m00, left
000591:0x00088718:	inc	left
000591:0x00088720:	icall	
000591:0x00088730:	icall	
000592:0x00088740:	move	@m00, right
000592:0x00088750:	dec	right
000592:0x00088758:	movefm	@c00, temp
000592:0x00088768:	icall	
000592:0x00088778:	release	temp
000592:0x00088780:	jump	0x0886d0
000592:0x00088788:	rts
array<@ParamEnum>::MoveIndex()
000612:0x000887e0:	ncalli	array<@ParamEnum>.Count()
000612:0x000887e8:	move	count, #return
000613:0x000887f8:	move	new_index, curr_index
000615:0x00088808:	cmpi	move_number, _i0
000615:0x00088818:	ble	0x088840
000617:0x00088820:	addi	@m00, curr_index, move_number
000617:0x00088830:	move	new_index, @m00
000620:0x00088840:	cmpi	move_number, _i0
000620:0x00088850:	bge	0x0888f8
000622:0x00088858:	subi	@m00, curr_index, move_number
000622:0x00088868:	move	new_index, @m00
000624:0x00088878:	cmpi	new_index, _i0
000624:0x00088888:	bge	0x0888f8
000626:0x00088890:	subi	@m01, _i0, count
000626:0x000888a0:	cmpi	new_index, @m01
000626:0x000888b0:	bgt	0x0888d8
000628:0x000888b8:	modi	@m00, new_index, count
000628:0x000888c8:	move	new_index, @m00
000631:0x000888d8:	addi	@m00, new_index, count
000631:0x000888e8:	move	new_index, @m00
000635:0x000888f8:	cmpi	new_index, count
000635:0x00088908:	blt	0x088930
000637:0x00088910:	modi	@m00, new_index, count
000637:0x00088920:	move	new_index, @m00
000641:0x00088930:	move	#return, new_index
000641:0x00088940:	rts
000641:0x00088948:	rts
array<@ParamEnum>::ShuffleArray()
000646:0x00088978:	imove	i, 0x000000
000646:0x00088988:	jump	0x0889a8
000646:0x00088990:	move	@m00, i
000646:0x000889a0:	inc	i
000646:0x000889a8:	ncalli	array<@ParamEnum>.Count()
000646:0x000889b0:	cmpi	i, #return
000646:0x000889c0:	bge	0x0889f8
000648:0x000889c8:	call	
000648:0x000889d8:	call	
000648:0x000889f0:	jump	0x088990
000648:0x000889f8:	rts
array<@ParamEnum>::DifferentAtPosition()
000666:0x00088a28:	ncalli	array<@ParamEnum>.Count()
000666:0x00088a30:	move	@m00, #return
000666:0x00088a40:	ncalli	array<ParamEnum>.Count()
000666:0x00088a48:	cmpi	@m00, #return
000666:0x00088a58:	beq	0x088a88
000668:0x00088a60:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00088a70:	imove	#return, 0xffffffff
000669:0x00088a80:	rts
000672:0x00088a88:	imove	i, 0x000000
000672:0x00088a98:	jump	0x088aa8
000672:0x00088aa0:	inc	i
000672:0x00088aa8:	ncalli	array<ParamEnum>.Count()
000672:0x00088ab0:	cmpi	i, #return
000672:0x00088ac0:	bge	0x088b30
000674:0x00088ac8:	icall	
000674:0x00088ad8:	movec	@c00, #return
000674:0x00088ae8:	icall	
000674:0x00088af8:	cmpc	@c00, #return
000674:0x00088b08:	beq	0x088b28
000676:0x00088b10:	move	#return, i
000676:0x00088b20:	rts
000676:0x00088b28:	jump	0x088aa0
000680:0x00088b30:	imove	#return, 0xffffffff
000680:0x00088b40:	rts
000680:0x00088b48:	rts
array<Param2<float,typename>>::InsertAll()
000427:0x00089388:	imove	i, 0x000000
000427:0x00089398:	jump	0x0893b8
000427:0x000893a0:	move	@m00, i
000427:0x000893b0:	inc	i
000427:0x000893b8:	ncalli	array<Param2<float,typename>>.Count()
000427:0x000893c0:	cmpi	i, #return
000427:0x000893d0:	bge	0x089400
000429:0x000893d8:	icall	
000429:0x000893e8:	icall	
000429:0x000893f8:	jump	0x0893a0
000429:0x00089400:	rts
array<Param2<float,typename>>::RemoveItem()
000479:0x00089430:	movefm	@c00, value
000479:0x00089440:	icall	
000479:0x00089450:	move	remove_index, #return
000481:0x00089460:	cmpi	remove_index, _i0
000481:0x00089470:	blt	0x089488
000483:0x00089478:	ncalli	array<Param2<float,typename>>.RemoveOrdered(remove_index)
000483:0x00089488:	rts
array<Param2<float,typename>>::RemoveItemUnOrdered()
000489:0x000894b8:	movefm	@c00, value
000489:0x000894c8:	icall	
000489:0x000894d8:	move	remove_index, #return
000491:0x000894e8:	cmpi	remove_index, _i0
000491:0x000894f8:	blt	0x089510
000493:0x00089500:	ncalli	array<Param2<float,typename>>.Remove(remove_index)
000493:0x00089510:	rts
array<Param2<float,typename>>::IsValidIndex()
000499:0x00089518:	cmpi	index, _i-1
000499:0x00089528:	ble	0x089568
000499:0x00089530:	ncalli	array<Param2<float,typename>>.Count()
000499:0x00089538:	cmpi	index, #return
000499:0x00089548:	bge	0x089568
000499:0x00089550:	imove	#return, 0x000001
000499:0x00089560:	jump	0x089578
000499:0x00089568:	imove	#return, 0x000000
000499:0x00089578:	rts
000499:0x00089580:	rts
array<Param2<float,typename>>::Debug()
000525:0x000895d8:	ncalli	array<Param2<float,typename>>.Count()
000525:0x000895e0:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00089610:	icall	Print(#return)
000526:0x00089620:	imove	i, 0x000000
000526:0x00089630:	jump	0x089650
000526:0x00089638:	move	@m00, i
000526:0x00089648:	inc	i
000526:0x00089650:	ncalli	array<Param2<float,typename>>.Count()
000526:0x00089658:	cmpi	i, #return
000526:0x00089668:	bge	0x0896e0
000528:0x00089670:	icall	
000528:0x00089680:	movetm	item, #return
000529:0x00089690:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x000896c0:	icall	Print(#return)
000529:0x000896d0:	release	item
000529:0x000896d8:	jump	0x089638
000529:0x000896e0:	rts
array<Param2<float,typename>>::GetRandomIndex()
000544:0x000896e8:	ncalli	array<Param2<float,typename>>.Count()
000544:0x000896f0:	move	@m00, #return
000544:0x00089700:	cmpi	@m00, _i0
000544:0x00089710:	ble	0x089748
000546:0x00089718:	ncalli	array<Param2<float,typename>>.Count()
000546:0x00089720:	icall	RandomInt(_i0, #return)
000546:0x00089730:	move	#return, #return
000546:0x00089740:	rts
000549:0x00089748:	imove	#return, 0xffffffff
000549:0x00089758:	rts
000549:0x00089760:	rts
array<Param2<float,typename>>::GetRandomElement()
000563:0x00089768:	call	
000563:0x00089778:	icall	
000563:0x00089788:	movetm	#return, #return
000563:0x00089798:	rts
000563:0x000897a0:	rts
array<Param2<float,typename>>::SwapItems()
000568:0x000897d0:	icall	
000568:0x000897e0:	movetm	item1, #return
000569:0x000897f0:	icall	
000569:0x00089800:	icall	
000570:0x00089810:	movefm	@c00, item1
000570:0x00089820:	icall	
000570:0x00089830:	release	item1
000570:0x00089838:	rts
array<Param2<float,typename>>::InsertArray()
000575:0x00089890:	imove	i, 0x000000
000575:0x000898a0:	jump	0x0898c0
000575:0x000898a8:	move	@m00, i
000575:0x000898b8:	inc	i
000575:0x000898c0:	ncalli	array<Param2<float,typename>>.Count()
000575:0x000898c8:	cmpi	i, #return
000575:0x000898d8:	bge	0x089930
000577:0x000898e0:	icall	
000577:0x000898f0:	movetm	item, #return
000578:0x00089900:	movefm	@c00, item
000578:0x00089910:	icall	
000578:0x00089920:	release	item
000578:0x00089928:	jump	0x0898a8
000578:0x00089930:	rts
array<Param2<float,typename>>::Invert()
000584:0x000899b0:	imove	left, 0x000000
000585:0x000899c0:	ncalli	array<Param2<float,typename>>.Count()
000585:0x000899c8:	subi	right, #return, _i1
000586:0x000899d8:	cmpi	right, _i0
000586:0x000899e8:	ble	0x089aa8
000588:0x000899f0:	cmpi	left, right
000588:0x00089a00:	bge	0x089aa8
000590:0x00089a08:	icall	
000590:0x00089a18:	movetm	temp, #return
000591:0x00089a28:	move	@m00, left
000591:0x00089a38:	inc	left
000591:0x00089a40:	icall	
000591:0x00089a50:	icall	
000592:0x00089a60:	move	@m00, right
000592:0x00089a70:	dec	right
000592:0x00089a78:	movefm	@c00, temp
000592:0x00089a88:	icall	
000592:0x00089a98:	release	temp
000592:0x00089aa0:	jump	0x0899f0
000592:0x00089aa8:	rts
array<Param2<float,typename>>::MoveIndex()
000612:0x00089b00:	ncalli	array<Param2<float,typename>>.Count()
000612:0x00089b08:	move	count, #return
000613:0x00089b18:	move	new_index, curr_index
000615:0x00089b28:	cmpi	move_number, _i0
000615:0x00089b38:	ble	0x089b60
000617:0x00089b40:	addi	@m00, curr_index, move_number
000617:0x00089b50:	move	new_index, @m00
000620:0x00089b60:	cmpi	move_number, _i0
000620:0x00089b70:	bge	0x089c18
000622:0x00089b78:	subi	@m00, curr_index, move_number
000622:0x00089b88:	move	new_index, @m00
000624:0x00089b98:	cmpi	new_index, _i0
000624:0x00089ba8:	bge	0x089c18
000626:0x00089bb0:	subi	@m01, _i0, count
000626:0x00089bc0:	cmpi	new_index, @m01
000626:0x00089bd0:	bgt	0x089bf8
000628:0x00089bd8:	modi	@m00, new_index, count
000628:0x00089be8:	move	new_index, @m00
000631:0x00089bf8:	addi	@m00, new_index, count
000631:0x00089c08:	move	new_index, @m00
000635:0x00089c18:	cmpi	new_index, count
000635:0x00089c28:	blt	0x089c50
000637:0x00089c30:	modi	@m00, new_index, count
000637:0x00089c40:	move	new_index, @m00
000641:0x00089c50:	move	#return, new_index
000641:0x00089c60:	rts
000641:0x00089c68:	rts
array<Param2<float,typename>>::ShuffleArray()
000646:0x00089c98:	imove	i, 0x000000
000646:0x00089ca8:	jump	0x089cc8
000646:0x00089cb0:	move	@m00, i
000646:0x00089cc0:	inc	i
000646:0x00089cc8:	ncalli	array<Param2<float,typename>>.Count()
000646:0x00089cd0:	cmpi	i, #return
000646:0x00089ce0:	bge	0x089d18
000648:0x00089ce8:	call	
000648:0x00089cf8:	call	
000648:0x00089d10:	jump	0x089cb0
000648:0x00089d18:	rts
array<Param2<float,typename>>::DifferentAtPosition()
000666:0x00089d48:	ncalli	array<Param2<float,typename>>.Count()
000666:0x00089d50:	move	@m00, #return
000666:0x00089d60:	push	#return
000666:0x00089d68:	ncalli	array<Param2<float,typename>>.Count()
000666:0x00089d70:	move	@m02, #return
000666:0x00089d80:	pop	#return
000666:0x00089d88:	cmpi	@m00, @m02
000666:0x00089d98:	beq	0x089dc8
000668:0x00089da0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x00089db0:	imove	#return, 0xffffffff
000669:0x00089dc0:	rts
000672:0x00089dc8:	imove	i, 0x000000
000672:0x00089dd8:	jump	0x089de8
000672:0x00089de0:	inc	i
000672:0x00089de8:	ncalli	array<Param2<float,typename>>.Count()
000672:0x00089df0:	cmpi	i, #return
000672:0x00089e00:	bge	0x089e90
000674:0x00089e08:	icall	
000674:0x00089e18:	movec	@c00, #return
000674:0x00089e28:	pushc	#return
000674:0x00089e30:	icall	
000674:0x00089e40:	movec	@c02, #return
000674:0x00089e50:	popc	#return
000674:0x00089e58:	cmpc	@c00, @c02
000674:0x00089e68:	beq	0x089e88
000676:0x00089e70:	move	#return, i
000676:0x00089e80:	rts
000676:0x00089e88:	jump	0x089de0
000680:0x00089e90:	imove	#return, 0xffffffff
000680:0x00089ea0:	rts
000680:0x00089ea8:	rts
array<@Param2<float,typename>>::InsertAll()
000427:0x0008a2c0:	imove	i, 0x000000
000427:0x0008a2d0:	jump	0x08a2f0
000427:0x0008a2d8:	move	@m00, i
000427:0x0008a2e8:	inc	i
000427:0x0008a2f0:	ncalli	array<Param2<float,typename>>.Count()
000427:0x0008a2f8:	cmpi	i, #return
000427:0x0008a308:	bge	0x08a338
000429:0x0008a310:	icall	
000429:0x0008a320:	icall	
000429:0x0008a330:	jump	0x08a2d8
000429:0x0008a338:	rts
array<@Param2<float,typename>>::RemoveItem()
000479:0x0008a368:	movefm	@c00, value
000479:0x0008a378:	icall	
000479:0x0008a388:	move	remove_index, #return
000481:0x0008a398:	cmpi	remove_index, _i0
000481:0x0008a3a8:	blt	0x08a3c0
000483:0x0008a3b0:	ncalli	array<@Param2<float,typename>>.RemoveOrdered(remove_index)
000483:0x0008a3c0:	rts
array<@Param2<float,typename>>::RemoveItemUnOrdered()
000489:0x0008a3f0:	movefm	@c00, value
000489:0x0008a400:	icall	
000489:0x0008a410:	move	remove_index, #return
000491:0x0008a420:	cmpi	remove_index, _i0
000491:0x0008a430:	blt	0x08a448
000493:0x0008a438:	ncalli	array<@Param2<float,typename>>.Remove(remove_index)
000493:0x0008a448:	rts
array<@Param2<float,typename>>::IsValidIndex()
000499:0x0008a450:	cmpi	index, _i-1
000499:0x0008a460:	ble	0x08a4a0
000499:0x0008a468:	ncalli	array<@Param2<float,typename>>.Count()
000499:0x0008a470:	cmpi	index, #return
000499:0x0008a480:	bge	0x08a4a0
000499:0x0008a488:	imove	#return, 0x000001
000499:0x0008a498:	jump	0x08a4b0
000499:0x0008a4a0:	imove	#return, 0x000000
000499:0x0008a4b0:	rts
000499:0x0008a4b8:	rts
array<@Param2<float,typename>>::Debug()
000525:0x0008a510:	ncalli	array<@Param2<float,typename>>.Count()
000525:0x0008a518:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0008a548:	icall	Print(#return)
000526:0x0008a558:	imove	i, 0x000000
000526:0x0008a568:	jump	0x08a588
000526:0x0008a570:	move	@m00, i
000526:0x0008a580:	inc	i
000526:0x0008a588:	ncalli	array<@Param2<float,typename>>.Count()
000526:0x0008a590:	cmpi	i, #return
000526:0x0008a5a0:	bge	0x08a618
000528:0x0008a5a8:	icall	
000528:0x0008a5b8:	movetm	item, #return
000529:0x0008a5c8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0008a5f8:	icall	Print(#return)
000529:0x0008a608:	release	item
000529:0x0008a610:	jump	0x08a570
000529:0x0008a618:	rts
array<@Param2<float,typename>>::GetRandomIndex()
000544:0x0008a620:	ncalli	array<@Param2<float,typename>>.Count()
000544:0x0008a628:	move	@m00, #return
000544:0x0008a638:	cmpi	@m00, _i0
000544:0x0008a648:	ble	0x08a680
000546:0x0008a650:	ncalli	array<@Param2<float,typename>>.Count()
000546:0x0008a658:	icall	RandomInt(_i0, #return)
000546:0x0008a668:	move	#return, #return
000546:0x0008a678:	rts
000549:0x0008a680:	imove	#return, 0xffffffff
000549:0x0008a690:	rts
000549:0x0008a698:	rts
array<@Param2<float,typename>>::GetRandomElement()
000563:0x0008a6a0:	call	
000563:0x0008a6b0:	icall	
000563:0x0008a6c0:	movetm	#return, #return
000563:0x0008a6d0:	rts
000563:0x0008a6d8:	rts
array<@Param2<float,typename>>::SwapItems()
000568:0x0008a708:	icall	
000568:0x0008a718:	movetm	item1, #return
000569:0x0008a728:	icall	
000569:0x0008a738:	icall	
000570:0x0008a748:	movefm	@c00, item1
000570:0x0008a758:	icall	
000570:0x0008a768:	release	item1
000570:0x0008a770:	rts
array<@Param2<float,typename>>::InsertArray()
000575:0x0008a7c8:	imove	i, 0x000000
000575:0x0008a7d8:	jump	0x08a7f8
000575:0x0008a7e0:	move	@m00, i
000575:0x0008a7f0:	inc	i
000575:0x0008a7f8:	ncalli	array<Param2<float,typename>>.Count()
000575:0x0008a800:	cmpi	i, #return
000575:0x0008a810:	bge	0x08a868
000577:0x0008a818:	icall	
000577:0x0008a828:	movetm	item, #return
000578:0x0008a838:	movefm	@c00, item
000578:0x0008a848:	icall	
000578:0x0008a858:	release	item
000578:0x0008a860:	jump	0x08a7e0
000578:0x0008a868:	rts
array<@Param2<float,typename>>::Invert()
000584:0x0008a8e8:	imove	left, 0x000000
000585:0x0008a8f8:	ncalli	array<@Param2<float,typename>>.Count()
000585:0x0008a900:	subi	right, #return, _i1
000586:0x0008a910:	cmpi	right, _i0
000586:0x0008a920:	ble	0x08a9e0
000588:0x0008a928:	cmpi	left, right
000588:0x0008a938:	bge	0x08a9e0
000590:0x0008a940:	icall	
000590:0x0008a950:	movetm	temp, #return
000591:0x0008a960:	move	@m00, left
000591:0x0008a970:	inc	left
000591:0x0008a978:	icall	
000591:0x0008a988:	icall	
000592:0x0008a998:	move	@m00, right
000592:0x0008a9a8:	dec	right
000592:0x0008a9b0:	movefm	@c00, temp
000592:0x0008a9c0:	icall	
000592:0x0008a9d0:	release	temp
000592:0x0008a9d8:	jump	0x08a928
000592:0x0008a9e0:	rts
array<@Param2<float,typename>>::MoveIndex()
000612:0x0008aa38:	ncalli	array<@Param2<float,typename>>.Count()
000612:0x0008aa40:	move	count, #return
000613:0x0008aa50:	move	new_index, curr_index
000615:0x0008aa60:	cmpi	move_number, _i0
000615:0x0008aa70:	ble	0x08aa98
000617:0x0008aa78:	addi	@m00, curr_index, move_number
000617:0x0008aa88:	move	new_index, @m00
000620:0x0008aa98:	cmpi	move_number, _i0
000620:0x0008aaa8:	bge	0x08ab50
000622:0x0008aab0:	subi	@m00, curr_index, move_number
000622:0x0008aac0:	move	new_index, @m00
000624:0x0008aad0:	cmpi	new_index, _i0
000624:0x0008aae0:	bge	0x08ab50
000626:0x0008aae8:	subi	@m01, _i0, count
000626:0x0008aaf8:	cmpi	new_index, @m01
000626:0x0008ab08:	bgt	0x08ab30
000628:0x0008ab10:	modi	@m00, new_index, count
000628:0x0008ab20:	move	new_index, @m00
000631:0x0008ab30:	addi	@m00, new_index, count
000631:0x0008ab40:	move	new_index, @m00
000635:0x0008ab50:	cmpi	new_index, count
000635:0x0008ab60:	blt	0x08ab88
000637:0x0008ab68:	modi	@m00, new_index, count
000637:0x0008ab78:	move	new_index, @m00
000641:0x0008ab88:	move	#return, new_index
000641:0x0008ab98:	rts
000641:0x0008aba0:	rts
array<@Param2<float,typename>>::ShuffleArray()
000646:0x0008abd0:	imove	i, 0x000000
000646:0x0008abe0:	jump	0x08ac00
000646:0x0008abe8:	move	@m00, i
000646:0x0008abf8:	inc	i
000646:0x0008ac00:	ncalli	array<@Param2<float,typename>>.Count()
000646:0x0008ac08:	cmpi	i, #return
000646:0x0008ac18:	bge	0x08ac50
000648:0x0008ac20:	call	
000648:0x0008ac30:	call	
000648:0x0008ac48:	jump	0x08abe8
000648:0x0008ac50:	rts
array<@Param2<float,typename>>::DifferentAtPosition()
000666:0x0008ac80:	ncalli	array<@Param2<float,typename>>.Count()
000666:0x0008ac88:	move	@m00, #return
000666:0x0008ac98:	ncalli	array<Param2<float,typename>>.Count()
000666:0x0008aca0:	cmpi	@m00, #return
000666:0x0008acb0:	beq	0x08ace0
000668:0x0008acb8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0008acc8:	imove	#return, 0xffffffff
000669:0x0008acd8:	rts
000672:0x0008ace0:	imove	i, 0x000000
000672:0x0008acf0:	jump	0x08ad00
000672:0x0008acf8:	inc	i
000672:0x0008ad00:	ncalli	array<Param2<float,typename>>.Count()
000672:0x0008ad08:	cmpi	i, #return
000672:0x0008ad18:	bge	0x08ad88
000674:0x0008ad20:	icall	
000674:0x0008ad30:	movec	@c00, #return
000674:0x0008ad40:	icall	
000674:0x0008ad50:	cmpc	@c00, #return
000674:0x0008ad60:	beq	0x08ad80
000676:0x0008ad68:	move	#return, i
000676:0x0008ad78:	rts
000676:0x0008ad80:	jump	0x08acf8
000680:0x0008ad88:	imove	#return, 0xffffffff
000680:0x0008ad98:	rts
000680:0x0008ada0:	rts
array<Param2<int,typename>>::InsertAll()
000427:0x0008b5e0:	imove	i, 0x000000
000427:0x0008b5f0:	jump	0x08b610
000427:0x0008b5f8:	move	@m00, i
000427:0x0008b608:	inc	i
000427:0x0008b610:	ncalli	array<Param2<int,typename>>.Count()
000427:0x0008b618:	cmpi	i, #return
000427:0x0008b628:	bge	0x08b658
000429:0x0008b630:	icall	
000429:0x0008b640:	icall	
000429:0x0008b650:	jump	0x08b5f8
000429:0x0008b658:	rts
array<Param2<int,typename>>::RemoveItem()
000479:0x0008b688:	movefm	@c00, value
000479:0x0008b698:	icall	
000479:0x0008b6a8:	move	remove_index, #return
000481:0x0008b6b8:	cmpi	remove_index, _i0
000481:0x0008b6c8:	blt	0x08b6e0
000483:0x0008b6d0:	ncalli	array<Param2<int,typename>>.RemoveOrdered(remove_index)
000483:0x0008b6e0:	rts
array<Param2<int,typename>>::RemoveItemUnOrdered()
000489:0x0008b710:	movefm	@c00, value
000489:0x0008b720:	icall	
000489:0x0008b730:	move	remove_index, #return
000491:0x0008b740:	cmpi	remove_index, _i0
000491:0x0008b750:	blt	0x08b768
000493:0x0008b758:	ncalli	array<Param2<int,typename>>.Remove(remove_index)
000493:0x0008b768:	rts
array<Param2<int,typename>>::IsValidIndex()
000499:0x0008b770:	cmpi	index, _i-1
000499:0x0008b780:	ble	0x08b7c0
000499:0x0008b788:	ncalli	array<Param2<int,typename>>.Count()
000499:0x0008b790:	cmpi	index, #return
000499:0x0008b7a0:	bge	0x08b7c0
000499:0x0008b7a8:	imove	#return, 0x000001
000499:0x0008b7b8:	jump	0x08b7d0
000499:0x0008b7c0:	imove	#return, 0x000000
000499:0x0008b7d0:	rts
000499:0x0008b7d8:	rts
array<Param2<int,typename>>::Debug()
000525:0x0008b830:	ncalli	array<Param2<int,typename>>.Count()
000525:0x0008b838:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0008b868:	icall	Print(#return)
000526:0x0008b878:	imove	i, 0x000000
000526:0x0008b888:	jump	0x08b8a8
000526:0x0008b890:	move	@m00, i
000526:0x0008b8a0:	inc	i
000526:0x0008b8a8:	ncalli	array<Param2<int,typename>>.Count()
000526:0x0008b8b0:	cmpi	i, #return
000526:0x0008b8c0:	bge	0x08b938
000528:0x0008b8c8:	icall	
000528:0x0008b8d8:	movetm	item, #return
000529:0x0008b8e8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0008b918:	icall	Print(#return)
000529:0x0008b928:	release	item
000529:0x0008b930:	jump	0x08b890
000529:0x0008b938:	rts
array<Param2<int,typename>>::GetRandomIndex()
000544:0x0008b940:	ncalli	array<Param2<int,typename>>.Count()
000544:0x0008b948:	move	@m00, #return
000544:0x0008b958:	cmpi	@m00, _i0
000544:0x0008b968:	ble	0x08b9a0
000546:0x0008b970:	ncalli	array<Param2<int,typename>>.Count()
000546:0x0008b978:	icall	RandomInt(_i0, #return)
000546:0x0008b988:	move	#return, #return
000546:0x0008b998:	rts
000549:0x0008b9a0:	imove	#return, 0xffffffff
000549:0x0008b9b0:	rts
000549:0x0008b9b8:	rts
array<Param2<int,typename>>::GetRandomElement()
000563:0x0008b9c0:	call	
000563:0x0008b9d0:	icall	
000563:0x0008b9e0:	movetm	#return, #return
000563:0x0008b9f0:	rts
000563:0x0008b9f8:	rts
array<Param2<int,typename>>::SwapItems()
000568:0x0008ba28:	icall	
000568:0x0008ba38:	movetm	item1, #return
000569:0x0008ba48:	icall	
000569:0x0008ba58:	icall	
000570:0x0008ba68:	movefm	@c00, item1
000570:0x0008ba78:	icall	
000570:0x0008ba88:	release	item1
000570:0x0008ba90:	rts
array<Param2<int,typename>>::InsertArray()
000575:0x0008bae8:	imove	i, 0x000000
000575:0x0008baf8:	jump	0x08bb18
000575:0x0008bb00:	move	@m00, i
000575:0x0008bb10:	inc	i
000575:0x0008bb18:	ncalli	array<Param2<int,typename>>.Count()
000575:0x0008bb20:	cmpi	i, #return
000575:0x0008bb30:	bge	0x08bb88
000577:0x0008bb38:	icall	
000577:0x0008bb48:	movetm	item, #return
000578:0x0008bb58:	movefm	@c00, item
000578:0x0008bb68:	icall	
000578:0x0008bb78:	release	item
000578:0x0008bb80:	jump	0x08bb00
000578:0x0008bb88:	rts
array<Param2<int,typename>>::Invert()
000584:0x0008bc08:	imove	left, 0x000000
000585:0x0008bc18:	ncalli	array<Param2<int,typename>>.Count()
000585:0x0008bc20:	subi	right, #return, _i1
000586:0x0008bc30:	cmpi	right, _i0
000586:0x0008bc40:	ble	0x08bd00
000588:0x0008bc48:	cmpi	left, right
000588:0x0008bc58:	bge	0x08bd00
000590:0x0008bc60:	icall	
000590:0x0008bc70:	movetm	temp, #return
000591:0x0008bc80:	move	@m00, left
000591:0x0008bc90:	inc	left
000591:0x0008bc98:	icall	
000591:0x0008bca8:	icall	
000592:0x0008bcb8:	move	@m00, right
000592:0x0008bcc8:	dec	right
000592:0x0008bcd0:	movefm	@c00, temp
000592:0x0008bce0:	icall	
000592:0x0008bcf0:	release	temp
000592:0x0008bcf8:	jump	0x08bc48
000592:0x0008bd00:	rts
array<Param2<int,typename>>::MoveIndex()
000612:0x0008bd58:	ncalli	array<Param2<int,typename>>.Count()
000612:0x0008bd60:	move	count, #return
000613:0x0008bd70:	move	new_index, curr_index
000615:0x0008bd80:	cmpi	move_number, _i0
000615:0x0008bd90:	ble	0x08bdb8
000617:0x0008bd98:	addi	@m00, curr_index, move_number
000617:0x0008bda8:	move	new_index, @m00
000620:0x0008bdb8:	cmpi	move_number, _i0
000620:0x0008bdc8:	bge	0x08be70
000622:0x0008bdd0:	subi	@m00, curr_index, move_number
000622:0x0008bde0:	move	new_index, @m00
000624:0x0008bdf0:	cmpi	new_index, _i0
000624:0x0008be00:	bge	0x08be70
000626:0x0008be08:	subi	@m01, _i0, count
000626:0x0008be18:	cmpi	new_index, @m01
000626:0x0008be28:	bgt	0x08be50
000628:0x0008be30:	modi	@m00, new_index, count
000628:0x0008be40:	move	new_index, @m00
000631:0x0008be50:	addi	@m00, new_index, count
000631:0x0008be60:	move	new_index, @m00
000635:0x0008be70:	cmpi	new_index, count
000635:0x0008be80:	blt	0x08bea8
000637:0x0008be88:	modi	@m00, new_index, count
000637:0x0008be98:	move	new_index, @m00
000641:0x0008bea8:	move	#return, new_index
000641:0x0008beb8:	rts
000641:0x0008bec0:	rts
array<Param2<int,typename>>::ShuffleArray()
000646:0x0008bef0:	imove	i, 0x000000
000646:0x0008bf00:	jump	0x08bf20
000646:0x0008bf08:	move	@m00, i
000646:0x0008bf18:	inc	i
000646:0x0008bf20:	ncalli	array<Param2<int,typename>>.Count()
000646:0x0008bf28:	cmpi	i, #return
000646:0x0008bf38:	bge	0x08bf70
000648:0x0008bf40:	call	
000648:0x0008bf50:	call	
000648:0x0008bf68:	jump	0x08bf08
000648:0x0008bf70:	rts
array<Param2<int,typename>>::DifferentAtPosition()
000666:0x0008bfa0:	ncalli	array<Param2<int,typename>>.Count()
000666:0x0008bfa8:	move	@m00, #return
000666:0x0008bfb8:	push	#return
000666:0x0008bfc0:	ncalli	array<Param2<int,typename>>.Count()
000666:0x0008bfc8:	move	@m02, #return
000666:0x0008bfd8:	pop	#return
000666:0x0008bfe0:	cmpi	@m00, @m02
000666:0x0008bff0:	beq	0x08c020
000668:0x0008bff8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0008c008:	imove	#return, 0xffffffff
000669:0x0008c018:	rts
000672:0x0008c020:	imove	i, 0x000000
000672:0x0008c030:	jump	0x08c040
000672:0x0008c038:	inc	i
000672:0x0008c040:	ncalli	array<Param2<int,typename>>.Count()
000672:0x0008c048:	cmpi	i, #return
000672:0x0008c058:	bge	0x08c0e8
000674:0x0008c060:	icall	
000674:0x0008c070:	movec	@c00, #return
000674:0x0008c080:	pushc	#return
000674:0x0008c088:	icall	
000674:0x0008c098:	movec	@c02, #return
000674:0x0008c0a8:	popc	#return
000674:0x0008c0b0:	cmpc	@c00, @c02
000674:0x0008c0c0:	beq	0x08c0e0
000676:0x0008c0c8:	move	#return, i
000676:0x0008c0d8:	rts
000676:0x0008c0e0:	jump	0x08c038
000680:0x0008c0e8:	imove	#return, 0xffffffff
000680:0x0008c0f8:	rts
000680:0x0008c100:	rts
array<@Param2<int,typename>>::InsertAll()
000427:0x0008c518:	imove	i, 0x000000
000427:0x0008c528:	jump	0x08c548
000427:0x0008c530:	move	@m00, i
000427:0x0008c540:	inc	i
000427:0x0008c548:	ncalli	array<Param2<int,typename>>.Count()
000427:0x0008c550:	cmpi	i, #return
000427:0x0008c560:	bge	0x08c590
000429:0x0008c568:	icall	
000429:0x0008c578:	icall	
000429:0x0008c588:	jump	0x08c530
000429:0x0008c590:	rts
array<@Param2<int,typename>>::RemoveItem()
000479:0x0008c5c0:	movefm	@c00, value
000479:0x0008c5d0:	icall	
000479:0x0008c5e0:	move	remove_index, #return
000481:0x0008c5f0:	cmpi	remove_index, _i0
000481:0x0008c600:	blt	0x08c618
000483:0x0008c608:	ncalli	array<@Param2<int,typename>>.RemoveOrdered(remove_index)
000483:0x0008c618:	rts
array<@Param2<int,typename>>::RemoveItemUnOrdered()
000489:0x0008c648:	movefm	@c00, value
000489:0x0008c658:	icall	
000489:0x0008c668:	move	remove_index, #return
000491:0x0008c678:	cmpi	remove_index, _i0
000491:0x0008c688:	blt	0x08c6a0
000493:0x0008c690:	ncalli	array<@Param2<int,typename>>.Remove(remove_index)
000493:0x0008c6a0:	rts
array<@Param2<int,typename>>::IsValidIndex()
000499:0x0008c6a8:	cmpi	index, _i-1
000499:0x0008c6b8:	ble	0x08c6f8
000499:0x0008c6c0:	ncalli	array<@Param2<int,typename>>.Count()
000499:0x0008c6c8:	cmpi	index, #return
000499:0x0008c6d8:	bge	0x08c6f8
000499:0x0008c6e0:	imove	#return, 0x000001
000499:0x0008c6f0:	jump	0x08c708
000499:0x0008c6f8:	imove	#return, 0x000000
000499:0x0008c708:	rts
000499:0x0008c710:	rts
array<@Param2<int,typename>>::Debug()
000525:0x0008c768:	ncalli	array<@Param2<int,typename>>.Count()
000525:0x0008c770:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0008c7a0:	icall	Print(#return)
000526:0x0008c7b0:	imove	i, 0x000000
000526:0x0008c7c0:	jump	0x08c7e0
000526:0x0008c7c8:	move	@m00, i
000526:0x0008c7d8:	inc	i
000526:0x0008c7e0:	ncalli	array<@Param2<int,typename>>.Count()
000526:0x0008c7e8:	cmpi	i, #return
000526:0x0008c7f8:	bge	0x08c870
000528:0x0008c800:	icall	
000528:0x0008c810:	movetm	item, #return
000529:0x0008c820:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0008c850:	icall	Print(#return)
000529:0x0008c860:	release	item
000529:0x0008c868:	jump	0x08c7c8
000529:0x0008c870:	rts
array<@Param2<int,typename>>::GetRandomIndex()
000544:0x0008c878:	ncalli	array<@Param2<int,typename>>.Count()
000544:0x0008c880:	move	@m00, #return
000544:0x0008c890:	cmpi	@m00, _i0
000544:0x0008c8a0:	ble	0x08c8d8
000546:0x0008c8a8:	ncalli	array<@Param2<int,typename>>.Count()
000546:0x0008c8b0:	icall	RandomInt(_i0, #return)
000546:0x0008c8c0:	move	#return, #return
000546:0x0008c8d0:	rts
000549:0x0008c8d8:	imove	#return, 0xffffffff
000549:0x0008c8e8:	rts
000549:0x0008c8f0:	rts
array<@Param2<int,typename>>::GetRandomElement()
000563:0x0008c8f8:	call	
000563:0x0008c908:	icall	
000563:0x0008c918:	movetm	#return, #return
000563:0x0008c928:	rts
000563:0x0008c930:	rts
array<@Param2<int,typename>>::SwapItems()
000568:0x0008c960:	icall	
000568:0x0008c970:	movetm	item1, #return
000569:0x0008c980:	icall	
000569:0x0008c990:	icall	
000570:0x0008c9a0:	movefm	@c00, item1
000570:0x0008c9b0:	icall	
000570:0x0008c9c0:	release	item1
000570:0x0008c9c8:	rts
array<@Param2<int,typename>>::InsertArray()
000575:0x0008ca20:	imove	i, 0x000000
000575:0x0008ca30:	jump	0x08ca50
000575:0x0008ca38:	move	@m00, i
000575:0x0008ca48:	inc	i
000575:0x0008ca50:	ncalli	array<Param2<int,typename>>.Count()
000575:0x0008ca58:	cmpi	i, #return
000575:0x0008ca68:	bge	0x08cac0
000577:0x0008ca70:	icall	
000577:0x0008ca80:	movetm	item, #return
000578:0x0008ca90:	movefm	@c00, item
000578:0x0008caa0:	icall	
000578:0x0008cab0:	release	item
000578:0x0008cab8:	jump	0x08ca38
000578:0x0008cac0:	rts
array<@Param2<int,typename>>::Invert()
000584:0x0008cb40:	imove	left, 0x000000
000585:0x0008cb50:	ncalli	array<@Param2<int,typename>>.Count()
000585:0x0008cb58:	subi	right, #return, _i1
000586:0x0008cb68:	cmpi	right, _i0
000586:0x0008cb78:	ble	0x08cc38
000588:0x0008cb80:	cmpi	left, right
000588:0x0008cb90:	bge	0x08cc38
000590:0x0008cb98:	icall	
000590:0x0008cba8:	movetm	temp, #return
000591:0x0008cbb8:	move	@m00, left
000591:0x0008cbc8:	inc	left
000591:0x0008cbd0:	icall	
000591:0x0008cbe0:	icall	
000592:0x0008cbf0:	move	@m00, right
000592:0x0008cc00:	dec	right
000592:0x0008cc08:	movefm	@c00, temp
000592:0x0008cc18:	icall	
000592:0x0008cc28:	release	temp
000592:0x0008cc30:	jump	0x08cb80
000592:0x0008cc38:	rts
array<@Param2<int,typename>>::MoveIndex()
000612:0x0008cc90:	ncalli	array<@Param2<int,typename>>.Count()
000612:0x0008cc98:	move	count, #return
000613:0x0008cca8:	move	new_index, curr_index
000615:0x0008ccb8:	cmpi	move_number, _i0
000615:0x0008ccc8:	ble	0x08ccf0
000617:0x0008ccd0:	addi	@m00, curr_index, move_number
000617:0x0008cce0:	move	new_index, @m00
000620:0x0008ccf0:	cmpi	move_number, _i0
000620:0x0008cd00:	bge	0x08cda8
000622:0x0008cd08:	subi	@m00, curr_index, move_number
000622:0x0008cd18:	move	new_index, @m00
000624:0x0008cd28:	cmpi	new_index, _i0
000624:0x0008cd38:	bge	0x08cda8
000626:0x0008cd40:	subi	@m01, _i0, count
000626:0x0008cd50:	cmpi	new_index, @m01
000626:0x0008cd60:	bgt	0x08cd88
000628:0x0008cd68:	modi	@m00, new_index, count
000628:0x0008cd78:	move	new_index, @m00
000631:0x0008cd88:	addi	@m00, new_index, count
000631:0x0008cd98:	move	new_index, @m00
000635:0x0008cda8:	cmpi	new_index, count
000635:0x0008cdb8:	blt	0x08cde0
000637:0x0008cdc0:	modi	@m00, new_index, count
000637:0x0008cdd0:	move	new_index, @m00
000641:0x0008cde0:	move	#return, new_index
000641:0x0008cdf0:	rts
000641:0x0008cdf8:	rts
array<@Param2<int,typename>>::ShuffleArray()
000646:0x0008ce28:	imove	i, 0x000000
000646:0x0008ce38:	jump	0x08ce58
000646:0x0008ce40:	move	@m00, i
000646:0x0008ce50:	inc	i
000646:0x0008ce58:	ncalli	array<@Param2<int,typename>>.Count()
000646:0x0008ce60:	cmpi	i, #return
000646:0x0008ce70:	bge	0x08cea8
000648:0x0008ce78:	call	
000648:0x0008ce88:	call	
000648:0x0008cea0:	jump	0x08ce40
000648:0x0008cea8:	rts
array<@Param2<int,typename>>::DifferentAtPosition()
000666:0x0008ced8:	ncalli	array<@Param2<int,typename>>.Count()
000666:0x0008cee0:	move	@m00, #return
000666:0x0008cef0:	ncalli	array<Param2<int,typename>>.Count()
000666:0x0008cef8:	cmpi	@m00, #return
000666:0x0008cf08:	beq	0x08cf38
000668:0x0008cf10:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0008cf20:	imove	#return, 0xffffffff
000669:0x0008cf30:	rts
000672:0x0008cf38:	imove	i, 0x000000
000672:0x0008cf48:	jump	0x08cf58
000672:0x0008cf50:	inc	i
000672:0x0008cf58:	ncalli	array<Param2<int,typename>>.Count()
000672:0x0008cf60:	cmpi	i, #return
000672:0x0008cf70:	bge	0x08cfe0
000674:0x0008cf78:	icall	
000674:0x0008cf88:	movec	@c00, #return
000674:0x0008cf98:	icall	
000674:0x0008cfa8:	cmpc	@c00, #return
000674:0x0008cfb8:	beq	0x08cfd8
000676:0x0008cfc0:	move	#return, i
000676:0x0008cfd0:	rts
000676:0x0008cfd8:	jump	0x08cf50
000680:0x0008cfe0:	imove	#return, 0xffffffff
000680:0x0008cff0:	rts
000680:0x0008cff8:	rts
array<Param2<float,string>>::InsertAll()
000427:0x0008d838:	imove	i, 0x000000
000427:0x0008d848:	jump	0x08d868
000427:0x0008d850:	move	@m00, i
000427:0x0008d860:	inc	i
000427:0x0008d868:	ncalli	array<Param2<float,string>>.Count()
000427:0x0008d870:	cmpi	i, #return
000427:0x0008d880:	bge	0x08d8b0
000429:0x0008d888:	icall	
000429:0x0008d898:	icall	
000429:0x0008d8a8:	jump	0x08d850
000429:0x0008d8b0:	rts
array<Param2<float,string>>::RemoveItem()
000479:0x0008d8e0:	movefm	@c00, value
000479:0x0008d8f0:	icall	
000479:0x0008d900:	move	remove_index, #return
000481:0x0008d910:	cmpi	remove_index, _i0
000481:0x0008d920:	blt	0x08d938
000483:0x0008d928:	ncalli	array<Param2<float,string>>.RemoveOrdered(remove_index)
000483:0x0008d938:	rts
array<Param2<float,string>>::RemoveItemUnOrdered()
000489:0x0008d968:	movefm	@c00, value
000489:0x0008d978:	icall	
000489:0x0008d988:	move	remove_index, #return
000491:0x0008d998:	cmpi	remove_index, _i0
000491:0x0008d9a8:	blt	0x08d9c0
000493:0x0008d9b0:	ncalli	array<Param2<float,string>>.Remove(remove_index)
000493:0x0008d9c0:	rts
array<Param2<float,string>>::IsValidIndex()
000499:0x0008d9c8:	cmpi	index, _i-1
000499:0x0008d9d8:	ble	0x08da18
000499:0x0008d9e0:	ncalli	array<Param2<float,string>>.Count()
000499:0x0008d9e8:	cmpi	index, #return
000499:0x0008d9f8:	bge	0x08da18
000499:0x0008da00:	imove	#return, 0x000001
000499:0x0008da10:	jump	0x08da28
000499:0x0008da18:	imove	#return, 0x000000
000499:0x0008da28:	rts
000499:0x0008da30:	rts
array<Param2<float,string>>::Debug()
000525:0x0008da88:	ncalli	array<Param2<float,string>>.Count()
000525:0x0008da90:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0008dac0:	icall	Print(#return)
000526:0x0008dad0:	imove	i, 0x000000
000526:0x0008dae0:	jump	0x08db00
000526:0x0008dae8:	move	@m00, i
000526:0x0008daf8:	inc	i
000526:0x0008db00:	ncalli	array<Param2<float,string>>.Count()
000526:0x0008db08:	cmpi	i, #return
000526:0x0008db18:	bge	0x08db90
000528:0x0008db20:	icall	
000528:0x0008db30:	movetm	item, #return
000529:0x0008db40:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0008db70:	icall	Print(#return)
000529:0x0008db80:	release	item
000529:0x0008db88:	jump	0x08dae8
000529:0x0008db90:	rts
array<Param2<float,string>>::GetRandomIndex()
000544:0x0008db98:	ncalli	array<Param2<float,string>>.Count()
000544:0x0008dba0:	move	@m00, #return
000544:0x0008dbb0:	cmpi	@m00, _i0
000544:0x0008dbc0:	ble	0x08dbf8
000546:0x0008dbc8:	ncalli	array<Param2<float,string>>.Count()
000546:0x0008dbd0:	icall	RandomInt(_i0, #return)
000546:0x0008dbe0:	move	#return, #return
000546:0x0008dbf0:	rts
000549:0x0008dbf8:	imove	#return, 0xffffffff
000549:0x0008dc08:	rts
000549:0x0008dc10:	rts
array<Param2<float,string>>::GetRandomElement()
000563:0x0008dc18:	call	
000563:0x0008dc28:	icall	
000563:0x0008dc38:	movetm	#return, #return
000563:0x0008dc48:	rts
000563:0x0008dc50:	rts
array<Param2<float,string>>::SwapItems()
000568:0x0008dc80:	icall	
000568:0x0008dc90:	movetm	item1, #return
000569:0x0008dca0:	icall	
000569:0x0008dcb0:	icall	
000570:0x0008dcc0:	movefm	@c00, item1
000570:0x0008dcd0:	icall	
000570:0x0008dce0:	release	item1
000570:0x0008dce8:	rts
array<Param2<float,string>>::InsertArray()
000575:0x0008dd40:	imove	i, 0x000000
000575:0x0008dd50:	jump	0x08dd70
000575:0x0008dd58:	move	@m00, i
000575:0x0008dd68:	inc	i
000575:0x0008dd70:	ncalli	array<Param2<float,string>>.Count()
000575:0x0008dd78:	cmpi	i, #return
000575:0x0008dd88:	bge	0x08dde0
000577:0x0008dd90:	icall	
000577:0x0008dda0:	movetm	item, #return
000578:0x0008ddb0:	movefm	@c00, item
000578:0x0008ddc0:	icall	
000578:0x0008ddd0:	release	item
000578:0x0008ddd8:	jump	0x08dd58
000578:0x0008dde0:	rts
array<Param2<float,string>>::Invert()
000584:0x0008de60:	imove	left, 0x000000
000585:0x0008de70:	ncalli	array<Param2<float,string>>.Count()
000585:0x0008de78:	subi	right, #return, _i1
000586:0x0008de88:	cmpi	right, _i0
000586:0x0008de98:	ble	0x08df58
000588:0x0008dea0:	cmpi	left, right
000588:0x0008deb0:	bge	0x08df58
000590:0x0008deb8:	icall	
000590:0x0008dec8:	movetm	temp, #return
000591:0x0008ded8:	move	@m00, left
000591:0x0008dee8:	inc	left
000591:0x0008def0:	icall	
000591:0x0008df00:	icall	
000592:0x0008df10:	move	@m00, right
000592:0x0008df20:	dec	right
000592:0x0008df28:	movefm	@c00, temp
000592:0x0008df38:	icall	
000592:0x0008df48:	release	temp
000592:0x0008df50:	jump	0x08dea0
000592:0x0008df58:	rts
array<Param2<float,string>>::MoveIndex()
000612:0x0008dfb0:	ncalli	array<Param2<float,string>>.Count()
000612:0x0008dfb8:	move	count, #return
000613:0x0008dfc8:	move	new_index, curr_index
000615:0x0008dfd8:	cmpi	move_number, _i0
000615:0x0008dfe8:	ble	0x08e010
000617:0x0008dff0:	addi	@m00, curr_index, move_number
000617:0x0008e000:	move	new_index, @m00
000620:0x0008e010:	cmpi	move_number, _i0
000620:0x0008e020:	bge	0x08e0c8
000622:0x0008e028:	subi	@m00, curr_index, move_number
000622:0x0008e038:	move	new_index, @m00
000624:0x0008e048:	cmpi	new_index, _i0
000624:0x0008e058:	bge	0x08e0c8
000626:0x0008e060:	subi	@m01, _i0, count
000626:0x0008e070:	cmpi	new_index, @m01
000626:0x0008e080:	bgt	0x08e0a8
000628:0x0008e088:	modi	@m00, new_index, count
000628:0x0008e098:	move	new_index, @m00
000631:0x0008e0a8:	addi	@m00, new_index, count
000631:0x0008e0b8:	move	new_index, @m00
000635:0x0008e0c8:	cmpi	new_index, count
000635:0x0008e0d8:	blt	0x08e100
000637:0x0008e0e0:	modi	@m00, new_index, count
000637:0x0008e0f0:	move	new_index, @m00
000641:0x0008e100:	move	#return, new_index
000641:0x0008e110:	rts
000641:0x0008e118:	rts
array<Param2<float,string>>::ShuffleArray()
000646:0x0008e148:	imove	i, 0x000000
000646:0x0008e158:	jump	0x08e178
000646:0x0008e160:	move	@m00, i
000646:0x0008e170:	inc	i
000646:0x0008e178:	ncalli	array<Param2<float,string>>.Count()
000646:0x0008e180:	cmpi	i, #return
000646:0x0008e190:	bge	0x08e1c8
000648:0x0008e198:	call	
000648:0x0008e1a8:	call	
000648:0x0008e1c0:	jump	0x08e160
000648:0x0008e1c8:	rts
array<Param2<float,string>>::DifferentAtPosition()
000666:0x0008e1f8:	ncalli	array<Param2<float,string>>.Count()
000666:0x0008e200:	move	@m00, #return
000666:0x0008e210:	push	#return
000666:0x0008e218:	ncalli	array<Param2<float,string>>.Count()
000666:0x0008e220:	move	@m02, #return
000666:0x0008e230:	pop	#return
000666:0x0008e238:	cmpi	@m00, @m02
000666:0x0008e248:	beq	0x08e278
000668:0x0008e250:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0008e260:	imove	#return, 0xffffffff
000669:0x0008e270:	rts
000672:0x0008e278:	imove	i, 0x000000
000672:0x0008e288:	jump	0x08e298
000672:0x0008e290:	inc	i
000672:0x0008e298:	ncalli	array<Param2<float,string>>.Count()
000672:0x0008e2a0:	cmpi	i, #return
000672:0x0008e2b0:	bge	0x08e340
000674:0x0008e2b8:	icall	
000674:0x0008e2c8:	movec	@c00, #return
000674:0x0008e2d8:	pushc	#return
000674:0x0008e2e0:	icall	
000674:0x0008e2f0:	movec	@c02, #return
000674:0x0008e300:	popc	#return
000674:0x0008e308:	cmpc	@c00, @c02
000674:0x0008e318:	beq	0x08e338
000676:0x0008e320:	move	#return, i
000676:0x0008e330:	rts
000676:0x0008e338:	jump	0x08e290
000680:0x0008e340:	imove	#return, 0xffffffff
000680:0x0008e350:	rts
000680:0x0008e358:	rts
array<@Param2<float,string>>::InsertAll()
000427:0x0008e770:	imove	i, 0x000000
000427:0x0008e780:	jump	0x08e7a0
000427:0x0008e788:	move	@m00, i
000427:0x0008e798:	inc	i
000427:0x0008e7a0:	ncalli	array<Param2<float,string>>.Count()
000427:0x0008e7a8:	cmpi	i, #return
000427:0x0008e7b8:	bge	0x08e7e8
000429:0x0008e7c0:	icall	
000429:0x0008e7d0:	icall	
000429:0x0008e7e0:	jump	0x08e788
000429:0x0008e7e8:	rts
array<@Param2<float,string>>::RemoveItem()
000479:0x0008e818:	movefm	@c00, value
000479:0x0008e828:	icall	
000479:0x0008e838:	move	remove_index, #return
000481:0x0008e848:	cmpi	remove_index, _i0
000481:0x0008e858:	blt	0x08e870
000483:0x0008e860:	ncalli	array<@Param2<float,string>>.RemoveOrdered(remove_index)
000483:0x0008e870:	rts
array<@Param2<float,string>>::RemoveItemUnOrdered()
000489:0x0008e8a0:	movefm	@c00, value
000489:0x0008e8b0:	icall	
000489:0x0008e8c0:	move	remove_index, #return
000491:0x0008e8d0:	cmpi	remove_index, _i0
000491:0x0008e8e0:	blt	0x08e8f8
000493:0x0008e8e8:	ncalli	array<@Param2<float,string>>.Remove(remove_index)
000493:0x0008e8f8:	rts
array<@Param2<float,string>>::IsValidIndex()
000499:0x0008e900:	cmpi	index, _i-1
000499:0x0008e910:	ble	0x08e950
000499:0x0008e918:	ncalli	array<@Param2<float,string>>.Count()
000499:0x0008e920:	cmpi	index, #return
000499:0x0008e930:	bge	0x08e950
000499:0x0008e938:	imove	#return, 0x000001
000499:0x0008e948:	jump	0x08e960
000499:0x0008e950:	imove	#return, 0x000000
000499:0x0008e960:	rts
000499:0x0008e968:	rts
array<@Param2<float,string>>::Debug()
000525:0x0008e9c0:	ncalli	array<@Param2<float,string>>.Count()
000525:0x0008e9c8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0008e9f8:	icall	Print(#return)
000526:0x0008ea08:	imove	i, 0x000000
000526:0x0008ea18:	jump	0x08ea38
000526:0x0008ea20:	move	@m00, i
000526:0x0008ea30:	inc	i
000526:0x0008ea38:	ncalli	array<@Param2<float,string>>.Count()
000526:0x0008ea40:	cmpi	i, #return
000526:0x0008ea50:	bge	0x08eac8
000528:0x0008ea58:	icall	
000528:0x0008ea68:	movetm	item, #return
000529:0x0008ea78:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0008eaa8:	icall	Print(#return)
000529:0x0008eab8:	release	item
000529:0x0008eac0:	jump	0x08ea20
000529:0x0008eac8:	rts
array<@Param2<float,string>>::GetRandomIndex()
000544:0x0008ead0:	ncalli	array<@Param2<float,string>>.Count()
000544:0x0008ead8:	move	@m00, #return
000544:0x0008eae8:	cmpi	@m00, _i0
000544:0x0008eaf8:	ble	0x08eb30
000546:0x0008eb00:	ncalli	array<@Param2<float,string>>.Count()
000546:0x0008eb08:	icall	RandomInt(_i0, #return)
000546:0x0008eb18:	move	#return, #return
000546:0x0008eb28:	rts
000549:0x0008eb30:	imove	#return, 0xffffffff
000549:0x0008eb40:	rts
000549:0x0008eb48:	rts
array<@Param2<float,string>>::GetRandomElement()
000563:0x0008eb50:	call	
000563:0x0008eb60:	icall	
000563:0x0008eb70:	movetm	#return, #return
000563:0x0008eb80:	rts
000563:0x0008eb88:	rts
array<@Param2<float,string>>::SwapItems()
000568:0x0008ebb8:	icall	
000568:0x0008ebc8:	movetm	item1, #return
000569:0x0008ebd8:	icall	
000569:0x0008ebe8:	icall	
000570:0x0008ebf8:	movefm	@c00, item1
000570:0x0008ec08:	icall	
000570:0x0008ec18:	release	item1
000570:0x0008ec20:	rts
array<@Param2<float,string>>::InsertArray()
000575:0x0008ec78:	imove	i, 0x000000
000575:0x0008ec88:	jump	0x08eca8
000575:0x0008ec90:	move	@m00, i
000575:0x0008eca0:	inc	i
000575:0x0008eca8:	ncalli	array<Param2<float,string>>.Count()
000575:0x0008ecb0:	cmpi	i, #return
000575:0x0008ecc0:	bge	0x08ed18
000577:0x0008ecc8:	icall	
000577:0x0008ecd8:	movetm	item, #return
000578:0x0008ece8:	movefm	@c00, item
000578:0x0008ecf8:	icall	
000578:0x0008ed08:	release	item
000578:0x0008ed10:	jump	0x08ec90
000578:0x0008ed18:	rts
array<@Param2<float,string>>::Invert()
000584:0x0008ed98:	imove	left, 0x000000
000585:0x0008eda8:	ncalli	array<@Param2<float,string>>.Count()
000585:0x0008edb0:	subi	right, #return, _i1
000586:0x0008edc0:	cmpi	right, _i0
000586:0x0008edd0:	ble	0x08ee90
000588:0x0008edd8:	cmpi	left, right
000588:0x0008ede8:	bge	0x08ee90
000590:0x0008edf0:	icall	
000590:0x0008ee00:	movetm	temp, #return
000591:0x0008ee10:	move	@m00, left
000591:0x0008ee20:	inc	left
000591:0x0008ee28:	icall	
000591:0x0008ee38:	icall	
000592:0x0008ee48:	move	@m00, right
000592:0x0008ee58:	dec	right
000592:0x0008ee60:	movefm	@c00, temp
000592:0x0008ee70:	icall	
000592:0x0008ee80:	release	temp
000592:0x0008ee88:	jump	0x08edd8
000592:0x0008ee90:	rts
array<@Param2<float,string>>::MoveIndex()
000612:0x0008eee8:	ncalli	array<@Param2<float,string>>.Count()
000612:0x0008eef0:	move	count, #return
000613:0x0008ef00:	move	new_index, curr_index
000615:0x0008ef10:	cmpi	move_number, _i0
000615:0x0008ef20:	ble	0x08ef48
000617:0x0008ef28:	addi	@m00, curr_index, move_number
000617:0x0008ef38:	move	new_index, @m00
000620:0x0008ef48:	cmpi	move_number, _i0
000620:0x0008ef58:	bge	0x08f000
000622:0x0008ef60:	subi	@m00, curr_index, move_number
000622:0x0008ef70:	move	new_index, @m00
000624:0x0008ef80:	cmpi	new_index, _i0
000624:0x0008ef90:	bge	0x08f000
000626:0x0008ef98:	subi	@m01, _i0, count
000626:0x0008efa8:	cmpi	new_index, @m01
000626:0x0008efb8:	bgt	0x08efe0
000628:0x0008efc0:	modi	@m00, new_index, count
000628:0x0008efd0:	move	new_index, @m00
000631:0x0008efe0:	addi	@m00, new_index, count
000631:0x0008eff0:	move	new_index, @m00
000635:0x0008f000:	cmpi	new_index, count
000635:0x0008f010:	blt	0x08f038
000637:0x0008f018:	modi	@m00, new_index, count
000637:0x0008f028:	move	new_index, @m00
000641:0x0008f038:	move	#return, new_index
000641:0x0008f048:	rts
000641:0x0008f050:	rts
array<@Param2<float,string>>::ShuffleArray()
000646:0x0008f080:	imove	i, 0x000000
000646:0x0008f090:	jump	0x08f0b0
000646:0x0008f098:	move	@m00, i
000646:0x0008f0a8:	inc	i
000646:0x0008f0b0:	ncalli	array<@Param2<float,string>>.Count()
000646:0x0008f0b8:	cmpi	i, #return
000646:0x0008f0c8:	bge	0x08f100
000648:0x0008f0d0:	call	
000648:0x0008f0e0:	call	
000648:0x0008f0f8:	jump	0x08f098
000648:0x0008f100:	rts
array<@Param2<float,string>>::DifferentAtPosition()
000666:0x0008f130:	ncalli	array<@Param2<float,string>>.Count()
000666:0x0008f138:	move	@m00, #return
000666:0x0008f148:	ncalli	array<Param2<float,string>>.Count()
000666:0x0008f150:	cmpi	@m00, #return
000666:0x0008f160:	beq	0x08f190
000668:0x0008f168:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x0008f178:	imove	#return, 0xffffffff
000669:0x0008f188:	rts
000672:0x0008f190:	imove	i, 0x000000
000672:0x0008f1a0:	jump	0x08f1b0
000672:0x0008f1a8:	inc	i
000672:0x0008f1b0:	ncalli	array<Param2<float,string>>.Count()
000672:0x0008f1b8:	cmpi	i, #return
000672:0x0008f1c8:	bge	0x08f238
000674:0x0008f1d0:	icall	
000674:0x0008f1e0:	movec	@c00, #return
000674:0x0008f1f0:	icall	
000674:0x0008f200:	cmpc	@c00, #return
000674:0x0008f210:	beq	0x08f230
000676:0x0008f218:	move	#return, i
000676:0x0008f228:	rts
000676:0x0008f230:	jump	0x08f1a8
000680:0x0008f238:	imove	#return, 0xffffffff
000680:0x0008f248:	rts
000680:0x0008f250:	rts
array<Param2<int,string>>::InsertAll()
000427:0x0008fa90:	imove	i, 0x000000
000427:0x0008faa0:	jump	0x08fac0
000427:0x0008faa8:	move	@m00, i
000427:0x0008fab8:	inc	i
000427:0x0008fac0:	ncalli	array<Param2<int,string>>.Count()
000427:0x0008fac8:	cmpi	i, #return
000427:0x0008fad8:	bge	0x08fb08
000429:0x0008fae0:	icall	
000429:0x0008faf0:	icall	
000429:0x0008fb00:	jump	0x08faa8
000429:0x0008fb08:	rts
array<Param2<int,string>>::RemoveItem()
000479:0x0008fb38:	movefm	@c00, value
000479:0x0008fb48:	icall	
000479:0x0008fb58:	move	remove_index, #return
000481:0x0008fb68:	cmpi	remove_index, _i0
000481:0x0008fb78:	blt	0x08fb90
000483:0x0008fb80:	ncalli	array<Param2<int,string>>.RemoveOrdered(remove_index)
000483:0x0008fb90:	rts
array<Param2<int,string>>::RemoveItemUnOrdered()
000489:0x0008fbc0:	movefm	@c00, value
000489:0x0008fbd0:	icall	
000489:0x0008fbe0:	move	remove_index, #return
000491:0x0008fbf0:	cmpi	remove_index, _i0
000491:0x0008fc00:	blt	0x08fc18
000493:0x0008fc08:	ncalli	array<Param2<int,string>>.Remove(remove_index)
000493:0x0008fc18:	rts
array<Param2<int,string>>::IsValidIndex()
000499:0x0008fc20:	cmpi	index, _i-1
000499:0x0008fc30:	ble	0x08fc70
000499:0x0008fc38:	ncalli	array<Param2<int,string>>.Count()
000499:0x0008fc40:	cmpi	index, #return
000499:0x0008fc50:	bge	0x08fc70
000499:0x0008fc58:	imove	#return, 0x000001
000499:0x0008fc68:	jump	0x08fc80
000499:0x0008fc70:	imove	#return, 0x000000
000499:0x0008fc80:	rts
000499:0x0008fc88:	rts
array<Param2<int,string>>::Debug()
000525:0x0008fce0:	ncalli	array<Param2<int,string>>.Count()
000525:0x0008fce8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x0008fd18:	icall	Print(#return)
000526:0x0008fd28:	imove	i, 0x000000
000526:0x0008fd38:	jump	0x08fd58
000526:0x0008fd40:	move	@m00, i
000526:0x0008fd50:	inc	i
000526:0x0008fd58:	ncalli	array<Param2<int,string>>.Count()
000526:0x0008fd60:	cmpi	i, #return
000526:0x0008fd70:	bge	0x08fde8
000528:0x0008fd78:	icall	
000528:0x0008fd88:	movetm	item, #return
000529:0x0008fd98:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x0008fdc8:	icall	Print(#return)
000529:0x0008fdd8:	release	item
000529:0x0008fde0:	jump	0x08fd40
000529:0x0008fde8:	rts
array<Param2<int,string>>::GetRandomIndex()
000544:0x0008fdf0:	ncalli	array<Param2<int,string>>.Count()
000544:0x0008fdf8:	move	@m00, #return
000544:0x0008fe08:	cmpi	@m00, _i0
000544:0x0008fe18:	ble	0x08fe50
000546:0x0008fe20:	ncalli	array<Param2<int,string>>.Count()
000546:0x0008fe28:	icall	RandomInt(_i0, #return)
000546:0x0008fe38:	move	#return, #return
000546:0x0008fe48:	rts
000549:0x0008fe50:	imove	#return, 0xffffffff
000549:0x0008fe60:	rts
000549:0x0008fe68:	rts
array<Param2<int,string>>::GetRandomElement()
000563:0x0008fe70:	call	
000563:0x0008fe80:	icall	
000563:0x0008fe90:	movetm	#return, #return
000563:0x0008fea0:	rts
000563:0x0008fea8:	rts
array<Param2<int,string>>::SwapItems()
000568:0x0008fed8:	icall	
000568:0x0008fee8:	movetm	item1, #return
000569:0x0008fef8:	icall	
000569:0x0008ff08:	icall	
000570:0x0008ff18:	movefm	@c00, item1
000570:0x0008ff28:	icall	
000570:0x0008ff38:	release	item1
000570:0x0008ff40:	rts
array<Param2<int,string>>::InsertArray()
000575:0x0008ff98:	imove	i, 0x000000
000575:0x0008ffa8:	jump	0x08ffc8
000575:0x0008ffb0:	move	@m00, i
000575:0x0008ffc0:	inc	i
000575:0x0008ffc8:	ncalli	array<Param2<int,string>>.Count()
000575:0x0008ffd0:	cmpi	i, #return
000575:0x0008ffe0:	bge	0x090038
000577:0x0008ffe8:	icall	
000577:0x0008fff8:	movetm	item, #return
000578:0x00090008:	movefm	@c00, item
000578:0x00090018:	icall	
000578:0x00090028:	release	item
000578:0x00090030:	jump	0x08ffb0
000578:0x00090038:	rts
array<Param2<int,string>>::Invert()
000584:0x000900b8:	imove	left, 0x000000
000585:0x000900c8:	ncalli	array<Param2<int,string>>.Count()
000585:0x000900d0:	subi	right, #return, _i1
000586:0x000900e0:	cmpi	right, _i0
000586:0x000900f0:	ble	0x0901b0
000588:0x000900f8:	cmpi	left, right
000588:0x00090108:	bge	0x0901b0
000590:0x00090110:	icall	
000590:0x00090120:	movetm	temp, #return
000591:0x00090130:	move	@m00, left
000591:0x00090140:	inc	left
000591:0x00090148:	icall	
000591:0x00090158:	icall	
000592:0x00090168:	move	@m00, right
000592:0x00090178:	dec	right
000592:0x00090180:	movefm	@c00, temp
000592:0x00090190:	icall	
000592:0x000901a0:	release	temp
000592:0x000901a8:	jump	0x0900f8
000592:0x000901b0:	rts
array<Param2<int,string>>::MoveIndex()
000612:0x00090208:	ncalli	array<Param2<int,string>>.Count()
000612:0x00090210:	move	count, #return
000613:0x00090220:	move	new_index, curr_index
000615:0x00090230:	cmpi	move_number, _i0
000615:0x00090240:	ble	0x090268
000617:0x00090248:	addi	@m00, curr_index, move_number
000617:0x00090258:	move	new_index, @m00
000620:0x00090268:	cmpi	move_number, _i0
000620:0x00090278:	bge	0x090320
000622:0x00090280:	subi	@m00, curr_index, move_number
000622:0x00090290:	move	new_index, @m00
000624:0x000902a0:	cmpi	new_index, _i0
000624:0x000902b0:	bge	0x090320
000626:0x000902b8:	subi	@m01, _i0, count
000626:0x000902c8:	cmpi	new_index, @m01
000626:0x000902d8:	bgt	0x090300
000628:0x000902e0:	modi	@m00, new_index, count
000628:0x000902f0:	move	new_index, @m00
000631:0x00090300:	addi	@m00, new_index, count
000631:0x00090310:	move	new_index, @m00
000635:0x00090320:	cmpi	new_index, count
000635:0x00090330:	blt	0x090358
000637:0x00090338:	modi	@m00, new_index, count
000637:0x00090348:	move	new_index, @m00
000641:0x00090358:	move	#return, new_index
000641:0x00090368:	rts
000641:0x00090370:	rts
array<Param2<int,string>>::ShuffleArray()
000646:0x000903a0:	imove	i, 0x000000
000646:0x000903b0:	jump	0x0903d0
000646:0x000903b8:	move	@m00, i
000646:0x000903c8:	inc	i
000646:0x000903d0:	ncalli	array<Param2<int,string>>.Count()
000646:0x000903d8:	cmpi	i, #return
000646:0x000903e8:	bge	0x090420
000648:0x000903f0:	call	
000648:0x00090400:	call	
000648:0x00090418:	jump	0x0903b8
000648:0x00090420:	rts
array<Param2<int,string>>::DifferentAtPosition()
000666:0x00090450:	ncalli	array<Param2<int,string>>.Count()
000666:0x00090458:	move	@m00, #return
000666:0x00090468:	push	#return
000666:0x00090470:	ncalli	array<Param2<int,string>>.Count()
000666:0x00090478:	move	@m02, #return
000666:0x00090488:	pop	#return
000666:0x00090490:	cmpi	@m00, @m02
000666:0x000904a0:	beq	0x0904d0
000668:0x000904a8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x000904b8:	imove	#return, 0xffffffff
000669:0x000904c8:	rts
000672:0x000904d0:	imove	i, 0x000000
000672:0x000904e0:	jump	0x0904f0
000672:0x000904e8:	inc	i
000672:0x000904f0:	ncalli	array<Param2<int,string>>.Count()
000672:0x000904f8:	cmpi	i, #return
000672:0x00090508:	bge	0x090598
000674:0x00090510:	icall	
000674:0x00090520:	movec	@c00, #return
000674:0x00090530:	pushc	#return
000674:0x00090538:	icall	
000674:0x00090548:	movec	@c02, #return
000674:0x00090558:	popc	#return
000674:0x00090560:	cmpc	@c00, @c02
000674:0x00090570:	beq	0x090590
000676:0x00090578:	move	#return, i
000676:0x00090588:	rts
000676:0x00090590:	jump	0x0904e8
000680:0x00090598:	imove	#return, 0xffffffff
000680:0x000905a8:	rts
000680:0x000905b0:	rts
array<@Param2<int,string>>::InsertAll()
000427:0x000909c8:	imove	i, 0x000000
000427:0x000909d8:	jump	0x0909f8
000427:0x000909e0:	move	@m00, i
000427:0x000909f0:	inc	i
000427:0x000909f8:	ncalli	array<Param2<int,string>>.Count()
000427:0x00090a00:	cmpi	i, #return
000427:0x00090a10:	bge	0x090a40
000429:0x00090a18:	icall	
000429:0x00090a28:	icall	
000429:0x00090a38:	jump	0x0909e0
000429:0x00090a40:	rts
array<@Param2<int,string>>::RemoveItem()
000479:0x00090a70:	movefm	@c00, value
000479:0x00090a80:	icall	
000479:0x00090a90:	move	remove_index, #return
000481:0x00090aa0:	cmpi	remove_index, _i0
000481:0x00090ab0:	blt	0x090ac8
000483:0x00090ab8:	ncalli	array<@Param2<int,string>>.RemoveOrdered(remove_index)
000483:0x00090ac8:	rts
array<@Param2<int,string>>::RemoveItemUnOrdered()
000489:0x00090af8:	movefm	@c00, value
000489:0x00090b08:	icall	
000489:0x00090b18:	move	remove_index, #return
000491:0x00090b28:	cmpi	remove_index, _i0
000491:0x00090b38:	blt	0x090b50
000493:0x00090b40:	ncalli	array<@Param2<int,string>>.Remove(remove_index)
000493:0x00090b50:	rts
array<@Param2<int,string>>::IsValidIndex()
000499:0x00090b58:	cmpi	index, _i-1
000499:0x00090b68:	ble	0x090ba8
000499:0x00090b70:	ncalli	array<@Param2<int,string>>.Count()
000499:0x00090b78:	cmpi	index, #return
000499:0x00090b88:	bge	0x090ba8
000499:0x00090b90:	imove	#return, 0x000001
000499:0x00090ba0:	jump	0x090bb8
000499:0x00090ba8:	imove	#return, 0x000000
000499:0x00090bb8:	rts
000499:0x00090bc0:	rts
array<@Param2<int,string>>::Debug()
000525:0x00090c18:	ncalli	array<@Param2<int,string>>.Count()
000525:0x00090c20:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00090c50:	icall	Print(#return)
000526:0x00090c60:	imove	i, 0x000000
000526:0x00090c70:	jump	0x090c90
000526:0x00090c78:	move	@m00, i
000526:0x00090c88:	inc	i
000526:0x00090c90:	ncalli	array<@Param2<int,string>>.Count()
000526:0x00090c98:	cmpi	i, #return
000526:0x00090ca8:	bge	0x090d20
000528:0x00090cb0:	icall	
000528:0x00090cc0:	movetm	item, #return
000529:0x00090cd0:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00090d00:	icall	Print(#return)
000529:0x00090d10:	release	item
000529:0x00090d18:	jump	0x090c78
000529:0x00090d20:	rts
array<@Param2<int,string>>::GetRandomIndex()
000544:0x00090d28:	ncalli	array<@Param2<int,string>>.Count()
000544:0x00090d30:	move	@m00, #return
000544:0x00090d40:	cmpi	@m00, _i0
000544:0x00090d50:	ble	0x090d88
000546:0x00090d58:	ncalli	array<@Param2<int,string>>.Count()
000546:0x00090d60:	icall	RandomInt(_i0, #return)
000546:0x00090d70:	move	#return, #return
000546:0x00090d80:	rts
000549:0x00090d88:	imove	#return, 0xffffffff
000549:0x00090d98:	rts
000549:0x00090da0:	rts
array<@Param2<int,string>>::GetRandomElement()
000563:0x00090da8:	call	
000563:0x00090db8:	icall	
000563:0x00090dc8:	movetm	#return, #return
000563:0x00090dd8:	rts
000563:0x00090de0:	rts
array<@Param2<int,string>>::SwapItems()
000568:0x00090e10:	icall	
000568:0x00090e20:	movetm	item1, #return
000569:0x00090e30:	icall	
000569:0x00090e40:	icall	
000570:0x00090e50:	movefm	@c00, item1
000570:0x00090e60:	icall	
000570:0x00090e70:	release	item1
000570:0x00090e78:	rts
array<@Param2<int,string>>::InsertArray()
000575:0x00090ed0:	imove	i, 0x000000
000575:0x00090ee0:	jump	0x090f00
000575:0x00090ee8:	move	@m00, i
000575:0x00090ef8:	inc	i
000575:0x00090f00:	ncalli	array<Param2<int,string>>.Count()
000575:0x00090f08:	cmpi	i, #return
000575:0x00090f18:	bge	0x090f70
000577:0x00090f20:	icall	
000577:0x00090f30:	movetm	item, #return
000578:0x00090f40:	movefm	@c00, item
000578:0x00090f50:	icall	
000578:0x00090f60:	release	item
000578:0x00090f68:	jump	0x090ee8
000578:0x00090f70:	rts
array<@Param2<int,string>>::Invert()
000584:0x00090ff0:	imove	left, 0x000000
000585:0x00091000:	ncalli	array<@Param2<int,string>>.Count()
000585:0x00091008:	subi	right, #return, _i1
000586:0x00091018:	cmpi	right, _i0
000586:0x00091028:	ble	0x0910e8
000588:0x00091030:	cmpi	left, right
000588:0x00091040:	bge	0x0910e8
000590:0x00091048:	icall	
000590:0x00091058:	movetm	temp, #return
000591:0x00091068:	move	@m00, left
000591:0x00091078:	inc	left
000591:0x00091080:	icall	
000591:0x00091090:	icall	
000592:0x000910a0:	move	@m00, right
000592:0x000910b0:	dec	right
000592:0x000910b8:	movefm	@c00, temp
000592:0x000910c8:	icall	
000592:0x000910d8:	release	temp
000592:0x000910e0:	jump	0x091030
000592:0x000910e8:	rts
array<@Param2<int,string>>::MoveIndex()
000612:0x00091140:	ncalli	array<@Param2<int,string>>.Count()
000612:0x00091148:	move	count, #return
000613:0x00091158:	move	new_index, curr_index
000615:0x00091168:	cmpi	move_number, _i0
000615:0x00091178:	ble	0x0911a0
000617:0x00091180:	addi	@m00, curr_index, move_number
000617:0x00091190:	move	new_index, @m00
000620:0x000911a0:	cmpi	move_number, _i0
000620:0x000911b0:	bge	0x091258
000622:0x000911b8:	subi	@m00, curr_index, move_number
000622:0x000911c8:	move	new_index, @m00
000624:0x000911d8:	cmpi	new_index, _i0
000624:0x000911e8:	bge	0x091258
000626:0x000911f0:	subi	@m01, _i0, count
000626:0x00091200:	cmpi	new_index, @m01
000626:0x00091210:	bgt	0x091238
000628:0x00091218:	modi	@m00, new_index, count
000628:0x00091228:	move	new_index, @m00
000631:0x00091238:	addi	@m00, new_index, count
000631:0x00091248:	move	new_index, @m00
000635:0x00091258:	cmpi	new_index, count
000635:0x00091268:	blt	0x091290
000637:0x00091270:	modi	@m00, new_index, count
000637:0x00091280:	move	new_index, @m00
000641:0x00091290:	move	#return, new_index
000641:0x000912a0:	rts
000641:0x000912a8:	rts
array<@Param2<int,string>>::ShuffleArray()
000646:0x000912d8:	imove	i, 0x000000
000646:0x000912e8:	jump	0x091308
000646:0x000912f0:	move	@m00, i
000646:0x00091300:	inc	i
000646:0x00091308:	ncalli	array<@Param2<int,string>>.Count()
000646:0x00091310:	cmpi	i, #return
000646:0x00091320:	bge	0x091358
000648:0x00091328:	call	
000648:0x00091338:	call	
000648:0x00091350:	jump	0x0912f0
000648:0x00091358:	rts
array<@Param2<int,string>>::DifferentAtPosition()
000666:0x00091388:	ncalli	array<@Param2<int,string>>.Count()
000666:0x00091390:	move	@m00, #return
000666:0x000913a0:	ncalli	array<Param2<int,string>>.Count()
000666:0x000913a8:	cmpi	@m00, #return
000666:0x000913b8:	beq	0x0913e8
000668:0x000913c0:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x000913d0:	imove	#return, 0xffffffff
000669:0x000913e0:	rts
000672:0x000913e8:	imove	i, 0x000000
000672:0x000913f8:	jump	0x091408
000672:0x00091400:	inc	i
000672:0x00091408:	ncalli	array<Param2<int,string>>.Count()
000672:0x00091410:	cmpi	i, #return
000672:0x00091420:	bge	0x091490
000674:0x00091428:	icall	
000674:0x00091438:	movec	@c00, #return
000674:0x00091448:	icall	
000674:0x00091458:	cmpc	@c00, #return
000674:0x00091468:	beq	0x091488
000676:0x00091470:	move	#return, i
000676:0x00091480:	rts
000676:0x00091488:	jump	0x091400
000680:0x00091490:	imove	#return, 0xffffffff
000680:0x000914a0:	rts
000680:0x000914a8:	rts
array<IEntity>::InsertAll()
000427:0x00091aa0:	imove	i, 0x000000
000427:0x00091ab0:	jump	0x091ad0
000427:0x00091ab8:	move	@m00, i
000427:0x00091ac8:	inc	i
000427:0x00091ad0:	ncalli	array<IEntity>.Count()
000427:0x00091ad8:	cmpi	i, #return
000427:0x00091ae8:	bge	0x091b18
000429:0x00091af0:	icall	
000429:0x00091b00:	icall	
000429:0x00091b10:	jump	0x091ab8
000429:0x00091b18:	rts
array<IEntity>::RemoveItem()
000479:0x00091b48:	movefm	@c00, value
000479:0x00091b58:	icall	
000479:0x00091b68:	move	remove_index, #return
000481:0x00091b78:	cmpi	remove_index, _i0
000481:0x00091b88:	blt	0x091ba0
000483:0x00091b90:	ncalli	array<IEntity>.RemoveOrdered(remove_index)
000483:0x00091ba0:	rts
array<IEntity>::RemoveItemUnOrdered()
000489:0x00091bd0:	movefm	@c00, value
000489:0x00091be0:	icall	
000489:0x00091bf0:	move	remove_index, #return
000491:0x00091c00:	cmpi	remove_index, _i0
000491:0x00091c10:	blt	0x091c28
000493:0x00091c18:	ncalli	array<IEntity>.Remove(remove_index)
000493:0x00091c28:	rts
array<IEntity>::IsValidIndex()
000499:0x00091c30:	cmpi	index, _i-1
000499:0x00091c40:	ble	0x091c80
000499:0x00091c48:	ncalli	array<IEntity>.Count()
000499:0x00091c50:	cmpi	index, #return
000499:0x00091c60:	bge	0x091c80
000499:0x00091c68:	imove	#return, 0x000001
000499:0x00091c78:	jump	0x091c90
000499:0x00091c80:	imove	#return, 0x000000
000499:0x00091c90:	rts
000499:0x00091c98:	rts
array<IEntity>::Debug()
000525:0x00091cf0:	ncalli	array<IEntity>.Count()
000525:0x00091cf8:	icall	Format(_s'Array count: %1', #return, _c0, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000525:0x00091d28:	icall	Print(#return)
000526:0x00091d38:	imove	i, 0x000000
000526:0x00091d48:	jump	0x091d68
000526:0x00091d50:	move	@m00, i
000526:0x00091d60:	inc	i
000526:0x00091d68:	ncalli	array<IEntity>.Count()
000526:0x00091d70:	cmpi	i, #return
000526:0x00091d80:	bge	0x091df8
000528:0x00091d88:	icall	
000528:0x00091d98:	movetm	item, #return
000529:0x00091da8:	icall	Format(_s'[%1] => %2', i, item, _c0, _c0, _c0, _c0, _c0, _c0, _c0)
000529:0x00091dd8:	icall	Print(#return)
000529:0x00091de8:	release	item
000529:0x00091df0:	jump	0x091d50
000529:0x00091df8:	rts
array<IEntity>::GetRandomIndex()
000544:0x00091e00:	ncalli	array<IEntity>.Count()
000544:0x00091e08:	move	@m00, #return
000544:0x00091e18:	cmpi	@m00, _i0
000544:0x00091e28:	ble	0x091e60
000546:0x00091e30:	ncalli	array<IEntity>.Count()
000546:0x00091e38:	icall	RandomInt(_i0, #return)
000546:0x00091e48:	move	#return, #return
000546:0x00091e58:	rts
000549:0x00091e60:	imove	#return, 0xffffffff
000549:0x00091e70:	rts
000549:0x00091e78:	rts
array<IEntity>::GetRandomElement()
000563:0x00091e80:	call	
000563:0x00091e90:	icall	
000563:0x00091ea0:	movetm	#return, #return
000563:0x00091eb0:	rts
000563:0x00091eb8:	rts
array<IEntity>::SwapItems()
000568:0x00091ee8:	icall	
000568:0x00091ef8:	movetm	item1, #return
000569:0x00091f08:	icall	
000569:0x00091f18:	icall	
000570:0x00091f28:	movefm	@c00, item1
000570:0x00091f38:	icall	
000570:0x00091f48:	release	item1
000570:0x00091f50:	rts
array<IEntity>::InsertArray()
000575:0x00091fa8:	imove	i, 0x000000
000575:0x00091fb8:	jump	0x091fd8
000575:0x00091fc0:	move	@m00, i
000575:0x00091fd0:	inc	i
000575:0x00091fd8:	ncalli	array<IEntity>.Count()
000575:0x00091fe0:	cmpi	i, #return
000575:0x00091ff0:	bge	0x092048
000577:0x00091ff8:	icall	
000577:0x00092008:	movetm	item, #return
000578:0x00092018:	movefm	@c00, item
000578:0x00092028:	icall	
000578:0x00092038:	release	item
000578:0x00092040:	jump	0x091fc0
000578:0x00092048:	rts
array<IEntity>::Invert()
000584:0x000920c8:	imove	left, 0x000000
000585:0x000920d8:	ncalli	array<IEntity>.Count()
000585:0x000920e0:	subi	right, #return, _i1
000586:0x000920f0:	cmpi	right, _i0
000586:0x00092100:	ble	0x0921c0
000588:0x00092108:	cmpi	left, right
000588:0x00092118:	bge	0x0921c0
000590:0x00092120:	icall	
000590:0x00092130:	movetm	temp, #return
000591:0x00092140:	move	@m00, left
000591:0x00092150:	inc	left
000591:0x00092158:	icall	
000591:0x00092168:	icall	
000592:0x00092178:	move	@m00, right
000592:0x00092188:	dec	right
000592:0x00092190:	movefm	@c00, temp
000592:0x000921a0:	icall	
000592:0x000921b0:	release	temp
000592:0x000921b8:	jump	0x092108
000592:0x000921c0:	rts
array<IEntity>::MoveIndex()
000612:0x00092218:	ncalli	array<IEntity>.Count()
000612:0x00092220:	move	count, #return
000613:0x00092230:	move	new_index, curr_index
000615:0x00092240:	cmpi	move_number, _i0
000615:0x00092250:	ble	0x092278
000617:0x00092258:	addi	@m00, curr_index, move_number
000617:0x00092268:	move	new_index, @m00
000620:0x00092278:	cmpi	move_number, _i0
000620:0x00092288:	bge	0x092330
000622:0x00092290:	subi	@m00, curr_index, move_number
000622:0x000922a0:	move	new_index, @m00
000624:0x000922b0:	cmpi	new_index, _i0
000624:0x000922c0:	bge	0x092330
000626:0x000922c8:	subi	@m01, _i0, count
000626:0x000922d8:	cmpi	new_index, @m01
000626:0x000922e8:	bgt	0x092310
000628:0x000922f0:	modi	@m00, new_index, count
000628:0x00092300:	move	new_index, @m00
000631:0x00092310:	addi	@m00, new_index, count
000631:0x00092320:	move	new_index, @m00
000635:0x00092330:	cmpi	new_index, count
000635:0x00092340:	blt	0x092368
000637:0x00092348:	modi	@m00, new_index, count
000637:0x00092358:	move	new_index, @m00
000641:0x00092368:	move	#return, new_index
000641:0x00092378:	rts
000641:0x00092380:	rts
array<IEntity>::ShuffleArray()
000646:0x000923b0:	imove	i, 0x000000
000646:0x000923c0:	jump	0x0923e0
000646:0x000923c8:	move	@m00, i
000646:0x000923d8:	inc	i
000646:0x000923e0:	ncalli	array<IEntity>.Count()
000646:0x000923e8:	cmpi	i, #return
000646:0x000923f8:	bge	0x092430
000648:0x00092400:	call	
000648:0x00092410:	call	
000648:0x00092428:	jump	0x0923c8
000648:0x00092430:	rts
array<IEntity>::DifferentAtPosition()
000666:0x00092460:	ncalli	array<IEntity>.Count()
000666:0x00092468:	move	@m00, #return
000666:0x00092478:	push	#return
000666:0x00092480:	ncalli	array<IEntity>.Count()
000666:0x00092488:	move	@m02, #return
000666:0x00092498:	pop	#return
000666:0x000924a0:	cmpi	@m00, @m02
000666:0x000924b0:	beq	0x0924e0
000668:0x000924b8:	icall	ErrorEx(_s'arrays are not the same size', _i2)
000669:0x000924c8:	imove	#return, 0xffffffff
000669:0x000924d8:	rts
000672:0x000924e0:	imove	i, 0x000000
000672:0x000924f0:	jump	0x092500
000672:0x000924f8:	inc	i
000672:0x00092500:	ncalli	array<IEntity>.Count()
000672:0x00092508:	cmpi	i, #return
000672:0x00092518:	bge	0x0925a8
000674:0x00092520:	icall	
000674:0x00092530:	movec	@c00, #return
000674:0x00092540:	pushc	#return
000674:0x00092548:	icall	
000674:0x00092558:	movec	@c02, #return
000674:0x00092568:	popc	#return
000674:0x00092570:	cmpc	@c00, @c02
000674:0x00092580:	beq	0x0925a0
000676:0x00092588:	move	#return, i
000676:0x00092598:	rts
000676:0x000925a0:	jump	0x0924f8
000680:0x000925a8:	imove	#return, 0xffffffff
000680:0x000925b8:	rts
000680:0x000925c0:	rts
Error()
//scripts/1_Core/proto\endebug.c
000092:0x00092648:	ncall	Error2(_s'', err)
000092:0x00092658:	rts
Shape::CreateArrow()
000175:0x00092838:	subv	dir, to, from
000176:0x00092848:	icall	Normalize(dir)
000177:0x00092858:	scalev	dir1, dir, size
000178:0x00092868:	mulf	@f00, size, _f0.500000
000178:0x00092878:	move	size, @f00
000180:0x00092888:	call	Perpend(dir)
000180:0x00092898:	movev	dir, value
000180:0x000928a8:	scalev	dir2, #return, size
000183:0x000928b8:	ctv	pts[_i0], from
000184:0x000928c8:	ctv	pts[_i1], to
000185:0x000928d8:	subv	@v01, to, dir1
000185:0x000928e8:	movev	@v00, @v01
000185:0x000928f8:	subv	@v00, @v00, dir2
000185:0x00092908:	ctv	pts[_i2], @v00
000186:0x00092918:	subv	@v01, to, dir1
000186:0x00092928:	movev	@v00, @v01
000186:0x00092938:	addv	@v00, @v00, dir2
000186:0x00092948:	ctv	pts[_i3], @v00
000187:0x00092958:	ctv	pts[_i4], to
000189:0x00092968:	ncall	CreateLines(color, flags, pts, _i5)
000189:0x00092980:	movec	#return, #return
000189:0x00092990:	rts
000189:0x00092998:	rts
Shape::CreateBridgeArrow()
000194:0x00092b38:	subv	dir, to, from
000195:0x00092b48:	icall	Normalize(dir)
000197:0x00092b58:	subf	@f01, _f0.000000, size
000197:0x00092b68:	ncall	Vector(_f0.000000, _f0.000000, @f01)
000197:0x00092b80:	movev	dir1, #return
000198:0x00092b90:	mulf	@f00, size, _f0.500000
000198:0x00092ba0:	move	size, @f00
000200:0x00092bb0:	call	Perpend(dir)
000200:0x00092bc0:	movev	dir, value
000200:0x00092bd0:	scalev	dir2, #return, size
000203:0x00092be0:	ctv	pts[_i0], from
000204:0x00092bf0:	addv	@v00, from, _v<0.000000,0.000000,1.000000>
000204:0x00092c00:	ctv	pts[_i1], @v00
000205:0x00092c10:	addv	@v00, to, _v<0.000000,0.000000,1.000000>
000205:0x00092c20:	ctv	pts[_i2], @v00
000206:0x00092c30:	ctv	pts[_i3], to
000207:0x00092c40:	subv	@v01, to, dir1
000207:0x00092c50:	movev	@v00, @v01
000207:0x00092c60:	subv	@v00, @v00, dir2
000207:0x00092c70:	ctv	pts[_i4], @v00
000208:0x00092c80:	subv	@v01, to, dir1
000208:0x00092c90:	movev	@v00, @v01
000208:0x00092ca0:	addv	@v00, @v00, dir2
000208:0x00092cb0:	ctv	pts[_i5], @v00
000209:0x00092cc0:	ctv	pts[_i6], to
000211:0x00092cd0:	ncall	CreateLines(color, flags, pts, _i7)
000211:0x00092ce8:	movec	#return, #return
000211:0x00092cf8:	rts
000211:0x00092d00:	rts
Shape::CreateMatrix()
000216:0x00092ee0:	cfv	@v00, mat[_i3]
000216:0x00092ef0:	movev	org, @v00
000217:0x00092f00:	imove	@m01, 0x000012
000217:0x00092f10:	move	@m00, @m01
000217:0x00092f20:	ori	@m00, @m00, _i8
000217:0x00092f30:	move	@m01, @m00
000217:0x00092f40:	ori	flags, @m01, _i32
000218:0x00092f50:	cfv	@v02, mat[_i0]
000218:0x00092f60:	scalev	@v02, @v02, _f0.500000
000218:0x00092f70:	movev	@v01, @v02
000218:0x00092f80:	addv	@v01, @v01, org
000218:0x00092f90:	movev	@v00, @v01
000218:0x00092fa0:	ncall	Create(_i2, _i-65536, flags, org, @v00)
000219:0x00092fc0:	cfv	@v02, mat[_i1]
000219:0x00092fd0:	scalev	@v02, @v02, _f0.500000
000219:0x00092fe0:	movev	@v01, @v02
000219:0x00092ff0:	addv	@v01, @v01, org
000219:0x00093000:	movev	@v00, @v01
000219:0x00093010:	ncall	Create(_i2, _i-16711936, flags, org, @v00)
000220:0x00093030:	cfv	@v02, mat[_i2]
000220:0x00093040:	scalev	@v02, @v02, _f0.500000
000220:0x00093050:	movev	@v01, @v02
000220:0x00093060:	addv	@v01, @v01, org
000220:0x00093070:	movev	@v00, @v01
000220:0x00093080:	ncall	Create(_i2, _i-16776961, flags, org, @v00)
000220:0x000930a0:	rts
Param::Serialize()
//scripts/1_Core/param.c
000015:0x000930a8:	imove	#return, 0x000000
000015:0x000930b8:	rts
000015:0x000930c0:	rts
Param::Deserializer()
000020:0x000930c8:	imove	#return, 0x000000
000020:0x000930d8:	rts
000020:0x000930e0:	rts
Math::RandomIntInclusive()
//scripts/1_Core/proto\enmath.c
000055:0x000930e8:	addi	@m02, max, _i1
000055:0x000930f8:	move	@m01, @m02
000055:0x00093108:	icall	RandomInt(min, @m01)
000055:0x00093118:	move	#return, #return
000055:0x00093128:	rts
000055:0x00093130:	rts
Math::RandomFloatInclusive()
000088:0x000932e0:	icall	Pow(_f2.000000, _f30.000000)
000088:0x000932f0:	cfti	max_range, #return
000089:0x00093300:	icall	RandomInt(_i0, max_range)
000089:0x00093310:	move	random_int, #return
000090:0x00093320:	citf	@f00, random_int
000090:0x00093330:	citf	@f01, max_range
000090:0x00093340:	divf	rand_float, @f00, @f01
000091:0x00093350:	subf	range, max, min
000093:0x00093360:	mulf	@f01, rand_float, range
000093:0x00093370:	move	@f00, @f01
000093:0x00093380:	addf	#return, min, @f00
000093:0x00093390:	rts
000093:0x00093398:	rts
Math::RandomFloat01()
000108:0x000933a0:	call	RandomFloatInclusive(_f0.000000, _f1.000000)
000108:0x000933b8:	move	#return, #return
000108:0x000933c8:	rts
000108:0x000933d0:	rts
Math::Poisson()
000663:0x000933d8:	citf	@f01, occurences
000663:0x000933e8:	icall	Pow(mean, @f01)
000663:0x000933f8:	subf	@f03, _f0.000000, mean
000663:0x00093408:	push	#return
000663:0x00093410:	icall	Pow(EULER, @f03)
000663:0x00093420:	move	@f02, #return
000663:0x00093430:	pop	#return
000663:0x00093438:	mulf	@f02, #return, @f02
000663:0x00093448:	move	@f00, @f02
000663:0x00093458:	call	Factorial(occurences)
000663:0x00093468:	citf	@f02, #return
000663:0x00093478:	divf	#return, @f00, @f02
000663:0x00093488:	rts
000663:0x00093490:	rts
Math::Factorial()
000669:0x00093590:	cmpi	val, _i12
000669:0x000935a0:	ble	0x0935d0
000671:0x000935a8:	icall	ErrorEx(_s'Values above '12' cause int overflow! Returning '1'', _i2)
000672:0x000935b8:	imove	#return, 0x000001
000672:0x000935c8:	rts
000675:0x000935d0:	imove	res, 0x000001
000676:0x000935e0:	cmpi	val, _i1
000676:0x000935f0:	ble	0x093638
000678:0x000935f8:	move	@m01, val
000678:0x00093608:	dec	val
000678:0x00093610:	move	@m00, @m01
000678:0x00093620:	muli	res, res, @m00
000678:0x00093630:	jump	0x0935e0
000680:0x00093638:	move	#return, res
000680:0x00093648:	rts
000680:0x00093650:	rts
Math3D::MatrixIdentity4()
//scripts/1_Core/proto\enmath3d.c
000235:0x00093700:	ctv	mat[_i0], _v<1.000000,0.000000,0.000000>
000236:0x00093710:	ctv	mat[_i1], _v<0.000000,1.000000,0.000000>
000237:0x00093720:	ctv	mat[_i2], _v<0.000000,0.000000,1.000000>
000238:0x00093730:	ctv	mat[_i3], Zero
000238:0x00093740:	rts
Math3D::MatrixIdentity3()
000254:0x000937f0:	ctv	mat[_i0], _v<1.000000,0.000000,0.000000>
000255:0x00093800:	ctv	mat[_i1], _v<0.000000,1.000000,0.000000>
000256:0x00093810:	ctv	mat[_i2], _v<0.000000,0.000000,1.000000>
000256:0x00093820:	rts
Math3D::ScaleMatrix()
000274:0x000938f8:	itv	v0[0x000000], scale
000275:0x00093908:	itv	v1[0x000001], scale
000276:0x00093918:	itv	v2[0x000002], scale
000277:0x00093928:	ctv	mat[_i0], v0
000278:0x00093938:	ctv	mat[_i1], v1
000279:0x00093948:	ctv	mat[_i2], v2
000279:0x00093958:	rts
Math3D::QuatIdentity()
000295:0x00093960:	itv	q[0x000000], _f0.000000
000296:0x00093970:	itv	q[0x000001], _f0.000000
000297:0x00093980:	itv	q[0x000002], _f0.000000
000298:0x00093990:	itv	q[0x000003], _f1.000000
000298:0x000939a0:	rts
Math3D::QuatCopy()
000316:0x000939a8:	ifv	@f00, s[0x000000]
000316:0x000939b8:	itv	d[0x000000], @f00
000317:0x000939c8:	ifv	@f00, s[0x000001]
000317:0x000939d8:	itv	d[0x000001], @f00
000318:0x000939e8:	ifv	@f00, s[0x000002]
000318:0x000939f8:	itv	d[0x000002], @f00
000319:0x00093a08:	ifv	@f00, s[0x000003]
000319:0x00093a18:	itv	d[0x000003], @f00
000319:0x00093a28:	rts
Math3D::GetRandomDir()
000426:0x00093af8:	call	RandomFloatInclusive(_f-1.000000, _f1.000000)
000426:0x00093b10:	move	x, #return
000427:0x00093b20:	call	RandomFloatInclusive(_f-1.000000, _f1.000000)
000427:0x00093b38:	move	y, #return
000428:0x00093b48:	call	RandomFloatInclusive(_f-1.000000, _f1.000000)
000428:0x00093b60:	move	z, #return
000430:0x00093b70:	ncall	Vector(x, y, z)
000430:0x00093b88:	icall	Normalized(#return)
000430:0x00093b98:	movev	#return, #return
000430:0x00093ba8:	rts
000430:0x00093bb0:	rts
VectortoRGBA()
//scripts/1_Core/proto\proto.c
000303:0x00093de8:	ifv	@f00, vec[0x000000]
000303:0x00093df8:	move	x, @f00
000304:0x00093e08:	ifv	@f00, vec[0x000001]
000304:0x00093e18:	move	y, @f00
000305:0x00093e28:	ifv	@f00, vec[0x000002]
000305:0x00093e38:	move	z, @f00
000307:0x00093e48:	mulf	@f01, x, _f127.000000
000307:0x00093e58:	move	@f00, @f01
000307:0x00093e68:	addf	@f00, @f00, _f128.000000
000307:0x00093e78:	move	x, @f00
000308:0x00093e88:	mulf	@f01, y, _f127.000000
000308:0x00093e98:	move	@f00, @f01
000308:0x00093ea8:	addf	@f00, @f00, _f128.000000
000308:0x00093eb8:	move	y, @f00
000309:0x00093ec8:	mulf	@f01, z, _f127.000000
000309:0x00093ed8:	move	@f00, @f01
000309:0x00093ee8:	addf	@f00, @f00, _f128.000000
000309:0x00093ef8:	move	z, @f00
000310:0x00093f08:	mulf	@f00, h, _f255.000000
000310:0x00093f18:	move	h, @f00
000312:0x00093f28:	cfti	@m00, h
000312:0x00093f38:	lsli	@m00, @m00, _i24
000312:0x00093f48:	move	a, @m00
000313:0x00093f58:	cfti	@m00, x
000313:0x00093f68:	lsli	@m00, @m00, _i16
000313:0x00093f78:	move	r, @m00
000314:0x00093f88:	cfti	@m00, y
000314:0x00093f98:	lsli	@m00, @m00, _i8
000314:0x00093fa8:	move	g, @m00
000315:0x00093fb8:	cfti	b, z
000317:0x00093fc8:	ori	@m01, r, g
000317:0x00093fd8:	move	@m00, @m01
000317:0x00093fe8:	ori	@m00, @m00, b
000317:0x00093ff8:	move	@m01, @m00
000317:0x00094008:	ori	#return, @m01, a
000317:0x00094018:	rts
000317:0x00094020:	rts
ARGB()
000324:0x00094028:	lsli	@m00, a, _i24
000324:0x00094038:	move	a, @m00
000325:0x00094048:	lsli	@m00, r, _i16
000325:0x00094058:	move	r, @m00
000326:0x00094068:	lsli	@m00, g, _i8
000326:0x00094078:	move	g, @m00
000327:0x00094088:	ori	@m01, a, r
000327:0x00094098:	move	@m00, @m01
000327:0x000940a8:	ori	@m00, @m00, g
000327:0x000940b8:	move	@m01, @m00
000327:0x000940c8:	ori	#return, @m01, b
000327:0x000940d8:	rts
000327:0x000940e0:	rts
ARGBF()
000334:0x000940e8:	mulf	@f01, fa, _f255.000000
000334:0x000940f8:	move	@f00, @f01
000334:0x00094108:	cfti	a, @f00
000334:0x00094118:	mulf	@f01, fr, _f255.000000
000334:0x00094128:	move	@f00, @f01
000334:0x00094138:	cfti	r, @f00
000334:0x00094148:	mulf	@f01, fg, _f255.000000
000334:0x00094158:	move	@f00, @f01
000334:0x00094168:	cfti	g, @f00
000334:0x00094178:	mulf	@f01, fb, _f255.000000
000334:0x00094188:	move	@f00, @f01
000334:0x00094198:	cfti	b, @f00
000334:0x000941a8:	call	ARGB(a, r, g, b)
000334:0x000941c8:	move	#return, #return
000334:0x000941d8:	rts
000334:0x000941e0:	rts
AWHITE()
000340:0x00094210:	lsli	@m01, a, _i24
000340:0x00094220:	move	@m00, @m01
000340:0x00094230:	ori	#return, @m00, _i16777215
000340:0x00094240:	rts
000340:0x00094248:	rts
LerpARGB()
000349:0x00094340:	asri	@m01, c1, _i8
000349:0x00094350:	move	@m00, @m01
000349:0x00094360:	andi	@m00, @m00, cmask
000349:0x00094370:	move	cb1, @m00
000350:0x00094380:	asri	@m01, c2, _i8
000350:0x00094390:	move	@m00, @m01
000350:0x000943a0:	andi	@m00, @m00, cmask
000350:0x000943b0:	move	cb2, @m00
000351:0x000943c0:	addi	@m01, cb1, cb2
000351:0x000943d0:	move	@m00, @m01
000351:0x000943e0:	asri	@m00, @m00, _i1
000351:0x000943f0:	move	cb1, @m00
000353:0x00094400:	andi	@m00, c1, cmask
000353:0x00094410:	move	c1, @m00
000354:0x00094420:	andi	@m00, c2, cmask
000354:0x00094430:	move	c2, @m00
000355:0x00094440:	addi	@m01, c1, c2
000355:0x00094450:	move	@m00, @m01
000355:0x00094460:	asri	@m00, @m00, _i1
000355:0x00094470:	move	c1, @m00
000357:0x00094480:	lsli	@m01, cb1, _i8
000357:0x00094490:	move	@m00, @m01
000357:0x000944a0:	ori	#return, @m00, c1
000357:0x000944b0:	rts
000357:0x000944b8:	rts
ParamEnum::ParamEnum()
//scripts/1_Core/proto\enentity.c
000796:0x000944c0:	moves	m_Key, key
000797:0x000944d0:	moves	m_Value, value
000798:0x000944e0:	moves	m_Desc, desc
000798:0x000944f0:	rts
ParamEnumArray::FromEnum()
000806:0x00094610:	new	params, ParamEnumArray
000807:0x00094630:	ncall	GetVariableCount(e)
000807:0x00094640:	move	cnt, #return
000810:0x00094650:	imove	i, 0x000000
000810:0x00094660:	jump	0x094680
000810:0x00094668:	move	@m00, i
000810:0x00094678:	inc	i
000810:0x00094680:	cmpi	i, cnt
000810:0x00094690:	bge	0x094780
000812:0x00094698:	ncall	GetVariableType(e, i)
000812:0x000946a8:	movea	@m00, #return
000812:0x000946b8:	cmpi	@m00, _T(int)
000812:0x000946c8:	bne	0x094778
000812:0x000946d0:	icall	GetVariableValue(e, NULL, i, val)
000812:0x000946e8:	cmpi	#return, _i0
000812:0x000946f8:	beq	0x094778
000814:0x00094700:	ncall	GetVariableName(e, i)
000814:0x00094710:	icall	ToString(val)
000814:0x00094720:	new	@c00, ParamEnum
000814:0x00094750:	pushc	@c00
000814:0x00094758:	icall	
000814:0x00094768:	popc	@c00
000814:0x00094770:	release	@c00
000814:0x00094778:	jump	0x094668
000818:0x00094780:	movem	#return, params
000818:0x00094790:	release	params
000818:0x00094798:	rts
000818:0x000947a0:	release	params
000818:0x000947a8:	rts
Attribute::Attribute()
000833:0x000947b0:	moves	m_DefValue, defvalue
000834:0x000947c0:	moves	m_UiWidget, uiwidget
000835:0x000947d0:	moves	m_RangeScale, rangescale
000836:0x000947e0:	moves	m_Desc, desc
000837:0x000947f0:	movem	m_Enums, enums
000837:0x00094800:	rts
EditorAttribute::EditorAttribute()
000856:0x00094808:	moves	m_Style, style
000857:0x00094818:	moves	m_Category, category
000858:0x00094828:	moves	m_Description, description
000859:0x00094838:	movev	m_SizeMin, sizeMin
000860:0x00094848:	movev	m_SizeMax, sizeMax
000861:0x00094858:	moves	m_Color, color
000862:0x00094868:	moves	m_Color2, color2
000863:0x00094878:	move	m_Visible, visible
000864:0x00094888:	move	m_Insertable, insertable
000865:0x00094898:	move	m_DynamicBox, dynamicBox
000865:0x000948a8:	rts
EnProfiler::IsEnabledD()
//scripts/1_Core/proto\enprofiler.c
000126:0x000948b0:	icall	IsEnabled()
000126:0x000948b8:	move	@m00, #return
000126:0x000948c8:	move	@m01, DIAG
000126:0x000948d8:	andi	#return, @m00, @m01
000126:0x000948e8:	rts
000126:0x000948f0:	rts
EnProfiler::IsEnabledP()
000140:0x000948f8:	icall	IsEnabled()
000140:0x00094900:	move	@m00, #return
000140:0x00094910:	move	@m01, SCRP
000140:0x00094920:	andi	#return, @m00, @m01
000140:0x00094930:	rts
000140:0x00094938:	rts
EnProfiler::IsEnabledC()
000154:0x00094940:	icall	IsEnabled()
000154:0x00094948:	move	@m00, #return
000154:0x00094958:	move	@m01, SCRC
000154:0x00094968:	andi	#return, @m00, @m01
000154:0x00094978:	rts
000154:0x00094980:	rts
EnProfiler::RequestImmediateData()
000748:0x00094a08:	call	IsEnabledC()
000748:0x00094a18:	move	wasEnabled, #return
000750:0x00094a28:	cmpi	wasEnabled, _i0
000750:0x00094a38:	bne	0x094a58
000753:0x00094a40:	icall	Enable(true, true, _i1)
000756:0x00094a58:	move	#return, wasEnabled
000756:0x00094a68:	rts
000756:0x00094a70:	rts
ButtonAttribute::ButtonAttribute()
//scripts/1_Core/workbenchapi.c
000115:0x00094a78:	moves	m_Label, label
000116:0x00094a88:	move	m_Focused, focused
000116:0x00094a98:	rts
WorkbenchPluginAttribute::WorkbenchPluginAttribute()
000138:0x00094aa0:	moves	m_Name, name
000139:0x00094ab0:	moves	m_Icon, icon
000140:0x00094ac0:	moves	m_Shortcut, shortcut
000141:0x00094ad0:	moves	m_Description, description
000142:0x00094ae0:	movem	m_WBModules, wbModules
000142:0x00094af0:	rts
Class::GetDebugName()
//scripts/1_Core/proto\enscript.c
000039:0x00094af8:	ncall	ClassName(this)
000039:0x00094b08:	moves	#return, #return
000039:0x00094b18:	rts
000039:0x00094b20:	rts
Class::StaticGetType()
000075:0x00094b28:	movea	#return, t
000075:0x00094b38:	rts
000075:0x00094b40:	rts
String()
000341:0x00094b48:	moves	#return, s
000341:0x00094b58:	rts
000341:0x00094b60:	rts
PrintString()
000347:0x00094b68:	icall	Print(s)
000347:0x00094b78:	rts
PhysicsGeomDef::PhysicsGeomDef()
//scripts/1_Core/proto\enphysics.c
000041:0x00094b80:	imove	@m00, 0x000000
000041:0x00094b90:	ncall	Vector(_f1.000000, _f0.000000, _f0.000000)
000041:0x00094ba8:	ctv	Frame[@m00], #return
000041:0x00094bb8:	inc	@m00
000041:0x00094bc0:	pushv	#return
000041:0x00094bc8:	ncall	Vector(_f0.000000, _f1.000000, _f0.000000)
000041:0x00094be0:	movev	@v00, #return
000041:0x00094bf0:	popv	#return
000041:0x00094bf8:	ctv	Frame[@m00], @v00
000041:0x00094c08:	inc	@m00
000041:0x00094c10:	pushv	#return
000041:0x00094c18:	ncall	Vector(_f0.000000, _f0.000000, _f1.000000)
000041:0x00094c30:	movev	@v00, #return
000041:0x00094c40:	popv	#return
000041:0x00094c48:	ctv	Frame[@m00], @v00
000041:0x00094c58:	inc	@m00
000041:0x00094c60:	pushv	#return
000041:0x00094c68:	ncall	Vector(_f0.000000, _f0.000000, _f0.000000)
000041:0x00094c80:	movev	@v00, #return
000041:0x00094c90:	popv	#return
000041:0x00094c98:	ctv	Frame[@m00], @v00
000041:0x00094ca8:	inc	@m00
000041:0x00094cb0:	imove	ParentNode, 0xffffffff
000043:0x00094cc0:	moves	Name, name
000044:0x00094cd0:	movea	Geometry, geom
000045:0x00094ce0:	moves	MaterialName, materialName
000046:0x00094cf0:	move	LayerMask, layerMask
000046:0x00094d00:	rts
string::BeautifiedToVector()
//scripts/1_Core/proto\enstring.c
000069:0x00094e98:	moves	copy, value
000070:0x00094ea8:	icall	Replace(copy, _s'<', _s'')
000071:0x00094ec0:	icall	Replace(copy, _s'>', _s'')
000072:0x00094ed8:	icall	Replace(copy, _s',', _s' ')
000073:0x00094ef0:	icall	ToVector(copy)
000073:0x00094f00:	movev	#return, #return
000073:0x00094f10:	moves	value, value
000073:0x00094f20:	rts
000073:0x00094f28:	moves	value, value
000073:0x00094f38:	rts
string::SubstringInverted()
000118:0x00095018:	icall	Substring(string_to_split, _i0, position_start)
000118:0x00095030:	moves	first_half, #return
000119:0x00095040:	ncall	Length(string_to_split)
000119:0x00095050:	subi	@m01, #return, position_end
000119:0x00095060:	move	@m00, @m01
000119:0x00095070:	icall	Substring(string_to_split, position_end, @m00)
000119:0x00095088:	moves	second_half, #return
000120:0x00095098:	adds	result, first_half, second_half
000121:0x000950a8:	moves	#return, result
000121:0x000950b8:	moves	value, value
000121:0x000950c8:	rts
000121:0x000950d0:	moves	value, value
000121:0x000950e0:	rts
string::Contains()
000288:0x000950e8:	ncall	IndexOf(value, sample)
000288:0x000950f8:	move	@m00, #return
000288:0x00095108:	cmpi	@m00, _i-1
000288:0x00095118:	beq	0x095138
000288:0x00095120:	imove	#return, 0x000001
000288:0x00095130:	jump	0x095148
000288:0x00095138:	imove	#return, 0x000000
000288:0x00095148:	moves	value, value
000288:0x00095158:	rts
000288:0x00095160:	moves	value, value
000288:0x00095170:	rts
string::Split()
000398:0x000952f0:	imove	txt_len, 0x000000
000399:0x00095300:	imove	sep_pos, 0xffffffff
000400:0x00095310:	imove	nxt_sep_pos, 0x000000
000401:0x00095320:	moves	text, _s''
000403:0x00095330:	imove	line_end, 0x000000
000404:0x00095340:	cmpi	line_end, false
000404:0x00095350:	bne	0x095480
000406:0x00095358:	addi	@m01, sep_pos, txt_len
000406:0x00095368:	move	@m00, @m01
000406:0x00095378:	addi	@m00, @m00, _i1
000406:0x00095388:	move	sep_pos, @m00
000407:0x00095398:	ncall	IndexOfFrom(value, sep_pos, sample)
000407:0x000953b0:	move	nxt_sep_pos, #return
000408:0x000953c0:	cmpi	nxt_sep_pos, _i-1
000408:0x000953d0:	bne	0x095408
000410:0x000953d8:	ncall	Length(value)
000410:0x000953e8:	move	nxt_sep_pos, #return
000411:0x000953f8:	imove	line_end, 0x000001
000414:0x00095408:	subi	@m00, nxt_sep_pos, sep_pos
000414:0x00095418:	move	txt_len, @m00
000415:0x00095428:	cmpi	txt_len, _i0
000415:0x00095438:	ble	0x095478
000417:0x00095440:	icall	Substring(value, sep_pos, txt_len)
000417:0x00095458:	moves	text, #return
000418:0x00095468:	icall	
000418:0x00095478:	jump	0x095340
000418:0x00095480:	moves	value, value
000418:0x00095490:	movem	output, output
000418:0x000954a0:	rts
string::Get()
000436:0x000954a8:	icall	Substring(value, index, _i1)
000436:0x000954c0:	moves	#return, #return
000436:0x000954d0:	moves	value, value
000436:0x000954e0:	rts
000436:0x000954e8:	moves	value, value
000436:0x000954f8:	rts
string::Set()
000451:0x000955f0:	icall	Substring(value, _i0, n)
000451:0x00095608:	moves	pre, #return
000452:0x00095618:	imove	@m00, 0x000001
000452:0x00095628:	addi	n, n, @m00
000453:0x00095638:	ncall	Length(value)
000453:0x00095648:	subi	length, #return, n
000454:0x00095658:	icall	Substring(value, n, length)
000454:0x00095670:	moves	post, #return
000455:0x00095680:	adds	@s01, pre, _value
000455:0x00095690:	moves	@s00, @s01
000455:0x000956a0:	adds	@s00, @s00, post
000455:0x000956b0:	moves	value, @s00
000455:0x000956c0:	moves	value, value
000455:0x000956d0:	rts
bool::ToString()
//scripts/1_Core/proto\enconvert.c
000005:0x00095728:	cmpi	value, _i0
000005:0x00095738:	beq	0x095770
000005:0x00095740:	moves	#return, _s'true'
000005:0x00095750:	move	value, value
000005:0x00095760:	rts
000005:0x00095768:	jump	0x095798
000006:0x00095770:	moves	#return, _s'false'
000006:0x00095780:	move	value, value
000006:0x00095790:	rts
000006:0x00095798:	move	value, value
000006:0x000957a8:	rts
int::ToStringLen()
000061:0x00095850:	icall	ToString(value)
000061:0x00095860:	moves	str, #return
000063:0x00095870:	ncall	Length(str)
000063:0x00095880:	subi	l, len, #return
000065:0x00095890:	cmpi	l, _i0
000065:0x000958a0:	ble	0x0958f8
000065:0x000958a8:	cmpi	l, ZERO_PAD_SIZE
000065:0x000958b8:	bge	0x0958f8
000066:0x000958c0:	cfv	@s00, m_ZeroPad[l]
000066:0x000958d0:	adds	#return, @s00, str
000066:0x000958e0:	move	value, value
000066:0x000958f0:	rts
000068:0x000958f8:	moves	#return, str
000068:0x00095908:	move	value, value
000068:0x00095918:	rts
000068:0x00095920:	move	value, value
000068:0x00095930:	rts
int::InRange()
000086:0x00095938:	cmpi	inclusive_min, _i0
000086:0x00095948:	bne	0x095968
000086:0x00095950:	cmpi	value, min
000086:0x00095960:	ble	0x095980
000086:0x00095968:	cmpi	value, min
000086:0x00095978:	bge	0x0959a8
000087:0x00095980:	imove	#return, 0x000000
000087:0x00095990:	move	value, value
000087:0x000959a0:	rts
000089:0x000959a8:	cmpi	inclusive_max, _i0
000089:0x000959b8:	bne	0x0959d8
000089:0x000959c0:	cmpi	value, max
000089:0x000959d0:	bge	0x0959f0
000089:0x000959d8:	cmpi	value, max
000089:0x000959e8:	ble	0x095a18
000090:0x000959f0:	imove	#return, 0x000000
000090:0x00095a00:	move	value, value
000090:0x00095a10:	rts
000092:0x00095a18:	imove	#return, 0x000001
000092:0x00095a28:	move	value, value
000092:0x00095a38:	rts
000092:0x00095a40:	move	value, value
000092:0x00095a50:	rts
vector::Perpend()
000211:0x00095a58:	crossv	#return, value, Up
000211:0x00095a68:	movev	value, value
000211:0x00095a78:	rts
000211:0x00095a80:	movev	value, value
000211:0x00095a90:	rts
vector::Direction()
000224:0x00095af8:	ifv	@f00, p2[0x000000]
000224:0x00095b08:	ifv	@f01, p1[0x000000]
000224:0x00095b18:	subf	@f00, @f00, @f01
000224:0x00095b28:	itv	dir_vec[0x000000], @f00
000225:0x00095b38:	ifv	@f00, p2[0x000001]
000225:0x00095b48:	ifv	@f01, p1[0x000001]
000225:0x00095b58:	subf	@f00, @f00, @f01
000225:0x00095b68:	itv	dir_vec[0x000001], @f00
000226:0x00095b78:	ifv	@f00, p2[0x000002]
000226:0x00095b88:	ifv	@f01, p1[0x000002]
000226:0x00095b98:	subf	@f00, @f00, @f01
000226:0x00095ba8:	itv	dir_vec[0x000002], @f00
000228:0x00095bb8:	movev	#return, dir_vec
000228:0x00095bc8:	rts
000228:0x00095bd0:	rts
vector::RandomDir()
000245:0x00095bd8:	call	RandomFloatInclusive(_f-1.000000, _f1.000000)
000245:0x00095bf0:	push	#return
000245:0x00095bf8:	call	RandomFloatInclusive(_f-1.000000, _f1.000000)
000245:0x00095c10:	move	@f01, #return
000245:0x00095c20:	pop	#return
000245:0x00095c28:	push	#return
000245:0x00095c30:	call	RandomFloatInclusive(_f-1.000000, _f1.000000)
000245:0x00095c48:	move	@f02, #return
000245:0x00095c58:	pop	#return
000245:0x00095c60:	ncall	Vector(#return, @f01, @f02)
000245:0x00095c78:	icall	Normalized(#return)
000245:0x00095c88:	movev	#return, #return
000245:0x00095c98:	rts
000245:0x00095ca0:	rts
vector::RandomDir2D()
000262:0x00095ca8:	call	RandomFloatInclusive(_f-1.000000, _f1.000000)
000262:0x00095cc0:	push	#return
000262:0x00095cc8:	call	RandomFloatInclusive(_f-1.000000, _f1.000000)
000262:0x00095ce0:	move	@f01, #return
000262:0x00095cf0:	pop	#return
000262:0x00095cf8:	ncall	Vector(#return, _f0.000000, @f01)
000262:0x00095d10:	icall	Normalized(#return)
000262:0x00095d20:	movev	#return, #return
000262:0x00095d30:	rts
000262:0x00095d38:	rts
vector::Dot()
000273:0x00095d40:	ifv	@f02, v1[0x000000]
000273:0x00095d50:	ifv	@f03, v2[0x000000]
000273:0x00095d60:	mulf	@f02, @f02, @f03
000273:0x00095d70:	move	@f01, @f02
000273:0x00095d80:	ifv	@f03, v1[0x000001]
000273:0x00095d90:	ifv	@f04, v2[0x000001]
000273:0x00095da0:	mulf	@f03, @f03, @f04
000273:0x00095db0:	move	@f02, @f03
000273:0x00095dc0:	addf	@f01, @f01, @f02
000273:0x00095dd0:	move	@f00, @f01
000273:0x00095de0:	ifv	@f02, v1[0x000002]
000273:0x00095df0:	ifv	@f03, v2[0x000002]
000273:0x00095e00:	mulf	@f02, @f02, @f03
000273:0x00095e10:	move	@f01, @f02
000273:0x00095e20:	addf	#return, @f00, @f01
000273:0x00095e30:	rts
000273:0x00095e38:	rts
vector::GetRelAngles()
000288:0x00095ee0:	imove	i, 0x000000
000288:0x00095ef0:	jump	0x095f10
000288:0x00095ef8:	move	@m00, i
000288:0x00095f08:	inc	i
000288:0x00095f10:	cmpi	i, _i3
000288:0x00095f20:	bge	0x095fe0
000289:0x00095f28:	ffv	@f00, value[i]
000289:0x00095f38:	cmpf	@f00, _f180.000000
000289:0x00095f48:	ble	0x095f80
000290:0x00095f50:	ffv	@f00, value[i]
000290:0x00095f60:	subf	@f00, @f00, _f360.000000
000290:0x00095f70:	ftv	value[i], @f00
000291:0x00095f80:	ffv	@f00, value[i]
000291:0x00095f90:	cmpf	@f00, _f-180.000000
000291:0x00095fa0:	bge	0x095fd8
000292:0x00095fa8:	ffv	@f00, value[i]
000292:0x00095fb8:	addf	@f00, @f00, _f360.000000
000292:0x00095fc8:	ftv	value[i], @f00
000292:0x00095fd8:	jump	0x095ef8
000294:0x00095fe0:	movev	#return, value
000294:0x00095ff0:	movev	value, value
000294:0x00096000:	rts
000294:0x00096008:	movev	value, value
000294:0x00096018:	rts
vector::RotateAroundZeroDeg()
000452:0x00096020:	mulf	@f01, angle, DEG2RAD
000452:0x00096030:	move	@f00, @f01
000452:0x00096040:	icall	Cos(@f00)
000452:0x00096050:	scalev	@v02, vec, #return
000452:0x00096060:	movev	@v01, @v02
000452:0x00096070:	crossv	@v04, axis, vec
000452:0x00096080:	movev	@v03, @v04
000452:0x00096090:	mulf	@f02, angle, DEG2RAD
000452:0x000960a0:	move	@f01, @f02
000452:0x000960b0:	icall	Sin(@f01)
000452:0x000960c0:	scalev	@v03, @v03, #return
000452:0x000960d0:	movev	@v02, @v03
000452:0x000960e0:	addv	@v01, @v01, @v02
000452:0x000960f0:	movev	@v00, @v01
000452:0x00096100:	call	Dot(axis, vec)
000452:0x00096118:	scalev	@v03, axis, #return
000452:0x00096128:	movev	@v02, @v03
000452:0x00096138:	mulf	@f03, angle, DEG2RAD
000452:0x00096148:	move	@f02, @f03
000452:0x00096158:	icall	Cos(@f02)
000452:0x00096168:	subf	@f04, _f1.000000, #return
000452:0x00096178:	move	@f03, @f04
000452:0x00096188:	scalev	@v02, @v02, @f03
000452:0x00096198:	movev	@v01, @v02
000452:0x000961a8:	addv	#return, @v00, @v01
000452:0x000961b8:	rts
000452:0x000961c0:	rts
vector::RotateAroundZeroRad()
000465:0x000961c8:	icall	Cos(angle)
000465:0x000961d8:	scalev	@v02, vec, #return
000465:0x000961e8:	movev	@v01, @v02
000465:0x000961f8:	crossv	@v04, axis, vec
000465:0x00096208:	movev	@v03, @v04
000465:0x00096218:	icall	Sin(angle)
000465:0x00096228:	scalev	@v03, @v03, #return
000465:0x00096238:	movev	@v02, @v03
000465:0x00096248:	addv	@v01, @v01, @v02
000465:0x00096258:	movev	@v00, @v01
000465:0x00096268:	call	Dot(axis, vec)
000465:0x00096280:	scalev	@v03, axis, #return
000465:0x00096290:	movev	@v02, @v03
000465:0x000962a0:	icall	Cos(angle)
000465:0x000962b0:	subf	@f01, _f1.000000, #return
000465:0x000962c0:	move	@f00, @f01
000465:0x000962d0:	scalev	@v02, @v02, @f00
000465:0x000962e0:	movev	@v01, @v02
000465:0x000962f0:	addv	#return, @v00, @v01
000465:0x00096300:	rts
000465:0x00096308:	rts
vector::RotateAroundZero()
000479:0x00096310:	scalev	@v02, pos, cosAngle
000479:0x00096320:	movev	@v01, @v02
000479:0x00096330:	crossv	@v04, axis, pos
000479:0x00096340:	movev	@v03, @v04
000479:0x00096350:	scalev	@v03, @v03, sinAngle
000479:0x00096360:	movev	@v02, @v03
000479:0x00096370:	addv	@v01, @v01, @v02
000479:0x00096380:	movev	@v00, @v01
000479:0x00096390:	call	Dot(axis, pos)
000479:0x000963a8:	scalev	@v03, axis, #return
000479:0x000963b8:	movev	@v02, @v03
000479:0x000963c8:	subf	@f01, _f1.000000, cosAngle
000479:0x000963d8:	move	@f00, @f01
000479:0x000963e8:	scalev	@v02, @v02, @f00
000479:0x000963f8:	movev	@v01, @v02
000479:0x00096408:	addv	#return, @v00, @v01
000479:0x00096418:	rts
000479:0x00096420:	rts
vector::RotateAroundPoint()
000493:0x00096490:	subv	offsetPos, pos, point
000494:0x000964a0:	call	dGetInteractionLayer(offsetPos, axis, cosAngle)
000494:0x000964c0:	addv	#return, #return, point
000494:0x000964d0:	rts
000494:0x000964d8:	rts
vector::ArrayToVec()
000504:0x000964e0:	ifv	@f00, arr[0x000000]
000504:0x000964f0:	ifv	@f01, arr[0x000001]
000504:0x00096500:	ifv	@f02, arr[0x000002]
000504:0x00096510:	ncall	Vector(@f00, @f01, @f02)
000504:0x00096528:	movev	#return, #return
000504:0x00096538:	rts
000504:0x00096540:	rts
typename::EnumToString()
000552:0x00096610:	ncall	GetVariableCount(e)
000552:0x00096620:	move	cnt, #return
000555:0x00096630:	imove	i, 0x000000
000555:0x00096640:	jump	0x096660
000555:0x00096648:	move	@m00, i
000555:0x00096658:	inc	i
000555:0x00096660:	cmpi	i, cnt
000555:0x00096670:	bge	0x096728
000557:0x00096678:	ncall	GetVariableType(e, i)
000557:0x00096688:	movea	@m00, #return
000557:0x00096698:	cmpi	@m00, _T(int)
000557:0x000966a8:	bne	0x096720
000557:0x000966b0:	icall	GetVariableValue(e, null, i, val)
000557:0x000966c8:	cmpi	#return, _i0
000557:0x000966d8:	beq	0x096720
000557:0x000966e0:	cmpi	val, enumValue
000557:0x000966f0:	bne	0x096720
000559:0x000966f8:	ncall	GetVariableName(e, i)
000559:0x00096708:	moves	#return, #return
000559:0x00096718:	rts
000559:0x00096720:	jump	0x096648
000563:0x00096728:	moves	#return, _s'unknown'
000563:0x00096738:	rts
000563:0x00096740:	rts
typename::StringToEnum()
000574:0x000967c0:	ncall	GetVariableCount(e)
000574:0x000967d0:	move	count, #return
000577:0x000967e0:	imove	i, 0x000000
000577:0x000967f0:	jump	0x096810
000577:0x000967f8:	move	@m00, i
000577:0x00096808:	inc	i
000577:0x00096810:	cmpi	i, count
000577:0x00096820:	bge	0x0968e8
000579:0x00096828:	ncall	GetVariableType(e, i)
000579:0x00096838:	movea	@m00, #return
000579:0x00096848:	cmpi	@m00, _T(int)
000579:0x00096858:	bne	0x0968e0
000579:0x00096860:	icall	GetVariableValue(e, null, i, value)
000579:0x00096878:	cmpi	#return, _i0
000579:0x00096888:	beq	0x0968e0
000579:0x00096890:	ncall	GetVariableName(e, i)
000579:0x000968a0:	moves	@s00, #return
000579:0x000968b0:	cmps	@s00, enumName
000579:0x000968c0:	bne	0x0968e0
000581:0x000968c8:	move	#return, value
000581:0x000968d8:	rts
000581:0x000968e0:	jump	0x0967f8
000585:0x000968e8:	imove	#return, 0xffffffff
000585:0x000968f8:	rts
000585:0x00096900:	rts
EnumTools::EnumToString()
000603:0x00096908:	call	EnumToString(e, enumValue)
000603:0x00096920:	moves	#return, #return
000603:0x00096930:	rts
000603:0x00096938:	rts
EnumTools::StringToEnum()
000614:0x00096940:	call	StringToEnum(e, enumName)
000614:0x00096958:	move	#return, #return
000614:0x00096968:	rts
000614:0x00096970:	rts
EnumTools::GetEnumSize()
000625:0x00096978:	ncall	GetVariableCount(e)
000625:0x00096988:	move	#return, #return
000625:0x00096998:	rts
000625:0x000969a0:	rts
EnumTools::GetEnumValue()
000637:0x000969d0:	icall	GetVariableValue(e, null, idx, value)
000638:0x000969e8:	move	#return, value
000638:0x000969f8:	rts
000638:0x00096a00:	rts
EnumTools::GetLastEnumValue()
000650:0x00096a60:	ncall	GetVariableCount(e)
000650:0x00096a70:	subi	@m01, #return, _i1
000650:0x00096a80:	move	@m00, @m01
000650:0x00096a90:	icall	GetVariableValue(e, null, @m00, lastValue)
000651:0x00096aa8:	move	#return, lastValue
000651:0x00096ab8:	rts
000651:0x00096ac0:	rts
TraceParam::TraceParam()
//scripts/1_Core/proto\enworld.c
000212:0x00096ac8:	imove	LayerMask, 0xffffffff
000212:0x00096ad8:	rts
#InitGlobals()
//scripts/1_Core/proto\serializer.c
000106:0x00096d10:	ori	INPUT_DEVICE_MOUSE_AXIS, INPUT_DEVICE_MOUSE, INPUT_AXIS
000106:0x00096d20:	ori	INPUT_DEVICE_STICK_AXIS, INPUT_DEVICE_STICK, INPUT_AXIS
000106:0x00096d30:	ori	INPUT_DEVICE_STICK_POV, INPUT_DEVICE_STICK, INPUT_POV
000106:0x00096d40:	ori	INPUT_DEVICE_GAMEPAD_AXIS, INPUT_DEVICE_GAMEPAD, INPUT_AXIS
000106:0x00096d50:	imove	@m00, 0x000000
000106:0x00096d60:	ctv	m_ZeroPad[@m00], _s''
000106:0x00096d70:	inc	@m00
000106:0x00096d78:	ctv	m_ZeroPad[@m00], _s'0'
000106:0x00096d88:	inc	@m00
000106:0x00096d90:	ctv	m_ZeroPad[@m00], _s'00'
000106:0x00096da0:	inc	@m00
000106:0x00096da8:	ctv	m_ZeroPad[@m00], _s'000'
000106:0x00096db8:	inc	@m00
000106:0x00096dc0:	ctv	m_ZeroPad[@m00], _s'0000'
000106:0x00096dd0:	inc	@m00
000106:0x00096dd8:	ctv	m_ZeroPad[@m00], _s'00000'
000106:0x00096de8:	inc	@m00
000106:0x00096df0:	ctv	m_ZeroPad[@m00], _s'000000'
000106:0x00096e00:	inc	@m00
000106:0x00096e08:	ctv	m_ZeroPad[@m00], _s'0000000'
000106:0x00096e18:	inc	@m00
000106:0x00096e20:	subf	@f01, _f0.000000, FLT_MAX
000106:0x00096e30:	move	LOWEST, @f01
000106:0x00096e40:	imove	cmask, 0xff00ff
000106:0x00096e50:	rts
